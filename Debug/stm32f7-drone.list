
stm32f7-drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007890  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08007a70  08007a70  00017a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ad4  08007ad4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007ad4  08007ad4  00017ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007adc  08007adc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007adc  08007adc  00017adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ae0  08007ae0  00017ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  20000070  08007b54  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  08007b54  00020394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013dbe  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029ae  00000000  00000000  00033e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001200  00000000  00000000  00036810  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001098  00000000  00000000  00037a10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000246e1  00000000  00000000  00038aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f1aa  00000000  00000000  0005d189  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e14a7  00000000  00000000  0006c333  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014d7da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f70  00000000  00000000  0014d858  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007a58 	.word	0x08007a58

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08007a58 	.word	0x08007a58

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b972 	b.w	8000da8 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	4688      	mov	r8, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d14b      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aea:	428a      	cmp	r2, r1
 8000aec:	4615      	mov	r5, r2
 8000aee:	d967      	bls.n	8000bc0 <__udivmoddi4+0xe4>
 8000af0:	fab2 f282 	clz	r2, r2
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0720 	rsb	r7, r2, #32
 8000afa:	fa01 f302 	lsl.w	r3, r1, r2
 8000afe:	fa20 f707 	lsr.w	r7, r0, r7
 8000b02:	4095      	lsls	r5, r2
 8000b04:	ea47 0803 	orr.w	r8, r7, r3
 8000b08:	4094      	lsls	r4, r2
 8000b0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b0e:	0c23      	lsrs	r3, r4, #16
 8000b10:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b14:	fa1f fc85 	uxth.w	ip, r5
 8000b18:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b1c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b20:	fb07 f10c 	mul.w	r1, r7, ip
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x60>
 8000b28:	18eb      	adds	r3, r5, r3
 8000b2a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b2e:	f080 811b 	bcs.w	8000d68 <__udivmoddi4+0x28c>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 8118 	bls.w	8000d68 <__udivmoddi4+0x28c>
 8000b38:	3f02      	subs	r7, #2
 8000b3a:	442b      	add	r3, r5
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b44:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b4c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b50:	45a4      	cmp	ip, r4
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x8c>
 8000b54:	192c      	adds	r4, r5, r4
 8000b56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b5a:	f080 8107 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b5e:	45a4      	cmp	ip, r4
 8000b60:	f240 8104 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b64:	3802      	subs	r0, #2
 8000b66:	442c      	add	r4, r5
 8000b68:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b6c:	eba4 040c 	sub.w	r4, r4, ip
 8000b70:	2700      	movs	r7, #0
 8000b72:	b11e      	cbz	r6, 8000b7c <__udivmoddi4+0xa0>
 8000b74:	40d4      	lsrs	r4, r2
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7c:	4639      	mov	r1, r7
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d909      	bls.n	8000b9a <__udivmoddi4+0xbe>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80eb 	beq.w	8000d62 <__udivmoddi4+0x286>
 8000b8c:	2700      	movs	r7, #0
 8000b8e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b92:	4638      	mov	r0, r7
 8000b94:	4639      	mov	r1, r7
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	fab3 f783 	clz	r7, r3
 8000b9e:	2f00      	cmp	r7, #0
 8000ba0:	d147      	bne.n	8000c32 <__udivmoddi4+0x156>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d302      	bcc.n	8000bac <__udivmoddi4+0xd0>
 8000ba6:	4282      	cmp	r2, r0
 8000ba8:	f200 80fa 	bhi.w	8000da0 <__udivmoddi4+0x2c4>
 8000bac:	1a84      	subs	r4, r0, r2
 8000bae:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	4698      	mov	r8, r3
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	d0e0      	beq.n	8000b7c <__udivmoddi4+0xa0>
 8000bba:	e9c6 4800 	strd	r4, r8, [r6]
 8000bbe:	e7dd      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000bc0:	b902      	cbnz	r2, 8000bc4 <__udivmoddi4+0xe8>
 8000bc2:	deff      	udf	#255	; 0xff
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	2a00      	cmp	r2, #0
 8000bca:	f040 808f 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bce:	1b49      	subs	r1, r1, r5
 8000bd0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bd4:	fa1f f885 	uxth.w	r8, r5
 8000bd8:	2701      	movs	r7, #1
 8000bda:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000be4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bec:	4299      	cmp	r1, r3
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bf0:	18eb      	adds	r3, r5, r3
 8000bf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4299      	cmp	r1, r3
 8000bfa:	f200 80cd 	bhi.w	8000d98 <__udivmoddi4+0x2bc>
 8000bfe:	4684      	mov	ip, r0
 8000c00:	1a59      	subs	r1, r3, r1
 8000c02:	b2a3      	uxth	r3, r4
 8000c04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c08:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c10:	fb08 f800 	mul.w	r8, r8, r0
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0x14c>
 8000c18:	192c      	adds	r4, r5, r4
 8000c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x14a>
 8000c20:	45a0      	cmp	r8, r4
 8000c22:	f200 80b6 	bhi.w	8000d92 <__udivmoddi4+0x2b6>
 8000c26:	4618      	mov	r0, r3
 8000c28:	eba4 0408 	sub.w	r4, r4, r8
 8000c2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c30:	e79f      	b.n	8000b72 <__udivmoddi4+0x96>
 8000c32:	f1c7 0c20 	rsb	ip, r7, #32
 8000c36:	40bb      	lsls	r3, r7
 8000c38:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c3c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c40:	fa01 f407 	lsl.w	r4, r1, r7
 8000c44:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c48:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c4c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c50:	4325      	orrs	r5, r4
 8000c52:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c56:	0c2c      	lsrs	r4, r5, #16
 8000c58:	fb08 3319 	mls	r3, r8, r9, r3
 8000c5c:	fa1f fa8e 	uxth.w	sl, lr
 8000c60:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c64:	fb09 f40a 	mul.w	r4, r9, sl
 8000c68:	429c      	cmp	r4, r3
 8000c6a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c6e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1e 0303 	adds.w	r3, lr, r3
 8000c78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c7c:	f080 8087 	bcs.w	8000d8e <__udivmoddi4+0x2b2>
 8000c80:	429c      	cmp	r4, r3
 8000c82:	f240 8084 	bls.w	8000d8e <__udivmoddi4+0x2b2>
 8000c86:	f1a9 0902 	sub.w	r9, r9, #2
 8000c8a:	4473      	add	r3, lr
 8000c8c:	1b1b      	subs	r3, r3, r4
 8000c8e:	b2ad      	uxth	r5, r5
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c9c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ca0:	45a2      	cmp	sl, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	d26b      	bcs.n	8000d86 <__udivmoddi4+0x2aa>
 8000cae:	45a2      	cmp	sl, r4
 8000cb0:	d969      	bls.n	8000d86 <__udivmoddi4+0x2aa>
 8000cb2:	3802      	subs	r0, #2
 8000cb4:	4474      	add	r4, lr
 8000cb6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cba:	fba0 8902 	umull	r8, r9, r0, r2
 8000cbe:	eba4 040a 	sub.w	r4, r4, sl
 8000cc2:	454c      	cmp	r4, r9
 8000cc4:	46c2      	mov	sl, r8
 8000cc6:	464b      	mov	r3, r9
 8000cc8:	d354      	bcc.n	8000d74 <__udivmoddi4+0x298>
 8000cca:	d051      	beq.n	8000d70 <__udivmoddi4+0x294>
 8000ccc:	2e00      	cmp	r6, #0
 8000cce:	d069      	beq.n	8000da4 <__udivmoddi4+0x2c8>
 8000cd0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cd4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cd8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cdc:	40fd      	lsrs	r5, r7
 8000cde:	40fc      	lsrs	r4, r7
 8000ce0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ce4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ce8:	2700      	movs	r7, #0
 8000cea:	e747      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000cec:	f1c2 0320 	rsb	r3, r2, #32
 8000cf0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cf4:	4095      	lsls	r5, r2
 8000cf6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d02:	4338      	orrs	r0, r7
 8000d04:	0c01      	lsrs	r1, r0, #16
 8000d06:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d0a:	fa1f f885 	uxth.w	r8, r5
 8000d0e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d16:	fb07 f308 	mul.w	r3, r7, r8
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d20:	d907      	bls.n	8000d32 <__udivmoddi4+0x256>
 8000d22:	1869      	adds	r1, r5, r1
 8000d24:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d28:	d22f      	bcs.n	8000d8a <__udivmoddi4+0x2ae>
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d92d      	bls.n	8000d8a <__udivmoddi4+0x2ae>
 8000d2e:	3f02      	subs	r7, #2
 8000d30:	4429      	add	r1, r5
 8000d32:	1acb      	subs	r3, r1, r3
 8000d34:	b281      	uxth	r1, r0
 8000d36:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d3a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d42:	fb00 f308 	mul.w	r3, r0, r8
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x27e>
 8000d4a:	1869      	adds	r1, r5, r1
 8000d4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d50:	d217      	bcs.n	8000d82 <__udivmoddi4+0x2a6>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d915      	bls.n	8000d82 <__udivmoddi4+0x2a6>
 8000d56:	3802      	subs	r0, #2
 8000d58:	4429      	add	r1, r5
 8000d5a:	1ac9      	subs	r1, r1, r3
 8000d5c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d60:	e73b      	b.n	8000bda <__udivmoddi4+0xfe>
 8000d62:	4637      	mov	r7, r6
 8000d64:	4630      	mov	r0, r6
 8000d66:	e709      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000d68:	4607      	mov	r7, r0
 8000d6a:	e6e7      	b.n	8000b3c <__udivmoddi4+0x60>
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	e6fb      	b.n	8000b68 <__udivmoddi4+0x8c>
 8000d70:	4541      	cmp	r1, r8
 8000d72:	d2ab      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d74:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d78:	eb69 020e 	sbc.w	r2, r9, lr
 8000d7c:	3801      	subs	r0, #1
 8000d7e:	4613      	mov	r3, r2
 8000d80:	e7a4      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d82:	4660      	mov	r0, ip
 8000d84:	e7e9      	b.n	8000d5a <__udivmoddi4+0x27e>
 8000d86:	4618      	mov	r0, r3
 8000d88:	e795      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8a:	4667      	mov	r7, ip
 8000d8c:	e7d1      	b.n	8000d32 <__udivmoddi4+0x256>
 8000d8e:	4681      	mov	r9, r0
 8000d90:	e77c      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d92:	3802      	subs	r0, #2
 8000d94:	442c      	add	r4, r5
 8000d96:	e747      	b.n	8000c28 <__udivmoddi4+0x14c>
 8000d98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d9c:	442b      	add	r3, r5
 8000d9e:	e72f      	b.n	8000c00 <__udivmoddi4+0x124>
 8000da0:	4638      	mov	r0, r7
 8000da2:	e708      	b.n	8000bb6 <__udivmoddi4+0xda>
 8000da4:	4637      	mov	r7, r6
 8000da6:	e6e9      	b.n	8000b7c <__udivmoddi4+0xa0>

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <ACCEL_INIT>:

#define ACCEL_ADDR			0x6A << 1	// (1101010)
#define FUNC_CFG_ACCESS		0x1

void ACCEL_INIT(I2C_HandleTypeDef* i2c)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af02      	add	r7, sp, #8
 8000db2:	6078      	str	r0, [r7, #4]
	uint8_t txBuf = 0b1111111;
 8000db4:	237f      	movs	r3, #127	; 0x7f
 8000db6:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write_DMA(i2c, ACCEL_ADDR , FUNC_CFG_ACCESS, 0x1, &txBuf, 0x1);
 8000db8:	2301      	movs	r3, #1
 8000dba:	9301      	str	r3, [sp, #4]
 8000dbc:	f107 030f 	add.w	r3, r7, #15
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	21d4      	movs	r1, #212	; 0xd4
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f002 fbc1 	bl	8003550 <HAL_I2C_Mem_Write_DMA>
	while(i2c->hdmatx->XferAbortCallback);
 8000dce:	bf00      	nop
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1fa      	bne.n	8000dd0 <ACCEL_INIT+0x24>
	i2c->State = HAL_I2C_STATE_READY;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2220      	movs	r2, #32
 8000dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	//HAL_I2C_Slave_R
}
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <ADC_INIT>:
/* Function Summary: The input from the ADC handler will be piped directly to the inputVar via DMA.
 * Parameters: hadc - ADC handler for particular ADC pin. inputVar - Variable you want ADC values stored into.
 */

void ADC_INIT(ADC_HandleTypeDef* hadc, uint32_t* inputVar)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
 8000df2:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc, inputVar, sizeof(*inputVar));
 8000df4:	2204      	movs	r2, #4
 8000df6:	6839      	ldr	r1, [r7, #0]
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f001 f8f1 	bl	8001fe0 <HAL_ADC_Start_DMA>
	HAL_ADC_Start(hadc);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f001 f82e 	bl	8001e60 <HAL_ADC_Start>
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <ESC_INIT_CONTROLLER>:
#endif

#if defined(MULTISHOT) || defined(ONESHOT)

ESC_CONTROLLER* ESC_INIT_CONTROLLER(TIM_HandleTypeDef* timer, DMA_HandleTypeDef* dma)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
	timer->Instance->ARR = TIMER_ARR - 1;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f241 1293 	movw	r2, #4499	; 0x1193
 8000e1e:	62da      	str	r2, [r3, #44]	; 0x2c
	ESC_CONTROLLER* ESC_CONTROLLER = malloc(sizeof(ESC_CONTROLLER) * ESC_COUNT);
 8000e20:	2010      	movs	r0, #16
 8000e22:	f006 fa03 	bl	800722c <malloc>
 8000e26:	4603      	mov	r3, r0
 8000e28:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < ESC_COUNT; i++)
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	e060      	b.n	8000ef2 <ESC_INIT_CONTROLLER+0xe6>
	{
		ESC_CONTROLLER[i].Throttle = 0;
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	4613      	mov	r3, r2
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	4413      	add	r3, r2
 8000e38:	00db      	lsls	r3, r3, #3
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	4413      	add	r3, r2
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
		ESC_CONTROLLER[i].Channel = 4*i;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	0099      	lsls	r1, r3, #2
 8000e48:	68fa      	ldr	r2, [r7, #12]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	4413      	add	r3, r2
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	461a      	mov	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	4413      	add	r3, r2
 8000e58:	460a      	mov	r2, r1
 8000e5a:	605a      	str	r2, [r3, #4]
		ESC_CONTROLLER[i].Number = i;
 8000e5c:	68fa      	ldr	r2, [r7, #12]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	4413      	add	r3, r2
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	461a      	mov	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	609a      	str	r2, [r3, #8]
		ESC_CONTROLLER[i].Timer = timer;
 8000e70:	68fa      	ldr	r2, [r7, #12]
 8000e72:	4613      	mov	r3, r2
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	4413      	add	r3, r2
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	4413      	add	r3, r2
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	60da      	str	r2, [r3, #12]
		ESC_CONTROLLER[i].DMA = dma;
 8000e84:	68fa      	ldr	r2, [r7, #12]
 8000e86:	4613      	mov	r3, r2
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	4413      	add	r3, r2
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	461a      	mov	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4413      	add	r3, r2
 8000e94:	683a      	ldr	r2, [r7, #0]
 8000e96:	611a      	str	r2, [r3, #16]
		ESC_CONTROLLER[i].CCR = (uint32_t) &(timer->Instance->CCR1) + (4*i);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	3334      	adds	r3, #52	; 0x34
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	4413      	add	r3, r2
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	1842      	adds	r2, r0, r1
 8000eb8:	615a      	str	r2, [r3, #20]
		*((uint32_t *) ESC_CONTROLLER[i].CCR) = 0;
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	4413      	add	r3, r2
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	4413      	add	r3, r2
 8000eca:	695b      	ldr	r3, [r3, #20]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	2300      	movs	r3, #0
 8000ed0:	6013      	str	r3, [r2, #0]
		HAL_TIM_PWM_Start(timer, ESC_CONTROLLER[i].Channel);
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	4413      	add	r3, r2
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	461a      	mov	r2, r3
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f004 ff14 	bl	8005d14 <HAL_TIM_PWM_Start>
	for (int i = 0; i < ESC_COUNT; i++)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2b03      	cmp	r3, #3
 8000ef6:	dd9b      	ble.n	8000e30 <ESC_INIT_CONTROLLER+0x24>
	}
	return ESC_CONTROLLER;
 8000ef8:	68bb      	ldr	r3, [r7, #8]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <ESC_UPDATE_THROTTLE>:

void ESC_UPDATE_THROTTLE(ESC_CONTROLLER* ESC, uint32_t throttle)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
	__HAL_DMA_CLEAR_FLAG(ESC->DMA, (DMA_FLAG_TCIF0_4 | DMA_FLAG_HTIF0_4 | DMA_FLAG_FEIF0_4));
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	691b      	ldr	r3, [r3, #16]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <ESC_UPDATE_THROTTLE+0xa4>)
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d903      	bls.n	8000f24 <ESC_UPDATE_THROTTLE+0x20>
 8000f1c:	4b23      	ldr	r3, [pc, #140]	; (8000fac <ESC_UPDATE_THROTTLE+0xa8>)
 8000f1e:	2231      	movs	r2, #49	; 0x31
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	e018      	b.n	8000f56 <ESC_UPDATE_THROTTLE+0x52>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	691b      	ldr	r3, [r3, #16]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	4b20      	ldr	r3, [pc, #128]	; (8000fb0 <ESC_UPDATE_THROTTLE+0xac>)
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d903      	bls.n	8000f3a <ESC_UPDATE_THROTTLE+0x36>
 8000f32:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <ESC_UPDATE_THROTTLE+0xa8>)
 8000f34:	2231      	movs	r2, #49	; 0x31
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	e00d      	b.n	8000f56 <ESC_UPDATE_THROTTLE+0x52>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <ESC_UPDATE_THROTTLE+0xb0>)
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d903      	bls.n	8000f50 <ESC_UPDATE_THROTTLE+0x4c>
 8000f48:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <ESC_UPDATE_THROTTLE+0xb4>)
 8000f4a:	2231      	movs	r2, #49	; 0x31
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	e002      	b.n	8000f56 <ESC_UPDATE_THROTTLE+0x52>
 8000f50:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <ESC_UPDATE_THROTTLE+0xb4>)
 8000f52:	2231      	movs	r2, #49	; 0x31
 8000f54:	609a      	str	r2, [r3, #8]
	ESC->DMA->Instance->NDTR = 1;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	691b      	ldr	r3, [r3, #16]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	605a      	str	r2, [r3, #4]
	ESC->DMA->Instance->M0AR = (uint32_t) &throttle;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	691b      	ldr	r3, [r3, #16]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	463a      	mov	r2, r7
 8000f68:	60da      	str	r2, [r3, #12]
	ESC->DMA->Instance->PAR = ESC->CCR;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	6952      	ldr	r2, [r2, #20]
 8000f74:	609a      	str	r2, [r3, #8]
	__HAL_DMA_ENABLE(ESC->DMA);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	691b      	ldr	r3, [r3, #16]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f042 0201 	orr.w	r2, r2, #1
 8000f88:	601a      	str	r2, [r3, #0]
	while(ESC->DMA->Instance->CR & 0x1);
 8000f8a:	bf00      	nop
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	691b      	ldr	r3, [r3, #16]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1f7      	bne.n	8000f8c <ESC_UPDATE_THROTTLE+0x88>
 }
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	40026458 	.word	0x40026458
 8000fac:	40026400 	.word	0x40026400
 8000fb0:	400260b8 	.word	0x400260b8
 8000fb4:	40026058 	.word	0x40026058
 8000fb8:	40026000 	.word	0x40026000
 8000fbc:	00000000 	.word	0x00000000

08000fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc0:	b590      	push	{r4, r7, lr}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc6:	f000 fe88 	bl	8001cda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fca:	f000 f877 	bl	80010bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fce:	f000 faa9 	bl	8001524 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fd2:	f000 fa65 	bl	80014a0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000fd6:	f000 fa2b 	bl	8001430 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8000fda:	f000 fa59 	bl	8001490 <MX_USB_OTG_FS_USB_Init>
  MX_TIM4_Init();
 8000fde:	f000 f997 	bl	8001310 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000fe2:	f000 f903 	bl	80011ec <MX_ADC1_Init>
  MX_I2C1_Init();
 8000fe6:	f000 f953 	bl	8001290 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ADC_INIT(&hadc1, &throttlePot);
 8000fea:	492b      	ldr	r1, [pc, #172]	; (8001098 <main+0xd8>)
 8000fec:	482b      	ldr	r0, [pc, #172]	; (800109c <main+0xdc>)
 8000fee:	f7ff fefc 	bl	8000dea <ADC_INIT>
  ESC_CONTROLLER* myESCSet = ESC_INIT_CONTROLLER(&htim4, &hdma_tim4_ch1);
 8000ff2:	492b      	ldr	r1, [pc, #172]	; (80010a0 <main+0xe0>)
 8000ff4:	482b      	ldr	r0, [pc, #172]	; (80010a4 <main+0xe4>)
 8000ff6:	f7ff ff09 	bl	8000e0c <ESC_INIT_CONTROLLER>
 8000ffa:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ACCEL_INIT(&hi2c1);
 8000ffc:	482a      	ldr	r0, [pc, #168]	; (80010a8 <main+0xe8>)
 8000ffe:	f7ff fed5 	bl	8000dac <ACCEL_INIT>
	  sprintf((char*)buf, "Value: %lu\n\r", throttlePot);
 8001002:	4b25      	ldr	r3, [pc, #148]	; (8001098 <main+0xd8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	4928      	ldr	r1, [pc, #160]	; (80010ac <main+0xec>)
 800100a:	4829      	ldr	r0, [pc, #164]	; (80010b0 <main+0xf0>)
 800100c:	f006 f9d6 	bl	80073bc <siprintf>
	  HAL_UART_Transmit(&huart3, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001010:	4827      	ldr	r0, [pc, #156]	; (80010b0 <main+0xf0>)
 8001012:	f7ff f905 	bl	8000220 <strlen>
 8001016:	4603      	mov	r3, r0
 8001018:	b29a      	uxth	r2, r3
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	4924      	ldr	r1, [pc, #144]	; (80010b0 <main+0xf0>)
 8001020:	4824      	ldr	r0, [pc, #144]	; (80010b4 <main+0xf4>)
 8001022:	f005 fc51 	bl	80068c8 <HAL_UART_Transmit>
//	  throttle = (throttlePot / (6.07)) + 675;		// MULTISHOT
	  throttle = (throttlePot / (1.82)) + 2250;		// ONESHOT
 8001026:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <main+0xd8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fa92 	bl	8000554 <__aeabi_ui2d>
 8001030:	a315      	add	r3, pc, #84	; (adr r3, 8001088 <main+0xc8>)
 8001032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001036:	f7ff fc31 	bl	800089c <__aeabi_ddiv>
 800103a:	4603      	mov	r3, r0
 800103c:	460c      	mov	r4, r1
 800103e:	4618      	mov	r0, r3
 8001040:	4621      	mov	r1, r4
 8001042:	a313      	add	r3, pc, #76	; (adr r3, 8001090 <main+0xd0>)
 8001044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001048:	f7ff f948 	bl	80002dc <__adddf3>
 800104c:	4603      	mov	r3, r0
 800104e:	460c      	mov	r4, r1
 8001050:	4618      	mov	r0, r3
 8001052:	4621      	mov	r1, r4
 8001054:	f7ff fd0a 	bl	8000a6c <__aeabi_d2uiz>
 8001058:	4602      	mov	r2, r0
 800105a:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <main+0xf8>)
 800105c:	601a      	str	r2, [r3, #0]
	  ESC_UPDATE_THROTTLE(&myESCSet[1], throttle);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f103 0218 	add.w	r2, r3, #24
 8001064:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <main+0xf8>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4619      	mov	r1, r3
 800106a:	4610      	mov	r0, r2
 800106c:	f7ff ff4a 	bl	8000f04 <ESC_UPDATE_THROTTLE>
	  throttle++;
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <main+0xf8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	3301      	adds	r3, #1
 8001076:	4a10      	ldr	r2, [pc, #64]	; (80010b8 <main+0xf8>)
 8001078:	6013      	str	r3, [r2, #0]
	  HAL_Delay(10);
 800107a:	200a      	movs	r0, #10
 800107c:	f000 fe8a 	bl	8001d94 <HAL_Delay>
	  ACCEL_INIT(&hi2c1);
 8001080:	e7bc      	b.n	8000ffc <main+0x3c>
 8001082:	bf00      	nop
 8001084:	f3af 8000 	nop.w
 8001088:	51eb851f 	.word	0x51eb851f
 800108c:	3ffd1eb8 	.word	0x3ffd1eb8
 8001090:	00000000 	.word	0x00000000
 8001094:	40a19400 	.word	0x40a19400
 8001098:	20000388 	.word	0x20000388
 800109c:	20000208 	.word	0x20000208
 80010a0:	20000328 	.word	0x20000328
 80010a4:	2000009c 	.word	0x2000009c
 80010a8:	200001bc 	.word	0x200001bc
 80010ac:	08007a70 	.word	0x08007a70
 80010b0:	20000310 	.word	0x20000310
 80010b4:	200000dc 	.word	0x200000dc
 80010b8:	2000008c 	.word	0x2000008c

080010bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b0b4      	sub	sp, #208	; 0xd0
 80010c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80010c6:	2230      	movs	r2, #48	; 0x30
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f006 f8b6 	bl	800723c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	2280      	movs	r2, #128	; 0x80
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f006 f8a7 	bl	800723c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010ee:	f003 fd6d 	bl	8004bcc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f2:	4b3b      	ldr	r3, [pc, #236]	; (80011e0 <SystemClock_Config+0x124>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	4a3a      	ldr	r2, [pc, #232]	; (80011e0 <SystemClock_Config+0x124>)
 80010f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fc:	6413      	str	r3, [r2, #64]	; 0x40
 80010fe:	4b38      	ldr	r3, [pc, #224]	; (80011e0 <SystemClock_Config+0x124>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800110a:	4b36      	ldr	r3, [pc, #216]	; (80011e4 <SystemClock_Config+0x128>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a35      	ldr	r2, [pc, #212]	; (80011e4 <SystemClock_Config+0x128>)
 8001110:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	4b33      	ldr	r3, [pc, #204]	; (80011e4 <SystemClock_Config+0x128>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001122:	2301      	movs	r3, #1
 8001124:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001128:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800112c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001130:	2302      	movs	r3, #2
 8001132:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001136:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800113a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 800113e:	2308      	movs	r3, #8
 8001140:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001144:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001148:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800114c:	2302      	movs	r3, #2
 800114e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001152:	2309      	movs	r3, #9
 8001154:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001158:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800115c:	4618      	mov	r0, r3
 800115e:	f003 fd95 	bl	8004c8c <HAL_RCC_OscConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001168:	f000 fab4 	bl	80016d4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800116c:	f003 fd3e 	bl	8004bec <HAL_PWREx_EnableOverDrive>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001176:	f000 faad 	bl	80016d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117a:	230f      	movs	r3, #15
 800117c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001180:	2302      	movs	r3, #2
 8001182:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800118c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001190:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001198:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800119c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011a0:	2107      	movs	r1, #7
 80011a2:	4618      	mov	r0, r3
 80011a4:	f004 f816 	bl	80051d4 <HAL_RCC_ClockConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80011ae:	f000 fa91 	bl	80016d4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <SystemClock_Config+0x12c>)
 80011b4:	60fb      	str	r3, [r7, #12]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	66bb      	str	r3, [r7, #104]	; 0x68
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	4618      	mov	r0, r3
 80011ca:	f004 f9fb 	bl	80055c4 <HAL_RCCEx_PeriphCLKConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 80011d4:	f000 fa7e 	bl	80016d4 <Error_Handler>
  }
}
 80011d8:	bf00      	nop
 80011da:	37d0      	adds	r7, #208	; 0xd0
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40007000 	.word	0x40007000
 80011e8:	00204100 	.word	0x00204100

080011ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011f2:	463b      	mov	r3, r7
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011fe:	4b21      	ldr	r3, [pc, #132]	; (8001284 <MX_ADC1_Init+0x98>)
 8001200:	4a21      	ldr	r2, [pc, #132]	; (8001288 <MX_ADC1_Init+0x9c>)
 8001202:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001204:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <MX_ADC1_Init+0x98>)
 8001206:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800120a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800120c:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <MX_ADC1_Init+0x98>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001212:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <MX_ADC1_Init+0x98>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001218:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <MX_ADC1_Init+0x98>)
 800121a:	2201      	movs	r2, #1
 800121c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800121e:	4b19      	ldr	r3, [pc, #100]	; (8001284 <MX_ADC1_Init+0x98>)
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001226:	4b17      	ldr	r3, [pc, #92]	; (8001284 <MX_ADC1_Init+0x98>)
 8001228:	2200      	movs	r2, #0
 800122a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800122c:	4b15      	ldr	r3, [pc, #84]	; (8001284 <MX_ADC1_Init+0x98>)
 800122e:	4a17      	ldr	r2, [pc, #92]	; (800128c <MX_ADC1_Init+0xa0>)
 8001230:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001232:	4b14      	ldr	r3, [pc, #80]	; (8001284 <MX_ADC1_Init+0x98>)
 8001234:	2200      	movs	r2, #0
 8001236:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <MX_ADC1_Init+0x98>)
 800123a:	2201      	movs	r2, #1
 800123c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_ADC1_Init+0x98>)
 8001240:	2201      	movs	r2, #1
 8001242:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_ADC1_Init+0x98>)
 8001248:	2201      	movs	r2, #1
 800124a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800124c:	480d      	ldr	r0, [pc, #52]	; (8001284 <MX_ADC1_Init+0x98>)
 800124e:	f000 fdc3 	bl	8001dd8 <HAL_ADC_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001258:	f000 fa3c 	bl	80016d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800125c:	2309      	movs	r3, #9
 800125e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001260:	2301      	movs	r3, #1
 8001262:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001264:	2300      	movs	r3, #0
 8001266:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001268:	463b      	mov	r3, r7
 800126a:	4619      	mov	r1, r3
 800126c:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_ADC1_Init+0x98>)
 800126e:	f000 ffaf 	bl	80021d0 <HAL_ADC_ConfigChannel>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001278:	f000 fa2c 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000208 	.word	0x20000208
 8001288:	40012000 	.word	0x40012000
 800128c:	0f000001 	.word	0x0f000001

08001290 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <MX_I2C1_Init+0x74>)
 8001296:	4a1c      	ldr	r2, [pc, #112]	; (8001308 <MX_I2C1_Init+0x78>)
 8001298:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800129a:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <MX_I2C1_Init+0x74>)
 800129c:	4a1b      	ldr	r2, [pc, #108]	; (800130c <MX_I2C1_Init+0x7c>)
 800129e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 212;
 80012a0:	4b18      	ldr	r3, [pc, #96]	; (8001304 <MX_I2C1_Init+0x74>)
 80012a2:	22d4      	movs	r2, #212	; 0xd4
 80012a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012a6:	4b17      	ldr	r3, [pc, #92]	; (8001304 <MX_I2C1_Init+0x74>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012ac:	4b15      	ldr	r3, [pc, #84]	; (8001304 <MX_I2C1_Init+0x74>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012b2:	4b14      	ldr	r3, [pc, #80]	; (8001304 <MX_I2C1_Init+0x74>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <MX_I2C1_Init+0x74>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012be:	4b11      	ldr	r3, [pc, #68]	; (8001304 <MX_I2C1_Init+0x74>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <MX_I2C1_Init+0x74>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012ca:	480e      	ldr	r0, [pc, #56]	; (8001304 <MX_I2C1_Init+0x74>)
 80012cc:	f002 f8b0 	bl	8003430 <HAL_I2C_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012d6:	f000 f9fd 	bl	80016d4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012da:	2100      	movs	r1, #0
 80012dc:	4809      	ldr	r0, [pc, #36]	; (8001304 <MX_I2C1_Init+0x74>)
 80012de:	f003 fbde 	bl	8004a9e <HAL_I2CEx_ConfigAnalogFilter>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012e8:	f000 f9f4 	bl	80016d4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012ec:	2100      	movs	r1, #0
 80012ee:	4805      	ldr	r0, [pc, #20]	; (8001304 <MX_I2C1_Init+0x74>)
 80012f0:	f003 fc20 	bl	8004b34 <HAL_I2CEx_ConfigDigitalFilter>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012fa:	f000 f9eb 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200001bc 	.word	0x200001bc
 8001308:	40005400 	.word	0x40005400
 800130c:	20404768 	.word	0x20404768

08001310 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001322:	463b      	mov	r3, r7
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
 8001330:	615a      	str	r2, [r3, #20]
 8001332:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001334:	4b3c      	ldr	r3, [pc, #240]	; (8001428 <MX_TIM4_Init+0x118>)
 8001336:	4a3d      	ldr	r2, [pc, #244]	; (800142c <MX_TIM4_Init+0x11c>)
 8001338:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800133a:	4b3b      	ldr	r3, [pc, #236]	; (8001428 <MX_TIM4_Init+0x118>)
 800133c:	2200      	movs	r2, #0
 800133e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001340:	4b39      	ldr	r3, [pc, #228]	; (8001428 <MX_TIM4_Init+0x118>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 359;
 8001346:	4b38      	ldr	r3, [pc, #224]	; (8001428 <MX_TIM4_Init+0x118>)
 8001348:	f240 1267 	movw	r2, #359	; 0x167
 800134c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134e:	4b36      	ldr	r3, [pc, #216]	; (8001428 <MX_TIM4_Init+0x118>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001354:	4b34      	ldr	r3, [pc, #208]	; (8001428 <MX_TIM4_Init+0x118>)
 8001356:	2280      	movs	r2, #128	; 0x80
 8001358:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800135a:	4833      	ldr	r0, [pc, #204]	; (8001428 <MX_TIM4_Init+0x118>)
 800135c:	f004 fc7a 	bl	8005c54 <HAL_TIM_OC_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001366:	f000 f9b5 	bl	80016d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800136a:	482f      	ldr	r0, [pc, #188]	; (8001428 <MX_TIM4_Init+0x118>)
 800136c:	f004 fc9d 	bl	8005caa <HAL_TIM_PWM_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8001376:	f000 f9ad 	bl	80016d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	4619      	mov	r1, r3
 8001388:	4827      	ldr	r0, [pc, #156]	; (8001428 <MX_TIM4_Init+0x118>)
 800138a:	f005 f9c1 	bl	8006710 <HAL_TIMEx_MasterConfigSynchronization>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001394:	f000 f99e 	bl	80016d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001398:	2310      	movs	r3, #16
 800139a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013a8:	463b      	mov	r3, r7
 80013aa:	2200      	movs	r2, #0
 80013ac:	4619      	mov	r1, r3
 80013ae:	481e      	ldr	r0, [pc, #120]	; (8001428 <MX_TIM4_Init+0x118>)
 80013b0:	f004 fcf4 	bl	8005d9c <HAL_TIM_OC_ConfigChannel>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80013ba:	f000 f98b 	bl	80016d4 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_1);
 80013be:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <MX_TIM4_Init+0x118>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	699a      	ldr	r2, [r3, #24]
 80013c4:	4b18      	ldr	r3, [pc, #96]	; (8001428 <MX_TIM4_Init+0x118>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f042 0208 	orr.w	r2, r2, #8
 80013cc:	619a      	str	r2, [r3, #24]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ce:	2360      	movs	r3, #96	; 0x60
 80013d0:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013d2:	463b      	mov	r3, r7
 80013d4:	2204      	movs	r2, #4
 80013d6:	4619      	mov	r1, r3
 80013d8:	4813      	ldr	r0, [pc, #76]	; (8001428 <MX_TIM4_Init+0x118>)
 80013da:	f004 fd5d 	bl	8005e98 <HAL_TIM_PWM_ConfigChannel>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80013e4:	f000 f976 	bl	80016d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013e8:	463b      	mov	r3, r7
 80013ea:	2208      	movs	r2, #8
 80013ec:	4619      	mov	r1, r3
 80013ee:	480e      	ldr	r0, [pc, #56]	; (8001428 <MX_TIM4_Init+0x118>)
 80013f0:	f004 fd52 	bl	8005e98 <HAL_TIM_PWM_ConfigChannel>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80013fa:	f000 f96b 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  // Set DMA Transfers to 17 with DBL and destination to CCR1 (15) with DBA
  htim4.Instance->DCR =  TIM_DCR_DBA_1 | TIM_DCR_DBA_2 | TIM_DCR_DBA_3; // Transfer at CCR2, 1 transfer
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <MX_TIM4_Init+0x118>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	220e      	movs	r2, #14
 8001404:	649a      	str	r2, [r3, #72]	; 0x48
  // Enable Update DMA Request
  htim4.Instance->DIER = TIM_DIER_UDE;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <MX_TIM4_Init+0x118>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800140e:	60da      	str	r2, [r3, #12]
  // Enable DMA requests on CH1
  htim4.Instance->DIER = TIM_DIER_CC1DE;
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <MX_TIM4_Init+0x118>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001418:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800141a:	4803      	ldr	r0, [pc, #12]	; (8001428 <MX_TIM4_Init+0x118>)
 800141c:	f000 fb16 	bl	8001a4c <HAL_TIM_MspPostInit>

}
 8001420:	bf00      	nop
 8001422:	3728      	adds	r7, #40	; 0x28
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	2000009c 	.word	0x2000009c
 800142c:	40000800 	.word	0x40000800

08001430 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001434:	4b14      	ldr	r3, [pc, #80]	; (8001488 <MX_USART3_UART_Init+0x58>)
 8001436:	4a15      	ldr	r2, [pc, #84]	; (800148c <MX_USART3_UART_Init+0x5c>)
 8001438:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <MX_USART3_UART_Init+0x58>)
 800143c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001440:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <MX_USART3_UART_Init+0x58>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <MX_USART3_UART_Init+0x58>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <MX_USART3_UART_Init+0x58>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <MX_USART3_UART_Init+0x58>)
 8001456:	220c      	movs	r2, #12
 8001458:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <MX_USART3_UART_Init+0x58>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <MX_USART3_UART_Init+0x58>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <MX_USART3_UART_Init+0x58>)
 8001468:	2200      	movs	r2, #0
 800146a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <MX_USART3_UART_Init+0x58>)
 800146e:	2200      	movs	r2, #0
 8001470:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_USART3_UART_Init+0x58>)
 8001474:	f005 f9da 	bl	800682c <HAL_UART_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800147e:	f000 f929 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200000dc 	.word	0x200000dc
 800148c:	40004800 	.word	0x40004800

08001490 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014a6:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <MX_DMA_Init+0x80>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a1d      	ldr	r2, [pc, #116]	; (8001520 <MX_DMA_Init+0x80>)
 80014ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <MX_DMA_Init+0x80>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014be:	4b18      	ldr	r3, [pc, #96]	; (8001520 <MX_DMA_Init+0x80>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a17      	ldr	r2, [pc, #92]	; (8001520 <MX_DMA_Init+0x80>)
 80014c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <MX_DMA_Init+0x80>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2100      	movs	r1, #0
 80014da:	200b      	movs	r0, #11
 80014dc:	f001 fa19 	bl	8002912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80014e0:	200b      	movs	r0, #11
 80014e2:	f001 fa32 	bl	800294a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	2010      	movs	r0, #16
 80014ec:	f001 fa11 	bl	8002912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80014f0:	2010      	movs	r0, #16
 80014f2:	f001 fa2a 	bl	800294a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2100      	movs	r1, #0
 80014fa:	2011      	movs	r0, #17
 80014fc:	f001 fa09 	bl	8002912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001500:	2011      	movs	r0, #17
 8001502:	f001 fa22 	bl	800294a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	203c      	movs	r0, #60	; 0x3c
 800150c:	f001 fa01 	bl	8002912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001510:	203c      	movs	r0, #60	; 0x3c
 8001512:	f001 fa1a 	bl	800294a <HAL_NVIC_EnableIRQ>

}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800

08001524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08c      	sub	sp, #48	; 0x30
 8001528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152a:	f107 031c 	add.w	r3, r7, #28
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
 8001538:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800153a:	4b55      	ldr	r3, [pc, #340]	; (8001690 <MX_GPIO_Init+0x16c>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a54      	ldr	r2, [pc, #336]	; (8001690 <MX_GPIO_Init+0x16c>)
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b52      	ldr	r3, [pc, #328]	; (8001690 <MX_GPIO_Init+0x16c>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	61bb      	str	r3, [r7, #24]
 8001550:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001552:	4b4f      	ldr	r3, [pc, #316]	; (8001690 <MX_GPIO_Init+0x16c>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a4e      	ldr	r2, [pc, #312]	; (8001690 <MX_GPIO_Init+0x16c>)
 8001558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b4c      	ldr	r3, [pc, #304]	; (8001690 <MX_GPIO_Init+0x16c>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156a:	4b49      	ldr	r3, [pc, #292]	; (8001690 <MX_GPIO_Init+0x16c>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a48      	ldr	r2, [pc, #288]	; (8001690 <MX_GPIO_Init+0x16c>)
 8001570:	f043 0302 	orr.w	r3, r3, #2
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b46      	ldr	r3, [pc, #280]	; (8001690 <MX_GPIO_Init+0x16c>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001582:	4b43      	ldr	r3, [pc, #268]	; (8001690 <MX_GPIO_Init+0x16c>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a42      	ldr	r2, [pc, #264]	; (8001690 <MX_GPIO_Init+0x16c>)
 8001588:	f043 0308 	orr.w	r3, r3, #8
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b40      	ldr	r3, [pc, #256]	; (8001690 <MX_GPIO_Init+0x16c>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800159a:	4b3d      	ldr	r3, [pc, #244]	; (8001690 <MX_GPIO_Init+0x16c>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a3c      	ldr	r2, [pc, #240]	; (8001690 <MX_GPIO_Init+0x16c>)
 80015a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b3a      	ldr	r3, [pc, #232]	; (8001690 <MX_GPIO_Init+0x16c>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	4b37      	ldr	r3, [pc, #220]	; (8001690 <MX_GPIO_Init+0x16c>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a36      	ldr	r2, [pc, #216]	; (8001690 <MX_GPIO_Init+0x16c>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b34      	ldr	r3, [pc, #208]	; (8001690 <MX_GPIO_Init+0x16c>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80015ca:	2200      	movs	r2, #0
 80015cc:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80015d0:	4830      	ldr	r0, [pc, #192]	; (8001694 <MX_GPIO_Init+0x170>)
 80015d2:	f001 ff13 	bl	80033fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2140      	movs	r1, #64	; 0x40
 80015da:	482f      	ldr	r0, [pc, #188]	; (8001698 <MX_GPIO_Init+0x174>)
 80015dc:	f001 ff0e 	bl	80033fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80015e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015e6:	4b2d      	ldr	r3, [pc, #180]	; (800169c <MX_GPIO_Init+0x178>)
 80015e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	4619      	mov	r1, r3
 80015f4:	482a      	ldr	r0, [pc, #168]	; (80016a0 <MX_GPIO_Init+0x17c>)
 80015f6:	f001 fd67 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80015fa:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80015fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001600:	2301      	movs	r3, #1
 8001602:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	4619      	mov	r1, r3
 8001612:	4820      	ldr	r0, [pc, #128]	; (8001694 <MX_GPIO_Init+0x170>)
 8001614:	f001 fd58 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001618:	2340      	movs	r3, #64	; 0x40
 800161a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161c:	2301      	movs	r3, #1
 800161e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001628:	f107 031c 	add.w	r3, r7, #28
 800162c:	4619      	mov	r1, r3
 800162e:	481a      	ldr	r0, [pc, #104]	; (8001698 <MX_GPIO_Init+0x174>)
 8001630:	f001 fd4a 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001638:	2300      	movs	r3, #0
 800163a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001640:	f107 031c 	add.w	r3, r7, #28
 8001644:	4619      	mov	r1, r3
 8001646:	4814      	ldr	r0, [pc, #80]	; (8001698 <MX_GPIO_Init+0x174>)
 8001648:	f001 fd3e 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin PA10 USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|GPIO_PIN_10|USB_DM_Pin|USB_DP_Pin;
 800164c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001652:	2302      	movs	r3, #2
 8001654:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165a:	2303      	movs	r3, #3
 800165c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800165e:	230a      	movs	r3, #10
 8001660:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001662:	f107 031c 	add.w	r3, r7, #28
 8001666:	4619      	mov	r1, r3
 8001668:	480e      	ldr	r0, [pc, #56]	; (80016a4 <MX_GPIO_Init+0x180>)
 800166a:	f001 fd2d 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800166e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001674:	2300      	movs	r3, #0
 8001676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800167c:	f107 031c 	add.w	r3, r7, #28
 8001680:	4619      	mov	r1, r3
 8001682:	4808      	ldr	r0, [pc, #32]	; (80016a4 <MX_GPIO_Init+0x180>)
 8001684:	f001 fd20 	bl	80030c8 <HAL_GPIO_Init>

}
 8001688:	bf00      	nop
 800168a:	3730      	adds	r7, #48	; 0x30
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40023800 	.word	0x40023800
 8001694:	40020400 	.word	0x40020400
 8001698:	40021800 	.word	0x40021800
 800169c:	10110000 	.word	0x10110000
 80016a0:	40020800 	.word	0x40020800
 80016a4:	40020000 	.word	0x40020000

080016a8 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
    void HAL_ADC_ConvHalfCpltCallback (ADC_HandleTypeDef* hadc)
    {
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	__NOP();
 80016b0:	bf00      	nop
    }
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <HAL_ADC_ConvCpltCallback>:

    void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef* hadc)
    {
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
    __NOP();
 80016c6:	bf00      	nop
    }
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
	...

080016e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <HAL_MspInit+0x44>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <HAL_MspInit+0x44>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f4:	6413      	str	r3, [r2, #64]	; 0x40
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <HAL_MspInit+0x44>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_MspInit+0x44>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	4a08      	ldr	r2, [pc, #32]	; (8001728 <HAL_MspInit+0x44>)
 8001708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800170c:	6453      	str	r3, [r2, #68]	; 0x44
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_MspInit+0x44>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800

0800172c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	; 0x28
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a31      	ldr	r2, [pc, #196]	; (8001810 <HAL_ADC_MspInit+0xe4>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d15c      	bne.n	8001808 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800174e:	4b31      	ldr	r3, [pc, #196]	; (8001814 <HAL_ADC_MspInit+0xe8>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	4a30      	ldr	r2, [pc, #192]	; (8001814 <HAL_ADC_MspInit+0xe8>)
 8001754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001758:	6453      	str	r3, [r2, #68]	; 0x44
 800175a:	4b2e      	ldr	r3, [pc, #184]	; (8001814 <HAL_ADC_MspInit+0xe8>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001766:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <HAL_ADC_MspInit+0xe8>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	4a2a      	ldr	r2, [pc, #168]	; (8001814 <HAL_ADC_MspInit+0xe8>)
 800176c:	f043 0302 	orr.w	r3, r3, #2
 8001770:	6313      	str	r3, [r2, #48]	; 0x30
 8001772:	4b28      	ldr	r3, [pc, #160]	; (8001814 <HAL_ADC_MspInit+0xe8>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_THROTTLE_CONTROL_Pin;
 800177e:	2302      	movs	r3, #2
 8001780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001782:	2303      	movs	r3, #3
 8001784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_THROTTLE_CONTROL_GPIO_Port, &GPIO_InitStruct);
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	4619      	mov	r1, r3
 8001790:	4821      	ldr	r0, [pc, #132]	; (8001818 <HAL_ADC_MspInit+0xec>)
 8001792:	f001 fc99 	bl	80030c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8001796:	4b21      	ldr	r3, [pc, #132]	; (800181c <HAL_ADC_MspInit+0xf0>)
 8001798:	4a21      	ldr	r2, [pc, #132]	; (8001820 <HAL_ADC_MspInit+0xf4>)
 800179a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800179c:	4b1f      	ldr	r3, [pc, #124]	; (800181c <HAL_ADC_MspInit+0xf0>)
 800179e:	2200      	movs	r2, #0
 80017a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017a2:	4b1e      	ldr	r3, [pc, #120]	; (800181c <HAL_ADC_MspInit+0xf0>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a8:	4b1c      	ldr	r3, [pc, #112]	; (800181c <HAL_ADC_MspInit+0xf0>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 80017ae:	4b1b      	ldr	r3, [pc, #108]	; (800181c <HAL_ADC_MspInit+0xf0>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <HAL_ADC_MspInit+0xf0>)
 80017b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017bc:	4b17      	ldr	r3, [pc, #92]	; (800181c <HAL_ADC_MspInit+0xf0>)
 80017be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017c2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80017c4:	4b15      	ldr	r3, [pc, #84]	; (800181c <HAL_ADC_MspInit+0xf0>)
 80017c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ca:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <HAL_ADC_MspInit+0xf0>)
 80017ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017d2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <HAL_ADC_MspInit+0xf0>)
 80017d6:	2204      	movs	r2, #4
 80017d8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <HAL_ADC_MspInit+0xf0>)
 80017dc:	2203      	movs	r2, #3
 80017de:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 80017e0:	4b0e      	ldr	r3, [pc, #56]	; (800181c <HAL_ADC_MspInit+0xf0>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80017e6:	4b0d      	ldr	r3, [pc, #52]	; (800181c <HAL_ADC_MspInit+0xf0>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017ec:	480b      	ldr	r0, [pc, #44]	; (800181c <HAL_ADC_MspInit+0xf0>)
 80017ee:	f001 f8c7 	bl	8002980 <HAL_DMA_Init>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <HAL_ADC_MspInit+0xd0>
    {
      Error_Handler();
 80017f8:	f7ff ff6c 	bl	80016d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a07      	ldr	r2, [pc, #28]	; (800181c <HAL_ADC_MspInit+0xf0>)
 8001800:	639a      	str	r2, [r3, #56]	; 0x38
 8001802:	4a06      	ldr	r2, [pc, #24]	; (800181c <HAL_ADC_MspInit+0xf0>)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001808:	bf00      	nop
 800180a:	3728      	adds	r7, #40	; 0x28
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40012000 	.word	0x40012000
 8001814:	40023800 	.word	0x40023800
 8001818:	40020400 	.word	0x40020400
 800181c:	20000250 	.word	0x20000250
 8001820:	40026470 	.word	0x40026470

08001824 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	; 0x28
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a52      	ldr	r2, [pc, #328]	; (800198c <HAL_I2C_MspInit+0x168>)
 8001842:	4293      	cmp	r3, r2
 8001844:	f040 809d 	bne.w	8001982 <HAL_I2C_MspInit+0x15e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001848:	4b51      	ldr	r3, [pc, #324]	; (8001990 <HAL_I2C_MspInit+0x16c>)
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	4a50      	ldr	r2, [pc, #320]	; (8001990 <HAL_I2C_MspInit+0x16c>)
 800184e:	f043 0302 	orr.w	r3, r3, #2
 8001852:	6313      	str	r3, [r2, #48]	; 0x30
 8001854:	4b4e      	ldr	r3, [pc, #312]	; (8001990 <HAL_I2C_MspInit+0x16c>)
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001860:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001866:	2312      	movs	r3, #18
 8001868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800186a:	2301      	movs	r3, #1
 800186c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186e:	2303      	movs	r3, #3
 8001870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001872:	2304      	movs	r3, #4
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	4619      	mov	r1, r3
 800187c:	4845      	ldr	r0, [pc, #276]	; (8001994 <HAL_I2C_MspInit+0x170>)
 800187e:	f001 fc23 	bl	80030c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001882:	4b43      	ldr	r3, [pc, #268]	; (8001990 <HAL_I2C_MspInit+0x16c>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	4a42      	ldr	r2, [pc, #264]	; (8001990 <HAL_I2C_MspInit+0x16c>)
 8001888:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800188c:	6413      	str	r3, [r2, #64]	; 0x40
 800188e:	4b40      	ldr	r3, [pc, #256]	; (8001990 <HAL_I2C_MspInit+0x16c>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 800189a:	4b3f      	ldr	r3, [pc, #252]	; (8001998 <HAL_I2C_MspInit+0x174>)
 800189c:	4a3f      	ldr	r2, [pc, #252]	; (800199c <HAL_I2C_MspInit+0x178>)
 800189e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80018a0:	4b3d      	ldr	r3, [pc, #244]	; (8001998 <HAL_I2C_MspInit+0x174>)
 80018a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018a6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018a8:	4b3b      	ldr	r3, [pc, #236]	; (8001998 <HAL_I2C_MspInit+0x174>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ae:	4b3a      	ldr	r3, [pc, #232]	; (8001998 <HAL_I2C_MspInit+0x174>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018b4:	4b38      	ldr	r3, [pc, #224]	; (8001998 <HAL_I2C_MspInit+0x174>)
 80018b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ba:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018bc:	4b36      	ldr	r3, [pc, #216]	; (8001998 <HAL_I2C_MspInit+0x174>)
 80018be:	2200      	movs	r2, #0
 80018c0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018c2:	4b35      	ldr	r3, [pc, #212]	; (8001998 <HAL_I2C_MspInit+0x174>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80018c8:	4b33      	ldr	r3, [pc, #204]	; (8001998 <HAL_I2C_MspInit+0x174>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80018ce:	4b32      	ldr	r3, [pc, #200]	; (8001998 <HAL_I2C_MspInit+0x174>)
 80018d0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80018d4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80018d6:	4b30      	ldr	r3, [pc, #192]	; (8001998 <HAL_I2C_MspInit+0x174>)
 80018d8:	2204      	movs	r2, #4
 80018da:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80018dc:	4b2e      	ldr	r3, [pc, #184]	; (8001998 <HAL_I2C_MspInit+0x174>)
 80018de:	2200      	movs	r2, #0
 80018e0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80018e2:	4b2d      	ldr	r3, [pc, #180]	; (8001998 <HAL_I2C_MspInit+0x174>)
 80018e4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80018e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80018ea:	4b2b      	ldr	r3, [pc, #172]	; (8001998 <HAL_I2C_MspInit+0x174>)
 80018ec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80018f0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80018f2:	4829      	ldr	r0, [pc, #164]	; (8001998 <HAL_I2C_MspInit+0x174>)
 80018f4:	f001 f844 	bl	8002980 <HAL_DMA_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_I2C_MspInit+0xde>
    {
      Error_Handler();
 80018fe:	f7ff fee9 	bl	80016d4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a24      	ldr	r2, [pc, #144]	; (8001998 <HAL_I2C_MspInit+0x174>)
 8001906:	63da      	str	r2, [r3, #60]	; 0x3c
 8001908:	4a23      	ldr	r2, [pc, #140]	; (8001998 <HAL_I2C_MspInit+0x174>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800190e:	4b24      	ldr	r3, [pc, #144]	; (80019a0 <HAL_I2C_MspInit+0x17c>)
 8001910:	4a24      	ldr	r2, [pc, #144]	; (80019a4 <HAL_I2C_MspInit+0x180>)
 8001912:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001914:	4b22      	ldr	r3, [pc, #136]	; (80019a0 <HAL_I2C_MspInit+0x17c>)
 8001916:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800191a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800191c:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <HAL_I2C_MspInit+0x17c>)
 800191e:	2240      	movs	r2, #64	; 0x40
 8001920:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001922:	4b1f      	ldr	r3, [pc, #124]	; (80019a0 <HAL_I2C_MspInit+0x17c>)
 8001924:	2200      	movs	r2, #0
 8001926:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001928:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <HAL_I2C_MspInit+0x17c>)
 800192a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800192e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001930:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <HAL_I2C_MspInit+0x17c>)
 8001932:	2200      	movs	r2, #0
 8001934:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001936:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <HAL_I2C_MspInit+0x17c>)
 8001938:	2200      	movs	r2, #0
 800193a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800193c:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <HAL_I2C_MspInit+0x17c>)
 800193e:	2200      	movs	r2, #0
 8001940:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001942:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <HAL_I2C_MspInit+0x17c>)
 8001944:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001948:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800194a:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <HAL_I2C_MspInit+0x17c>)
 800194c:	2204      	movs	r2, #4
 800194e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001950:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <HAL_I2C_MspInit+0x17c>)
 8001952:	2203      	movs	r2, #3
 8001954:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001956:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_I2C_MspInit+0x17c>)
 8001958:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800195c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <HAL_I2C_MspInit+0x17c>)
 8001960:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001964:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001966:	480e      	ldr	r0, [pc, #56]	; (80019a0 <HAL_I2C_MspInit+0x17c>)
 8001968:	f001 f80a 	bl	8002980 <HAL_DMA_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_I2C_MspInit+0x152>
    {
      Error_Handler();
 8001972:	f7ff feaf 	bl	80016d4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a09      	ldr	r2, [pc, #36]	; (80019a0 <HAL_I2C_MspInit+0x17c>)
 800197a:	639a      	str	r2, [r3, #56]	; 0x38
 800197c:	4a08      	ldr	r2, [pc, #32]	; (80019a0 <HAL_I2C_MspInit+0x17c>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001982:	bf00      	nop
 8001984:	3728      	adds	r7, #40	; 0x28
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40005400 	.word	0x40005400
 8001990:	40023800 	.word	0x40023800
 8001994:	40020400 	.word	0x40020400
 8001998:	200002b0 	.word	0x200002b0
 800199c:	40026088 	.word	0x40026088
 80019a0:	2000015c 	.word	0x2000015c
 80019a4:	400260a0 	.word	0x400260a0

080019a8 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a21      	ldr	r2, [pc, #132]	; (8001a3c <HAL_TIM_OC_MspInit+0x94>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d13c      	bne.n	8001a34 <HAL_TIM_OC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019ba:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <HAL_TIM_OC_MspInit+0x98>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	4a20      	ldr	r2, [pc, #128]	; (8001a40 <HAL_TIM_OC_MspInit+0x98>)
 80019c0:	f043 0304 	orr.w	r3, r3, #4
 80019c4:	6413      	str	r3, [r2, #64]	; 0x40
 80019c6:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <HAL_TIM_OC_MspInit+0x98>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 80019d2:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <HAL_TIM_OC_MspInit+0x9c>)
 80019d4:	4a1c      	ldr	r2, [pc, #112]	; (8001a48 <HAL_TIM_OC_MspInit+0xa0>)
 80019d6:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 80019d8:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <HAL_TIM_OC_MspInit+0x9c>)
 80019da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019de:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019e0:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <HAL_TIM_OC_MspInit+0x9c>)
 80019e2:	2240      	movs	r2, #64	; 0x40
 80019e4:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019e6:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <HAL_TIM_OC_MspInit+0x9c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80019ec:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <HAL_TIM_OC_MspInit+0x9c>)
 80019ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019f2:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019f4:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <HAL_TIM_OC_MspInit+0x9c>)
 80019f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019fa:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <HAL_TIM_OC_MspInit+0x9c>)
 80019fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a02:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <HAL_TIM_OC_MspInit+0x9c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <HAL_TIM_OC_MspInit+0x9c>)
 8001a0c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a10:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a12:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <HAL_TIM_OC_MspInit+0x9c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8001a18:	480a      	ldr	r0, [pc, #40]	; (8001a44 <HAL_TIM_OC_MspInit+0x9c>)
 8001a1a:	f000 ffb1 	bl	8002980 <HAL_DMA_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_TIM_OC_MspInit+0x80>
    {
      Error_Handler();
 8001a24:	f7ff fe56 	bl	80016d4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <HAL_TIM_OC_MspInit+0x9c>)
 8001a2c:	625a      	str	r2, [r3, #36]	; 0x24
 8001a2e:	4a05      	ldr	r2, [pc, #20]	; (8001a44 <HAL_TIM_OC_MspInit+0x9c>)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a34:	bf00      	nop
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40000800 	.word	0x40000800
 8001a40:	40023800 	.word	0x40023800
 8001a44:	20000328 	.word	0x20000328
 8001a48:	40026010 	.word	0x40026010

08001a4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 030c 	add.w	r3, r7, #12
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a11      	ldr	r2, [pc, #68]	; (8001ab0 <HAL_TIM_MspPostInit+0x64>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d11c      	bne.n	8001aa8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <HAL_TIM_MspPostInit+0x68>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a10      	ldr	r2, [pc, #64]	; (8001ab4 <HAL_TIM_MspPostInit+0x68>)
 8001a74:	f043 0308 	orr.w	r3, r3, #8
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <HAL_TIM_MspPostInit+0x68>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = TIM4_CH1_DMA_LATCH_Pin|TIM4_CH2_MOTOR_1_Pin|TIM4_CH3_MOTOR_2_Pin;
 8001a86:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001a8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a9c:	f107 030c 	add.w	r3, r7, #12
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <HAL_TIM_MspPostInit+0x6c>)
 8001aa4:	f001 fb10 	bl	80030c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001aa8:	bf00      	nop
 8001aaa:	3720      	adds	r7, #32
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40000800 	.word	0x40000800
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40020c00 	.word	0x40020c00

08001abc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08a      	sub	sp, #40	; 0x28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a17      	ldr	r2, [pc, #92]	; (8001b38 <HAL_UART_MspInit+0x7c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d128      	bne.n	8001b30 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ade:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <HAL_UART_MspInit+0x80>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	4a16      	ldr	r2, [pc, #88]	; (8001b3c <HAL_UART_MspInit+0x80>)
 8001ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aea:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <HAL_UART_MspInit+0x80>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af6:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <HAL_UART_MspInit+0x80>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a10      	ldr	r2, [pc, #64]	; (8001b3c <HAL_UART_MspInit+0x80>)
 8001afc:	f043 0308 	orr.w	r3, r3, #8
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <HAL_UART_MspInit+0x80>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b14:	2302      	movs	r3, #2
 8001b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b20:	2307      	movs	r3, #7
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <HAL_UART_MspInit+0x84>)
 8001b2c:	f001 facc 	bl	80030c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b30:	bf00      	nop
 8001b32:	3728      	adds	r7, #40	; 0x28
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40004800 	.word	0x40004800
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40020c00 	.word	0x40020c00

08001b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b56:	e7fe      	b.n	8001b56 <HardFault_Handler+0x4>

08001b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <MemManage_Handler+0x4>

08001b5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b62:	e7fe      	b.n	8001b62 <BusFault_Handler+0x4>

08001b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b68:	e7fe      	b.n	8001b68 <UsageFault_Handler+0x4>

08001b6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b98:	f000 f8dc 	bl	8001d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8001ba4:	4802      	ldr	r0, [pc, #8]	; (8001bb0 <DMA1_Stream0_IRQHandler+0x10>)
 8001ba6:	f001 f81b 	bl	8002be0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000328 	.word	0x20000328

08001bb4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001bb8:	4802      	ldr	r0, [pc, #8]	; (8001bc4 <DMA1_Stream5_IRQHandler+0x10>)
 8001bba:	f001 f811 	bl	8002be0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	200002b0 	.word	0x200002b0

08001bc8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001bcc:	4802      	ldr	r0, [pc, #8]	; (8001bd8 <DMA1_Stream6_IRQHandler+0x10>)
 8001bce:	f001 f807 	bl	8002be0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	2000015c 	.word	0x2000015c

08001bdc <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001be0:	4802      	ldr	r0, [pc, #8]	; (8001bec <DMA2_Stream4_IRQHandler+0x10>)
 8001be2:	f000 fffd 	bl	8002be0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000250 	.word	0x20000250

08001bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf8:	4a14      	ldr	r2, [pc, #80]	; (8001c4c <_sbrk+0x5c>)
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <_sbrk+0x60>)
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c04:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <_sbrk+0x64>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d102      	bne.n	8001c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c0c:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <_sbrk+0x64>)
 8001c0e:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <_sbrk+0x68>)
 8001c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <_sbrk+0x64>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d207      	bcs.n	8001c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c20:	f005 fada 	bl	80071d8 <__errno>
 8001c24:	4602      	mov	r2, r0
 8001c26:	230c      	movs	r3, #12
 8001c28:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2e:	e009      	b.n	8001c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c30:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <_sbrk+0x64>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c36:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <_sbrk+0x64>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	4a05      	ldr	r2, [pc, #20]	; (8001c54 <_sbrk+0x64>)
 8001c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c42:	68fb      	ldr	r3, [r7, #12]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20040000 	.word	0x20040000
 8001c50:	00000400 	.word	0x00000400
 8001c54:	20000090 	.word	0x20000090
 8001c58:	20000398 	.word	0x20000398

08001c5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c60:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <SystemInit+0x28>)
 8001c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c66:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <SystemInit+0x28>)
 8001c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c70:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <SystemInit+0x28>)
 8001c72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c76:	609a      	str	r2, [r3, #8]
#endif
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cc0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c8e:	e003      	b.n	8001c98 <LoopCopyDataInit>

08001c90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c96:	3104      	adds	r1, #4

08001c98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c98:	480b      	ldr	r0, [pc, #44]	; (8001cc8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ca0:	d3f6      	bcc.n	8001c90 <CopyDataInit>
  ldr  r2, =_sbss
 8001ca2:	4a0b      	ldr	r2, [pc, #44]	; (8001cd0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ca4:	e002      	b.n	8001cac <LoopFillZerobss>

08001ca6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ca6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ca8:	f842 3b04 	str.w	r3, [r2], #4

08001cac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001cac:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001cae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001cb0:	d3f9      	bcc.n	8001ca6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cb2:	f7ff ffd3 	bl	8001c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cb6:	f005 fa95 	bl	80071e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cba:	f7ff f981 	bl	8000fc0 <main>
  bx  lr    
 8001cbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cc0:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8001cc4:	08007ae4 	.word	0x08007ae4
  ldr  r0, =_sdata
 8001cc8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ccc:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001cd0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001cd4:	20000394 	.word	0x20000394

08001cd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cd8:	e7fe      	b.n	8001cd8 <ADC_IRQHandler>

08001cda <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cde:	2003      	movs	r0, #3
 8001ce0:	f000 fe0c 	bl	80028fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f000 f805 	bl	8001cf4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001cea:	f7ff fcfb 	bl	80016e4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_InitTick+0x54>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_InitTick+0x58>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	4619      	mov	r1, r3
 8001d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 fe27 	bl	8002966 <HAL_SYSTICK_Config>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e00e      	b.n	8001d40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b0f      	cmp	r3, #15
 8001d26:	d80a      	bhi.n	8001d3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d30:	f000 fdef 	bl	8002912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d34:	4a06      	ldr	r2, [pc, #24]	; (8001d50 <HAL_InitTick+0x5c>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	e000      	b.n	8001d40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000000 	.word	0x20000000
 8001d4c:	20000008 	.word	0x20000008
 8001d50:	20000004 	.word	0x20000004

08001d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_IncTick+0x20>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_IncTick+0x24>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4413      	add	r3, r2
 8001d64:	4a04      	ldr	r2, [pc, #16]	; (8001d78 <HAL_IncTick+0x24>)
 8001d66:	6013      	str	r3, [r2, #0]
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	20000008 	.word	0x20000008
 8001d78:	2000038c 	.word	0x2000038c

08001d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d80:	4b03      	ldr	r3, [pc, #12]	; (8001d90 <HAL_GetTick+0x14>)
 8001d82:	681b      	ldr	r3, [r3, #0]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	2000038c 	.word	0x2000038c

08001d94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d9c:	f7ff ffee 	bl	8001d7c <HAL_GetTick>
 8001da0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dac:	d005      	beq.n	8001dba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dae:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <HAL_Delay+0x40>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4413      	add	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dba:	bf00      	nop
 8001dbc:	f7ff ffde 	bl	8001d7c <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d8f7      	bhi.n	8001dbc <HAL_Delay+0x28>
  {
  }
}
 8001dcc:	bf00      	nop
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000008 	.word	0x20000008

08001dd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e031      	b.n	8001e52 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d109      	bne.n	8001e0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff fc98 	bl	800172c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f003 0310 	and.w	r3, r3, #16
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d116      	bne.n	8001e44 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e1a:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <HAL_ADC_Init+0x84>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	f043 0202 	orr.w	r2, r3, #2
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 fb1c 	bl	8002464 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f023 0303 	bic.w	r3, r3, #3
 8001e3a:	f043 0201 	orr.w	r2, r3, #1
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	641a      	str	r2, [r3, #64]	; 0x40
 8001e42:	e001      	b.n	8001e48 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	ffffeefd 	.word	0xffffeefd

08001e60 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d101      	bne.n	8001e7a <HAL_ADC_Start+0x1a>
 8001e76:	2302      	movs	r3, #2
 8001e78:	e0a0      	b.n	8001fbc <HAL_ADC_Start+0x15c>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d018      	beq.n	8001ec2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0201 	orr.w	r2, r2, #1
 8001e9e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001ea0:	4b49      	ldr	r3, [pc, #292]	; (8001fc8 <HAL_ADC_Start+0x168>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a49      	ldr	r2, [pc, #292]	; (8001fcc <HAL_ADC_Start+0x16c>)
 8001ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eaa:	0c9a      	lsrs	r2, r3, #18
 8001eac:	4613      	mov	r3, r2
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	4413      	add	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001eb4:	e002      	b.n	8001ebc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f9      	bne.n	8001eb6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d174      	bne.n	8001fba <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ed4:	4b3e      	ldr	r3, [pc, #248]	; (8001fd0 <HAL_ADC_Start+0x170>)
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d007      	beq.n	8001efe <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ef6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f0a:	d106      	bne.n	8001f1a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f10:	f023 0206 	bic.w	r2, r3, #6
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	645a      	str	r2, [r3, #68]	; 0x44
 8001f18:	e002      	b.n	8001f20 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f30:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001f32:	4b28      	ldr	r3, [pc, #160]	; (8001fd4 <HAL_ADC_Start+0x174>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 031f 	and.w	r3, r3, #31
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10f      	bne.n	8001f5e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d136      	bne.n	8001fba <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	e02d      	b.n	8001fba <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a1d      	ldr	r2, [pc, #116]	; (8001fd8 <HAL_ADC_Start+0x178>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d10e      	bne.n	8001f86 <HAL_ADC_Start+0x126>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d107      	bne.n	8001f86 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f84:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001f86:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <HAL_ADC_Start+0x174>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 0310 	and.w	r3, r3, #16
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d113      	bne.n	8001fba <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a11      	ldr	r2, [pc, #68]	; (8001fdc <HAL_ADC_Start+0x17c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d10e      	bne.n	8001fba <HAL_ADC_Start+0x15a>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d107      	bne.n	8001fba <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fb8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	431bde83 	.word	0x431bde83
 8001fd0:	fffff8fe 	.word	0xfffff8fe
 8001fd4:	40012300 	.word	0x40012300
 8001fd8:	40012000 	.word	0x40012000
 8001fdc:	40012200 	.word	0x40012200

08001fe0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_ADC_Start_DMA+0x1e>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e0c7      	b.n	800218e <HAL_ADC_Start_DMA+0x1ae>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b01      	cmp	r3, #1
 8002012:	d018      	beq.n	8002046 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0201 	orr.w	r2, r2, #1
 8002022:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002024:	4b5c      	ldr	r3, [pc, #368]	; (8002198 <HAL_ADC_Start_DMA+0x1b8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a5c      	ldr	r2, [pc, #368]	; (800219c <HAL_ADC_Start_DMA+0x1bc>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	0c9a      	lsrs	r2, r3, #18
 8002030:	4613      	mov	r3, r2
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	4413      	add	r3, r2
 8002036:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002038:	e002      	b.n	8002040 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3b01      	subs	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f9      	bne.n	800203a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b01      	cmp	r3, #1
 8002052:	f040 809b 	bne.w	800218c <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800205a:	4b51      	ldr	r3, [pc, #324]	; (80021a0 <HAL_ADC_Start_DMA+0x1c0>)
 800205c:	4013      	ands	r3, r2
 800205e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002070:	2b00      	cmp	r3, #0
 8002072:	d007      	beq.n	8002084 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800207c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800208c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002090:	d106      	bne.n	80020a0 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	f023 0206 	bic.w	r2, r3, #6
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	645a      	str	r2, [r3, #68]	; 0x44
 800209e:	e002      	b.n	80020a6 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b2:	4a3c      	ldr	r2, [pc, #240]	; (80021a4 <HAL_ADC_Start_DMA+0x1c4>)
 80020b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ba:	4a3b      	ldr	r2, [pc, #236]	; (80021a8 <HAL_ADC_Start_DMA+0x1c8>)
 80020bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c2:	4a3a      	ldr	r2, [pc, #232]	; (80021ac <HAL_ADC_Start_DMA+0x1cc>)
 80020c4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80020ce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80020de:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020ee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	334c      	adds	r3, #76	; 0x4c
 80020fa:	4619      	mov	r1, r3
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f000 fcec 	bl	8002adc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002104:	4b2a      	ldr	r3, [pc, #168]	; (80021b0 <HAL_ADC_Start_DMA+0x1d0>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 031f 	and.w	r3, r3, #31
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10f      	bne.n	8002130 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d136      	bne.n	800218c <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	e02d      	b.n	800218c <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a1f      	ldr	r2, [pc, #124]	; (80021b4 <HAL_ADC_Start_DMA+0x1d4>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d10e      	bne.n	8002158 <HAL_ADC_Start_DMA+0x178>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d107      	bne.n	8002158 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002156:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002158:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <HAL_ADC_Start_DMA+0x1d0>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 0310 	and.w	r3, r3, #16
 8002160:	2b00      	cmp	r3, #0
 8002162:	d113      	bne.n	800218c <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a13      	ldr	r2, [pc, #76]	; (80021b8 <HAL_ADC_Start_DMA+0x1d8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d10e      	bne.n	800218c <HAL_ADC_Start_DMA+0x1ac>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d107      	bne.n	800218c <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800218a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000000 	.word	0x20000000
 800219c:	431bde83 	.word	0x431bde83
 80021a0:	fffff8fe 	.word	0xfffff8fe
 80021a4:	08002659 	.word	0x08002659
 80021a8:	08002713 	.word	0x08002713
 80021ac:	0800272f 	.word	0x0800272f
 80021b0:	40012300 	.word	0x40012300
 80021b4:	40012000 	.word	0x40012000
 80021b8:	40012200 	.word	0x40012200

080021bc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x1c>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e12a      	b.n	8002442 <HAL_ADC_ConfigChannel+0x272>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b09      	cmp	r3, #9
 80021fa:	d93a      	bls.n	8002272 <HAL_ADC_ConfigChannel+0xa2>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002204:	d035      	beq.n	8002272 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68d9      	ldr	r1, [r3, #12]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	b29b      	uxth	r3, r3
 8002212:	461a      	mov	r2, r3
 8002214:	4613      	mov	r3, r2
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	4413      	add	r3, r2
 800221a:	3b1e      	subs	r3, #30
 800221c:	2207      	movs	r2, #7
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43da      	mvns	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	400a      	ands	r2, r1
 800222a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a87      	ldr	r2, [pc, #540]	; (8002450 <HAL_ADC_ConfigChannel+0x280>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d10a      	bne.n	800224c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68d9      	ldr	r1, [r3, #12]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	061a      	lsls	r2, r3, #24
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800224a:	e035      	b.n	80022b8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68d9      	ldr	r1, [r3, #12]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	b29b      	uxth	r3, r3
 800225c:	4618      	mov	r0, r3
 800225e:	4603      	mov	r3, r0
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4403      	add	r3, r0
 8002264:	3b1e      	subs	r3, #30
 8002266:	409a      	lsls	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002270:	e022      	b.n	80022b8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6919      	ldr	r1, [r3, #16]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	b29b      	uxth	r3, r3
 800227e:	461a      	mov	r2, r3
 8002280:	4613      	mov	r3, r2
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	4413      	add	r3, r2
 8002286:	2207      	movs	r2, #7
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43da      	mvns	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	400a      	ands	r2, r1
 8002294:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6919      	ldr	r1, [r3, #16]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	4618      	mov	r0, r3
 80022a8:	4603      	mov	r3, r0
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4403      	add	r3, r0
 80022ae:	409a      	lsls	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b06      	cmp	r3, #6
 80022be:	d824      	bhi.n	800230a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	3b05      	subs	r3, #5
 80022d2:	221f      	movs	r2, #31
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43da      	mvns	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	400a      	ands	r2, r1
 80022e0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	4618      	mov	r0, r3
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	3b05      	subs	r3, #5
 80022fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	635a      	str	r2, [r3, #52]	; 0x34
 8002308:	e04c      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b0c      	cmp	r3, #12
 8002310:	d824      	bhi.n	800235c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	3b23      	subs	r3, #35	; 0x23
 8002324:	221f      	movs	r2, #31
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43da      	mvns	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	400a      	ands	r2, r1
 8002332:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	b29b      	uxth	r3, r3
 8002340:	4618      	mov	r0, r3
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	3b23      	subs	r3, #35	; 0x23
 800234e:	fa00 f203 	lsl.w	r2, r0, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	631a      	str	r2, [r3, #48]	; 0x30
 800235a:	e023      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	3b41      	subs	r3, #65	; 0x41
 800236e:	221f      	movs	r2, #31
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43da      	mvns	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	400a      	ands	r2, r1
 800237c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	b29b      	uxth	r3, r3
 800238a:	4618      	mov	r0, r3
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	3b41      	subs	r3, #65	; 0x41
 8002398:	fa00 f203 	lsl.w	r2, r0, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a2a      	ldr	r2, [pc, #168]	; (8002454 <HAL_ADC_ConfigChannel+0x284>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d10a      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x1f4>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023b6:	d105      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80023b8:	4b27      	ldr	r3, [pc, #156]	; (8002458 <HAL_ADC_ConfigChannel+0x288>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4a26      	ldr	r2, [pc, #152]	; (8002458 <HAL_ADC_ConfigChannel+0x288>)
 80023be:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80023c2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a22      	ldr	r2, [pc, #136]	; (8002454 <HAL_ADC_ConfigChannel+0x284>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d109      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x212>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b12      	cmp	r3, #18
 80023d4:	d105      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80023d6:	4b20      	ldr	r3, [pc, #128]	; (8002458 <HAL_ADC_ConfigChannel+0x288>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4a1f      	ldr	r2, [pc, #124]	; (8002458 <HAL_ADC_ConfigChannel+0x288>)
 80023dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023e0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a1b      	ldr	r2, [pc, #108]	; (8002454 <HAL_ADC_ConfigChannel+0x284>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d125      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x268>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a17      	ldr	r2, [pc, #92]	; (8002450 <HAL_ADC_ConfigChannel+0x280>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d003      	beq.n	80023fe <HAL_ADC_ConfigChannel+0x22e>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2b11      	cmp	r3, #17
 80023fc:	d11c      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80023fe:	4b16      	ldr	r3, [pc, #88]	; (8002458 <HAL_ADC_ConfigChannel+0x288>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4a15      	ldr	r2, [pc, #84]	; (8002458 <HAL_ADC_ConfigChannel+0x288>)
 8002404:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002408:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a10      	ldr	r2, [pc, #64]	; (8002450 <HAL_ADC_ConfigChannel+0x280>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d111      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002414:	4b11      	ldr	r3, [pc, #68]	; (800245c <HAL_ADC_ConfigChannel+0x28c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a11      	ldr	r2, [pc, #68]	; (8002460 <HAL_ADC_ConfigChannel+0x290>)
 800241a:	fba2 2303 	umull	r2, r3, r2, r3
 800241e:	0c9a      	lsrs	r2, r3, #18
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800242a:	e002      	b.n	8002432 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	3b01      	subs	r3, #1
 8002430:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1f9      	bne.n	800242c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	10000012 	.word	0x10000012
 8002454:	40012000 	.word	0x40012000
 8002458:	40012300 	.word	0x40012300
 800245c:	20000000 	.word	0x20000000
 8002460:	431bde83 	.word	0x431bde83

08002464 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800246c:	4b78      	ldr	r3, [pc, #480]	; (8002650 <ADC_Init+0x1ec>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	4a77      	ldr	r2, [pc, #476]	; (8002650 <ADC_Init+0x1ec>)
 8002472:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002476:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002478:	4b75      	ldr	r3, [pc, #468]	; (8002650 <ADC_Init+0x1ec>)
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	4973      	ldr	r1, [pc, #460]	; (8002650 <ADC_Init+0x1ec>)
 8002482:	4313      	orrs	r3, r2
 8002484:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002494:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6859      	ldr	r1, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	021a      	lsls	r2, r3, #8
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6859      	ldr	r1, [r3, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6899      	ldr	r1, [r3, #8]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f2:	4a58      	ldr	r2, [pc, #352]	; (8002654 <ADC_Init+0x1f0>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d022      	beq.n	800253e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002506:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6899      	ldr	r1, [r3, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002528:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6899      	ldr	r1, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	e00f      	b.n	800255e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800254c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800255c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0202 	bic.w	r2, r2, #2
 800256c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6899      	ldr	r1, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	005a      	lsls	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d01b      	beq.n	80025c4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800259a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80025aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6859      	ldr	r1, [r3, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	3b01      	subs	r3, #1
 80025b8:	035a      	lsls	r2, r3, #13
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	e007      	b.n	80025d4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80025e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	051a      	lsls	r2, r3, #20
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002608:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6899      	ldr	r1, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002616:	025a      	lsls	r2, r3, #9
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800262e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6899      	ldr	r1, [r3, #8]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	029a      	lsls	r2, r3, #10
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	609a      	str	r2, [r3, #8]
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	40012300 	.word	0x40012300
 8002654:	0f000001 	.word	0x0f000001

08002658 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002664:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800266e:	2b00      	cmp	r3, #0
 8002670:	d13c      	bne.n	80026ec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d12b      	bne.n	80026e4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002690:	2b00      	cmp	r3, #0
 8002692:	d127      	bne.n	80026e4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d006      	beq.n	80026b0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d119      	bne.n	80026e4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0220 	bic.w	r2, r2, #32
 80026be:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d105      	bne.n	80026e4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	f043 0201 	orr.w	r2, r3, #1
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f7fe ffea 	bl	80016be <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80026ea:	e00e      	b.n	800270a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	f003 0310 	and.w	r3, r3, #16
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f7ff fd5f 	bl	80021bc <HAL_ADC_ErrorCallback>
}
 80026fe:	e004      	b.n	800270a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	4798      	blx	r3
}
 800270a:	bf00      	nop
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b084      	sub	sp, #16
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f7fe ffc1 	bl	80016a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002726:	bf00      	nop
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b084      	sub	sp, #16
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2240      	movs	r2, #64	; 0x40
 8002740:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	f043 0204 	orr.w	r2, r3, #4
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f7ff fd34 	bl	80021bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002754:	bf00      	nop
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800276c:	4b0b      	ldr	r3, [pc, #44]	; (800279c <__NVIC_SetPriorityGrouping+0x40>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002778:	4013      	ands	r3, r2
 800277a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002784:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002786:	4313      	orrs	r3, r2
 8002788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800278a:	4a04      	ldr	r2, [pc, #16]	; (800279c <__NVIC_SetPriorityGrouping+0x40>)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	60d3      	str	r3, [r2, #12]
}
 8002790:	bf00      	nop
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	e000ed00 	.word	0xe000ed00
 80027a0:	05fa0000 	.word	0x05fa0000

080027a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027a8:	4b04      	ldr	r3, [pc, #16]	; (80027bc <__NVIC_GetPriorityGrouping+0x18>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	0a1b      	lsrs	r3, r3, #8
 80027ae:	f003 0307 	and.w	r3, r3, #7
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	e000ed00 	.word	0xe000ed00

080027c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	db0b      	blt.n	80027ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	f003 021f 	and.w	r2, r3, #31
 80027d8:	4907      	ldr	r1, [pc, #28]	; (80027f8 <__NVIC_EnableIRQ+0x38>)
 80027da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	2001      	movs	r0, #1
 80027e2:	fa00 f202 	lsl.w	r2, r0, r2
 80027e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	e000e100 	.word	0xe000e100

080027fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	6039      	str	r1, [r7, #0]
 8002806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280c:	2b00      	cmp	r3, #0
 800280e:	db0a      	blt.n	8002826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	b2da      	uxtb	r2, r3
 8002814:	490c      	ldr	r1, [pc, #48]	; (8002848 <__NVIC_SetPriority+0x4c>)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	0112      	lsls	r2, r2, #4
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	440b      	add	r3, r1
 8002820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002824:	e00a      	b.n	800283c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4908      	ldr	r1, [pc, #32]	; (800284c <__NVIC_SetPriority+0x50>)
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	3b04      	subs	r3, #4
 8002834:	0112      	lsls	r2, r2, #4
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	440b      	add	r3, r1
 800283a:	761a      	strb	r2, [r3, #24]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	e000e100 	.word	0xe000e100
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002850:	b480      	push	{r7}
 8002852:	b089      	sub	sp, #36	; 0x24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f1c3 0307 	rsb	r3, r3, #7
 800286a:	2b04      	cmp	r3, #4
 800286c:	bf28      	it	cs
 800286e:	2304      	movcs	r3, #4
 8002870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3304      	adds	r3, #4
 8002876:	2b06      	cmp	r3, #6
 8002878:	d902      	bls.n	8002880 <NVIC_EncodePriority+0x30>
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3b03      	subs	r3, #3
 800287e:	e000      	b.n	8002882 <NVIC_EncodePriority+0x32>
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002884:	f04f 32ff 	mov.w	r2, #4294967295
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43da      	mvns	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	401a      	ands	r2, r3
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002898:	f04f 31ff 	mov.w	r1, #4294967295
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	fa01 f303 	lsl.w	r3, r1, r3
 80028a2:	43d9      	mvns	r1, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a8:	4313      	orrs	r3, r2
         );
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3724      	adds	r7, #36	; 0x24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
	...

080028b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028c8:	d301      	bcc.n	80028ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ca:	2301      	movs	r3, #1
 80028cc:	e00f      	b.n	80028ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ce:	4a0a      	ldr	r2, [pc, #40]	; (80028f8 <SysTick_Config+0x40>)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028d6:	210f      	movs	r1, #15
 80028d8:	f04f 30ff 	mov.w	r0, #4294967295
 80028dc:	f7ff ff8e 	bl	80027fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <SysTick_Config+0x40>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028e6:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <SysTick_Config+0x40>)
 80028e8:	2207      	movs	r2, #7
 80028ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	e000e010 	.word	0xe000e010

080028fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ff29 	bl	800275c <__NVIC_SetPriorityGrouping>
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002912:	b580      	push	{r7, lr}
 8002914:	b086      	sub	sp, #24
 8002916:	af00      	add	r7, sp, #0
 8002918:	4603      	mov	r3, r0
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	607a      	str	r2, [r7, #4]
 800291e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002924:	f7ff ff3e 	bl	80027a4 <__NVIC_GetPriorityGrouping>
 8002928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	6978      	ldr	r0, [r7, #20]
 8002930:	f7ff ff8e 	bl	8002850 <NVIC_EncodePriority>
 8002934:	4602      	mov	r2, r0
 8002936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff5d 	bl	80027fc <__NVIC_SetPriority>
}
 8002942:	bf00      	nop
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	4603      	mov	r3, r0
 8002952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff31 	bl	80027c0 <__NVIC_EnableIRQ>
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7ff ffa2 	bl	80028b8 <SysTick_Config>
 8002974:	4603      	mov	r3, r0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800298c:	f7ff f9f6 	bl	8001d7c <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e099      	b.n	8002ad0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2202      	movs	r2, #2
 80029a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0201 	bic.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029bc:	e00f      	b.n	80029de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029be:	f7ff f9dd 	bl	8001d7c <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b05      	cmp	r3, #5
 80029ca:	d908      	bls.n	80029de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2220      	movs	r2, #32
 80029d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2203      	movs	r2, #3
 80029d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e078      	b.n	8002ad0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1e8      	bne.n	80029be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	4b38      	ldr	r3, [pc, #224]	; (8002ad8 <HAL_DMA_Init+0x158>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	d107      	bne.n	8002a48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a40:	4313      	orrs	r3, r2
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f023 0307 	bic.w	r3, r3, #7
 8002a5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d117      	bne.n	8002aa2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00e      	beq.n	8002aa2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 faa5 	bl	8002fd4 <DMA_CheckFifoParam>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2240      	movs	r2, #64	; 0x40
 8002a94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e016      	b.n	8002ad0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 fa5c 	bl	8002f68 <DMA_CalcBaseAndBitshift>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab8:	223f      	movs	r2, #63	; 0x3f
 8002aba:	409a      	lsls	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	e010803f 	.word	0xe010803f

08002adc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d101      	bne.n	8002b02 <HAL_DMA_Start_IT+0x26>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e048      	b.n	8002b94 <HAL_DMA_Start_IT+0xb8>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d137      	bne.n	8002b86 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2202      	movs	r2, #2
 8002b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	68b9      	ldr	r1, [r7, #8]
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 f9ee 	bl	8002f0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b34:	223f      	movs	r2, #63	; 0x3f
 8002b36:	409a      	lsls	r2, r3
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0216 	orr.w	r2, r2, #22
 8002b4a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695a      	ldr	r2, [r3, #20]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b5a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d007      	beq.n	8002b74 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0208 	orr.w	r2, r2, #8
 8002b72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0201 	orr.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	e005      	b.n	8002b92 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d004      	beq.n	8002bba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2280      	movs	r2, #128	; 0x80
 8002bb4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e00c      	b.n	8002bd4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2205      	movs	r2, #5
 8002bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0201 	bic.w	r2, r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002bec:	4b92      	ldr	r3, [pc, #584]	; (8002e38 <HAL_DMA_IRQHandler+0x258>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a92      	ldr	r2, [pc, #584]	; (8002e3c <HAL_DMA_IRQHandler+0x25c>)
 8002bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf6:	0a9b      	lsrs	r3, r3, #10
 8002bf8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0a:	2208      	movs	r2, #8
 8002c0c:	409a      	lsls	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d01a      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d013      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0204 	bic.w	r2, r2, #4
 8002c32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c38:	2208      	movs	r2, #8
 8002c3a:	409a      	lsls	r2, r3
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c44:	f043 0201 	orr.w	r2, r3, #1
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c50:	2201      	movs	r2, #1
 8002c52:	409a      	lsls	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d012      	beq.n	8002c82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00b      	beq.n	8002c82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6e:	2201      	movs	r2, #1
 8002c70:	409a      	lsls	r2, r3
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7a:	f043 0202 	orr.w	r2, r3, #2
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c86:	2204      	movs	r2, #4
 8002c88:	409a      	lsls	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d012      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00b      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca4:	2204      	movs	r2, #4
 8002ca6:	409a      	lsls	r2, r3
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb0:	f043 0204 	orr.w	r2, r3, #4
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbc:	2210      	movs	r2, #16
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d043      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d03c      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cda:	2210      	movs	r2, #16
 8002cdc:	409a      	lsls	r2, r3
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d018      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d108      	bne.n	8002d10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d024      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	4798      	blx	r3
 8002d0e:	e01f      	b.n	8002d50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d01b      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	4798      	blx	r3
 8002d20:	e016      	b.n	8002d50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d107      	bne.n	8002d40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0208 	bic.w	r2, r2, #8
 8002d3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d54:	2220      	movs	r2, #32
 8002d56:	409a      	lsls	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 808e 	beq.w	8002e7e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0310 	and.w	r3, r3, #16
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 8086 	beq.w	8002e7e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d76:	2220      	movs	r2, #32
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b05      	cmp	r3, #5
 8002d88:	d136      	bne.n	8002df8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0216 	bic.w	r2, r2, #22
 8002d98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695a      	ldr	r2, [r3, #20]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002da8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d103      	bne.n	8002dba <HAL_DMA_IRQHandler+0x1da>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d007      	beq.n	8002dca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0208 	bic.w	r2, r2, #8
 8002dc8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dce:	223f      	movs	r2, #63	; 0x3f
 8002dd0:	409a      	lsls	r2, r3
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d07d      	beq.n	8002eea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	4798      	blx	r3
        }
        return;
 8002df6:	e078      	b.n	8002eea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d01c      	beq.n	8002e40 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d108      	bne.n	8002e26 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d030      	beq.n	8002e7e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	4798      	blx	r3
 8002e24:	e02b      	b.n	8002e7e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d027      	beq.n	8002e7e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	4798      	blx	r3
 8002e36:	e022      	b.n	8002e7e <HAL_DMA_IRQHandler+0x29e>
 8002e38:	20000000 	.word	0x20000000
 8002e3c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10f      	bne.n	8002e6e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0210 	bic.w	r2, r2, #16
 8002e5c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d032      	beq.n	8002eec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d022      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2205      	movs	r2, #5
 8002e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0201 	bic.w	r2, r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	3301      	adds	r3, #1
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d307      	bcc.n	8002ec6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1f2      	bne.n	8002eaa <HAL_DMA_IRQHandler+0x2ca>
 8002ec4:	e000      	b.n	8002ec8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002ec6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d005      	beq.n	8002eec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	4798      	blx	r3
 8002ee8:	e000      	b.n	8002eec <HAL_DMA_IRQHandler+0x30c>
        return;
 8002eea:	bf00      	nop
    }
  }
}
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop

08002ef4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b40      	cmp	r3, #64	; 0x40
 8002f38:	d108      	bne.n	8002f4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f4a:	e007      	b.n	8002f5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	60da      	str	r2, [r3, #12]
}
 8002f5c:	bf00      	nop
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	3b10      	subs	r3, #16
 8002f78:	4a13      	ldr	r2, [pc, #76]	; (8002fc8 <DMA_CalcBaseAndBitshift+0x60>)
 8002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7e:	091b      	lsrs	r3, r3, #4
 8002f80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f82:	4a12      	ldr	r2, [pc, #72]	; (8002fcc <DMA_CalcBaseAndBitshift+0x64>)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4413      	add	r3, r2
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	d908      	bls.n	8002fa8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <DMA_CalcBaseAndBitshift+0x68>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	1d1a      	adds	r2, r3, #4
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	659a      	str	r2, [r3, #88]	; 0x58
 8002fa6:	e006      	b.n	8002fb6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <DMA_CalcBaseAndBitshift+0x68>)
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	aaaaaaab 	.word	0xaaaaaaab
 8002fcc:	08007a98 	.word	0x08007a98
 8002fd0:	fffffc00 	.word	0xfffffc00

08002fd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d11f      	bne.n	800302e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d855      	bhi.n	80030a0 <DMA_CheckFifoParam+0xcc>
 8002ff4:	a201      	add	r2, pc, #4	; (adr r2, 8002ffc <DMA_CheckFifoParam+0x28>)
 8002ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffa:	bf00      	nop
 8002ffc:	0800300d 	.word	0x0800300d
 8003000:	0800301f 	.word	0x0800301f
 8003004:	0800300d 	.word	0x0800300d
 8003008:	080030a1 	.word	0x080030a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003010:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d045      	beq.n	80030a4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800301c:	e042      	b.n	80030a4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003022:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003026:	d13f      	bne.n	80030a8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800302c:	e03c      	b.n	80030a8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003036:	d121      	bne.n	800307c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2b03      	cmp	r3, #3
 800303c:	d836      	bhi.n	80030ac <DMA_CheckFifoParam+0xd8>
 800303e:	a201      	add	r2, pc, #4	; (adr r2, 8003044 <DMA_CheckFifoParam+0x70>)
 8003040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003044:	08003055 	.word	0x08003055
 8003048:	0800305b 	.word	0x0800305b
 800304c:	08003055 	.word	0x08003055
 8003050:	0800306d 	.word	0x0800306d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	73fb      	strb	r3, [r7, #15]
      break;
 8003058:	e02f      	b.n	80030ba <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d024      	beq.n	80030b0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800306a:	e021      	b.n	80030b0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003070:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003074:	d11e      	bne.n	80030b4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800307a:	e01b      	b.n	80030b4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d902      	bls.n	8003088 <DMA_CheckFifoParam+0xb4>
 8003082:	2b03      	cmp	r3, #3
 8003084:	d003      	beq.n	800308e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003086:	e018      	b.n	80030ba <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
      break;
 800308c:	e015      	b.n	80030ba <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003092:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00e      	beq.n	80030b8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	73fb      	strb	r3, [r7, #15]
      break;
 800309e:	e00b      	b.n	80030b8 <DMA_CheckFifoParam+0xe4>
      break;
 80030a0:	bf00      	nop
 80030a2:	e00a      	b.n	80030ba <DMA_CheckFifoParam+0xe6>
      break;
 80030a4:	bf00      	nop
 80030a6:	e008      	b.n	80030ba <DMA_CheckFifoParam+0xe6>
      break;
 80030a8:	bf00      	nop
 80030aa:	e006      	b.n	80030ba <DMA_CheckFifoParam+0xe6>
      break;
 80030ac:	bf00      	nop
 80030ae:	e004      	b.n	80030ba <DMA_CheckFifoParam+0xe6>
      break;
 80030b0:	bf00      	nop
 80030b2:	e002      	b.n	80030ba <DMA_CheckFifoParam+0xe6>
      break;   
 80030b4:	bf00      	nop
 80030b6:	e000      	b.n	80030ba <DMA_CheckFifoParam+0xe6>
      break;
 80030b8:	bf00      	nop
    }
  } 
  
  return status; 
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b089      	sub	sp, #36	; 0x24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80030da:	2300      	movs	r3, #0
 80030dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80030de:	2300      	movs	r3, #0
 80030e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
 80030e6:	e169      	b.n	80033bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80030e8:	2201      	movs	r2, #1
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4013      	ands	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	429a      	cmp	r2, r3
 8003102:	f040 8158 	bne.w	80033b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d00b      	beq.n	8003126 <HAL_GPIO_Init+0x5e>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d007      	beq.n	8003126 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800311a:	2b11      	cmp	r3, #17
 800311c:	d003      	beq.n	8003126 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b12      	cmp	r3, #18
 8003124:	d130      	bne.n	8003188 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	2203      	movs	r2, #3
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43db      	mvns	r3, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4013      	ands	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4313      	orrs	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800315c:	2201      	movs	r2, #1
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4013      	ands	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	091b      	lsrs	r3, r3, #4
 8003172:	f003 0201 	and.w	r2, r3, #1
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	2203      	movs	r2, #3
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	43db      	mvns	r3, r3
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4013      	ands	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d003      	beq.n	80031c8 <HAL_GPIO_Init+0x100>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b12      	cmp	r3, #18
 80031c6:	d123      	bne.n	8003210 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	08da      	lsrs	r2, r3, #3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3208      	adds	r2, #8
 80031d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	220f      	movs	r2, #15
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4013      	ands	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	691a      	ldr	r2, [r3, #16]
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4313      	orrs	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	08da      	lsrs	r2, r3, #3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3208      	adds	r2, #8
 800320a:	69b9      	ldr	r1, [r7, #24]
 800320c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	2203      	movs	r2, #3
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4013      	ands	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 0203 	and.w	r2, r3, #3
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 80b2 	beq.w	80033b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003252:	4b5f      	ldr	r3, [pc, #380]	; (80033d0 <HAL_GPIO_Init+0x308>)
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	4a5e      	ldr	r2, [pc, #376]	; (80033d0 <HAL_GPIO_Init+0x308>)
 8003258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800325c:	6453      	str	r3, [r2, #68]	; 0x44
 800325e:	4b5c      	ldr	r3, [pc, #368]	; (80033d0 <HAL_GPIO_Init+0x308>)
 8003260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800326a:	4a5a      	ldr	r2, [pc, #360]	; (80033d4 <HAL_GPIO_Init+0x30c>)
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	089b      	lsrs	r3, r3, #2
 8003270:	3302      	adds	r3, #2
 8003272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003276:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	220f      	movs	r2, #15
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	43db      	mvns	r3, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a51      	ldr	r2, [pc, #324]	; (80033d8 <HAL_GPIO_Init+0x310>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d02b      	beq.n	80032ee <HAL_GPIO_Init+0x226>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a50      	ldr	r2, [pc, #320]	; (80033dc <HAL_GPIO_Init+0x314>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d025      	beq.n	80032ea <HAL_GPIO_Init+0x222>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a4f      	ldr	r2, [pc, #316]	; (80033e0 <HAL_GPIO_Init+0x318>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d01f      	beq.n	80032e6 <HAL_GPIO_Init+0x21e>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a4e      	ldr	r2, [pc, #312]	; (80033e4 <HAL_GPIO_Init+0x31c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d019      	beq.n	80032e2 <HAL_GPIO_Init+0x21a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a4d      	ldr	r2, [pc, #308]	; (80033e8 <HAL_GPIO_Init+0x320>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d013      	beq.n	80032de <HAL_GPIO_Init+0x216>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a4c      	ldr	r2, [pc, #304]	; (80033ec <HAL_GPIO_Init+0x324>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d00d      	beq.n	80032da <HAL_GPIO_Init+0x212>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a4b      	ldr	r2, [pc, #300]	; (80033f0 <HAL_GPIO_Init+0x328>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d007      	beq.n	80032d6 <HAL_GPIO_Init+0x20e>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a4a      	ldr	r2, [pc, #296]	; (80033f4 <HAL_GPIO_Init+0x32c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d101      	bne.n	80032d2 <HAL_GPIO_Init+0x20a>
 80032ce:	2307      	movs	r3, #7
 80032d0:	e00e      	b.n	80032f0 <HAL_GPIO_Init+0x228>
 80032d2:	2308      	movs	r3, #8
 80032d4:	e00c      	b.n	80032f0 <HAL_GPIO_Init+0x228>
 80032d6:	2306      	movs	r3, #6
 80032d8:	e00a      	b.n	80032f0 <HAL_GPIO_Init+0x228>
 80032da:	2305      	movs	r3, #5
 80032dc:	e008      	b.n	80032f0 <HAL_GPIO_Init+0x228>
 80032de:	2304      	movs	r3, #4
 80032e0:	e006      	b.n	80032f0 <HAL_GPIO_Init+0x228>
 80032e2:	2303      	movs	r3, #3
 80032e4:	e004      	b.n	80032f0 <HAL_GPIO_Init+0x228>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e002      	b.n	80032f0 <HAL_GPIO_Init+0x228>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <HAL_GPIO_Init+0x228>
 80032ee:	2300      	movs	r3, #0
 80032f0:	69fa      	ldr	r2, [r7, #28]
 80032f2:	f002 0203 	and.w	r2, r2, #3
 80032f6:	0092      	lsls	r2, r2, #2
 80032f8:	4093      	lsls	r3, r2
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003300:	4934      	ldr	r1, [pc, #208]	; (80033d4 <HAL_GPIO_Init+0x30c>)
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	089b      	lsrs	r3, r3, #2
 8003306:	3302      	adds	r3, #2
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800330e:	4b3a      	ldr	r3, [pc, #232]	; (80033f8 <HAL_GPIO_Init+0x330>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	43db      	mvns	r3, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4013      	ands	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	4313      	orrs	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003332:	4a31      	ldr	r2, [pc, #196]	; (80033f8 <HAL_GPIO_Init+0x330>)
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003338:	4b2f      	ldr	r3, [pc, #188]	; (80033f8 <HAL_GPIO_Init+0x330>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	43db      	mvns	r3, r3
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4013      	ands	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800335c:	4a26      	ldr	r2, [pc, #152]	; (80033f8 <HAL_GPIO_Init+0x330>)
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003362:	4b25      	ldr	r3, [pc, #148]	; (80033f8 <HAL_GPIO_Init+0x330>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	43db      	mvns	r3, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4013      	ands	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	4313      	orrs	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003386:	4a1c      	ldr	r2, [pc, #112]	; (80033f8 <HAL_GPIO_Init+0x330>)
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800338c:	4b1a      	ldr	r3, [pc, #104]	; (80033f8 <HAL_GPIO_Init+0x330>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	43db      	mvns	r3, r3
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4013      	ands	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033b0:	4a11      	ldr	r2, [pc, #68]	; (80033f8 <HAL_GPIO_Init+0x330>)
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	3301      	adds	r3, #1
 80033ba:	61fb      	str	r3, [r7, #28]
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	2b0f      	cmp	r3, #15
 80033c0:	f67f ae92 	bls.w	80030e8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80033c4:	bf00      	nop
 80033c6:	3724      	adds	r7, #36	; 0x24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	40023800 	.word	0x40023800
 80033d4:	40013800 	.word	0x40013800
 80033d8:	40020000 	.word	0x40020000
 80033dc:	40020400 	.word	0x40020400
 80033e0:	40020800 	.word	0x40020800
 80033e4:	40020c00 	.word	0x40020c00
 80033e8:	40021000 	.word	0x40021000
 80033ec:	40021400 	.word	0x40021400
 80033f0:	40021800 	.word	0x40021800
 80033f4:	40021c00 	.word	0x40021c00
 80033f8:	40013c00 	.word	0x40013c00

080033fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	807b      	strh	r3, [r7, #2]
 8003408:	4613      	mov	r3, r2
 800340a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800340c:	787b      	ldrb	r3, [r7, #1]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003412:	887a      	ldrh	r2, [r7, #2]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003418:	e003      	b.n	8003422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800341a:	887b      	ldrh	r3, [r7, #2]
 800341c:	041a      	lsls	r2, r3, #16
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	619a      	str	r2, [r3, #24]
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
	...

08003430 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e07f      	b.n	8003542 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d106      	bne.n	800345c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7fe f9e4 	bl	8001824 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2224      	movs	r2, #36	; 0x24
 8003460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0201 	bic.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003480:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003490:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d107      	bne.n	80034aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689a      	ldr	r2, [r3, #8]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034a6:	609a      	str	r2, [r3, #8]
 80034a8:	e006      	b.n	80034b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80034b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d104      	bne.n	80034ca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6859      	ldr	r1, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	4b1d      	ldr	r3, [pc, #116]	; (800354c <HAL_I2C_Init+0x11c>)
 80034d6:	430b      	orrs	r3, r1
 80034d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691a      	ldr	r2, [r3, #16]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	ea42 0103 	orr.w	r1, r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	021a      	lsls	r2, r3, #8
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	69d9      	ldr	r1, [r3, #28]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1a      	ldr	r2, [r3, #32]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2220      	movs	r2, #32
 800352e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	02008000 	.word	0x02008000

08003550 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08a      	sub	sp, #40	; 0x28
 8003554:	af02      	add	r7, sp, #8
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	4608      	mov	r0, r1
 800355a:	4611      	mov	r1, r2
 800355c:	461a      	mov	r2, r3
 800355e:	4603      	mov	r3, r0
 8003560:	817b      	strh	r3, [r7, #10]
 8003562:	460b      	mov	r3, r1
 8003564:	813b      	strh	r3, [r7, #8]
 8003566:	4613      	mov	r3, r2
 8003568:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b20      	cmp	r3, #32
 8003574:	f040 80d5 	bne.w	8003722 <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <HAL_I2C_Mem_Write_DMA+0x34>
 800357e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003580:	2b00      	cmp	r3, #0
 8003582:	d105      	bne.n	8003590 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800358a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e0c9      	b.n	8003724 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800359a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800359e:	d101      	bne.n	80035a4 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 80035a0:	2302      	movs	r3, #2
 80035a2:	e0bf      	b.n	8003724 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d101      	bne.n	80035b2 <HAL_I2C_Mem_Write_DMA+0x62>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e0b8      	b.n	8003724 <HAL_I2C_Mem_Write_DMA+0x1d4>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035ba:	f7fe fbdf 	bl	8001d7c <HAL_GetTick>
 80035be:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2221      	movs	r2, #33	; 0x21
 80035c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2240      	movs	r2, #64	; 0x40
 80035cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80035e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4a51      	ldr	r2, [pc, #324]	; (800372c <HAL_I2C_Mem_Write_DMA+0x1dc>)
 80035e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4a51      	ldr	r2, [pc, #324]	; (8003730 <HAL_I2C_Mem_Write_DMA+0x1e0>)
 80035ec:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	2bff      	cmp	r3, #255	; 0xff
 80035f6:	d906      	bls.n	8003606 <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	22ff      	movs	r2, #255	; 0xff
 80035fc:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80035fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003602:	61fb      	str	r3, [r7, #28]
 8003604:	e007      	b.n	8003616 <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360a:	b29a      	uxth	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003610:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003614:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003616:	88f8      	ldrh	r0, [r7, #6]
 8003618:	893a      	ldrh	r2, [r7, #8]
 800361a:	8979      	ldrh	r1, [r7, #10]
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	9301      	str	r3, [sp, #4]
 8003620:	2319      	movs	r3, #25
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	4603      	mov	r3, r0
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 fbae 	bl	8003d88 <I2C_RequestMemoryWrite>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d005      	beq.n	800363e <HAL_I2C_Mem_Write_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e072      	b.n	8003724 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003642:	2b00      	cmp	r3, #0
 8003644:	d020      	beq.n	8003688 <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364a:	4a3a      	ldr	r2, [pc, #232]	; (8003734 <HAL_I2C_Mem_Write_DMA+0x1e4>)
 800364c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003652:	4a39      	ldr	r2, [pc, #228]	; (8003738 <HAL_I2C_Mem_Write_DMA+0x1e8>)
 8003654:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365a:	2200      	movs	r2, #0
 800365c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003662:	2200      	movs	r2, #0
 8003664:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800366a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3328      	adds	r3, #40	; 0x28
 8003672:	461a      	mov	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003678:	f7ff fa30 	bl	8002adc <HAL_DMA_Start_IT>
 800367c:	4603      	mov	r3, r0
 800367e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8003680:	7dfb      	ldrb	r3, [r7, #23]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d139      	bne.n	80036fa <HAL_I2C_Mem_Write_DMA+0x1aa>
 8003686:	e013      	b.n	80036b0 <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e039      	b.n	8003724 <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	8979      	ldrh	r1, [r7, #10]
 80036b8:	2300      	movs	r3, #0
 80036ba:	9300      	str	r3, [sp, #0]
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f001 f8ec 	bl	800489c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80036de:	2111      	movs	r1, #17
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f001 f909 	bl	80048f8 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036f4:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	e014      	b.n	8003724 <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2220      	movs	r2, #32
 80036fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370e:	f043 0210 	orr.w	r2, r3, #16
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8003722:	2302      	movs	r3, #2
  }
}
 8003724:	4618      	mov	r0, r3
 8003726:	3720      	adds	r7, #32
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	ffff0000 	.word	0xffff0000
 8003730:	08003a13 	.word	0x08003a13
 8003734:	0800457d 	.word	0x0800457d
 8003738:	08004613 	.word	0x08004613

0800373c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	460b      	mov	r3, r1
 8003796:	70fb      	strb	r3, [r7, #3]
 8003798:	4613      	mov	r3, r2
 800379a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003828:	2b01      	cmp	r3, #1
 800382a:	d101      	bne.n	8003830 <I2C_Slave_ISR_IT+0x24>
 800382c:	2302      	movs	r3, #2
 800382e:	e0ec      	b.n	8003a0a <I2C_Slave_ISR_IT+0x1fe>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b00      	cmp	r3, #0
 8003842:	d009      	beq.n	8003858 <I2C_Slave_ISR_IT+0x4c>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	095b      	lsrs	r3, r3, #5
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003850:	6939      	ldr	r1, [r7, #16]
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 fc84 	bl	8004160 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	091b      	lsrs	r3, r3, #4
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b00      	cmp	r3, #0
 8003862:	d04d      	beq.n	8003900 <I2C_Slave_ISR_IT+0xf4>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	091b      	lsrs	r3, r3, #4
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d047      	beq.n	8003900 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d128      	bne.n	80038cc <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b28      	cmp	r3, #40	; 0x28
 8003884:	d108      	bne.n	8003898 <I2C_Slave_ISR_IT+0x8c>
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800388c:	d104      	bne.n	8003898 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800388e:	6939      	ldr	r1, [r7, #16]
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 fd3b 	bl	800430c <I2C_ITListenCplt>
 8003896:	e032      	b.n	80038fe <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b29      	cmp	r3, #41	; 0x29
 80038a2:	d10e      	bne.n	80038c2 <I2C_Slave_ISR_IT+0xb6>
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038aa:	d00a      	beq.n	80038c2 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2210      	movs	r2, #16
 80038b2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 fe3d 	bl	8004534 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 fb77 	bl	8003fae <I2C_ITSlaveSeqCplt>
 80038c0:	e01d      	b.n	80038fe <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2210      	movs	r2, #16
 80038c8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80038ca:	e096      	b.n	80039fa <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2210      	movs	r2, #16
 80038d2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d8:	f043 0204 	orr.w	r2, r3, #4
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d004      	beq.n	80038f0 <I2C_Slave_ISR_IT+0xe4>
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038ec:	f040 8085 	bne.w	80039fa <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f4:	4619      	mov	r1, r3
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 fd5c 	bl	80043b4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80038fc:	e07d      	b.n	80039fa <I2C_Slave_ISR_IT+0x1ee>
 80038fe:	e07c      	b.n	80039fa <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	089b      	lsrs	r3, r3, #2
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	d030      	beq.n	800396e <I2C_Slave_ISR_IT+0x162>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	089b      	lsrs	r3, r3, #2
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b00      	cmp	r3, #0
 8003916:	d02a      	beq.n	800396e <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d018      	beq.n	8003954 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393e:	3b01      	subs	r3, #1
 8003940:	b29a      	uxth	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003958:	b29b      	uxth	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d14f      	bne.n	80039fe <I2C_Slave_ISR_IT+0x1f2>
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003964:	d04b      	beq.n	80039fe <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 fb21 	bl	8003fae <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800396c:	e047      	b.n	80039fe <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	08db      	lsrs	r3, r3, #3
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <I2C_Slave_ISR_IT+0x184>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	08db      	lsrs	r3, r3, #3
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d004      	beq.n	8003990 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003986:	6939      	ldr	r1, [r7, #16]
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 fa51 	bl	8003e30 <I2C_ITAddrCplt>
 800398e:	e037      	b.n	8003a00 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	085b      	lsrs	r3, r3, #1
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b00      	cmp	r3, #0
 800399a:	d031      	beq.n	8003a00 <I2C_Slave_ISR_IT+0x1f4>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	085b      	lsrs	r3, r3, #1
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d02b      	beq.n	8003a00 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d018      	beq.n	80039e4 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	781a      	ldrb	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	1c5a      	adds	r2, r3, #1
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039da:	3b01      	subs	r3, #1
 80039dc:	b29a      	uxth	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	851a      	strh	r2, [r3, #40]	; 0x28
 80039e2:	e00d      	b.n	8003a00 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039ea:	d002      	beq.n	80039f2 <I2C_Slave_ISR_IT+0x1e6>
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d106      	bne.n	8003a00 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 fadb 	bl	8003fae <I2C_ITSlaveSeqCplt>
 80039f8:	e002      	b.n	8003a00 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80039fa:	bf00      	nop
 80039fc:	e000      	b.n	8003a00 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80039fe:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b088      	sub	sp, #32
 8003a16:	af02      	add	r7, sp, #8
 8003a18:	60f8      	str	r0, [r7, #12]
 8003a1a:	60b9      	str	r1, [r7, #8]
 8003a1c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d101      	bne.n	8003a2c <I2C_Master_ISR_DMA+0x1a>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e0e1      	b.n	8003bf0 <I2C_Master_ISR_DMA+0x1de>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	091b      	lsrs	r3, r3, #4
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d017      	beq.n	8003a70 <I2C_Master_ISR_DMA+0x5e>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	091b      	lsrs	r3, r3, #4
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d011      	beq.n	8003a70 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2210      	movs	r2, #16
 8003a52:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a58:	f043 0204 	orr.w	r2, r3, #4
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003a60:	2112      	movs	r1, #18
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 ff48 	bl	80048f8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 fd63 	bl	8004534 <I2C_Flush_TXDR>
 8003a6e:	e0ba      	b.n	8003be6 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	09db      	lsrs	r3, r3, #7
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d072      	beq.n	8003b62 <I2C_Master_ISR_DMA+0x150>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	099b      	lsrs	r3, r3, #6
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d06c      	beq.n	8003b62 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a96:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d04e      	beq.n	8003b40 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aae:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2bff      	cmp	r3, #255	; 0xff
 8003ab8:	d906      	bls.n	8003ac8 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	22ff      	movs	r2, #255	; 0xff
 8003abe:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003ac0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ac4:	617b      	str	r3, [r7, #20]
 8003ac6:	e010      	b.n	8003aea <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ada:	d003      	beq.n	8003ae4 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae0:	617b      	str	r3, [r7, #20]
 8003ae2:	e002      	b.n	8003aea <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003ae4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ae8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	8a79      	ldrh	r1, [r7, #18]
 8003af2:	2300      	movs	r3, #0
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 fecf 	bl	800489c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b22      	cmp	r3, #34	; 0x22
 8003b1a:	d108      	bne.n	8003b2e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b2a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003b2c:	e05b      	b.n	8003be6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b3c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003b3e:	e052      	b.n	8003be6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b4e:	d003      	beq.n	8003b58 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 f9ef 	bl	8003f34 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003b56:	e046      	b.n	8003be6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003b58:	2140      	movs	r1, #64	; 0x40
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 fc2a 	bl	80043b4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003b60:	e041      	b.n	8003be6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	099b      	lsrs	r3, r3, #6
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d029      	beq.n	8003bc2 <I2C_Master_ISR_DMA+0x1b0>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	099b      	lsrs	r3, r3, #6
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d023      	beq.n	8003bc2 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d119      	bne.n	8003bb8 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b92:	d027      	beq.n	8003be4 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b9c:	d108      	bne.n	8003bb0 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bac:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003bae:	e019      	b.n	8003be4 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 f9bf 	bl	8003f34 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003bb6:	e015      	b.n	8003be4 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003bb8:	2140      	movs	r1, #64	; 0x40
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 fbfa 	bl	80043b4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003bc0:	e010      	b.n	8003be4 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	095b      	lsrs	r3, r3, #5
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00b      	beq.n	8003be6 <I2C_Master_ISR_DMA+0x1d4>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	095b      	lsrs	r3, r3, #5
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d005      	beq.n	8003be6 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003bda:	68b9      	ldr	r1, [r7, #8]
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 fa23 	bl	8004028 <I2C_ITMasterCplt>
 8003be2:	e000      	b.n	8003be6 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003be4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	613b      	str	r3, [r7, #16]
  uint32_t treatdmanack = 0U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d101      	bne.n	8003c1c <I2C_Slave_ISR_DMA+0x24>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	e0b1      	b.n	8003d80 <I2C_Slave_ISR_DMA+0x188>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	095b      	lsrs	r3, r3, #5
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d009      	beq.n	8003c44 <I2C_Slave_ISR_DMA+0x4c>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	095b      	lsrs	r3, r3, #5
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003c3c:	68b9      	ldr	r1, [r7, #8]
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 fa8e 	bl	8004160 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	091b      	lsrs	r3, r3, #4
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 8082 	beq.w	8003d56 <I2C_Slave_ISR_DMA+0x15e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	091b      	lsrs	r3, r3, #4
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d07b      	beq.n	8003d56 <I2C_Slave_ISR_DMA+0x15e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	0b9b      	lsrs	r3, r3, #14
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d105      	bne.n	8003c76 <I2C_Slave_ISR_DMA+0x7e>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	0bdb      	lsrs	r3, r3, #15
 8003c6e:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d068      	beq.n	8003d48 <I2C_Slave_ISR_DMA+0x150>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00d      	beq.n	8003c9a <I2C_Slave_ISR_DMA+0xa2>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	0bdb      	lsrs	r3, r3, #15
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d007      	beq.n	8003c9a <I2C_Slave_ISR_DMA+0xa2>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <I2C_Slave_ISR_DMA+0xa2>
          {
            treatdmanack = 1U;
 8003c96:	2301      	movs	r3, #1
 8003c98:	617b      	str	r3, [r7, #20]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00d      	beq.n	8003cbe <I2C_Slave_ISR_DMA+0xc6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	0b9b      	lsrs	r3, r3, #14
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d007      	beq.n	8003cbe <I2C_Slave_ISR_DMA+0xc6>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <I2C_Slave_ISR_DMA+0xc6>
          {
            treatdmanack = 1U;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	617b      	str	r3, [r7, #20]
          }
        }
      }

      if (treatdmanack == 1U)
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d128      	bne.n	8003d16 <I2C_Slave_ISR_DMA+0x11e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b28      	cmp	r3, #40	; 0x28
 8003cce:	d108      	bne.n	8003ce2 <I2C_Slave_ISR_DMA+0xea>
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cd6:	d104      	bne.n	8003ce2 <I2C_Slave_ISR_DMA+0xea>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003cd8:	68b9      	ldr	r1, [r7, #8]
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 fb16 	bl	800430c <I2C_ITListenCplt>
 8003ce0:	e031      	b.n	8003d46 <I2C_Slave_ISR_DMA+0x14e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b29      	cmp	r3, #41	; 0x29
 8003cec:	d10e      	bne.n	8003d0c <I2C_Slave_ISR_DMA+0x114>
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cf4:	d00a      	beq.n	8003d0c <I2C_Slave_ISR_DMA+0x114>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2210      	movs	r2, #16
 8003cfc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 fc18 	bl	8004534 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 f952 	bl	8003fae <I2C_ITSlaveSeqCplt>
 8003d0a:	e01c      	b.n	8003d46 <I2C_Slave_ISR_DMA+0x14e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2210      	movs	r2, #16
 8003d12:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003d14:	e01d      	b.n	8003d52 <I2C_Slave_ISR_DMA+0x15a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2210      	movs	r2, #16
 8003d1c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d22:	f043 0204 	orr.w	r2, r3, #4
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	645a      	str	r2, [r3, #68]	; 0x44

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <I2C_Slave_ISR_DMA+0x140>
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d36:	d10c      	bne.n	8003d52 <I2C_Slave_ISR_DMA+0x15a>
        {
          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 fb38 	bl	80043b4 <I2C_ITError>
      if (treatdmanack == 1U)
 8003d44:	e005      	b.n	8003d52 <I2C_Slave_ISR_DMA+0x15a>
 8003d46:	e004      	b.n	8003d52 <I2C_Slave_ISR_DMA+0x15a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2210      	movs	r2, #16
 8003d4e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003d50:	e011      	b.n	8003d76 <I2C_Slave_ISR_DMA+0x17e>
      if (treatdmanack == 1U)
 8003d52:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003d54:	e00f      	b.n	8003d76 <I2C_Slave_ISR_DMA+0x17e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	08db      	lsrs	r3, r3, #3
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d009      	beq.n	8003d76 <I2C_Slave_ISR_DMA+0x17e>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	08db      	lsrs	r3, r3, #3
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <I2C_Slave_ISR_DMA+0x17e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003d6e:	68b9      	ldr	r1, [r7, #8]
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 f85d 	bl	8003e30 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3718      	adds	r7, #24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af02      	add	r7, sp, #8
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	4608      	mov	r0, r1
 8003d92:	4611      	mov	r1, r2
 8003d94:	461a      	mov	r2, r3
 8003d96:	4603      	mov	r3, r0
 8003d98:	817b      	strh	r3, [r7, #10]
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	813b      	strh	r3, [r7, #8]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003da2:	88fb      	ldrh	r3, [r7, #6]
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	8979      	ldrh	r1, [r7, #10]
 8003da8:	4b20      	ldr	r3, [pc, #128]	; (8003e2c <I2C_RequestMemoryWrite+0xa4>)
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 fd73 	bl	800489c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003db6:	69fa      	ldr	r2, [r7, #28]
 8003db8:	69b9      	ldr	r1, [r7, #24]
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 fcc7 	bl	800474e <I2C_WaitOnTXISFlagUntilTimeout>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e02c      	b.n	8003e24 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dca:	88fb      	ldrh	r3, [r7, #6]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d105      	bne.n	8003ddc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dd0:	893b      	ldrh	r3, [r7, #8]
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	629a      	str	r2, [r3, #40]	; 0x28
 8003dda:	e015      	b.n	8003e08 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ddc:	893b      	ldrh	r3, [r7, #8]
 8003dde:	0a1b      	lsrs	r3, r3, #8
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dea:	69fa      	ldr	r2, [r7, #28]
 8003dec:	69b9      	ldr	r1, [r7, #24]
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 fcad 	bl	800474e <I2C_WaitOnTXISFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e012      	b.n	8003e24 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dfe:	893b      	ldrh	r3, [r7, #8]
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	2180      	movs	r1, #128	; 0x80
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 fc5b 	bl	80046ce <I2C_WaitOnFlagUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	80002000 	.word	0x80002000

08003e30 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e46:	2b28      	cmp	r3, #40	; 0x28
 8003e48:	d168      	bne.n	8003f1c <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	0c1b      	lsrs	r3, r3, #16
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	0c1b      	lsrs	r3, r3, #16
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003e68:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e76:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003e84:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d137      	bne.n	8003efe <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8003e8e:	897b      	ldrh	r3, [r7, #10]
 8003e90:	09db      	lsrs	r3, r3, #7
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	89bb      	ldrh	r3, [r7, #12]
 8003e96:	4053      	eors	r3, r2
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	f003 0306 	and.w	r3, r3, #6
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d11c      	bne.n	8003edc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003ea2:	897b      	ldrh	r3, [r7, #10]
 8003ea4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d139      	bne.n	8003f2c <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2208      	movs	r2, #8
 8003ec4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003ece:	89ba      	ldrh	r2, [r7, #12]
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff fc59 	bl	800378c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003eda:	e027      	b.n	8003f2c <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 8003edc:	893b      	ldrh	r3, [r7, #8]
 8003ede:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003ee0:	2104      	movs	r1, #4
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fd76 	bl	80049d4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003ef0:	89ba      	ldrh	r2, [r7, #12]
 8003ef2:	7bfb      	ldrb	r3, [r7, #15]
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7ff fc48 	bl	800378c <HAL_I2C_AddrCallback>
}
 8003efc:	e016      	b.n	8003f2c <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003efe:	2104      	movs	r1, #4
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 fd67 	bl	80049d4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003f0e:	89ba      	ldrh	r2, [r7, #12]
 8003f10:	7bfb      	ldrb	r3, [r7, #15]
 8003f12:	4619      	mov	r1, r3
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7ff fc39 	bl	800378c <HAL_I2C_AddrCallback>
}
 8003f1a:	e007      	b.n	8003f2c <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2208      	movs	r2, #8
 8003f22:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003f2c:	bf00      	nop
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b21      	cmp	r3, #33	; 0x21
 8003f4e:	d115      	bne.n	8003f7c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2220      	movs	r2, #32
 8003f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2211      	movs	r2, #17
 8003f5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003f64:	2101      	movs	r1, #1
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fd34 	bl	80049d4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7ff fbe1 	bl	800373c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003f7a:	e014      	b.n	8003fa6 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2212      	movs	r2, #18
 8003f88:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003f90:	2102      	movs	r1, #2
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 fd1e 	bl	80049d4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f7ff fbd5 	bl	8003750 <HAL_I2C_MasterRxCpltCallback>
}
 8003fa6:	bf00      	nop
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b082      	sub	sp, #8
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b29      	cmp	r3, #41	; 0x29
 8003fc8:	d112      	bne.n	8003ff0 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2228      	movs	r2, #40	; 0x28
 8003fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2221      	movs	r2, #33	; 0x21
 8003fd6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003fd8:	2101      	movs	r1, #1
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 fcfa 	bl	80049d4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7ff fbbb 	bl	8003764 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003fee:	e017      	b.n	8004020 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b2a      	cmp	r3, #42	; 0x2a
 8003ffa:	d111      	bne.n	8004020 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2228      	movs	r2, #40	; 0x28
 8004000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2222      	movs	r2, #34	; 0x22
 8004008:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800400a:	2102      	movs	r1, #2
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 fce1 	bl	80049d4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7ff fbac 	bl	8003778 <HAL_I2C_SlaveRxCpltCallback>
}
 8004020:	bf00      	nop
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2220      	movs	r2, #32
 8004038:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6859      	ldr	r1, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	4b44      	ldr	r3, [pc, #272]	; (8004158 <I2C_ITMasterCplt+0x130>)
 8004046:	400b      	ands	r3, r1
 8004048:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a40      	ldr	r2, [pc, #256]	; (800415c <I2C_ITMasterCplt+0x134>)
 800405a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	091b      	lsrs	r3, r3, #4
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	d009      	beq.n	800407c <I2C_ITMasterCplt+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2210      	movs	r2, #16
 800406e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004074:	f043 0204 	orr.w	r2, r3, #4
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 fa59 	bl	8004534 <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004082:	2103      	movs	r1, #3
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 fca5 	bl	80049d4 <I2C_Disable_IRQ>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408e:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b60      	cmp	r3, #96	; 0x60
 800409a:	d002      	beq.n	80040a2 <I2C_ITMasterCplt+0x7a>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d006      	beq.n	80040b0 <I2C_ITMasterCplt+0x88>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a6:	4619      	mov	r1, r3
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f983 	bl	80043b4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80040ae:	e04e      	b.n	800414e <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b21      	cmp	r3, #33	; 0x21
 80040ba:	d121      	bne.n	8004100 <I2C_ITMasterCplt+0xd8>
    hi2c->State = HAL_I2C_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2220      	movs	r2, #32
 80040c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b40      	cmp	r3, #64	; 0x40
 80040ce:	d10b      	bne.n	80040e8 <I2C_ITMasterCplt+0xc0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f7ff fb6b 	bl	80037bc <HAL_I2C_MemTxCpltCallback>
}
 80040e6:	e032      	b.n	800414e <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7ff fb1f 	bl	800373c <HAL_I2C_MasterTxCpltCallback>
}
 80040fe:	e026      	b.n	800414e <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b22      	cmp	r3, #34	; 0x22
 800410a:	d120      	bne.n	800414e <I2C_ITMasterCplt+0x126>
    hi2c->State = HAL_I2C_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b40      	cmp	r3, #64	; 0x40
 800411e:	d10b      	bne.n	8004138 <I2C_ITMasterCplt+0x110>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7ff fb4d 	bl	80037d0 <HAL_I2C_MemRxCpltCallback>
}
 8004136:	e00a      	b.n	800414e <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7ff fb01 	bl	8003750 <HAL_I2C_MasterRxCpltCallback>
}
 800414e:	bf00      	nop
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	fe00e800 	.word	0xfe00e800
 800415c:	ffff0000 	.word	0xffff0000

08004160 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2220      	movs	r2, #32
 800417c:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800417e:	2107      	movs	r1, #7
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 fc27 	bl	80049d4 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004194:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6859      	ldr	r1, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	4b58      	ldr	r3, [pc, #352]	; (8004304 <I2C_ITSlaveCplt+0x1a4>)
 80041a2:	400b      	ands	r3, r1
 80041a4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f9c4 	bl	8004534 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	0b9b      	lsrs	r3, r3, #14
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00b      	beq.n	80041d0 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d018      	beq.n	80041f2 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041ce:	e010      	b.n	80041f2 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	0bdb      	lsrs	r3, r3, #15
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00a      	beq.n	80041f2 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d006      	beq.n	80041f2 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	089b      	lsrs	r3, r3, #2
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d020      	beq.n	8004240 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f023 0304 	bic.w	r3, r3, #4
 8004204:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	b2d2      	uxtb	r2, r2
 8004212:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00c      	beq.n	8004240 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422a:	3b01      	subs	r3, #1
 800422c:	b29a      	uxth	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004236:	b29b      	uxth	r3, r3
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d005      	beq.n	8004256 <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424e:	f043 0204 	orr.w	r2, r3, #4
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426e:	2b00      	cmp	r3, #0
 8004270:	d010      	beq.n	8004294 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004276:	4619      	mov	r1, r3
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f89b 	bl	80043b4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b28      	cmp	r3, #40	; 0x28
 8004288:	d138      	bne.n	80042fc <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800428a:	68f9      	ldr	r1, [r7, #12]
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f83d 	bl	800430c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004292:	e033      	b.n	80042fc <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800429c:	d011      	beq.n	80042c2 <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7ff fe85 	bl	8003fae <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a18      	ldr	r2, [pc, #96]	; (8004308 <I2C_ITSlaveCplt+0x1a8>)
 80042a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7ff fa74 	bl	80037a8 <HAL_I2C_ListenCpltCallback>
}
 80042c0:	e01c      	b.n	80042fc <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b22      	cmp	r3, #34	; 0x22
 80042cc:	d10b      	bne.n	80042e6 <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7ff fa4a 	bl	8003778 <HAL_I2C_SlaveRxCpltCallback>
}
 80042e4:	e00a      	b.n	80042fc <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7ff fa34 	bl	8003764 <HAL_I2C_SlaveTxCpltCallback>
}
 80042fc:	bf00      	nop
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	fe00e800 	.word	0xfe00e800
 8004308:	ffff0000 	.word	0xffff0000

0800430c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a25      	ldr	r2, [pc, #148]	; (80043b0 <I2C_ITListenCplt+0xa4>)
 800431a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2220      	movs	r2, #32
 8004326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	089b      	lsrs	r3, r3, #2
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d022      	beq.n	800438a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004360:	2b00      	cmp	r3, #0
 8004362:	d012      	beq.n	800438a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004374:	b29b      	uxth	r3, r3
 8004376:	3b01      	subs	r3, #1
 8004378:	b29a      	uxth	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004382:	f043 0204 	orr.w	r2, r3, #4
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800438a:	2107      	movs	r1, #7
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fb21 	bl	80049d4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2210      	movs	r2, #16
 8004398:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7ff fa00 	bl	80037a8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80043a8:	bf00      	nop
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	ffff0000 	.word	0xffff0000

080043b4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043c4:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a55      	ldr	r2, [pc, #340]	; (8004528 <I2C_ITError+0x174>)
 80043d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
 80043e8:	2b28      	cmp	r3, #40	; 0x28
 80043ea:	d005      	beq.n	80043f8 <I2C_ITError+0x44>
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
 80043ee:	2b29      	cmp	r3, #41	; 0x29
 80043f0:	d002      	beq.n	80043f8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
 80043f4:	2b2a      	cmp	r3, #42	; 0x2a
 80043f6:	d10e      	bne.n	8004416 <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80043f8:	2103      	movs	r1, #3
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 faea 	bl	80049d4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2228      	movs	r2, #40	; 0x28
 8004404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a46      	ldr	r2, [pc, #280]	; (800452c <I2C_ITError+0x178>)
 8004412:	635a      	str	r2, [r3, #52]	; 0x34
 8004414:	e013      	b.n	800443e <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004416:	2107      	movs	r1, #7
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 fadb 	bl	80049d4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b60      	cmp	r3, #96	; 0x60
 8004428:	d003      	beq.n	8004432 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004448:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800444c:	d123      	bne.n	8004496 <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800445c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004462:	2b00      	cmp	r3, #0
 8004464:	d05c      	beq.n	8004520 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446a:	4a31      	ldr	r2, [pc, #196]	; (8004530 <I2C_ITError+0x17c>)
 800446c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447a:	4618      	mov	r0, r3
 800447c:	f7fe fb8e 	bl	8002b9c <HAL_DMA_Abort_IT>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d04c      	beq.n	8004520 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004490:	4610      	mov	r0, r2
 8004492:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004494:	e044      	b.n	8004520 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044a4:	d123      	bne.n	80044ee <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044b4:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d030      	beq.n	8004520 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c2:	4a1b      	ldr	r2, [pc, #108]	; (8004530 <I2C_ITError+0x17c>)
 80044c4:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fe fb62 	bl	8002b9c <HAL_DMA_Abort_IT>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d020      	beq.n	8004520 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80044e8:	4610      	mov	r0, r2
 80044ea:	4798      	blx	r3
}
 80044ec:	e018      	b.n	8004520 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b60      	cmp	r3, #96	; 0x60
 80044f8:	d10b      	bne.n	8004512 <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2220      	movs	r2, #32
 80044fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7ff f974 	bl	80037f8 <HAL_I2C_AbortCpltCallback>
}
 8004510:	e006      	b.n	8004520 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7ff f962 	bl	80037e4 <HAL_I2C_ErrorCallback>
}
 8004520:	bf00      	nop
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	ffff0000 	.word	0xffff0000
 800452c:	0800380d 	.word	0x0800380d
 8004530:	08004687 	.word	0x08004687

08004534 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b02      	cmp	r3, #2
 8004548:	d103      	bne.n	8004552 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2200      	movs	r2, #0
 8004550:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b01      	cmp	r3, #1
 800455e:	d007      	beq.n	8004570 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699a      	ldr	r2, [r3, #24]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0201 	orr.w	r2, r2, #1
 800456e:	619a      	str	r2, [r3, #24]
  }
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004588:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004598:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459e:	b29b      	uxth	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d104      	bne.n	80045ae <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80045a4:	2112      	movs	r1, #18
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 f9a6 	bl	80048f8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80045ac:	e02d      	b.n	800460a <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80045b6:	441a      	add	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	2bff      	cmp	r3, #255	; 0xff
 80045c4:	d903      	bls.n	80045ce <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	22ff      	movs	r2, #255	; 0xff
 80045ca:	851a      	strh	r2, [r3, #40]	; 0x28
 80045cc:	e004      	b.n	80045d8 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	4619      	mov	r1, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	3328      	adds	r3, #40	; 0x28
 80045e8:	461a      	mov	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ee:	f7fe fa75 	bl	8002adc <HAL_DMA_Start_IT>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d004      	beq.n	8004602 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80045f8:	2110      	movs	r1, #16
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f7ff feda 	bl	80043b4 <I2C_ITError>
}
 8004600:	e003      	b.n	800460a <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004602:	2112      	movs	r1, #18
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 f977 	bl	80048f8 <I2C_Enable_IRQ>
}
 800460a:	bf00      	nop
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b084      	sub	sp, #16
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004622:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	2b00      	cmp	r3, #0
 800462a:	d007      	beq.n	800463c <I2C_DMAError+0x2a>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 8004638:	2301      	movs	r3, #1
 800463a:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004640:	2b00      	cmp	r3, #0
 8004642:	d007      	beq.n	8004654 <I2C_DMAError+0x42>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8004650:	2301      	movs	r3, #1
 8004652:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7fe fc4d 	bl	8002ef4 <HAL_DMA_GetError>
 800465a:	4603      	mov	r3, r0
 800465c:	2b02      	cmp	r3, #2
 800465e:	d00e      	beq.n	800467e <I2C_DMAError+0x6c>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00b      	beq.n	800467e <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004674:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004676:	2110      	movs	r1, #16
 8004678:	68b8      	ldr	r0, [r7, #8]
 800467a:	f7ff fe9b 	bl	80043b4 <I2C_ITError>
  }
}
 800467e:	bf00      	nop
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	2200      	movs	r2, #0
 800469a:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a0:	2200      	movs	r2, #0
 80046a2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b60      	cmp	r3, #96	; 0x60
 80046ae:	d107      	bne.n	80046c0 <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f7ff f89d 	bl	80037f8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80046be:	e002      	b.n	80046c6 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f7ff f88f 	bl	80037e4 <HAL_I2C_ErrorCallback>
}
 80046c6:	bf00      	nop
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b084      	sub	sp, #16
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	60f8      	str	r0, [r7, #12]
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	603b      	str	r3, [r7, #0]
 80046da:	4613      	mov	r3, r2
 80046dc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046de:	e022      	b.n	8004726 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e6:	d01e      	beq.n	8004726 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e8:	f7fd fb48 	bl	8001d7c <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d302      	bcc.n	80046fe <I2C_WaitOnFlagUntilTimeout+0x30>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d113      	bne.n	8004726 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004702:	f043 0220 	orr.w	r2, r3, #32
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2220      	movs	r2, #32
 800470e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e00f      	b.n	8004746 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	699a      	ldr	r2, [r3, #24]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	4013      	ands	r3, r2
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	429a      	cmp	r2, r3
 8004734:	bf0c      	ite	eq
 8004736:	2301      	moveq	r3, #1
 8004738:	2300      	movne	r3, #0
 800473a:	b2db      	uxtb	r3, r3
 800473c:	461a      	mov	r2, r3
 800473e:	79fb      	ldrb	r3, [r7, #7]
 8004740:	429a      	cmp	r2, r3
 8004742:	d0cd      	beq.n	80046e0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b084      	sub	sp, #16
 8004752:	af00      	add	r7, sp, #0
 8004754:	60f8      	str	r0, [r7, #12]
 8004756:	60b9      	str	r1, [r7, #8]
 8004758:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800475a:	e02c      	b.n	80047b6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	68b9      	ldr	r1, [r7, #8]
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 f835 	bl	80047d0 <I2C_IsAcknowledgeFailed>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e02a      	b.n	80047c6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004776:	d01e      	beq.n	80047b6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004778:	f7fd fb00 	bl	8001d7c <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	429a      	cmp	r2, r3
 8004786:	d302      	bcc.n	800478e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d113      	bne.n	80047b6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004792:	f043 0220 	orr.w	r2, r3, #32
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2220      	movs	r2, #32
 800479e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e007      	b.n	80047c6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d1cb      	bne.n	800475c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
	...

080047d0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	f003 0310 	and.w	r3, r3, #16
 80047e6:	2b10      	cmp	r3, #16
 80047e8:	d151      	bne.n	800488e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047ea:	e022      	b.n	8004832 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f2:	d01e      	beq.n	8004832 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f4:	f7fd fac2 	bl	8001d7c <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	429a      	cmp	r2, r3
 8004802:	d302      	bcc.n	800480a <I2C_IsAcknowledgeFailed+0x3a>
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d113      	bne.n	8004832 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480e:	f043 0220 	orr.w	r2, r3, #32
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2220      	movs	r2, #32
 800481a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e02e      	b.n	8004890 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b20      	cmp	r3, #32
 800483e:	d1d5      	bne.n	80047ec <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2210      	movs	r2, #16
 8004846:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2220      	movs	r2, #32
 800484e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f7ff fe6f 	bl	8004534 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	6859      	ldr	r1, [r3, #4]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	4b0d      	ldr	r3, [pc, #52]	; (8004898 <I2C_IsAcknowledgeFailed+0xc8>)
 8004862:	400b      	ands	r3, r1
 8004864:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486a:	f043 0204 	orr.w	r2, r3, #4
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2220      	movs	r2, #32
 8004876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e000      	b.n	8004890 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	fe00e800 	.word	0xfe00e800

0800489c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	607b      	str	r3, [r7, #4]
 80048a6:	460b      	mov	r3, r1
 80048a8:	817b      	strh	r3, [r7, #10]
 80048aa:	4613      	mov	r3, r2
 80048ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	0d5b      	lsrs	r3, r3, #21
 80048b8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80048bc:	4b0d      	ldr	r3, [pc, #52]	; (80048f4 <I2C_TransferConfig+0x58>)
 80048be:	430b      	orrs	r3, r1
 80048c0:	43db      	mvns	r3, r3
 80048c2:	ea02 0103 	and.w	r1, r2, r3
 80048c6:	897b      	ldrh	r3, [r7, #10]
 80048c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80048cc:	7a7b      	ldrb	r3, [r7, #9]
 80048ce:	041b      	lsls	r3, r3, #16
 80048d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80048d4:	431a      	orrs	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	431a      	orrs	r2, r3
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	431a      	orrs	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80048e6:	bf00      	nop
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	03ff63ff 	.word	0x03ff63ff

080048f8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	460b      	mov	r3, r1
 8004902:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490c:	4a2f      	ldr	r2, [pc, #188]	; (80049cc <I2C_Enable_IRQ+0xd4>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d004      	beq.n	800491c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004916:	4a2e      	ldr	r2, [pc, #184]	; (80049d0 <I2C_Enable_IRQ+0xd8>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d124      	bne.n	8004966 <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800491c:	887b      	ldrh	r3, [r7, #2]
 800491e:	f003 0304 	and.w	r3, r3, #4
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800492c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800492e:	887b      	ldrh	r3, [r7, #2]
 8004930:	f003 0311 	and.w	r3, r3, #17
 8004934:	2b11      	cmp	r3, #17
 8004936:	d103      	bne.n	8004940 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800493e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8004940:	887b      	ldrh	r3, [r7, #2]
 8004942:	f003 0312 	and.w	r3, r3, #18
 8004946:	2b12      	cmp	r3, #18
 8004948:	d103      	bne.n	8004952 <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f043 0320 	orr.w	r3, r3, #32
 8004950:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8004952:	887b      	ldrh	r3, [r7, #2]
 8004954:	f003 0312 	and.w	r3, r3, #18
 8004958:	2b12      	cmp	r3, #18
 800495a:	d128      	bne.n	80049ae <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004962:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8004964:	e023      	b.n	80049ae <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004966:	887b      	ldrh	r3, [r7, #2]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004976:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004978:	887b      	ldrh	r3, [r7, #2]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004988:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800498a:	887b      	ldrh	r3, [r7, #2]
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800499a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800499c:	887b      	ldrh	r3, [r7, #2]
 800499e:	f003 0312 	and.w	r3, r3, #18
 80049a2:	2b12      	cmp	r3, #18
 80049a4:	d103      	bne.n	80049ae <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f043 0320 	orr.w	r3, r3, #32
 80049ac:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6819      	ldr	r1, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	601a      	str	r2, [r3, #0]
}
 80049be:	bf00      	nop
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	08003a13 	.word	0x08003a13
 80049d0:	08003bf9 	.word	0x08003bf9

080049d4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	460b      	mov	r3, r1
 80049de:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80049e4:	887b      	ldrh	r3, [r7, #2]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00f      	beq.n	8004a0e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80049f4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a02:	2b28      	cmp	r3, #40	; 0x28
 8004a04:	d003      	beq.n	8004a0e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004a0c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004a0e:	887b      	ldrh	r3, [r7, #2]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00f      	beq.n	8004a38 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004a1e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a2c:	2b28      	cmp	r3, #40	; 0x28
 8004a2e:	d003      	beq.n	8004a38 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004a36:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004a38:	887b      	ldrh	r3, [r7, #2]
 8004a3a:	f003 0304 	and.w	r3, r3, #4
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004a48:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8004a4a:	887b      	ldrh	r3, [r7, #2]
 8004a4c:	f003 0311 	and.w	r3, r3, #17
 8004a50:	2b11      	cmp	r3, #17
 8004a52:	d103      	bne.n	8004a5c <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004a5a:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8004a5c:	887b      	ldrh	r3, [r7, #2]
 8004a5e:	f003 0312 	and.w	r3, r3, #18
 8004a62:	2b12      	cmp	r3, #18
 8004a64:	d103      	bne.n	8004a6e <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f043 0320 	orr.w	r3, r3, #32
 8004a6c:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8004a6e:	887b      	ldrh	r3, [r7, #2]
 8004a70:	f003 0312 	and.w	r3, r3, #18
 8004a74:	2b12      	cmp	r3, #18
 8004a76:	d103      	bne.n	8004a80 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6819      	ldr	r1, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	43da      	mvns	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	400a      	ands	r2, r1
 8004a90:	601a      	str	r2, [r3, #0]
}
 8004a92:	bf00      	nop
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b20      	cmp	r3, #32
 8004ab2:	d138      	bne.n	8004b26 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d101      	bne.n	8004ac2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004abe:	2302      	movs	r3, #2
 8004ac0:	e032      	b.n	8004b28 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2224      	movs	r2, #36	; 0x24
 8004ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0201 	bic.w	r2, r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004af0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6819      	ldr	r1, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f042 0201 	orr.w	r2, r2, #1
 8004b10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b22:	2300      	movs	r3, #0
 8004b24:	e000      	b.n	8004b28 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b26:	2302      	movs	r3, #2
  }
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b20      	cmp	r3, #32
 8004b48:	d139      	bne.n	8004bbe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d101      	bne.n	8004b58 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b54:	2302      	movs	r3, #2
 8004b56:	e033      	b.n	8004bc0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2224      	movs	r2, #36	; 0x24
 8004b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 0201 	bic.w	r2, r2, #1
 8004b76:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004b86:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	021b      	lsls	r3, r3, #8
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f042 0201 	orr.w	r2, r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2220      	movs	r2, #32
 8004bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	e000      	b.n	8004bc0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004bbe:	2302      	movs	r3, #2
  }
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bd0:	4b05      	ldr	r3, [pc, #20]	; (8004be8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a04      	ldr	r2, [pc, #16]	; (8004be8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bda:	6013      	str	r3, [r2, #0]
}
 8004bdc:	bf00      	nop
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	40007000 	.word	0x40007000

08004bec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004bf6:	4b23      	ldr	r3, [pc, #140]	; (8004c84 <HAL_PWREx_EnableOverDrive+0x98>)
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	4a22      	ldr	r2, [pc, #136]	; (8004c84 <HAL_PWREx_EnableOverDrive+0x98>)
 8004bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c00:	6413      	str	r3, [r2, #64]	; 0x40
 8004c02:	4b20      	ldr	r3, [pc, #128]	; (8004c84 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c0a:	603b      	str	r3, [r7, #0]
 8004c0c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004c0e:	4b1e      	ldr	r3, [pc, #120]	; (8004c88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a1d      	ldr	r2, [pc, #116]	; (8004c88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c18:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c1a:	f7fd f8af 	bl	8001d7c <HAL_GetTick>
 8004c1e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004c20:	e009      	b.n	8004c36 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c22:	f7fd f8ab 	bl	8001d7c <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c30:	d901      	bls.n	8004c36 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e022      	b.n	8004c7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004c36:	4b14      	ldr	r3, [pc, #80]	; (8004c88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c42:	d1ee      	bne.n	8004c22 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004c44:	4b10      	ldr	r3, [pc, #64]	; (8004c88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a0f      	ldr	r2, [pc, #60]	; (8004c88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c4e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c50:	f7fd f894 	bl	8001d7c <HAL_GetTick>
 8004c54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c56:	e009      	b.n	8004c6c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c58:	f7fd f890 	bl	8001d7c <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c66:	d901      	bls.n	8004c6c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e007      	b.n	8004c7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c6c:	4b06      	ldr	r3, [pc, #24]	; (8004c88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c78:	d1ee      	bne.n	8004c58 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	40023800 	.word	0x40023800
 8004c88:	40007000 	.word	0x40007000

08004c8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004c94:	2300      	movs	r3, #0
 8004c96:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e291      	b.n	80051c6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f000 8087 	beq.w	8004dbe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cb0:	4b96      	ldr	r3, [pc, #600]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f003 030c 	and.w	r3, r3, #12
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d00c      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cbc:	4b93      	ldr	r3, [pc, #588]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f003 030c 	and.w	r3, r3, #12
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d112      	bne.n	8004cee <HAL_RCC_OscConfig+0x62>
 8004cc8:	4b90      	ldr	r3, [pc, #576]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cd4:	d10b      	bne.n	8004cee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd6:	4b8d      	ldr	r3, [pc, #564]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d06c      	beq.n	8004dbc <HAL_RCC_OscConfig+0x130>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d168      	bne.n	8004dbc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e26b      	b.n	80051c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf6:	d106      	bne.n	8004d06 <HAL_RCC_OscConfig+0x7a>
 8004cf8:	4b84      	ldr	r3, [pc, #528]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a83      	ldr	r2, [pc, #524]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d02:	6013      	str	r3, [r2, #0]
 8004d04:	e02e      	b.n	8004d64 <HAL_RCC_OscConfig+0xd8>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10c      	bne.n	8004d28 <HAL_RCC_OscConfig+0x9c>
 8004d0e:	4b7f      	ldr	r3, [pc, #508]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a7e      	ldr	r2, [pc, #504]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d18:	6013      	str	r3, [r2, #0]
 8004d1a:	4b7c      	ldr	r3, [pc, #496]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a7b      	ldr	r2, [pc, #492]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	e01d      	b.n	8004d64 <HAL_RCC_OscConfig+0xd8>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d30:	d10c      	bne.n	8004d4c <HAL_RCC_OscConfig+0xc0>
 8004d32:	4b76      	ldr	r3, [pc, #472]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a75      	ldr	r2, [pc, #468]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d3c:	6013      	str	r3, [r2, #0]
 8004d3e:	4b73      	ldr	r3, [pc, #460]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a72      	ldr	r2, [pc, #456]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	e00b      	b.n	8004d64 <HAL_RCC_OscConfig+0xd8>
 8004d4c:	4b6f      	ldr	r3, [pc, #444]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a6e      	ldr	r2, [pc, #440]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	4b6c      	ldr	r3, [pc, #432]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a6b      	ldr	r2, [pc, #428]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d013      	beq.n	8004d94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6c:	f7fd f806 	bl	8001d7c <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d74:	f7fd f802 	bl	8001d7c <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b64      	cmp	r3, #100	; 0x64
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e21f      	b.n	80051c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d86:	4b61      	ldr	r3, [pc, #388]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0f0      	beq.n	8004d74 <HAL_RCC_OscConfig+0xe8>
 8004d92:	e014      	b.n	8004dbe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d94:	f7fc fff2 	bl	8001d7c <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d9c:	f7fc ffee 	bl	8001d7c <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b64      	cmp	r3, #100	; 0x64
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e20b      	b.n	80051c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dae:	4b57      	ldr	r3, [pc, #348]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1f0      	bne.n	8004d9c <HAL_RCC_OscConfig+0x110>
 8004dba:	e000      	b.n	8004dbe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d069      	beq.n	8004e9e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dca:	4b50      	ldr	r3, [pc, #320]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 030c 	and.w	r3, r3, #12
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00b      	beq.n	8004dee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dd6:	4b4d      	ldr	r3, [pc, #308]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 030c 	and.w	r3, r3, #12
 8004dde:	2b08      	cmp	r3, #8
 8004de0:	d11c      	bne.n	8004e1c <HAL_RCC_OscConfig+0x190>
 8004de2:	4b4a      	ldr	r3, [pc, #296]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d116      	bne.n	8004e1c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dee:	4b47      	ldr	r3, [pc, #284]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d005      	beq.n	8004e06 <HAL_RCC_OscConfig+0x17a>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d001      	beq.n	8004e06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e1df      	b.n	80051c6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e06:	4b41      	ldr	r3, [pc, #260]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	493d      	ldr	r1, [pc, #244]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e1a:	e040      	b.n	8004e9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d023      	beq.n	8004e6c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e24:	4b39      	ldr	r3, [pc, #228]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a38      	ldr	r2, [pc, #224]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004e2a:	f043 0301 	orr.w	r3, r3, #1
 8004e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e30:	f7fc ffa4 	bl	8001d7c <HAL_GetTick>
 8004e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e38:	f7fc ffa0 	bl	8001d7c <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e1bd      	b.n	80051c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e4a:	4b30      	ldr	r3, [pc, #192]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0f0      	beq.n	8004e38 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e56:	4b2d      	ldr	r3, [pc, #180]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	4929      	ldr	r1, [pc, #164]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	600b      	str	r3, [r1, #0]
 8004e6a:	e018      	b.n	8004e9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e6c:	4b27      	ldr	r3, [pc, #156]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a26      	ldr	r2, [pc, #152]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004e72:	f023 0301 	bic.w	r3, r3, #1
 8004e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e78:	f7fc ff80 	bl	8001d7c <HAL_GetTick>
 8004e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e80:	f7fc ff7c 	bl	8001d7c <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e199      	b.n	80051c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e92:	4b1e      	ldr	r3, [pc, #120]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1f0      	bne.n	8004e80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d038      	beq.n	8004f1c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d019      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eb2:	4b16      	ldr	r3, [pc, #88]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb6:	4a15      	ldr	r2, [pc, #84]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004eb8:	f043 0301 	orr.w	r3, r3, #1
 8004ebc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ebe:	f7fc ff5d 	bl	8001d7c <HAL_GetTick>
 8004ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ec4:	e008      	b.n	8004ed8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ec6:	f7fc ff59 	bl	8001d7c <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e176      	b.n	80051c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ed8:	4b0c      	ldr	r3, [pc, #48]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0f0      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x23a>
 8004ee4:	e01a      	b.n	8004f1c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ee6:	4b09      	ldr	r3, [pc, #36]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eea:	4a08      	ldr	r2, [pc, #32]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004eec:	f023 0301 	bic.w	r3, r3, #1
 8004ef0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef2:	f7fc ff43 	bl	8001d7c <HAL_GetTick>
 8004ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ef8:	e00a      	b.n	8004f10 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004efa:	f7fc ff3f 	bl	8001d7c <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d903      	bls.n	8004f10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e15c      	b.n	80051c6 <HAL_RCC_OscConfig+0x53a>
 8004f0c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f10:	4b91      	ldr	r3, [pc, #580]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1ee      	bne.n	8004efa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 80a4 	beq.w	8005072 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f2a:	4b8b      	ldr	r3, [pc, #556]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10d      	bne.n	8004f52 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f36:	4b88      	ldr	r3, [pc, #544]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	4a87      	ldr	r2, [pc, #540]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f40:	6413      	str	r3, [r2, #64]	; 0x40
 8004f42:	4b85      	ldr	r3, [pc, #532]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f4a:	60bb      	str	r3, [r7, #8]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f52:	4b82      	ldr	r3, [pc, #520]	; (800515c <HAL_RCC_OscConfig+0x4d0>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d118      	bne.n	8004f90 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004f5e:	4b7f      	ldr	r3, [pc, #508]	; (800515c <HAL_RCC_OscConfig+0x4d0>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a7e      	ldr	r2, [pc, #504]	; (800515c <HAL_RCC_OscConfig+0x4d0>)
 8004f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f6a:	f7fc ff07 	bl	8001d7c <HAL_GetTick>
 8004f6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f70:	e008      	b.n	8004f84 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f72:	f7fc ff03 	bl	8001d7c <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b64      	cmp	r3, #100	; 0x64
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e120      	b.n	80051c6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f84:	4b75      	ldr	r3, [pc, #468]	; (800515c <HAL_RCC_OscConfig+0x4d0>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0f0      	beq.n	8004f72 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d106      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x31a>
 8004f98:	4b6f      	ldr	r3, [pc, #444]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9c:	4a6e      	ldr	r2, [pc, #440]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004f9e:	f043 0301 	orr.w	r3, r3, #1
 8004fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8004fa4:	e02d      	b.n	8005002 <HAL_RCC_OscConfig+0x376>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10c      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x33c>
 8004fae:	4b6a      	ldr	r3, [pc, #424]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb2:	4a69      	ldr	r2, [pc, #420]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004fb4:	f023 0301 	bic.w	r3, r3, #1
 8004fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8004fba:	4b67      	ldr	r3, [pc, #412]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fbe:	4a66      	ldr	r2, [pc, #408]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004fc0:	f023 0304 	bic.w	r3, r3, #4
 8004fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8004fc6:	e01c      	b.n	8005002 <HAL_RCC_OscConfig+0x376>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	2b05      	cmp	r3, #5
 8004fce:	d10c      	bne.n	8004fea <HAL_RCC_OscConfig+0x35e>
 8004fd0:	4b61      	ldr	r3, [pc, #388]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd4:	4a60      	ldr	r2, [pc, #384]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004fd6:	f043 0304 	orr.w	r3, r3, #4
 8004fda:	6713      	str	r3, [r2, #112]	; 0x70
 8004fdc:	4b5e      	ldr	r3, [pc, #376]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe0:	4a5d      	ldr	r2, [pc, #372]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004fe2:	f043 0301 	orr.w	r3, r3, #1
 8004fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8004fe8:	e00b      	b.n	8005002 <HAL_RCC_OscConfig+0x376>
 8004fea:	4b5b      	ldr	r3, [pc, #364]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fee:	4a5a      	ldr	r2, [pc, #360]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004ff0:	f023 0301 	bic.w	r3, r3, #1
 8004ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ff6:	4b58      	ldr	r3, [pc, #352]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffa:	4a57      	ldr	r2, [pc, #348]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8004ffc:	f023 0304 	bic.w	r3, r3, #4
 8005000:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d015      	beq.n	8005036 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500a:	f7fc feb7 	bl	8001d7c <HAL_GetTick>
 800500e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005010:	e00a      	b.n	8005028 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005012:	f7fc feb3 	bl	8001d7c <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005020:	4293      	cmp	r3, r2
 8005022:	d901      	bls.n	8005028 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e0ce      	b.n	80051c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005028:	4b4b      	ldr	r3, [pc, #300]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 800502a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0ee      	beq.n	8005012 <HAL_RCC_OscConfig+0x386>
 8005034:	e014      	b.n	8005060 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005036:	f7fc fea1 	bl	8001d7c <HAL_GetTick>
 800503a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800503c:	e00a      	b.n	8005054 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800503e:	f7fc fe9d 	bl	8001d7c <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	f241 3288 	movw	r2, #5000	; 0x1388
 800504c:	4293      	cmp	r3, r2
 800504e:	d901      	bls.n	8005054 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e0b8      	b.n	80051c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005054:	4b40      	ldr	r3, [pc, #256]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8005056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1ee      	bne.n	800503e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005060:	7dfb      	ldrb	r3, [r7, #23]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d105      	bne.n	8005072 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005066:	4b3c      	ldr	r3, [pc, #240]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	4a3b      	ldr	r2, [pc, #236]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 800506c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005070:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 80a4 	beq.w	80051c4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800507c:	4b36      	ldr	r3, [pc, #216]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f003 030c 	and.w	r3, r3, #12
 8005084:	2b08      	cmp	r3, #8
 8005086:	d06b      	beq.n	8005160 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	2b02      	cmp	r3, #2
 800508e:	d149      	bne.n	8005124 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005090:	4b31      	ldr	r3, [pc, #196]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a30      	ldr	r2, [pc, #192]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8005096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800509a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509c:	f7fc fe6e 	bl	8001d7c <HAL_GetTick>
 80050a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050a2:	e008      	b.n	80050b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a4:	f7fc fe6a 	bl	8001d7c <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e087      	b.n	80051c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050b6:	4b28      	ldr	r3, [pc, #160]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1f0      	bne.n	80050a4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	69da      	ldr	r2, [r3, #28]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	431a      	orrs	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	019b      	lsls	r3, r3, #6
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d8:	085b      	lsrs	r3, r3, #1
 80050da:	3b01      	subs	r3, #1
 80050dc:	041b      	lsls	r3, r3, #16
 80050de:	431a      	orrs	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e4:	061b      	lsls	r3, r3, #24
 80050e6:	4313      	orrs	r3, r2
 80050e8:	4a1b      	ldr	r2, [pc, #108]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 80050ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050ee:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050f0:	4b19      	ldr	r3, [pc, #100]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a18      	ldr	r2, [pc, #96]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 80050f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fc:	f7fc fe3e 	bl	8001d7c <HAL_GetTick>
 8005100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005102:	e008      	b.n	8005116 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005104:	f7fc fe3a 	bl	8001d7c <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e057      	b.n	80051c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005116:	4b10      	ldr	r3, [pc, #64]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0f0      	beq.n	8005104 <HAL_RCC_OscConfig+0x478>
 8005122:	e04f      	b.n	80051c4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005124:	4b0c      	ldr	r3, [pc, #48]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a0b      	ldr	r2, [pc, #44]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 800512a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800512e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005130:	f7fc fe24 	bl	8001d7c <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005138:	f7fc fe20 	bl	8001d7c <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e03d      	b.n	80051c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800514a:	4b03      	ldr	r3, [pc, #12]	; (8005158 <HAL_RCC_OscConfig+0x4cc>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1f0      	bne.n	8005138 <HAL_RCC_OscConfig+0x4ac>
 8005156:	e035      	b.n	80051c4 <HAL_RCC_OscConfig+0x538>
 8005158:	40023800 	.word	0x40023800
 800515c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005160:	4b1b      	ldr	r3, [pc, #108]	; (80051d0 <HAL_RCC_OscConfig+0x544>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d028      	beq.n	80051c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005178:	429a      	cmp	r2, r3
 800517a:	d121      	bne.n	80051c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005186:	429a      	cmp	r2, r3
 8005188:	d11a      	bne.n	80051c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005190:	4013      	ands	r3, r2
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005196:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005198:	4293      	cmp	r3, r2
 800519a:	d111      	bne.n	80051c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a6:	085b      	lsrs	r3, r3, #1
 80051a8:	3b01      	subs	r3, #1
 80051aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d107      	bne.n	80051c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80051bc:	429a      	cmp	r2, r3
 80051be:	d001      	beq.n	80051c4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e000      	b.n	80051c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3718      	adds	r7, #24
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	40023800 	.word	0x40023800

080051d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80051de:	2300      	movs	r3, #0
 80051e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e0d0      	b.n	800538e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051ec:	4b6a      	ldr	r3, [pc, #424]	; (8005398 <HAL_RCC_ClockConfig+0x1c4>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 030f 	and.w	r3, r3, #15
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d910      	bls.n	800521c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051fa:	4b67      	ldr	r3, [pc, #412]	; (8005398 <HAL_RCC_ClockConfig+0x1c4>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f023 020f 	bic.w	r2, r3, #15
 8005202:	4965      	ldr	r1, [pc, #404]	; (8005398 <HAL_RCC_ClockConfig+0x1c4>)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	4313      	orrs	r3, r2
 8005208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800520a:	4b63      	ldr	r3, [pc, #396]	; (8005398 <HAL_RCC_ClockConfig+0x1c4>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 030f 	and.w	r3, r3, #15
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	429a      	cmp	r2, r3
 8005216:	d001      	beq.n	800521c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e0b8      	b.n	800538e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d020      	beq.n	800526a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0304 	and.w	r3, r3, #4
 8005230:	2b00      	cmp	r3, #0
 8005232:	d005      	beq.n	8005240 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005234:	4b59      	ldr	r3, [pc, #356]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	4a58      	ldr	r2, [pc, #352]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 800523a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800523e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0308 	and.w	r3, r3, #8
 8005248:	2b00      	cmp	r3, #0
 800524a:	d005      	beq.n	8005258 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800524c:	4b53      	ldr	r3, [pc, #332]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	4a52      	ldr	r2, [pc, #328]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 8005252:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005256:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005258:	4b50      	ldr	r3, [pc, #320]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	494d      	ldr	r1, [pc, #308]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 8005266:	4313      	orrs	r3, r2
 8005268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d040      	beq.n	80052f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d107      	bne.n	800528e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800527e:	4b47      	ldr	r3, [pc, #284]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d115      	bne.n	80052b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e07f      	b.n	800538e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	2b02      	cmp	r3, #2
 8005294:	d107      	bne.n	80052a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005296:	4b41      	ldr	r3, [pc, #260]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d109      	bne.n	80052b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e073      	b.n	800538e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052a6:	4b3d      	ldr	r3, [pc, #244]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e06b      	b.n	800538e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052b6:	4b39      	ldr	r3, [pc, #228]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f023 0203 	bic.w	r2, r3, #3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	4936      	ldr	r1, [pc, #216]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052c8:	f7fc fd58 	bl	8001d7c <HAL_GetTick>
 80052cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ce:	e00a      	b.n	80052e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052d0:	f7fc fd54 	bl	8001d7c <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	f241 3288 	movw	r2, #5000	; 0x1388
 80052de:	4293      	cmp	r3, r2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e053      	b.n	800538e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052e6:	4b2d      	ldr	r3, [pc, #180]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f003 020c 	and.w	r2, r3, #12
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d1eb      	bne.n	80052d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052f8:	4b27      	ldr	r3, [pc, #156]	; (8005398 <HAL_RCC_ClockConfig+0x1c4>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 030f 	and.w	r3, r3, #15
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	429a      	cmp	r2, r3
 8005304:	d210      	bcs.n	8005328 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005306:	4b24      	ldr	r3, [pc, #144]	; (8005398 <HAL_RCC_ClockConfig+0x1c4>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f023 020f 	bic.w	r2, r3, #15
 800530e:	4922      	ldr	r1, [pc, #136]	; (8005398 <HAL_RCC_ClockConfig+0x1c4>)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	4313      	orrs	r3, r2
 8005314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005316:	4b20      	ldr	r3, [pc, #128]	; (8005398 <HAL_RCC_ClockConfig+0x1c4>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 030f 	and.w	r3, r3, #15
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	429a      	cmp	r2, r3
 8005322:	d001      	beq.n	8005328 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e032      	b.n	800538e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b00      	cmp	r3, #0
 8005332:	d008      	beq.n	8005346 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005334:	4b19      	ldr	r3, [pc, #100]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	4916      	ldr	r1, [pc, #88]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 8005342:	4313      	orrs	r3, r2
 8005344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0308 	and.w	r3, r3, #8
 800534e:	2b00      	cmp	r3, #0
 8005350:	d009      	beq.n	8005366 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005352:	4b12      	ldr	r3, [pc, #72]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	490e      	ldr	r1, [pc, #56]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 8005362:	4313      	orrs	r3, r2
 8005364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005366:	f000 f821 	bl	80053ac <HAL_RCC_GetSysClockFreq>
 800536a:	4601      	mov	r1, r0
 800536c:	4b0b      	ldr	r3, [pc, #44]	; (800539c <HAL_RCC_ClockConfig+0x1c8>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	091b      	lsrs	r3, r3, #4
 8005372:	f003 030f 	and.w	r3, r3, #15
 8005376:	4a0a      	ldr	r2, [pc, #40]	; (80053a0 <HAL_RCC_ClockConfig+0x1cc>)
 8005378:	5cd3      	ldrb	r3, [r2, r3]
 800537a:	fa21 f303 	lsr.w	r3, r1, r3
 800537e:	4a09      	ldr	r2, [pc, #36]	; (80053a4 <HAL_RCC_ClockConfig+0x1d0>)
 8005380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005382:	4b09      	ldr	r3, [pc, #36]	; (80053a8 <HAL_RCC_ClockConfig+0x1d4>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4618      	mov	r0, r3
 8005388:	f7fc fcb4 	bl	8001cf4 <HAL_InitTick>

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	40023c00 	.word	0x40023c00
 800539c:	40023800 	.word	0x40023800
 80053a0:	08007a80 	.word	0x08007a80
 80053a4:	20000000 	.word	0x20000000
 80053a8:	20000004 	.word	0x20000004

080053ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80053b2:	2300      	movs	r3, #0
 80053b4:	607b      	str	r3, [r7, #4]
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	2300      	movs	r3, #0
 80053bc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80053be:	2300      	movs	r3, #0
 80053c0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053c2:	4b63      	ldr	r3, [pc, #396]	; (8005550 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f003 030c 	and.w	r3, r3, #12
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d007      	beq.n	80053de <HAL_RCC_GetSysClockFreq+0x32>
 80053ce:	2b08      	cmp	r3, #8
 80053d0:	d008      	beq.n	80053e4 <HAL_RCC_GetSysClockFreq+0x38>
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f040 80b4 	bne.w	8005540 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053d8:	4b5e      	ldr	r3, [pc, #376]	; (8005554 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80053da:	60bb      	str	r3, [r7, #8]
      break;
 80053dc:	e0b3      	b.n	8005546 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053de:	4b5e      	ldr	r3, [pc, #376]	; (8005558 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80053e0:	60bb      	str	r3, [r7, #8]
      break;
 80053e2:	e0b0      	b.n	8005546 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053e4:	4b5a      	ldr	r3, [pc, #360]	; (8005550 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053ec:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80053ee:	4b58      	ldr	r3, [pc, #352]	; (8005550 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d04a      	beq.n	8005490 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053fa:	4b55      	ldr	r3, [pc, #340]	; (8005550 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	099b      	lsrs	r3, r3, #6
 8005400:	f04f 0400 	mov.w	r4, #0
 8005404:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005408:	f04f 0200 	mov.w	r2, #0
 800540c:	ea03 0501 	and.w	r5, r3, r1
 8005410:	ea04 0602 	and.w	r6, r4, r2
 8005414:	4629      	mov	r1, r5
 8005416:	4632      	mov	r2, r6
 8005418:	f04f 0300 	mov.w	r3, #0
 800541c:	f04f 0400 	mov.w	r4, #0
 8005420:	0154      	lsls	r4, r2, #5
 8005422:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005426:	014b      	lsls	r3, r1, #5
 8005428:	4619      	mov	r1, r3
 800542a:	4622      	mov	r2, r4
 800542c:	1b49      	subs	r1, r1, r5
 800542e:	eb62 0206 	sbc.w	r2, r2, r6
 8005432:	f04f 0300 	mov.w	r3, #0
 8005436:	f04f 0400 	mov.w	r4, #0
 800543a:	0194      	lsls	r4, r2, #6
 800543c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005440:	018b      	lsls	r3, r1, #6
 8005442:	1a5b      	subs	r3, r3, r1
 8005444:	eb64 0402 	sbc.w	r4, r4, r2
 8005448:	f04f 0100 	mov.w	r1, #0
 800544c:	f04f 0200 	mov.w	r2, #0
 8005450:	00e2      	lsls	r2, r4, #3
 8005452:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005456:	00d9      	lsls	r1, r3, #3
 8005458:	460b      	mov	r3, r1
 800545a:	4614      	mov	r4, r2
 800545c:	195b      	adds	r3, r3, r5
 800545e:	eb44 0406 	adc.w	r4, r4, r6
 8005462:	f04f 0100 	mov.w	r1, #0
 8005466:	f04f 0200 	mov.w	r2, #0
 800546a:	0262      	lsls	r2, r4, #9
 800546c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005470:	0259      	lsls	r1, r3, #9
 8005472:	460b      	mov	r3, r1
 8005474:	4614      	mov	r4, r2
 8005476:	4618      	mov	r0, r3
 8005478:	4621      	mov	r1, r4
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f04f 0400 	mov.w	r4, #0
 8005480:	461a      	mov	r2, r3
 8005482:	4623      	mov	r3, r4
 8005484:	f7fb fb12 	bl	8000aac <__aeabi_uldivmod>
 8005488:	4603      	mov	r3, r0
 800548a:	460c      	mov	r4, r1
 800548c:	60fb      	str	r3, [r7, #12]
 800548e:	e049      	b.n	8005524 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005490:	4b2f      	ldr	r3, [pc, #188]	; (8005550 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	099b      	lsrs	r3, r3, #6
 8005496:	f04f 0400 	mov.w	r4, #0
 800549a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800549e:	f04f 0200 	mov.w	r2, #0
 80054a2:	ea03 0501 	and.w	r5, r3, r1
 80054a6:	ea04 0602 	and.w	r6, r4, r2
 80054aa:	4629      	mov	r1, r5
 80054ac:	4632      	mov	r2, r6
 80054ae:	f04f 0300 	mov.w	r3, #0
 80054b2:	f04f 0400 	mov.w	r4, #0
 80054b6:	0154      	lsls	r4, r2, #5
 80054b8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80054bc:	014b      	lsls	r3, r1, #5
 80054be:	4619      	mov	r1, r3
 80054c0:	4622      	mov	r2, r4
 80054c2:	1b49      	subs	r1, r1, r5
 80054c4:	eb62 0206 	sbc.w	r2, r2, r6
 80054c8:	f04f 0300 	mov.w	r3, #0
 80054cc:	f04f 0400 	mov.w	r4, #0
 80054d0:	0194      	lsls	r4, r2, #6
 80054d2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80054d6:	018b      	lsls	r3, r1, #6
 80054d8:	1a5b      	subs	r3, r3, r1
 80054da:	eb64 0402 	sbc.w	r4, r4, r2
 80054de:	f04f 0100 	mov.w	r1, #0
 80054e2:	f04f 0200 	mov.w	r2, #0
 80054e6:	00e2      	lsls	r2, r4, #3
 80054e8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80054ec:	00d9      	lsls	r1, r3, #3
 80054ee:	460b      	mov	r3, r1
 80054f0:	4614      	mov	r4, r2
 80054f2:	195b      	adds	r3, r3, r5
 80054f4:	eb44 0406 	adc.w	r4, r4, r6
 80054f8:	f04f 0100 	mov.w	r1, #0
 80054fc:	f04f 0200 	mov.w	r2, #0
 8005500:	02a2      	lsls	r2, r4, #10
 8005502:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005506:	0299      	lsls	r1, r3, #10
 8005508:	460b      	mov	r3, r1
 800550a:	4614      	mov	r4, r2
 800550c:	4618      	mov	r0, r3
 800550e:	4621      	mov	r1, r4
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f04f 0400 	mov.w	r4, #0
 8005516:	461a      	mov	r2, r3
 8005518:	4623      	mov	r3, r4
 800551a:	f7fb fac7 	bl	8000aac <__aeabi_uldivmod>
 800551e:	4603      	mov	r3, r0
 8005520:	460c      	mov	r4, r1
 8005522:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005524:	4b0a      	ldr	r3, [pc, #40]	; (8005550 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	0c1b      	lsrs	r3, r3, #16
 800552a:	f003 0303 	and.w	r3, r3, #3
 800552e:	3301      	adds	r3, #1
 8005530:	005b      	lsls	r3, r3, #1
 8005532:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	fbb2 f3f3 	udiv	r3, r2, r3
 800553c:	60bb      	str	r3, [r7, #8]
      break;
 800553e:	e002      	b.n	8005546 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005540:	4b04      	ldr	r3, [pc, #16]	; (8005554 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005542:	60bb      	str	r3, [r7, #8]
      break;
 8005544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005546:	68bb      	ldr	r3, [r7, #8]
}
 8005548:	4618      	mov	r0, r3
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005550:	40023800 	.word	0x40023800
 8005554:	00f42400 	.word	0x00f42400
 8005558:	007a1200 	.word	0x007a1200

0800555c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800555c:	b480      	push	{r7}
 800555e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005560:	4b03      	ldr	r3, [pc, #12]	; (8005570 <HAL_RCC_GetHCLKFreq+0x14>)
 8005562:	681b      	ldr	r3, [r3, #0]
}
 8005564:	4618      	mov	r0, r3
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	20000000 	.word	0x20000000

08005574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005578:	f7ff fff0 	bl	800555c <HAL_RCC_GetHCLKFreq>
 800557c:	4601      	mov	r1, r0
 800557e:	4b05      	ldr	r3, [pc, #20]	; (8005594 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	0a9b      	lsrs	r3, r3, #10
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	4a03      	ldr	r2, [pc, #12]	; (8005598 <HAL_RCC_GetPCLK1Freq+0x24>)
 800558a:	5cd3      	ldrb	r3, [r2, r3]
 800558c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005590:	4618      	mov	r0, r3
 8005592:	bd80      	pop	{r7, pc}
 8005594:	40023800 	.word	0x40023800
 8005598:	08007a90 	.word	0x08007a90

0800559c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055a0:	f7ff ffdc 	bl	800555c <HAL_RCC_GetHCLKFreq>
 80055a4:	4601      	mov	r1, r0
 80055a6:	4b05      	ldr	r3, [pc, #20]	; (80055bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	0b5b      	lsrs	r3, r3, #13
 80055ac:	f003 0307 	and.w	r3, r3, #7
 80055b0:	4a03      	ldr	r2, [pc, #12]	; (80055c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055b2:	5cd3      	ldrb	r3, [r2, r3]
 80055b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	40023800 	.word	0x40023800
 80055c0:	08007a90 	.word	0x08007a90

080055c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b088      	sub	sp, #32
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80055cc:	2300      	movs	r3, #0
 80055ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80055d0:	2300      	movs	r3, #0
 80055d2:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80055d4:	2300      	movs	r3, #0
 80055d6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80055d8:	2300      	movs	r3, #0
 80055da:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d012      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80055e8:	4b65      	ldr	r3, [pc, #404]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	4a64      	ldr	r2, [pc, #400]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055ee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80055f2:	6093      	str	r3, [r2, #8]
 80055f4:	4b62      	ldr	r3, [pc, #392]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055f6:	689a      	ldr	r2, [r3, #8]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fc:	4960      	ldr	r1, [pc, #384]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800560a:	2301      	movs	r3, #1
 800560c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d017      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800561a:	4b59      	ldr	r3, [pc, #356]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800561c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005620:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005628:	4955      	ldr	r1, [pc, #340]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800562a:	4313      	orrs	r3, r2
 800562c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005634:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005638:	d101      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800563a:	2301      	movs	r3, #1
 800563c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8005646:	2301      	movs	r3, #1
 8005648:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d017      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005656:	4b4a      	ldr	r3, [pc, #296]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005658:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800565c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005664:	4946      	ldr	r1, [pc, #280]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005666:	4313      	orrs	r3, r2
 8005668:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005670:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005674:	d101      	bne.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8005676:	2301      	movs	r3, #1
 8005678:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8005682:	2301      	movs	r3, #1
 8005684:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0320 	and.w	r3, r3, #32
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 808b 	beq.w	80057aa <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005694:	4b3a      	ldr	r3, [pc, #232]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005698:	4a39      	ldr	r2, [pc, #228]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800569a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800569e:	6413      	str	r3, [r2, #64]	; 0x40
 80056a0:	4b37      	ldr	r3, [pc, #220]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a8:	60fb      	str	r3, [r7, #12]
 80056aa:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80056ac:	4b35      	ldr	r3, [pc, #212]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a34      	ldr	r2, [pc, #208]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80056b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056b8:	f7fc fb60 	bl	8001d7c <HAL_GetTick>
 80056bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80056be:	e008      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056c0:	f7fc fb5c 	bl	8001d7c <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	2b64      	cmp	r3, #100	; 0x64
 80056cc:	d901      	bls.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e2ba      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80056d2:	4b2c      	ldr	r3, [pc, #176]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d0f0      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056de:	4b28      	ldr	r3, [pc, #160]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d035      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d02e      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056fc:	4b20      	ldr	r3, [pc, #128]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005704:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005706:	4b1e      	ldr	r3, [pc, #120]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570a:	4a1d      	ldr	r2, [pc, #116]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800570c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005710:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005712:	4b1b      	ldr	r3, [pc, #108]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005716:	4a1a      	ldr	r2, [pc, #104]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800571c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800571e:	4a18      	ldr	r2, [pc, #96]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005724:	4b16      	ldr	r3, [pc, #88]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b01      	cmp	r3, #1
 800572e:	d114      	bne.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005730:	f7fc fb24 	bl	8001d7c <HAL_GetTick>
 8005734:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005736:	e00a      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005738:	f7fc fb20 	bl	8001d7c <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	f241 3288 	movw	r2, #5000	; 0x1388
 8005746:	4293      	cmp	r3, r2
 8005748:	d901      	bls.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e27c      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800574e:	4b0c      	ldr	r3, [pc, #48]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d0ee      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005762:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005766:	d111      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8005768:	4b05      	ldr	r3, [pc, #20]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005774:	4b04      	ldr	r3, [pc, #16]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005776:	400b      	ands	r3, r1
 8005778:	4901      	ldr	r1, [pc, #4]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800577a:	4313      	orrs	r3, r2
 800577c:	608b      	str	r3, [r1, #8]
 800577e:	e00b      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005780:	40023800 	.word	0x40023800
 8005784:	40007000 	.word	0x40007000
 8005788:	0ffffcff 	.word	0x0ffffcff
 800578c:	4ba3      	ldr	r3, [pc, #652]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	4aa2      	ldr	r2, [pc, #648]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005792:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005796:	6093      	str	r3, [r2, #8]
 8005798:	4ba0      	ldr	r3, [pc, #640]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800579a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057a4:	499d      	ldr	r1, [pc, #628]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0310 	and.w	r3, r3, #16
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d010      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057b6:	4b99      	ldr	r3, [pc, #612]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80057b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057bc:	4a97      	ldr	r2, [pc, #604]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80057be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80057c6:	4b95      	ldr	r3, [pc, #596]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80057c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d0:	4992      	ldr	r1, [pc, #584]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00a      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057e4:	4b8d      	ldr	r3, [pc, #564]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80057e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f2:	498a      	ldr	r1, [pc, #552]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00a      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005806:	4b85      	ldr	r3, [pc, #532]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800580c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005814:	4981      	ldr	r1, [pc, #516]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005816:	4313      	orrs	r3, r2
 8005818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00a      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005828:	4b7c      	ldr	r3, [pc, #496]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800582a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005836:	4979      	ldr	r1, [pc, #484]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005838:	4313      	orrs	r3, r2
 800583a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00a      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800584a:	4b74      	ldr	r3, [pc, #464]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800584c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005850:	f023 0203 	bic.w	r2, r3, #3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005858:	4970      	ldr	r1, [pc, #448]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800585a:	4313      	orrs	r3, r2
 800585c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00a      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800586c:	4b6b      	ldr	r3, [pc, #428]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800586e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005872:	f023 020c 	bic.w	r2, r3, #12
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	4968      	ldr	r1, [pc, #416]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800587c:	4313      	orrs	r3, r2
 800587e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00a      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800588e:	4b63      	ldr	r3, [pc, #396]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005894:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589c:	495f      	ldr	r1, [pc, #380]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00a      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058b0:	4b5a      	ldr	r3, [pc, #360]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80058b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058be:	4957      	ldr	r1, [pc, #348]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00a      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058d2:	4b52      	ldr	r3, [pc, #328]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80058d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058e0:	494e      	ldr	r1, [pc, #312]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00a      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80058f4:	4b49      	ldr	r3, [pc, #292]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80058f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005902:	4946      	ldr	r1, [pc, #280]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005904:	4313      	orrs	r3, r2
 8005906:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005916:	4b41      	ldr	r3, [pc, #260]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005924:	493d      	ldr	r1, [pc, #244]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005926:	4313      	orrs	r3, r2
 8005928:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00a      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005938:	4b38      	ldr	r3, [pc, #224]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800593a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005946:	4935      	ldr	r1, [pc, #212]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005948:	4313      	orrs	r3, r2
 800594a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d011      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800595a:	4b30      	ldr	r3, [pc, #192]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800595c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005960:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005968:	492c      	ldr	r1, [pc, #176]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800596a:	4313      	orrs	r3, r2
 800596c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005974:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005978:	d101      	bne.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800597a:	2301      	movs	r3, #1
 800597c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00a      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800598a:	4b24      	ldr	r3, [pc, #144]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800598c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005990:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005998:	4920      	ldr	r1, [pc, #128]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800599a:	4313      	orrs	r3, r2
 800599c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00a      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80059ac:	4b1b      	ldr	r3, [pc, #108]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80059ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059ba:	4918      	ldr	r1, [pc, #96]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00a      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80059ce:	4b13      	ldr	r3, [pc, #76]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80059d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059dc:	490f      	ldr	r1, [pc, #60]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d005      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059f2:	f040 809c 	bne.w	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80059f6:	4b09      	ldr	r3, [pc, #36]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a08      	ldr	r2, [pc, #32]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80059fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a02:	f7fc f9bb 	bl	8001d7c <HAL_GetTick>
 8005a06:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a08:	e00a      	b.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a0a:	f7fc f9b7 	bl	8001d7c <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b64      	cmp	r3, #100	; 0x64
 8005a16:	d903      	bls.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e115      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005a1c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a20:	4b8b      	ldr	r3, [pc, #556]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1ee      	bne.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d017      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d113      	bne.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005a40:	4b83      	ldr	r3, [pc, #524]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a46:	0e1b      	lsrs	r3, r3, #24
 8005a48:	f003 030f 	and.w	r3, r3, #15
 8005a4c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	019a      	lsls	r2, r3, #6
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	061b      	lsls	r3, r3, #24
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	071b      	lsls	r3, r3, #28
 8005a60:	497b      	ldr	r1, [pc, #492]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d004      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a7c:	d00a      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d024      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a92:	d11f      	bne.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a94:	4b6e      	ldr	r3, [pc, #440]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a9a:	0f1b      	lsrs	r3, r3, #28
 8005a9c:	f003 0307 	and.w	r3, r3, #7
 8005aa0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	019a      	lsls	r2, r3, #6
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	061b      	lsls	r3, r3, #24
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	071b      	lsls	r3, r3, #28
 8005ab4:	4966      	ldr	r1, [pc, #408]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005abc:	4b64      	ldr	r3, [pc, #400]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ac2:	f023 021f 	bic.w	r2, r3, #31
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	4960      	ldr	r1, [pc, #384]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00d      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	019a      	lsls	r2, r3, #6
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	061b      	lsls	r3, r3, #24
 8005aec:	431a      	orrs	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	071b      	lsls	r3, r3, #28
 8005af4:	4956      	ldr	r1, [pc, #344]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005afc:	4b54      	ldr	r3, [pc, #336]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a53      	ldr	r2, [pc, #332]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005b02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b08:	f7fc f938 	bl	8001d7c <HAL_GetTick>
 8005b0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b0e:	e008      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b10:	f7fc f934 	bl	8001d7c <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b64      	cmp	r3, #100	; 0x64
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e092      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b22:	4b4b      	ldr	r3, [pc, #300]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d0f0      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	f040 8088 	bne.w	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005b36:	4b46      	ldr	r3, [pc, #280]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a45      	ldr	r2, [pc, #276]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b42:	f7fc f91b 	bl	8001d7c <HAL_GetTick>
 8005b46:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b48:	e008      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b4a:	f7fc f917 	bl	8001d7c <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	2b64      	cmp	r3, #100	; 0x64
 8005b56:	d901      	bls.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e075      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b5c:	4b3c      	ldr	r3, [pc, #240]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b68:	d0ef      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d009      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d024      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d120      	bne.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b92:	4b2f      	ldr	r3, [pc, #188]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b98:	0c1b      	lsrs	r3, r3, #16
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	019a      	lsls	r2, r3, #6
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	041b      	lsls	r3, r3, #16
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	061b      	lsls	r3, r3, #24
 8005bb2:	4927      	ldr	r1, [pc, #156]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005bba:	4b25      	ldr	r3, [pc, #148]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bc0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a1b      	ldr	r3, [r3, #32]
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	021b      	lsls	r3, r3, #8
 8005bcc:	4920      	ldr	r1, [pc, #128]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d018      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005be4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005be8:	d113      	bne.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005bea:	4b19      	ldr	r3, [pc, #100]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bf0:	0e1b      	lsrs	r3, r3, #24
 8005bf2:	f003 030f 	and.w	r3, r3, #15
 8005bf6:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	019a      	lsls	r2, r3, #6
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	041b      	lsls	r3, r3, #16
 8005c04:	431a      	orrs	r2, r3
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	061b      	lsls	r3, r3, #24
 8005c0a:	4911      	ldr	r1, [pc, #68]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005c12:	4b0f      	ldr	r3, [pc, #60]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a0e      	ldr	r2, [pc, #56]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c1e:	f7fc f8ad 	bl	8001d7c <HAL_GetTick>
 8005c22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c24:	e008      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c26:	f7fc f8a9 	bl	8001d7c <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b64      	cmp	r3, #100	; 0x64
 8005c32:	d901      	bls.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e007      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c38:	4b05      	ldr	r3, [pc, #20]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c44:	d1ef      	bne.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3720      	adds	r7, #32
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	40023800 	.word	0x40023800

08005c54 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e01d      	b.n	8005ca2 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d106      	bne.n	8005c80 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7fb fe94 	bl	80019a8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2202      	movs	r2, #2
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3304      	adds	r3, #4
 8005c90:	4619      	mov	r1, r3
 8005c92:	4610      	mov	r0, r2
 8005c94:	f000 fa18 	bl	80060c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b082      	sub	sp, #8
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e01d      	b.n	8005cf8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d106      	bne.n	8005cd6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 f815 	bl	8005d00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2202      	movs	r2, #2
 8005cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	3304      	adds	r3, #4
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	4610      	mov	r0, r2
 8005cea:	f000 f9ed 	bl	80060c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3708      	adds	r7, #8
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2201      	movs	r2, #1
 8005d24:	6839      	ldr	r1, [r7, #0]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 fccc 	bl	80066c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a17      	ldr	r2, [pc, #92]	; (8005d90 <HAL_TIM_PWM_Start+0x7c>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d004      	beq.n	8005d40 <HAL_TIM_PWM_Start+0x2c>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a16      	ldr	r2, [pc, #88]	; (8005d94 <HAL_TIM_PWM_Start+0x80>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d101      	bne.n	8005d44 <HAL_TIM_PWM_Start+0x30>
 8005d40:	2301      	movs	r3, #1
 8005d42:	e000      	b.n	8005d46 <HAL_TIM_PWM_Start+0x32>
 8005d44:	2300      	movs	r3, #0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d007      	beq.n	8005d5a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	4b0d      	ldr	r3, [pc, #52]	; (8005d98 <HAL_TIM_PWM_Start+0x84>)
 8005d62:	4013      	ands	r3, r2
 8005d64:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2b06      	cmp	r3, #6
 8005d6a:	d00b      	beq.n	8005d84 <HAL_TIM_PWM_Start+0x70>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d72:	d007      	beq.n	8005d84 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f042 0201 	orr.w	r2, r2, #1
 8005d82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	40010000 	.word	0x40010000
 8005d94:	40010400 	.word	0x40010400
 8005d98:	00010007 	.word	0x00010007

08005d9c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d101      	bne.n	8005db6 <HAL_TIM_OC_ConfigChannel+0x1a>
 8005db2:	2302      	movs	r3, #2
 8005db4:	e06c      	b.n	8005e90 <HAL_TIM_OC_ConfigChannel+0xf4>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2202      	movs	r2, #2
 8005dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b14      	cmp	r3, #20
 8005dca:	d857      	bhi.n	8005e7c <HAL_TIM_OC_ConfigChannel+0xe0>
 8005dcc:	a201      	add	r2, pc, #4	; (adr r2, 8005dd4 <HAL_TIM_OC_ConfigChannel+0x38>)
 8005dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd2:	bf00      	nop
 8005dd4:	08005e29 	.word	0x08005e29
 8005dd8:	08005e7d 	.word	0x08005e7d
 8005ddc:	08005e7d 	.word	0x08005e7d
 8005de0:	08005e7d 	.word	0x08005e7d
 8005de4:	08005e37 	.word	0x08005e37
 8005de8:	08005e7d 	.word	0x08005e7d
 8005dec:	08005e7d 	.word	0x08005e7d
 8005df0:	08005e7d 	.word	0x08005e7d
 8005df4:	08005e45 	.word	0x08005e45
 8005df8:	08005e7d 	.word	0x08005e7d
 8005dfc:	08005e7d 	.word	0x08005e7d
 8005e00:	08005e7d 	.word	0x08005e7d
 8005e04:	08005e53 	.word	0x08005e53
 8005e08:	08005e7d 	.word	0x08005e7d
 8005e0c:	08005e7d 	.word	0x08005e7d
 8005e10:	08005e7d 	.word	0x08005e7d
 8005e14:	08005e61 	.word	0x08005e61
 8005e18:	08005e7d 	.word	0x08005e7d
 8005e1c:	08005e7d 	.word	0x08005e7d
 8005e20:	08005e7d 	.word	0x08005e7d
 8005e24:	08005e6f 	.word	0x08005e6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68b9      	ldr	r1, [r7, #8]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 f9ea 	bl	8006208 <TIM_OC1_SetConfig>
      break;
 8005e34:	e023      	b.n	8005e7e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68b9      	ldr	r1, [r7, #8]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 fa55 	bl	80062ec <TIM_OC2_SetConfig>
      break;
 8005e42:	e01c      	b.n	8005e7e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68b9      	ldr	r1, [r7, #8]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 fac6 	bl	80063dc <TIM_OC3_SetConfig>
      break;
 8005e50:	e015      	b.n	8005e7e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68b9      	ldr	r1, [r7, #8]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 fb35 	bl	80064c8 <TIM_OC4_SetConfig>
      break;
 8005e5e:	e00e      	b.n	8005e7e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68b9      	ldr	r1, [r7, #8]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 fb86 	bl	8006578 <TIM_OC5_SetConfig>
      break;
 8005e6c:	e007      	b.n	8005e7e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68b9      	ldr	r1, [r7, #8]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 fbd1 	bl	800661c <TIM_OC6_SetConfig>
      break;
 8005e7a:	e000      	b.n	8005e7e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 8005e7c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d101      	bne.n	8005eb2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005eae:	2302      	movs	r3, #2
 8005eb0:	e105      	b.n	80060be <HAL_TIM_PWM_ConfigChannel+0x226>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2202      	movs	r2, #2
 8005ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b14      	cmp	r3, #20
 8005ec6:	f200 80f0 	bhi.w	80060aa <HAL_TIM_PWM_ConfigChannel+0x212>
 8005eca:	a201      	add	r2, pc, #4	; (adr r2, 8005ed0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed0:	08005f25 	.word	0x08005f25
 8005ed4:	080060ab 	.word	0x080060ab
 8005ed8:	080060ab 	.word	0x080060ab
 8005edc:	080060ab 	.word	0x080060ab
 8005ee0:	08005f65 	.word	0x08005f65
 8005ee4:	080060ab 	.word	0x080060ab
 8005ee8:	080060ab 	.word	0x080060ab
 8005eec:	080060ab 	.word	0x080060ab
 8005ef0:	08005fa7 	.word	0x08005fa7
 8005ef4:	080060ab 	.word	0x080060ab
 8005ef8:	080060ab 	.word	0x080060ab
 8005efc:	080060ab 	.word	0x080060ab
 8005f00:	08005fe7 	.word	0x08005fe7
 8005f04:	080060ab 	.word	0x080060ab
 8005f08:	080060ab 	.word	0x080060ab
 8005f0c:	080060ab 	.word	0x080060ab
 8005f10:	08006029 	.word	0x08006029
 8005f14:	080060ab 	.word	0x080060ab
 8005f18:	080060ab 	.word	0x080060ab
 8005f1c:	080060ab 	.word	0x080060ab
 8005f20:	08006069 	.word	0x08006069
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68b9      	ldr	r1, [r7, #8]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 f96c 	bl	8006208 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	699a      	ldr	r2, [r3, #24]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0208 	orr.w	r2, r2, #8
 8005f3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699a      	ldr	r2, [r3, #24]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f022 0204 	bic.w	r2, r2, #4
 8005f4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6999      	ldr	r1, [r3, #24]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	691a      	ldr	r2, [r3, #16]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	619a      	str	r2, [r3, #24]
      break;
 8005f62:	e0a3      	b.n	80060ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68b9      	ldr	r1, [r7, #8]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f000 f9be 	bl	80062ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	699a      	ldr	r2, [r3, #24]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	699a      	ldr	r2, [r3, #24]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6999      	ldr	r1, [r3, #24]
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	021a      	lsls	r2, r3, #8
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	619a      	str	r2, [r3, #24]
      break;
 8005fa4:	e082      	b.n	80060ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68b9      	ldr	r1, [r7, #8]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f000 fa15 	bl	80063dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	69da      	ldr	r2, [r3, #28]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f042 0208 	orr.w	r2, r2, #8
 8005fc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	69da      	ldr	r2, [r3, #28]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 0204 	bic.w	r2, r2, #4
 8005fd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	69d9      	ldr	r1, [r3, #28]
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	691a      	ldr	r2, [r3, #16]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	61da      	str	r2, [r3, #28]
      break;
 8005fe4:	e062      	b.n	80060ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68b9      	ldr	r1, [r7, #8]
 8005fec:	4618      	mov	r0, r3
 8005fee:	f000 fa6b 	bl	80064c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	69da      	ldr	r2, [r3, #28]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	69da      	ldr	r2, [r3, #28]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	69d9      	ldr	r1, [r3, #28]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	021a      	lsls	r2, r3, #8
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	430a      	orrs	r2, r1
 8006024:	61da      	str	r2, [r3, #28]
      break;
 8006026:	e041      	b.n	80060ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68b9      	ldr	r1, [r7, #8]
 800602e:	4618      	mov	r0, r3
 8006030:	f000 faa2 	bl	8006578 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0208 	orr.w	r2, r2, #8
 8006042:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f022 0204 	bic.w	r2, r2, #4
 8006052:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	691a      	ldr	r2, [r3, #16]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	430a      	orrs	r2, r1
 8006064:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006066:	e021      	b.n	80060ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68b9      	ldr	r1, [r7, #8]
 800606e:	4618      	mov	r0, r3
 8006070:	f000 fad4 	bl	800661c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006082:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006092:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	021a      	lsls	r2, r3, #8
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	430a      	orrs	r2, r1
 80060a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80060a8:	e000      	b.n	80060ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80060aa:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop

080060c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a40      	ldr	r2, [pc, #256]	; (80061dc <TIM_Base_SetConfig+0x114>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d013      	beq.n	8006108 <TIM_Base_SetConfig+0x40>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e6:	d00f      	beq.n	8006108 <TIM_Base_SetConfig+0x40>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a3d      	ldr	r2, [pc, #244]	; (80061e0 <TIM_Base_SetConfig+0x118>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d00b      	beq.n	8006108 <TIM_Base_SetConfig+0x40>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a3c      	ldr	r2, [pc, #240]	; (80061e4 <TIM_Base_SetConfig+0x11c>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d007      	beq.n	8006108 <TIM_Base_SetConfig+0x40>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a3b      	ldr	r2, [pc, #236]	; (80061e8 <TIM_Base_SetConfig+0x120>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d003      	beq.n	8006108 <TIM_Base_SetConfig+0x40>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a3a      	ldr	r2, [pc, #232]	; (80061ec <TIM_Base_SetConfig+0x124>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d108      	bne.n	800611a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a2f      	ldr	r2, [pc, #188]	; (80061dc <TIM_Base_SetConfig+0x114>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d02b      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006128:	d027      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a2c      	ldr	r2, [pc, #176]	; (80061e0 <TIM_Base_SetConfig+0x118>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d023      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a2b      	ldr	r2, [pc, #172]	; (80061e4 <TIM_Base_SetConfig+0x11c>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d01f      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a2a      	ldr	r2, [pc, #168]	; (80061e8 <TIM_Base_SetConfig+0x120>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d01b      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a29      	ldr	r2, [pc, #164]	; (80061ec <TIM_Base_SetConfig+0x124>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d017      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a28      	ldr	r2, [pc, #160]	; (80061f0 <TIM_Base_SetConfig+0x128>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d013      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a27      	ldr	r2, [pc, #156]	; (80061f4 <TIM_Base_SetConfig+0x12c>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d00f      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a26      	ldr	r2, [pc, #152]	; (80061f8 <TIM_Base_SetConfig+0x130>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d00b      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a25      	ldr	r2, [pc, #148]	; (80061fc <TIM_Base_SetConfig+0x134>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d007      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a24      	ldr	r2, [pc, #144]	; (8006200 <TIM_Base_SetConfig+0x138>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d003      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a23      	ldr	r2, [pc, #140]	; (8006204 <TIM_Base_SetConfig+0x13c>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d108      	bne.n	800618c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	4313      	orrs	r3, r2
 800618a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	4313      	orrs	r3, r2
 8006198:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a0a      	ldr	r2, [pc, #40]	; (80061dc <TIM_Base_SetConfig+0x114>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d003      	beq.n	80061c0 <TIM_Base_SetConfig+0xf8>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a0c      	ldr	r2, [pc, #48]	; (80061ec <TIM_Base_SetConfig+0x124>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d103      	bne.n	80061c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	691a      	ldr	r2, [r3, #16]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	615a      	str	r2, [r3, #20]
}
 80061ce:	bf00      	nop
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	40010000 	.word	0x40010000
 80061e0:	40000400 	.word	0x40000400
 80061e4:	40000800 	.word	0x40000800
 80061e8:	40000c00 	.word	0x40000c00
 80061ec:	40010400 	.word	0x40010400
 80061f0:	40014000 	.word	0x40014000
 80061f4:	40014400 	.word	0x40014400
 80061f8:	40014800 	.word	0x40014800
 80061fc:	40001800 	.word	0x40001800
 8006200:	40001c00 	.word	0x40001c00
 8006204:	40002000 	.word	0x40002000

08006208 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006208:	b480      	push	{r7}
 800620a:	b087      	sub	sp, #28
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	f023 0201 	bic.w	r2, r3, #1
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	4b2b      	ldr	r3, [pc, #172]	; (80062e0 <TIM_OC1_SetConfig+0xd8>)
 8006234:	4013      	ands	r3, r2
 8006236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f023 0303 	bic.w	r3, r3, #3
 800623e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	4313      	orrs	r3, r2
 8006248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f023 0302 	bic.w	r3, r3, #2
 8006250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	4313      	orrs	r3, r2
 800625a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a21      	ldr	r2, [pc, #132]	; (80062e4 <TIM_OC1_SetConfig+0xdc>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d003      	beq.n	800626c <TIM_OC1_SetConfig+0x64>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a20      	ldr	r2, [pc, #128]	; (80062e8 <TIM_OC1_SetConfig+0xe0>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d10c      	bne.n	8006286 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	f023 0308 	bic.w	r3, r3, #8
 8006272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	4313      	orrs	r3, r2
 800627c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f023 0304 	bic.w	r3, r3, #4
 8006284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a16      	ldr	r2, [pc, #88]	; (80062e4 <TIM_OC1_SetConfig+0xdc>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d003      	beq.n	8006296 <TIM_OC1_SetConfig+0x8e>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a15      	ldr	r2, [pc, #84]	; (80062e8 <TIM_OC1_SetConfig+0xe0>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d111      	bne.n	80062ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800629c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	685a      	ldr	r2, [r3, #4]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	621a      	str	r2, [r3, #32]
}
 80062d4:	bf00      	nop
 80062d6:	371c      	adds	r7, #28
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	fffeff8f 	.word	0xfffeff8f
 80062e4:	40010000 	.word	0x40010000
 80062e8:	40010400 	.word	0x40010400

080062ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b087      	sub	sp, #28
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	f023 0210 	bic.w	r2, r3, #16
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	4b2e      	ldr	r3, [pc, #184]	; (80063d0 <TIM_OC2_SetConfig+0xe4>)
 8006318:	4013      	ands	r3, r2
 800631a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	021b      	lsls	r3, r3, #8
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	4313      	orrs	r3, r2
 800632e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f023 0320 	bic.w	r3, r3, #32
 8006336:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	011b      	lsls	r3, r3, #4
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	4313      	orrs	r3, r2
 8006342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a23      	ldr	r2, [pc, #140]	; (80063d4 <TIM_OC2_SetConfig+0xe8>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d003      	beq.n	8006354 <TIM_OC2_SetConfig+0x68>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a22      	ldr	r2, [pc, #136]	; (80063d8 <TIM_OC2_SetConfig+0xec>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d10d      	bne.n	8006370 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800635a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	011b      	lsls	r3, r3, #4
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	4313      	orrs	r3, r2
 8006366:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800636e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a18      	ldr	r2, [pc, #96]	; (80063d4 <TIM_OC2_SetConfig+0xe8>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d003      	beq.n	8006380 <TIM_OC2_SetConfig+0x94>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a17      	ldr	r2, [pc, #92]	; (80063d8 <TIM_OC2_SetConfig+0xec>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d113      	bne.n	80063a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006386:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800638e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	4313      	orrs	r3, r2
 800639a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	699b      	ldr	r3, [r3, #24]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685a      	ldr	r2, [r3, #4]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	697a      	ldr	r2, [r7, #20]
 80063c0:	621a      	str	r2, [r3, #32]
}
 80063c2:	bf00      	nop
 80063c4:	371c      	adds	r7, #28
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	feff8fff 	.word	0xfeff8fff
 80063d4:	40010000 	.word	0x40010000
 80063d8:	40010400 	.word	0x40010400

080063dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063dc:	b480      	push	{r7}
 80063de:	b087      	sub	sp, #28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	4b2d      	ldr	r3, [pc, #180]	; (80064bc <TIM_OC3_SetConfig+0xe0>)
 8006408:	4013      	ands	r3, r2
 800640a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f023 0303 	bic.w	r3, r3, #3
 8006412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006424:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	021b      	lsls	r3, r3, #8
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	4313      	orrs	r3, r2
 8006430:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a22      	ldr	r2, [pc, #136]	; (80064c0 <TIM_OC3_SetConfig+0xe4>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d003      	beq.n	8006442 <TIM_OC3_SetConfig+0x66>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a21      	ldr	r2, [pc, #132]	; (80064c4 <TIM_OC3_SetConfig+0xe8>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d10d      	bne.n	800645e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006448:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	021b      	lsls	r3, r3, #8
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	4313      	orrs	r3, r2
 8006454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800645c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a17      	ldr	r2, [pc, #92]	; (80064c0 <TIM_OC3_SetConfig+0xe4>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d003      	beq.n	800646e <TIM_OC3_SetConfig+0x92>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a16      	ldr	r2, [pc, #88]	; (80064c4 <TIM_OC3_SetConfig+0xe8>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d113      	bne.n	8006496 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800647c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	011b      	lsls	r3, r3, #4
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	4313      	orrs	r3, r2
 8006488:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	011b      	lsls	r3, r3, #4
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	4313      	orrs	r3, r2
 8006494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	697a      	ldr	r2, [r7, #20]
 80064ae:	621a      	str	r2, [r3, #32]
}
 80064b0:	bf00      	nop
 80064b2:	371c      	adds	r7, #28
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	fffeff8f 	.word	0xfffeff8f
 80064c0:	40010000 	.word	0x40010000
 80064c4:	40010400 	.word	0x40010400

080064c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	69db      	ldr	r3, [r3, #28]
 80064ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	4b1e      	ldr	r3, [pc, #120]	; (800656c <TIM_OC4_SetConfig+0xa4>)
 80064f4:	4013      	ands	r3, r2
 80064f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	021b      	lsls	r3, r3, #8
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	4313      	orrs	r3, r2
 800650a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006512:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	031b      	lsls	r3, r3, #12
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	4313      	orrs	r3, r2
 800651e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a13      	ldr	r2, [pc, #76]	; (8006570 <TIM_OC4_SetConfig+0xa8>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d003      	beq.n	8006530 <TIM_OC4_SetConfig+0x68>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a12      	ldr	r2, [pc, #72]	; (8006574 <TIM_OC4_SetConfig+0xac>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d109      	bne.n	8006544 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006536:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	695b      	ldr	r3, [r3, #20]
 800653c:	019b      	lsls	r3, r3, #6
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	4313      	orrs	r3, r2
 8006542:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	685a      	ldr	r2, [r3, #4]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	621a      	str	r2, [r3, #32]
}
 800655e:	bf00      	nop
 8006560:	371c      	adds	r7, #28
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	feff8fff 	.word	0xfeff8fff
 8006570:	40010000 	.word	0x40010000
 8006574:	40010400 	.word	0x40010400

08006578 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006578:	b480      	push	{r7}
 800657a:	b087      	sub	sp, #28
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800659e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	4b1b      	ldr	r3, [pc, #108]	; (8006610 <TIM_OC5_SetConfig+0x98>)
 80065a4:	4013      	ands	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80065b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	041b      	lsls	r3, r3, #16
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a12      	ldr	r2, [pc, #72]	; (8006614 <TIM_OC5_SetConfig+0x9c>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d003      	beq.n	80065d6 <TIM_OC5_SetConfig+0x5e>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a11      	ldr	r2, [pc, #68]	; (8006618 <TIM_OC5_SetConfig+0xa0>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d109      	bne.n	80065ea <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	021b      	lsls	r3, r3, #8
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	621a      	str	r2, [r3, #32]
}
 8006604:	bf00      	nop
 8006606:	371c      	adds	r7, #28
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	fffeff8f 	.word	0xfffeff8f
 8006614:	40010000 	.word	0x40010000
 8006618:	40010400 	.word	0x40010400

0800661c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800661c:	b480      	push	{r7}
 800661e:	b087      	sub	sp, #28
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	4b1c      	ldr	r3, [pc, #112]	; (80066b8 <TIM_OC6_SetConfig+0x9c>)
 8006648:	4013      	ands	r3, r2
 800664a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	021b      	lsls	r3, r3, #8
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	4313      	orrs	r3, r2
 8006656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800665e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	051b      	lsls	r3, r3, #20
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	4313      	orrs	r3, r2
 800666a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a13      	ldr	r2, [pc, #76]	; (80066bc <TIM_OC6_SetConfig+0xa0>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d003      	beq.n	800667c <TIM_OC6_SetConfig+0x60>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a12      	ldr	r2, [pc, #72]	; (80066c0 <TIM_OC6_SetConfig+0xa4>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d109      	bne.n	8006690 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006682:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	029b      	lsls	r3, r3, #10
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	4313      	orrs	r3, r2
 800668e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	621a      	str	r2, [r3, #32]
}
 80066aa:	bf00      	nop
 80066ac:	371c      	adds	r7, #28
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	feff8fff 	.word	0xfeff8fff
 80066bc:	40010000 	.word	0x40010000
 80066c0:	40010400 	.word	0x40010400

080066c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b087      	sub	sp, #28
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f003 031f 	and.w	r3, r3, #31
 80066d6:	2201      	movs	r2, #1
 80066d8:	fa02 f303 	lsl.w	r3, r2, r3
 80066dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6a1a      	ldr	r2, [r3, #32]
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	43db      	mvns	r3, r3
 80066e6:	401a      	ands	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6a1a      	ldr	r2, [r3, #32]
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f003 031f 	and.w	r3, r3, #31
 80066f6:	6879      	ldr	r1, [r7, #4]
 80066f8:	fa01 f303 	lsl.w	r3, r1, r3
 80066fc:	431a      	orrs	r2, r3
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	621a      	str	r2, [r3, #32]
}
 8006702:	bf00      	nop
 8006704:	371c      	adds	r7, #28
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
	...

08006710 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006720:	2b01      	cmp	r3, #1
 8006722:	d101      	bne.n	8006728 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006724:	2302      	movs	r3, #2
 8006726:	e06d      	b.n	8006804 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a30      	ldr	r2, [pc, #192]	; (8006810 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d004      	beq.n	800675c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a2f      	ldr	r2, [pc, #188]	; (8006814 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d108      	bne.n	800676e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006762:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	4313      	orrs	r3, r2
 800676c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006774:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	4313      	orrs	r3, r2
 800677e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a20      	ldr	r2, [pc, #128]	; (8006810 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d022      	beq.n	80067d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800679a:	d01d      	beq.n	80067d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a1d      	ldr	r2, [pc, #116]	; (8006818 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d018      	beq.n	80067d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a1c      	ldr	r2, [pc, #112]	; (800681c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d013      	beq.n	80067d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a1a      	ldr	r2, [pc, #104]	; (8006820 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d00e      	beq.n	80067d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a15      	ldr	r2, [pc, #84]	; (8006814 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d009      	beq.n	80067d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a16      	ldr	r2, [pc, #88]	; (8006824 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d004      	beq.n	80067d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a15      	ldr	r2, [pc, #84]	; (8006828 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d10c      	bne.n	80067f2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	40010000 	.word	0x40010000
 8006814:	40010400 	.word	0x40010400
 8006818:	40000400 	.word	0x40000400
 800681c:	40000800 	.word	0x40000800
 8006820:	40000c00 	.word	0x40000c00
 8006824:	40014000 	.word	0x40014000
 8006828:	40001800 	.word	0x40001800

0800682c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d101      	bne.n	800683e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e040      	b.n	80068c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006842:	2b00      	cmp	r3, #0
 8006844:	d106      	bne.n	8006854 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7fb f934 	bl	8001abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2224      	movs	r2, #36	; 0x24
 8006858:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f022 0201 	bic.w	r2, r2, #1
 8006868:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f8be 	bl	80069ec <UART_SetConfig>
 8006870:	4603      	mov	r3, r0
 8006872:	2b01      	cmp	r3, #1
 8006874:	d101      	bne.n	800687a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e022      	b.n	80068c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687e:	2b00      	cmp	r3, #0
 8006880:	d002      	beq.n	8006888 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fb5c 	bl	8006f40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006896:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	689a      	ldr	r2, [r3, #8]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f042 0201 	orr.w	r2, r2, #1
 80068b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 fbe3 	bl	8007084 <UART_CheckIdleState>
 80068be:	4603      	mov	r3, r0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b08a      	sub	sp, #40	; 0x28
 80068cc:	af02      	add	r7, sp, #8
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	603b      	str	r3, [r7, #0]
 80068d4:	4613      	mov	r3, r2
 80068d6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068dc:	2b20      	cmp	r3, #32
 80068de:	d17f      	bne.n	80069e0 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d002      	beq.n	80068ec <HAL_UART_Transmit+0x24>
 80068e6:	88fb      	ldrh	r3, [r7, #6]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d101      	bne.n	80068f0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e078      	b.n	80069e2 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d101      	bne.n	80068fe <HAL_UART_Transmit+0x36>
 80068fa:	2302      	movs	r3, #2
 80068fc:	e071      	b.n	80069e2 <HAL_UART_Transmit+0x11a>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2221      	movs	r2, #33	; 0x21
 8006910:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006912:	f7fb fa33 	bl	8001d7c <HAL_GetTick>
 8006916:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	88fa      	ldrh	r2, [r7, #6]
 800691c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	88fa      	ldrh	r2, [r7, #6]
 8006924:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006930:	d108      	bne.n	8006944 <HAL_UART_Transmit+0x7c>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d104      	bne.n	8006944 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800693a:	2300      	movs	r3, #0
 800693c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	61bb      	str	r3, [r7, #24]
 8006942:	e003      	b.n	800694c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006948:	2300      	movs	r3, #0
 800694a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006954:	e02c      	b.n	80069b0 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	2200      	movs	r2, #0
 800695e:	2180      	movs	r1, #128	; 0x80
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f000 fbbe 	bl	80070e2 <UART_WaitOnFlagUntilTimeout>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e038      	b.n	80069e2 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10b      	bne.n	800698e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	461a      	mov	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006984:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	3302      	adds	r3, #2
 800698a:	61bb      	str	r3, [r7, #24]
 800698c:	e007      	b.n	800699e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	781a      	ldrb	r2, [r3, #0]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	3301      	adds	r3, #1
 800699c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	3b01      	subs	r3, #1
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1cc      	bne.n	8006956 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	9300      	str	r3, [sp, #0]
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	2200      	movs	r2, #0
 80069c4:	2140      	movs	r1, #64	; 0x40
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 fb8b 	bl	80070e2 <UART_WaitOnFlagUntilTimeout>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e005      	b.n	80069e2 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2220      	movs	r2, #32
 80069da:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80069dc:	2300      	movs	r3, #0
 80069de:	e000      	b.n	80069e2 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80069e0:	2302      	movs	r3, #2
  }
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3720      	adds	r7, #32
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
	...

080069ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b088      	sub	sp, #32
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80069f4:	2300      	movs	r3, #0
 80069f6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689a      	ldr	r2, [r3, #8]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	431a      	orrs	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	431a      	orrs	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	69db      	ldr	r3, [r3, #28]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	4bb1      	ldr	r3, [pc, #708]	; (8006ce0 <UART_SetConfig+0x2f4>)
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	6812      	ldr	r2, [r2, #0]
 8006a22:	6939      	ldr	r1, [r7, #16]
 8006a24:	430b      	orrs	r3, r1
 8006a26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68da      	ldr	r2, [r3, #12]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a1b      	ldr	r3, [r3, #32]
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a9f      	ldr	r2, [pc, #636]	; (8006ce4 <UART_SetConfig+0x2f8>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d121      	bne.n	8006ab0 <UART_SetConfig+0xc4>
 8006a6c:	4b9e      	ldr	r3, [pc, #632]	; (8006ce8 <UART_SetConfig+0x2fc>)
 8006a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a72:	f003 0303 	and.w	r3, r3, #3
 8006a76:	2b03      	cmp	r3, #3
 8006a78:	d816      	bhi.n	8006aa8 <UART_SetConfig+0xbc>
 8006a7a:	a201      	add	r2, pc, #4	; (adr r2, 8006a80 <UART_SetConfig+0x94>)
 8006a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a80:	08006a91 	.word	0x08006a91
 8006a84:	08006a9d 	.word	0x08006a9d
 8006a88:	08006a97 	.word	0x08006a97
 8006a8c:	08006aa3 	.word	0x08006aa3
 8006a90:	2301      	movs	r3, #1
 8006a92:	77fb      	strb	r3, [r7, #31]
 8006a94:	e151      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006a96:	2302      	movs	r3, #2
 8006a98:	77fb      	strb	r3, [r7, #31]
 8006a9a:	e14e      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006a9c:	2304      	movs	r3, #4
 8006a9e:	77fb      	strb	r3, [r7, #31]
 8006aa0:	e14b      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006aa2:	2308      	movs	r3, #8
 8006aa4:	77fb      	strb	r3, [r7, #31]
 8006aa6:	e148      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006aa8:	2310      	movs	r3, #16
 8006aaa:	77fb      	strb	r3, [r7, #31]
 8006aac:	bf00      	nop
 8006aae:	e144      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a8d      	ldr	r2, [pc, #564]	; (8006cec <UART_SetConfig+0x300>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d134      	bne.n	8006b24 <UART_SetConfig+0x138>
 8006aba:	4b8b      	ldr	r3, [pc, #556]	; (8006ce8 <UART_SetConfig+0x2fc>)
 8006abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ac0:	f003 030c 	and.w	r3, r3, #12
 8006ac4:	2b0c      	cmp	r3, #12
 8006ac6:	d829      	bhi.n	8006b1c <UART_SetConfig+0x130>
 8006ac8:	a201      	add	r2, pc, #4	; (adr r2, 8006ad0 <UART_SetConfig+0xe4>)
 8006aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ace:	bf00      	nop
 8006ad0:	08006b05 	.word	0x08006b05
 8006ad4:	08006b1d 	.word	0x08006b1d
 8006ad8:	08006b1d 	.word	0x08006b1d
 8006adc:	08006b1d 	.word	0x08006b1d
 8006ae0:	08006b11 	.word	0x08006b11
 8006ae4:	08006b1d 	.word	0x08006b1d
 8006ae8:	08006b1d 	.word	0x08006b1d
 8006aec:	08006b1d 	.word	0x08006b1d
 8006af0:	08006b0b 	.word	0x08006b0b
 8006af4:	08006b1d 	.word	0x08006b1d
 8006af8:	08006b1d 	.word	0x08006b1d
 8006afc:	08006b1d 	.word	0x08006b1d
 8006b00:	08006b17 	.word	0x08006b17
 8006b04:	2300      	movs	r3, #0
 8006b06:	77fb      	strb	r3, [r7, #31]
 8006b08:	e117      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	77fb      	strb	r3, [r7, #31]
 8006b0e:	e114      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006b10:	2304      	movs	r3, #4
 8006b12:	77fb      	strb	r3, [r7, #31]
 8006b14:	e111      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006b16:	2308      	movs	r3, #8
 8006b18:	77fb      	strb	r3, [r7, #31]
 8006b1a:	e10e      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006b1c:	2310      	movs	r3, #16
 8006b1e:	77fb      	strb	r3, [r7, #31]
 8006b20:	bf00      	nop
 8006b22:	e10a      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a71      	ldr	r2, [pc, #452]	; (8006cf0 <UART_SetConfig+0x304>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d120      	bne.n	8006b70 <UART_SetConfig+0x184>
 8006b2e:	4b6e      	ldr	r3, [pc, #440]	; (8006ce8 <UART_SetConfig+0x2fc>)
 8006b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b34:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b38:	2b10      	cmp	r3, #16
 8006b3a:	d00f      	beq.n	8006b5c <UART_SetConfig+0x170>
 8006b3c:	2b10      	cmp	r3, #16
 8006b3e:	d802      	bhi.n	8006b46 <UART_SetConfig+0x15a>
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d005      	beq.n	8006b50 <UART_SetConfig+0x164>
 8006b44:	e010      	b.n	8006b68 <UART_SetConfig+0x17c>
 8006b46:	2b20      	cmp	r3, #32
 8006b48:	d005      	beq.n	8006b56 <UART_SetConfig+0x16a>
 8006b4a:	2b30      	cmp	r3, #48	; 0x30
 8006b4c:	d009      	beq.n	8006b62 <UART_SetConfig+0x176>
 8006b4e:	e00b      	b.n	8006b68 <UART_SetConfig+0x17c>
 8006b50:	2300      	movs	r3, #0
 8006b52:	77fb      	strb	r3, [r7, #31]
 8006b54:	e0f1      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006b56:	2302      	movs	r3, #2
 8006b58:	77fb      	strb	r3, [r7, #31]
 8006b5a:	e0ee      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006b5c:	2304      	movs	r3, #4
 8006b5e:	77fb      	strb	r3, [r7, #31]
 8006b60:	e0eb      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006b62:	2308      	movs	r3, #8
 8006b64:	77fb      	strb	r3, [r7, #31]
 8006b66:	e0e8      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006b68:	2310      	movs	r3, #16
 8006b6a:	77fb      	strb	r3, [r7, #31]
 8006b6c:	bf00      	nop
 8006b6e:	e0e4      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a5f      	ldr	r2, [pc, #380]	; (8006cf4 <UART_SetConfig+0x308>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d120      	bne.n	8006bbc <UART_SetConfig+0x1d0>
 8006b7a:	4b5b      	ldr	r3, [pc, #364]	; (8006ce8 <UART_SetConfig+0x2fc>)
 8006b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b80:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b84:	2b40      	cmp	r3, #64	; 0x40
 8006b86:	d00f      	beq.n	8006ba8 <UART_SetConfig+0x1bc>
 8006b88:	2b40      	cmp	r3, #64	; 0x40
 8006b8a:	d802      	bhi.n	8006b92 <UART_SetConfig+0x1a6>
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d005      	beq.n	8006b9c <UART_SetConfig+0x1b0>
 8006b90:	e010      	b.n	8006bb4 <UART_SetConfig+0x1c8>
 8006b92:	2b80      	cmp	r3, #128	; 0x80
 8006b94:	d005      	beq.n	8006ba2 <UART_SetConfig+0x1b6>
 8006b96:	2bc0      	cmp	r3, #192	; 0xc0
 8006b98:	d009      	beq.n	8006bae <UART_SetConfig+0x1c2>
 8006b9a:	e00b      	b.n	8006bb4 <UART_SetConfig+0x1c8>
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	77fb      	strb	r3, [r7, #31]
 8006ba0:	e0cb      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006ba2:	2302      	movs	r3, #2
 8006ba4:	77fb      	strb	r3, [r7, #31]
 8006ba6:	e0c8      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006ba8:	2304      	movs	r3, #4
 8006baa:	77fb      	strb	r3, [r7, #31]
 8006bac:	e0c5      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006bae:	2308      	movs	r3, #8
 8006bb0:	77fb      	strb	r3, [r7, #31]
 8006bb2:	e0c2      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006bb4:	2310      	movs	r3, #16
 8006bb6:	77fb      	strb	r3, [r7, #31]
 8006bb8:	bf00      	nop
 8006bba:	e0be      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a4d      	ldr	r2, [pc, #308]	; (8006cf8 <UART_SetConfig+0x30c>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d124      	bne.n	8006c10 <UART_SetConfig+0x224>
 8006bc6:	4b48      	ldr	r3, [pc, #288]	; (8006ce8 <UART_SetConfig+0x2fc>)
 8006bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bd4:	d012      	beq.n	8006bfc <UART_SetConfig+0x210>
 8006bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bda:	d802      	bhi.n	8006be2 <UART_SetConfig+0x1f6>
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d007      	beq.n	8006bf0 <UART_SetConfig+0x204>
 8006be0:	e012      	b.n	8006c08 <UART_SetConfig+0x21c>
 8006be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006be6:	d006      	beq.n	8006bf6 <UART_SetConfig+0x20a>
 8006be8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bec:	d009      	beq.n	8006c02 <UART_SetConfig+0x216>
 8006bee:	e00b      	b.n	8006c08 <UART_SetConfig+0x21c>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	77fb      	strb	r3, [r7, #31]
 8006bf4:	e0a1      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006bf6:	2302      	movs	r3, #2
 8006bf8:	77fb      	strb	r3, [r7, #31]
 8006bfa:	e09e      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006bfc:	2304      	movs	r3, #4
 8006bfe:	77fb      	strb	r3, [r7, #31]
 8006c00:	e09b      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006c02:	2308      	movs	r3, #8
 8006c04:	77fb      	strb	r3, [r7, #31]
 8006c06:	e098      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006c08:	2310      	movs	r3, #16
 8006c0a:	77fb      	strb	r3, [r7, #31]
 8006c0c:	bf00      	nop
 8006c0e:	e094      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a39      	ldr	r2, [pc, #228]	; (8006cfc <UART_SetConfig+0x310>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d124      	bne.n	8006c64 <UART_SetConfig+0x278>
 8006c1a:	4b33      	ldr	r3, [pc, #204]	; (8006ce8 <UART_SetConfig+0x2fc>)
 8006c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c28:	d012      	beq.n	8006c50 <UART_SetConfig+0x264>
 8006c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c2e:	d802      	bhi.n	8006c36 <UART_SetConfig+0x24a>
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d007      	beq.n	8006c44 <UART_SetConfig+0x258>
 8006c34:	e012      	b.n	8006c5c <UART_SetConfig+0x270>
 8006c36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c3a:	d006      	beq.n	8006c4a <UART_SetConfig+0x25e>
 8006c3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c40:	d009      	beq.n	8006c56 <UART_SetConfig+0x26a>
 8006c42:	e00b      	b.n	8006c5c <UART_SetConfig+0x270>
 8006c44:	2301      	movs	r3, #1
 8006c46:	77fb      	strb	r3, [r7, #31]
 8006c48:	e077      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	77fb      	strb	r3, [r7, #31]
 8006c4e:	e074      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006c50:	2304      	movs	r3, #4
 8006c52:	77fb      	strb	r3, [r7, #31]
 8006c54:	e071      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006c56:	2308      	movs	r3, #8
 8006c58:	77fb      	strb	r3, [r7, #31]
 8006c5a:	e06e      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006c5c:	2310      	movs	r3, #16
 8006c5e:	77fb      	strb	r3, [r7, #31]
 8006c60:	bf00      	nop
 8006c62:	e06a      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a25      	ldr	r2, [pc, #148]	; (8006d00 <UART_SetConfig+0x314>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d124      	bne.n	8006cb8 <UART_SetConfig+0x2cc>
 8006c6e:	4b1e      	ldr	r3, [pc, #120]	; (8006ce8 <UART_SetConfig+0x2fc>)
 8006c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c74:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c7c:	d012      	beq.n	8006ca4 <UART_SetConfig+0x2b8>
 8006c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c82:	d802      	bhi.n	8006c8a <UART_SetConfig+0x29e>
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d007      	beq.n	8006c98 <UART_SetConfig+0x2ac>
 8006c88:	e012      	b.n	8006cb0 <UART_SetConfig+0x2c4>
 8006c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c8e:	d006      	beq.n	8006c9e <UART_SetConfig+0x2b2>
 8006c90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c94:	d009      	beq.n	8006caa <UART_SetConfig+0x2be>
 8006c96:	e00b      	b.n	8006cb0 <UART_SetConfig+0x2c4>
 8006c98:	2300      	movs	r3, #0
 8006c9a:	77fb      	strb	r3, [r7, #31]
 8006c9c:	e04d      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006c9e:	2302      	movs	r3, #2
 8006ca0:	77fb      	strb	r3, [r7, #31]
 8006ca2:	e04a      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006ca4:	2304      	movs	r3, #4
 8006ca6:	77fb      	strb	r3, [r7, #31]
 8006ca8:	e047      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006caa:	2308      	movs	r3, #8
 8006cac:	77fb      	strb	r3, [r7, #31]
 8006cae:	e044      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006cb0:	2310      	movs	r3, #16
 8006cb2:	77fb      	strb	r3, [r7, #31]
 8006cb4:	bf00      	nop
 8006cb6:	e040      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a11      	ldr	r2, [pc, #68]	; (8006d04 <UART_SetConfig+0x318>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d139      	bne.n	8006d36 <UART_SetConfig+0x34a>
 8006cc2:	4b09      	ldr	r3, [pc, #36]	; (8006ce8 <UART_SetConfig+0x2fc>)
 8006cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006ccc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cd0:	d027      	beq.n	8006d22 <UART_SetConfig+0x336>
 8006cd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cd6:	d817      	bhi.n	8006d08 <UART_SetConfig+0x31c>
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d01c      	beq.n	8006d16 <UART_SetConfig+0x32a>
 8006cdc:	e027      	b.n	8006d2e <UART_SetConfig+0x342>
 8006cde:	bf00      	nop
 8006ce0:	efff69f3 	.word	0xefff69f3
 8006ce4:	40011000 	.word	0x40011000
 8006ce8:	40023800 	.word	0x40023800
 8006cec:	40004400 	.word	0x40004400
 8006cf0:	40004800 	.word	0x40004800
 8006cf4:	40004c00 	.word	0x40004c00
 8006cf8:	40005000 	.word	0x40005000
 8006cfc:	40011400 	.word	0x40011400
 8006d00:	40007800 	.word	0x40007800
 8006d04:	40007c00 	.word	0x40007c00
 8006d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d0c:	d006      	beq.n	8006d1c <UART_SetConfig+0x330>
 8006d0e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d12:	d009      	beq.n	8006d28 <UART_SetConfig+0x33c>
 8006d14:	e00b      	b.n	8006d2e <UART_SetConfig+0x342>
 8006d16:	2300      	movs	r3, #0
 8006d18:	77fb      	strb	r3, [r7, #31]
 8006d1a:	e00e      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	77fb      	strb	r3, [r7, #31]
 8006d20:	e00b      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006d22:	2304      	movs	r3, #4
 8006d24:	77fb      	strb	r3, [r7, #31]
 8006d26:	e008      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006d28:	2308      	movs	r3, #8
 8006d2a:	77fb      	strb	r3, [r7, #31]
 8006d2c:	e005      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006d2e:	2310      	movs	r3, #16
 8006d30:	77fb      	strb	r3, [r7, #31]
 8006d32:	bf00      	nop
 8006d34:	e001      	b.n	8006d3a <UART_SetConfig+0x34e>
 8006d36:	2310      	movs	r3, #16
 8006d38:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	69db      	ldr	r3, [r3, #28]
 8006d3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d42:	d17f      	bne.n	8006e44 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8006d44:	7ffb      	ldrb	r3, [r7, #31]
 8006d46:	2b08      	cmp	r3, #8
 8006d48:	d85c      	bhi.n	8006e04 <UART_SetConfig+0x418>
 8006d4a:	a201      	add	r2, pc, #4	; (adr r2, 8006d50 <UART_SetConfig+0x364>)
 8006d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d50:	08006d75 	.word	0x08006d75
 8006d54:	08006d95 	.word	0x08006d95
 8006d58:	08006db5 	.word	0x08006db5
 8006d5c:	08006e05 	.word	0x08006e05
 8006d60:	08006dcd 	.word	0x08006dcd
 8006d64:	08006e05 	.word	0x08006e05
 8006d68:	08006e05 	.word	0x08006e05
 8006d6c:	08006e05 	.word	0x08006e05
 8006d70:	08006ded 	.word	0x08006ded
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d74:	f7fe fbfe 	bl	8005574 <HAL_RCC_GetPCLK1Freq>
 8006d78:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	005a      	lsls	r2, r3, #1
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	085b      	lsrs	r3, r3, #1
 8006d84:	441a      	add	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	61bb      	str	r3, [r7, #24]
        break;
 8006d92:	e03a      	b.n	8006e0a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d94:	f7fe fc02 	bl	800559c <HAL_RCC_GetPCLK2Freq>
 8006d98:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	005a      	lsls	r2, r3, #1
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	085b      	lsrs	r3, r3, #1
 8006da4:	441a      	add	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	61bb      	str	r3, [r7, #24]
        break;
 8006db2:	e02a      	b.n	8006e0a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	085a      	lsrs	r2, r3, #1
 8006dba:	4b5f      	ldr	r3, [pc, #380]	; (8006f38 <UART_SetConfig+0x54c>)
 8006dbc:	4413      	add	r3, r2
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	6852      	ldr	r2, [r2, #4]
 8006dc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	61bb      	str	r3, [r7, #24]
        break;
 8006dca:	e01e      	b.n	8006e0a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dcc:	f7fe faee 	bl	80053ac <HAL_RCC_GetSysClockFreq>
 8006dd0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	005a      	lsls	r2, r3, #1
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	085b      	lsrs	r3, r3, #1
 8006ddc:	441a      	add	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	61bb      	str	r3, [r7, #24]
        break;
 8006dea:	e00e      	b.n	8006e0a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	085b      	lsrs	r3, r3, #1
 8006df2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	61bb      	str	r3, [r7, #24]
        break;
 8006e02:	e002      	b.n	8006e0a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	75fb      	strb	r3, [r7, #23]
        break;
 8006e08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	2b0f      	cmp	r3, #15
 8006e0e:	d916      	bls.n	8006e3e <UART_SetConfig+0x452>
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e16:	d212      	bcs.n	8006e3e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	f023 030f 	bic.w	r3, r3, #15
 8006e20:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	085b      	lsrs	r3, r3, #1
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	f003 0307 	and.w	r3, r3, #7
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	897b      	ldrh	r3, [r7, #10]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	897a      	ldrh	r2, [r7, #10]
 8006e3a:	60da      	str	r2, [r3, #12]
 8006e3c:	e070      	b.n	8006f20 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	75fb      	strb	r3, [r7, #23]
 8006e42:	e06d      	b.n	8006f20 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8006e44:	7ffb      	ldrb	r3, [r7, #31]
 8006e46:	2b08      	cmp	r3, #8
 8006e48:	d859      	bhi.n	8006efe <UART_SetConfig+0x512>
 8006e4a:	a201      	add	r2, pc, #4	; (adr r2, 8006e50 <UART_SetConfig+0x464>)
 8006e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e50:	08006e75 	.word	0x08006e75
 8006e54:	08006e93 	.word	0x08006e93
 8006e58:	08006eb1 	.word	0x08006eb1
 8006e5c:	08006eff 	.word	0x08006eff
 8006e60:	08006ec9 	.word	0x08006ec9
 8006e64:	08006eff 	.word	0x08006eff
 8006e68:	08006eff 	.word	0x08006eff
 8006e6c:	08006eff 	.word	0x08006eff
 8006e70:	08006ee7 	.word	0x08006ee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e74:	f7fe fb7e 	bl	8005574 <HAL_RCC_GetPCLK1Freq>
 8006e78:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	085a      	lsrs	r2, r3, #1
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	441a      	add	r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	61bb      	str	r3, [r7, #24]
        break;
 8006e90:	e038      	b.n	8006f04 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e92:	f7fe fb83 	bl	800559c <HAL_RCC_GetPCLK2Freq>
 8006e96:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	085a      	lsrs	r2, r3, #1
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	441a      	add	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	61bb      	str	r3, [r7, #24]
        break;
 8006eae:	e029      	b.n	8006f04 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	085a      	lsrs	r2, r3, #1
 8006eb6:	4b21      	ldr	r3, [pc, #132]	; (8006f3c <UART_SetConfig+0x550>)
 8006eb8:	4413      	add	r3, r2
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	6852      	ldr	r2, [r2, #4]
 8006ebe:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	61bb      	str	r3, [r7, #24]
        break;
 8006ec6:	e01d      	b.n	8006f04 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ec8:	f7fe fa70 	bl	80053ac <HAL_RCC_GetSysClockFreq>
 8006ecc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	085a      	lsrs	r2, r3, #1
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	441a      	add	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	61bb      	str	r3, [r7, #24]
        break;
 8006ee4:	e00e      	b.n	8006f04 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	085b      	lsrs	r3, r3, #1
 8006eec:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	61bb      	str	r3, [r7, #24]
        break;
 8006efc:	e002      	b.n	8006f04 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	75fb      	strb	r3, [r7, #23]
        break;
 8006f02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	2b0f      	cmp	r3, #15
 8006f08:	d908      	bls.n	8006f1c <UART_SetConfig+0x530>
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f10:	d204      	bcs.n	8006f1c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	69ba      	ldr	r2, [r7, #24]
 8006f18:	60da      	str	r2, [r3, #12]
 8006f1a:	e001      	b.n	8006f20 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3720      	adds	r7, #32
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	01e84800 	.word	0x01e84800
 8006f3c:	00f42400 	.word	0x00f42400

08006f40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4c:	f003 0301 	and.w	r3, r3, #1
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00a      	beq.n	8006f6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	430a      	orrs	r2, r1
 8006f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6e:	f003 0302 	and.w	r3, r3, #2
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00a      	beq.n	8006f8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f90:	f003 0304 	and.w	r3, r3, #4
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00a      	beq.n	8006fae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb2:	f003 0308 	and.w	r3, r3, #8
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00a      	beq.n	8006fd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	430a      	orrs	r2, r1
 8006fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd4:	f003 0310 	and.w	r3, r3, #16
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00a      	beq.n	8006ff2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	430a      	orrs	r2, r1
 8006ff0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff6:	f003 0320 	and.w	r3, r3, #32
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00a      	beq.n	8007014 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	430a      	orrs	r2, r1
 8007012:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800701c:	2b00      	cmp	r3, #0
 800701e:	d01a      	beq.n	8007056 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	430a      	orrs	r2, r1
 8007034:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800703e:	d10a      	bne.n	8007056 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	430a      	orrs	r2, r1
 8007054:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00a      	beq.n	8007078 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	430a      	orrs	r2, r1
 8007076:	605a      	str	r2, [r3, #4]
  }
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b086      	sub	sp, #24
 8007088:	af02      	add	r7, sp, #8
 800708a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007092:	f7fa fe73 	bl	8001d7c <HAL_GetTick>
 8007096:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0308 	and.w	r3, r3, #8
 80070a2:	2b08      	cmp	r3, #8
 80070a4:	d10e      	bne.n	80070c4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070aa:	9300      	str	r3, [sp, #0]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 f814 	bl	80070e2 <UART_WaitOnFlagUntilTimeout>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d001      	beq.n	80070c4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e00a      	b.n	80070da <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2220      	movs	r2, #32
 80070c8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2220      	movs	r2, #32
 80070ce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b084      	sub	sp, #16
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	60f8      	str	r0, [r7, #12]
 80070ea:	60b9      	str	r1, [r7, #8]
 80070ec:	603b      	str	r3, [r7, #0]
 80070ee:	4613      	mov	r3, r2
 80070f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070f2:	e05d      	b.n	80071b0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070fa:	d059      	beq.n	80071b0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070fc:	f7fa fe3e 	bl	8001d7c <HAL_GetTick>
 8007100:	4602      	mov	r2, r0
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	69ba      	ldr	r2, [r7, #24]
 8007108:	429a      	cmp	r2, r3
 800710a:	d302      	bcc.n	8007112 <UART_WaitOnFlagUntilTimeout+0x30>
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d11b      	bne.n	800714a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007120:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	689a      	ldr	r2, [r3, #8]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f022 0201 	bic.w	r2, r2, #1
 8007130:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2220      	movs	r2, #32
 8007136:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2220      	movs	r2, #32
 800713c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e042      	b.n	80071d0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0304 	and.w	r3, r3, #4
 8007154:	2b00      	cmp	r3, #0
 8007156:	d02b      	beq.n	80071b0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	69db      	ldr	r3, [r3, #28]
 800715e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007166:	d123      	bne.n	80071b0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007170:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007180:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	689a      	ldr	r2, [r3, #8]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 0201 	bic.w	r2, r2, #1
 8007190:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2220      	movs	r2, #32
 8007196:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2220      	movs	r2, #32
 800719c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2220      	movs	r2, #32
 80071a2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	e00f      	b.n	80071d0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	69da      	ldr	r2, [r3, #28]
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	4013      	ands	r3, r2
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	429a      	cmp	r2, r3
 80071be:	bf0c      	ite	eq
 80071c0:	2301      	moveq	r3, #1
 80071c2:	2300      	movne	r3, #0
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	461a      	mov	r2, r3
 80071c8:	79fb      	ldrb	r3, [r7, #7]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d092      	beq.n	80070f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <__errno>:
 80071d8:	4b01      	ldr	r3, [pc, #4]	; (80071e0 <__errno+0x8>)
 80071da:	6818      	ldr	r0, [r3, #0]
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	2000000c 	.word	0x2000000c

080071e4 <__libc_init_array>:
 80071e4:	b570      	push	{r4, r5, r6, lr}
 80071e6:	4e0d      	ldr	r6, [pc, #52]	; (800721c <__libc_init_array+0x38>)
 80071e8:	4c0d      	ldr	r4, [pc, #52]	; (8007220 <__libc_init_array+0x3c>)
 80071ea:	1ba4      	subs	r4, r4, r6
 80071ec:	10a4      	asrs	r4, r4, #2
 80071ee:	2500      	movs	r5, #0
 80071f0:	42a5      	cmp	r5, r4
 80071f2:	d109      	bne.n	8007208 <__libc_init_array+0x24>
 80071f4:	4e0b      	ldr	r6, [pc, #44]	; (8007224 <__libc_init_array+0x40>)
 80071f6:	4c0c      	ldr	r4, [pc, #48]	; (8007228 <__libc_init_array+0x44>)
 80071f8:	f000 fc2e 	bl	8007a58 <_init>
 80071fc:	1ba4      	subs	r4, r4, r6
 80071fe:	10a4      	asrs	r4, r4, #2
 8007200:	2500      	movs	r5, #0
 8007202:	42a5      	cmp	r5, r4
 8007204:	d105      	bne.n	8007212 <__libc_init_array+0x2e>
 8007206:	bd70      	pop	{r4, r5, r6, pc}
 8007208:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800720c:	4798      	blx	r3
 800720e:	3501      	adds	r5, #1
 8007210:	e7ee      	b.n	80071f0 <__libc_init_array+0xc>
 8007212:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007216:	4798      	blx	r3
 8007218:	3501      	adds	r5, #1
 800721a:	e7f2      	b.n	8007202 <__libc_init_array+0x1e>
 800721c:	08007adc 	.word	0x08007adc
 8007220:	08007adc 	.word	0x08007adc
 8007224:	08007adc 	.word	0x08007adc
 8007228:	08007ae0 	.word	0x08007ae0

0800722c <malloc>:
 800722c:	4b02      	ldr	r3, [pc, #8]	; (8007238 <malloc+0xc>)
 800722e:	4601      	mov	r1, r0
 8007230:	6818      	ldr	r0, [r3, #0]
 8007232:	f000 b859 	b.w	80072e8 <_malloc_r>
 8007236:	bf00      	nop
 8007238:	2000000c 	.word	0x2000000c

0800723c <memset>:
 800723c:	4402      	add	r2, r0
 800723e:	4603      	mov	r3, r0
 8007240:	4293      	cmp	r3, r2
 8007242:	d100      	bne.n	8007246 <memset+0xa>
 8007244:	4770      	bx	lr
 8007246:	f803 1b01 	strb.w	r1, [r3], #1
 800724a:	e7f9      	b.n	8007240 <memset+0x4>

0800724c <_free_r>:
 800724c:	b538      	push	{r3, r4, r5, lr}
 800724e:	4605      	mov	r5, r0
 8007250:	2900      	cmp	r1, #0
 8007252:	d045      	beq.n	80072e0 <_free_r+0x94>
 8007254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007258:	1f0c      	subs	r4, r1, #4
 800725a:	2b00      	cmp	r3, #0
 800725c:	bfb8      	it	lt
 800725e:	18e4      	addlt	r4, r4, r3
 8007260:	f000 f8cc 	bl	80073fc <__malloc_lock>
 8007264:	4a1f      	ldr	r2, [pc, #124]	; (80072e4 <_free_r+0x98>)
 8007266:	6813      	ldr	r3, [r2, #0]
 8007268:	4610      	mov	r0, r2
 800726a:	b933      	cbnz	r3, 800727a <_free_r+0x2e>
 800726c:	6063      	str	r3, [r4, #4]
 800726e:	6014      	str	r4, [r2, #0]
 8007270:	4628      	mov	r0, r5
 8007272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007276:	f000 b8c2 	b.w	80073fe <__malloc_unlock>
 800727a:	42a3      	cmp	r3, r4
 800727c:	d90c      	bls.n	8007298 <_free_r+0x4c>
 800727e:	6821      	ldr	r1, [r4, #0]
 8007280:	1862      	adds	r2, r4, r1
 8007282:	4293      	cmp	r3, r2
 8007284:	bf04      	itt	eq
 8007286:	681a      	ldreq	r2, [r3, #0]
 8007288:	685b      	ldreq	r3, [r3, #4]
 800728a:	6063      	str	r3, [r4, #4]
 800728c:	bf04      	itt	eq
 800728e:	1852      	addeq	r2, r2, r1
 8007290:	6022      	streq	r2, [r4, #0]
 8007292:	6004      	str	r4, [r0, #0]
 8007294:	e7ec      	b.n	8007270 <_free_r+0x24>
 8007296:	4613      	mov	r3, r2
 8007298:	685a      	ldr	r2, [r3, #4]
 800729a:	b10a      	cbz	r2, 80072a0 <_free_r+0x54>
 800729c:	42a2      	cmp	r2, r4
 800729e:	d9fa      	bls.n	8007296 <_free_r+0x4a>
 80072a0:	6819      	ldr	r1, [r3, #0]
 80072a2:	1858      	adds	r0, r3, r1
 80072a4:	42a0      	cmp	r0, r4
 80072a6:	d10b      	bne.n	80072c0 <_free_r+0x74>
 80072a8:	6820      	ldr	r0, [r4, #0]
 80072aa:	4401      	add	r1, r0
 80072ac:	1858      	adds	r0, r3, r1
 80072ae:	4282      	cmp	r2, r0
 80072b0:	6019      	str	r1, [r3, #0]
 80072b2:	d1dd      	bne.n	8007270 <_free_r+0x24>
 80072b4:	6810      	ldr	r0, [r2, #0]
 80072b6:	6852      	ldr	r2, [r2, #4]
 80072b8:	605a      	str	r2, [r3, #4]
 80072ba:	4401      	add	r1, r0
 80072bc:	6019      	str	r1, [r3, #0]
 80072be:	e7d7      	b.n	8007270 <_free_r+0x24>
 80072c0:	d902      	bls.n	80072c8 <_free_r+0x7c>
 80072c2:	230c      	movs	r3, #12
 80072c4:	602b      	str	r3, [r5, #0]
 80072c6:	e7d3      	b.n	8007270 <_free_r+0x24>
 80072c8:	6820      	ldr	r0, [r4, #0]
 80072ca:	1821      	adds	r1, r4, r0
 80072cc:	428a      	cmp	r2, r1
 80072ce:	bf04      	itt	eq
 80072d0:	6811      	ldreq	r1, [r2, #0]
 80072d2:	6852      	ldreq	r2, [r2, #4]
 80072d4:	6062      	str	r2, [r4, #4]
 80072d6:	bf04      	itt	eq
 80072d8:	1809      	addeq	r1, r1, r0
 80072da:	6021      	streq	r1, [r4, #0]
 80072dc:	605c      	str	r4, [r3, #4]
 80072de:	e7c7      	b.n	8007270 <_free_r+0x24>
 80072e0:	bd38      	pop	{r3, r4, r5, pc}
 80072e2:	bf00      	nop
 80072e4:	20000094 	.word	0x20000094

080072e8 <_malloc_r>:
 80072e8:	b570      	push	{r4, r5, r6, lr}
 80072ea:	1ccd      	adds	r5, r1, #3
 80072ec:	f025 0503 	bic.w	r5, r5, #3
 80072f0:	3508      	adds	r5, #8
 80072f2:	2d0c      	cmp	r5, #12
 80072f4:	bf38      	it	cc
 80072f6:	250c      	movcc	r5, #12
 80072f8:	2d00      	cmp	r5, #0
 80072fa:	4606      	mov	r6, r0
 80072fc:	db01      	blt.n	8007302 <_malloc_r+0x1a>
 80072fe:	42a9      	cmp	r1, r5
 8007300:	d903      	bls.n	800730a <_malloc_r+0x22>
 8007302:	230c      	movs	r3, #12
 8007304:	6033      	str	r3, [r6, #0]
 8007306:	2000      	movs	r0, #0
 8007308:	bd70      	pop	{r4, r5, r6, pc}
 800730a:	f000 f877 	bl	80073fc <__malloc_lock>
 800730e:	4a21      	ldr	r2, [pc, #132]	; (8007394 <_malloc_r+0xac>)
 8007310:	6814      	ldr	r4, [r2, #0]
 8007312:	4621      	mov	r1, r4
 8007314:	b991      	cbnz	r1, 800733c <_malloc_r+0x54>
 8007316:	4c20      	ldr	r4, [pc, #128]	; (8007398 <_malloc_r+0xb0>)
 8007318:	6823      	ldr	r3, [r4, #0]
 800731a:	b91b      	cbnz	r3, 8007324 <_malloc_r+0x3c>
 800731c:	4630      	mov	r0, r6
 800731e:	f000 f83d 	bl	800739c <_sbrk_r>
 8007322:	6020      	str	r0, [r4, #0]
 8007324:	4629      	mov	r1, r5
 8007326:	4630      	mov	r0, r6
 8007328:	f000 f838 	bl	800739c <_sbrk_r>
 800732c:	1c43      	adds	r3, r0, #1
 800732e:	d124      	bne.n	800737a <_malloc_r+0x92>
 8007330:	230c      	movs	r3, #12
 8007332:	6033      	str	r3, [r6, #0]
 8007334:	4630      	mov	r0, r6
 8007336:	f000 f862 	bl	80073fe <__malloc_unlock>
 800733a:	e7e4      	b.n	8007306 <_malloc_r+0x1e>
 800733c:	680b      	ldr	r3, [r1, #0]
 800733e:	1b5b      	subs	r3, r3, r5
 8007340:	d418      	bmi.n	8007374 <_malloc_r+0x8c>
 8007342:	2b0b      	cmp	r3, #11
 8007344:	d90f      	bls.n	8007366 <_malloc_r+0x7e>
 8007346:	600b      	str	r3, [r1, #0]
 8007348:	50cd      	str	r5, [r1, r3]
 800734a:	18cc      	adds	r4, r1, r3
 800734c:	4630      	mov	r0, r6
 800734e:	f000 f856 	bl	80073fe <__malloc_unlock>
 8007352:	f104 000b 	add.w	r0, r4, #11
 8007356:	1d23      	adds	r3, r4, #4
 8007358:	f020 0007 	bic.w	r0, r0, #7
 800735c:	1ac3      	subs	r3, r0, r3
 800735e:	d0d3      	beq.n	8007308 <_malloc_r+0x20>
 8007360:	425a      	negs	r2, r3
 8007362:	50e2      	str	r2, [r4, r3]
 8007364:	e7d0      	b.n	8007308 <_malloc_r+0x20>
 8007366:	428c      	cmp	r4, r1
 8007368:	684b      	ldr	r3, [r1, #4]
 800736a:	bf16      	itet	ne
 800736c:	6063      	strne	r3, [r4, #4]
 800736e:	6013      	streq	r3, [r2, #0]
 8007370:	460c      	movne	r4, r1
 8007372:	e7eb      	b.n	800734c <_malloc_r+0x64>
 8007374:	460c      	mov	r4, r1
 8007376:	6849      	ldr	r1, [r1, #4]
 8007378:	e7cc      	b.n	8007314 <_malloc_r+0x2c>
 800737a:	1cc4      	adds	r4, r0, #3
 800737c:	f024 0403 	bic.w	r4, r4, #3
 8007380:	42a0      	cmp	r0, r4
 8007382:	d005      	beq.n	8007390 <_malloc_r+0xa8>
 8007384:	1a21      	subs	r1, r4, r0
 8007386:	4630      	mov	r0, r6
 8007388:	f000 f808 	bl	800739c <_sbrk_r>
 800738c:	3001      	adds	r0, #1
 800738e:	d0cf      	beq.n	8007330 <_malloc_r+0x48>
 8007390:	6025      	str	r5, [r4, #0]
 8007392:	e7db      	b.n	800734c <_malloc_r+0x64>
 8007394:	20000094 	.word	0x20000094
 8007398:	20000098 	.word	0x20000098

0800739c <_sbrk_r>:
 800739c:	b538      	push	{r3, r4, r5, lr}
 800739e:	4c06      	ldr	r4, [pc, #24]	; (80073b8 <_sbrk_r+0x1c>)
 80073a0:	2300      	movs	r3, #0
 80073a2:	4605      	mov	r5, r0
 80073a4:	4608      	mov	r0, r1
 80073a6:	6023      	str	r3, [r4, #0]
 80073a8:	f7fa fc22 	bl	8001bf0 <_sbrk>
 80073ac:	1c43      	adds	r3, r0, #1
 80073ae:	d102      	bne.n	80073b6 <_sbrk_r+0x1a>
 80073b0:	6823      	ldr	r3, [r4, #0]
 80073b2:	b103      	cbz	r3, 80073b6 <_sbrk_r+0x1a>
 80073b4:	602b      	str	r3, [r5, #0]
 80073b6:	bd38      	pop	{r3, r4, r5, pc}
 80073b8:	20000390 	.word	0x20000390

080073bc <siprintf>:
 80073bc:	b40e      	push	{r1, r2, r3}
 80073be:	b500      	push	{lr}
 80073c0:	b09c      	sub	sp, #112	; 0x70
 80073c2:	ab1d      	add	r3, sp, #116	; 0x74
 80073c4:	9002      	str	r0, [sp, #8]
 80073c6:	9006      	str	r0, [sp, #24]
 80073c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80073cc:	4809      	ldr	r0, [pc, #36]	; (80073f4 <siprintf+0x38>)
 80073ce:	9107      	str	r1, [sp, #28]
 80073d0:	9104      	str	r1, [sp, #16]
 80073d2:	4909      	ldr	r1, [pc, #36]	; (80073f8 <siprintf+0x3c>)
 80073d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80073d8:	9105      	str	r1, [sp, #20]
 80073da:	6800      	ldr	r0, [r0, #0]
 80073dc:	9301      	str	r3, [sp, #4]
 80073de:	a902      	add	r1, sp, #8
 80073e0:	f000 f868 	bl	80074b4 <_svfiprintf_r>
 80073e4:	9b02      	ldr	r3, [sp, #8]
 80073e6:	2200      	movs	r2, #0
 80073e8:	701a      	strb	r2, [r3, #0]
 80073ea:	b01c      	add	sp, #112	; 0x70
 80073ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80073f0:	b003      	add	sp, #12
 80073f2:	4770      	bx	lr
 80073f4:	2000000c 	.word	0x2000000c
 80073f8:	ffff0208 	.word	0xffff0208

080073fc <__malloc_lock>:
 80073fc:	4770      	bx	lr

080073fe <__malloc_unlock>:
 80073fe:	4770      	bx	lr

08007400 <__ssputs_r>:
 8007400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007404:	688e      	ldr	r6, [r1, #8]
 8007406:	429e      	cmp	r6, r3
 8007408:	4682      	mov	sl, r0
 800740a:	460c      	mov	r4, r1
 800740c:	4690      	mov	r8, r2
 800740e:	4699      	mov	r9, r3
 8007410:	d837      	bhi.n	8007482 <__ssputs_r+0x82>
 8007412:	898a      	ldrh	r2, [r1, #12]
 8007414:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007418:	d031      	beq.n	800747e <__ssputs_r+0x7e>
 800741a:	6825      	ldr	r5, [r4, #0]
 800741c:	6909      	ldr	r1, [r1, #16]
 800741e:	1a6f      	subs	r7, r5, r1
 8007420:	6965      	ldr	r5, [r4, #20]
 8007422:	2302      	movs	r3, #2
 8007424:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007428:	fb95 f5f3 	sdiv	r5, r5, r3
 800742c:	f109 0301 	add.w	r3, r9, #1
 8007430:	443b      	add	r3, r7
 8007432:	429d      	cmp	r5, r3
 8007434:	bf38      	it	cc
 8007436:	461d      	movcc	r5, r3
 8007438:	0553      	lsls	r3, r2, #21
 800743a:	d530      	bpl.n	800749e <__ssputs_r+0x9e>
 800743c:	4629      	mov	r1, r5
 800743e:	f7ff ff53 	bl	80072e8 <_malloc_r>
 8007442:	4606      	mov	r6, r0
 8007444:	b950      	cbnz	r0, 800745c <__ssputs_r+0x5c>
 8007446:	230c      	movs	r3, #12
 8007448:	f8ca 3000 	str.w	r3, [sl]
 800744c:	89a3      	ldrh	r3, [r4, #12]
 800744e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007452:	81a3      	strh	r3, [r4, #12]
 8007454:	f04f 30ff 	mov.w	r0, #4294967295
 8007458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800745c:	463a      	mov	r2, r7
 800745e:	6921      	ldr	r1, [r4, #16]
 8007460:	f000 faa8 	bl	80079b4 <memcpy>
 8007464:	89a3      	ldrh	r3, [r4, #12]
 8007466:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800746a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800746e:	81a3      	strh	r3, [r4, #12]
 8007470:	6126      	str	r6, [r4, #16]
 8007472:	6165      	str	r5, [r4, #20]
 8007474:	443e      	add	r6, r7
 8007476:	1bed      	subs	r5, r5, r7
 8007478:	6026      	str	r6, [r4, #0]
 800747a:	60a5      	str	r5, [r4, #8]
 800747c:	464e      	mov	r6, r9
 800747e:	454e      	cmp	r6, r9
 8007480:	d900      	bls.n	8007484 <__ssputs_r+0x84>
 8007482:	464e      	mov	r6, r9
 8007484:	4632      	mov	r2, r6
 8007486:	4641      	mov	r1, r8
 8007488:	6820      	ldr	r0, [r4, #0]
 800748a:	f000 fa9e 	bl	80079ca <memmove>
 800748e:	68a3      	ldr	r3, [r4, #8]
 8007490:	1b9b      	subs	r3, r3, r6
 8007492:	60a3      	str	r3, [r4, #8]
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	441e      	add	r6, r3
 8007498:	6026      	str	r6, [r4, #0]
 800749a:	2000      	movs	r0, #0
 800749c:	e7dc      	b.n	8007458 <__ssputs_r+0x58>
 800749e:	462a      	mov	r2, r5
 80074a0:	f000 faac 	bl	80079fc <_realloc_r>
 80074a4:	4606      	mov	r6, r0
 80074a6:	2800      	cmp	r0, #0
 80074a8:	d1e2      	bne.n	8007470 <__ssputs_r+0x70>
 80074aa:	6921      	ldr	r1, [r4, #16]
 80074ac:	4650      	mov	r0, sl
 80074ae:	f7ff fecd 	bl	800724c <_free_r>
 80074b2:	e7c8      	b.n	8007446 <__ssputs_r+0x46>

080074b4 <_svfiprintf_r>:
 80074b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b8:	461d      	mov	r5, r3
 80074ba:	898b      	ldrh	r3, [r1, #12]
 80074bc:	061f      	lsls	r7, r3, #24
 80074be:	b09d      	sub	sp, #116	; 0x74
 80074c0:	4680      	mov	r8, r0
 80074c2:	460c      	mov	r4, r1
 80074c4:	4616      	mov	r6, r2
 80074c6:	d50f      	bpl.n	80074e8 <_svfiprintf_r+0x34>
 80074c8:	690b      	ldr	r3, [r1, #16]
 80074ca:	b96b      	cbnz	r3, 80074e8 <_svfiprintf_r+0x34>
 80074cc:	2140      	movs	r1, #64	; 0x40
 80074ce:	f7ff ff0b 	bl	80072e8 <_malloc_r>
 80074d2:	6020      	str	r0, [r4, #0]
 80074d4:	6120      	str	r0, [r4, #16]
 80074d6:	b928      	cbnz	r0, 80074e4 <_svfiprintf_r+0x30>
 80074d8:	230c      	movs	r3, #12
 80074da:	f8c8 3000 	str.w	r3, [r8]
 80074de:	f04f 30ff 	mov.w	r0, #4294967295
 80074e2:	e0c8      	b.n	8007676 <_svfiprintf_r+0x1c2>
 80074e4:	2340      	movs	r3, #64	; 0x40
 80074e6:	6163      	str	r3, [r4, #20]
 80074e8:	2300      	movs	r3, #0
 80074ea:	9309      	str	r3, [sp, #36]	; 0x24
 80074ec:	2320      	movs	r3, #32
 80074ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074f2:	2330      	movs	r3, #48	; 0x30
 80074f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074f8:	9503      	str	r5, [sp, #12]
 80074fa:	f04f 0b01 	mov.w	fp, #1
 80074fe:	4637      	mov	r7, r6
 8007500:	463d      	mov	r5, r7
 8007502:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007506:	b10b      	cbz	r3, 800750c <_svfiprintf_r+0x58>
 8007508:	2b25      	cmp	r3, #37	; 0x25
 800750a:	d13e      	bne.n	800758a <_svfiprintf_r+0xd6>
 800750c:	ebb7 0a06 	subs.w	sl, r7, r6
 8007510:	d00b      	beq.n	800752a <_svfiprintf_r+0x76>
 8007512:	4653      	mov	r3, sl
 8007514:	4632      	mov	r2, r6
 8007516:	4621      	mov	r1, r4
 8007518:	4640      	mov	r0, r8
 800751a:	f7ff ff71 	bl	8007400 <__ssputs_r>
 800751e:	3001      	adds	r0, #1
 8007520:	f000 80a4 	beq.w	800766c <_svfiprintf_r+0x1b8>
 8007524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007526:	4453      	add	r3, sl
 8007528:	9309      	str	r3, [sp, #36]	; 0x24
 800752a:	783b      	ldrb	r3, [r7, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	f000 809d 	beq.w	800766c <_svfiprintf_r+0x1b8>
 8007532:	2300      	movs	r3, #0
 8007534:	f04f 32ff 	mov.w	r2, #4294967295
 8007538:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800753c:	9304      	str	r3, [sp, #16]
 800753e:	9307      	str	r3, [sp, #28]
 8007540:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007544:	931a      	str	r3, [sp, #104]	; 0x68
 8007546:	462f      	mov	r7, r5
 8007548:	2205      	movs	r2, #5
 800754a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800754e:	4850      	ldr	r0, [pc, #320]	; (8007690 <_svfiprintf_r+0x1dc>)
 8007550:	f7f8 fe6e 	bl	8000230 <memchr>
 8007554:	9b04      	ldr	r3, [sp, #16]
 8007556:	b9d0      	cbnz	r0, 800758e <_svfiprintf_r+0xda>
 8007558:	06d9      	lsls	r1, r3, #27
 800755a:	bf44      	itt	mi
 800755c:	2220      	movmi	r2, #32
 800755e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007562:	071a      	lsls	r2, r3, #28
 8007564:	bf44      	itt	mi
 8007566:	222b      	movmi	r2, #43	; 0x2b
 8007568:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800756c:	782a      	ldrb	r2, [r5, #0]
 800756e:	2a2a      	cmp	r2, #42	; 0x2a
 8007570:	d015      	beq.n	800759e <_svfiprintf_r+0xea>
 8007572:	9a07      	ldr	r2, [sp, #28]
 8007574:	462f      	mov	r7, r5
 8007576:	2000      	movs	r0, #0
 8007578:	250a      	movs	r5, #10
 800757a:	4639      	mov	r1, r7
 800757c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007580:	3b30      	subs	r3, #48	; 0x30
 8007582:	2b09      	cmp	r3, #9
 8007584:	d94d      	bls.n	8007622 <_svfiprintf_r+0x16e>
 8007586:	b1b8      	cbz	r0, 80075b8 <_svfiprintf_r+0x104>
 8007588:	e00f      	b.n	80075aa <_svfiprintf_r+0xf6>
 800758a:	462f      	mov	r7, r5
 800758c:	e7b8      	b.n	8007500 <_svfiprintf_r+0x4c>
 800758e:	4a40      	ldr	r2, [pc, #256]	; (8007690 <_svfiprintf_r+0x1dc>)
 8007590:	1a80      	subs	r0, r0, r2
 8007592:	fa0b f000 	lsl.w	r0, fp, r0
 8007596:	4318      	orrs	r0, r3
 8007598:	9004      	str	r0, [sp, #16]
 800759a:	463d      	mov	r5, r7
 800759c:	e7d3      	b.n	8007546 <_svfiprintf_r+0x92>
 800759e:	9a03      	ldr	r2, [sp, #12]
 80075a0:	1d11      	adds	r1, r2, #4
 80075a2:	6812      	ldr	r2, [r2, #0]
 80075a4:	9103      	str	r1, [sp, #12]
 80075a6:	2a00      	cmp	r2, #0
 80075a8:	db01      	blt.n	80075ae <_svfiprintf_r+0xfa>
 80075aa:	9207      	str	r2, [sp, #28]
 80075ac:	e004      	b.n	80075b8 <_svfiprintf_r+0x104>
 80075ae:	4252      	negs	r2, r2
 80075b0:	f043 0302 	orr.w	r3, r3, #2
 80075b4:	9207      	str	r2, [sp, #28]
 80075b6:	9304      	str	r3, [sp, #16]
 80075b8:	783b      	ldrb	r3, [r7, #0]
 80075ba:	2b2e      	cmp	r3, #46	; 0x2e
 80075bc:	d10c      	bne.n	80075d8 <_svfiprintf_r+0x124>
 80075be:	787b      	ldrb	r3, [r7, #1]
 80075c0:	2b2a      	cmp	r3, #42	; 0x2a
 80075c2:	d133      	bne.n	800762c <_svfiprintf_r+0x178>
 80075c4:	9b03      	ldr	r3, [sp, #12]
 80075c6:	1d1a      	adds	r2, r3, #4
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	9203      	str	r2, [sp, #12]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	bfb8      	it	lt
 80075d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80075d4:	3702      	adds	r7, #2
 80075d6:	9305      	str	r3, [sp, #20]
 80075d8:	4d2e      	ldr	r5, [pc, #184]	; (8007694 <_svfiprintf_r+0x1e0>)
 80075da:	7839      	ldrb	r1, [r7, #0]
 80075dc:	2203      	movs	r2, #3
 80075de:	4628      	mov	r0, r5
 80075e0:	f7f8 fe26 	bl	8000230 <memchr>
 80075e4:	b138      	cbz	r0, 80075f6 <_svfiprintf_r+0x142>
 80075e6:	2340      	movs	r3, #64	; 0x40
 80075e8:	1b40      	subs	r0, r0, r5
 80075ea:	fa03 f000 	lsl.w	r0, r3, r0
 80075ee:	9b04      	ldr	r3, [sp, #16]
 80075f0:	4303      	orrs	r3, r0
 80075f2:	3701      	adds	r7, #1
 80075f4:	9304      	str	r3, [sp, #16]
 80075f6:	7839      	ldrb	r1, [r7, #0]
 80075f8:	4827      	ldr	r0, [pc, #156]	; (8007698 <_svfiprintf_r+0x1e4>)
 80075fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075fe:	2206      	movs	r2, #6
 8007600:	1c7e      	adds	r6, r7, #1
 8007602:	f7f8 fe15 	bl	8000230 <memchr>
 8007606:	2800      	cmp	r0, #0
 8007608:	d038      	beq.n	800767c <_svfiprintf_r+0x1c8>
 800760a:	4b24      	ldr	r3, [pc, #144]	; (800769c <_svfiprintf_r+0x1e8>)
 800760c:	bb13      	cbnz	r3, 8007654 <_svfiprintf_r+0x1a0>
 800760e:	9b03      	ldr	r3, [sp, #12]
 8007610:	3307      	adds	r3, #7
 8007612:	f023 0307 	bic.w	r3, r3, #7
 8007616:	3308      	adds	r3, #8
 8007618:	9303      	str	r3, [sp, #12]
 800761a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800761c:	444b      	add	r3, r9
 800761e:	9309      	str	r3, [sp, #36]	; 0x24
 8007620:	e76d      	b.n	80074fe <_svfiprintf_r+0x4a>
 8007622:	fb05 3202 	mla	r2, r5, r2, r3
 8007626:	2001      	movs	r0, #1
 8007628:	460f      	mov	r7, r1
 800762a:	e7a6      	b.n	800757a <_svfiprintf_r+0xc6>
 800762c:	2300      	movs	r3, #0
 800762e:	3701      	adds	r7, #1
 8007630:	9305      	str	r3, [sp, #20]
 8007632:	4619      	mov	r1, r3
 8007634:	250a      	movs	r5, #10
 8007636:	4638      	mov	r0, r7
 8007638:	f810 2b01 	ldrb.w	r2, [r0], #1
 800763c:	3a30      	subs	r2, #48	; 0x30
 800763e:	2a09      	cmp	r2, #9
 8007640:	d903      	bls.n	800764a <_svfiprintf_r+0x196>
 8007642:	2b00      	cmp	r3, #0
 8007644:	d0c8      	beq.n	80075d8 <_svfiprintf_r+0x124>
 8007646:	9105      	str	r1, [sp, #20]
 8007648:	e7c6      	b.n	80075d8 <_svfiprintf_r+0x124>
 800764a:	fb05 2101 	mla	r1, r5, r1, r2
 800764e:	2301      	movs	r3, #1
 8007650:	4607      	mov	r7, r0
 8007652:	e7f0      	b.n	8007636 <_svfiprintf_r+0x182>
 8007654:	ab03      	add	r3, sp, #12
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	4622      	mov	r2, r4
 800765a:	4b11      	ldr	r3, [pc, #68]	; (80076a0 <_svfiprintf_r+0x1ec>)
 800765c:	a904      	add	r1, sp, #16
 800765e:	4640      	mov	r0, r8
 8007660:	f3af 8000 	nop.w
 8007664:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007668:	4681      	mov	r9, r0
 800766a:	d1d6      	bne.n	800761a <_svfiprintf_r+0x166>
 800766c:	89a3      	ldrh	r3, [r4, #12]
 800766e:	065b      	lsls	r3, r3, #25
 8007670:	f53f af35 	bmi.w	80074de <_svfiprintf_r+0x2a>
 8007674:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007676:	b01d      	add	sp, #116	; 0x74
 8007678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800767c:	ab03      	add	r3, sp, #12
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	4622      	mov	r2, r4
 8007682:	4b07      	ldr	r3, [pc, #28]	; (80076a0 <_svfiprintf_r+0x1ec>)
 8007684:	a904      	add	r1, sp, #16
 8007686:	4640      	mov	r0, r8
 8007688:	f000 f882 	bl	8007790 <_printf_i>
 800768c:	e7ea      	b.n	8007664 <_svfiprintf_r+0x1b0>
 800768e:	bf00      	nop
 8007690:	08007aa0 	.word	0x08007aa0
 8007694:	08007aa6 	.word	0x08007aa6
 8007698:	08007aaa 	.word	0x08007aaa
 800769c:	00000000 	.word	0x00000000
 80076a0:	08007401 	.word	0x08007401

080076a4 <_printf_common>:
 80076a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076a8:	4691      	mov	r9, r2
 80076aa:	461f      	mov	r7, r3
 80076ac:	688a      	ldr	r2, [r1, #8]
 80076ae:	690b      	ldr	r3, [r1, #16]
 80076b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076b4:	4293      	cmp	r3, r2
 80076b6:	bfb8      	it	lt
 80076b8:	4613      	movlt	r3, r2
 80076ba:	f8c9 3000 	str.w	r3, [r9]
 80076be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076c2:	4606      	mov	r6, r0
 80076c4:	460c      	mov	r4, r1
 80076c6:	b112      	cbz	r2, 80076ce <_printf_common+0x2a>
 80076c8:	3301      	adds	r3, #1
 80076ca:	f8c9 3000 	str.w	r3, [r9]
 80076ce:	6823      	ldr	r3, [r4, #0]
 80076d0:	0699      	lsls	r1, r3, #26
 80076d2:	bf42      	ittt	mi
 80076d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80076d8:	3302      	addmi	r3, #2
 80076da:	f8c9 3000 	strmi.w	r3, [r9]
 80076de:	6825      	ldr	r5, [r4, #0]
 80076e0:	f015 0506 	ands.w	r5, r5, #6
 80076e4:	d107      	bne.n	80076f6 <_printf_common+0x52>
 80076e6:	f104 0a19 	add.w	sl, r4, #25
 80076ea:	68e3      	ldr	r3, [r4, #12]
 80076ec:	f8d9 2000 	ldr.w	r2, [r9]
 80076f0:	1a9b      	subs	r3, r3, r2
 80076f2:	42ab      	cmp	r3, r5
 80076f4:	dc28      	bgt.n	8007748 <_printf_common+0xa4>
 80076f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80076fa:	6822      	ldr	r2, [r4, #0]
 80076fc:	3300      	adds	r3, #0
 80076fe:	bf18      	it	ne
 8007700:	2301      	movne	r3, #1
 8007702:	0692      	lsls	r2, r2, #26
 8007704:	d42d      	bmi.n	8007762 <_printf_common+0xbe>
 8007706:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800770a:	4639      	mov	r1, r7
 800770c:	4630      	mov	r0, r6
 800770e:	47c0      	blx	r8
 8007710:	3001      	adds	r0, #1
 8007712:	d020      	beq.n	8007756 <_printf_common+0xb2>
 8007714:	6823      	ldr	r3, [r4, #0]
 8007716:	68e5      	ldr	r5, [r4, #12]
 8007718:	f8d9 2000 	ldr.w	r2, [r9]
 800771c:	f003 0306 	and.w	r3, r3, #6
 8007720:	2b04      	cmp	r3, #4
 8007722:	bf08      	it	eq
 8007724:	1aad      	subeq	r5, r5, r2
 8007726:	68a3      	ldr	r3, [r4, #8]
 8007728:	6922      	ldr	r2, [r4, #16]
 800772a:	bf0c      	ite	eq
 800772c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007730:	2500      	movne	r5, #0
 8007732:	4293      	cmp	r3, r2
 8007734:	bfc4      	itt	gt
 8007736:	1a9b      	subgt	r3, r3, r2
 8007738:	18ed      	addgt	r5, r5, r3
 800773a:	f04f 0900 	mov.w	r9, #0
 800773e:	341a      	adds	r4, #26
 8007740:	454d      	cmp	r5, r9
 8007742:	d11a      	bne.n	800777a <_printf_common+0xd6>
 8007744:	2000      	movs	r0, #0
 8007746:	e008      	b.n	800775a <_printf_common+0xb6>
 8007748:	2301      	movs	r3, #1
 800774a:	4652      	mov	r2, sl
 800774c:	4639      	mov	r1, r7
 800774e:	4630      	mov	r0, r6
 8007750:	47c0      	blx	r8
 8007752:	3001      	adds	r0, #1
 8007754:	d103      	bne.n	800775e <_printf_common+0xba>
 8007756:	f04f 30ff 	mov.w	r0, #4294967295
 800775a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800775e:	3501      	adds	r5, #1
 8007760:	e7c3      	b.n	80076ea <_printf_common+0x46>
 8007762:	18e1      	adds	r1, r4, r3
 8007764:	1c5a      	adds	r2, r3, #1
 8007766:	2030      	movs	r0, #48	; 0x30
 8007768:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800776c:	4422      	add	r2, r4
 800776e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007772:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007776:	3302      	adds	r3, #2
 8007778:	e7c5      	b.n	8007706 <_printf_common+0x62>
 800777a:	2301      	movs	r3, #1
 800777c:	4622      	mov	r2, r4
 800777e:	4639      	mov	r1, r7
 8007780:	4630      	mov	r0, r6
 8007782:	47c0      	blx	r8
 8007784:	3001      	adds	r0, #1
 8007786:	d0e6      	beq.n	8007756 <_printf_common+0xb2>
 8007788:	f109 0901 	add.w	r9, r9, #1
 800778c:	e7d8      	b.n	8007740 <_printf_common+0x9c>
	...

08007790 <_printf_i>:
 8007790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007794:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007798:	460c      	mov	r4, r1
 800779a:	7e09      	ldrb	r1, [r1, #24]
 800779c:	b085      	sub	sp, #20
 800779e:	296e      	cmp	r1, #110	; 0x6e
 80077a0:	4617      	mov	r7, r2
 80077a2:	4606      	mov	r6, r0
 80077a4:	4698      	mov	r8, r3
 80077a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077a8:	f000 80b3 	beq.w	8007912 <_printf_i+0x182>
 80077ac:	d822      	bhi.n	80077f4 <_printf_i+0x64>
 80077ae:	2963      	cmp	r1, #99	; 0x63
 80077b0:	d036      	beq.n	8007820 <_printf_i+0x90>
 80077b2:	d80a      	bhi.n	80077ca <_printf_i+0x3a>
 80077b4:	2900      	cmp	r1, #0
 80077b6:	f000 80b9 	beq.w	800792c <_printf_i+0x19c>
 80077ba:	2958      	cmp	r1, #88	; 0x58
 80077bc:	f000 8083 	beq.w	80078c6 <_printf_i+0x136>
 80077c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80077c8:	e032      	b.n	8007830 <_printf_i+0xa0>
 80077ca:	2964      	cmp	r1, #100	; 0x64
 80077cc:	d001      	beq.n	80077d2 <_printf_i+0x42>
 80077ce:	2969      	cmp	r1, #105	; 0x69
 80077d0:	d1f6      	bne.n	80077c0 <_printf_i+0x30>
 80077d2:	6820      	ldr	r0, [r4, #0]
 80077d4:	6813      	ldr	r3, [r2, #0]
 80077d6:	0605      	lsls	r5, r0, #24
 80077d8:	f103 0104 	add.w	r1, r3, #4
 80077dc:	d52a      	bpl.n	8007834 <_printf_i+0xa4>
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6011      	str	r1, [r2, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	da03      	bge.n	80077ee <_printf_i+0x5e>
 80077e6:	222d      	movs	r2, #45	; 0x2d
 80077e8:	425b      	negs	r3, r3
 80077ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80077ee:	486f      	ldr	r0, [pc, #444]	; (80079ac <_printf_i+0x21c>)
 80077f0:	220a      	movs	r2, #10
 80077f2:	e039      	b.n	8007868 <_printf_i+0xd8>
 80077f4:	2973      	cmp	r1, #115	; 0x73
 80077f6:	f000 809d 	beq.w	8007934 <_printf_i+0x1a4>
 80077fa:	d808      	bhi.n	800780e <_printf_i+0x7e>
 80077fc:	296f      	cmp	r1, #111	; 0x6f
 80077fe:	d020      	beq.n	8007842 <_printf_i+0xb2>
 8007800:	2970      	cmp	r1, #112	; 0x70
 8007802:	d1dd      	bne.n	80077c0 <_printf_i+0x30>
 8007804:	6823      	ldr	r3, [r4, #0]
 8007806:	f043 0320 	orr.w	r3, r3, #32
 800780a:	6023      	str	r3, [r4, #0]
 800780c:	e003      	b.n	8007816 <_printf_i+0x86>
 800780e:	2975      	cmp	r1, #117	; 0x75
 8007810:	d017      	beq.n	8007842 <_printf_i+0xb2>
 8007812:	2978      	cmp	r1, #120	; 0x78
 8007814:	d1d4      	bne.n	80077c0 <_printf_i+0x30>
 8007816:	2378      	movs	r3, #120	; 0x78
 8007818:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800781c:	4864      	ldr	r0, [pc, #400]	; (80079b0 <_printf_i+0x220>)
 800781e:	e055      	b.n	80078cc <_printf_i+0x13c>
 8007820:	6813      	ldr	r3, [r2, #0]
 8007822:	1d19      	adds	r1, r3, #4
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	6011      	str	r1, [r2, #0]
 8007828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800782c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007830:	2301      	movs	r3, #1
 8007832:	e08c      	b.n	800794e <_printf_i+0x1be>
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	6011      	str	r1, [r2, #0]
 8007838:	f010 0f40 	tst.w	r0, #64	; 0x40
 800783c:	bf18      	it	ne
 800783e:	b21b      	sxthne	r3, r3
 8007840:	e7cf      	b.n	80077e2 <_printf_i+0x52>
 8007842:	6813      	ldr	r3, [r2, #0]
 8007844:	6825      	ldr	r5, [r4, #0]
 8007846:	1d18      	adds	r0, r3, #4
 8007848:	6010      	str	r0, [r2, #0]
 800784a:	0628      	lsls	r0, r5, #24
 800784c:	d501      	bpl.n	8007852 <_printf_i+0xc2>
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	e002      	b.n	8007858 <_printf_i+0xc8>
 8007852:	0668      	lsls	r0, r5, #25
 8007854:	d5fb      	bpl.n	800784e <_printf_i+0xbe>
 8007856:	881b      	ldrh	r3, [r3, #0]
 8007858:	4854      	ldr	r0, [pc, #336]	; (80079ac <_printf_i+0x21c>)
 800785a:	296f      	cmp	r1, #111	; 0x6f
 800785c:	bf14      	ite	ne
 800785e:	220a      	movne	r2, #10
 8007860:	2208      	moveq	r2, #8
 8007862:	2100      	movs	r1, #0
 8007864:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007868:	6865      	ldr	r5, [r4, #4]
 800786a:	60a5      	str	r5, [r4, #8]
 800786c:	2d00      	cmp	r5, #0
 800786e:	f2c0 8095 	blt.w	800799c <_printf_i+0x20c>
 8007872:	6821      	ldr	r1, [r4, #0]
 8007874:	f021 0104 	bic.w	r1, r1, #4
 8007878:	6021      	str	r1, [r4, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d13d      	bne.n	80078fa <_printf_i+0x16a>
 800787e:	2d00      	cmp	r5, #0
 8007880:	f040 808e 	bne.w	80079a0 <_printf_i+0x210>
 8007884:	4665      	mov	r5, ip
 8007886:	2a08      	cmp	r2, #8
 8007888:	d10b      	bne.n	80078a2 <_printf_i+0x112>
 800788a:	6823      	ldr	r3, [r4, #0]
 800788c:	07db      	lsls	r3, r3, #31
 800788e:	d508      	bpl.n	80078a2 <_printf_i+0x112>
 8007890:	6923      	ldr	r3, [r4, #16]
 8007892:	6862      	ldr	r2, [r4, #4]
 8007894:	429a      	cmp	r2, r3
 8007896:	bfde      	ittt	le
 8007898:	2330      	movle	r3, #48	; 0x30
 800789a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800789e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80078a2:	ebac 0305 	sub.w	r3, ip, r5
 80078a6:	6123      	str	r3, [r4, #16]
 80078a8:	f8cd 8000 	str.w	r8, [sp]
 80078ac:	463b      	mov	r3, r7
 80078ae:	aa03      	add	r2, sp, #12
 80078b0:	4621      	mov	r1, r4
 80078b2:	4630      	mov	r0, r6
 80078b4:	f7ff fef6 	bl	80076a4 <_printf_common>
 80078b8:	3001      	adds	r0, #1
 80078ba:	d14d      	bne.n	8007958 <_printf_i+0x1c8>
 80078bc:	f04f 30ff 	mov.w	r0, #4294967295
 80078c0:	b005      	add	sp, #20
 80078c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078c6:	4839      	ldr	r0, [pc, #228]	; (80079ac <_printf_i+0x21c>)
 80078c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80078cc:	6813      	ldr	r3, [r2, #0]
 80078ce:	6821      	ldr	r1, [r4, #0]
 80078d0:	1d1d      	adds	r5, r3, #4
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	6015      	str	r5, [r2, #0]
 80078d6:	060a      	lsls	r2, r1, #24
 80078d8:	d50b      	bpl.n	80078f2 <_printf_i+0x162>
 80078da:	07ca      	lsls	r2, r1, #31
 80078dc:	bf44      	itt	mi
 80078de:	f041 0120 	orrmi.w	r1, r1, #32
 80078e2:	6021      	strmi	r1, [r4, #0]
 80078e4:	b91b      	cbnz	r3, 80078ee <_printf_i+0x15e>
 80078e6:	6822      	ldr	r2, [r4, #0]
 80078e8:	f022 0220 	bic.w	r2, r2, #32
 80078ec:	6022      	str	r2, [r4, #0]
 80078ee:	2210      	movs	r2, #16
 80078f0:	e7b7      	b.n	8007862 <_printf_i+0xd2>
 80078f2:	064d      	lsls	r5, r1, #25
 80078f4:	bf48      	it	mi
 80078f6:	b29b      	uxthmi	r3, r3
 80078f8:	e7ef      	b.n	80078da <_printf_i+0x14a>
 80078fa:	4665      	mov	r5, ip
 80078fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007900:	fb02 3311 	mls	r3, r2, r1, r3
 8007904:	5cc3      	ldrb	r3, [r0, r3]
 8007906:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800790a:	460b      	mov	r3, r1
 800790c:	2900      	cmp	r1, #0
 800790e:	d1f5      	bne.n	80078fc <_printf_i+0x16c>
 8007910:	e7b9      	b.n	8007886 <_printf_i+0xf6>
 8007912:	6813      	ldr	r3, [r2, #0]
 8007914:	6825      	ldr	r5, [r4, #0]
 8007916:	6961      	ldr	r1, [r4, #20]
 8007918:	1d18      	adds	r0, r3, #4
 800791a:	6010      	str	r0, [r2, #0]
 800791c:	0628      	lsls	r0, r5, #24
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	d501      	bpl.n	8007926 <_printf_i+0x196>
 8007922:	6019      	str	r1, [r3, #0]
 8007924:	e002      	b.n	800792c <_printf_i+0x19c>
 8007926:	066a      	lsls	r2, r5, #25
 8007928:	d5fb      	bpl.n	8007922 <_printf_i+0x192>
 800792a:	8019      	strh	r1, [r3, #0]
 800792c:	2300      	movs	r3, #0
 800792e:	6123      	str	r3, [r4, #16]
 8007930:	4665      	mov	r5, ip
 8007932:	e7b9      	b.n	80078a8 <_printf_i+0x118>
 8007934:	6813      	ldr	r3, [r2, #0]
 8007936:	1d19      	adds	r1, r3, #4
 8007938:	6011      	str	r1, [r2, #0]
 800793a:	681d      	ldr	r5, [r3, #0]
 800793c:	6862      	ldr	r2, [r4, #4]
 800793e:	2100      	movs	r1, #0
 8007940:	4628      	mov	r0, r5
 8007942:	f7f8 fc75 	bl	8000230 <memchr>
 8007946:	b108      	cbz	r0, 800794c <_printf_i+0x1bc>
 8007948:	1b40      	subs	r0, r0, r5
 800794a:	6060      	str	r0, [r4, #4]
 800794c:	6863      	ldr	r3, [r4, #4]
 800794e:	6123      	str	r3, [r4, #16]
 8007950:	2300      	movs	r3, #0
 8007952:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007956:	e7a7      	b.n	80078a8 <_printf_i+0x118>
 8007958:	6923      	ldr	r3, [r4, #16]
 800795a:	462a      	mov	r2, r5
 800795c:	4639      	mov	r1, r7
 800795e:	4630      	mov	r0, r6
 8007960:	47c0      	blx	r8
 8007962:	3001      	adds	r0, #1
 8007964:	d0aa      	beq.n	80078bc <_printf_i+0x12c>
 8007966:	6823      	ldr	r3, [r4, #0]
 8007968:	079b      	lsls	r3, r3, #30
 800796a:	d413      	bmi.n	8007994 <_printf_i+0x204>
 800796c:	68e0      	ldr	r0, [r4, #12]
 800796e:	9b03      	ldr	r3, [sp, #12]
 8007970:	4298      	cmp	r0, r3
 8007972:	bfb8      	it	lt
 8007974:	4618      	movlt	r0, r3
 8007976:	e7a3      	b.n	80078c0 <_printf_i+0x130>
 8007978:	2301      	movs	r3, #1
 800797a:	464a      	mov	r2, r9
 800797c:	4639      	mov	r1, r7
 800797e:	4630      	mov	r0, r6
 8007980:	47c0      	blx	r8
 8007982:	3001      	adds	r0, #1
 8007984:	d09a      	beq.n	80078bc <_printf_i+0x12c>
 8007986:	3501      	adds	r5, #1
 8007988:	68e3      	ldr	r3, [r4, #12]
 800798a:	9a03      	ldr	r2, [sp, #12]
 800798c:	1a9b      	subs	r3, r3, r2
 800798e:	42ab      	cmp	r3, r5
 8007990:	dcf2      	bgt.n	8007978 <_printf_i+0x1e8>
 8007992:	e7eb      	b.n	800796c <_printf_i+0x1dc>
 8007994:	2500      	movs	r5, #0
 8007996:	f104 0919 	add.w	r9, r4, #25
 800799a:	e7f5      	b.n	8007988 <_printf_i+0x1f8>
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1ac      	bne.n	80078fa <_printf_i+0x16a>
 80079a0:	7803      	ldrb	r3, [r0, #0]
 80079a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079aa:	e76c      	b.n	8007886 <_printf_i+0xf6>
 80079ac:	08007ab1 	.word	0x08007ab1
 80079b0:	08007ac2 	.word	0x08007ac2

080079b4 <memcpy>:
 80079b4:	b510      	push	{r4, lr}
 80079b6:	1e43      	subs	r3, r0, #1
 80079b8:	440a      	add	r2, r1
 80079ba:	4291      	cmp	r1, r2
 80079bc:	d100      	bne.n	80079c0 <memcpy+0xc>
 80079be:	bd10      	pop	{r4, pc}
 80079c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079c8:	e7f7      	b.n	80079ba <memcpy+0x6>

080079ca <memmove>:
 80079ca:	4288      	cmp	r0, r1
 80079cc:	b510      	push	{r4, lr}
 80079ce:	eb01 0302 	add.w	r3, r1, r2
 80079d2:	d807      	bhi.n	80079e4 <memmove+0x1a>
 80079d4:	1e42      	subs	r2, r0, #1
 80079d6:	4299      	cmp	r1, r3
 80079d8:	d00a      	beq.n	80079f0 <memmove+0x26>
 80079da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079de:	f802 4f01 	strb.w	r4, [r2, #1]!
 80079e2:	e7f8      	b.n	80079d6 <memmove+0xc>
 80079e4:	4283      	cmp	r3, r0
 80079e6:	d9f5      	bls.n	80079d4 <memmove+0xa>
 80079e8:	1881      	adds	r1, r0, r2
 80079ea:	1ad2      	subs	r2, r2, r3
 80079ec:	42d3      	cmn	r3, r2
 80079ee:	d100      	bne.n	80079f2 <memmove+0x28>
 80079f0:	bd10      	pop	{r4, pc}
 80079f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079f6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80079fa:	e7f7      	b.n	80079ec <memmove+0x22>

080079fc <_realloc_r>:
 80079fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fe:	4607      	mov	r7, r0
 8007a00:	4614      	mov	r4, r2
 8007a02:	460e      	mov	r6, r1
 8007a04:	b921      	cbnz	r1, 8007a10 <_realloc_r+0x14>
 8007a06:	4611      	mov	r1, r2
 8007a08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007a0c:	f7ff bc6c 	b.w	80072e8 <_malloc_r>
 8007a10:	b922      	cbnz	r2, 8007a1c <_realloc_r+0x20>
 8007a12:	f7ff fc1b 	bl	800724c <_free_r>
 8007a16:	4625      	mov	r5, r4
 8007a18:	4628      	mov	r0, r5
 8007a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a1c:	f000 f814 	bl	8007a48 <_malloc_usable_size_r>
 8007a20:	42a0      	cmp	r0, r4
 8007a22:	d20f      	bcs.n	8007a44 <_realloc_r+0x48>
 8007a24:	4621      	mov	r1, r4
 8007a26:	4638      	mov	r0, r7
 8007a28:	f7ff fc5e 	bl	80072e8 <_malloc_r>
 8007a2c:	4605      	mov	r5, r0
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	d0f2      	beq.n	8007a18 <_realloc_r+0x1c>
 8007a32:	4631      	mov	r1, r6
 8007a34:	4622      	mov	r2, r4
 8007a36:	f7ff ffbd 	bl	80079b4 <memcpy>
 8007a3a:	4631      	mov	r1, r6
 8007a3c:	4638      	mov	r0, r7
 8007a3e:	f7ff fc05 	bl	800724c <_free_r>
 8007a42:	e7e9      	b.n	8007a18 <_realloc_r+0x1c>
 8007a44:	4635      	mov	r5, r6
 8007a46:	e7e7      	b.n	8007a18 <_realloc_r+0x1c>

08007a48 <_malloc_usable_size_r>:
 8007a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a4c:	1f18      	subs	r0, r3, #4
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	bfbc      	itt	lt
 8007a52:	580b      	ldrlt	r3, [r1, r0]
 8007a54:	18c0      	addlt	r0, r0, r3
 8007a56:	4770      	bx	lr

08007a58 <_init>:
 8007a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a5a:	bf00      	nop
 8007a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a5e:	bc08      	pop	{r3}
 8007a60:	469e      	mov	lr, r3
 8007a62:	4770      	bx	lr

08007a64 <_fini>:
 8007a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a66:	bf00      	nop
 8007a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a6a:	bc08      	pop	{r3}
 8007a6c:	469e      	mov	lr, r3
 8007a6e:	4770      	bx	lr
