
stm32f7-drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098fc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08009adc  08009adc  00019adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b48  08009b48  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08009b48  08009b48  00019b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b50  08009b50  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b50  08009b50  00019b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b54  08009b54  00019b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000530  20000078  08009bd0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  08009bd0  000205a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016205  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b6c  00000000  00000000  000362ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012e8  00000000  00000000  00038e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001180  00000000  00000000  0003a108  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004667  00000000  00000000  0003b288  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f8c2  00000000  00000000  0003f8ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e22ed  00000000  00000000  0004f1b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013149e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005394  00000000  00000000  0013151c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009ac4 	.word	0x08009ac4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	08009ac4 	.word	0x08009ac4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_d2uiz>:
 8000abc:	004a      	lsls	r2, r1, #1
 8000abe:	d211      	bcs.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac4:	d211      	bcs.n	8000aea <__aeabi_d2uiz+0x2e>
 8000ac6:	d50d      	bpl.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad0:	d40e      	bmi.n	8000af0 <__aeabi_d2uiz+0x34>
 8000ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d102      	bne.n	8000af6 <__aeabi_d2uiz+0x3a>
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	4770      	bx	lr
 8000af6:	f04f 0000 	mov.w	r0, #0
 8000afa:	4770      	bx	lr

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b972 	b.w	8000df8 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9e08      	ldr	r6, [sp, #32]
 8000b32:	4604      	mov	r4, r0
 8000b34:	4688      	mov	r8, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d14b      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3a:	428a      	cmp	r2, r1
 8000b3c:	4615      	mov	r5, r2
 8000b3e:	d967      	bls.n	8000c10 <__udivmoddi4+0xe4>
 8000b40:	fab2 f282 	clz	r2, r2
 8000b44:	b14a      	cbz	r2, 8000b5a <__udivmoddi4+0x2e>
 8000b46:	f1c2 0720 	rsb	r7, r2, #32
 8000b4a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b4e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b52:	4095      	lsls	r5, r2
 8000b54:	ea47 0803 	orr.w	r8, r7, r3
 8000b58:	4094      	lsls	r4, r2
 8000b5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b5e:	0c23      	lsrs	r3, r4, #16
 8000b60:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b64:	fa1f fc85 	uxth.w	ip, r5
 8000b68:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b6c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b70:	fb07 f10c 	mul.w	r1, r7, ip
 8000b74:	4299      	cmp	r1, r3
 8000b76:	d909      	bls.n	8000b8c <__udivmoddi4+0x60>
 8000b78:	18eb      	adds	r3, r5, r3
 8000b7a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b7e:	f080 811b 	bcs.w	8000db8 <__udivmoddi4+0x28c>
 8000b82:	4299      	cmp	r1, r3
 8000b84:	f240 8118 	bls.w	8000db8 <__udivmoddi4+0x28c>
 8000b88:	3f02      	subs	r7, #2
 8000b8a:	442b      	add	r3, r5
 8000b8c:	1a5b      	subs	r3, r3, r1
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b94:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b9c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba0:	45a4      	cmp	ip, r4
 8000ba2:	d909      	bls.n	8000bb8 <__udivmoddi4+0x8c>
 8000ba4:	192c      	adds	r4, r5, r4
 8000ba6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000baa:	f080 8107 	bcs.w	8000dbc <__udivmoddi4+0x290>
 8000bae:	45a4      	cmp	ip, r4
 8000bb0:	f240 8104 	bls.w	8000dbc <__udivmoddi4+0x290>
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	442c      	add	r4, r5
 8000bb8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bbc:	eba4 040c 	sub.w	r4, r4, ip
 8000bc0:	2700      	movs	r7, #0
 8000bc2:	b11e      	cbz	r6, 8000bcc <__udivmoddi4+0xa0>
 8000bc4:	40d4      	lsrs	r4, r2
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bcc:	4639      	mov	r1, r7
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d909      	bls.n	8000bea <__udivmoddi4+0xbe>
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	f000 80eb 	beq.w	8000db2 <__udivmoddi4+0x286>
 8000bdc:	2700      	movs	r7, #0
 8000bde:	e9c6 0100 	strd	r0, r1, [r6]
 8000be2:	4638      	mov	r0, r7
 8000be4:	4639      	mov	r1, r7
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	fab3 f783 	clz	r7, r3
 8000bee:	2f00      	cmp	r7, #0
 8000bf0:	d147      	bne.n	8000c82 <__udivmoddi4+0x156>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d302      	bcc.n	8000bfc <__udivmoddi4+0xd0>
 8000bf6:	4282      	cmp	r2, r0
 8000bf8:	f200 80fa 	bhi.w	8000df0 <__udivmoddi4+0x2c4>
 8000bfc:	1a84      	subs	r4, r0, r2
 8000bfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000c02:	2001      	movs	r0, #1
 8000c04:	4698      	mov	r8, r3
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	d0e0      	beq.n	8000bcc <__udivmoddi4+0xa0>
 8000c0a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c0e:	e7dd      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000c10:	b902      	cbnz	r2, 8000c14 <__udivmoddi4+0xe8>
 8000c12:	deff      	udf	#255	; 0xff
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	f040 808f 	bne.w	8000d3c <__udivmoddi4+0x210>
 8000c1e:	1b49      	subs	r1, r1, r5
 8000c20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c24:	fa1f f885 	uxth.w	r8, r5
 8000c28:	2701      	movs	r7, #1
 8000c2a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c2e:	0c23      	lsrs	r3, r4, #16
 8000c30:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c38:	fb08 f10c 	mul.w	r1, r8, ip
 8000c3c:	4299      	cmp	r1, r3
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x124>
 8000c40:	18eb      	adds	r3, r5, r3
 8000c42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x122>
 8000c48:	4299      	cmp	r1, r3
 8000c4a:	f200 80cd 	bhi.w	8000de8 <__udivmoddi4+0x2bc>
 8000c4e:	4684      	mov	ip, r0
 8000c50:	1a59      	subs	r1, r3, r1
 8000c52:	b2a3      	uxth	r3, r4
 8000c54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c58:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c5c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c60:	fb08 f800 	mul.w	r8, r8, r0
 8000c64:	45a0      	cmp	r8, r4
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0x14c>
 8000c68:	192c      	adds	r4, r5, r4
 8000c6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x14a>
 8000c70:	45a0      	cmp	r8, r4
 8000c72:	f200 80b6 	bhi.w	8000de2 <__udivmoddi4+0x2b6>
 8000c76:	4618      	mov	r0, r3
 8000c78:	eba4 0408 	sub.w	r4, r4, r8
 8000c7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c80:	e79f      	b.n	8000bc2 <__udivmoddi4+0x96>
 8000c82:	f1c7 0c20 	rsb	ip, r7, #32
 8000c86:	40bb      	lsls	r3, r7
 8000c88:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c8c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c90:	fa01 f407 	lsl.w	r4, r1, r7
 8000c94:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c98:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c9c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca0:	4325      	orrs	r5, r4
 8000ca2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ca6:	0c2c      	lsrs	r4, r5, #16
 8000ca8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cac:	fa1f fa8e 	uxth.w	sl, lr
 8000cb0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cb8:	429c      	cmp	r4, r3
 8000cba:	fa02 f207 	lsl.w	r2, r2, r7
 8000cbe:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc2:	d90b      	bls.n	8000cdc <__udivmoddi4+0x1b0>
 8000cc4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ccc:	f080 8087 	bcs.w	8000dde <__udivmoddi4+0x2b2>
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	f240 8084 	bls.w	8000dde <__udivmoddi4+0x2b2>
 8000cd6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cda:	4473      	add	r3, lr
 8000cdc:	1b1b      	subs	r3, r3, r4
 8000cde:	b2ad      	uxth	r5, r5
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cec:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf0:	45a2      	cmp	sl, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x1da>
 8000cf4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	d26b      	bcs.n	8000dd6 <__udivmoddi4+0x2aa>
 8000cfe:	45a2      	cmp	sl, r4
 8000d00:	d969      	bls.n	8000dd6 <__udivmoddi4+0x2aa>
 8000d02:	3802      	subs	r0, #2
 8000d04:	4474      	add	r4, lr
 8000d06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d0e:	eba4 040a 	sub.w	r4, r4, sl
 8000d12:	454c      	cmp	r4, r9
 8000d14:	46c2      	mov	sl, r8
 8000d16:	464b      	mov	r3, r9
 8000d18:	d354      	bcc.n	8000dc4 <__udivmoddi4+0x298>
 8000d1a:	d051      	beq.n	8000dc0 <__udivmoddi4+0x294>
 8000d1c:	2e00      	cmp	r6, #0
 8000d1e:	d069      	beq.n	8000df4 <__udivmoddi4+0x2c8>
 8000d20:	ebb1 050a 	subs.w	r5, r1, sl
 8000d24:	eb64 0403 	sbc.w	r4, r4, r3
 8000d28:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d2c:	40fd      	lsrs	r5, r7
 8000d2e:	40fc      	lsrs	r4, r7
 8000d30:	ea4c 0505 	orr.w	r5, ip, r5
 8000d34:	e9c6 5400 	strd	r5, r4, [r6]
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e747      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f703 	lsr.w	r7, r0, r3
 8000d44:	4095      	lsls	r5, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d52:	4338      	orrs	r0, r7
 8000d54:	0c01      	lsrs	r1, r0, #16
 8000d56:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5a:	fa1f f885 	uxth.w	r8, r5
 8000d5e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d66:	fb07 f308 	mul.w	r3, r7, r8
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d70:	d907      	bls.n	8000d82 <__udivmoddi4+0x256>
 8000d72:	1869      	adds	r1, r5, r1
 8000d74:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d78:	d22f      	bcs.n	8000dda <__udivmoddi4+0x2ae>
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d92d      	bls.n	8000dda <__udivmoddi4+0x2ae>
 8000d7e:	3f02      	subs	r7, #2
 8000d80:	4429      	add	r1, r5
 8000d82:	1acb      	subs	r3, r1, r3
 8000d84:	b281      	uxth	r1, r0
 8000d86:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d92:	fb00 f308 	mul.w	r3, r0, r8
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x27e>
 8000d9a:	1869      	adds	r1, r5, r1
 8000d9c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da0:	d217      	bcs.n	8000dd2 <__udivmoddi4+0x2a6>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d915      	bls.n	8000dd2 <__udivmoddi4+0x2a6>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4429      	add	r1, r5
 8000daa:	1ac9      	subs	r1, r1, r3
 8000dac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db0:	e73b      	b.n	8000c2a <__udivmoddi4+0xfe>
 8000db2:	4637      	mov	r7, r6
 8000db4:	4630      	mov	r0, r6
 8000db6:	e709      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000db8:	4607      	mov	r7, r0
 8000dba:	e6e7      	b.n	8000b8c <__udivmoddi4+0x60>
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	e6fb      	b.n	8000bb8 <__udivmoddi4+0x8c>
 8000dc0:	4541      	cmp	r1, r8
 8000dc2:	d2ab      	bcs.n	8000d1c <__udivmoddi4+0x1f0>
 8000dc4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dc8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dcc:	3801      	subs	r0, #1
 8000dce:	4613      	mov	r3, r2
 8000dd0:	e7a4      	b.n	8000d1c <__udivmoddi4+0x1f0>
 8000dd2:	4660      	mov	r0, ip
 8000dd4:	e7e9      	b.n	8000daa <__udivmoddi4+0x27e>
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	e795      	b.n	8000d06 <__udivmoddi4+0x1da>
 8000dda:	4667      	mov	r7, ip
 8000ddc:	e7d1      	b.n	8000d82 <__udivmoddi4+0x256>
 8000dde:	4681      	mov	r9, r0
 8000de0:	e77c      	b.n	8000cdc <__udivmoddi4+0x1b0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	442c      	add	r4, r5
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0x14c>
 8000de8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dec:	442b      	add	r3, r5
 8000dee:	e72f      	b.n	8000c50 <__udivmoddi4+0x124>
 8000df0:	4638      	mov	r0, r7
 8000df2:	e708      	b.n	8000c06 <__udivmoddi4+0xda>
 8000df4:	4637      	mov	r7, r6
 8000df6:	e6e9      	b.n	8000bcc <__udivmoddi4+0xa0>

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <ESC_INIT>:
#if defined(DSHOT150) || defined(DSHOT300) || defined(DSHOT600) || defined(DSHOT1200)

#define __DSHOT_CONSUME_BIT(__DSHOT_BYTE__, __BIT__) (__DSHOT_BYTE__ = (((__BIT__ & 0b1) == 0b1) ? DSHOT_HIGH_BIT : DSHOT_LOW_BIT))

ESC_CONTROLLER* ESC_INIT(TIM_HandleTypeDef** dmaTickTimers, TIM_HandleTypeDef* pwmTimer, DMA_HandleTypeDef** dmaHandlers)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
	dmaTickTimers[0]->Instance->ARR = TIMER_ARR - 1; 	// htim4 ARR, synchronize timer that control DMA requests
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000e12:	62da      	str	r2, [r3, #44]	; 0x2c
	dmaTickTimers[1]->Instance->ARR = TIMER_ARR - 1; 	// htim5 ARR, synchronize timer that control DMA requests
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	3304      	adds	r3, #4
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000e20:	62da      	str	r2, [r3, #44]	; 0x2c
	pwmTimer->Instance->ARR = TIMER_ARR - 1;		 		// htim3 ARR, synchronize timer that control DMA requests
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000e2a:	62da      	str	r2, [r3, #44]	; 0x2c
	// Enable DMA requests on CH1 and CH2
	dmaTickTimers[0]->Instance->DIER = TIM_DIER_CC1DE | TIM_DIER_CC2DE | TIM_DIER_CC3DE;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 8000e36:	60da      	str	r2, [r3, #12]
	dmaTickTimers[1]->Instance->DIER = TIM_DIER_CC1DE | TIM_DIER_CC2DE;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	3304      	adds	r3, #4
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000e44:	60da      	str	r2, [r3, #12]
	HAL_TIM_PWM_Start(dmaTickTimers[0], TIM_CHANNEL_1);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f005 ff1b 	bl	8006c88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(dmaTickTimers[0], TIM_CHANNEL_2);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2104      	movs	r1, #4
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f005 ff15 	bl	8006c88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(dmaTickTimers[0], TIM_CHANNEL_3);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2108      	movs	r1, #8
 8000e64:	4618      	mov	r0, r3
 8000e66:	f005 ff0f 	bl	8006c88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(dmaTickTimers[1], TIM_CHANNEL_2);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2104      	movs	r1, #4
 8000e72:	4618      	mov	r0, r3
 8000e74:	f005 ff08 	bl	8006c88 <HAL_TIM_PWM_Start>
	int bytes = sizeof(ESC_CONTROLLER)*ESC_COUNT;
 8000e78:	f44f 6314 	mov.w	r3, #2368	; 0x940
 8000e7c:	61bb      	str	r3, [r7, #24]
	ESC_CONTROLLER* escSet = malloc(bytes);
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f008 fa07 	bl	8009294 <malloc>
 8000e86:	4603      	mov	r3, r0
 8000e88:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < ESC_COUNT; i++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e8e:	e044      	b.n	8000f1a <ESC_INIT+0x11e>
	{
		escSet->Throttle[i] = 0;
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e94:	2100      	movs	r1, #0
 8000e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int j = 0; j < DSHOT_PACKET_SIZE; j++) escSet->ThrottleDshot[i][j] = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	623b      	str	r3, [r7, #32]
 8000e9e:	e00b      	b.n	8000eb8 <ESC_INIT+0xbc>
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ea4:	0151      	lsls	r1, r2, #5
 8000ea6:	6a3a      	ldr	r2, [r7, #32]
 8000ea8:	440a      	add	r2, r1
 8000eaa:	3204      	adds	r2, #4
 8000eac:	2100      	movs	r1, #0
 8000eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000eb2:	6a3b      	ldr	r3, [r7, #32]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	623b      	str	r3, [r7, #32]
 8000eb8:	6a3b      	ldr	r3, [r7, #32]
 8000eba:	2b1f      	cmp	r3, #31
 8000ebc:	ddf0      	ble.n	8000ea0 <ESC_INIT+0xa4>
		escSet->Channel[i] = 4*i;
 8000ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ec8:	3284      	adds	r2, #132	; 0x84
 8000eca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		escSet->Timer[i] = pwmTimer;
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ed2:	3288      	adds	r2, #136	; 0x88
 8000ed4:	68b9      	ldr	r1, [r7, #8]
 8000ed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		escSet->DMA[i] = dmaHandlers[i];
 8000eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	6819      	ldr	r1, [r3, #0]
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ee8:	328c      	adds	r2, #140	; 0x8c
 8000eea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 		escSet->CCR[i] = &(pwmTimer->Instance->CCR1) + i;
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8000ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	18d1      	adds	r1, r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f00:	3290      	adds	r2, #144	; 0x90
 8000f02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		*escSet->CCR[i] = 0;
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f0a:	3290      	adds	r2, #144	; 0x90
 8000f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < ESC_COUNT; i++)
 8000f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f16:	3301      	adds	r3, #1
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	ddb7      	ble.n	8000e90 <ESC_INIT+0x94>
	}
	for (int i = 0; i < ESC_COUNT; i++)
 8000f20:	2300      	movs	r3, #0
 8000f22:	61fb      	str	r3, [r7, #28]
 8000f24:	e01f      	b.n	8000f66 <ESC_INIT+0x16a>
	{
		HAL_TIM_PWM_Start(pwmTimer, escSet->Channel[i]);
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	69fa      	ldr	r2, [r7, #28]
 8000f2a:	3284      	adds	r2, #132	; 0x84
 8000f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f30:	4619      	mov	r1, r3
 8000f32:	68b8      	ldr	r0, [r7, #8]
 8000f34:	f005 fea8 	bl	8006c88 <HAL_TIM_PWM_Start>
		HAL_DMA_Start_IT(escSet->DMA[i], (uint32_t) &escSet->ThrottleDshot[i],
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	69fa      	ldr	r2, [r7, #28]
 8000f3c:	328c      	adds	r2, #140	; 0x8c
 8000f3e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	01db      	lsls	r3, r3, #7
 8000f46:	3310      	adds	r3, #16
 8000f48:	697a      	ldr	r2, [r7, #20]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4619      	mov	r1, r3
								(uint32_t) escSet->CCR[i], DSHOT_PACKET_SIZE);
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	69fa      	ldr	r2, [r7, #28]
 8000f52:	3290      	adds	r2, #144	; 0x90
 8000f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
		HAL_DMA_Start_IT(escSet->DMA[i], (uint32_t) &escSet->ThrottleDshot[i],
 8000f58:	461a      	mov	r2, r3
 8000f5a:	2320      	movs	r3, #32
 8000f5c:	f002 fd3c 	bl	80039d8 <HAL_DMA_Start_IT>
	for (int i = 0; i < ESC_COUNT; i++)
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	3301      	adds	r3, #1
 8000f64:	61fb      	str	r3, [r7, #28]
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	2b03      	cmp	r3, #3
 8000f6a:	dddc      	ble.n	8000f26 <ESC_INIT+0x12a>
	}
	return escSet;
 8000f6c:	697b      	ldr	r3, [r7, #20]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3728      	adds	r7, #40	; 0x28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <makeDshotPacketBytes>:

uint16_t makeDshotPacketBytes(uint32_t value, uint8_t telemBit)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b087      	sub	sp, #28
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	460b      	mov	r3, r1
 8000f80:	70fb      	strb	r3, [r7, #3]
	uint16_t packet = (value << 1) | telemBit;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	78fb      	ldrb	r3, [r7, #3]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	817b      	strh	r3, [r7, #10]
	int csum = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
	int csumData = packet;
 8000f96:	897b      	ldrh	r3, [r7, #10]
 8000f98:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 3; i++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	e009      	b.n	8000fb4 <makeDshotPacketBytes+0x3e>
	{
		csum ^= csumData; // xor data by nibbles
 8000fa0:	697a      	ldr	r2, [r7, #20]
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	4053      	eors	r3, r2
 8000fa6:	617b      	str	r3, [r7, #20]
		csumData >>= 4;
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	111b      	asrs	r3, r3, #4
 8000fac:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 3; i++)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	ddf2      	ble.n	8000fa0 <makeDshotPacketBytes+0x2a>
	}
	csum &= 0xf;
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	f003 030f 	and.w	r3, r3, #15
 8000fc0:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 8000fc2:	897b      	ldrh	r3, [r7, #10]
 8000fc4:	011b      	lsls	r3, r3, #4
 8000fc6:	b21a      	sxth	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b21b      	sxth	r3, r3
 8000fd0:	817b      	strh	r3, [r7, #10]
	return packet;
 8000fd2:	897b      	ldrh	r3, [r7, #10]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	371c      	adds	r7, #28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <DSHOT_SEND_PACKET>:

void DSHOT_SEND_PACKET(ESC_CONTROLLER* escSet, uint32_t data, uint32_t telemBit, uint32_t motorNum)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b0a6      	sub	sp, #152	; 0x98
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
 8000fec:	603b      	str	r3, [r7, #0]
	uint16_t dshotBytes = makeDshotPacketBytes(data, telemBit);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	68b8      	ldr	r0, [r7, #8]
 8000ff6:	f7ff ffbe 	bl	8000f76 <makeDshotPacketBytes>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	// 17th bit is to set CCR to 0 to keep it low between packets
	uint32_t dshotPacket[DSHOT_PACKET_SIZE] = {0};
 8001000:	f107 0310 	add.w	r3, r7, #16
 8001004:	2280      	movs	r2, #128	; 0x80
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f008 f956 	bl	80092ba <memset>
	// Populate checksum bits
	for (int i = 15; i >= 0; i--)
 800100e:	230f      	movs	r3, #15
 8001010:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001014:	e01c      	b.n	8001050 <DSHOT_SEND_PACKET+0x70>
	{
		__DSHOT_CONSUME_BIT(dshotPacket[i], dshotBytes);
 8001016:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	2b00      	cmp	r3, #0
 8001020:	d002      	beq.n	8001028 <DSHOT_SEND_PACKET+0x48>
 8001022:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8001026:	e001      	b.n	800102c <DSHOT_SEND_PACKET+0x4c>
 8001028:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800102c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001036:	440b      	add	r3, r1
 8001038:	f843 2c88 	str.w	r2, [r3, #-136]
		dshotBytes >>= 1;
 800103c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001040:	085b      	lsrs	r3, r3, #1
 8001042:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	for (int i = 15; i >= 0; i--)
 8001046:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800104a:	3b01      	subs	r3, #1
 800104c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001050:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001054:	2b00      	cmp	r3, #0
 8001056:	dade      	bge.n	8001016 <DSHOT_SEND_PACKET+0x36>
	}
	switch(motorNum) {
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	2b08      	cmp	r3, #8
 800105c:	f200 80a7 	bhi.w	80011ae <DSHOT_SEND_PACKET+0x1ce>
 8001060:	a201      	add	r2, pc, #4	; (adr r2, 8001068 <DSHOT_SEND_PACKET+0x88>)
 8001062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001066:	bf00      	nop
 8001068:	0800108d 	.word	0x0800108d
 800106c:	0800109f 	.word	0x0800109f
 8001070:	080010b1 	.word	0x080010b1
 8001074:	080010c5 	.word	0x080010c5
 8001078:	080010d9 	.word	0x080010d9
 800107c:	080010fd 	.word	0x080010fd
 8001080:	08001121 	.word	0x08001121
 8001084:	08001143 	.word	0x08001143
 8001088:	08001169 	.word	0x08001169
		case (FRONT_LEFT_MOTOR):
			memcpy(escSet->ThrottleDshot[0], dshotPacket, sizeof(dshotPacket));
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	3310      	adds	r3, #16
 8001090:	f107 0110 	add.w	r1, r7, #16
 8001094:	2280      	movs	r2, #128	; 0x80
 8001096:	4618      	mov	r0, r3
 8001098:	f008 f904 	bl	80092a4 <memcpy>
			break;
 800109c:	e087      	b.n	80011ae <DSHOT_SEND_PACKET+0x1ce>
		case (FRONT_RIGHT_MOTOR):
			memcpy(escSet->ThrottleDshot[1], dshotPacket, sizeof(dshotPacket));
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3390      	adds	r3, #144	; 0x90
 80010a2:	f107 0110 	add.w	r1, r7, #16
 80010a6:	2280      	movs	r2, #128	; 0x80
 80010a8:	4618      	mov	r0, r3
 80010aa:	f008 f8fb 	bl	80092a4 <memcpy>
			break;
 80010ae:	e07e      	b.n	80011ae <DSHOT_SEND_PACKET+0x1ce>
		case (BACK_LEFT_MOTOR):
			memcpy(escSet->ThrottleDshot[2], dshotPacket, sizeof(dshotPacket));
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80010b6:	f107 0110 	add.w	r1, r7, #16
 80010ba:	2280      	movs	r2, #128	; 0x80
 80010bc:	4618      	mov	r0, r3
 80010be:	f008 f8f1 	bl	80092a4 <memcpy>
			break;
 80010c2:	e074      	b.n	80011ae <DSHOT_SEND_PACKET+0x1ce>
		case (BACK_RIGHT_MOTOR):
			memcpy(escSet->ThrottleDshot[3], dshotPacket, sizeof(dshotPacket));
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80010ca:	f107 0110 	add.w	r1, r7, #16
 80010ce:	2280      	movs	r2, #128	; 0x80
 80010d0:	4618      	mov	r0, r3
 80010d2:	f008 f8e7 	bl	80092a4 <memcpy>
			break;
 80010d6:	e06a      	b.n	80011ae <DSHOT_SEND_PACKET+0x1ce>
		case (LEFT_SIDE_MOTORS):
			memcpy(escSet->ThrottleDshot[0], dshotPacket, sizeof(dshotPacket));
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	3310      	adds	r3, #16
 80010dc:	f107 0110 	add.w	r1, r7, #16
 80010e0:	2280      	movs	r2, #128	; 0x80
 80010e2:	4618      	mov	r0, r3
 80010e4:	f008 f8de 	bl	80092a4 <memcpy>
			memcpy(escSet->ThrottleDshot[2], dshotPacket, sizeof(dshotPacket));
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80010ee:	f107 0110 	add.w	r1, r7, #16
 80010f2:	2280      	movs	r2, #128	; 0x80
 80010f4:	4618      	mov	r0, r3
 80010f6:	f008 f8d5 	bl	80092a4 <memcpy>
			break;
 80010fa:	e058      	b.n	80011ae <DSHOT_SEND_PACKET+0x1ce>
		case (RIGHT_SIDE_MOTORS):
			memcpy(escSet->ThrottleDshot[1], dshotPacket, sizeof(dshotPacket));
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	3390      	adds	r3, #144	; 0x90
 8001100:	f107 0110 	add.w	r1, r7, #16
 8001104:	2280      	movs	r2, #128	; 0x80
 8001106:	4618      	mov	r0, r3
 8001108:	f008 f8cc 	bl	80092a4 <memcpy>
			memcpy(escSet->ThrottleDshot[3], dshotPacket, sizeof(dshotPacket));
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001112:	f107 0110 	add.w	r1, r7, #16
 8001116:	2280      	movs	r2, #128	; 0x80
 8001118:	4618      	mov	r0, r3
 800111a:	f008 f8c3 	bl	80092a4 <memcpy>
			break;
 800111e:	e046      	b.n	80011ae <DSHOT_SEND_PACKET+0x1ce>
		case (FRONT_SIDE_MOTORS):
			memcpy(escSet->ThrottleDshot[0], dshotPacket, sizeof(dshotPacket));
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3310      	adds	r3, #16
 8001124:	f107 0110 	add.w	r1, r7, #16
 8001128:	2280      	movs	r2, #128	; 0x80
 800112a:	4618      	mov	r0, r3
 800112c:	f008 f8ba 	bl	80092a4 <memcpy>
			memcpy(escSet->ThrottleDshot[1], dshotPacket, sizeof(dshotPacket));
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	3390      	adds	r3, #144	; 0x90
 8001134:	f107 0110 	add.w	r1, r7, #16
 8001138:	2280      	movs	r2, #128	; 0x80
 800113a:	4618      	mov	r0, r3
 800113c:	f008 f8b2 	bl	80092a4 <memcpy>
			break;
 8001140:	e035      	b.n	80011ae <DSHOT_SEND_PACKET+0x1ce>
		case (BACK_SIDE_MOTORS):
			memcpy(escSet->ThrottleDshot[2], dshotPacket, sizeof(dshotPacket));
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001148:	f107 0110 	add.w	r1, r7, #16
 800114c:	2280      	movs	r2, #128	; 0x80
 800114e:	4618      	mov	r0, r3
 8001150:	f008 f8a8 	bl	80092a4 <memcpy>
			memcpy(escSet->ThrottleDshot[3], dshotPacket, sizeof(dshotPacket));
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800115a:	f107 0110 	add.w	r1, r7, #16
 800115e:	2280      	movs	r2, #128	; 0x80
 8001160:	4618      	mov	r0, r3
 8001162:	f008 f89f 	bl	80092a4 <memcpy>
			break;
 8001166:	e022      	b.n	80011ae <DSHOT_SEND_PACKET+0x1ce>
		case (ALL_MOTORS):
			memcpy(escSet->ThrottleDshot[0], dshotPacket, sizeof(dshotPacket));
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	3310      	adds	r3, #16
 800116c:	f107 0110 	add.w	r1, r7, #16
 8001170:	2280      	movs	r2, #128	; 0x80
 8001172:	4618      	mov	r0, r3
 8001174:	f008 f896 	bl	80092a4 <memcpy>
			memcpy(escSet->ThrottleDshot[1], dshotPacket, sizeof(dshotPacket));
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	3390      	adds	r3, #144	; 0x90
 800117c:	f107 0110 	add.w	r1, r7, #16
 8001180:	2280      	movs	r2, #128	; 0x80
 8001182:	4618      	mov	r0, r3
 8001184:	f008 f88e 	bl	80092a4 <memcpy>
			memcpy(escSet->ThrottleDshot[2], dshotPacket, sizeof(dshotPacket));
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800118e:	f107 0110 	add.w	r1, r7, #16
 8001192:	2280      	movs	r2, #128	; 0x80
 8001194:	4618      	mov	r0, r3
 8001196:	f008 f885 	bl	80092a4 <memcpy>
			memcpy(escSet->ThrottleDshot[3], dshotPacket, sizeof(dshotPacket));
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80011a0:	f107 0110 	add.w	r1, r7, #16
 80011a4:	2280      	movs	r2, #128	; 0x80
 80011a6:	4618      	mov	r0, r3
 80011a8:	f008 f87c 	bl	80092a4 <memcpy>
			break;
 80011ac:	bf00      	nop
	}
}
 80011ae:	bf00      	nop
 80011b0:	3798      	adds	r7, #152	; 0x98
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop

080011b8 <ESC_UPDATE_THROTTLE>:

void ESC_UPDATE_THROTTLE(ESC_CONTROLLER* escSet)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	// Throttle cannot exceed 11 bits, so max value is 2047
	DSHOT_SEND_PACKET(escSet, escSet->Throttle[0], 0, FRONT_LEFT_MOTOR);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6819      	ldr	r1, [r3, #0]
 80011c4:	2300      	movs	r3, #0
 80011c6:	2200      	movs	r2, #0
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff ff09 	bl	8000fe0 <DSHOT_SEND_PACKET>
	DSHOT_SEND_PACKET(escSet, escSet->Throttle[1], 0, FRONT_RIGHT_MOTOR);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6859      	ldr	r1, [r3, #4]
 80011d2:	2301      	movs	r3, #1
 80011d4:	2200      	movs	r2, #0
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ff02 	bl	8000fe0 <DSHOT_SEND_PACKET>
	DSHOT_SEND_PACKET(escSet, escSet->Throttle[2], 0, BACK_LEFT_MOTOR);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6899      	ldr	r1, [r3, #8]
 80011e0:	2302      	movs	r3, #2
 80011e2:	2200      	movs	r2, #0
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff fefb 	bl	8000fe0 <DSHOT_SEND_PACKET>
	DSHOT_SEND_PACKET(escSet, escSet->Throttle[3], 0, BACK_RIGHT_MOTOR);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68d9      	ldr	r1, [r3, #12]
 80011ee:	2303      	movs	r3, #3
 80011f0:	2200      	movs	r2, #0
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff fef4 	bl	8000fe0 <DSHOT_SEND_PACKET>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <ESC_SEND_CMD>:

// TO DO: Commands often times do not save, need to figure out why.
// If I increase how many times it loops this send cmd then it's more likely to work.
void ESC_SEND_CMD(ESC_CONTROLLER* escSet, uint32_t cmd, uint32_t motorNum)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08c      	sub	sp, #48	; 0x30
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
	// Need to set telemetry bit to 1 if either of these commands are sent
	if (cmd == 	DSHOT_CMD_SPIN_DIRECTION_NORMAL)
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	2b14      	cmp	r3, #20
 8001210:	d110      	bne.n	8001234 <ESC_SEND_CMD+0x34>
	{
		for (int i = 0; i < 1000; i++) DSHOT_SEND_PACKET(escSet, cmd, 1, motorNum);
 8001212:	2300      	movs	r3, #0
 8001214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001216:	e008      	b.n	800122a <ESC_SEND_CMD+0x2a>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2201      	movs	r2, #1
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f7ff fede 	bl	8000fe0 <DSHOT_SEND_PACKET>
 8001224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001226:	3301      	adds	r3, #1
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800122a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001230:	dbf2      	blt.n	8001218 <ESC_SEND_CMD+0x18>
 8001232:	e073      	b.n	800131c <ESC_SEND_CMD+0x11c>
	}
	else if (cmd == DSHOT_CMD_SPIN_DIRECTION_REVERSED)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	2b15      	cmp	r3, #21
 8001238:	d110      	bne.n	800125c <ESC_SEND_CMD+0x5c>
	{
		for (int i = 0; i < 1000; i++) DSHOT_SEND_PACKET(escSet, cmd, 1, motorNum);
 800123a:	2300      	movs	r3, #0
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
 800123e:	e008      	b.n	8001252 <ESC_SEND_CMD+0x52>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2201      	movs	r2, #1
 8001244:	68b9      	ldr	r1, [r7, #8]
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f7ff feca 	bl	8000fe0 <DSHOT_SEND_PACKET>
 800124c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124e:	3301      	adds	r3, #1
 8001250:	62bb      	str	r3, [r7, #40]	; 0x28
 8001252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001254:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001258:	dbf2      	blt.n	8001240 <ESC_SEND_CMD+0x40>
 800125a:	e05f      	b.n	800131c <ESC_SEND_CMD+0x11c>
	}
	else if (cmd == DSHOT_CMD_3D_MODE_ON)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	2b0a      	cmp	r3, #10
 8001260:	d110      	bne.n	8001284 <ESC_SEND_CMD+0x84>
	{
		for (int i = 0; i < 1000; i++) DSHOT_SEND_PACKET(escSet, cmd, 1, motorNum);
 8001262:	2300      	movs	r3, #0
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
 8001266:	e008      	b.n	800127a <ESC_SEND_CMD+0x7a>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2201      	movs	r2, #1
 800126c:	68b9      	ldr	r1, [r7, #8]
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f7ff feb6 	bl	8000fe0 <DSHOT_SEND_PACKET>
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	3301      	adds	r3, #1
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001280:	dbf2      	blt.n	8001268 <ESC_SEND_CMD+0x68>
 8001282:	e04b      	b.n	800131c <ESC_SEND_CMD+0x11c>
	}
	else if (cmd == DSHOT_CMD_3D_MODE_OFF)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	2b09      	cmp	r3, #9
 8001288:	d110      	bne.n	80012ac <ESC_SEND_CMD+0xac>
	{
		for (int i = 0; i < 1000; i++) DSHOT_SEND_PACKET(escSet, cmd, 1, motorNum);
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
 800128e:	e008      	b.n	80012a2 <ESC_SEND_CMD+0xa2>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2201      	movs	r2, #1
 8001294:	68b9      	ldr	r1, [r7, #8]
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f7ff fea2 	bl	8000fe0 <DSHOT_SEND_PACKET>
 800129c:	6a3b      	ldr	r3, [r7, #32]
 800129e:	3301      	adds	r3, #1
 80012a0:	623b      	str	r3, [r7, #32]
 80012a2:	6a3b      	ldr	r3, [r7, #32]
 80012a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012a8:	dbf2      	blt.n	8001290 <ESC_SEND_CMD+0x90>
 80012aa:	e037      	b.n	800131c <ESC_SEND_CMD+0x11c>
	}
	else if (cmd == DSHOT_CMD_SPIN_DIRECTION_1)
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	2b07      	cmp	r3, #7
 80012b0:	d110      	bne.n	80012d4 <ESC_SEND_CMD+0xd4>
	{
		for (int i = 0; i < 1000; i++) DSHOT_SEND_PACKET(escSet, cmd, 1, motorNum);
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
 80012b6:	e008      	b.n	80012ca <ESC_SEND_CMD+0xca>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2201      	movs	r2, #1
 80012bc:	68b9      	ldr	r1, [r7, #8]
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f7ff fe8e 	bl	8000fe0 <DSHOT_SEND_PACKET>
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	3301      	adds	r3, #1
 80012c8:	61fb      	str	r3, [r7, #28]
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012d0:	dbf2      	blt.n	80012b8 <ESC_SEND_CMD+0xb8>
 80012d2:	e023      	b.n	800131c <ESC_SEND_CMD+0x11c>
	}
	else if (cmd == DSHOT_CMD_SPIN_DIRECTION_2)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d110      	bne.n	80012fc <ESC_SEND_CMD+0xfc>
	{
		for (int i = 0; i < 1000; i++) DSHOT_SEND_PACKET(escSet, cmd, 1, motorNum);
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]
 80012de:	e008      	b.n	80012f2 <ESC_SEND_CMD+0xf2>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2201      	movs	r2, #1
 80012e4:	68b9      	ldr	r1, [r7, #8]
 80012e6:	68f8      	ldr	r0, [r7, #12]
 80012e8:	f7ff fe7a 	bl	8000fe0 <DSHOT_SEND_PACKET>
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	3301      	adds	r3, #1
 80012f0:	61bb      	str	r3, [r7, #24]
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012f8:	dbf2      	blt.n	80012e0 <ESC_SEND_CMD+0xe0>
 80012fa:	e00f      	b.n	800131c <ESC_SEND_CMD+0x11c>
	}
	else
	{
		for (int i = 0; i < 1000; i++) DSHOT_SEND_PACKET(escSet, cmd, 1, motorNum);
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	e008      	b.n	8001314 <ESC_SEND_CMD+0x114>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2201      	movs	r2, #1
 8001306:	68b9      	ldr	r1, [r7, #8]
 8001308:	68f8      	ldr	r0, [r7, #12]
 800130a:	f7ff fe69 	bl	8000fe0 <DSHOT_SEND_PACKET>
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	3301      	adds	r3, #1
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800131a:	dbf2      	blt.n	8001302 <ESC_SEND_CMD+0x102>
	}
	for (int i = 0; i < 1000; i++) DSHOT_SEND_PACKET(escSet, DSHOT_CMD_SAVE_SETTINGS, 1, motorNum);
 800131c:	2300      	movs	r3, #0
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	e008      	b.n	8001334 <ESC_SEND_CMD+0x134>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2201      	movs	r2, #1
 8001326:	210c      	movs	r1, #12
 8001328:	68f8      	ldr	r0, [r7, #12]
 800132a:	f7ff fe59 	bl	8000fe0 <DSHOT_SEND_PACKET>
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	3301      	adds	r3, #1
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800133a:	dbf2      	blt.n	8001322 <ESC_SEND_CMD+0x122>
}
 800133c:	bf00      	nop
 800133e:	3730      	adds	r7, #48	; 0x30
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	0000      	movs	r0, r0
	...

08001348 <ESC_CALC_THROTTLE>:

void ESC_CALC_THROTTLE(ESC_CONTROLLER* escSet, RX_CONTROLLER* thisRX, uint8_t armed)
{
 8001348:	b590      	push	{r4, r7, lr}
 800134a:	b08f      	sub	sp, #60	; 0x3c
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	4613      	mov	r3, r2
 8001354:	71fb      	strb	r3, [r7, #7]
	if (armed)
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	2b00      	cmp	r3, #0
 800135a:	f000 81a3 	beq.w	80016a4 <ESC_CALC_THROTTLE+0x35c>
	{
		// Initiate array containing set of throttle values for motors
		MOTOR_THROTTLES motorSet;
		// Set the base throttle of each motor to the throttle stick value
		motorSet.FrontLeft = thisRX->throttle;
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	613b      	str	r3, [r7, #16]
		motorSet.FrontRight = thisRX->throttle;
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	617b      	str	r3, [r7, #20]
		motorSet.BackLeft = thisRX->throttle;
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	61bb      	str	r3, [r7, #24]
		motorSet.BackRight = thisRX->throttle;
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	61fb      	str	r3, [r7, #28]
		// Back side increases throttle if pitching forward, front side decreases
		if (thisRX->pitch > XYZ_NEUTRAL_VALUE)
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f240 4204 	movw	r2, #1028	; 0x404
 800137e:	4293      	cmp	r3, r2
 8001380:	d932      	bls.n	80013e8 <ESC_CALC_THROTTLE+0xa0>
		{
			uint32_t addVal = (thisRX->pitch - XYZ_NEUTRAL_VALUE) * SENSITIVITY_CONST;
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff f8e2 	bl	8000554 <__aeabi_ui2d>
 8001390:	a3cd      	add	r3, pc, #820	; (adr r3, 80016c8 <ESC_CALC_THROTTLE+0x380>)
 8001392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001396:	f7ff f957 	bl	8000648 <__aeabi_dmul>
 800139a:	4603      	mov	r3, r0
 800139c:	460c      	mov	r4, r1
 800139e:	4618      	mov	r0, r3
 80013a0:	4621      	mov	r1, r4
 80013a2:	f7ff fb8b 	bl	8000abc <__aeabi_d2uiz>
 80013a6:	4603      	mov	r3, r0
 80013a8:	633b      	str	r3, [r7, #48]	; 0x30
			if (motorSet.FrontLeft > addVal) motorSet.FrontLeft -= addVal;
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d204      	bcs.n	80013bc <ESC_CALC_THROTTLE+0x74>
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	e001      	b.n	80013c0 <ESC_CALC_THROTTLE+0x78>
			else motorSet.FrontLeft = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]
			if (motorSet.FrontRight > addVal) motorSet.FrontRight  -= addVal;
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d204      	bcs.n	80013d2 <ESC_CALC_THROTTLE+0x8a>
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	e001      	b.n	80013d6 <ESC_CALC_THROTTLE+0x8e>
			else motorSet.FrontRight  = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
			motorSet.BackLeft += addVal;
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013da:	4413      	add	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
			motorSet.BackRight += addVal;
 80013de:	69fa      	ldr	r2, [r7, #28]
 80013e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013e2:	4413      	add	r3, r2
 80013e4:	61fb      	str	r3, [r7, #28]
 80013e6:	e038      	b.n	800145a <ESC_CALC_THROTTLE+0x112>
		}
		// Front side increases throttle pitching backward, back side decreases
		else if (thisRX->pitch < XYZ_NEUTRAL_VALUE)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f240 4203 	movw	r2, #1027	; 0x403
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d832      	bhi.n	800145a <ESC_CALC_THROTTLE+0x112>
		{
			uint32_t addVal = (XYZ_NEUTRAL_VALUE - thisRX->pitch) * SENSITIVITY_CONST;
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	f240 4304 	movw	r3, #1028	; 0x404
 80013fc:	1a9b      	subs	r3, r3, r2
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f8a8 	bl	8000554 <__aeabi_ui2d>
 8001404:	a3b0      	add	r3, pc, #704	; (adr r3, 80016c8 <ESC_CALC_THROTTLE+0x380>)
 8001406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140a:	f7ff f91d 	bl	8000648 <__aeabi_dmul>
 800140e:	4603      	mov	r3, r0
 8001410:	460c      	mov	r4, r1
 8001412:	4618      	mov	r0, r3
 8001414:	4621      	mov	r1, r4
 8001416:	f7ff fb51 	bl	8000abc <__aeabi_d2uiz>
 800141a:	4603      	mov	r3, r0
 800141c:	637b      	str	r3, [r7, #52]	; 0x34
			if (motorSet.BackLeft > addVal) motorSet.BackLeft -= addVal;
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001422:	429a      	cmp	r2, r3
 8001424:	d204      	bcs.n	8001430 <ESC_CALC_THROTTLE+0xe8>
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	61bb      	str	r3, [r7, #24]
 800142e:	e001      	b.n	8001434 <ESC_CALC_THROTTLE+0xec>
			else motorSet.BackLeft = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	61bb      	str	r3, [r7, #24]
			if (motorSet.BackRight > addVal) motorSet.BackRight  -= addVal;
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001438:	429a      	cmp	r2, r3
 800143a:	d204      	bcs.n	8001446 <ESC_CALC_THROTTLE+0xfe>
 800143c:	69fa      	ldr	r2, [r7, #28]
 800143e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	61fb      	str	r3, [r7, #28]
 8001444:	e001      	b.n	800144a <ESC_CALC_THROTTLE+0x102>
			else motorSet.BackRight  = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
			motorSet.FrontLeft += addVal;
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800144e:	4413      	add	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
			motorSet.FrontRight += addVal;
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001456:	4413      	add	r3, r2
 8001458:	617b      	str	r3, [r7, #20]
		}
		// Left side increases throttle if pitching to the right, right side decreases
		if (thisRX->roll > XYZ_NEUTRAL_VALUE)
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f240 4204 	movw	r2, #1028	; 0x404
 8001462:	4293      	cmp	r3, r2
 8001464:	d932      	bls.n	80014cc <ESC_CALC_THROTTLE+0x184>
		{
			uint32_t addVal = (thisRX->roll - XYZ_NEUTRAL_VALUE) * SENSITIVITY_CONST;
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f870 	bl	8000554 <__aeabi_ui2d>
 8001474:	a394      	add	r3, pc, #592	; (adr r3, 80016c8 <ESC_CALC_THROTTLE+0x380>)
 8001476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147a:	f7ff f8e5 	bl	8000648 <__aeabi_dmul>
 800147e:	4603      	mov	r3, r0
 8001480:	460c      	mov	r4, r1
 8001482:	4618      	mov	r0, r3
 8001484:	4621      	mov	r1, r4
 8001486:	f7ff fb19 	bl	8000abc <__aeabi_d2uiz>
 800148a:	4603      	mov	r3, r0
 800148c:	62bb      	str	r3, [r7, #40]	; 0x28
			if (motorSet.FrontRight > addVal) motorSet.FrontRight -= addVal;
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001492:	429a      	cmp	r2, r3
 8001494:	d204      	bcs.n	80014a0 <ESC_CALC_THROTTLE+0x158>
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	e001      	b.n	80014a4 <ESC_CALC_THROTTLE+0x15c>
			else motorSet.FrontRight = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
			if (motorSet.BackRight > addVal) motorSet.BackRight  -= addVal;
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d204      	bcs.n	80014b6 <ESC_CALC_THROTTLE+0x16e>
 80014ac:	69fa      	ldr	r2, [r7, #28]
 80014ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	61fb      	str	r3, [r7, #28]
 80014b4:	e001      	b.n	80014ba <ESC_CALC_THROTTLE+0x172>
			else motorSet.BackRight  = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
			motorSet.FrontLeft += addVal;
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014be:	4413      	add	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
			motorSet.BackLeft += addVal;
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c6:	4413      	add	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
 80014ca:	e038      	b.n	800153e <ESC_CALC_THROTTLE+0x1f6>
		}
		// Right side increases throttle if pitching to the left, left side decreases
		else if (thisRX->roll < XYZ_NEUTRAL_VALUE)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f240 4203 	movw	r2, #1027	; 0x403
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d832      	bhi.n	800153e <ESC_CALC_THROTTLE+0x1f6>
		{
			uint32_t addVal = (XYZ_NEUTRAL_VALUE - thisRX->roll) * SENSITIVITY_CONST;
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	f240 4304 	movw	r3, #1028	; 0x404
 80014e0:	1a9b      	subs	r3, r3, r2
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff f836 	bl	8000554 <__aeabi_ui2d>
 80014e8:	a377      	add	r3, pc, #476	; (adr r3, 80016c8 <ESC_CALC_THROTTLE+0x380>)
 80014ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ee:	f7ff f8ab 	bl	8000648 <__aeabi_dmul>
 80014f2:	4603      	mov	r3, r0
 80014f4:	460c      	mov	r4, r1
 80014f6:	4618      	mov	r0, r3
 80014f8:	4621      	mov	r1, r4
 80014fa:	f7ff fadf 	bl	8000abc <__aeabi_d2uiz>
 80014fe:	4603      	mov	r3, r0
 8001500:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (motorSet.FrontLeft > addVal) motorSet.FrontLeft -= addVal;
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001506:	429a      	cmp	r2, r3
 8001508:	d204      	bcs.n	8001514 <ESC_CALC_THROTTLE+0x1cc>
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	e001      	b.n	8001518 <ESC_CALC_THROTTLE+0x1d0>
			else motorSet.FrontLeft = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	613b      	str	r3, [r7, #16]
			if (motorSet.BackLeft > addVal) motorSet.BackLeft  -= addVal;
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800151c:	429a      	cmp	r2, r3
 800151e:	d204      	bcs.n	800152a <ESC_CALC_THROTTLE+0x1e2>
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	61bb      	str	r3, [r7, #24]
 8001528:	e001      	b.n	800152e <ESC_CALC_THROTTLE+0x1e6>
			else motorSet.BackLeft  = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	61bb      	str	r3, [r7, #24]
			motorSet.FrontRight += addVal;
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001532:	4413      	add	r3, r2
 8001534:	617b      	str	r3, [r7, #20]
			motorSet.BackRight += addVal;
 8001536:	69fa      	ldr	r2, [r7, #28]
 8001538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800153a:	4413      	add	r3, r2
 800153c:	61fb      	str	r3, [r7, #28]
		}
		// Front left and back right (if spinning counter-clockwise) increase if yaw to the right
		if (thisRX->yaw > XYZ_NEUTRAL_VALUE)
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	f240 4204 	movw	r2, #1028	; 0x404
 8001546:	4293      	cmp	r3, r2
 8001548:	d932      	bls.n	80015b0 <ESC_CALC_THROTTLE+0x268>
		{
			uint32_t addVal = (thisRX->yaw - XYZ_NEUTRAL_VALUE) * SENSITIVITY_CONST;
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001552:	4618      	mov	r0, r3
 8001554:	f7fe fffe 	bl	8000554 <__aeabi_ui2d>
 8001558:	a35b      	add	r3, pc, #364	; (adr r3, 80016c8 <ESC_CALC_THROTTLE+0x380>)
 800155a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155e:	f7ff f873 	bl	8000648 <__aeabi_dmul>
 8001562:	4603      	mov	r3, r0
 8001564:	460c      	mov	r4, r1
 8001566:	4618      	mov	r0, r3
 8001568:	4621      	mov	r1, r4
 800156a:	f7ff faa7 	bl	8000abc <__aeabi_d2uiz>
 800156e:	4603      	mov	r3, r0
 8001570:	623b      	str	r3, [r7, #32]
			if (motorSet.FrontRight > addVal) motorSet.FrontRight -= addVal;
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	6a3a      	ldr	r2, [r7, #32]
 8001576:	429a      	cmp	r2, r3
 8001578:	d204      	bcs.n	8001584 <ESC_CALC_THROTTLE+0x23c>
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	6a3b      	ldr	r3, [r7, #32]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	e001      	b.n	8001588 <ESC_CALC_THROTTLE+0x240>
			else motorSet.FrontRight = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
			if (motorSet.BackLeft > addVal) motorSet.BackLeft  -= addVal;
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	6a3a      	ldr	r2, [r7, #32]
 800158c:	429a      	cmp	r2, r3
 800158e:	d204      	bcs.n	800159a <ESC_CALC_THROTTLE+0x252>
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	6a3b      	ldr	r3, [r7, #32]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	61bb      	str	r3, [r7, #24]
 8001598:	e001      	b.n	800159e <ESC_CALC_THROTTLE+0x256>
			else motorSet.BackLeft  = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
			motorSet.FrontLeft += addVal;
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	6a3b      	ldr	r3, [r7, #32]
 80015a2:	4413      	add	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
			motorSet.BackRight += addVal;
 80015a6:	69fa      	ldr	r2, [r7, #28]
 80015a8:	6a3b      	ldr	r3, [r7, #32]
 80015aa:	4413      	add	r3, r2
 80015ac:	61fb      	str	r3, [r7, #28]
 80015ae:	e038      	b.n	8001622 <ESC_CALC_THROTTLE+0x2da>
		}
		// Front right and back left (if spinning clockwise) increase if yaw to the left
		else if (thisRX->yaw < XYZ_NEUTRAL_VALUE)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	f240 4203 	movw	r2, #1027	; 0x403
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d832      	bhi.n	8001622 <ESC_CALC_THROTTLE+0x2da>
		{
			uint32_t addVal = (XYZ_NEUTRAL_VALUE - thisRX->yaw) * SENSITIVITY_CONST;
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	68da      	ldr	r2, [r3, #12]
 80015c0:	f240 4304 	movw	r3, #1028	; 0x404
 80015c4:	1a9b      	subs	r3, r3, r2
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe ffc4 	bl	8000554 <__aeabi_ui2d>
 80015cc:	a33e      	add	r3, pc, #248	; (adr r3, 80016c8 <ESC_CALC_THROTTLE+0x380>)
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	f7ff f839 	bl	8000648 <__aeabi_dmul>
 80015d6:	4603      	mov	r3, r0
 80015d8:	460c      	mov	r4, r1
 80015da:	4618      	mov	r0, r3
 80015dc:	4621      	mov	r1, r4
 80015de:	f7ff fa6d 	bl	8000abc <__aeabi_d2uiz>
 80015e2:	4603      	mov	r3, r0
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
			if (motorSet.FrontLeft > addVal) motorSet.FrontLeft -= addVal;
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d204      	bcs.n	80015f8 <ESC_CALC_THROTTLE+0x2b0>
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	e001      	b.n	80015fc <ESC_CALC_THROTTLE+0x2b4>
			else motorSet.FrontLeft = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	613b      	str	r3, [r7, #16]
			if (motorSet.BackRight > addVal) motorSet.BackRight  -= addVal;
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001600:	429a      	cmp	r2, r3
 8001602:	d204      	bcs.n	800160e <ESC_CALC_THROTTLE+0x2c6>
 8001604:	69fa      	ldr	r2, [r7, #28]
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	61fb      	str	r3, [r7, #28]
 800160c:	e001      	b.n	8001612 <ESC_CALC_THROTTLE+0x2ca>
			else motorSet.BackRight  = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
			motorSet.FrontRight += addVal;
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	4413      	add	r3, r2
 8001618:	617b      	str	r3, [r7, #20]
			motorSet.BackLeft += addVal;
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	4413      	add	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
		}
		if (motorSet.FrontLeft > DSHOT_MAX_THROTTLE) motorSet.FrontLeft = DSHOT_MAX_THROTTLE;
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001628:	d303      	bcc.n	8001632 <ESC_CALC_THROTTLE+0x2ea>
 800162a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	e004      	b.n	800163c <ESC_CALC_THROTTLE+0x2f4>
		else if (motorSet.FrontLeft < DSHOT_MIN_IDLE) motorSet.FrontLeft = DSHOT_MIN_IDLE;
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	2b63      	cmp	r3, #99	; 0x63
 8001636:	d801      	bhi.n	800163c <ESC_CALC_THROTTLE+0x2f4>
 8001638:	2364      	movs	r3, #100	; 0x64
 800163a:	613b      	str	r3, [r7, #16]
		if (motorSet.FrontRight > DSHOT_MAX_THROTTLE) motorSet.FrontRight = DSHOT_MAX_THROTTLE;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001642:	d303      	bcc.n	800164c <ESC_CALC_THROTTLE+0x304>
 8001644:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	e004      	b.n	8001656 <ESC_CALC_THROTTLE+0x30e>
		else if (motorSet.FrontRight < DSHOT_MIN_IDLE) motorSet.FrontRight = DSHOT_MIN_IDLE;
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	2b63      	cmp	r3, #99	; 0x63
 8001650:	d801      	bhi.n	8001656 <ESC_CALC_THROTTLE+0x30e>
 8001652:	2364      	movs	r3, #100	; 0x64
 8001654:	617b      	str	r3, [r7, #20]
		if (motorSet.BackLeft > DSHOT_MAX_THROTTLE) motorSet.BackLeft = DSHOT_MAX_THROTTLE;
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800165c:	d303      	bcc.n	8001666 <ESC_CALC_THROTTLE+0x31e>
 800165e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001662:	61bb      	str	r3, [r7, #24]
 8001664:	e004      	b.n	8001670 <ESC_CALC_THROTTLE+0x328>
		else if (motorSet.BackLeft < DSHOT_MIN_IDLE) motorSet.BackLeft = DSHOT_MIN_IDLE;
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	2b63      	cmp	r3, #99	; 0x63
 800166a:	d801      	bhi.n	8001670 <ESC_CALC_THROTTLE+0x328>
 800166c:	2364      	movs	r3, #100	; 0x64
 800166e:	61bb      	str	r3, [r7, #24]
		if (motorSet.BackRight > DSHOT_MAX_THROTTLE) motorSet.BackRight = DSHOT_MAX_THROTTLE;
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001676:	d303      	bcc.n	8001680 <ESC_CALC_THROTTLE+0x338>
 8001678:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800167c:	61fb      	str	r3, [r7, #28]
 800167e:	e004      	b.n	800168a <ESC_CALC_THROTTLE+0x342>
		else if (motorSet.BackRight < DSHOT_MIN_IDLE) motorSet.BackRight = DSHOT_MIN_IDLE;
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	2b63      	cmp	r3, #99	; 0x63
 8001684:	d801      	bhi.n	800168a <ESC_CALC_THROTTLE+0x342>
 8001686:	2364      	movs	r3, #100	; 0x64
 8001688:	61fb      	str	r3, [r7, #28]
		escSet->Throttle[0] = motorSet.FrontLeft;
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	601a      	str	r2, [r3, #0]
		escSet->Throttle[1] = motorSet.FrontRight;
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	605a      	str	r2, [r3, #4]
		escSet->Throttle[2] = motorSet.BackLeft;
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	609a      	str	r2, [r3, #8]
		escSet->Throttle[3] = motorSet.BackRight;
 800169c:	69fa      	ldr	r2, [r7, #28]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	60da      	str	r2, [r3, #12]
		escSet->Throttle[0] = 0;
		escSet->Throttle[1] = 0;
		escSet->Throttle[2] = 0;
		escSet->Throttle[3] = 0;
	}
}
 80016a2:	e00b      	b.n	80016bc <ESC_CALC_THROTTLE+0x374>
		escSet->Throttle[0] = 0;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
		escSet->Throttle[1] = 0;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2200      	movs	r2, #0
 80016ae:	605a      	str	r2, [r3, #4]
		escSet->Throttle[2] = 0;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
		escSet->Throttle[3] = 0;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2200      	movs	r2, #0
 80016ba:	60da      	str	r2, [r3, #12]
}
 80016bc:	bf00      	nop
 80016be:	373c      	adds	r7, #60	; 0x3c
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd90      	pop	{r4, r7, pc}
 80016c4:	f3af 8000 	nop.w
 80016c8:	9999999a 	.word	0x9999999a
 80016cc:	3fb99999 	.word	0x3fb99999

080016d0 <RX_INIT>:
#define RX_OFFSET 			998
#define RX_SWITCH_OFFSET	550


RX_CONTROLLER* RX_INIT(TIM_HandleTypeDef* timerSticks, TIM_HandleTypeDef* timerSwitches)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
	RX_CONTROLLER* newRX = malloc(sizeof(RX_CONTROLLER));
 80016da:	2024      	movs	r0, #36	; 0x24
 80016dc:	f007 fdda 	bl	8009294 <malloc>
 80016e0:	4603      	mov	r3, r0
 80016e2:	60fb      	str	r3, [r7, #12]
	newRX->throttle = 0;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
	newRX->pitch = 0;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2200      	movs	r2, #0
 80016ee:	605a      	str	r2, [r3, #4]
	newRX->roll = 0;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
	newRX->yaw = 0;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2200      	movs	r2, #0
 80016fa:	60da      	str	r2, [r3, #12]
	newRX->switchA = 0;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2200      	movs	r2, #0
 8001700:	611a      	str	r2, [r3, #16]
	newRX->switchB = 0;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	615a      	str	r2, [r3, #20]
	newRX->timerSticks = timerSticks;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	619a      	str	r2, [r3, #24]
	newRX->timerSwitches = timerSwitches;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	61da      	str	r2, [r3, #28]
	HAL_TIM_IC_Start_IT(newRX->timerSticks, TIM_CHANNEL_1);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	2100      	movs	r1, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f005 fb2e 	bl	8006d7c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(newRX->timerSticks, TIM_CHANNEL_2);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	2104      	movs	r1, #4
 8001726:	4618      	mov	r0, r3
 8001728:	f005 fb28 	bl	8006d7c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(newRX->timerSticks, TIM_CHANNEL_3);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	2108      	movs	r1, #8
 8001732:	4618      	mov	r0, r3
 8001734:	f005 fb22 	bl	8006d7c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(newRX->timerSticks, TIM_CHANNEL_4);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	210c      	movs	r1, #12
 800173e:	4618      	mov	r0, r3
 8001740:	f005 fb1c 	bl	8006d7c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(newRX->timerSwitches, TIM_CHANNEL_1);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f005 fb16 	bl	8006d7c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(newRX->timerSwitches, TIM_CHANNEL_4);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	210c      	movs	r1, #12
 8001756:	4618      	mov	r0, r3
 8001758:	f005 fb10 	bl	8006d7c <HAL_TIM_IC_Start_IT>
	return newRX;
 800175c:	68fb      	ldr	r3, [r7, #12]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <RX_UPDATE>:

void RX_UPDATE(RX_CONTROLLER* thisRX)
{
 8001768:	b590      	push	{r4, r7, lr}
 800176a:	b089      	sub	sp, #36	; 0x24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	// Calculate RX throttle value
	uint32_t curThrottle = HAL_TIM_ReadCapturedValue(thisRX->timerSticks, TIM_CHANNEL_1);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	2100      	movs	r1, #0
 8001776:	4618      	mov	r0, r3
 8001778:	f005 ff02 	bl	8007580 <HAL_TIM_ReadCapturedValue>
 800177c:	61f8      	str	r0, [r7, #28]
	if (curThrottle > RX_OFFSET - 1) curThrottle = (curThrottle - RX_OFFSET) * RX_EXPONENT;
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	f240 32e5 	movw	r2, #997	; 0x3e5
 8001784:	4293      	cmp	r3, r2
 8001786:	d912      	bls.n	80017ae <RX_UPDATE+0x46>
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f2a3 33e6 	subw	r3, r3, #998	; 0x3e6
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe fee0 	bl	8000554 <__aeabi_ui2d>
 8001794:	a350      	add	r3, pc, #320	; (adr r3, 80018d8 <RX_UPDATE+0x170>)
 8001796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179a:	f7fe ff55 	bl	8000648 <__aeabi_dmul>
 800179e:	4603      	mov	r3, r0
 80017a0:	460c      	mov	r4, r1
 80017a2:	4618      	mov	r0, r3
 80017a4:	4621      	mov	r1, r4
 80017a6:	f7ff f989 	bl	8000abc <__aeabi_d2uiz>
 80017aa:	4603      	mov	r3, r0
 80017ac:	61fb      	str	r3, [r7, #28]
	thisRX->throttle = curThrottle;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69fa      	ldr	r2, [r7, #28]
 80017b2:	601a      	str	r2, [r3, #0]
	// Calculate RX pitch value
	int32_t curPitch = HAL_TIM_ReadCapturedValue(thisRX->timerSticks, TIM_CHANNEL_2);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	2104      	movs	r1, #4
 80017ba:	4618      	mov	r0, r3
 80017bc:	f005 fee0 	bl	8007580 <HAL_TIM_ReadCapturedValue>
 80017c0:	4603      	mov	r3, r0
 80017c2:	61bb      	str	r3, [r7, #24]
	if (curPitch > RX_OFFSET - 1) curPitch = (curPitch - RX_OFFSET) * RX_EXPONENT;
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	f240 32e5 	movw	r2, #997	; 0x3e5
 80017ca:	4293      	cmp	r3, r2
 80017cc:	dd12      	ble.n	80017f4 <RX_UPDATE+0x8c>
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	f2a3 33e6 	subw	r3, r3, #998	; 0x3e6
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fecd 	bl	8000574 <__aeabi_i2d>
 80017da:	a33f      	add	r3, pc, #252	; (adr r3, 80018d8 <RX_UPDATE+0x170>)
 80017dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e0:	f7fe ff32 	bl	8000648 <__aeabi_dmul>
 80017e4:	4603      	mov	r3, r0
 80017e6:	460c      	mov	r4, r1
 80017e8:	4618      	mov	r0, r3
 80017ea:	4621      	mov	r1, r4
 80017ec:	f7ff f93e 	bl	8000a6c <__aeabi_d2iz>
 80017f0:	4603      	mov	r3, r0
 80017f2:	61bb      	str	r3, [r7, #24]
	thisRX->pitch = curPitch;
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	605a      	str	r2, [r3, #4]
	// Calculate RX roll value
	uint32_t curRoll = HAL_TIM_ReadCapturedValue(thisRX->timerSticks, TIM_CHANNEL_3);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	2108      	movs	r1, #8
 8001800:	4618      	mov	r0, r3
 8001802:	f005 febd 	bl	8007580 <HAL_TIM_ReadCapturedValue>
 8001806:	6178      	str	r0, [r7, #20]
	if (curRoll > RX_OFFSET - 1) curRoll = (curRoll - RX_OFFSET) * RX_EXPONENT;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	f240 32e5 	movw	r2, #997	; 0x3e5
 800180e:	4293      	cmp	r3, r2
 8001810:	d912      	bls.n	8001838 <RX_UPDATE+0xd0>
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f2a3 33e6 	subw	r3, r3, #998	; 0x3e6
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe fe9b 	bl	8000554 <__aeabi_ui2d>
 800181e:	a32e      	add	r3, pc, #184	; (adr r3, 80018d8 <RX_UPDATE+0x170>)
 8001820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001824:	f7fe ff10 	bl	8000648 <__aeabi_dmul>
 8001828:	4603      	mov	r3, r0
 800182a:	460c      	mov	r4, r1
 800182c:	4618      	mov	r0, r3
 800182e:	4621      	mov	r1, r4
 8001830:	f7ff f944 	bl	8000abc <__aeabi_d2uiz>
 8001834:	4603      	mov	r3, r0
 8001836:	617b      	str	r3, [r7, #20]
	thisRX->roll = curRoll;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	609a      	str	r2, [r3, #8]
	// Calculate RX yaw value
	uint32_t curYaw = HAL_TIM_ReadCapturedValue(thisRX->timerSticks, TIM_CHANNEL_4);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	210c      	movs	r1, #12
 8001844:	4618      	mov	r0, r3
 8001846:	f005 fe9b 	bl	8007580 <HAL_TIM_ReadCapturedValue>
 800184a:	6138      	str	r0, [r7, #16]
	if (curYaw > RX_OFFSET - 1) curYaw = (curYaw - RX_OFFSET) * RX_EXPONENT;
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	f240 32e5 	movw	r2, #997	; 0x3e5
 8001852:	4293      	cmp	r3, r2
 8001854:	d912      	bls.n	800187c <RX_UPDATE+0x114>
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	f2a3 33e6 	subw	r3, r3, #998	; 0x3e6
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fe79 	bl	8000554 <__aeabi_ui2d>
 8001862:	a31d      	add	r3, pc, #116	; (adr r3, 80018d8 <RX_UPDATE+0x170>)
 8001864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001868:	f7fe feee 	bl	8000648 <__aeabi_dmul>
 800186c:	4603      	mov	r3, r0
 800186e:	460c      	mov	r4, r1
 8001870:	4618      	mov	r0, r3
 8001872:	4621      	mov	r1, r4
 8001874:	f7ff f922 	bl	8000abc <__aeabi_d2uiz>
 8001878:	4603      	mov	r3, r0
 800187a:	613b      	str	r3, [r7, #16]
	thisRX->yaw = curYaw;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	60da      	str	r2, [r3, #12]
	// Calculate Switch A state
	uint32_t curSwitchA = HAL_TIM_ReadCapturedValue(thisRX->timerSwitches, TIM_CHANNEL_1);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	2100      	movs	r1, #0
 8001888:	4618      	mov	r0, r3
 800188a:	f005 fe79 	bl	8007580 <HAL_TIM_ReadCapturedValue>
 800188e:	60f8      	str	r0, [r7, #12]
	if (curSwitchA < RX_SWITCH_OFFSET) thisRX->switchA = 0;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f240 2225 	movw	r2, #549	; 0x225
 8001896:	4293      	cmp	r3, r2
 8001898:	d803      	bhi.n	80018a2 <RX_UPDATE+0x13a>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	611a      	str	r2, [r3, #16]
 80018a0:	e002      	b.n	80018a8 <RX_UPDATE+0x140>
	else thisRX->switchA = 1;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2201      	movs	r2, #1
 80018a6:	611a      	str	r2, [r3, #16]
	// Calculate Switch B state
	uint32_t curSwitchB = HAL_TIM_ReadCapturedValue(thisRX->timerSwitches, TIM_CHANNEL_4);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	210c      	movs	r1, #12
 80018ae:	4618      	mov	r0, r3
 80018b0:	f005 fe66 	bl	8007580 <HAL_TIM_ReadCapturedValue>
 80018b4:	60b8      	str	r0, [r7, #8]
	if (curSwitchB < RX_SWITCH_OFFSET) thisRX->switchB = 0;
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	f240 2225 	movw	r2, #549	; 0x225
 80018bc:	4293      	cmp	r3, r2
 80018be:	d803      	bhi.n	80018c8 <RX_UPDATE+0x160>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	615a      	str	r2, [r3, #20]
	else thisRX->switchB = 1;
}
 80018c6:	e002      	b.n	80018ce <RX_UPDATE+0x166>
	else thisRX->switchB = 1;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	615a      	str	r2, [r3, #20]
}
 80018ce:	bf00      	nop
 80018d0:	3724      	adds	r7, #36	; 0x24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd90      	pop	{r4, r7, pc}
 80018d6:	bf00      	nop
 80018d8:	f5c28f5c 	.word	0xf5c28f5c
 80018dc:	40005c28 	.word	0x40005c28

080018e0 <RX_DISCONNECTED>:

void RX_DISCONNECTED(RX_CONTROLLER* thisRX)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	thisRX->throttle = 0;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
	thisRX->pitch = 0;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	605a      	str	r2, [r3, #4]
	thisRX->roll = 0;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
	thisRX->yaw = 0;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	60da      	str	r2, [r3, #12]
	thisRX->switchA = 0;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
	thisRX->switchB = 0;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	615a      	str	r2, [r3, #20]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <XLG_INIT>:
  * @param writeSize	write here
  * @retval void
  */

void XLG_INIT(I2C_HandleTypeDef* i2c)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	uint8_t writeThis = 0b10000000;
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	73fb      	strb	r3, [r7, #15]
	XLG_WRITE(i2c, CTRL1_XL, &writeThis, 1);
 8001924:	f107 020f 	add.w	r2, r7, #15
 8001928:	2301      	movs	r3, #1
 800192a:	2110      	movs	r1, #16
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 f80d 	bl	800194c <XLG_WRITE>
	writeThis = 0b10001100;
 8001932:	238c      	movs	r3, #140	; 0x8c
 8001934:	73fb      	strb	r3, [r7, #15]
	XLG_WRITE(i2c, CTRL2_G, &writeThis, 1);
 8001936:	f107 020f 	add.w	r2, r7, #15
 800193a:	2301      	movs	r3, #1
 800193c:	2111      	movs	r1, #17
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 f804 	bl	800194c <XLG_WRITE>
}
 8001944:	bf00      	nop
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <XLG_WRITE>:

void XLG_WRITE(I2C_HandleTypeDef* i2c, uint8_t addr, uint8_t* writeByte, uint32_t writeSize)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af02      	add	r7, sp, #8
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	460b      	mov	r3, r1
 800195a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write_DMA(i2c, XLG_I2C_ADDR, addr, XLG_REG_SIZE, writeByte, writeSize);
 800195c:	7afb      	ldrb	r3, [r7, #11]
 800195e:	b29a      	uxth	r2, r3
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	b29b      	uxth	r3, r3
 8001964:	9301      	str	r3, [sp, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	2301      	movs	r3, #1
 800196c:	21d4      	movs	r1, #212	; 0xd4
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f002 fd6c 	bl	800444c <HAL_I2C_Mem_Write_DMA>
	while(i2c->hdmatx->State != HAL_DMA_STATE_READY);
 8001974:	bf00      	nop
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800197a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b01      	cmp	r3, #1
 8001982:	d1f8      	bne.n	8001976 <XLG_WRITE+0x2a>
	i2c->State = HAL_I2C_STATE_READY;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2220      	movs	r2, #32
 8001988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800198c:	bf00      	nop
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Interrupt Routine for command line settings
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
	cmd = escCMD - '0';
 800199c:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <HAL_UART_RxCpltCallback+0x48>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	3b30      	subs	r3, #48	; 0x30
 80019a2:	4a0f      	ldr	r2, [pc, #60]	; (80019e0 <HAL_UART_RxCpltCallback+0x4c>)
 80019a4:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(&huart3, &escCMD, 1);
 80019a6:	2201      	movs	r2, #1
 80019a8:	490c      	ldr	r1, [pc, #48]	; (80019dc <HAL_UART_RxCpltCallback+0x48>)
 80019aa:	480e      	ldr	r0, [pc, #56]	; (80019e4 <HAL_UART_RxCpltCallback+0x50>)
 80019ac:	f006 fcfe 	bl	80083ac <HAL_UART_Receive_IT>
	sprintf((char*)sendMsg, "\r\nSending command %c\r\n", escCMD);
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_UART_RxCpltCallback+0x48>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	490c      	ldr	r1, [pc, #48]	; (80019e8 <HAL_UART_RxCpltCallback+0x54>)
 80019b8:	480c      	ldr	r0, [pc, #48]	; (80019ec <HAL_UART_RxCpltCallback+0x58>)
 80019ba:	f007 fd3f 	bl	800943c <siprintf>
	HAL_UART_Transmit_IT(&huart3, sendMsg, strlen((char*)sendMsg));
 80019be:	480b      	ldr	r0, [pc, #44]	; (80019ec <HAL_UART_RxCpltCallback+0x58>)
 80019c0:	f7fe fc2e 	bl	8000220 <strlen>
 80019c4:	4603      	mov	r3, r0
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	461a      	mov	r2, r3
 80019ca:	4908      	ldr	r1, [pc, #32]	; (80019ec <HAL_UART_RxCpltCallback+0x58>)
 80019cc:	4805      	ldr	r0, [pc, #20]	; (80019e4 <HAL_UART_RxCpltCallback+0x50>)
 80019ce:	f006 fc91 	bl	80082f4 <HAL_UART_Transmit_IT>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000290 	.word	0x20000290
 80019e0:	20000094 	.word	0x20000094
 80019e4:	20000148 	.word	0x20000148
 80019e8:	08009adc 	.word	0x08009adc
 80019ec:	20000360 	.word	0x20000360

080019f0 <HAL_TIM_IC_CaptureCallback>:

// Interrupt routine for RX
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	RX_UPDATE(myRX);
 80019f8:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <HAL_TIM_IC_CaptureCallback+0x34>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff feb3 	bl	8001768 <RX_UPDATE>
	ESC_CALC_THROTTLE(myESCSet, myRX, armed);
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_TIM_IC_CaptureCallback+0x38>)
 8001a04:	6818      	ldr	r0, [r3, #0]
 8001a06:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <HAL_TIM_IC_CaptureCallback+0x34>)
 8001a08:	6819      	ldr	r1, [r3, #0]
 8001a0a:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <HAL_TIM_IC_CaptureCallback+0x3c>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	f7ff fc9a 	bl	8001348 <ESC_CALC_THROTTLE>
	watchdog = 0;
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_TIM_IC_CaptureCallback+0x40>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000314 	.word	0x20000314
 8001a28:	2000028c 	.word	0x2000028c
 8001a2c:	20000004 	.word	0x20000004
 8001a30:	20000098 	.word	0x20000098

08001a34 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001a34:	b590      	push	{r4, r7, lr}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8001a3a:	f001 fb28 	bl	800308e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001a3e:	f000 f903 	bl	8001c48 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a42:	f000 fd0d 	bl	8002460 <MX_GPIO_Init>
	MX_DMA_Init();
 8001a46:	f000 fcc5 	bl	80023d4 <MX_DMA_Init>
	MX_USART3_UART_Init();
 8001a4a:	f000 fc8b 	bl	8002364 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_USB_Init();
 8001a4e:	f000 fcb9 	bl	80023c4 <MX_USB_OTG_FS_USB_Init>
	MX_TIM4_Init();
 8001a52:	f000 fbbd 	bl	80021d0 <MX_TIM4_Init>
	MX_ADC1_Init();
 8001a56:	f000 f98f 	bl	8001d78 <MX_ADC1_Init>
	MX_I2C1_Init();
 8001a5a:	f000 f9df 	bl	8001e1c <MX_I2C1_Init>
	MX_TIM3_Init();
 8001a5e:	f000 fb3b 	bl	80020d8 <MX_TIM3_Init>
	MX_TIM2_Init();
 8001a62:	f000 fabb 	bl	8001fdc <MX_TIM2_Init>
	MX_TIM1_Init();
 8001a66:	f000 fa19 	bl	8001e9c <MX_TIM1_Init>
	MX_TIM5_Init();
 8001a6a:	f000 fc21 	bl	80022b0 <MX_TIM5_Init>
	/* USER CODE BEGIN 2 */
	escDMASet[0] = &hdma_tim4_ch1; 		// DMA1: Stream 0 (S0)
 8001a6e:	4b63      	ldr	r3, [pc, #396]	; (8001bfc <main+0x1c8>)
 8001a70:	4a63      	ldr	r2, [pc, #396]	; (8001c00 <main+0x1cc>)
 8001a72:	601a      	str	r2, [r3, #0]
	escDMASet[1] = &hdma_tim4_ch2; 		// DMA1: Stream 3 (S3)
 8001a74:	4b61      	ldr	r3, [pc, #388]	; (8001bfc <main+0x1c8>)
 8001a76:	4a63      	ldr	r2, [pc, #396]	; (8001c04 <main+0x1d0>)
 8001a78:	605a      	str	r2, [r3, #4]
	escDMASet[2] = &hdma_tim4_ch3; 		// DMA1: Stream 7 (S7)
 8001a7a:	4b60      	ldr	r3, [pc, #384]	; (8001bfc <main+0x1c8>)
 8001a7c:	4a62      	ldr	r2, [pc, #392]	; (8001c08 <main+0x1d4>)
 8001a7e:	609a      	str	r2, [r3, #8]
	escDMASet[3] = &hdma_tim5_ch2; 		// DMA1: Stream 4 (S4)
 8001a80:	4b5e      	ldr	r3, [pc, #376]	; (8001bfc <main+0x1c8>)
 8001a82:	4a62      	ldr	r2, [pc, #392]	; (8001c0c <main+0x1d8>)
 8001a84:	60da      	str	r2, [r3, #12]
	dmaPwmTimers[0] = &htim4;
 8001a86:	4b62      	ldr	r3, [pc, #392]	; (8001c10 <main+0x1dc>)
 8001a88:	4a62      	ldr	r2, [pc, #392]	; (8001c14 <main+0x1e0>)
 8001a8a:	601a      	str	r2, [r3, #0]
	dmaPwmTimers[1] = &htim5;
 8001a8c:	4b60      	ldr	r3, [pc, #384]	; (8001c10 <main+0x1dc>)
 8001a8e:	4a62      	ldr	r2, [pc, #392]	; (8001c18 <main+0x1e4>)
 8001a90:	605a      	str	r2, [r3, #4]
	myESCSet = ESC_INIT(dmaPwmTimers, &htim3, escDMASet);
 8001a92:	4a5a      	ldr	r2, [pc, #360]	; (8001bfc <main+0x1c8>)
 8001a94:	4961      	ldr	r1, [pc, #388]	; (8001c1c <main+0x1e8>)
 8001a96:	485e      	ldr	r0, [pc, #376]	; (8001c10 <main+0x1dc>)
 8001a98:	f7ff f9b0 	bl	8000dfc <ESC_INIT>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	4b60      	ldr	r3, [pc, #384]	; (8001c20 <main+0x1ec>)
 8001aa0:	601a      	str	r2, [r3, #0]
	myRX = RX_INIT(&htim1, &htim2);
 8001aa2:	4960      	ldr	r1, [pc, #384]	; (8001c24 <main+0x1f0>)
 8001aa4:	4860      	ldr	r0, [pc, #384]	; (8001c28 <main+0x1f4>)
 8001aa6:	f7ff fe13 	bl	80016d0 <RX_INIT>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	4b5f      	ldr	r3, [pc, #380]	; (8001c2c <main+0x1f8>)
 8001aae:	601a      	str	r2, [r3, #0]
	XLG_INIT(&hi2c1);
 8001ab0:	485f      	ldr	r0, [pc, #380]	; (8001c30 <main+0x1fc>)
 8001ab2:	f7ff ff31 	bl	8001918 <XLG_INIT>

	const int patternSize = 26;
 8001ab6:	231a      	movs	r3, #26
 8001ab8:	60fb      	str	r3, [r7, #12]
	uint32_t pattern[patternSize];
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	3b01      	subs	r3, #1
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	f04f 0400 	mov.w	r4, #0
 8001ad0:	0154      	lsls	r4, r2, #5
 8001ad2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ad6:	014b      	lsls	r3, r1, #5
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4619      	mov	r1, r3
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	f04f 0400 	mov.w	r4, #0
 8001ae8:	0154      	lsls	r4, r2, #5
 8001aea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001aee:	014b      	lsls	r3, r1, #5
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	3303      	adds	r3, #3
 8001af6:	3307      	adds	r3, #7
 8001af8:	08db      	lsrs	r3, r3, #3
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	ebad 0d03 	sub.w	sp, sp, r3
 8001b00:	466b      	mov	r3, sp
 8001b02:	3303      	adds	r3, #3
 8001b04:	089b      	lsrs	r3, r3, #2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	607b      	str	r3, [r7, #4]
	pattern[0] = DSHOT_CMD_SIGNAL_LINE_CONTINUOUS_ERPM_TELEMETRY;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2221      	movs	r2, #33	; 0x21
 8001b0e:	601a      	str	r2, [r3, #0]
	pattern[1] = DSHOT_CMD_AUDIO_STREAM_MODE_ON_OFF;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	221e      	movs	r2, #30
 8001b14:	605a      	str	r2, [r3, #4]
	pattern[2] = DSHOT_CMD_AUDIO_STREAM_MODE_ON_OFF;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	221e      	movs	r2, #30
 8001b1a:	609a      	str	r2, [r3, #8]
	pattern[3] = DSHOT_CMD_AUDIO_STREAM_MODE_ON_OFF;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	221e      	movs	r2, #30
 8001b20:	60da      	str	r2, [r3, #12]
	pattern[4] = DSHOT_CMD_BEACON5;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2205      	movs	r2, #5
 8001b26:	611a      	str	r2, [r3, #16]
	pattern[5] = DSHOT_CMD_SIGNAL_LINE_CONTINUOUS_ERPM_TELEMETRY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2221      	movs	r2, #33	; 0x21
 8001b2c:	615a      	str	r2, [r3, #20]
	pattern[6] = DSHOT_CMD_BEACON1;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	619a      	str	r2, [r3, #24]
	pattern[7] = DSHOT_CMD_BEACON2;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2202      	movs	r2, #2
 8001b38:	61da      	str	r2, [r3, #28]
	pattern[8] = DSHOT_CMD_BEACON3;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	621a      	str	r2, [r3, #32]
	pattern[9] = DSHOT_CMD_BEACON4;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2204      	movs	r2, #4
 8001b44:	625a      	str	r2, [r3, #36]	; 0x24
//		ESC_SEND_CMD(myESCSet, DSHOT_CMD_LED2_OFF, ALL_MOTORS);
//		ESC_SEND_CMD(myESCSet, DSHOT_CMD_3D_MODE_OFF, ALL_MOTORS);
//		ESC_SEND_CMD(myESCSet, DSHOT_CMD_SIGNAL_LINE_TELEMETRY_DISABLE, ALL_MOTORS);
//		ESC_SEND_CMD(myESCSet, DSHOT_CMD_SAVE_SETTINGS, ALL_MOTORS);
//	}
	HAL_UART_Receive_IT(&huart3, &escCMD, 1);
 8001b46:	2201      	movs	r2, #1
 8001b48:	493a      	ldr	r1, [pc, #232]	; (8001c34 <main+0x200>)
 8001b4a:	483b      	ldr	r0, [pc, #236]	; (8001c38 <main+0x204>)
 8001b4c:	f006 fc2e 	bl	80083ac <HAL_UART_Receive_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		watchdog++;
 8001b50:	4b3a      	ldr	r3, [pc, #232]	; (8001c3c <main+0x208>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	3301      	adds	r3, #1
 8001b56:	4a39      	ldr	r2, [pc, #228]	; (8001c3c <main+0x208>)
 8001b58:	6013      	str	r3, [r2, #0]
		if (watchdog > 10000)
 8001b5a:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <main+0x208>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d91c      	bls.n	8001ba0 <main+0x16c>
		{
			armed = 0;
 8001b66:	4b36      	ldr	r3, [pc, #216]	; (8001c40 <main+0x20c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	701a      	strb	r2, [r3, #0]
			RX_DISCONNECTED(myRX);
 8001b6c:	4b2f      	ldr	r3, [pc, #188]	; (8001c2c <main+0x1f8>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff feb5 	bl	80018e0 <RX_DISCONNECTED>
			ESC_CALC_THROTTLE(myESCSet, myRX, armed);
 8001b76:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <main+0x1ec>)
 8001b78:	6818      	ldr	r0, [r3, #0]
 8001b7a:	4b2c      	ldr	r3, [pc, #176]	; (8001c2c <main+0x1f8>)
 8001b7c:	6819      	ldr	r1, [r3, #0]
 8001b7e:	4b30      	ldr	r3, [pc, #192]	; (8001c40 <main+0x20c>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	f7ff fbe0 	bl	8001348 <ESC_CALC_THROTTLE>
			ESC_SEND_CMD(myESCSet, DSHOT_CMD_MOTOR_STOP, ALL_MOTORS);
 8001b88:	4b25      	ldr	r3, [pc, #148]	; (8001c20 <main+0x1ec>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2208      	movs	r2, #8
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fb35 	bl	8001200 <ESC_SEND_CMD>
			ESC_UPDATE_THROTTLE(myESCSet);
 8001b96:	4b22      	ldr	r3, [pc, #136]	; (8001c20 <main+0x1ec>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff fb0c 	bl	80011b8 <ESC_UPDATE_THROTTLE>
		}
		if (!myRX->switchA)
 8001ba0:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <main+0x1f8>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10b      	bne.n	8001bc2 <main+0x18e>
		{
			armed = 0;
 8001baa:	4b25      	ldr	r3, [pc, #148]	; (8001c40 <main+0x20c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
			ESC_UPDATE_THROTTLE(myESCSet);
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <main+0x1ec>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff faff 	bl	80011b8 <ESC_UPDATE_THROTTLE>
			throttleHighFlag = 0;
 8001bba:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <main+0x210>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	e7c6      	b.n	8001b50 <main+0x11c>
		}
		else if ((myRX->switchA && (myRX->throttle < 50)) || throttleHighFlag)
 8001bc2:	4b1a      	ldr	r3, [pc, #104]	; (8001c2c <main+0x1f8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d004      	beq.n	8001bd6 <main+0x1a2>
 8001bcc:	4b17      	ldr	r3, [pc, #92]	; (8001c2c <main+0x1f8>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2b31      	cmp	r3, #49	; 0x31
 8001bd4:	d903      	bls.n	8001bde <main+0x1aa>
 8001bd6:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <main+0x210>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0b8      	beq.n	8001b50 <main+0x11c>
		{
			armed = 1;
 8001bde:	4b18      	ldr	r3, [pc, #96]	; (8001c40 <main+0x20c>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	701a      	strb	r2, [r3, #0]
			//ESC_UPDATE_THROTTLE(myESCSet);
			ESC_SEND_CMD(myESCSet, DSHOT_CMD_BEACON2, ALL_MOTORS);
 8001be4:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <main+0x1ec>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2208      	movs	r2, #8
 8001bea:	2102      	movs	r1, #2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fb07 	bl	8001200 <ESC_SEND_CMD>
			throttleHighFlag = 1;
 8001bf2:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <main+0x210>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]
		watchdog++;
 8001bf8:	e7aa      	b.n	8001b50 <main+0x11c>
 8001bfa:	bf00      	nop
 8001bfc:	200001c8 	.word	0x200001c8
 8001c00:	20000538 	.word	0x20000538
 8001c04:	200000a8 	.word	0x200000a8
 8001c08:	200003f8 	.word	0x200003f8
 8001c0c:	20000398 	.word	0x20000398
 8001c10:	20000284 	.word	0x20000284
 8001c14:	20000108 	.word	0x20000108
 8001c18:	20000294 	.word	0x20000294
 8001c1c:	200002d4 	.word	0x200002d4
 8001c20:	2000028c 	.word	0x2000028c
 8001c24:	200004f8 	.word	0x200004f8
 8001c28:	20000458 	.word	0x20000458
 8001c2c:	20000314 	.word	0x20000314
 8001c30:	20000238 	.word	0x20000238
 8001c34:	20000290 	.word	0x20000290
 8001c38:	20000148 	.word	0x20000148
 8001c3c:	20000098 	.word	0x20000098
 8001c40:	20000004 	.word	0x20000004
 8001c44:	20000000 	.word	0x20000000

08001c48 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b0b4      	sub	sp, #208	; 0xd0
 8001c4c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c4e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c52:	2230      	movs	r2, #48	; 0x30
 8001c54:	2100      	movs	r1, #0
 8001c56:	4618      	mov	r0, r3
 8001c58:	f007 fb2f 	bl	80092ba <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c5c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c6c:	f107 030c 	add.w	r3, r7, #12
 8001c70:	2280      	movs	r2, #128	; 0x80
 8001c72:	2100      	movs	r1, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f007 fb20 	bl	80092ba <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001c7a:	f003 ff3f 	bl	8005afc <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001c7e:	4b3b      	ldr	r3, [pc, #236]	; (8001d6c <SystemClock_Config+0x124>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	4a3a      	ldr	r2, [pc, #232]	; (8001d6c <SystemClock_Config+0x124>)
 8001c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c88:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8a:	4b38      	ldr	r3, [pc, #224]	; (8001d6c <SystemClock_Config+0x124>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c96:	4b36      	ldr	r3, [pc, #216]	; (8001d70 <SystemClock_Config+0x128>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a35      	ldr	r2, [pc, #212]	; (8001d70 <SystemClock_Config+0x128>)
 8001c9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	4b33      	ldr	r3, [pc, #204]	; (8001d70 <SystemClock_Config+0x128>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001caa:	607b      	str	r3, [r7, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001cb4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001cb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cc2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001cca:	2308      	movs	r3, #8
 8001ccc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 432;
 8001cd0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001cd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8001cde:	2309      	movs	r3, #9
 8001ce0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ce4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f003 ff67 	bl	8005bbc <HAL_RCC_OscConfig>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <SystemClock_Config+0xb0>
	{
		Error_Handler();
 8001cf4:	f000 fcae 	bl	8002654 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001cf8:	f003 ff10 	bl	8005b1c <HAL_PWREx_EnableOverDrive>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <SystemClock_Config+0xbe>
	{
		Error_Handler();
 8001d02:	f000 fca7 	bl	8002654 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d06:	230f      	movs	r3, #15
 8001d08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d12:	2300      	movs	r3, #0
 8001d14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d18:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001d28:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001d2c:	2107      	movs	r1, #7
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f004 f9e8 	bl	8006104 <HAL_RCC_ClockConfig>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <SystemClock_Config+0xf6>
	{
		Error_Handler();
 8001d3a:	f000 fc8b 	bl	8002654 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <SystemClock_Config+0x12c>)
 8001d40:	60fb      	str	r3, [r7, #12]
			|RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d42:	2300      	movs	r3, #0
 8001d44:	653b      	str	r3, [r7, #80]	; 0x50
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d46:	2300      	movs	r3, #0
 8001d48:	66bb      	str	r3, [r7, #104]	; 0x68
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d50:	f107 030c 	add.w	r3, r7, #12
 8001d54:	4618      	mov	r0, r3
 8001d56:	f004 fbcd 	bl	80064f4 <HAL_RCCEx_PeriphCLKConfig>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <SystemClock_Config+0x11c>
	{
		Error_Handler();
 8001d60:	f000 fc78 	bl	8002654 <Error_Handler>
	}
}
 8001d64:	bf00      	nop
 8001d66:	37d0      	adds	r7, #208	; 0xd0
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40007000 	.word	0x40007000
 8001d74:	00204100 	.word	0x00204100

08001d78 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001d7e:	463b      	mov	r3, r7
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001d8a:	4b21      	ldr	r3, [pc, #132]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001d8c:	4a21      	ldr	r2, [pc, #132]	; (8001e14 <MX_ADC1_Init+0x9c>)
 8001d8e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d90:	4b1f      	ldr	r3, [pc, #124]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001d92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d96:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d98:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d9e:	4b1c      	ldr	r3, [pc, #112]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001da4:	4b1a      	ldr	r3, [pc, #104]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001daa:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001db2:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001db8:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001dba:	4a17      	ldr	r2, [pc, #92]	; (8001e18 <MX_ADC1_Init+0xa0>)
 8001dbc:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dbe:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001dca:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001dd2:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dd8:	480d      	ldr	r0, [pc, #52]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001dda:	f001 f9b5 	bl	8003148 <HAL_ADC_Init>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 8001de4:	f000 fc36 	bl	8002654 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8001de8:	2309      	movs	r3, #9
 8001dea:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001dec:	2301      	movs	r3, #1
 8001dee:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001df4:	463b      	mov	r3, r7
 8001df6:	4619      	mov	r1, r3
 8001df8:	4805      	ldr	r0, [pc, #20]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001dfa:	f001 f9e9 	bl	80031d0 <HAL_ADC_ConfigChannel>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 8001e04:	f000 fc26 	bl	8002654 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001e08:	bf00      	nop
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000318 	.word	0x20000318
 8001e14:	40012000 	.word	0x40012000
 8001e18:	0f000001 	.word	0x0f000001

08001e1c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001e20:	4b1b      	ldr	r3, [pc, #108]	; (8001e90 <MX_I2C1_Init+0x74>)
 8001e22:	4a1c      	ldr	r2, [pc, #112]	; (8001e94 <MX_I2C1_Init+0x78>)
 8001e24:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x20404768;
 8001e26:	4b1a      	ldr	r3, [pc, #104]	; (8001e90 <MX_I2C1_Init+0x74>)
 8001e28:	4a1b      	ldr	r2, [pc, #108]	; (8001e98 <MX_I2C1_Init+0x7c>)
 8001e2a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 212;
 8001e2c:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <MX_I2C1_Init+0x74>)
 8001e2e:	22d4      	movs	r2, #212	; 0xd4
 8001e30:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e32:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <MX_I2C1_Init+0x74>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e38:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <MX_I2C1_Init+0x74>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001e3e:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <MX_I2C1_Init+0x74>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e44:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <MX_I2C1_Init+0x74>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e4a:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <MX_I2C1_Init+0x74>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e50:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <MX_I2C1_Init+0x74>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e56:	480e      	ldr	r0, [pc, #56]	; (8001e90 <MX_I2C1_Init+0x74>)
 8001e58:	f002 fa68 	bl	800432c <HAL_I2C_Init>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8001e62:	f000 fbf7 	bl	8002654 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e66:	2100      	movs	r1, #0
 8001e68:	4809      	ldr	r0, [pc, #36]	; (8001e90 <MX_I2C1_Init+0x74>)
 8001e6a:	f003 fdb0 	bl	80059ce <HAL_I2CEx_ConfigAnalogFilter>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8001e74:	f000 fbee 	bl	8002654 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4805      	ldr	r0, [pc, #20]	; (8001e90 <MX_I2C1_Init+0x74>)
 8001e7c:	f003 fdf2 	bl	8005a64 <HAL_I2CEx_ConfigDigitalFilter>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8001e86:	f000 fbe5 	bl	8002654 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000238 	.word	0x20000238
 8001e94:	40005400 	.word	0x40005400
 8001e98:	20404768 	.word	0x20404768

08001e9c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08c      	sub	sp, #48	; 0x30
 8001ea0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001ea2:	f107 031c 	add.w	r3, r7, #28
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	605a      	str	r2, [r3, #4]
 8001eac:	609a      	str	r2, [r3, #8]
 8001eae:	60da      	str	r2, [r3, #12]
 8001eb0:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb2:	f107 0310 	add.w	r3, r7, #16
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8001ebe:	463b      	mov	r3, r7
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001eca:	4b42      	ldr	r3, [pc, #264]	; (8001fd4 <MX_TIM1_Init+0x138>)
 8001ecc:	4a42      	ldr	r2, [pc, #264]	; (8001fd8 <MX_TIM1_Init+0x13c>)
 8001ece:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 215;
 8001ed0:	4b40      	ldr	r3, [pc, #256]	; (8001fd4 <MX_TIM1_Init+0x138>)
 8001ed2:	22d7      	movs	r2, #215	; 0xd7
 8001ed4:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed6:	4b3f      	ldr	r3, [pc, #252]	; (8001fd4 <MX_TIM1_Init+0x138>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 9999;
 8001edc:	4b3d      	ldr	r3, [pc, #244]	; (8001fd4 <MX_TIM1_Init+0x138>)
 8001ede:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ee2:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee4:	4b3b      	ldr	r3, [pc, #236]	; (8001fd4 <MX_TIM1_Init+0x138>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001eea:	4b3a      	ldr	r3, [pc, #232]	; (8001fd4 <MX_TIM1_Init+0x138>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ef0:	4b38      	ldr	r3, [pc, #224]	; (8001fd4 <MX_TIM1_Init+0x138>)
 8001ef2:	2280      	movs	r2, #128	; 0x80
 8001ef4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ef6:	4837      	ldr	r0, [pc, #220]	; (8001fd4 <MX_TIM1_Init+0x138>)
 8001ef8:	f004 fe44 	bl	8006b84 <HAL_TIM_Base_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM1_Init+0x6a>
	{
		Error_Handler();
 8001f02:	f000 fba7 	bl	8002654 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001f06:	4833      	ldr	r0, [pc, #204]	; (8001fd4 <MX_TIM1_Init+0x138>)
 8001f08:	f004 ff02 	bl	8006d10 <HAL_TIM_IC_Init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_TIM1_Init+0x7a>
	{
		Error_Handler();
 8001f12:	f000 fb9f 	bl	8002654 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001f16:	2304      	movs	r3, #4
 8001f18:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8001f1a:	2370      	movs	r3, #112	; 0x70
 8001f1c:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
	sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8001f22:	2300      	movs	r3, #0
 8001f24:	62bb      	str	r3, [r7, #40]	; 0x28
	sSlaveConfig.TriggerFilter = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001f2a:	f107 031c 	add.w	r3, r7, #28
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4828      	ldr	r0, [pc, #160]	; (8001fd4 <MX_TIM1_Init+0x138>)
 8001f32:	f005 fae3 	bl	80074fc <HAL_TIM_SlaveConfigSynchro>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_TIM1_Init+0xa4>
	{
		Error_Handler();
 8001f3c:	f000 fb8a 	bl	8002654 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f40:	2300      	movs	r3, #0
 8001f42:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61bb      	str	r3, [r7, #24]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f4c:	f107 0310 	add.w	r3, r7, #16
 8001f50:	4619      	mov	r1, r3
 8001f52:	4820      	ldr	r0, [pc, #128]	; (8001fd4 <MX_TIM1_Init+0x138>)
 8001f54:	f006 f8d4 	bl	8008100 <HAL_TIMEx_MasterConfigSynchronization>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM1_Init+0xc6>
	{
		Error_Handler();
 8001f5e:	f000 fb79 	bl	8002654 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001f62:	2302      	movs	r3, #2
 8001f64:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f66:	2301      	movs	r3, #1
 8001f68:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001f72:	463b      	mov	r3, r7
 8001f74:	2200      	movs	r2, #0
 8001f76:	4619      	mov	r1, r3
 8001f78:	4816      	ldr	r0, [pc, #88]	; (8001fd4 <MX_TIM1_Init+0x138>)
 8001f7a:	f005 f90b 	bl	8007194 <HAL_TIM_IC_ConfigChannel>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM1_Init+0xec>
	{
		Error_Handler();
 8001f84:	f000 fb66 	bl	8002654 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001f88:	463b      	mov	r3, r7
 8001f8a:	2204      	movs	r2, #4
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4811      	ldr	r0, [pc, #68]	; (8001fd4 <MX_TIM1_Init+0x138>)
 8001f90:	f005 f900 	bl	8007194 <HAL_TIM_IC_ConfigChannel>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_TIM1_Init+0x102>
	{
		Error_Handler();
 8001f9a:	f000 fb5b 	bl	8002654 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001f9e:	463b      	mov	r3, r7
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	480b      	ldr	r0, [pc, #44]	; (8001fd4 <MX_TIM1_Init+0x138>)
 8001fa6:	f005 f8f5 	bl	8007194 <HAL_TIM_IC_ConfigChannel>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM1_Init+0x118>
	{
		Error_Handler();
 8001fb0:	f000 fb50 	bl	8002654 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001fb4:	463b      	mov	r3, r7
 8001fb6:	220c      	movs	r2, #12
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4806      	ldr	r0, [pc, #24]	; (8001fd4 <MX_TIM1_Init+0x138>)
 8001fbc:	f005 f8ea 	bl	8007194 <HAL_TIM_IC_ConfigChannel>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_TIM1_Init+0x12e>
	{
		Error_Handler();
 8001fc6:	f000 fb45 	bl	8002654 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001fca:	bf00      	nop
 8001fcc:	3730      	adds	r7, #48	; 0x30
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000458 	.word	0x20000458
 8001fd8:	40010000 	.word	0x40010000

08001fdc <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08c      	sub	sp, #48	; 0x30
 8001fe0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001fe2:	f107 031c 	add.w	r3, r7, #28
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	605a      	str	r2, [r3, #4]
 8001fec:	609a      	str	r2, [r3, #8]
 8001fee:	60da      	str	r2, [r3, #12]
 8001ff0:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff2:	f107 0310 	add.w	r3, r7, #16
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	605a      	str	r2, [r3, #4]
 8001ffc:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8001ffe:	463b      	mov	r3, r7
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800200a:	4b32      	ldr	r3, [pc, #200]	; (80020d4 <MX_TIM2_Init+0xf8>)
 800200c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002010:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 215;
 8002012:	4b30      	ldr	r3, [pc, #192]	; (80020d4 <MX_TIM2_Init+0xf8>)
 8002014:	22d7      	movs	r2, #215	; 0xd7
 8002016:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002018:	4b2e      	ldr	r3, [pc, #184]	; (80020d4 <MX_TIM2_Init+0xf8>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 9999;
 800201e:	4b2d      	ldr	r3, [pc, #180]	; (80020d4 <MX_TIM2_Init+0xf8>)
 8002020:	f242 720f 	movw	r2, #9999	; 0x270f
 8002024:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002026:	4b2b      	ldr	r3, [pc, #172]	; (80020d4 <MX_TIM2_Init+0xf8>)
 8002028:	2200      	movs	r2, #0
 800202a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800202c:	4b29      	ldr	r3, [pc, #164]	; (80020d4 <MX_TIM2_Init+0xf8>)
 800202e:	2280      	movs	r2, #128	; 0x80
 8002030:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002032:	4828      	ldr	r0, [pc, #160]	; (80020d4 <MX_TIM2_Init+0xf8>)
 8002034:	f004 fda6 	bl	8006b84 <HAL_TIM_Base_Init>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_TIM2_Init+0x66>
	{
		Error_Handler();
 800203e:	f000 fb09 	bl	8002654 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002042:	4824      	ldr	r0, [pc, #144]	; (80020d4 <MX_TIM2_Init+0xf8>)
 8002044:	f004 fe64 	bl	8006d10 <HAL_TIM_IC_Init>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_TIM2_Init+0x76>
	{
		Error_Handler();
 800204e:	f000 fb01 	bl	8002654 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002052:	2304      	movs	r3, #4
 8002054:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002056:	2300      	movs	r3, #0
 8002058:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800205a:	f107 031c 	add.w	r3, r7, #28
 800205e:	4619      	mov	r1, r3
 8002060:	481c      	ldr	r0, [pc, #112]	; (80020d4 <MX_TIM2_Init+0xf8>)
 8002062:	f005 fa4b 	bl	80074fc <HAL_TIM_SlaveConfigSynchro>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM2_Init+0x94>
	{
		Error_Handler();
 800206c:	f000 faf2 	bl	8002654 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002070:	2300      	movs	r3, #0
 8002072:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002074:	2300      	movs	r3, #0
 8002076:	61bb      	str	r3, [r7, #24]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002078:	f107 0310 	add.w	r3, r7, #16
 800207c:	4619      	mov	r1, r3
 800207e:	4815      	ldr	r0, [pc, #84]	; (80020d4 <MX_TIM2_Init+0xf8>)
 8002080:	f006 f83e 	bl	8008100 <HAL_TIMEx_MasterConfigSynchronization>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_TIM2_Init+0xb2>
	{
		Error_Handler();
 800208a:	f000 fae3 	bl	8002654 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800208e:	2302      	movs	r3, #2
 8002090:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002092:	2301      	movs	r3, #1
 8002094:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002096:	2300      	movs	r3, #0
 8002098:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800209e:	463b      	mov	r3, r7
 80020a0:	2200      	movs	r2, #0
 80020a2:	4619      	mov	r1, r3
 80020a4:	480b      	ldr	r0, [pc, #44]	; (80020d4 <MX_TIM2_Init+0xf8>)
 80020a6:	f005 f875 	bl	8007194 <HAL_TIM_IC_ConfigChannel>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_TIM2_Init+0xd8>
	{
		Error_Handler();
 80020b0:	f000 fad0 	bl	8002654 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80020b4:	463b      	mov	r3, r7
 80020b6:	220c      	movs	r2, #12
 80020b8:	4619      	mov	r1, r3
 80020ba:	4806      	ldr	r0, [pc, #24]	; (80020d4 <MX_TIM2_Init+0xf8>)
 80020bc:	f005 f86a 	bl	8007194 <HAL_TIM_IC_ConfigChannel>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_TIM2_Init+0xee>
	{
		Error_Handler();
 80020c6:	f000 fac5 	bl	8002654 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80020ca:	bf00      	nop
 80020cc:	3730      	adds	r7, #48	; 0x30
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	200004f8 	.word	0x200004f8

080020d8 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08a      	sub	sp, #40	; 0x28
 80020dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020de:	f107 031c 	add.w	r3, r7, #28
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	605a      	str	r2, [r3, #4]
 80020e8:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80020ea:	463b      	mov	r3, r7
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
 80020f8:	615a      	str	r2, [r3, #20]
 80020fa:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80020fc:	4b32      	ldr	r3, [pc, #200]	; (80021c8 <MX_TIM3_Init+0xf0>)
 80020fe:	4a33      	ldr	r2, [pc, #204]	; (80021cc <MX_TIM3_Init+0xf4>)
 8002100:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8002102:	4b31      	ldr	r3, [pc, #196]	; (80021c8 <MX_TIM3_Init+0xf0>)
 8002104:	2200      	movs	r2, #0
 8002106:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002108:	4b2f      	ldr	r3, [pc, #188]	; (80021c8 <MX_TIM3_Init+0xf0>)
 800210a:	2200      	movs	r2, #0
 800210c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 359;
 800210e:	4b2e      	ldr	r3, [pc, #184]	; (80021c8 <MX_TIM3_Init+0xf0>)
 8002110:	f240 1267 	movw	r2, #359	; 0x167
 8002114:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002116:	4b2c      	ldr	r3, [pc, #176]	; (80021c8 <MX_TIM3_Init+0xf0>)
 8002118:	2200      	movs	r2, #0
 800211a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800211c:	4b2a      	ldr	r3, [pc, #168]	; (80021c8 <MX_TIM3_Init+0xf0>)
 800211e:	2280      	movs	r2, #128	; 0x80
 8002120:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002122:	4829      	ldr	r0, [pc, #164]	; (80021c8 <MX_TIM3_Init+0xf0>)
 8002124:	f004 fd84 	bl	8006c30 <HAL_TIM_PWM_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_TIM3_Init+0x5a>
	{
		Error_Handler();
 800212e:	f000 fa91 	bl	8002654 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800213a:	f107 031c 	add.w	r3, r7, #28
 800213e:	4619      	mov	r1, r3
 8002140:	4821      	ldr	r0, [pc, #132]	; (80021c8 <MX_TIM3_Init+0xf0>)
 8002142:	f005 ffdd 	bl	8008100 <HAL_TIMEx_MasterConfigSynchronization>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM3_Init+0x78>
	{
		Error_Handler();
 800214c:	f000 fa82 	bl	8002654 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002150:	2360      	movs	r3, #96	; 0x60
 8002152:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002158:	2300      	movs	r3, #0
 800215a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800215c:	2300      	movs	r3, #0
 800215e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002160:	463b      	mov	r3, r7
 8002162:	2200      	movs	r2, #0
 8002164:	4619      	mov	r1, r3
 8002166:	4818      	ldr	r0, [pc, #96]	; (80021c8 <MX_TIM3_Init+0xf0>)
 8002168:	f005 f8b0 	bl	80072cc <HAL_TIM_PWM_ConfigChannel>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_TIM3_Init+0x9e>
	{
		Error_Handler();
 8002172:	f000 fa6f 	bl	8002654 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002176:	463b      	mov	r3, r7
 8002178:	2204      	movs	r2, #4
 800217a:	4619      	mov	r1, r3
 800217c:	4812      	ldr	r0, [pc, #72]	; (80021c8 <MX_TIM3_Init+0xf0>)
 800217e:	f005 f8a5 	bl	80072cc <HAL_TIM_PWM_ConfigChannel>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_TIM3_Init+0xb4>
	{
		Error_Handler();
 8002188:	f000 fa64 	bl	8002654 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800218c:	463b      	mov	r3, r7
 800218e:	2208      	movs	r2, #8
 8002190:	4619      	mov	r1, r3
 8002192:	480d      	ldr	r0, [pc, #52]	; (80021c8 <MX_TIM3_Init+0xf0>)
 8002194:	f005 f89a 	bl	80072cc <HAL_TIM_PWM_ConfigChannel>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_TIM3_Init+0xca>
	{
		Error_Handler();
 800219e:	f000 fa59 	bl	8002654 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021a2:	463b      	mov	r3, r7
 80021a4:	220c      	movs	r2, #12
 80021a6:	4619      	mov	r1, r3
 80021a8:	4807      	ldr	r0, [pc, #28]	; (80021c8 <MX_TIM3_Init+0xf0>)
 80021aa:	f005 f88f 	bl	80072cc <HAL_TIM_PWM_ConfigChannel>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_TIM3_Init+0xe0>
	{
		Error_Handler();
 80021b4:	f000 fa4e 	bl	8002654 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80021b8:	4803      	ldr	r0, [pc, #12]	; (80021c8 <MX_TIM3_Init+0xf0>)
 80021ba:	f000 fd55 	bl	8002c68 <HAL_TIM_MspPostInit>

}
 80021be:	bf00      	nop
 80021c0:	3728      	adds	r7, #40	; 0x28
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	200002d4 	.word	0x200002d4
 80021cc:	40000400 	.word	0x40000400

080021d0 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08a      	sub	sp, #40	; 0x28
 80021d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d6:	f107 031c 	add.w	r3, r7, #28
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	605a      	str	r2, [r3, #4]
 80021e0:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80021e2:	463b      	mov	r3, r7
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	611a      	str	r2, [r3, #16]
 80021f0:	615a      	str	r2, [r3, #20]
 80021f2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80021f4:	4b2c      	ldr	r3, [pc, #176]	; (80022a8 <MX_TIM4_Init+0xd8>)
 80021f6:	4a2d      	ldr	r2, [pc, #180]	; (80022ac <MX_TIM4_Init+0xdc>)
 80021f8:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 80021fa:	4b2b      	ldr	r3, [pc, #172]	; (80022a8 <MX_TIM4_Init+0xd8>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002200:	4b29      	ldr	r3, [pc, #164]	; (80022a8 <MX_TIM4_Init+0xd8>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 359;
 8002206:	4b28      	ldr	r3, [pc, #160]	; (80022a8 <MX_TIM4_Init+0xd8>)
 8002208:	f240 1267 	movw	r2, #359	; 0x167
 800220c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800220e:	4b26      	ldr	r3, [pc, #152]	; (80022a8 <MX_TIM4_Init+0xd8>)
 8002210:	2200      	movs	r2, #0
 8002212:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002214:	4b24      	ldr	r3, [pc, #144]	; (80022a8 <MX_TIM4_Init+0xd8>)
 8002216:	2280      	movs	r2, #128	; 0x80
 8002218:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800221a:	4823      	ldr	r0, [pc, #140]	; (80022a8 <MX_TIM4_Init+0xd8>)
 800221c:	f004 fcdd 	bl	8006bda <HAL_TIM_OC_Init>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_TIM4_Init+0x5a>
	{
		Error_Handler();
 8002226:	f000 fa15 	bl	8002654 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800222e:	2300      	movs	r3, #0
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002232:	f107 031c 	add.w	r3, r7, #28
 8002236:	4619      	mov	r1, r3
 8002238:	481b      	ldr	r0, [pc, #108]	; (80022a8 <MX_TIM4_Init+0xd8>)
 800223a:	f005 ff61 	bl	8008100 <HAL_TIMEx_MasterConfigSynchronization>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM4_Init+0x78>
	{
		Error_Handler();
 8002244:	f000 fa06 	bl	8002654 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8002248:	2310      	movs	r3, #16
 800224a:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 1;
 800224c:	2301      	movs	r3, #1
 800224e:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002250:	2300      	movs	r3, #0
 8002252:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002254:	2300      	movs	r3, #0
 8002256:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002258:	463b      	mov	r3, r7
 800225a:	2200      	movs	r2, #0
 800225c:	4619      	mov	r1, r3
 800225e:	4812      	ldr	r0, [pc, #72]	; (80022a8 <MX_TIM4_Init+0xd8>)
 8002260:	f004 ff1a 	bl	8007098 <HAL_TIM_OC_ConfigChannel>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_TIM4_Init+0x9e>
	{
		Error_Handler();
 800226a:	f000 f9f3 	bl	8002654 <Error_Handler>
	}
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800226e:	463b      	mov	r3, r7
 8002270:	2204      	movs	r2, #4
 8002272:	4619      	mov	r1, r3
 8002274:	480c      	ldr	r0, [pc, #48]	; (80022a8 <MX_TIM4_Init+0xd8>)
 8002276:	f004 ff0f 	bl	8007098 <HAL_TIM_OC_ConfigChannel>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_TIM4_Init+0xb4>
	{
		Error_Handler();
 8002280:	f000 f9e8 	bl	8002654 <Error_Handler>
	}
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002284:	463b      	mov	r3, r7
 8002286:	2208      	movs	r2, #8
 8002288:	4619      	mov	r1, r3
 800228a:	4807      	ldr	r0, [pc, #28]	; (80022a8 <MX_TIM4_Init+0xd8>)
 800228c:	f004 ff04 	bl	8007098 <HAL_TIM_OC_ConfigChannel>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_TIM4_Init+0xca>
	{
		Error_Handler();
 8002296:	f000 f9dd 	bl	8002654 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 800229a:	4803      	ldr	r0, [pc, #12]	; (80022a8 <MX_TIM4_Init+0xd8>)
 800229c:	f000 fce4 	bl	8002c68 <HAL_TIM_MspPostInit>

}
 80022a0:	bf00      	nop
 80022a2:	3728      	adds	r7, #40	; 0x28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20000108 	.word	0x20000108
 80022ac:	40000800 	.word	0x40000800

080022b0 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	; 0x28
 80022b4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b6:	f107 031c 	add.w	r3, r7, #28
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	605a      	str	r2, [r3, #4]
 80022c0:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80022c2:	463b      	mov	r3, r7
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]
 80022d0:	615a      	str	r2, [r3, #20]
 80022d2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 80022d4:	4b21      	ldr	r3, [pc, #132]	; (800235c <MX_TIM5_Init+0xac>)
 80022d6:	4a22      	ldr	r2, [pc, #136]	; (8002360 <MX_TIM5_Init+0xb0>)
 80022d8:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 80022da:	4b20      	ldr	r3, [pc, #128]	; (800235c <MX_TIM5_Init+0xac>)
 80022dc:	2200      	movs	r2, #0
 80022de:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e0:	4b1e      	ldr	r3, [pc, #120]	; (800235c <MX_TIM5_Init+0xac>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 359;
 80022e6:	4b1d      	ldr	r3, [pc, #116]	; (800235c <MX_TIM5_Init+0xac>)
 80022e8:	f240 1267 	movw	r2, #359	; 0x167
 80022ec:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ee:	4b1b      	ldr	r3, [pc, #108]	; (800235c <MX_TIM5_Init+0xac>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022f4:	4b19      	ldr	r3, [pc, #100]	; (800235c <MX_TIM5_Init+0xac>)
 80022f6:	2280      	movs	r2, #128	; 0x80
 80022f8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 80022fa:	4818      	ldr	r0, [pc, #96]	; (800235c <MX_TIM5_Init+0xac>)
 80022fc:	f004 fc6d 	bl	8006bda <HAL_TIM_OC_Init>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_TIM5_Init+0x5a>
	{
		Error_Handler();
 8002306:	f000 f9a5 	bl	8002654 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800230a:	2300      	movs	r3, #0
 800230c:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800230e:	2300      	movs	r3, #0
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002312:	f107 031c 	add.w	r3, r7, #28
 8002316:	4619      	mov	r1, r3
 8002318:	4810      	ldr	r0, [pc, #64]	; (800235c <MX_TIM5_Init+0xac>)
 800231a:	f005 fef1 	bl	8008100 <HAL_TIMEx_MasterConfigSynchronization>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_TIM5_Init+0x78>
	{
		Error_Handler();
 8002324:	f000 f996 	bl	8002654 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8002328:	2310      	movs	r3, #16
 800232a:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 1;
 800232c:	2301      	movs	r3, #1
 800232e:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002330:	2300      	movs	r3, #0
 8002332:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002334:	2300      	movs	r3, #0
 8002336:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002338:	463b      	mov	r3, r7
 800233a:	2204      	movs	r2, #4
 800233c:	4619      	mov	r1, r3
 800233e:	4807      	ldr	r0, [pc, #28]	; (800235c <MX_TIM5_Init+0xac>)
 8002340:	f004 feaa 	bl	8007098 <HAL_TIM_OC_ConfigChannel>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_TIM5_Init+0x9e>
	{
		Error_Handler();
 800234a:	f000 f983 	bl	8002654 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 800234e:	4803      	ldr	r0, [pc, #12]	; (800235c <MX_TIM5_Init+0xac>)
 8002350:	f000 fc8a 	bl	8002c68 <HAL_TIM_MspPostInit>

}
 8002354:	bf00      	nop
 8002356:	3728      	adds	r7, #40	; 0x28
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000294 	.word	0x20000294
 8002360:	40000c00 	.word	0x40000c00

08002364 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8002368:	4b14      	ldr	r3, [pc, #80]	; (80023bc <MX_USART3_UART_Init+0x58>)
 800236a:	4a15      	ldr	r2, [pc, #84]	; (80023c0 <MX_USART3_UART_Init+0x5c>)
 800236c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800236e:	4b13      	ldr	r3, [pc, #76]	; (80023bc <MX_USART3_UART_Init+0x58>)
 8002370:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002374:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002376:	4b11      	ldr	r3, [pc, #68]	; (80023bc <MX_USART3_UART_Init+0x58>)
 8002378:	2200      	movs	r2, #0
 800237a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800237c:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <MX_USART3_UART_Init+0x58>)
 800237e:	2200      	movs	r2, #0
 8002380:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8002382:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <MX_USART3_UART_Init+0x58>)
 8002384:	2200      	movs	r2, #0
 8002386:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8002388:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <MX_USART3_UART_Init+0x58>)
 800238a:	220c      	movs	r2, #12
 800238c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800238e:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <MX_USART3_UART_Init+0x58>)
 8002390:	2200      	movs	r2, #0
 8002392:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002394:	4b09      	ldr	r3, [pc, #36]	; (80023bc <MX_USART3_UART_Init+0x58>)
 8002396:	2200      	movs	r2, #0
 8002398:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800239a:	4b08      	ldr	r3, [pc, #32]	; (80023bc <MX_USART3_UART_Init+0x58>)
 800239c:	2200      	movs	r2, #0
 800239e:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <MX_USART3_UART_Init+0x58>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80023a6:	4805      	ldr	r0, [pc, #20]	; (80023bc <MX_USART3_UART_Init+0x58>)
 80023a8:	f005 ff56 	bl	8008258 <HAL_UART_Init>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_USART3_UART_Init+0x52>
	{
		Error_Handler();
 80023b2:	f000 f94f 	bl	8002654 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20000148 	.word	0x20000148
 80023c0:	40004800 	.word	0x40004800

080023c4 <MX_USB_OTG_FS_USB_Init>:
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_USB_Init(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 1 */
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
	...

080023d4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80023da:	4b20      	ldr	r3, [pc, #128]	; (800245c <MX_DMA_Init+0x88>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	4a1f      	ldr	r2, [pc, #124]	; (800245c <MX_DMA_Init+0x88>)
 80023e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023e4:	6313      	str	r3, [r2, #48]	; 0x30
 80023e6:	4b1d      	ldr	r3, [pc, #116]	; (800245c <MX_DMA_Init+0x88>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ee:	607b      	str	r3, [r7, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80023f2:	2200      	movs	r2, #0
 80023f4:	2100      	movs	r1, #0
 80023f6:	200b      	movs	r0, #11
 80023f8:	f001 fa09 	bl	800380e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80023fc:	200b      	movs	r0, #11
 80023fe:	f001 fa22 	bl	8003846 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002402:	2200      	movs	r2, #0
 8002404:	2100      	movs	r1, #0
 8002406:	200e      	movs	r0, #14
 8002408:	f001 fa01 	bl	800380e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800240c:	200e      	movs	r0, #14
 800240e:	f001 fa1a 	bl	8003846 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002412:	2200      	movs	r2, #0
 8002414:	2100      	movs	r1, #0
 8002416:	200f      	movs	r0, #15
 8002418:	f001 f9f9 	bl	800380e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800241c:	200f      	movs	r0, #15
 800241e:	f001 fa12 	bl	8003846 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002422:	2200      	movs	r2, #0
 8002424:	2100      	movs	r1, #0
 8002426:	2010      	movs	r0, #16
 8002428:	f001 f9f1 	bl	800380e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800242c:	2010      	movs	r0, #16
 800242e:	f001 fa0a 	bl	8003846 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002432:	2200      	movs	r2, #0
 8002434:	2100      	movs	r1, #0
 8002436:	2011      	movs	r0, #17
 8002438:	f001 f9e9 	bl	800380e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800243c:	2011      	movs	r0, #17
 800243e:	f001 fa02 	bl	8003846 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002442:	2200      	movs	r2, #0
 8002444:	2100      	movs	r1, #0
 8002446:	202f      	movs	r0, #47	; 0x2f
 8002448:	f001 f9e1 	bl	800380e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800244c:	202f      	movs	r0, #47	; 0x2f
 800244e:	f001 f9fa 	bl	8003846 <HAL_NVIC_EnableIRQ>

}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40023800 	.word	0x40023800

08002460 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08e      	sub	sp, #56	; 0x38
 8002464:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]
 8002470:	609a      	str	r2, [r3, #8]
 8002472:	60da      	str	r2, [r3, #12]
 8002474:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002476:	4b70      	ldr	r3, [pc, #448]	; (8002638 <MX_GPIO_Init+0x1d8>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	4a6f      	ldr	r2, [pc, #444]	; (8002638 <MX_GPIO_Init+0x1d8>)
 800247c:	f043 0304 	orr.w	r3, r3, #4
 8002480:	6313      	str	r3, [r2, #48]	; 0x30
 8002482:	4b6d      	ldr	r3, [pc, #436]	; (8002638 <MX_GPIO_Init+0x1d8>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	f003 0304 	and.w	r3, r3, #4
 800248a:	623b      	str	r3, [r7, #32]
 800248c:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800248e:	4b6a      	ldr	r3, [pc, #424]	; (8002638 <MX_GPIO_Init+0x1d8>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	4a69      	ldr	r2, [pc, #420]	; (8002638 <MX_GPIO_Init+0x1d8>)
 8002494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002498:	6313      	str	r3, [r2, #48]	; 0x30
 800249a:	4b67      	ldr	r3, [pc, #412]	; (8002638 <MX_GPIO_Init+0x1d8>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a2:	61fb      	str	r3, [r7, #28]
 80024a4:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80024a6:	4b64      	ldr	r3, [pc, #400]	; (8002638 <MX_GPIO_Init+0x1d8>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	4a63      	ldr	r2, [pc, #396]	; (8002638 <MX_GPIO_Init+0x1d8>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	6313      	str	r3, [r2, #48]	; 0x30
 80024b2:	4b61      	ldr	r3, [pc, #388]	; (8002638 <MX_GPIO_Init+0x1d8>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	61bb      	str	r3, [r7, #24]
 80024bc:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80024be:	4b5e      	ldr	r3, [pc, #376]	; (8002638 <MX_GPIO_Init+0x1d8>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	4a5d      	ldr	r2, [pc, #372]	; (8002638 <MX_GPIO_Init+0x1d8>)
 80024c4:	f043 0302 	orr.w	r3, r3, #2
 80024c8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ca:	4b5b      	ldr	r3, [pc, #364]	; (8002638 <MX_GPIO_Init+0x1d8>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80024d6:	4b58      	ldr	r3, [pc, #352]	; (8002638 <MX_GPIO_Init+0x1d8>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	4a57      	ldr	r2, [pc, #348]	; (8002638 <MX_GPIO_Init+0x1d8>)
 80024dc:	f043 0320 	orr.w	r3, r3, #32
 80024e0:	6313      	str	r3, [r2, #48]	; 0x30
 80024e2:	4b55      	ldr	r3, [pc, #340]	; (8002638 <MX_GPIO_Init+0x1d8>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f003 0320 	and.w	r3, r3, #32
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80024ee:	4b52      	ldr	r3, [pc, #328]	; (8002638 <MX_GPIO_Init+0x1d8>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	4a51      	ldr	r2, [pc, #324]	; (8002638 <MX_GPIO_Init+0x1d8>)
 80024f4:	f043 0310 	orr.w	r3, r3, #16
 80024f8:	6313      	str	r3, [r2, #48]	; 0x30
 80024fa:	4b4f      	ldr	r3, [pc, #316]	; (8002638 <MX_GPIO_Init+0x1d8>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002506:	4b4c      	ldr	r3, [pc, #304]	; (8002638 <MX_GPIO_Init+0x1d8>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	4a4b      	ldr	r2, [pc, #300]	; (8002638 <MX_GPIO_Init+0x1d8>)
 800250c:	f043 0308 	orr.w	r3, r3, #8
 8002510:	6313      	str	r3, [r2, #48]	; 0x30
 8002512:	4b49      	ldr	r3, [pc, #292]	; (8002638 <MX_GPIO_Init+0x1d8>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800251e:	4b46      	ldr	r3, [pc, #280]	; (8002638 <MX_GPIO_Init+0x1d8>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	4a45      	ldr	r2, [pc, #276]	; (8002638 <MX_GPIO_Init+0x1d8>)
 8002524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002528:	6313      	str	r3, [r2, #48]	; 0x30
 800252a:	4b43      	ldr	r3, [pc, #268]	; (8002638 <MX_GPIO_Init+0x1d8>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002532:	607b      	str	r3, [r7, #4]
 8002534:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002536:	2200      	movs	r2, #0
 8002538:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800253c:	483f      	ldr	r0, [pc, #252]	; (800263c <MX_GPIO_Init+0x1dc>)
 800253e:	f001 fedb 	bl	80042f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8002542:	2200      	movs	r2, #0
 8002544:	2140      	movs	r1, #64	; 0x40
 8002546:	483e      	ldr	r0, [pc, #248]	; (8002640 <MX_GPIO_Init+0x1e0>)
 8002548:	f001 fed6 	bl	80042f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 800254c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002552:	4b3c      	ldr	r3, [pc, #240]	; (8002644 <MX_GPIO_Init+0x1e4>)
 8002554:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800255a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800255e:	4619      	mov	r1, r3
 8002560:	4839      	ldr	r0, [pc, #228]	; (8002648 <MX_GPIO_Init+0x1e8>)
 8002562:	f001 fd2f 	bl	8003fc4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PF14 PF15 */
	GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002566:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800256a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800256c:	2300      	movs	r3, #0
 800256e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002578:	4619      	mov	r1, r3
 800257a:	4834      	ldr	r0, [pc, #208]	; (800264c <MX_GPIO_Init+0x1ec>)
 800257c:	f001 fd22 	bl	8003fc4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8002580:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002586:	2301      	movs	r3, #1
 8002588:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258a:	2300      	movs	r3, #0
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258e:	2300      	movs	r3, #0
 8002590:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002596:	4619      	mov	r1, r3
 8002598:	4828      	ldr	r0, [pc, #160]	; (800263c <MX_GPIO_Init+0x1dc>)
 800259a:	f001 fd13 	bl	8003fc4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PG2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800259e:	2304      	movs	r3, #4
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a2:	2302      	movs	r3, #2
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025aa:	2303      	movs	r3, #3
 80025ac:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025ae:	230c      	movs	r3, #12
 80025b0:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b6:	4619      	mov	r1, r3
 80025b8:	4821      	ldr	r0, [pc, #132]	; (8002640 <MX_GPIO_Init+0x1e0>)
 80025ba:	f001 fd03 	bl	8003fc4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PG6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025be:	2340      	movs	r3, #64	; 0x40
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c2:	2301      	movs	r3, #1
 80025c4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ca:	2300      	movs	r3, #0
 80025cc:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d2:	4619      	mov	r1, r3
 80025d4:	481a      	ldr	r0, [pc, #104]	; (8002640 <MX_GPIO_Init+0x1e0>)
 80025d6:	f001 fcf5 	bl	8003fc4 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025de:	2300      	movs	r3, #0
 80025e0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80025e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ea:	4619      	mov	r1, r3
 80025ec:	4814      	ldr	r0, [pc, #80]	; (8002640 <MX_GPIO_Init+0x1e0>)
 80025ee:	f001 fce9 	bl	8003fc4 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_SOF_Pin PA10 USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_SOF_Pin|GPIO_PIN_10|USB_DM_Pin|USB_DP_Pin;
 80025f2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f8:	2302      	movs	r3, #2
 80025fa:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002600:	2303      	movs	r3, #3
 8002602:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002604:	230a      	movs	r3, #10
 8002606:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800260c:	4619      	mov	r1, r3
 800260e:	4810      	ldr	r0, [pc, #64]	; (8002650 <MX_GPIO_Init+0x1f0>)
 8002610:	f001 fcd8 	bl	8003fc4 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002614:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800261a:	2300      	movs	r3, #0
 800261c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002626:	4619      	mov	r1, r3
 8002628:	4809      	ldr	r0, [pc, #36]	; (8002650 <MX_GPIO_Init+0x1f0>)
 800262a:	f001 fccb 	bl	8003fc4 <HAL_GPIO_Init>

}
 800262e:	bf00      	nop
 8002630:	3738      	adds	r7, #56	; 0x38
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40023800 	.word	0x40023800
 800263c:	40020400 	.word	0x40020400
 8002640:	40021800 	.word	0x40021800
 8002644:	10110000 	.word	0x10110000
 8002648:	40020800 	.word	0x40020800
 800264c:	40021400 	.word	0x40021400
 8002650:	40020000 	.word	0x40020000

08002654 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800266a:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <HAL_MspInit+0x44>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	4a0e      	ldr	r2, [pc, #56]	; (80026a8 <HAL_MspInit+0x44>)
 8002670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002674:	6413      	str	r3, [r2, #64]	; 0x40
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <HAL_MspInit+0x44>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267e:	607b      	str	r3, [r7, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002682:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <HAL_MspInit+0x44>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	4a08      	ldr	r2, [pc, #32]	; (80026a8 <HAL_MspInit+0x44>)
 8002688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800268c:	6453      	str	r3, [r2, #68]	; 0x44
 800268e:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <HAL_MspInit+0x44>)
 8002690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002696:	603b      	str	r3, [r7, #0]
 8002698:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40023800 	.word	0x40023800

080026ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08a      	sub	sp, #40	; 0x28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a15      	ldr	r2, [pc, #84]	; (8002720 <HAL_ADC_MspInit+0x74>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d123      	bne.n	8002716 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026ce:	4b15      	ldr	r3, [pc, #84]	; (8002724 <HAL_ADC_MspInit+0x78>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	4a14      	ldr	r2, [pc, #80]	; (8002724 <HAL_ADC_MspInit+0x78>)
 80026d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d8:	6453      	str	r3, [r2, #68]	; 0x44
 80026da:	4b12      	ldr	r3, [pc, #72]	; (8002724 <HAL_ADC_MspInit+0x78>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e6:	4b0f      	ldr	r3, [pc, #60]	; (8002724 <HAL_ADC_MspInit+0x78>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	4a0e      	ldr	r2, [pc, #56]	; (8002724 <HAL_ADC_MspInit+0x78>)
 80026ec:	f043 0302 	orr.w	r3, r3, #2
 80026f0:	6313      	str	r3, [r2, #48]	; 0x30
 80026f2:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <HAL_ADC_MspInit+0x78>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_THROTTLE_CONTROL_Pin;
 80026fe:	2302      	movs	r3, #2
 8002700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002702:	2303      	movs	r3, #3
 8002704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_THROTTLE_CONTROL_GPIO_Port, &GPIO_InitStruct);
 800270a:	f107 0314 	add.w	r3, r7, #20
 800270e:	4619      	mov	r1, r3
 8002710:	4805      	ldr	r0, [pc, #20]	; (8002728 <HAL_ADC_MspInit+0x7c>)
 8002712:	f001 fc57 	bl	8003fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002716:	bf00      	nop
 8002718:	3728      	adds	r7, #40	; 0x28
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40012000 	.word	0x40012000
 8002724:	40023800 	.word	0x40023800
 8002728:	40020400 	.word	0x40020400

0800272c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08a      	sub	sp, #40	; 0x28
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002734:	f107 0314 	add.w	r3, r7, #20
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	605a      	str	r2, [r3, #4]
 800273e:	609a      	str	r2, [r3, #8]
 8002740:	60da      	str	r2, [r3, #12]
 8002742:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a57      	ldr	r2, [pc, #348]	; (80028a8 <HAL_I2C_MspInit+0x17c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	f040 80a7 	bne.w	800289e <HAL_I2C_MspInit+0x172>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002750:	4b56      	ldr	r3, [pc, #344]	; (80028ac <HAL_I2C_MspInit+0x180>)
 8002752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002754:	4a55      	ldr	r2, [pc, #340]	; (80028ac <HAL_I2C_MspInit+0x180>)
 8002756:	f043 0302 	orr.w	r3, r3, #2
 800275a:	6313      	str	r3, [r2, #48]	; 0x30
 800275c:	4b53      	ldr	r3, [pc, #332]	; (80028ac <HAL_I2C_MspInit+0x180>)
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002768:	f44f 7340 	mov.w	r3, #768	; 0x300
 800276c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800276e:	2312      	movs	r3, #18
 8002770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002772:	2301      	movs	r3, #1
 8002774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002776:	2303      	movs	r3, #3
 8002778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800277a:	2304      	movs	r3, #4
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800277e:	f107 0314 	add.w	r3, r7, #20
 8002782:	4619      	mov	r1, r3
 8002784:	484a      	ldr	r0, [pc, #296]	; (80028b0 <HAL_I2C_MspInit+0x184>)
 8002786:	f001 fc1d 	bl	8003fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800278a:	4b48      	ldr	r3, [pc, #288]	; (80028ac <HAL_I2C_MspInit+0x180>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	4a47      	ldr	r2, [pc, #284]	; (80028ac <HAL_I2C_MspInit+0x180>)
 8002790:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002794:	6413      	str	r3, [r2, #64]	; 0x40
 8002796:	4b45      	ldr	r3, [pc, #276]	; (80028ac <HAL_I2C_MspInit+0x180>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 80027a2:	4b44      	ldr	r3, [pc, #272]	; (80028b4 <HAL_I2C_MspInit+0x188>)
 80027a4:	4a44      	ldr	r2, [pc, #272]	; (80028b8 <HAL_I2C_MspInit+0x18c>)
 80027a6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80027a8:	4b42      	ldr	r3, [pc, #264]	; (80028b4 <HAL_I2C_MspInit+0x188>)
 80027aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027ae:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027b0:	4b40      	ldr	r3, [pc, #256]	; (80028b4 <HAL_I2C_MspInit+0x188>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027b6:	4b3f      	ldr	r3, [pc, #252]	; (80028b4 <HAL_I2C_MspInit+0x188>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027bc:	4b3d      	ldr	r3, [pc, #244]	; (80028b4 <HAL_I2C_MspInit+0x188>)
 80027be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027c2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027c4:	4b3b      	ldr	r3, [pc, #236]	; (80028b4 <HAL_I2C_MspInit+0x188>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027ca:	4b3a      	ldr	r3, [pc, #232]	; (80028b4 <HAL_I2C_MspInit+0x188>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80027d0:	4b38      	ldr	r3, [pc, #224]	; (80028b4 <HAL_I2C_MspInit+0x188>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80027d6:	4b37      	ldr	r3, [pc, #220]	; (80028b4 <HAL_I2C_MspInit+0x188>)
 80027d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027dc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80027de:	4b35      	ldr	r3, [pc, #212]	; (80028b4 <HAL_I2C_MspInit+0x188>)
 80027e0:	2204      	movs	r2, #4
 80027e2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80027e4:	4b33      	ldr	r3, [pc, #204]	; (80028b4 <HAL_I2C_MspInit+0x188>)
 80027e6:	2203      	movs	r2, #3
 80027e8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80027ea:	4b32      	ldr	r3, [pc, #200]	; (80028b4 <HAL_I2C_MspInit+0x188>)
 80027ec:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80027f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80027f2:	4b30      	ldr	r3, [pc, #192]	; (80028b4 <HAL_I2C_MspInit+0x188>)
 80027f4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80027f8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80027fa:	482e      	ldr	r0, [pc, #184]	; (80028b4 <HAL_I2C_MspInit+0x188>)
 80027fc:	f001 f83e 	bl	800387c <HAL_DMA_Init>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_I2C_MspInit+0xde>
    {
      Error_Handler();
 8002806:	f7ff ff25 	bl	8002654 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a29      	ldr	r2, [pc, #164]	; (80028b4 <HAL_I2C_MspInit+0x188>)
 800280e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002810:	4a28      	ldr	r2, [pc, #160]	; (80028b4 <HAL_I2C_MspInit+0x188>)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002816:	4b29      	ldr	r3, [pc, #164]	; (80028bc <HAL_I2C_MspInit+0x190>)
 8002818:	4a29      	ldr	r2, [pc, #164]	; (80028c0 <HAL_I2C_MspInit+0x194>)
 800281a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800281c:	4b27      	ldr	r3, [pc, #156]	; (80028bc <HAL_I2C_MspInit+0x190>)
 800281e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002822:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002824:	4b25      	ldr	r3, [pc, #148]	; (80028bc <HAL_I2C_MspInit+0x190>)
 8002826:	2240      	movs	r2, #64	; 0x40
 8002828:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800282a:	4b24      	ldr	r3, [pc, #144]	; (80028bc <HAL_I2C_MspInit+0x190>)
 800282c:	2200      	movs	r2, #0
 800282e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002830:	4b22      	ldr	r3, [pc, #136]	; (80028bc <HAL_I2C_MspInit+0x190>)
 8002832:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002836:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002838:	4b20      	ldr	r3, [pc, #128]	; (80028bc <HAL_I2C_MspInit+0x190>)
 800283a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800283e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002840:	4b1e      	ldr	r3, [pc, #120]	; (80028bc <HAL_I2C_MspInit+0x190>)
 8002842:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002846:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002848:	4b1c      	ldr	r3, [pc, #112]	; (80028bc <HAL_I2C_MspInit+0x190>)
 800284a:	2200      	movs	r2, #0
 800284c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800284e:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <HAL_I2C_MspInit+0x190>)
 8002850:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002854:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002856:	4b19      	ldr	r3, [pc, #100]	; (80028bc <HAL_I2C_MspInit+0x190>)
 8002858:	2204      	movs	r2, #4
 800285a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800285c:	4b17      	ldr	r3, [pc, #92]	; (80028bc <HAL_I2C_MspInit+0x190>)
 800285e:	2203      	movs	r2, #3
 8002860:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002862:	4b16      	ldr	r3, [pc, #88]	; (80028bc <HAL_I2C_MspInit+0x190>)
 8002864:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002868:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800286a:	4b14      	ldr	r3, [pc, #80]	; (80028bc <HAL_I2C_MspInit+0x190>)
 800286c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002870:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002872:	4812      	ldr	r0, [pc, #72]	; (80028bc <HAL_I2C_MspInit+0x190>)
 8002874:	f001 f802 	bl	800387c <HAL_DMA_Init>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_I2C_MspInit+0x156>
    {
      Error_Handler();
 800287e:	f7ff fee9 	bl	8002654 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a0d      	ldr	r2, [pc, #52]	; (80028bc <HAL_I2C_MspInit+0x190>)
 8002886:	639a      	str	r2, [r3, #56]	; 0x38
 8002888:	4a0c      	ldr	r2, [pc, #48]	; (80028bc <HAL_I2C_MspInit+0x190>)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800288e:	2200      	movs	r2, #0
 8002890:	2100      	movs	r1, #0
 8002892:	201f      	movs	r0, #31
 8002894:	f000 ffbb 	bl	800380e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002898:	201f      	movs	r0, #31
 800289a:	f000 ffd4 	bl	8003846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800289e:	bf00      	nop
 80028a0:	3728      	adds	r7, #40	; 0x28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40005400 	.word	0x40005400
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40020400 	.word	0x40020400
 80028b4:	20000498 	.word	0x20000498
 80028b8:	40026088 	.word	0x40026088
 80028bc:	200001d8 	.word	0x200001d8
 80028c0:	400260a0 	.word	0x400260a0

080028c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08c      	sub	sp, #48	; 0x30
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028cc:	f107 031c 	add.w	r3, r7, #28
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	60da      	str	r2, [r3, #12]
 80028da:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a36      	ldr	r2, [pc, #216]	; (80029bc <HAL_TIM_Base_MspInit+0xf8>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d131      	bne.n	800294a <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028e6:	4b36      	ldr	r3, [pc, #216]	; (80029c0 <HAL_TIM_Base_MspInit+0xfc>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	4a35      	ldr	r2, [pc, #212]	; (80029c0 <HAL_TIM_Base_MspInit+0xfc>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	6453      	str	r3, [r2, #68]	; 0x44
 80028f2:	4b33      	ldr	r3, [pc, #204]	; (80029c0 <HAL_TIM_Base_MspInit+0xfc>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	61bb      	str	r3, [r7, #24]
 80028fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028fe:	4b30      	ldr	r3, [pc, #192]	; (80029c0 <HAL_TIM_Base_MspInit+0xfc>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	4a2f      	ldr	r2, [pc, #188]	; (80029c0 <HAL_TIM_Base_MspInit+0xfc>)
 8002904:	f043 0310 	orr.w	r3, r3, #16
 8002908:	6313      	str	r3, [r2, #48]	; 0x30
 800290a:	4b2d      	ldr	r3, [pc, #180]	; (80029c0 <HAL_TIM_Base_MspInit+0xfc>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	f003 0310 	and.w	r3, r3, #16
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	697b      	ldr	r3, [r7, #20]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13
 8002916:	f44f 43d5 	mov.w	r3, #27264	; 0x6a80
 800291a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291c:	2302      	movs	r3, #2
 800291e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002924:	2300      	movs	r3, #0
 8002926:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002928:	2301      	movs	r3, #1
 800292a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800292c:	f107 031c 	add.w	r3, r7, #28
 8002930:	4619      	mov	r1, r3
 8002932:	4824      	ldr	r0, [pc, #144]	; (80029c4 <HAL_TIM_Base_MspInit+0x100>)
 8002934:	f001 fb46 	bl	8003fc4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002938:	2200      	movs	r2, #0
 800293a:	2100      	movs	r1, #0
 800293c:	201b      	movs	r0, #27
 800293e:	f000 ff66 	bl	800380e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002942:	201b      	movs	r0, #27
 8002944:	f000 ff7f 	bl	8003846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002948:	e034      	b.n	80029b4 <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM2)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002952:	d12f      	bne.n	80029b4 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002954:	4b1a      	ldr	r3, [pc, #104]	; (80029c0 <HAL_TIM_Base_MspInit+0xfc>)
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	4a19      	ldr	r2, [pc, #100]	; (80029c0 <HAL_TIM_Base_MspInit+0xfc>)
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	6413      	str	r3, [r2, #64]	; 0x40
 8002960:	4b17      	ldr	r3, [pc, #92]	; (80029c0 <HAL_TIM_Base_MspInit+0xfc>)
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800296c:	4b14      	ldr	r3, [pc, #80]	; (80029c0 <HAL_TIM_Base_MspInit+0xfc>)
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	4a13      	ldr	r2, [pc, #76]	; (80029c0 <HAL_TIM_Base_MspInit+0xfc>)
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	6313      	str	r3, [r2, #48]	; 0x30
 8002978:	4b11      	ldr	r3, [pc, #68]	; (80029c0 <HAL_TIM_Base_MspInit+0xfc>)
 800297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8002984:	2309      	movs	r3, #9
 8002986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002988:	2302      	movs	r3, #2
 800298a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298c:	2300      	movs	r3, #0
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002990:	2300      	movs	r3, #0
 8002992:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002994:	2301      	movs	r3, #1
 8002996:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002998:	f107 031c 	add.w	r3, r7, #28
 800299c:	4619      	mov	r1, r3
 800299e:	480a      	ldr	r0, [pc, #40]	; (80029c8 <HAL_TIM_Base_MspInit+0x104>)
 80029a0:	f001 fb10 	bl	8003fc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029a4:	2200      	movs	r2, #0
 80029a6:	2100      	movs	r1, #0
 80029a8:	201c      	movs	r0, #28
 80029aa:	f000 ff30 	bl	800380e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029ae:	201c      	movs	r0, #28
 80029b0:	f000 ff49 	bl	8003846 <HAL_NVIC_EnableIRQ>
}
 80029b4:	bf00      	nop
 80029b6:	3730      	adds	r7, #48	; 0x30
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40010000 	.word	0x40010000
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40021000 	.word	0x40021000
 80029c8:	40020000 	.word	0x40020000

080029cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a0a      	ldr	r2, [pc, #40]	; (8002a04 <HAL_TIM_PWM_MspInit+0x38>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d10b      	bne.n	80029f6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029de:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <HAL_TIM_PWM_MspInit+0x3c>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	4a09      	ldr	r2, [pc, #36]	; (8002a08 <HAL_TIM_PWM_MspInit+0x3c>)
 80029e4:	f043 0302 	orr.w	r3, r3, #2
 80029e8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ea:	4b07      	ldr	r3, [pc, #28]	; (8002a08 <HAL_TIM_PWM_MspInit+0x3c>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80029f6:	bf00      	nop
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	40000400 	.word	0x40000400
 8002a08:	40023800 	.word	0x40023800

08002a0c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a88      	ldr	r2, [pc, #544]	; (8002c3c <HAL_TIM_OC_MspInit+0x230>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	f040 80be 	bne.w	8002b9c <HAL_TIM_OC_MspInit+0x190>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a20:	4b87      	ldr	r3, [pc, #540]	; (8002c40 <HAL_TIM_OC_MspInit+0x234>)
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	4a86      	ldr	r2, [pc, #536]	; (8002c40 <HAL_TIM_OC_MspInit+0x234>)
 8002a26:	f043 0304 	orr.w	r3, r3, #4
 8002a2a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a2c:	4b84      	ldr	r3, [pc, #528]	; (8002c40 <HAL_TIM_OC_MspInit+0x234>)
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8002a38:	4b82      	ldr	r3, [pc, #520]	; (8002c44 <HAL_TIM_OC_MspInit+0x238>)
 8002a3a:	4a83      	ldr	r2, [pc, #524]	; (8002c48 <HAL_TIM_OC_MspInit+0x23c>)
 8002a3c:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8002a3e:	4b81      	ldr	r3, [pc, #516]	; (8002c44 <HAL_TIM_OC_MspInit+0x238>)
 8002a40:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a44:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a46:	4b7f      	ldr	r3, [pc, #508]	; (8002c44 <HAL_TIM_OC_MspInit+0x238>)
 8002a48:	2240      	movs	r2, #64	; 0x40
 8002a4a:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a4c:	4b7d      	ldr	r3, [pc, #500]	; (8002c44 <HAL_TIM_OC_MspInit+0x238>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002a52:	4b7c      	ldr	r3, [pc, #496]	; (8002c44 <HAL_TIM_OC_MspInit+0x238>)
 8002a54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a58:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a5a:	4b7a      	ldr	r3, [pc, #488]	; (8002c44 <HAL_TIM_OC_MspInit+0x238>)
 8002a5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a60:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a62:	4b78      	ldr	r3, [pc, #480]	; (8002c44 <HAL_TIM_OC_MspInit+0x238>)
 8002a64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a68:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 8002a6a:	4b76      	ldr	r3, [pc, #472]	; (8002c44 <HAL_TIM_OC_MspInit+0x238>)
 8002a6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a70:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002a72:	4b74      	ldr	r3, [pc, #464]	; (8002c44 <HAL_TIM_OC_MspInit+0x238>)
 8002a74:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002a78:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002a7a:	4b72      	ldr	r3, [pc, #456]	; (8002c44 <HAL_TIM_OC_MspInit+0x238>)
 8002a7c:	2204      	movs	r2, #4
 8002a7e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim4_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002a80:	4b70      	ldr	r3, [pc, #448]	; (8002c44 <HAL_TIM_OC_MspInit+0x238>)
 8002a82:	2203      	movs	r2, #3
 8002a84:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim4_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8002a86:	4b6f      	ldr	r3, [pc, #444]	; (8002c44 <HAL_TIM_OC_MspInit+0x238>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim4_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002a8c:	4b6d      	ldr	r3, [pc, #436]	; (8002c44 <HAL_TIM_OC_MspInit+0x238>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8002a92:	486c      	ldr	r0, [pc, #432]	; (8002c44 <HAL_TIM_OC_MspInit+0x238>)
 8002a94:	f000 fef2 	bl	800387c <HAL_DMA_Init>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_TIM_OC_MspInit+0x96>
    {
      Error_Handler();
 8002a9e:	f7ff fdd9 	bl	8002654 <Error_Handler>
    }

    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a67      	ldr	r2, [pc, #412]	; (8002c44 <HAL_TIM_OC_MspInit+0x238>)
 8002aa6:	625a      	str	r2, [r3, #36]	; 0x24
 8002aa8:	4a66      	ldr	r2, [pc, #408]	; (8002c44 <HAL_TIM_OC_MspInit+0x238>)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM4_CH2 Init */
    hdma_tim4_ch2.Instance = DMA1_Stream3;
 8002aae:	4b67      	ldr	r3, [pc, #412]	; (8002c4c <HAL_TIM_OC_MspInit+0x240>)
 8002ab0:	4a67      	ldr	r2, [pc, #412]	; (8002c50 <HAL_TIM_OC_MspInit+0x244>)
 8002ab2:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Channel = DMA_CHANNEL_2;
 8002ab4:	4b65      	ldr	r3, [pc, #404]	; (8002c4c <HAL_TIM_OC_MspInit+0x240>)
 8002ab6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002aba:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002abc:	4b63      	ldr	r3, [pc, #396]	; (8002c4c <HAL_TIM_OC_MspInit+0x240>)
 8002abe:	2240      	movs	r2, #64	; 0x40
 8002ac0:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ac2:	4b62      	ldr	r3, [pc, #392]	; (8002c4c <HAL_TIM_OC_MspInit+0x240>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002ac8:	4b60      	ldr	r3, [pc, #384]	; (8002c4c <HAL_TIM_OC_MspInit+0x240>)
 8002aca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ace:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ad0:	4b5e      	ldr	r3, [pc, #376]	; (8002c4c <HAL_TIM_OC_MspInit+0x240>)
 8002ad2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ad6:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ad8:	4b5c      	ldr	r3, [pc, #368]	; (8002c4c <HAL_TIM_OC_MspInit+0x240>)
 8002ada:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ade:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_CIRCULAR;
 8002ae0:	4b5a      	ldr	r3, [pc, #360]	; (8002c4c <HAL_TIM_OC_MspInit+0x240>)
 8002ae2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ae6:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002ae8:	4b58      	ldr	r3, [pc, #352]	; (8002c4c <HAL_TIM_OC_MspInit+0x240>)
 8002aea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002aee:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002af0:	4b56      	ldr	r3, [pc, #344]	; (8002c4c <HAL_TIM_OC_MspInit+0x240>)
 8002af2:	2204      	movs	r2, #4
 8002af4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim4_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002af6:	4b55      	ldr	r3, [pc, #340]	; (8002c4c <HAL_TIM_OC_MspInit+0x240>)
 8002af8:	2203      	movs	r2, #3
 8002afa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim4_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 8002afc:	4b53      	ldr	r3, [pc, #332]	; (8002c4c <HAL_TIM_OC_MspInit+0x240>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim4_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002b02:	4b52      	ldr	r3, [pc, #328]	; (8002c4c <HAL_TIM_OC_MspInit+0x240>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 8002b08:	4850      	ldr	r0, [pc, #320]	; (8002c4c <HAL_TIM_OC_MspInit+0x240>)
 8002b0a:	f000 feb7 	bl	800387c <HAL_DMA_Init>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <HAL_TIM_OC_MspInit+0x10c>
    {
      Error_Handler();
 8002b14:	f7ff fd9e 	bl	8002654 <Error_Handler>
    }

    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a4c      	ldr	r2, [pc, #304]	; (8002c4c <HAL_TIM_OC_MspInit+0x240>)
 8002b1c:	629a      	str	r2, [r3, #40]	; 0x28
 8002b1e:	4a4b      	ldr	r2, [pc, #300]	; (8002c4c <HAL_TIM_OC_MspInit+0x240>)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8002b24:	4b4b      	ldr	r3, [pc, #300]	; (8002c54 <HAL_TIM_OC_MspInit+0x248>)
 8002b26:	4a4c      	ldr	r2, [pc, #304]	; (8002c58 <HAL_TIM_OC_MspInit+0x24c>)
 8002b28:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 8002b2a:	4b4a      	ldr	r3, [pc, #296]	; (8002c54 <HAL_TIM_OC_MspInit+0x248>)
 8002b2c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b30:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b32:	4b48      	ldr	r3, [pc, #288]	; (8002c54 <HAL_TIM_OC_MspInit+0x248>)
 8002b34:	2240      	movs	r2, #64	; 0x40
 8002b36:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b38:	4b46      	ldr	r3, [pc, #280]	; (8002c54 <HAL_TIM_OC_MspInit+0x248>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002b3e:	4b45      	ldr	r3, [pc, #276]	; (8002c54 <HAL_TIM_OC_MspInit+0x248>)
 8002b40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b44:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b46:	4b43      	ldr	r3, [pc, #268]	; (8002c54 <HAL_TIM_OC_MspInit+0x248>)
 8002b48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b4c:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b4e:	4b41      	ldr	r3, [pc, #260]	; (8002c54 <HAL_TIM_OC_MspInit+0x248>)
 8002b50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b54:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_CIRCULAR;
 8002b56:	4b3f      	ldr	r3, [pc, #252]	; (8002c54 <HAL_TIM_OC_MspInit+0x248>)
 8002b58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b5c:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002b5e:	4b3d      	ldr	r3, [pc, #244]	; (8002c54 <HAL_TIM_OC_MspInit+0x248>)
 8002b60:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002b64:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002b66:	4b3b      	ldr	r3, [pc, #236]	; (8002c54 <HAL_TIM_OC_MspInit+0x248>)
 8002b68:	2204      	movs	r2, #4
 8002b6a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim4_ch3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002b6c:	4b39      	ldr	r3, [pc, #228]	; (8002c54 <HAL_TIM_OC_MspInit+0x248>)
 8002b6e:	2203      	movs	r2, #3
 8002b70:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim4_ch3.Init.MemBurst = DMA_MBURST_SINGLE;
 8002b72:	4b38      	ldr	r3, [pc, #224]	; (8002c54 <HAL_TIM_OC_MspInit+0x248>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim4_ch3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002b78:	4b36      	ldr	r3, [pc, #216]	; (8002c54 <HAL_TIM_OC_MspInit+0x248>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8002b7e:	4835      	ldr	r0, [pc, #212]	; (8002c54 <HAL_TIM_OC_MspInit+0x248>)
 8002b80:	f000 fe7c 	bl	800387c <HAL_DMA_Init>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_TIM_OC_MspInit+0x182>
    {
      Error_Handler();
 8002b8a:	f7ff fd63 	bl	8002654 <Error_Handler>
    }

    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a30      	ldr	r2, [pc, #192]	; (8002c54 <HAL_TIM_OC_MspInit+0x248>)
 8002b92:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b94:	4a2f      	ldr	r2, [pc, #188]	; (8002c54 <HAL_TIM_OC_MspInit+0x248>)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002b9a:	e04b      	b.n	8002c34 <HAL_TIM_OC_MspInit+0x228>
  else if(htim_oc->Instance==TIM5)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a2e      	ldr	r2, [pc, #184]	; (8002c5c <HAL_TIM_OC_MspInit+0x250>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d146      	bne.n	8002c34 <HAL_TIM_OC_MspInit+0x228>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002ba6:	4b26      	ldr	r3, [pc, #152]	; (8002c40 <HAL_TIM_OC_MspInit+0x234>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	4a25      	ldr	r2, [pc, #148]	; (8002c40 <HAL_TIM_OC_MspInit+0x234>)
 8002bac:	f043 0308 	orr.w	r3, r3, #8
 8002bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb2:	4b23      	ldr	r3, [pc, #140]	; (8002c40 <HAL_TIM_OC_MspInit+0x234>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8002bbe:	4b28      	ldr	r3, [pc, #160]	; (8002c60 <HAL_TIM_OC_MspInit+0x254>)
 8002bc0:	4a28      	ldr	r2, [pc, #160]	; (8002c64 <HAL_TIM_OC_MspInit+0x258>)
 8002bc2:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 8002bc4:	4b26      	ldr	r3, [pc, #152]	; (8002c60 <HAL_TIM_OC_MspInit+0x254>)
 8002bc6:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002bca:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bcc:	4b24      	ldr	r3, [pc, #144]	; (8002c60 <HAL_TIM_OC_MspInit+0x254>)
 8002bce:	2240      	movs	r2, #64	; 0x40
 8002bd0:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bd2:	4b23      	ldr	r3, [pc, #140]	; (8002c60 <HAL_TIM_OC_MspInit+0x254>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002bd8:	4b21      	ldr	r3, [pc, #132]	; (8002c60 <HAL_TIM_OC_MspInit+0x254>)
 8002bda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bde:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002be0:	4b1f      	ldr	r3, [pc, #124]	; (8002c60 <HAL_TIM_OC_MspInit+0x254>)
 8002be2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002be6:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002be8:	4b1d      	ldr	r3, [pc, #116]	; (8002c60 <HAL_TIM_OC_MspInit+0x254>)
 8002bea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bee:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_CIRCULAR;
 8002bf0:	4b1b      	ldr	r3, [pc, #108]	; (8002c60 <HAL_TIM_OC_MspInit+0x254>)
 8002bf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bf6:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002bf8:	4b19      	ldr	r3, [pc, #100]	; (8002c60 <HAL_TIM_OC_MspInit+0x254>)
 8002bfa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002bfe:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002c00:	4b17      	ldr	r3, [pc, #92]	; (8002c60 <HAL_TIM_OC_MspInit+0x254>)
 8002c02:	2204      	movs	r2, #4
 8002c04:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002c06:	4b16      	ldr	r3, [pc, #88]	; (8002c60 <HAL_TIM_OC_MspInit+0x254>)
 8002c08:	2203      	movs	r2, #3
 8002c0a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 8002c0c:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <HAL_TIM_OC_MspInit+0x254>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002c12:	4b13      	ldr	r3, [pc, #76]	; (8002c60 <HAL_TIM_OC_MspInit+0x254>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8002c18:	4811      	ldr	r0, [pc, #68]	; (8002c60 <HAL_TIM_OC_MspInit+0x254>)
 8002c1a:	f000 fe2f 	bl	800387c <HAL_DMA_Init>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <HAL_TIM_OC_MspInit+0x21c>
      Error_Handler();
 8002c24:	f7ff fd16 	bl	8002654 <Error_Handler>
    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a0d      	ldr	r2, [pc, #52]	; (8002c60 <HAL_TIM_OC_MspInit+0x254>)
 8002c2c:	629a      	str	r2, [r3, #40]	; 0x28
 8002c2e:	4a0c      	ldr	r2, [pc, #48]	; (8002c60 <HAL_TIM_OC_MspInit+0x254>)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002c34:	bf00      	nop
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40000800 	.word	0x40000800
 8002c40:	40023800 	.word	0x40023800
 8002c44:	20000538 	.word	0x20000538
 8002c48:	40026010 	.word	0x40026010
 8002c4c:	200000a8 	.word	0x200000a8
 8002c50:	40026058 	.word	0x40026058
 8002c54:	200003f8 	.word	0x200003f8
 8002c58:	400260b8 	.word	0x400260b8
 8002c5c:	40000c00 	.word	0x40000c00
 8002c60:	20000398 	.word	0x20000398
 8002c64:	40026070 	.word	0x40026070

08002c68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08c      	sub	sp, #48	; 0x30
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c70:	f107 031c 	add.w	r3, r7, #28
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	60da      	str	r2, [r3, #12]
 8002c7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a50      	ldr	r2, [pc, #320]	; (8002dc8 <HAL_TIM_MspPostInit+0x160>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d155      	bne.n	8002d36 <HAL_TIM_MspPostInit+0xce>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c8a:	4b50      	ldr	r3, [pc, #320]	; (8002dcc <HAL_TIM_MspPostInit+0x164>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	4a4f      	ldr	r2, [pc, #316]	; (8002dcc <HAL_TIM_MspPostInit+0x164>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	6313      	str	r3, [r2, #48]	; 0x30
 8002c96:	4b4d      	ldr	r3, [pc, #308]	; (8002dcc <HAL_TIM_MspPostInit+0x164>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	61bb      	str	r3, [r7, #24]
 8002ca0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca2:	4b4a      	ldr	r3, [pc, #296]	; (8002dcc <HAL_TIM_MspPostInit+0x164>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	4a49      	ldr	r2, [pc, #292]	; (8002dcc <HAL_TIM_MspPostInit+0x164>)
 8002ca8:	f043 0302 	orr.w	r3, r3, #2
 8002cac:	6313      	str	r3, [r2, #48]	; 0x30
 8002cae:	4b47      	ldr	r3, [pc, #284]	; (8002dcc <HAL_TIM_MspPostInit+0x164>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cba:	4b44      	ldr	r3, [pc, #272]	; (8002dcc <HAL_TIM_MspPostInit+0x164>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	4a43      	ldr	r2, [pc, #268]	; (8002dcc <HAL_TIM_MspPostInit+0x164>)
 8002cc0:	f043 0304 	orr.w	r3, r3, #4
 8002cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc6:	4b41      	ldr	r3, [pc, #260]	; (8002dcc <HAL_TIM_MspPostInit+0x164>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	613b      	str	r3, [r7, #16]
 8002cd0:	693b      	ldr	r3, [r7, #16]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM_3_CH1_MOTOR_1_Pin|TIM_3_CH1_MOTOR_2_Pin;
 8002cd2:	23c0      	movs	r3, #192	; 0xc0
 8002cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce6:	f107 031c 	add.w	r3, r7, #28
 8002cea:	4619      	mov	r1, r3
 8002cec:	4838      	ldr	r0, [pc, #224]	; (8002dd0 <HAL_TIM_MspPostInit+0x168>)
 8002cee:	f001 f969 	bl	8003fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM_3_CH1_MOTOR_3_Pin;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d02:	2302      	movs	r3, #2
 8002d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM_3_CH1_MOTOR_3_GPIO_Port, &GPIO_InitStruct);
 8002d06:	f107 031c 	add.w	r3, r7, #28
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4831      	ldr	r0, [pc, #196]	; (8002dd4 <HAL_TIM_MspPostInit+0x16c>)
 8002d0e:	f001 f959 	bl	8003fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM_3_CH1_MOTOR_4_Pin;
 8002d12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d20:	2300      	movs	r3, #0
 8002d22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d24:	2302      	movs	r3, #2
 8002d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM_3_CH1_MOTOR_4_GPIO_Port, &GPIO_InitStruct);
 8002d28:	f107 031c 	add.w	r3, r7, #28
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	482a      	ldr	r0, [pc, #168]	; (8002dd8 <HAL_TIM_MspPostInit+0x170>)
 8002d30:	f001 f948 	bl	8003fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002d34:	e043      	b.n	8002dbe <HAL_TIM_MspPostInit+0x156>
  else if(htim->Instance==TIM4)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a28      	ldr	r2, [pc, #160]	; (8002ddc <HAL_TIM_MspPostInit+0x174>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d11d      	bne.n	8002d7c <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d40:	4b22      	ldr	r3, [pc, #136]	; (8002dcc <HAL_TIM_MspPostInit+0x164>)
 8002d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d44:	4a21      	ldr	r2, [pc, #132]	; (8002dcc <HAL_TIM_MspPostInit+0x164>)
 8002d46:	f043 0308 	orr.w	r3, r3, #8
 8002d4a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4c:	4b1f      	ldr	r3, [pc, #124]	; (8002dcc <HAL_TIM_MspPostInit+0x164>)
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d50:	f003 0308 	and.w	r3, r3, #8
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_DMA_LATCH_Pin|TIM4_CH2_MOTOR_1_Pin|GPIO_PIN_14;
 8002d58:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5e:	2302      	movs	r3, #2
 8002d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d62:	2300      	movs	r3, #0
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d66:	2300      	movs	r3, #0
 8002d68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d6e:	f107 031c 	add.w	r3, r7, #28
 8002d72:	4619      	mov	r1, r3
 8002d74:	481a      	ldr	r0, [pc, #104]	; (8002de0 <HAL_TIM_MspPostInit+0x178>)
 8002d76:	f001 f925 	bl	8003fc4 <HAL_GPIO_Init>
}
 8002d7a:	e020      	b.n	8002dbe <HAL_TIM_MspPostInit+0x156>
  else if(htim->Instance==TIM5)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a18      	ldr	r2, [pc, #96]	; (8002de4 <HAL_TIM_MspPostInit+0x17c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d11b      	bne.n	8002dbe <HAL_TIM_MspPostInit+0x156>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d86:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <HAL_TIM_MspPostInit+0x164>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	4a10      	ldr	r2, [pc, #64]	; (8002dcc <HAL_TIM_MspPostInit+0x164>)
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	6313      	str	r3, [r2, #48]	; 0x30
 8002d92:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <HAL_TIM_MspPostInit+0x164>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	60bb      	str	r3, [r7, #8]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da2:	2302      	movs	r3, #2
 8002da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da6:	2300      	movs	r3, #0
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002daa:	2300      	movs	r3, #0
 8002dac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002dae:	2302      	movs	r3, #2
 8002db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db2:	f107 031c 	add.w	r3, r7, #28
 8002db6:	4619      	mov	r1, r3
 8002db8:	4805      	ldr	r0, [pc, #20]	; (8002dd0 <HAL_TIM_MspPostInit+0x168>)
 8002dba:	f001 f903 	bl	8003fc4 <HAL_GPIO_Init>
}
 8002dbe:	bf00      	nop
 8002dc0:	3730      	adds	r7, #48	; 0x30
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40000400 	.word	0x40000400
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40020000 	.word	0x40020000
 8002dd4:	40020400 	.word	0x40020400
 8002dd8:	40020800 	.word	0x40020800
 8002ddc:	40000800 	.word	0x40000800
 8002de0:	40020c00 	.word	0x40020c00
 8002de4:	40000c00 	.word	0x40000c00

08002de8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08a      	sub	sp, #40	; 0x28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df0:	f107 0314 	add.w	r3, r7, #20
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a1b      	ldr	r2, [pc, #108]	; (8002e74 <HAL_UART_MspInit+0x8c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d130      	bne.n	8002e6c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e0a:	4b1b      	ldr	r3, [pc, #108]	; (8002e78 <HAL_UART_MspInit+0x90>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	4a1a      	ldr	r2, [pc, #104]	; (8002e78 <HAL_UART_MspInit+0x90>)
 8002e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e14:	6413      	str	r3, [r2, #64]	; 0x40
 8002e16:	4b18      	ldr	r3, [pc, #96]	; (8002e78 <HAL_UART_MspInit+0x90>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e22:	4b15      	ldr	r3, [pc, #84]	; (8002e78 <HAL_UART_MspInit+0x90>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	4a14      	ldr	r2, [pc, #80]	; (8002e78 <HAL_UART_MspInit+0x90>)
 8002e28:	f043 0308 	orr.w	r3, r3, #8
 8002e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2e:	4b12      	ldr	r3, [pc, #72]	; (8002e78 <HAL_UART_MspInit+0x90>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002e3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e40:	2302      	movs	r3, #2
 8002e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e4c:	2307      	movs	r3, #7
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e50:	f107 0314 	add.w	r3, r7, #20
 8002e54:	4619      	mov	r1, r3
 8002e56:	4809      	ldr	r0, [pc, #36]	; (8002e7c <HAL_UART_MspInit+0x94>)
 8002e58:	f001 f8b4 	bl	8003fc4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2100      	movs	r1, #0
 8002e60:	2027      	movs	r0, #39	; 0x27
 8002e62:	f000 fcd4 	bl	800380e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002e66:	2027      	movs	r0, #39	; 0x27
 8002e68:	f000 fced 	bl	8003846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e6c:	bf00      	nop
 8002e6e:	3728      	adds	r7, #40	; 0x28
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40004800 	.word	0x40004800
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	40020c00 	.word	0x40020c00

08002e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e84:	bf00      	nop
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e92:	e7fe      	b.n	8002e92 <HardFault_Handler+0x4>

08002e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e98:	e7fe      	b.n	8002e98 <MemManage_Handler+0x4>

08002e9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e9e:	e7fe      	b.n	8002e9e <BusFault_Handler+0x4>

08002ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ea4:	e7fe      	b.n	8002ea4 <UsageFault_Handler+0x4>

08002ea6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eb8:	bf00      	nop
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ec6:	bf00      	nop
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ed4:	f000 f918 	bl	8003108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ed8:	bf00      	nop
 8002eda:	bd80      	pop	{r7, pc}

08002edc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002ee0:	4802      	ldr	r0, [pc, #8]	; (8002eec <DMA1_Stream0_IRQHandler+0x10>)
 8002ee2:	f000 fdfb 	bl	8003adc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002ee6:	bf00      	nop
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	20000538 	.word	0x20000538

08002ef0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 8002ef4:	4802      	ldr	r0, [pc, #8]	; (8002f00 <DMA1_Stream3_IRQHandler+0x10>)
 8002ef6:	f000 fdf1 	bl	8003adc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002efa:	bf00      	nop
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	200000a8 	.word	0x200000a8

08002f04 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8002f08:	4802      	ldr	r0, [pc, #8]	; (8002f14 <DMA1_Stream4_IRQHandler+0x10>)
 8002f0a:	f000 fde7 	bl	8003adc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002f0e:	bf00      	nop
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20000398 	.word	0x20000398

08002f18 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002f1c:	4802      	ldr	r0, [pc, #8]	; (8002f28 <DMA1_Stream5_IRQHandler+0x10>)
 8002f1e:	f000 fddd 	bl	8003adc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002f22:	bf00      	nop
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	20000498 	.word	0x20000498

08002f2c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002f30:	4802      	ldr	r0, [pc, #8]	; (8002f3c <DMA1_Stream6_IRQHandler+0x10>)
 8002f32:	f000 fdd3 	bl	8003adc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002f36:	bf00      	nop
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	200001d8 	.word	0x200001d8

08002f40 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f44:	4802      	ldr	r0, [pc, #8]	; (8002f50 <TIM1_CC_IRQHandler+0x10>)
 8002f46:	f003 ff87 	bl	8006e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002f4a:	bf00      	nop
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	20000458 	.word	0x20000458

08002f54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f58:	4802      	ldr	r0, [pc, #8]	; (8002f64 <TIM2_IRQHandler+0x10>)
 8002f5a:	f003 ff7d 	bl	8006e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f5e:	bf00      	nop
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	200004f8 	.word	0x200004f8

08002f68 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002f6c:	4802      	ldr	r0, [pc, #8]	; (8002f78 <I2C1_EV_IRQHandler+0x10>)
 8002f6e:	f001 fb63 	bl	8004638 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002f72:	bf00      	nop
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000238 	.word	0x20000238

08002f7c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002f80:	4802      	ldr	r0, [pc, #8]	; (8002f8c <USART3_IRQHandler+0x10>)
 8002f82:	f005 fab5 	bl	80084f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002f86:	bf00      	nop
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000148 	.word	0x20000148

08002f90 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8002f94:	4802      	ldr	r0, [pc, #8]	; (8002fa0 <DMA1_Stream7_IRQHandler+0x10>)
 8002f96:	f000 fda1 	bl	8003adc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002f9a:	bf00      	nop
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	200003f8 	.word	0x200003f8

08002fa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fac:	4a14      	ldr	r2, [pc, #80]	; (8003000 <_sbrk+0x5c>)
 8002fae:	4b15      	ldr	r3, [pc, #84]	; (8003004 <_sbrk+0x60>)
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fb8:	4b13      	ldr	r3, [pc, #76]	; (8003008 <_sbrk+0x64>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d102      	bne.n	8002fc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fc0:	4b11      	ldr	r3, [pc, #68]	; (8003008 <_sbrk+0x64>)
 8002fc2:	4a12      	ldr	r2, [pc, #72]	; (800300c <_sbrk+0x68>)
 8002fc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fc6:	4b10      	ldr	r3, [pc, #64]	; (8003008 <_sbrk+0x64>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d207      	bcs.n	8002fe4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fd4:	f006 f934 	bl	8009240 <__errno>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	230c      	movs	r3, #12
 8002fdc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002fde:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe2:	e009      	b.n	8002ff8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fe4:	4b08      	ldr	r3, [pc, #32]	; (8003008 <_sbrk+0x64>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fea:	4b07      	ldr	r3, [pc, #28]	; (8003008 <_sbrk+0x64>)
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	4a05      	ldr	r2, [pc, #20]	; (8003008 <_sbrk+0x64>)
 8002ff4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	20040000 	.word	0x20040000
 8003004:	00000400 	.word	0x00000400
 8003008:	2000009c 	.word	0x2000009c
 800300c:	200005a8 	.word	0x200005a8

08003010 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003014:	4b08      	ldr	r3, [pc, #32]	; (8003038 <SystemInit+0x28>)
 8003016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301a:	4a07      	ldr	r2, [pc, #28]	; (8003038 <SystemInit+0x28>)
 800301c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003020:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003024:	4b04      	ldr	r3, [pc, #16]	; (8003038 <SystemInit+0x28>)
 8003026:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800302a:	609a      	str	r2, [r3, #8]
#endif

}
 800302c:	bf00      	nop
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800303c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003074 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003040:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003042:	e003      	b.n	800304c <LoopCopyDataInit>

08003044 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003044:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003046:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003048:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800304a:	3104      	adds	r1, #4

0800304c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800304c:	480b      	ldr	r0, [pc, #44]	; (800307c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800304e:	4b0c      	ldr	r3, [pc, #48]	; (8003080 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003050:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003052:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003054:	d3f6      	bcc.n	8003044 <CopyDataInit>
  ldr  r2, =_sbss
 8003056:	4a0b      	ldr	r2, [pc, #44]	; (8003084 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003058:	e002      	b.n	8003060 <LoopFillZerobss>

0800305a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800305a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800305c:	f842 3b04 	str.w	r3, [r2], #4

08003060 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003060:	4b09      	ldr	r3, [pc, #36]	; (8003088 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003062:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003064:	d3f9      	bcc.n	800305a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003066:	f7ff ffd3 	bl	8003010 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800306a:	f006 f8ef 	bl	800924c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800306e:	f7fe fce1 	bl	8001a34 <main>
  bx  lr    
 8003072:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003074:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8003078:	08009b58 	.word	0x08009b58
  ldr  r0, =_sdata
 800307c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003080:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8003084:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8003088:	200005a8 	.word	0x200005a8

0800308c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800308c:	e7fe      	b.n	800308c <ADC_IRQHandler>

0800308e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003092:	2003      	movs	r0, #3
 8003094:	f000 fbb0 	bl	80037f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003098:	2000      	movs	r0, #0
 800309a:	f000 f805 	bl	80030a8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800309e:	f7ff fae1 	bl	8002664 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030b0:	4b12      	ldr	r3, [pc, #72]	; (80030fc <HAL_InitTick+0x54>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4b12      	ldr	r3, [pc, #72]	; (8003100 <HAL_InitTick+0x58>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	4619      	mov	r1, r3
 80030ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030be:	fbb3 f3f1 	udiv	r3, r3, r1
 80030c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fbcb 	bl	8003862 <HAL_SYSTICK_Config>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e00e      	b.n	80030f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b0f      	cmp	r3, #15
 80030da:	d80a      	bhi.n	80030f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030dc:	2200      	movs	r2, #0
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	f04f 30ff 	mov.w	r0, #4294967295
 80030e4:	f000 fb93 	bl	800380e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030e8:	4a06      	ldr	r2, [pc, #24]	; (8003104 <HAL_InitTick+0x5c>)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
 80030f0:	e000      	b.n	80030f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	20000008 	.word	0x20000008
 8003100:	20000010 	.word	0x20000010
 8003104:	2000000c 	.word	0x2000000c

08003108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800310c:	4b06      	ldr	r3, [pc, #24]	; (8003128 <HAL_IncTick+0x20>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	461a      	mov	r2, r3
 8003112:	4b06      	ldr	r3, [pc, #24]	; (800312c <HAL_IncTick+0x24>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4413      	add	r3, r2
 8003118:	4a04      	ldr	r2, [pc, #16]	; (800312c <HAL_IncTick+0x24>)
 800311a:	6013      	str	r3, [r2, #0]
}
 800311c:	bf00      	nop
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	20000010 	.word	0x20000010
 800312c:	200005a0 	.word	0x200005a0

08003130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  return uwTick;
 8003134:	4b03      	ldr	r3, [pc, #12]	; (8003144 <HAL_GetTick+0x14>)
 8003136:	681b      	ldr	r3, [r3, #0]
}
 8003138:	4618      	mov	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	200005a0 	.word	0x200005a0

08003148 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003150:	2300      	movs	r3, #0
 8003152:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e031      	b.n	80031c2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	2b00      	cmp	r3, #0
 8003164:	d109      	bne.n	800317a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7ff faa0 	bl	80026ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	f003 0310 	and.w	r3, r3, #16
 8003182:	2b00      	cmp	r3, #0
 8003184:	d116      	bne.n	80031b4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800318a:	4b10      	ldr	r3, [pc, #64]	; (80031cc <HAL_ADC_Init+0x84>)
 800318c:	4013      	ands	r3, r2
 800318e:	f043 0202 	orr.w	r2, r3, #2
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f964 	bl	8003464 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f023 0303 	bic.w	r3, r3, #3
 80031aa:	f043 0201 	orr.w	r2, r3, #1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	641a      	str	r2, [r3, #64]	; 0x40
 80031b2:	e001      	b.n	80031b8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	ffffeefd 	.word	0xffffeefd

080031d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x1c>
 80031e8:	2302      	movs	r3, #2
 80031ea:	e12a      	b.n	8003442 <HAL_ADC_ConfigChannel+0x272>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b09      	cmp	r3, #9
 80031fa:	d93a      	bls.n	8003272 <HAL_ADC_ConfigChannel+0xa2>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003204:	d035      	beq.n	8003272 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68d9      	ldr	r1, [r3, #12]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	b29b      	uxth	r3, r3
 8003212:	461a      	mov	r2, r3
 8003214:	4613      	mov	r3, r2
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	4413      	add	r3, r2
 800321a:	3b1e      	subs	r3, #30
 800321c:	2207      	movs	r2, #7
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43da      	mvns	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	400a      	ands	r2, r1
 800322a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a87      	ldr	r2, [pc, #540]	; (8003450 <HAL_ADC_ConfigChannel+0x280>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d10a      	bne.n	800324c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68d9      	ldr	r1, [r3, #12]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	061a      	lsls	r2, r3, #24
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800324a:	e035      	b.n	80032b8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68d9      	ldr	r1, [r3, #12]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	b29b      	uxth	r3, r3
 800325c:	4618      	mov	r0, r3
 800325e:	4603      	mov	r3, r0
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	4403      	add	r3, r0
 8003264:	3b1e      	subs	r3, #30
 8003266:	409a      	lsls	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003270:	e022      	b.n	80032b8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6919      	ldr	r1, [r3, #16]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	b29b      	uxth	r3, r3
 800327e:	461a      	mov	r2, r3
 8003280:	4613      	mov	r3, r2
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	4413      	add	r3, r2
 8003286:	2207      	movs	r2, #7
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43da      	mvns	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	400a      	ands	r2, r1
 8003294:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6919      	ldr	r1, [r3, #16]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	4618      	mov	r0, r3
 80032a8:	4603      	mov	r3, r0
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	4403      	add	r3, r0
 80032ae:	409a      	lsls	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b06      	cmp	r3, #6
 80032be:	d824      	bhi.n	800330a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	4613      	mov	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	3b05      	subs	r3, #5
 80032d2:	221f      	movs	r2, #31
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	43da      	mvns	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	400a      	ands	r2, r1
 80032e0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	4618      	mov	r0, r3
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	4613      	mov	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	3b05      	subs	r3, #5
 80032fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	635a      	str	r2, [r3, #52]	; 0x34
 8003308:	e04c      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b0c      	cmp	r3, #12
 8003310:	d824      	bhi.n	800335c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	3b23      	subs	r3, #35	; 0x23
 8003324:	221f      	movs	r2, #31
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43da      	mvns	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	400a      	ands	r2, r1
 8003332:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	b29b      	uxth	r3, r3
 8003340:	4618      	mov	r0, r3
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	3b23      	subs	r3, #35	; 0x23
 800334e:	fa00 f203 	lsl.w	r2, r0, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	631a      	str	r2, [r3, #48]	; 0x30
 800335a:	e023      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	3b41      	subs	r3, #65	; 0x41
 800336e:	221f      	movs	r2, #31
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	43da      	mvns	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	400a      	ands	r2, r1
 800337c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	b29b      	uxth	r3, r3
 800338a:	4618      	mov	r0, r3
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	4613      	mov	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	3b41      	subs	r3, #65	; 0x41
 8003398:	fa00 f203 	lsl.w	r2, r0, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a2a      	ldr	r2, [pc, #168]	; (8003454 <HAL_ADC_ConfigChannel+0x284>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d10a      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x1f4>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033b6:	d105      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80033b8:	4b27      	ldr	r3, [pc, #156]	; (8003458 <HAL_ADC_ConfigChannel+0x288>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	4a26      	ldr	r2, [pc, #152]	; (8003458 <HAL_ADC_ConfigChannel+0x288>)
 80033be:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80033c2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a22      	ldr	r2, [pc, #136]	; (8003454 <HAL_ADC_ConfigChannel+0x284>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d109      	bne.n	80033e2 <HAL_ADC_ConfigChannel+0x212>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2b12      	cmp	r3, #18
 80033d4:	d105      	bne.n	80033e2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80033d6:	4b20      	ldr	r3, [pc, #128]	; (8003458 <HAL_ADC_ConfigChannel+0x288>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	4a1f      	ldr	r2, [pc, #124]	; (8003458 <HAL_ADC_ConfigChannel+0x288>)
 80033dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033e0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a1b      	ldr	r2, [pc, #108]	; (8003454 <HAL_ADC_ConfigChannel+0x284>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d125      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x268>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a17      	ldr	r2, [pc, #92]	; (8003450 <HAL_ADC_ConfigChannel+0x280>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d003      	beq.n	80033fe <HAL_ADC_ConfigChannel+0x22e>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b11      	cmp	r3, #17
 80033fc:	d11c      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80033fe:	4b16      	ldr	r3, [pc, #88]	; (8003458 <HAL_ADC_ConfigChannel+0x288>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4a15      	ldr	r2, [pc, #84]	; (8003458 <HAL_ADC_ConfigChannel+0x288>)
 8003404:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003408:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a10      	ldr	r2, [pc, #64]	; (8003450 <HAL_ADC_ConfigChannel+0x280>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d111      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003414:	4b11      	ldr	r3, [pc, #68]	; (800345c <HAL_ADC_ConfigChannel+0x28c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a11      	ldr	r2, [pc, #68]	; (8003460 <HAL_ADC_ConfigChannel+0x290>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	0c9a      	lsrs	r2, r3, #18
 8003420:	4613      	mov	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800342a:	e002      	b.n	8003432 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	3b01      	subs	r3, #1
 8003430:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1f9      	bne.n	800342c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	10000012 	.word	0x10000012
 8003454:	40012000 	.word	0x40012000
 8003458:	40012300 	.word	0x40012300
 800345c:	20000008 	.word	0x20000008
 8003460:	431bde83 	.word	0x431bde83

08003464 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800346c:	4b78      	ldr	r3, [pc, #480]	; (8003650 <ADC_Init+0x1ec>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	4a77      	ldr	r2, [pc, #476]	; (8003650 <ADC_Init+0x1ec>)
 8003472:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003476:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003478:	4b75      	ldr	r3, [pc, #468]	; (8003650 <ADC_Init+0x1ec>)
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	4973      	ldr	r1, [pc, #460]	; (8003650 <ADC_Init+0x1ec>)
 8003482:	4313      	orrs	r3, r2
 8003484:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003494:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6859      	ldr	r1, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	021a      	lsls	r2, r3, #8
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6859      	ldr	r1, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6899      	ldr	r1, [r3, #8]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f2:	4a58      	ldr	r2, [pc, #352]	; (8003654 <ADC_Init+0x1f0>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d022      	beq.n	800353e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003506:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6899      	ldr	r1, [r3, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003528:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6899      	ldr	r1, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	609a      	str	r2, [r3, #8]
 800353c:	e00f      	b.n	800355e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800354c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800355c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0202 	bic.w	r2, r2, #2
 800356c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6899      	ldr	r1, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	005a      	lsls	r2, r3, #1
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d01b      	beq.n	80035c4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800359a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6859      	ldr	r1, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	3b01      	subs	r3, #1
 80035b8:	035a      	lsls	r2, r3, #13
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]
 80035c2:	e007      	b.n	80035d4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	051a      	lsls	r2, r3, #20
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003608:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6899      	ldr	r1, [r3, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003616:	025a      	lsls	r2, r3, #9
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800362e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6899      	ldr	r1, [r3, #8]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	029a      	lsls	r2, r3, #10
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	609a      	str	r2, [r3, #8]
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	40012300 	.word	0x40012300
 8003654:	0f000001 	.word	0x0f000001

08003658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003668:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <__NVIC_SetPriorityGrouping+0x40>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003674:	4013      	ands	r3, r2
 8003676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003680:	4b06      	ldr	r3, [pc, #24]	; (800369c <__NVIC_SetPriorityGrouping+0x44>)
 8003682:	4313      	orrs	r3, r2
 8003684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003686:	4a04      	ldr	r2, [pc, #16]	; (8003698 <__NVIC_SetPriorityGrouping+0x40>)
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	60d3      	str	r3, [r2, #12]
}
 800368c:	bf00      	nop
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	e000ed00 	.word	0xe000ed00
 800369c:	05fa0000 	.word	0x05fa0000

080036a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036a4:	4b04      	ldr	r3, [pc, #16]	; (80036b8 <__NVIC_GetPriorityGrouping+0x18>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	0a1b      	lsrs	r3, r3, #8
 80036aa:	f003 0307 	and.w	r3, r3, #7
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	e000ed00 	.word	0xe000ed00

080036bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	4603      	mov	r3, r0
 80036c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	db0b      	blt.n	80036e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	f003 021f 	and.w	r2, r3, #31
 80036d4:	4907      	ldr	r1, [pc, #28]	; (80036f4 <__NVIC_EnableIRQ+0x38>)
 80036d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	2001      	movs	r0, #1
 80036de:	fa00 f202 	lsl.w	r2, r0, r2
 80036e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	e000e100 	.word	0xe000e100

080036f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4603      	mov	r3, r0
 8003700:	6039      	str	r1, [r7, #0]
 8003702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003708:	2b00      	cmp	r3, #0
 800370a:	db0a      	blt.n	8003722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	b2da      	uxtb	r2, r3
 8003710:	490c      	ldr	r1, [pc, #48]	; (8003744 <__NVIC_SetPriority+0x4c>)
 8003712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003716:	0112      	lsls	r2, r2, #4
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	440b      	add	r3, r1
 800371c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003720:	e00a      	b.n	8003738 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	b2da      	uxtb	r2, r3
 8003726:	4908      	ldr	r1, [pc, #32]	; (8003748 <__NVIC_SetPriority+0x50>)
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	3b04      	subs	r3, #4
 8003730:	0112      	lsls	r2, r2, #4
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	440b      	add	r3, r1
 8003736:	761a      	strb	r2, [r3, #24]
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	e000e100 	.word	0xe000e100
 8003748:	e000ed00 	.word	0xe000ed00

0800374c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800374c:	b480      	push	{r7}
 800374e:	b089      	sub	sp, #36	; 0x24
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f1c3 0307 	rsb	r3, r3, #7
 8003766:	2b04      	cmp	r3, #4
 8003768:	bf28      	it	cs
 800376a:	2304      	movcs	r3, #4
 800376c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	3304      	adds	r3, #4
 8003772:	2b06      	cmp	r3, #6
 8003774:	d902      	bls.n	800377c <NVIC_EncodePriority+0x30>
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	3b03      	subs	r3, #3
 800377a:	e000      	b.n	800377e <NVIC_EncodePriority+0x32>
 800377c:	2300      	movs	r3, #0
 800377e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003780:	f04f 32ff 	mov.w	r2, #4294967295
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	43da      	mvns	r2, r3
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	401a      	ands	r2, r3
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003794:	f04f 31ff 	mov.w	r1, #4294967295
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	fa01 f303 	lsl.w	r3, r1, r3
 800379e:	43d9      	mvns	r1, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037a4:	4313      	orrs	r3, r2
         );
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3724      	adds	r7, #36	; 0x24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
	...

080037b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3b01      	subs	r3, #1
 80037c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037c4:	d301      	bcc.n	80037ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037c6:	2301      	movs	r3, #1
 80037c8:	e00f      	b.n	80037ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037ca:	4a0a      	ldr	r2, [pc, #40]	; (80037f4 <SysTick_Config+0x40>)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037d2:	210f      	movs	r1, #15
 80037d4:	f04f 30ff 	mov.w	r0, #4294967295
 80037d8:	f7ff ff8e 	bl	80036f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <SysTick_Config+0x40>)
 80037de:	2200      	movs	r2, #0
 80037e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037e2:	4b04      	ldr	r3, [pc, #16]	; (80037f4 <SysTick_Config+0x40>)
 80037e4:	2207      	movs	r2, #7
 80037e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	e000e010 	.word	0xe000e010

080037f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7ff ff29 	bl	8003658 <__NVIC_SetPriorityGrouping>
}
 8003806:	bf00      	nop
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800380e:	b580      	push	{r7, lr}
 8003810:	b086      	sub	sp, #24
 8003812:	af00      	add	r7, sp, #0
 8003814:	4603      	mov	r3, r0
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
 800381a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003820:	f7ff ff3e 	bl	80036a0 <__NVIC_GetPriorityGrouping>
 8003824:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	68b9      	ldr	r1, [r7, #8]
 800382a:	6978      	ldr	r0, [r7, #20]
 800382c:	f7ff ff8e 	bl	800374c <NVIC_EncodePriority>
 8003830:	4602      	mov	r2, r0
 8003832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003836:	4611      	mov	r1, r2
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff ff5d 	bl	80036f8 <__NVIC_SetPriority>
}
 800383e:	bf00      	nop
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	4603      	mov	r3, r0
 800384e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff ff31 	bl	80036bc <__NVIC_EnableIRQ>
}
 800385a:	bf00      	nop
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff ffa2 	bl	80037b4 <SysTick_Config>
 8003870:	4603      	mov	r3, r0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003888:	f7ff fc52 	bl	8003130 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e099      	b.n	80039cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 0201 	bic.w	r2, r2, #1
 80038b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038b8:	e00f      	b.n	80038da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038ba:	f7ff fc39 	bl	8003130 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b05      	cmp	r3, #5
 80038c6:	d908      	bls.n	80038da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2220      	movs	r2, #32
 80038cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2203      	movs	r2, #3
 80038d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e078      	b.n	80039cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1e8      	bne.n	80038ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	4b38      	ldr	r3, [pc, #224]	; (80039d4 <HAL_DMA_Init+0x158>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003906:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003912:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800391e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	4313      	orrs	r3, r2
 800392a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	2b04      	cmp	r3, #4
 8003932:	d107      	bne.n	8003944 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	4313      	orrs	r3, r2
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	4313      	orrs	r3, r2
 8003942:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f023 0307 	bic.w	r3, r3, #7
 800395a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	4313      	orrs	r3, r2
 8003964:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	2b04      	cmp	r3, #4
 800396c:	d117      	bne.n	800399e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	4313      	orrs	r3, r2
 8003976:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00e      	beq.n	800399e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 faa5 	bl	8003ed0 <DMA_CheckFifoParam>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d008      	beq.n	800399e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2240      	movs	r2, #64	; 0x40
 8003990:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800399a:	2301      	movs	r3, #1
 800399c:	e016      	b.n	80039cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 fa5c 	bl	8003e64 <DMA_CalcBaseAndBitshift>
 80039ac:	4603      	mov	r3, r0
 80039ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b4:	223f      	movs	r2, #63	; 0x3f
 80039b6:	409a      	lsls	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	e010803f 	.word	0xe010803f

080039d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
 80039e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d101      	bne.n	80039fe <HAL_DMA_Start_IT+0x26>
 80039fa:	2302      	movs	r3, #2
 80039fc:	e048      	b.n	8003a90 <HAL_DMA_Start_IT+0xb8>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d137      	bne.n	8003a82 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2202      	movs	r2, #2
 8003a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	68b9      	ldr	r1, [r7, #8]
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 f9ee 	bl	8003e08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a30:	223f      	movs	r2, #63	; 0x3f
 8003a32:	409a      	lsls	r2, r3
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0216 	orr.w	r2, r2, #22
 8003a46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695a      	ldr	r2, [r3, #20]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a56:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d007      	beq.n	8003a70 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0208 	orr.w	r2, r2, #8
 8003a6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	e005      	b.n	8003a8e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d004      	beq.n	8003ab6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2280      	movs	r2, #128	; 0x80
 8003ab0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e00c      	b.n	8003ad0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2205      	movs	r2, #5
 8003aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0201 	bic.w	r2, r2, #1
 8003acc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003ae8:	4b92      	ldr	r3, [pc, #584]	; (8003d34 <HAL_DMA_IRQHandler+0x258>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a92      	ldr	r2, [pc, #584]	; (8003d38 <HAL_DMA_IRQHandler+0x25c>)
 8003aee:	fba2 2303 	umull	r2, r3, r2, r3
 8003af2:	0a9b      	lsrs	r3, r3, #10
 8003af4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b06:	2208      	movs	r2, #8
 8003b08:	409a      	lsls	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d01a      	beq.n	8003b48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d013      	beq.n	8003b48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0204 	bic.w	r2, r2, #4
 8003b2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b34:	2208      	movs	r2, #8
 8003b36:	409a      	lsls	r2, r3
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b40:	f043 0201 	orr.w	r2, r3, #1
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4013      	ands	r3, r2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d012      	beq.n	8003b7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00b      	beq.n	8003b7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	409a      	lsls	r2, r3
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b76:	f043 0202 	orr.w	r2, r3, #2
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b82:	2204      	movs	r2, #4
 8003b84:	409a      	lsls	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d012      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00b      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba0:	2204      	movs	r2, #4
 8003ba2:	409a      	lsls	r2, r3
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bac:	f043 0204 	orr.w	r2, r3, #4
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb8:	2210      	movs	r2, #16
 8003bba:	409a      	lsls	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d043      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d03c      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd6:	2210      	movs	r2, #16
 8003bd8:	409a      	lsls	r2, r3
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d018      	beq.n	8003c1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d108      	bne.n	8003c0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d024      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	4798      	blx	r3
 8003c0a:	e01f      	b.n	8003c4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d01b      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	4798      	blx	r3
 8003c1c:	e016      	b.n	8003c4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d107      	bne.n	8003c3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0208 	bic.w	r2, r2, #8
 8003c3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c50:	2220      	movs	r2, #32
 8003c52:	409a      	lsls	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4013      	ands	r3, r2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 808e 	beq.w	8003d7a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0310 	and.w	r3, r3, #16
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 8086 	beq.w	8003d7a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c72:	2220      	movs	r2, #32
 8003c74:	409a      	lsls	r2, r3
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b05      	cmp	r3, #5
 8003c84:	d136      	bne.n	8003cf4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0216 	bic.w	r2, r2, #22
 8003c94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695a      	ldr	r2, [r3, #20]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ca4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d103      	bne.n	8003cb6 <HAL_DMA_IRQHandler+0x1da>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d007      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 0208 	bic.w	r2, r2, #8
 8003cc4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cca:	223f      	movs	r2, #63	; 0x3f
 8003ccc:	409a      	lsls	r2, r3
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d07d      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	4798      	blx	r3
        }
        return;
 8003cf2:	e078      	b.n	8003de6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d01c      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d108      	bne.n	8003d22 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d030      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	4798      	blx	r3
 8003d20:	e02b      	b.n	8003d7a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d027      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	4798      	blx	r3
 8003d32:	e022      	b.n	8003d7a <HAL_DMA_IRQHandler+0x29e>
 8003d34:	20000008 	.word	0x20000008
 8003d38:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10f      	bne.n	8003d6a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0210 	bic.w	r2, r2, #16
 8003d58:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d032      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d022      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2205      	movs	r2, #5
 8003d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 0201 	bic.w	r2, r2, #1
 8003da4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	3301      	adds	r3, #1
 8003daa:	60bb      	str	r3, [r7, #8]
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d307      	bcc.n	8003dc2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1f2      	bne.n	8003da6 <HAL_DMA_IRQHandler+0x2ca>
 8003dc0:	e000      	b.n	8003dc4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003dc2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	4798      	blx	r3
 8003de4:	e000      	b.n	8003de8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003de6:	bf00      	nop
    }
  }
}
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop

08003df0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	2b40      	cmp	r3, #64	; 0x40
 8003e34:	d108      	bne.n	8003e48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e46:	e007      	b.n	8003e58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	60da      	str	r2, [r3, #12]
}
 8003e58:	bf00      	nop
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	3b10      	subs	r3, #16
 8003e74:	4a13      	ldr	r2, [pc, #76]	; (8003ec4 <DMA_CalcBaseAndBitshift+0x60>)
 8003e76:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7a:	091b      	lsrs	r3, r3, #4
 8003e7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e7e:	4a12      	ldr	r2, [pc, #72]	; (8003ec8 <DMA_CalcBaseAndBitshift+0x64>)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4413      	add	r3, r2
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	461a      	mov	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2b03      	cmp	r3, #3
 8003e90:	d908      	bls.n	8003ea4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	461a      	mov	r2, r3
 8003e98:	4b0c      	ldr	r3, [pc, #48]	; (8003ecc <DMA_CalcBaseAndBitshift+0x68>)
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	1d1a      	adds	r2, r3, #4
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	659a      	str	r2, [r3, #88]	; 0x58
 8003ea2:	e006      	b.n	8003eb2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4b08      	ldr	r3, [pc, #32]	; (8003ecc <DMA_CalcBaseAndBitshift+0x68>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	aaaaaaab 	.word	0xaaaaaaab
 8003ec8:	08009b0c 	.word	0x08009b0c
 8003ecc:	fffffc00 	.word	0xfffffc00

08003ed0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d11f      	bne.n	8003f2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2b03      	cmp	r3, #3
 8003eee:	d855      	bhi.n	8003f9c <DMA_CheckFifoParam+0xcc>
 8003ef0:	a201      	add	r2, pc, #4	; (adr r2, 8003ef8 <DMA_CheckFifoParam+0x28>)
 8003ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef6:	bf00      	nop
 8003ef8:	08003f09 	.word	0x08003f09
 8003efc:	08003f1b 	.word	0x08003f1b
 8003f00:	08003f09 	.word	0x08003f09
 8003f04:	08003f9d 	.word	0x08003f9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d045      	beq.n	8003fa0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f18:	e042      	b.n	8003fa0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f22:	d13f      	bne.n	8003fa4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f28:	e03c      	b.n	8003fa4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f32:	d121      	bne.n	8003f78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b03      	cmp	r3, #3
 8003f38:	d836      	bhi.n	8003fa8 <DMA_CheckFifoParam+0xd8>
 8003f3a:	a201      	add	r2, pc, #4	; (adr r2, 8003f40 <DMA_CheckFifoParam+0x70>)
 8003f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f40:	08003f51 	.word	0x08003f51
 8003f44:	08003f57 	.word	0x08003f57
 8003f48:	08003f51 	.word	0x08003f51
 8003f4c:	08003f69 	.word	0x08003f69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	73fb      	strb	r3, [r7, #15]
      break;
 8003f54:	e02f      	b.n	8003fb6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d024      	beq.n	8003fac <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f66:	e021      	b.n	8003fac <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f70:	d11e      	bne.n	8003fb0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f76:	e01b      	b.n	8003fb0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d902      	bls.n	8003f84 <DMA_CheckFifoParam+0xb4>
 8003f7e:	2b03      	cmp	r3, #3
 8003f80:	d003      	beq.n	8003f8a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f82:	e018      	b.n	8003fb6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	73fb      	strb	r3, [r7, #15]
      break;
 8003f88:	e015      	b.n	8003fb6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00e      	beq.n	8003fb4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	73fb      	strb	r3, [r7, #15]
      break;
 8003f9a:	e00b      	b.n	8003fb4 <DMA_CheckFifoParam+0xe4>
      break;
 8003f9c:	bf00      	nop
 8003f9e:	e00a      	b.n	8003fb6 <DMA_CheckFifoParam+0xe6>
      break;
 8003fa0:	bf00      	nop
 8003fa2:	e008      	b.n	8003fb6 <DMA_CheckFifoParam+0xe6>
      break;
 8003fa4:	bf00      	nop
 8003fa6:	e006      	b.n	8003fb6 <DMA_CheckFifoParam+0xe6>
      break;
 8003fa8:	bf00      	nop
 8003faa:	e004      	b.n	8003fb6 <DMA_CheckFifoParam+0xe6>
      break;
 8003fac:	bf00      	nop
 8003fae:	e002      	b.n	8003fb6 <DMA_CheckFifoParam+0xe6>
      break;   
 8003fb0:	bf00      	nop
 8003fb2:	e000      	b.n	8003fb6 <DMA_CheckFifoParam+0xe6>
      break;
 8003fb4:	bf00      	nop
    }
  } 
  
  return status; 
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3714      	adds	r7, #20
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b089      	sub	sp, #36	; 0x24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]
 8003fe2:	e169      	b.n	80042b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	f040 8158 	bne.w	80042b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d00b      	beq.n	8004022 <HAL_GPIO_Init+0x5e>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2b02      	cmp	r3, #2
 8004010:	d007      	beq.n	8004022 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004016:	2b11      	cmp	r3, #17
 8004018:	d003      	beq.n	8004022 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b12      	cmp	r3, #18
 8004020:	d130      	bne.n	8004084 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	2203      	movs	r2, #3
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	43db      	mvns	r3, r3
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	4013      	ands	r3, r2
 8004038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	fa02 f303 	lsl.w	r3, r2, r3
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	4313      	orrs	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004058:	2201      	movs	r2, #1
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	43db      	mvns	r3, r3
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	4013      	ands	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	091b      	lsrs	r3, r3, #4
 800406e:	f003 0201 	and.w	r2, r3, #1
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	4313      	orrs	r3, r2
 800407c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	2203      	movs	r2, #3
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	43db      	mvns	r3, r3
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	4013      	ands	r3, r2
 800409a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d003      	beq.n	80040c4 <HAL_GPIO_Init+0x100>
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2b12      	cmp	r3, #18
 80040c2:	d123      	bne.n	800410c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	08da      	lsrs	r2, r3, #3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3208      	adds	r2, #8
 80040cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	220f      	movs	r2, #15
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	43db      	mvns	r3, r3
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	4013      	ands	r3, r2
 80040e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	08da      	lsrs	r2, r3, #3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3208      	adds	r2, #8
 8004106:	69b9      	ldr	r1, [r7, #24]
 8004108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	2203      	movs	r2, #3
 8004118:	fa02 f303 	lsl.w	r3, r2, r3
 800411c:	43db      	mvns	r3, r3
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	4013      	ands	r3, r2
 8004122:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f003 0203 	and.w	r2, r3, #3
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	fa02 f303 	lsl.w	r3, r2, r3
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	4313      	orrs	r3, r2
 8004138:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 80b2 	beq.w	80042b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800414e:	4b5f      	ldr	r3, [pc, #380]	; (80042cc <HAL_GPIO_Init+0x308>)
 8004150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004152:	4a5e      	ldr	r2, [pc, #376]	; (80042cc <HAL_GPIO_Init+0x308>)
 8004154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004158:	6453      	str	r3, [r2, #68]	; 0x44
 800415a:	4b5c      	ldr	r3, [pc, #368]	; (80042cc <HAL_GPIO_Init+0x308>)
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004166:	4a5a      	ldr	r2, [pc, #360]	; (80042d0 <HAL_GPIO_Init+0x30c>)
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	089b      	lsrs	r3, r3, #2
 800416c:	3302      	adds	r3, #2
 800416e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004172:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	220f      	movs	r2, #15
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	43db      	mvns	r3, r3
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	4013      	ands	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a51      	ldr	r2, [pc, #324]	; (80042d4 <HAL_GPIO_Init+0x310>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d02b      	beq.n	80041ea <HAL_GPIO_Init+0x226>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a50      	ldr	r2, [pc, #320]	; (80042d8 <HAL_GPIO_Init+0x314>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d025      	beq.n	80041e6 <HAL_GPIO_Init+0x222>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a4f      	ldr	r2, [pc, #316]	; (80042dc <HAL_GPIO_Init+0x318>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d01f      	beq.n	80041e2 <HAL_GPIO_Init+0x21e>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a4e      	ldr	r2, [pc, #312]	; (80042e0 <HAL_GPIO_Init+0x31c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d019      	beq.n	80041de <HAL_GPIO_Init+0x21a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a4d      	ldr	r2, [pc, #308]	; (80042e4 <HAL_GPIO_Init+0x320>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d013      	beq.n	80041da <HAL_GPIO_Init+0x216>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a4c      	ldr	r2, [pc, #304]	; (80042e8 <HAL_GPIO_Init+0x324>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d00d      	beq.n	80041d6 <HAL_GPIO_Init+0x212>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a4b      	ldr	r2, [pc, #300]	; (80042ec <HAL_GPIO_Init+0x328>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d007      	beq.n	80041d2 <HAL_GPIO_Init+0x20e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a4a      	ldr	r2, [pc, #296]	; (80042f0 <HAL_GPIO_Init+0x32c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d101      	bne.n	80041ce <HAL_GPIO_Init+0x20a>
 80041ca:	2307      	movs	r3, #7
 80041cc:	e00e      	b.n	80041ec <HAL_GPIO_Init+0x228>
 80041ce:	2308      	movs	r3, #8
 80041d0:	e00c      	b.n	80041ec <HAL_GPIO_Init+0x228>
 80041d2:	2306      	movs	r3, #6
 80041d4:	e00a      	b.n	80041ec <HAL_GPIO_Init+0x228>
 80041d6:	2305      	movs	r3, #5
 80041d8:	e008      	b.n	80041ec <HAL_GPIO_Init+0x228>
 80041da:	2304      	movs	r3, #4
 80041dc:	e006      	b.n	80041ec <HAL_GPIO_Init+0x228>
 80041de:	2303      	movs	r3, #3
 80041e0:	e004      	b.n	80041ec <HAL_GPIO_Init+0x228>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e002      	b.n	80041ec <HAL_GPIO_Init+0x228>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <HAL_GPIO_Init+0x228>
 80041ea:	2300      	movs	r3, #0
 80041ec:	69fa      	ldr	r2, [r7, #28]
 80041ee:	f002 0203 	and.w	r2, r2, #3
 80041f2:	0092      	lsls	r2, r2, #2
 80041f4:	4093      	lsls	r3, r2
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80041fc:	4934      	ldr	r1, [pc, #208]	; (80042d0 <HAL_GPIO_Init+0x30c>)
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	089b      	lsrs	r3, r3, #2
 8004202:	3302      	adds	r3, #2
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800420a:	4b3a      	ldr	r3, [pc, #232]	; (80042f4 <HAL_GPIO_Init+0x330>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	43db      	mvns	r3, r3
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	4013      	ands	r3, r2
 8004218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	4313      	orrs	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800422e:	4a31      	ldr	r2, [pc, #196]	; (80042f4 <HAL_GPIO_Init+0x330>)
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004234:	4b2f      	ldr	r3, [pc, #188]	; (80042f4 <HAL_GPIO_Init+0x330>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	43db      	mvns	r3, r3
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	4013      	ands	r3, r2
 8004242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d003      	beq.n	8004258 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004258:	4a26      	ldr	r2, [pc, #152]	; (80042f4 <HAL_GPIO_Init+0x330>)
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800425e:	4b25      	ldr	r3, [pc, #148]	; (80042f4 <HAL_GPIO_Init+0x330>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	43db      	mvns	r3, r3
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	4013      	ands	r3, r2
 800426c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004282:	4a1c      	ldr	r2, [pc, #112]	; (80042f4 <HAL_GPIO_Init+0x330>)
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004288:	4b1a      	ldr	r3, [pc, #104]	; (80042f4 <HAL_GPIO_Init+0x330>)
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	43db      	mvns	r3, r3
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	4013      	ands	r3, r2
 8004296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d003      	beq.n	80042ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042ac:	4a11      	ldr	r2, [pc, #68]	; (80042f4 <HAL_GPIO_Init+0x330>)
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	3301      	adds	r3, #1
 80042b6:	61fb      	str	r3, [r7, #28]
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	2b0f      	cmp	r3, #15
 80042bc:	f67f ae92 	bls.w	8003fe4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80042c0:	bf00      	nop
 80042c2:	3724      	adds	r7, #36	; 0x24
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	40023800 	.word	0x40023800
 80042d0:	40013800 	.word	0x40013800
 80042d4:	40020000 	.word	0x40020000
 80042d8:	40020400 	.word	0x40020400
 80042dc:	40020800 	.word	0x40020800
 80042e0:	40020c00 	.word	0x40020c00
 80042e4:	40021000 	.word	0x40021000
 80042e8:	40021400 	.word	0x40021400
 80042ec:	40021800 	.word	0x40021800
 80042f0:	40021c00 	.word	0x40021c00
 80042f4:	40013c00 	.word	0x40013c00

080042f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	807b      	strh	r3, [r7, #2]
 8004304:	4613      	mov	r3, r2
 8004306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004308:	787b      	ldrb	r3, [r7, #1]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800430e:	887a      	ldrh	r2, [r7, #2]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004314:	e003      	b.n	800431e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004316:	887b      	ldrh	r3, [r7, #2]
 8004318:	041a      	lsls	r2, r3, #16
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	619a      	str	r2, [r3, #24]
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
	...

0800432c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e07f      	b.n	800443e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d106      	bne.n	8004358 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7fe f9ea 	bl	800272c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2224      	movs	r2, #36	; 0x24
 800435c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0201 	bic.w	r2, r2, #1
 800436e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800437c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800438c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d107      	bne.n	80043a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043a2:	609a      	str	r2, [r3, #8]
 80043a4:	e006      	b.n	80043b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80043b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d104      	bne.n	80043c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	6859      	ldr	r1, [r3, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	4b1d      	ldr	r3, [pc, #116]	; (8004448 <HAL_I2C_Init+0x11c>)
 80043d2:	430b      	orrs	r3, r1
 80043d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691a      	ldr	r2, [r3, #16]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	ea42 0103 	orr.w	r1, r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	021a      	lsls	r2, r3, #8
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	69d9      	ldr	r1, [r3, #28]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a1a      	ldr	r2, [r3, #32]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0201 	orr.w	r2, r2, #1
 800441e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2220      	movs	r2, #32
 800442a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	02008000 	.word	0x02008000

0800444c <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b08a      	sub	sp, #40	; 0x28
 8004450:	af02      	add	r7, sp, #8
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	4608      	mov	r0, r1
 8004456:	4611      	mov	r1, r2
 8004458:	461a      	mov	r2, r3
 800445a:	4603      	mov	r3, r0
 800445c:	817b      	strh	r3, [r7, #10]
 800445e:	460b      	mov	r3, r1
 8004460:	813b      	strh	r3, [r7, #8]
 8004462:	4613      	mov	r3, r2
 8004464:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b20      	cmp	r3, #32
 8004470:	f040 80d5 	bne.w	800461e <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004476:	2b00      	cmp	r3, #0
 8004478:	d002      	beq.n	8004480 <HAL_I2C_Mem_Write_DMA+0x34>
 800447a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800447c:	2b00      	cmp	r3, #0
 800447e:	d105      	bne.n	800448c <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004486:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e0c9      	b.n	8004620 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800449a:	d101      	bne.n	80044a0 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 800449c:	2302      	movs	r3, #2
 800449e:	e0bf      	b.n	8004620 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d101      	bne.n	80044ae <HAL_I2C_Mem_Write_DMA+0x62>
 80044aa:	2302      	movs	r3, #2
 80044ac:	e0b8      	b.n	8004620 <HAL_I2C_Mem_Write_DMA+0x1d4>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044b6:	f7fe fe3b 	bl	8003130 <HAL_GetTick>
 80044ba:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2221      	movs	r2, #33	; 0x21
 80044c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2240      	movs	r2, #64	; 0x40
 80044c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80044dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	4a51      	ldr	r2, [pc, #324]	; (8004628 <HAL_I2C_Mem_Write_DMA+0x1dc>)
 80044e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4a51      	ldr	r2, [pc, #324]	; (800462c <HAL_I2C_Mem_Write_DMA+0x1e0>)
 80044e8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	2bff      	cmp	r3, #255	; 0xff
 80044f2:	d906      	bls.n	8004502 <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	22ff      	movs	r2, #255	; 0xff
 80044f8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80044fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044fe:	61fb      	str	r3, [r7, #28]
 8004500:	e007      	b.n	8004512 <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800450c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004510:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004512:	88f8      	ldrh	r0, [r7, #6]
 8004514:	893a      	ldrh	r2, [r7, #8]
 8004516:	8979      	ldrh	r1, [r7, #10]
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	9301      	str	r3, [sp, #4]
 800451c:	2319      	movs	r3, #25
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	4603      	mov	r3, r0
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 fbc8 	bl	8004cb8 <I2C_RequestMemoryWrite>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d005      	beq.n	800453a <HAL_I2C_Mem_Write_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e072      	b.n	8004620 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453e:	2b00      	cmp	r3, #0
 8004540:	d020      	beq.n	8004584 <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004546:	4a3a      	ldr	r2, [pc, #232]	; (8004630 <HAL_I2C_Mem_Write_DMA+0x1e4>)
 8004548:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454e:	4a39      	ldr	r2, [pc, #228]	; (8004634 <HAL_I2C_Mem_Write_DMA+0x1e8>)
 8004550:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004556:	2200      	movs	r2, #0
 8004558:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455e:	2200      	movs	r2, #0
 8004560:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004566:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3328      	adds	r3, #40	; 0x28
 800456e:	461a      	mov	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004574:	f7ff fa30 	bl	80039d8 <HAL_DMA_Start_IT>
 8004578:	4603      	mov	r3, r0
 800457a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800457c:	7dfb      	ldrb	r3, [r7, #23]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d139      	bne.n	80045f6 <HAL_I2C_Mem_Write_DMA+0x1aa>
 8004582:	e013      	b.n	80045ac <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004598:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e039      	b.n	8004620 <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	8979      	ldrh	r1, [r7, #10]
 80045b4:	2300      	movs	r3, #0
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f001 f906 	bl	80057cc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80045da:	2111      	movs	r1, #17
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f001 f923 	bl	8005828 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045f0:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80045f2:	2300      	movs	r3, #0
 80045f4:	e014      	b.n	8004620 <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2220      	movs	r2, #32
 80045fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460a:	f043 0210 	orr.w	r2, r3, #16
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 800461e:	2302      	movs	r3, #2
  }
}
 8004620:	4618      	mov	r0, r3
 8004622:	3720      	adds	r7, #32
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	ffff0000 	.word	0xffff0000
 800462c:	08004943 	.word	0x08004943
 8004630:	080054ad 	.word	0x080054ad
 8004634:	08005543 	.word	0x08005543

08004638 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	68f9      	ldr	r1, [r7, #12]
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	4798      	blx	r3
  }
}
 8004664:	bf00      	nop
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	460b      	mov	r3, r1
 80046c6:	70fb      	strb	r3, [r7, #3]
 80046c8:	4613      	mov	r3, r2
 80046ca:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <I2C_Slave_ISR_IT+0x24>
 800475c:	2302      	movs	r3, #2
 800475e:	e0ec      	b.n	800493a <I2C_Slave_ISR_IT+0x1fe>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	095b      	lsrs	r3, r3, #5
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	d009      	beq.n	8004788 <I2C_Slave_ISR_IT+0x4c>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	095b      	lsrs	r3, r3, #5
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004780:	6939      	ldr	r1, [r7, #16]
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 fc84 	bl	8005090 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	091b      	lsrs	r3, r3, #4
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b00      	cmp	r3, #0
 8004792:	d04d      	beq.n	8004830 <I2C_Slave_ISR_IT+0xf4>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	091b      	lsrs	r3, r3, #4
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b00      	cmp	r3, #0
 800479e:	d047      	beq.n	8004830 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d128      	bne.n	80047fc <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b28      	cmp	r3, #40	; 0x28
 80047b4:	d108      	bne.n	80047c8 <I2C_Slave_ISR_IT+0x8c>
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047bc:	d104      	bne.n	80047c8 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80047be:	6939      	ldr	r1, [r7, #16]
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 fd3b 	bl	800523c <I2C_ITListenCplt>
 80047c6:	e032      	b.n	800482e <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b29      	cmp	r3, #41	; 0x29
 80047d2:	d10e      	bne.n	80047f2 <I2C_Slave_ISR_IT+0xb6>
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047da:	d00a      	beq.n	80047f2 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2210      	movs	r2, #16
 80047e2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 fe3d 	bl	8005464 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 fb77 	bl	8004ede <I2C_ITSlaveSeqCplt>
 80047f0:	e01d      	b.n	800482e <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2210      	movs	r2, #16
 80047f8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80047fa:	e096      	b.n	800492a <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2210      	movs	r2, #16
 8004802:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004808:	f043 0204 	orr.w	r2, r3, #4
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d004      	beq.n	8004820 <I2C_Slave_ISR_IT+0xe4>
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800481c:	f040 8085 	bne.w	800492a <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004824:	4619      	mov	r1, r3
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 fd5c 	bl	80052e4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800482c:	e07d      	b.n	800492a <I2C_Slave_ISR_IT+0x1ee>
 800482e:	e07c      	b.n	800492a <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	089b      	lsrs	r3, r3, #2
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d030      	beq.n	800489e <I2C_Slave_ISR_IT+0x162>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	089b      	lsrs	r3, r3, #2
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d02a      	beq.n	800489e <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484c:	b29b      	uxth	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d018      	beq.n	8004884 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	b2d2      	uxtb	r2, r2
 800485e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800486e:	3b01      	subs	r3, #1
 8004870:	b29a      	uxth	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004888:	b29b      	uxth	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d14f      	bne.n	800492e <I2C_Slave_ISR_IT+0x1f2>
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004894:	d04b      	beq.n	800492e <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 fb21 	bl	8004ede <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800489c:	e047      	b.n	800492e <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	08db      	lsrs	r3, r3, #3
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00a      	beq.n	80048c0 <I2C_Slave_ISR_IT+0x184>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	08db      	lsrs	r3, r3, #3
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d004      	beq.n	80048c0 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80048b6:	6939      	ldr	r1, [r7, #16]
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f000 fa51 	bl	8004d60 <I2C_ITAddrCplt>
 80048be:	e037      	b.n	8004930 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	085b      	lsrs	r3, r3, #1
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d031      	beq.n	8004930 <I2C_Slave_ISR_IT+0x1f4>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	085b      	lsrs	r3, r3, #1
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d02b      	beq.n	8004930 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d018      	beq.n	8004914 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	781a      	ldrb	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	1c5a      	adds	r2, r3, #1
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	3b01      	subs	r3, #1
 8004900:	b29a      	uxth	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800490a:	3b01      	subs	r3, #1
 800490c:	b29a      	uxth	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	851a      	strh	r2, [r3, #40]	; 0x28
 8004912:	e00d      	b.n	8004930 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800491a:	d002      	beq.n	8004922 <I2C_Slave_ISR_IT+0x1e6>
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d106      	bne.n	8004930 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 fadb 	bl	8004ede <I2C_ITSlaveSeqCplt>
 8004928:	e002      	b.n	8004930 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800492a:	bf00      	nop
 800492c:	e000      	b.n	8004930 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800492e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3718      	adds	r7, #24
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b088      	sub	sp, #32
 8004946:	af02      	add	r7, sp, #8
 8004948:	60f8      	str	r0, [r7, #12]
 800494a:	60b9      	str	r1, [r7, #8]
 800494c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004954:	2b01      	cmp	r3, #1
 8004956:	d101      	bne.n	800495c <I2C_Master_ISR_DMA+0x1a>
 8004958:	2302      	movs	r3, #2
 800495a:	e0e1      	b.n	8004b20 <I2C_Master_ISR_DMA+0x1de>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	091b      	lsrs	r3, r3, #4
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d017      	beq.n	80049a0 <I2C_Master_ISR_DMA+0x5e>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	091b      	lsrs	r3, r3, #4
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	d011      	beq.n	80049a0 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2210      	movs	r2, #16
 8004982:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004988:	f043 0204 	orr.w	r2, r3, #4
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004990:	2112      	movs	r1, #18
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 ff48 	bl	8005828 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 fd63 	bl	8005464 <I2C_Flush_TXDR>
 800499e:	e0ba      	b.n	8004b16 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	09db      	lsrs	r3, r3, #7
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d072      	beq.n	8004a92 <I2C_Master_ISR_DMA+0x150>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	099b      	lsrs	r3, r3, #6
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d06c      	beq.n	8004a92 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049c6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d04e      	beq.n	8004a70 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	b29b      	uxth	r3, r3
 80049da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049de:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2bff      	cmp	r3, #255	; 0xff
 80049e8:	d906      	bls.n	80049f8 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	22ff      	movs	r2, #255	; 0xff
 80049ee:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80049f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049f4:	617b      	str	r3, [r7, #20]
 80049f6:	e010      	b.n	8004a1a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a06:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a0a:	d003      	beq.n	8004a14 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a10:	617b      	str	r3, [r7, #20]
 8004a12:	e002      	b.n	8004a1a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004a14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a18:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	8a79      	ldrh	r1, [r7, #18]
 8004a22:	2300      	movs	r3, #0
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 fecf 	bl	80057cc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b22      	cmp	r3, #34	; 0x22
 8004a4a:	d108      	bne.n	8004a5e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a5a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004a5c:	e05b      	b.n	8004b16 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a6c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004a6e:	e052      	b.n	8004b16 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a7e:	d003      	beq.n	8004a88 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f000 f9ef 	bl	8004e64 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004a86:	e046      	b.n	8004b16 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004a88:	2140      	movs	r1, #64	; 0x40
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 fc2a 	bl	80052e4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004a90:	e041      	b.n	8004b16 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	099b      	lsrs	r3, r3, #6
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d029      	beq.n	8004af2 <I2C_Master_ISR_DMA+0x1b0>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	099b      	lsrs	r3, r3, #6
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d023      	beq.n	8004af2 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d119      	bne.n	8004ae8 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004abe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ac2:	d027      	beq.n	8004b14 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004acc:	d108      	bne.n	8004ae0 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004adc:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004ade:	e019      	b.n	8004b14 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f000 f9bf 	bl	8004e64 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004ae6:	e015      	b.n	8004b14 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004ae8:	2140      	movs	r1, #64	; 0x40
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 fbfa 	bl	80052e4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004af0:	e010      	b.n	8004b14 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	095b      	lsrs	r3, r3, #5
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00b      	beq.n	8004b16 <I2C_Master_ISR_DMA+0x1d4>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	095b      	lsrs	r3, r3, #5
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d005      	beq.n	8004b16 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004b0a:	68b9      	ldr	r1, [r7, #8]
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 fa23 	bl	8004f58 <I2C_ITMasterCplt>
 8004b12:	e000      	b.n	8004b16 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8004b14:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b38:	613b      	str	r3, [r7, #16]
  uint32_t treatdmanack = 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d101      	bne.n	8004b4c <I2C_Slave_ISR_DMA+0x24>
 8004b48:	2302      	movs	r3, #2
 8004b4a:	e0b1      	b.n	8004cb0 <I2C_Slave_ISR_DMA+0x188>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	095b      	lsrs	r3, r3, #5
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d009      	beq.n	8004b74 <I2C_Slave_ISR_DMA+0x4c>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	095b      	lsrs	r3, r3, #5
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d003      	beq.n	8004b74 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004b6c:	68b9      	ldr	r1, [r7, #8]
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 fa8e 	bl	8005090 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	091b      	lsrs	r3, r3, #4
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 8082 	beq.w	8004c86 <I2C_Slave_ISR_DMA+0x15e>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	091b      	lsrs	r3, r3, #4
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d07b      	beq.n	8004c86 <I2C_Slave_ISR_DMA+0x15e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	0b9b      	lsrs	r3, r3, #14
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d105      	bne.n	8004ba6 <I2C_Slave_ISR_DMA+0x7e>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	0bdb      	lsrs	r3, r3, #15
 8004b9e:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d068      	beq.n	8004c78 <I2C_Slave_ISR_DMA+0x150>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00d      	beq.n	8004bca <I2C_Slave_ISR_DMA+0xa2>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	0bdb      	lsrs	r3, r3, #15
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d007      	beq.n	8004bca <I2C_Slave_ISR_DMA+0xa2>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <I2C_Slave_ISR_DMA+0xa2>
          {
            treatdmanack = 1U;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	617b      	str	r3, [r7, #20]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00d      	beq.n	8004bee <I2C_Slave_ISR_DMA+0xc6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	0b9b      	lsrs	r3, r3, #14
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d007      	beq.n	8004bee <I2C_Slave_ISR_DMA+0xc6>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <I2C_Slave_ISR_DMA+0xc6>
          {
            treatdmanack = 1U;
 8004bea:	2301      	movs	r3, #1
 8004bec:	617b      	str	r3, [r7, #20]
          }
        }
      }

      if (treatdmanack == 1U)
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d128      	bne.n	8004c46 <I2C_Slave_ISR_DMA+0x11e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b28      	cmp	r3, #40	; 0x28
 8004bfe:	d108      	bne.n	8004c12 <I2C_Slave_ISR_DMA+0xea>
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c06:	d104      	bne.n	8004c12 <I2C_Slave_ISR_DMA+0xea>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004c08:	68b9      	ldr	r1, [r7, #8]
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f000 fb16 	bl	800523c <I2C_ITListenCplt>
 8004c10:	e031      	b.n	8004c76 <I2C_Slave_ISR_DMA+0x14e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b29      	cmp	r3, #41	; 0x29
 8004c1c:	d10e      	bne.n	8004c3c <I2C_Slave_ISR_DMA+0x114>
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c24:	d00a      	beq.n	8004c3c <I2C_Slave_ISR_DMA+0x114>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2210      	movs	r2, #16
 8004c2c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 fc18 	bl	8005464 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 f952 	bl	8004ede <I2C_ITSlaveSeqCplt>
 8004c3a:	e01c      	b.n	8004c76 <I2C_Slave_ISR_DMA+0x14e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2210      	movs	r2, #16
 8004c42:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004c44:	e01d      	b.n	8004c82 <I2C_Slave_ISR_DMA+0x15a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2210      	movs	r2, #16
 8004c4c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c52:	f043 0204 	orr.w	r2, r3, #4
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	645a      	str	r2, [r3, #68]	; 0x44

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <I2C_Slave_ISR_DMA+0x140>
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c66:	d10c      	bne.n	8004c82 <I2C_Slave_ISR_DMA+0x15a>
        {
          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 fb38 	bl	80052e4 <I2C_ITError>
      if (treatdmanack == 1U)
 8004c74:	e005      	b.n	8004c82 <I2C_Slave_ISR_DMA+0x15a>
 8004c76:	e004      	b.n	8004c82 <I2C_Slave_ISR_DMA+0x15a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2210      	movs	r2, #16
 8004c7e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004c80:	e011      	b.n	8004ca6 <I2C_Slave_ISR_DMA+0x17e>
      if (treatdmanack == 1U)
 8004c82:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004c84:	e00f      	b.n	8004ca6 <I2C_Slave_ISR_DMA+0x17e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	08db      	lsrs	r3, r3, #3
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d009      	beq.n	8004ca6 <I2C_Slave_ISR_DMA+0x17e>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	08db      	lsrs	r3, r3, #3
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <I2C_Slave_ISR_DMA+0x17e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004c9e:	68b9      	ldr	r1, [r7, #8]
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 f85d 	bl	8004d60 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3718      	adds	r7, #24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af02      	add	r7, sp, #8
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	4608      	mov	r0, r1
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	817b      	strh	r3, [r7, #10]
 8004cca:	460b      	mov	r3, r1
 8004ccc:	813b      	strh	r3, [r7, #8]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004cd2:	88fb      	ldrh	r3, [r7, #6]
 8004cd4:	b2da      	uxtb	r2, r3
 8004cd6:	8979      	ldrh	r1, [r7, #10]
 8004cd8:	4b20      	ldr	r3, [pc, #128]	; (8004d5c <I2C_RequestMemoryWrite+0xa4>)
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f000 fd73 	bl	80057cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ce6:	69fa      	ldr	r2, [r7, #28]
 8004ce8:	69b9      	ldr	r1, [r7, #24]
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f000 fcc7 	bl	800567e <I2C_WaitOnTXISFlagUntilTimeout>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e02c      	b.n	8004d54 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cfa:	88fb      	ldrh	r3, [r7, #6]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d105      	bne.n	8004d0c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d00:	893b      	ldrh	r3, [r7, #8]
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	629a      	str	r2, [r3, #40]	; 0x28
 8004d0a:	e015      	b.n	8004d38 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004d0c:	893b      	ldrh	r3, [r7, #8]
 8004d0e:	0a1b      	lsrs	r3, r3, #8
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	b2da      	uxtb	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d1a:	69fa      	ldr	r2, [r7, #28]
 8004d1c:	69b9      	ldr	r1, [r7, #24]
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 fcad 	bl	800567e <I2C_WaitOnTXISFlagUntilTimeout>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e012      	b.n	8004d54 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d2e:	893b      	ldrh	r3, [r7, #8]
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	2180      	movs	r1, #128	; 0x80
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f000 fc5b 	bl	80055fe <I2C_WaitOnFlagUntilTimeout>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e000      	b.n	8004d54 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	80002000 	.word	0x80002000

08004d60 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d76:	2b28      	cmp	r3, #40	; 0x28
 8004d78:	d168      	bne.n	8004e4c <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	0c1b      	lsrs	r3, r3, #16
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	0c1b      	lsrs	r3, r3, #16
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004d98:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004da6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004db4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d137      	bne.n	8004e2e <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8004dbe:	897b      	ldrh	r3, [r7, #10]
 8004dc0:	09db      	lsrs	r3, r3, #7
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	89bb      	ldrh	r3, [r7, #12]
 8004dc6:	4053      	eors	r3, r2
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	f003 0306 	and.w	r3, r3, #6
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d11c      	bne.n	8004e0c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004dd2:	897b      	ldrh	r3, [r7, #10]
 8004dd4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d139      	bne.n	8004e5c <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2208      	movs	r2, #8
 8004df4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004dfe:	89ba      	ldrh	r2, [r7, #12]
 8004e00:	7bfb      	ldrb	r3, [r7, #15]
 8004e02:	4619      	mov	r1, r3
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7ff fc59 	bl	80046bc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004e0a:	e027      	b.n	8004e5c <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 8004e0c:	893b      	ldrh	r3, [r7, #8]
 8004e0e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004e10:	2104      	movs	r1, #4
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 fd76 	bl	8005904 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004e20:	89ba      	ldrh	r2, [r7, #12]
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
 8004e24:	4619      	mov	r1, r3
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7ff fc48 	bl	80046bc <HAL_I2C_AddrCallback>
}
 8004e2c:	e016      	b.n	8004e5c <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004e2e:	2104      	movs	r1, #4
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 fd67 	bl	8005904 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004e3e:	89ba      	ldrh	r2, [r7, #12]
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
 8004e42:	4619      	mov	r1, r3
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f7ff fc39 	bl	80046bc <HAL_I2C_AddrCallback>
}
 8004e4a:	e007      	b.n	8004e5c <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2208      	movs	r2, #8
 8004e52:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004e5c:	bf00      	nop
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b21      	cmp	r3, #33	; 0x21
 8004e7e:	d115      	bne.n	8004eac <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2211      	movs	r2, #17
 8004e8c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004e94:	2101      	movs	r1, #1
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 fd34 	bl	8005904 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f7ff fbe1 	bl	800466c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004eaa:	e014      	b.n	8004ed6 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2212      	movs	r2, #18
 8004eb8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004ec0:	2102      	movs	r1, #2
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fd1e 	bl	8005904 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7ff fbd5 	bl	8004680 <HAL_I2C_MasterRxCpltCallback>
}
 8004ed6:	bf00      	nop
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b082      	sub	sp, #8
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b29      	cmp	r3, #41	; 0x29
 8004ef8:	d112      	bne.n	8004f20 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2228      	movs	r2, #40	; 0x28
 8004efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2221      	movs	r2, #33	; 0x21
 8004f06:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004f08:	2101      	movs	r1, #1
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fcfa 	bl	8005904 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f7ff fbbb 	bl	8004694 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004f1e:	e017      	b.n	8004f50 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b2a      	cmp	r3, #42	; 0x2a
 8004f2a:	d111      	bne.n	8004f50 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2228      	movs	r2, #40	; 0x28
 8004f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2222      	movs	r2, #34	; 0x22
 8004f38:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004f3a:	2102      	movs	r1, #2
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 fce1 	bl	8005904 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7ff fbac 	bl	80046a8 <HAL_I2C_SlaveRxCpltCallback>
}
 8004f50:	bf00      	nop
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2220      	movs	r2, #32
 8004f68:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	6859      	ldr	r1, [r3, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	4b44      	ldr	r3, [pc, #272]	; (8005088 <I2C_ITMasterCplt+0x130>)
 8004f76:	400b      	ands	r3, r1
 8004f78:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a40      	ldr	r2, [pc, #256]	; (800508c <I2C_ITMasterCplt+0x134>)
 8004f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	091b      	lsrs	r3, r3, #4
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d009      	beq.n	8004fac <I2C_ITMasterCplt+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2210      	movs	r2, #16
 8004f9e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa4:	f043 0204 	orr.w	r2, r3, #4
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 fa59 	bl	8005464 <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004fb2:	2103      	movs	r1, #3
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 fca5 	bl	8005904 <I2C_Disable_IRQ>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b60      	cmp	r3, #96	; 0x60
 8004fca:	d002      	beq.n	8004fd2 <I2C_ITMasterCplt+0x7a>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d006      	beq.n	8004fe0 <I2C_ITMasterCplt+0x88>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 f983 	bl	80052e4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004fde:	e04e      	b.n	800507e <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b21      	cmp	r3, #33	; 0x21
 8004fea:	d121      	bne.n	8005030 <I2C_ITMasterCplt+0xd8>
    hi2c->State = HAL_I2C_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b40      	cmp	r3, #64	; 0x40
 8004ffe:	d10b      	bne.n	8005018 <I2C_ITMasterCplt+0xc0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7ff fb6b 	bl	80046ec <HAL_I2C_MemTxCpltCallback>
}
 8005016:	e032      	b.n	800507e <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7ff fb1f 	bl	800466c <HAL_I2C_MasterTxCpltCallback>
}
 800502e:	e026      	b.n	800507e <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b22      	cmp	r3, #34	; 0x22
 800503a:	d120      	bne.n	800507e <I2C_ITMasterCplt+0x126>
    hi2c->State = HAL_I2C_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2220      	movs	r2, #32
 8005040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b40      	cmp	r3, #64	; 0x40
 800504e:	d10b      	bne.n	8005068 <I2C_ITMasterCplt+0x110>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7ff fb4d 	bl	8004700 <HAL_I2C_MemRxCpltCallback>
}
 8005066:	e00a      	b.n	800507e <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7ff fb01 	bl	8004680 <HAL_I2C_MasterRxCpltCallback>
}
 800507e:	bf00      	nop
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	fe00e800 	.word	0xfe00e800
 800508c:	ffff0000 	.word	0xffff0000

08005090 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2220      	movs	r2, #32
 80050ac:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80050ae:	2107      	movs	r1, #7
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 fc27 	bl	8005904 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050c4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6859      	ldr	r1, [r3, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	4b58      	ldr	r3, [pc, #352]	; (8005234 <I2C_ITSlaveCplt+0x1a4>)
 80050d2:	400b      	ands	r3, r1
 80050d4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f9c4 	bl	8005464 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	0b9b      	lsrs	r3, r3, #14
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00b      	beq.n	8005100 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d018      	beq.n	8005122 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050fe:	e010      	b.n	8005122 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	0bdb      	lsrs	r3, r3, #15
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00a      	beq.n	8005122 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005110:	2b00      	cmp	r3, #0
 8005112:	d006      	beq.n	8005122 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	b29a      	uxth	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	089b      	lsrs	r3, r3, #2
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d020      	beq.n	8005170 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f023 0304 	bic.w	r3, r3, #4
 8005134:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	b2d2      	uxtb	r2, r2
 8005142:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00c      	beq.n	8005170 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800515a:	3b01      	subs	r3, #1
 800515c:	b29a      	uxth	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005166:	b29b      	uxth	r3, r3
 8005168:	3b01      	subs	r3, #1
 800516a:	b29a      	uxth	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005174:	b29b      	uxth	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d005      	beq.n	8005186 <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800517e:	f043 0204 	orr.w	r2, r3, #4
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d010      	beq.n	80051c4 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a6:	4619      	mov	r1, r3
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f89b 	bl	80052e4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b28      	cmp	r3, #40	; 0x28
 80051b8:	d138      	bne.n	800522c <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80051ba:	68f9      	ldr	r1, [r7, #12]
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 f83d 	bl	800523c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80051c2:	e033      	b.n	800522c <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051cc:	d011      	beq.n	80051f2 <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7ff fe85 	bl	8004ede <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a18      	ldr	r2, [pc, #96]	; (8005238 <I2C_ITSlaveCplt+0x1a8>)
 80051d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2220      	movs	r2, #32
 80051de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7ff fa74 	bl	80046d8 <HAL_I2C_ListenCpltCallback>
}
 80051f0:	e01c      	b.n	800522c <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b22      	cmp	r3, #34	; 0x22
 80051fc:	d10b      	bne.n	8005216 <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2220      	movs	r2, #32
 8005202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7ff fa4a 	bl	80046a8 <HAL_I2C_SlaveRxCpltCallback>
}
 8005214:	e00a      	b.n	800522c <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2220      	movs	r2, #32
 800521a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7ff fa34 	bl	8004694 <HAL_I2C_SlaveTxCpltCallback>
}
 800522c:	bf00      	nop
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	fe00e800 	.word	0xfe00e800
 8005238:	ffff0000 	.word	0xffff0000

0800523c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a25      	ldr	r2, [pc, #148]	; (80052e0 <I2C_ITListenCplt+0xa4>)
 800524a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2220      	movs	r2, #32
 8005256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	089b      	lsrs	r3, r3, #2
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b00      	cmp	r3, #0
 8005272:	d022      	beq.n	80052ba <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	b2d2      	uxtb	r2, r2
 8005280:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	1c5a      	adds	r2, r3, #1
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005290:	2b00      	cmp	r3, #0
 8005292:	d012      	beq.n	80052ba <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005298:	3b01      	subs	r3, #1
 800529a:	b29a      	uxth	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	3b01      	subs	r3, #1
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b2:	f043 0204 	orr.w	r2, r3, #4
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80052ba:	2107      	movs	r1, #7
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 fb21 	bl	8005904 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2210      	movs	r2, #16
 80052c8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7ff fa00 	bl	80046d8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80052d8:	bf00      	nop
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	ffff0000 	.word	0xffff0000

080052e4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052f4:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a55      	ldr	r2, [pc, #340]	; (8005458 <I2C_ITError+0x174>)
 8005302:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	431a      	orrs	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005316:	7bfb      	ldrb	r3, [r7, #15]
 8005318:	2b28      	cmp	r3, #40	; 0x28
 800531a:	d005      	beq.n	8005328 <I2C_ITError+0x44>
 800531c:	7bfb      	ldrb	r3, [r7, #15]
 800531e:	2b29      	cmp	r3, #41	; 0x29
 8005320:	d002      	beq.n	8005328 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005322:	7bfb      	ldrb	r3, [r7, #15]
 8005324:	2b2a      	cmp	r3, #42	; 0x2a
 8005326:	d10e      	bne.n	8005346 <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005328:	2103      	movs	r1, #3
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 faea 	bl	8005904 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2228      	movs	r2, #40	; 0x28
 8005334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a46      	ldr	r2, [pc, #280]	; (800545c <I2C_ITError+0x178>)
 8005342:	635a      	str	r2, [r3, #52]	; 0x34
 8005344:	e013      	b.n	800536e <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005346:	2107      	movs	r1, #7
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 fadb 	bl	8005904 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b60      	cmp	r3, #96	; 0x60
 8005358:	d003      	beq.n	8005362 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2220      	movs	r2, #32
 800535e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005378:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800537c:	d123      	bne.n	80053c6 <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800538c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005392:	2b00      	cmp	r3, #0
 8005394:	d05c      	beq.n	8005450 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539a:	4a31      	ldr	r2, [pc, #196]	; (8005460 <I2C_ITError+0x17c>)
 800539c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7fe fb74 	bl	8003a98 <HAL_DMA_Abort_IT>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d04c      	beq.n	8005450 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053c0:	4610      	mov	r0, r2
 80053c2:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80053c4:	e044      	b.n	8005450 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053d4:	d123      	bne.n	800541e <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053e4:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d030      	beq.n	8005450 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f2:	4a1b      	ldr	r2, [pc, #108]	; (8005460 <I2C_ITError+0x17c>)
 80053f4:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005402:	4618      	mov	r0, r3
 8005404:	f7fe fb48 	bl	8003a98 <HAL_DMA_Abort_IT>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d020      	beq.n	8005450 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005418:	4610      	mov	r0, r2
 800541a:	4798      	blx	r3
}
 800541c:	e018      	b.n	8005450 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b60      	cmp	r3, #96	; 0x60
 8005428:	d10b      	bne.n	8005442 <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2220      	movs	r2, #32
 800542e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7ff f974 	bl	8004728 <HAL_I2C_AbortCpltCallback>
}
 8005440:	e006      	b.n	8005450 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7ff f962 	bl	8004714 <HAL_I2C_ErrorCallback>
}
 8005450:	bf00      	nop
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	ffff0000 	.word	0xffff0000
 800545c:	0800473d 	.word	0x0800473d
 8005460:	080055b7 	.word	0x080055b7

08005464 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b02      	cmp	r3, #2
 8005478:	d103      	bne.n	8005482 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2200      	movs	r2, #0
 8005480:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	2b01      	cmp	r3, #1
 800548e:	d007      	beq.n	80054a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699a      	ldr	r2, [r3, #24]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0201 	orr.w	r2, r2, #1
 800549e:	619a      	str	r2, [r3, #24]
  }
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80054c8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d104      	bne.n	80054de <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80054d4:	2112      	movs	r1, #18
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 f9a6 	bl	8005828 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80054dc:	e02d      	b.n	800553a <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80054e6:	441a      	add	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2bff      	cmp	r3, #255	; 0xff
 80054f4:	d903      	bls.n	80054fe <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	22ff      	movs	r2, #255	; 0xff
 80054fa:	851a      	strh	r2, [r3, #40]	; 0x28
 80054fc:	e004      	b.n	8005508 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005502:	b29a      	uxth	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	4619      	mov	r1, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	3328      	adds	r3, #40	; 0x28
 8005518:	461a      	mov	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800551e:	f7fe fa5b 	bl	80039d8 <HAL_DMA_Start_IT>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d004      	beq.n	8005532 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005528:	2110      	movs	r1, #16
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f7ff feda 	bl	80052e4 <I2C_ITError>
}
 8005530:	e003      	b.n	800553a <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8005532:	2112      	movs	r1, #18
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f000 f977 	bl	8005828 <I2C_Enable_IRQ>
}
 800553a:	bf00      	nop
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b084      	sub	sp, #16
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800554a:	2300      	movs	r3, #0
 800554c:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005552:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005558:	2b00      	cmp	r3, #0
 800555a:	d007      	beq.n	800556c <I2C_DMAError+0x2a>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d101      	bne.n	800556c <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 8005568:	2301      	movs	r3, #1
 800556a:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005570:	2b00      	cmp	r3, #0
 8005572:	d007      	beq.n	8005584 <I2C_DMAError+0x42>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8005580:	2301      	movs	r3, #1
 8005582:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7fe fc33 	bl	8003df0 <HAL_DMA_GetError>
 800558a:	4603      	mov	r3, r0
 800558c:	2b02      	cmp	r3, #2
 800558e:	d00e      	beq.n	80055ae <I2C_DMAError+0x6c>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00b      	beq.n	80055ae <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055a4:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80055a6:	2110      	movs	r1, #16
 80055a8:	68b8      	ldr	r0, [r7, #8]
 80055aa:	f7ff fe9b 	bl	80052e4 <I2C_ITError>
  }
}
 80055ae:	bf00      	nop
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b084      	sub	sp, #16
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c8:	2200      	movs	r2, #0
 80055ca:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d0:	2200      	movs	r2, #0
 80055d2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b60      	cmp	r3, #96	; 0x60
 80055de:	d107      	bne.n	80055f0 <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2220      	movs	r2, #32
 80055e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f7ff f89d 	bl	8004728 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80055ee:	e002      	b.n	80055f6 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f7ff f88f 	bl	8004714 <HAL_I2C_ErrorCallback>
}
 80055f6:	bf00      	nop
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b084      	sub	sp, #16
 8005602:	af00      	add	r7, sp, #0
 8005604:	60f8      	str	r0, [r7, #12]
 8005606:	60b9      	str	r1, [r7, #8]
 8005608:	603b      	str	r3, [r7, #0]
 800560a:	4613      	mov	r3, r2
 800560c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800560e:	e022      	b.n	8005656 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005616:	d01e      	beq.n	8005656 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005618:	f7fd fd8a 	bl	8003130 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	429a      	cmp	r2, r3
 8005626:	d302      	bcc.n	800562e <I2C_WaitOnFlagUntilTimeout+0x30>
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d113      	bne.n	8005656 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005632:	f043 0220 	orr.w	r2, r3, #32
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2220      	movs	r2, #32
 800563e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e00f      	b.n	8005676 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	699a      	ldr	r2, [r3, #24]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	4013      	ands	r3, r2
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	429a      	cmp	r2, r3
 8005664:	bf0c      	ite	eq
 8005666:	2301      	moveq	r3, #1
 8005668:	2300      	movne	r3, #0
 800566a:	b2db      	uxtb	r3, r3
 800566c:	461a      	mov	r2, r3
 800566e:	79fb      	ldrb	r3, [r7, #7]
 8005670:	429a      	cmp	r2, r3
 8005672:	d0cd      	beq.n	8005610 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b084      	sub	sp, #16
 8005682:	af00      	add	r7, sp, #0
 8005684:	60f8      	str	r0, [r7, #12]
 8005686:	60b9      	str	r1, [r7, #8]
 8005688:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800568a:	e02c      	b.n	80056e6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	68b9      	ldr	r1, [r7, #8]
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f000 f835 	bl	8005700 <I2C_IsAcknowledgeFailed>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e02a      	b.n	80056f6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a6:	d01e      	beq.n	80056e6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a8:	f7fd fd42 	bl	8003130 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d302      	bcc.n	80056be <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d113      	bne.n	80056e6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c2:	f043 0220 	orr.w	r2, r3, #32
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2220      	movs	r2, #32
 80056ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e007      	b.n	80056f6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d1cb      	bne.n	800568c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
	...

08005700 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	f003 0310 	and.w	r3, r3, #16
 8005716:	2b10      	cmp	r3, #16
 8005718:	d151      	bne.n	80057be <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800571a:	e022      	b.n	8005762 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005722:	d01e      	beq.n	8005762 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005724:	f7fd fd04 	bl	8003130 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	429a      	cmp	r2, r3
 8005732:	d302      	bcc.n	800573a <I2C_IsAcknowledgeFailed+0x3a>
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d113      	bne.n	8005762 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573e:	f043 0220 	orr.w	r2, r3, #32
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2220      	movs	r2, #32
 800574a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e02e      	b.n	80057c0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	f003 0320 	and.w	r3, r3, #32
 800576c:	2b20      	cmp	r3, #32
 800576e:	d1d5      	bne.n	800571c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2210      	movs	r2, #16
 8005776:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2220      	movs	r2, #32
 800577e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f7ff fe6f 	bl	8005464 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6859      	ldr	r1, [r3, #4]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	4b0d      	ldr	r3, [pc, #52]	; (80057c8 <I2C_IsAcknowledgeFailed+0xc8>)
 8005792:	400b      	ands	r3, r1
 8005794:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800579a:	f043 0204 	orr.w	r2, r3, #4
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2220      	movs	r2, #32
 80057a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e000      	b.n	80057c0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	fe00e800 	.word	0xfe00e800

080057cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	607b      	str	r3, [r7, #4]
 80057d6:	460b      	mov	r3, r1
 80057d8:	817b      	strh	r3, [r7, #10]
 80057da:	4613      	mov	r3, r2
 80057dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	0d5b      	lsrs	r3, r3, #21
 80057e8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80057ec:	4b0d      	ldr	r3, [pc, #52]	; (8005824 <I2C_TransferConfig+0x58>)
 80057ee:	430b      	orrs	r3, r1
 80057f0:	43db      	mvns	r3, r3
 80057f2:	ea02 0103 	and.w	r1, r2, r3
 80057f6:	897b      	ldrh	r3, [r7, #10]
 80057f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80057fc:	7a7b      	ldrb	r3, [r7, #9]
 80057fe:	041b      	lsls	r3, r3, #16
 8005800:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005804:	431a      	orrs	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	431a      	orrs	r2, r3
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	431a      	orrs	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005816:	bf00      	nop
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	03ff63ff 	.word	0x03ff63ff

08005828 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	460b      	mov	r3, r1
 8005832:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005834:	2300      	movs	r3, #0
 8005836:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800583c:	4a2f      	ldr	r2, [pc, #188]	; (80058fc <I2C_Enable_IRQ+0xd4>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d004      	beq.n	800584c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005846:	4a2e      	ldr	r2, [pc, #184]	; (8005900 <I2C_Enable_IRQ+0xd8>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d124      	bne.n	8005896 <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800584c:	887b      	ldrh	r3, [r7, #2]
 800584e:	f003 0304 	and.w	r3, r3, #4
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800585c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800585e:	887b      	ldrh	r3, [r7, #2]
 8005860:	f003 0311 	and.w	r3, r3, #17
 8005864:	2b11      	cmp	r3, #17
 8005866:	d103      	bne.n	8005870 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800586e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8005870:	887b      	ldrh	r3, [r7, #2]
 8005872:	f003 0312 	and.w	r3, r3, #18
 8005876:	2b12      	cmp	r3, #18
 8005878:	d103      	bne.n	8005882 <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f043 0320 	orr.w	r3, r3, #32
 8005880:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8005882:	887b      	ldrh	r3, [r7, #2]
 8005884:	f003 0312 	and.w	r3, r3, #18
 8005888:	2b12      	cmp	r3, #18
 800588a:	d128      	bne.n	80058de <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005892:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8005894:	e023      	b.n	80058de <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005896:	887b      	ldrh	r3, [r7, #2]
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80058a6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80058a8:	887b      	ldrh	r3, [r7, #2]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80058b8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80058ba:	887b      	ldrh	r3, [r7, #2]
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d003      	beq.n	80058cc <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80058ca:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80058cc:	887b      	ldrh	r3, [r7, #2]
 80058ce:	f003 0312 	and.w	r3, r3, #18
 80058d2:	2b12      	cmp	r3, #18
 80058d4:	d103      	bne.n	80058de <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f043 0320 	orr.w	r3, r3, #32
 80058dc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6819      	ldr	r1, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	430a      	orrs	r2, r1
 80058ec:	601a      	str	r2, [r3, #0]
}
 80058ee:	bf00      	nop
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	08004943 	.word	0x08004943
 8005900:	08004b29 	.word	0x08004b29

08005904 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	460b      	mov	r3, r1
 800590e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005910:	2300      	movs	r3, #0
 8005912:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005914:	887b      	ldrh	r3, [r7, #2]
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00f      	beq.n	800593e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005924:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800592c:	b2db      	uxtb	r3, r3
 800592e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005932:	2b28      	cmp	r3, #40	; 0x28
 8005934:	d003      	beq.n	800593e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800593c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800593e:	887b      	ldrh	r3, [r7, #2]
 8005940:	f003 0302 	and.w	r3, r3, #2
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00f      	beq.n	8005968 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800594e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005956:	b2db      	uxtb	r3, r3
 8005958:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800595c:	2b28      	cmp	r3, #40	; 0x28
 800595e:	d003      	beq.n	8005968 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005966:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005968:	887b      	ldrh	r3, [r7, #2]
 800596a:	f003 0304 	and.w	r3, r3, #4
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005978:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800597a:	887b      	ldrh	r3, [r7, #2]
 800597c:	f003 0311 	and.w	r3, r3, #17
 8005980:	2b11      	cmp	r3, #17
 8005982:	d103      	bne.n	800598c <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800598a:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800598c:	887b      	ldrh	r3, [r7, #2]
 800598e:	f003 0312 	and.w	r3, r3, #18
 8005992:	2b12      	cmp	r3, #18
 8005994:	d103      	bne.n	800599e <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f043 0320 	orr.w	r3, r3, #32
 800599c:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800599e:	887b      	ldrh	r3, [r7, #2]
 80059a0:	f003 0312 	and.w	r3, r3, #18
 80059a4:	2b12      	cmp	r3, #18
 80059a6:	d103      	bne.n	80059b0 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059ae:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6819      	ldr	r1, [r3, #0]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	43da      	mvns	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	400a      	ands	r2, r1
 80059c0:	601a      	str	r2, [r3, #0]
}
 80059c2:	bf00      	nop
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
 80059d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b20      	cmp	r3, #32
 80059e2:	d138      	bne.n	8005a56 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d101      	bne.n	80059f2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80059ee:	2302      	movs	r3, #2
 80059f0:	e032      	b.n	8005a58 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2224      	movs	r2, #36	; 0x24
 80059fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 0201 	bic.w	r2, r2, #1
 8005a10:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a20:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6819      	ldr	r1, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f042 0201 	orr.w	r2, r2, #1
 8005a40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2220      	movs	r2, #32
 8005a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a52:	2300      	movs	r3, #0
 8005a54:	e000      	b.n	8005a58 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a56:	2302      	movs	r3, #2
  }
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b20      	cmp	r3, #32
 8005a78:	d139      	bne.n	8005aee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e033      	b.n	8005af0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2224      	movs	r2, #36	; 0x24
 8005a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f022 0201 	bic.w	r2, r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005ab6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	021b      	lsls	r3, r3, #8
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f042 0201 	orr.w	r2, r2, #1
 8005ad8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005aea:	2300      	movs	r3, #0
 8005aec:	e000      	b.n	8005af0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005aee:	2302      	movs	r3, #2
  }
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005afc:	b480      	push	{r7}
 8005afe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b00:	4b05      	ldr	r3, [pc, #20]	; (8005b18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a04      	ldr	r2, [pc, #16]	; (8005b18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b0a:	6013      	str	r3, [r2, #0]
}
 8005b0c:	bf00      	nop
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	40007000 	.word	0x40007000

08005b1c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005b22:	2300      	movs	r3, #0
 8005b24:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005b26:	4b23      	ldr	r3, [pc, #140]	; (8005bb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	4a22      	ldr	r2, [pc, #136]	; (8005bb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b30:	6413      	str	r3, [r2, #64]	; 0x40
 8005b32:	4b20      	ldr	r3, [pc, #128]	; (8005bb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b3a:	603b      	str	r3, [r7, #0]
 8005b3c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005b3e:	4b1e      	ldr	r3, [pc, #120]	; (8005bb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a1d      	ldr	r2, [pc, #116]	; (8005bb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b48:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b4a:	f7fd faf1 	bl	8003130 <HAL_GetTick>
 8005b4e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005b50:	e009      	b.n	8005b66 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005b52:	f7fd faed 	bl	8003130 <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b60:	d901      	bls.n	8005b66 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e022      	b.n	8005bac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005b66:	4b14      	ldr	r3, [pc, #80]	; (8005bb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b72:	d1ee      	bne.n	8005b52 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005b74:	4b10      	ldr	r3, [pc, #64]	; (8005bb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a0f      	ldr	r2, [pc, #60]	; (8005bb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b7e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b80:	f7fd fad6 	bl	8003130 <HAL_GetTick>
 8005b84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005b86:	e009      	b.n	8005b9c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005b88:	f7fd fad2 	bl	8003130 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b96:	d901      	bls.n	8005b9c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e007      	b.n	8005bac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005b9c:	4b06      	ldr	r3, [pc, #24]	; (8005bb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ba4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ba8:	d1ee      	bne.n	8005b88 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3708      	adds	r7, #8
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	40023800 	.word	0x40023800
 8005bb8:	40007000 	.word	0x40007000

08005bbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e291      	b.n	80060f6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f000 8087 	beq.w	8005cee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005be0:	4b96      	ldr	r3, [pc, #600]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f003 030c 	and.w	r3, r3, #12
 8005be8:	2b04      	cmp	r3, #4
 8005bea:	d00c      	beq.n	8005c06 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bec:	4b93      	ldr	r3, [pc, #588]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f003 030c 	and.w	r3, r3, #12
 8005bf4:	2b08      	cmp	r3, #8
 8005bf6:	d112      	bne.n	8005c1e <HAL_RCC_OscConfig+0x62>
 8005bf8:	4b90      	ldr	r3, [pc, #576]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c04:	d10b      	bne.n	8005c1e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c06:	4b8d      	ldr	r3, [pc, #564]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d06c      	beq.n	8005cec <HAL_RCC_OscConfig+0x130>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d168      	bne.n	8005cec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e26b      	b.n	80060f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c26:	d106      	bne.n	8005c36 <HAL_RCC_OscConfig+0x7a>
 8005c28:	4b84      	ldr	r3, [pc, #528]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a83      	ldr	r2, [pc, #524]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c32:	6013      	str	r3, [r2, #0]
 8005c34:	e02e      	b.n	8005c94 <HAL_RCC_OscConfig+0xd8>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10c      	bne.n	8005c58 <HAL_RCC_OscConfig+0x9c>
 8005c3e:	4b7f      	ldr	r3, [pc, #508]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a7e      	ldr	r2, [pc, #504]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005c44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c48:	6013      	str	r3, [r2, #0]
 8005c4a:	4b7c      	ldr	r3, [pc, #496]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a7b      	ldr	r2, [pc, #492]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005c50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c54:	6013      	str	r3, [r2, #0]
 8005c56:	e01d      	b.n	8005c94 <HAL_RCC_OscConfig+0xd8>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c60:	d10c      	bne.n	8005c7c <HAL_RCC_OscConfig+0xc0>
 8005c62:	4b76      	ldr	r3, [pc, #472]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a75      	ldr	r2, [pc, #468]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c6c:	6013      	str	r3, [r2, #0]
 8005c6e:	4b73      	ldr	r3, [pc, #460]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a72      	ldr	r2, [pc, #456]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	e00b      	b.n	8005c94 <HAL_RCC_OscConfig+0xd8>
 8005c7c:	4b6f      	ldr	r3, [pc, #444]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a6e      	ldr	r2, [pc, #440]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	4b6c      	ldr	r3, [pc, #432]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a6b      	ldr	r2, [pc, #428]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d013      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c9c:	f7fd fa48 	bl	8003130 <HAL_GetTick>
 8005ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ca2:	e008      	b.n	8005cb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ca4:	f7fd fa44 	bl	8003130 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	2b64      	cmp	r3, #100	; 0x64
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e21f      	b.n	80060f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cb6:	4b61      	ldr	r3, [pc, #388]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d0f0      	beq.n	8005ca4 <HAL_RCC_OscConfig+0xe8>
 8005cc2:	e014      	b.n	8005cee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc4:	f7fd fa34 	bl	8003130 <HAL_GetTick>
 8005cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cca:	e008      	b.n	8005cde <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ccc:	f7fd fa30 	bl	8003130 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b64      	cmp	r3, #100	; 0x64
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e20b      	b.n	80060f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cde:	4b57      	ldr	r3, [pc, #348]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1f0      	bne.n	8005ccc <HAL_RCC_OscConfig+0x110>
 8005cea:	e000      	b.n	8005cee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d069      	beq.n	8005dce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005cfa:	4b50      	ldr	r3, [pc, #320]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f003 030c 	and.w	r3, r3, #12
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00b      	beq.n	8005d1e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d06:	4b4d      	ldr	r3, [pc, #308]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f003 030c 	and.w	r3, r3, #12
 8005d0e:	2b08      	cmp	r3, #8
 8005d10:	d11c      	bne.n	8005d4c <HAL_RCC_OscConfig+0x190>
 8005d12:	4b4a      	ldr	r3, [pc, #296]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d116      	bne.n	8005d4c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d1e:	4b47      	ldr	r3, [pc, #284]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d005      	beq.n	8005d36 <HAL_RCC_OscConfig+0x17a>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d001      	beq.n	8005d36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e1df      	b.n	80060f6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d36:	4b41      	ldr	r3, [pc, #260]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	493d      	ldr	r1, [pc, #244]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d4a:	e040      	b.n	8005dce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d023      	beq.n	8005d9c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d54:	4b39      	ldr	r3, [pc, #228]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a38      	ldr	r2, [pc, #224]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005d5a:	f043 0301 	orr.w	r3, r3, #1
 8005d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d60:	f7fd f9e6 	bl	8003130 <HAL_GetTick>
 8005d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d66:	e008      	b.n	8005d7a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d68:	f7fd f9e2 	bl	8003130 <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d901      	bls.n	8005d7a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e1bd      	b.n	80060f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d7a:	4b30      	ldr	r3, [pc, #192]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d0f0      	beq.n	8005d68 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d86:	4b2d      	ldr	r3, [pc, #180]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	4929      	ldr	r1, [pc, #164]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	600b      	str	r3, [r1, #0]
 8005d9a:	e018      	b.n	8005dce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d9c:	4b27      	ldr	r3, [pc, #156]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a26      	ldr	r2, [pc, #152]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005da2:	f023 0301 	bic.w	r3, r3, #1
 8005da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da8:	f7fd f9c2 	bl	8003130 <HAL_GetTick>
 8005dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dae:	e008      	b.n	8005dc2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005db0:	f7fd f9be 	bl	8003130 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d901      	bls.n	8005dc2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e199      	b.n	80060f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dc2:	4b1e      	ldr	r3, [pc, #120]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0302 	and.w	r3, r3, #2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1f0      	bne.n	8005db0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0308 	and.w	r3, r3, #8
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d038      	beq.n	8005e4c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d019      	beq.n	8005e16 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005de2:	4b16      	ldr	r3, [pc, #88]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005de6:	4a15      	ldr	r2, [pc, #84]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005de8:	f043 0301 	orr.w	r3, r3, #1
 8005dec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dee:	f7fd f99f 	bl	8003130 <HAL_GetTick>
 8005df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005df4:	e008      	b.n	8005e08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005df6:	f7fd f99b 	bl	8003130 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d901      	bls.n	8005e08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e176      	b.n	80060f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e08:	4b0c      	ldr	r3, [pc, #48]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e0c:	f003 0302 	and.w	r3, r3, #2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d0f0      	beq.n	8005df6 <HAL_RCC_OscConfig+0x23a>
 8005e14:	e01a      	b.n	8005e4c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e16:	4b09      	ldr	r3, [pc, #36]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e1a:	4a08      	ldr	r2, [pc, #32]	; (8005e3c <HAL_RCC_OscConfig+0x280>)
 8005e1c:	f023 0301 	bic.w	r3, r3, #1
 8005e20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e22:	f7fd f985 	bl	8003130 <HAL_GetTick>
 8005e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e28:	e00a      	b.n	8005e40 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e2a:	f7fd f981 	bl	8003130 <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d903      	bls.n	8005e40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e15c      	b.n	80060f6 <HAL_RCC_OscConfig+0x53a>
 8005e3c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e40:	4b91      	ldr	r3, [pc, #580]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 8005e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e44:	f003 0302 	and.w	r3, r3, #2
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1ee      	bne.n	8005e2a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 80a4 	beq.w	8005fa2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e5a:	4b8b      	ldr	r3, [pc, #556]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10d      	bne.n	8005e82 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e66:	4b88      	ldr	r3, [pc, #544]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 8005e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6a:	4a87      	ldr	r2, [pc, #540]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 8005e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e70:	6413      	str	r3, [r2, #64]	; 0x40
 8005e72:	4b85      	ldr	r3, [pc, #532]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 8005e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e7a:	60bb      	str	r3, [r7, #8]
 8005e7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e82:	4b82      	ldr	r3, [pc, #520]	; (800608c <HAL_RCC_OscConfig+0x4d0>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d118      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005e8e:	4b7f      	ldr	r3, [pc, #508]	; (800608c <HAL_RCC_OscConfig+0x4d0>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a7e      	ldr	r2, [pc, #504]	; (800608c <HAL_RCC_OscConfig+0x4d0>)
 8005e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e9a:	f7fd f949 	bl	8003130 <HAL_GetTick>
 8005e9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ea0:	e008      	b.n	8005eb4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ea2:	f7fd f945 	bl	8003130 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	2b64      	cmp	r3, #100	; 0x64
 8005eae:	d901      	bls.n	8005eb4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e120      	b.n	80060f6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005eb4:	4b75      	ldr	r3, [pc, #468]	; (800608c <HAL_RCC_OscConfig+0x4d0>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d0f0      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d106      	bne.n	8005ed6 <HAL_RCC_OscConfig+0x31a>
 8005ec8:	4b6f      	ldr	r3, [pc, #444]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 8005eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ecc:	4a6e      	ldr	r2, [pc, #440]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 8005ece:	f043 0301 	orr.w	r3, r3, #1
 8005ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ed4:	e02d      	b.n	8005f32 <HAL_RCC_OscConfig+0x376>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10c      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x33c>
 8005ede:	4b6a      	ldr	r3, [pc, #424]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 8005ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee2:	4a69      	ldr	r2, [pc, #420]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 8005ee4:	f023 0301 	bic.w	r3, r3, #1
 8005ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8005eea:	4b67      	ldr	r3, [pc, #412]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 8005eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eee:	4a66      	ldr	r2, [pc, #408]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 8005ef0:	f023 0304 	bic.w	r3, r3, #4
 8005ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ef6:	e01c      	b.n	8005f32 <HAL_RCC_OscConfig+0x376>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	2b05      	cmp	r3, #5
 8005efe:	d10c      	bne.n	8005f1a <HAL_RCC_OscConfig+0x35e>
 8005f00:	4b61      	ldr	r3, [pc, #388]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 8005f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f04:	4a60      	ldr	r2, [pc, #384]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 8005f06:	f043 0304 	orr.w	r3, r3, #4
 8005f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f0c:	4b5e      	ldr	r3, [pc, #376]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 8005f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f10:	4a5d      	ldr	r2, [pc, #372]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 8005f12:	f043 0301 	orr.w	r3, r3, #1
 8005f16:	6713      	str	r3, [r2, #112]	; 0x70
 8005f18:	e00b      	b.n	8005f32 <HAL_RCC_OscConfig+0x376>
 8005f1a:	4b5b      	ldr	r3, [pc, #364]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 8005f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1e:	4a5a      	ldr	r2, [pc, #360]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 8005f20:	f023 0301 	bic.w	r3, r3, #1
 8005f24:	6713      	str	r3, [r2, #112]	; 0x70
 8005f26:	4b58      	ldr	r3, [pc, #352]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 8005f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2a:	4a57      	ldr	r2, [pc, #348]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 8005f2c:	f023 0304 	bic.w	r3, r3, #4
 8005f30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d015      	beq.n	8005f66 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f3a:	f7fd f8f9 	bl	8003130 <HAL_GetTick>
 8005f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f40:	e00a      	b.n	8005f58 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f42:	f7fd f8f5 	bl	8003130 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d901      	bls.n	8005f58 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e0ce      	b.n	80060f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f58:	4b4b      	ldr	r3, [pc, #300]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 8005f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d0ee      	beq.n	8005f42 <HAL_RCC_OscConfig+0x386>
 8005f64:	e014      	b.n	8005f90 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f66:	f7fd f8e3 	bl	8003130 <HAL_GetTick>
 8005f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f6c:	e00a      	b.n	8005f84 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f6e:	f7fd f8df 	bl	8003130 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d901      	bls.n	8005f84 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e0b8      	b.n	80060f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f84:	4b40      	ldr	r3, [pc, #256]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 8005f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f88:	f003 0302 	and.w	r3, r3, #2
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1ee      	bne.n	8005f6e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f90:	7dfb      	ldrb	r3, [r7, #23]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d105      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f96:	4b3c      	ldr	r3, [pc, #240]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 8005f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9a:	4a3b      	ldr	r2, [pc, #236]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 8005f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fa0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f000 80a4 	beq.w	80060f4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fac:	4b36      	ldr	r3, [pc, #216]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f003 030c 	and.w	r3, r3, #12
 8005fb4:	2b08      	cmp	r3, #8
 8005fb6:	d06b      	beq.n	8006090 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d149      	bne.n	8006054 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fc0:	4b31      	ldr	r3, [pc, #196]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a30      	ldr	r2, [pc, #192]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 8005fc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fcc:	f7fd f8b0 	bl	8003130 <HAL_GetTick>
 8005fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fd2:	e008      	b.n	8005fe6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fd4:	f7fd f8ac 	bl	8003130 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d901      	bls.n	8005fe6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e087      	b.n	80060f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fe6:	4b28      	ldr	r3, [pc, #160]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1f0      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	69da      	ldr	r2, [r3, #28]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	019b      	lsls	r3, r3, #6
 8006002:	431a      	orrs	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006008:	085b      	lsrs	r3, r3, #1
 800600a:	3b01      	subs	r3, #1
 800600c:	041b      	lsls	r3, r3, #16
 800600e:	431a      	orrs	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006014:	061b      	lsls	r3, r3, #24
 8006016:	4313      	orrs	r3, r2
 8006018:	4a1b      	ldr	r2, [pc, #108]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 800601a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800601e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006020:	4b19      	ldr	r3, [pc, #100]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a18      	ldr	r2, [pc, #96]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 8006026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800602a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800602c:	f7fd f880 	bl	8003130 <HAL_GetTick>
 8006030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006032:	e008      	b.n	8006046 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006034:	f7fd f87c 	bl	8003130 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b02      	cmp	r3, #2
 8006040:	d901      	bls.n	8006046 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e057      	b.n	80060f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006046:	4b10      	ldr	r3, [pc, #64]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d0f0      	beq.n	8006034 <HAL_RCC_OscConfig+0x478>
 8006052:	e04f      	b.n	80060f4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006054:	4b0c      	ldr	r3, [pc, #48]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a0b      	ldr	r2, [pc, #44]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 800605a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800605e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006060:	f7fd f866 	bl	8003130 <HAL_GetTick>
 8006064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006066:	e008      	b.n	800607a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006068:	f7fd f862 	bl	8003130 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	2b02      	cmp	r3, #2
 8006074:	d901      	bls.n	800607a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e03d      	b.n	80060f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800607a:	4b03      	ldr	r3, [pc, #12]	; (8006088 <HAL_RCC_OscConfig+0x4cc>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1f0      	bne.n	8006068 <HAL_RCC_OscConfig+0x4ac>
 8006086:	e035      	b.n	80060f4 <HAL_RCC_OscConfig+0x538>
 8006088:	40023800 	.word	0x40023800
 800608c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006090:	4b1b      	ldr	r3, [pc, #108]	; (8006100 <HAL_RCC_OscConfig+0x544>)
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d028      	beq.n	80060f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d121      	bne.n	80060f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d11a      	bne.n	80060f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80060c0:	4013      	ands	r3, r2
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80060c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d111      	bne.n	80060f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d6:	085b      	lsrs	r3, r3, #1
 80060d8:	3b01      	subs	r3, #1
 80060da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80060dc:	429a      	cmp	r2, r3
 80060de:	d107      	bne.n	80060f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d001      	beq.n	80060f4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e000      	b.n	80060f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3718      	adds	r7, #24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	40023800 	.word	0x40023800

08006104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800610e:	2300      	movs	r3, #0
 8006110:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d101      	bne.n	800611c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e0d0      	b.n	80062be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800611c:	4b6a      	ldr	r3, [pc, #424]	; (80062c8 <HAL_RCC_ClockConfig+0x1c4>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 030f 	and.w	r3, r3, #15
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	429a      	cmp	r2, r3
 8006128:	d910      	bls.n	800614c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800612a:	4b67      	ldr	r3, [pc, #412]	; (80062c8 <HAL_RCC_ClockConfig+0x1c4>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f023 020f 	bic.w	r2, r3, #15
 8006132:	4965      	ldr	r1, [pc, #404]	; (80062c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	4313      	orrs	r3, r2
 8006138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800613a:	4b63      	ldr	r3, [pc, #396]	; (80062c8 <HAL_RCC_ClockConfig+0x1c4>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 030f 	and.w	r3, r3, #15
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	429a      	cmp	r2, r3
 8006146:	d001      	beq.n	800614c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e0b8      	b.n	80062be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b00      	cmp	r3, #0
 8006156:	d020      	beq.n	800619a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	2b00      	cmp	r3, #0
 8006162:	d005      	beq.n	8006170 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006164:	4b59      	ldr	r3, [pc, #356]	; (80062cc <HAL_RCC_ClockConfig+0x1c8>)
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	4a58      	ldr	r2, [pc, #352]	; (80062cc <HAL_RCC_ClockConfig+0x1c8>)
 800616a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800616e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0308 	and.w	r3, r3, #8
 8006178:	2b00      	cmp	r3, #0
 800617a:	d005      	beq.n	8006188 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800617c:	4b53      	ldr	r3, [pc, #332]	; (80062cc <HAL_RCC_ClockConfig+0x1c8>)
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	4a52      	ldr	r2, [pc, #328]	; (80062cc <HAL_RCC_ClockConfig+0x1c8>)
 8006182:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006186:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006188:	4b50      	ldr	r3, [pc, #320]	; (80062cc <HAL_RCC_ClockConfig+0x1c8>)
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	494d      	ldr	r1, [pc, #308]	; (80062cc <HAL_RCC_ClockConfig+0x1c8>)
 8006196:	4313      	orrs	r3, r2
 8006198:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d040      	beq.n	8006228 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d107      	bne.n	80061be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061ae:	4b47      	ldr	r3, [pc, #284]	; (80062cc <HAL_RCC_ClockConfig+0x1c8>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d115      	bne.n	80061e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e07f      	b.n	80062be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d107      	bne.n	80061d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061c6:	4b41      	ldr	r3, [pc, #260]	; (80062cc <HAL_RCC_ClockConfig+0x1c8>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d109      	bne.n	80061e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e073      	b.n	80062be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061d6:	4b3d      	ldr	r3, [pc, #244]	; (80062cc <HAL_RCC_ClockConfig+0x1c8>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0302 	and.w	r3, r3, #2
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e06b      	b.n	80062be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061e6:	4b39      	ldr	r3, [pc, #228]	; (80062cc <HAL_RCC_ClockConfig+0x1c8>)
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f023 0203 	bic.w	r2, r3, #3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	4936      	ldr	r1, [pc, #216]	; (80062cc <HAL_RCC_ClockConfig+0x1c8>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061f8:	f7fc ff9a 	bl	8003130 <HAL_GetTick>
 80061fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061fe:	e00a      	b.n	8006216 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006200:	f7fc ff96 	bl	8003130 <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	f241 3288 	movw	r2, #5000	; 0x1388
 800620e:	4293      	cmp	r3, r2
 8006210:	d901      	bls.n	8006216 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e053      	b.n	80062be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006216:	4b2d      	ldr	r3, [pc, #180]	; (80062cc <HAL_RCC_ClockConfig+0x1c8>)
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f003 020c 	and.w	r2, r3, #12
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	429a      	cmp	r2, r3
 8006226:	d1eb      	bne.n	8006200 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006228:	4b27      	ldr	r3, [pc, #156]	; (80062c8 <HAL_RCC_ClockConfig+0x1c4>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 030f 	and.w	r3, r3, #15
 8006230:	683a      	ldr	r2, [r7, #0]
 8006232:	429a      	cmp	r2, r3
 8006234:	d210      	bcs.n	8006258 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006236:	4b24      	ldr	r3, [pc, #144]	; (80062c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f023 020f 	bic.w	r2, r3, #15
 800623e:	4922      	ldr	r1, [pc, #136]	; (80062c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	4313      	orrs	r3, r2
 8006244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006246:	4b20      	ldr	r3, [pc, #128]	; (80062c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 030f 	and.w	r3, r3, #15
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	429a      	cmp	r2, r3
 8006252:	d001      	beq.n	8006258 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e032      	b.n	80062be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0304 	and.w	r3, r3, #4
 8006260:	2b00      	cmp	r3, #0
 8006262:	d008      	beq.n	8006276 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006264:	4b19      	ldr	r3, [pc, #100]	; (80062cc <HAL_RCC_ClockConfig+0x1c8>)
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	4916      	ldr	r1, [pc, #88]	; (80062cc <HAL_RCC_ClockConfig+0x1c8>)
 8006272:	4313      	orrs	r3, r2
 8006274:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0308 	and.w	r3, r3, #8
 800627e:	2b00      	cmp	r3, #0
 8006280:	d009      	beq.n	8006296 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006282:	4b12      	ldr	r3, [pc, #72]	; (80062cc <HAL_RCC_ClockConfig+0x1c8>)
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	00db      	lsls	r3, r3, #3
 8006290:	490e      	ldr	r1, [pc, #56]	; (80062cc <HAL_RCC_ClockConfig+0x1c8>)
 8006292:	4313      	orrs	r3, r2
 8006294:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006296:	f000 f821 	bl	80062dc <HAL_RCC_GetSysClockFreq>
 800629a:	4601      	mov	r1, r0
 800629c:	4b0b      	ldr	r3, [pc, #44]	; (80062cc <HAL_RCC_ClockConfig+0x1c8>)
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	091b      	lsrs	r3, r3, #4
 80062a2:	f003 030f 	and.w	r3, r3, #15
 80062a6:	4a0a      	ldr	r2, [pc, #40]	; (80062d0 <HAL_RCC_ClockConfig+0x1cc>)
 80062a8:	5cd3      	ldrb	r3, [r2, r3]
 80062aa:	fa21 f303 	lsr.w	r3, r1, r3
 80062ae:	4a09      	ldr	r2, [pc, #36]	; (80062d4 <HAL_RCC_ClockConfig+0x1d0>)
 80062b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80062b2:	4b09      	ldr	r3, [pc, #36]	; (80062d8 <HAL_RCC_ClockConfig+0x1d4>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fc fef6 	bl	80030a8 <HAL_InitTick>

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	40023c00 	.word	0x40023c00
 80062cc:	40023800 	.word	0x40023800
 80062d0:	08009af4 	.word	0x08009af4
 80062d4:	20000008 	.word	0x20000008
 80062d8:	2000000c 	.word	0x2000000c

080062dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80062e2:	2300      	movs	r3, #0
 80062e4:	607b      	str	r3, [r7, #4]
 80062e6:	2300      	movs	r3, #0
 80062e8:	60fb      	str	r3, [r7, #12]
 80062ea:	2300      	movs	r3, #0
 80062ec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80062ee:	2300      	movs	r3, #0
 80062f0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062f2:	4b63      	ldr	r3, [pc, #396]	; (8006480 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f003 030c 	and.w	r3, r3, #12
 80062fa:	2b04      	cmp	r3, #4
 80062fc:	d007      	beq.n	800630e <HAL_RCC_GetSysClockFreq+0x32>
 80062fe:	2b08      	cmp	r3, #8
 8006300:	d008      	beq.n	8006314 <HAL_RCC_GetSysClockFreq+0x38>
 8006302:	2b00      	cmp	r3, #0
 8006304:	f040 80b4 	bne.w	8006470 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006308:	4b5e      	ldr	r3, [pc, #376]	; (8006484 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800630a:	60bb      	str	r3, [r7, #8]
      break;
 800630c:	e0b3      	b.n	8006476 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800630e:	4b5e      	ldr	r3, [pc, #376]	; (8006488 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006310:	60bb      	str	r3, [r7, #8]
      break;
 8006312:	e0b0      	b.n	8006476 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006314:	4b5a      	ldr	r3, [pc, #360]	; (8006480 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800631c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800631e:	4b58      	ldr	r3, [pc, #352]	; (8006480 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d04a      	beq.n	80063c0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800632a:	4b55      	ldr	r3, [pc, #340]	; (8006480 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	099b      	lsrs	r3, r3, #6
 8006330:	f04f 0400 	mov.w	r4, #0
 8006334:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006338:	f04f 0200 	mov.w	r2, #0
 800633c:	ea03 0501 	and.w	r5, r3, r1
 8006340:	ea04 0602 	and.w	r6, r4, r2
 8006344:	4629      	mov	r1, r5
 8006346:	4632      	mov	r2, r6
 8006348:	f04f 0300 	mov.w	r3, #0
 800634c:	f04f 0400 	mov.w	r4, #0
 8006350:	0154      	lsls	r4, r2, #5
 8006352:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006356:	014b      	lsls	r3, r1, #5
 8006358:	4619      	mov	r1, r3
 800635a:	4622      	mov	r2, r4
 800635c:	1b49      	subs	r1, r1, r5
 800635e:	eb62 0206 	sbc.w	r2, r2, r6
 8006362:	f04f 0300 	mov.w	r3, #0
 8006366:	f04f 0400 	mov.w	r4, #0
 800636a:	0194      	lsls	r4, r2, #6
 800636c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006370:	018b      	lsls	r3, r1, #6
 8006372:	1a5b      	subs	r3, r3, r1
 8006374:	eb64 0402 	sbc.w	r4, r4, r2
 8006378:	f04f 0100 	mov.w	r1, #0
 800637c:	f04f 0200 	mov.w	r2, #0
 8006380:	00e2      	lsls	r2, r4, #3
 8006382:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006386:	00d9      	lsls	r1, r3, #3
 8006388:	460b      	mov	r3, r1
 800638a:	4614      	mov	r4, r2
 800638c:	195b      	adds	r3, r3, r5
 800638e:	eb44 0406 	adc.w	r4, r4, r6
 8006392:	f04f 0100 	mov.w	r1, #0
 8006396:	f04f 0200 	mov.w	r2, #0
 800639a:	0262      	lsls	r2, r4, #9
 800639c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80063a0:	0259      	lsls	r1, r3, #9
 80063a2:	460b      	mov	r3, r1
 80063a4:	4614      	mov	r4, r2
 80063a6:	4618      	mov	r0, r3
 80063a8:	4621      	mov	r1, r4
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f04f 0400 	mov.w	r4, #0
 80063b0:	461a      	mov	r2, r3
 80063b2:	4623      	mov	r3, r4
 80063b4:	f7fa fba2 	bl	8000afc <__aeabi_uldivmod>
 80063b8:	4603      	mov	r3, r0
 80063ba:	460c      	mov	r4, r1
 80063bc:	60fb      	str	r3, [r7, #12]
 80063be:	e049      	b.n	8006454 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063c0:	4b2f      	ldr	r3, [pc, #188]	; (8006480 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	099b      	lsrs	r3, r3, #6
 80063c6:	f04f 0400 	mov.w	r4, #0
 80063ca:	f240 11ff 	movw	r1, #511	; 0x1ff
 80063ce:	f04f 0200 	mov.w	r2, #0
 80063d2:	ea03 0501 	and.w	r5, r3, r1
 80063d6:	ea04 0602 	and.w	r6, r4, r2
 80063da:	4629      	mov	r1, r5
 80063dc:	4632      	mov	r2, r6
 80063de:	f04f 0300 	mov.w	r3, #0
 80063e2:	f04f 0400 	mov.w	r4, #0
 80063e6:	0154      	lsls	r4, r2, #5
 80063e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80063ec:	014b      	lsls	r3, r1, #5
 80063ee:	4619      	mov	r1, r3
 80063f0:	4622      	mov	r2, r4
 80063f2:	1b49      	subs	r1, r1, r5
 80063f4:	eb62 0206 	sbc.w	r2, r2, r6
 80063f8:	f04f 0300 	mov.w	r3, #0
 80063fc:	f04f 0400 	mov.w	r4, #0
 8006400:	0194      	lsls	r4, r2, #6
 8006402:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006406:	018b      	lsls	r3, r1, #6
 8006408:	1a5b      	subs	r3, r3, r1
 800640a:	eb64 0402 	sbc.w	r4, r4, r2
 800640e:	f04f 0100 	mov.w	r1, #0
 8006412:	f04f 0200 	mov.w	r2, #0
 8006416:	00e2      	lsls	r2, r4, #3
 8006418:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800641c:	00d9      	lsls	r1, r3, #3
 800641e:	460b      	mov	r3, r1
 8006420:	4614      	mov	r4, r2
 8006422:	195b      	adds	r3, r3, r5
 8006424:	eb44 0406 	adc.w	r4, r4, r6
 8006428:	f04f 0100 	mov.w	r1, #0
 800642c:	f04f 0200 	mov.w	r2, #0
 8006430:	02a2      	lsls	r2, r4, #10
 8006432:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006436:	0299      	lsls	r1, r3, #10
 8006438:	460b      	mov	r3, r1
 800643a:	4614      	mov	r4, r2
 800643c:	4618      	mov	r0, r3
 800643e:	4621      	mov	r1, r4
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f04f 0400 	mov.w	r4, #0
 8006446:	461a      	mov	r2, r3
 8006448:	4623      	mov	r3, r4
 800644a:	f7fa fb57 	bl	8000afc <__aeabi_uldivmod>
 800644e:	4603      	mov	r3, r0
 8006450:	460c      	mov	r4, r1
 8006452:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006454:	4b0a      	ldr	r3, [pc, #40]	; (8006480 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	0c1b      	lsrs	r3, r3, #16
 800645a:	f003 0303 	and.w	r3, r3, #3
 800645e:	3301      	adds	r3, #1
 8006460:	005b      	lsls	r3, r3, #1
 8006462:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	fbb2 f3f3 	udiv	r3, r2, r3
 800646c:	60bb      	str	r3, [r7, #8]
      break;
 800646e:	e002      	b.n	8006476 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006470:	4b04      	ldr	r3, [pc, #16]	; (8006484 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006472:	60bb      	str	r3, [r7, #8]
      break;
 8006474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006476:	68bb      	ldr	r3, [r7, #8]
}
 8006478:	4618      	mov	r0, r3
 800647a:	3714      	adds	r7, #20
 800647c:	46bd      	mov	sp, r7
 800647e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006480:	40023800 	.word	0x40023800
 8006484:	00f42400 	.word	0x00f42400
 8006488:	007a1200 	.word	0x007a1200

0800648c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800648c:	b480      	push	{r7}
 800648e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006490:	4b03      	ldr	r3, [pc, #12]	; (80064a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006492:	681b      	ldr	r3, [r3, #0]
}
 8006494:	4618      	mov	r0, r3
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	20000008 	.word	0x20000008

080064a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80064a8:	f7ff fff0 	bl	800648c <HAL_RCC_GetHCLKFreq>
 80064ac:	4601      	mov	r1, r0
 80064ae:	4b05      	ldr	r3, [pc, #20]	; (80064c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	0a9b      	lsrs	r3, r3, #10
 80064b4:	f003 0307 	and.w	r3, r3, #7
 80064b8:	4a03      	ldr	r2, [pc, #12]	; (80064c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064ba:	5cd3      	ldrb	r3, [r2, r3]
 80064bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	40023800 	.word	0x40023800
 80064c8:	08009b04 	.word	0x08009b04

080064cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80064d0:	f7ff ffdc 	bl	800648c <HAL_RCC_GetHCLKFreq>
 80064d4:	4601      	mov	r1, r0
 80064d6:	4b05      	ldr	r3, [pc, #20]	; (80064ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	0b5b      	lsrs	r3, r3, #13
 80064dc:	f003 0307 	and.w	r3, r3, #7
 80064e0:	4a03      	ldr	r2, [pc, #12]	; (80064f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064e2:	5cd3      	ldrb	r3, [r2, r3]
 80064e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	40023800 	.word	0x40023800
 80064f0:	08009b04 	.word	0x08009b04

080064f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b088      	sub	sp, #32
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80064fc:	2300      	movs	r3, #0
 80064fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006500:	2300      	movs	r3, #0
 8006502:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8006504:	2300      	movs	r3, #0
 8006506:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006508:	2300      	movs	r3, #0
 800650a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	2b00      	cmp	r3, #0
 8006516:	d012      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006518:	4b65      	ldr	r3, [pc, #404]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	4a64      	ldr	r2, [pc, #400]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800651e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006522:	6093      	str	r3, [r2, #8]
 8006524:	4b62      	ldr	r3, [pc, #392]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006526:	689a      	ldr	r2, [r3, #8]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652c:	4960      	ldr	r1, [pc, #384]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800652e:	4313      	orrs	r3, r2
 8006530:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800653a:	2301      	movs	r3, #1
 800653c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d017      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800654a:	4b59      	ldr	r3, [pc, #356]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800654c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006550:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006558:	4955      	ldr	r1, [pc, #340]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800655a:	4313      	orrs	r3, r2
 800655c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006564:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006568:	d101      	bne.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800656a:	2301      	movs	r3, #1
 800656c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8006576:	2301      	movs	r3, #1
 8006578:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d017      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006586:	4b4a      	ldr	r3, [pc, #296]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006588:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800658c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006594:	4946      	ldr	r1, [pc, #280]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006596:	4313      	orrs	r3, r2
 8006598:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065a4:	d101      	bne.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80065a6:	2301      	movs	r3, #1
 80065a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80065b2:	2301      	movs	r3, #1
 80065b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0320 	and.w	r3, r3, #32
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f000 808b 	beq.w	80066da <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80065c4:	4b3a      	ldr	r3, [pc, #232]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c8:	4a39      	ldr	r2, [pc, #228]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065ce:	6413      	str	r3, [r2, #64]	; 0x40
 80065d0:	4b37      	ldr	r3, [pc, #220]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065d8:	60fb      	str	r3, [r7, #12]
 80065da:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80065dc:	4b35      	ldr	r3, [pc, #212]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a34      	ldr	r2, [pc, #208]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80065e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065e8:	f7fc fda2 	bl	8003130 <HAL_GetTick>
 80065ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80065ee:	e008      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065f0:	f7fc fd9e 	bl	8003130 <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	2b64      	cmp	r3, #100	; 0x64
 80065fc:	d901      	bls.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e2ba      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006602:	4b2c      	ldr	r3, [pc, #176]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800660a:	2b00      	cmp	r3, #0
 800660c:	d0f0      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800660e:	4b28      	ldr	r3, [pc, #160]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006616:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d035      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	429a      	cmp	r2, r3
 800662a:	d02e      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800662c:	4b20      	ldr	r3, [pc, #128]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800662e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006634:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006636:	4b1e      	ldr	r3, [pc, #120]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800663a:	4a1d      	ldr	r2, [pc, #116]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800663c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006640:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006642:	4b1b      	ldr	r3, [pc, #108]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006646:	4a1a      	ldr	r2, [pc, #104]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800664c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800664e:	4a18      	ldr	r2, [pc, #96]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006654:	4b16      	ldr	r3, [pc, #88]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	2b01      	cmp	r3, #1
 800665e:	d114      	bne.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006660:	f7fc fd66 	bl	8003130 <HAL_GetTick>
 8006664:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006666:	e00a      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006668:	f7fc fd62 	bl	8003130 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	f241 3288 	movw	r2, #5000	; 0x1388
 8006676:	4293      	cmp	r3, r2
 8006678:	d901      	bls.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e27c      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800667e:	4b0c      	ldr	r3, [pc, #48]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	2b00      	cmp	r3, #0
 8006688:	d0ee      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006692:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006696:	d111      	bne.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8006698:	4b05      	ldr	r3, [pc, #20]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80066a4:	4b04      	ldr	r3, [pc, #16]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80066a6:	400b      	ands	r3, r1
 80066a8:	4901      	ldr	r1, [pc, #4]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	608b      	str	r3, [r1, #8]
 80066ae:	e00b      	b.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80066b0:	40023800 	.word	0x40023800
 80066b4:	40007000 	.word	0x40007000
 80066b8:	0ffffcff 	.word	0x0ffffcff
 80066bc:	4ba3      	ldr	r3, [pc, #652]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	4aa2      	ldr	r2, [pc, #648]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80066c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80066c6:	6093      	str	r3, [r2, #8]
 80066c8:	4ba0      	ldr	r3, [pc, #640]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80066ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066d4:	499d      	ldr	r1, [pc, #628]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0310 	and.w	r3, r3, #16
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d010      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80066e6:	4b99      	ldr	r3, [pc, #612]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80066e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066ec:	4a97      	ldr	r2, [pc, #604]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80066ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80066f6:	4b95      	ldr	r3, [pc, #596]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80066f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006700:	4992      	ldr	r1, [pc, #584]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006702:	4313      	orrs	r3, r2
 8006704:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00a      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006714:	4b8d      	ldr	r3, [pc, #564]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800671a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006722:	498a      	ldr	r1, [pc, #552]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006724:	4313      	orrs	r3, r2
 8006726:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00a      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006736:	4b85      	ldr	r3, [pc, #532]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800673c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006744:	4981      	ldr	r1, [pc, #516]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006746:	4313      	orrs	r3, r2
 8006748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00a      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006758:	4b7c      	ldr	r3, [pc, #496]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800675a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800675e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006766:	4979      	ldr	r1, [pc, #484]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006768:	4313      	orrs	r3, r2
 800676a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00a      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800677a:	4b74      	ldr	r3, [pc, #464]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800677c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006780:	f023 0203 	bic.w	r2, r3, #3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006788:	4970      	ldr	r1, [pc, #448]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800678a:	4313      	orrs	r3, r2
 800678c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00a      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800679c:	4b6b      	ldr	r3, [pc, #428]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800679e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a2:	f023 020c 	bic.w	r2, r3, #12
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067aa:	4968      	ldr	r1, [pc, #416]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80067ac:	4313      	orrs	r3, r2
 80067ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00a      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80067be:	4b63      	ldr	r3, [pc, #396]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80067c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067cc:	495f      	ldr	r1, [pc, #380]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00a      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80067e0:	4b5a      	ldr	r3, [pc, #360]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80067e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ee:	4957      	ldr	r1, [pc, #348]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80067f0:	4313      	orrs	r3, r2
 80067f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00a      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006802:	4b52      	ldr	r3, [pc, #328]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006808:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006810:	494e      	ldr	r1, [pc, #312]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006812:	4313      	orrs	r3, r2
 8006814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00a      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006824:	4b49      	ldr	r3, [pc, #292]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800682a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006832:	4946      	ldr	r1, [pc, #280]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006834:	4313      	orrs	r3, r2
 8006836:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00a      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006846:	4b41      	ldr	r3, [pc, #260]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800684c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006854:	493d      	ldr	r1, [pc, #244]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006856:	4313      	orrs	r3, r2
 8006858:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00a      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006868:	4b38      	ldr	r3, [pc, #224]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800686a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800686e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006876:	4935      	ldr	r1, [pc, #212]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006878:	4313      	orrs	r3, r2
 800687a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d011      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800688a:	4b30      	ldr	r3, [pc, #192]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800688c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006890:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006898:	492c      	ldr	r1, [pc, #176]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800689a:	4313      	orrs	r3, r2
 800689c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068a8:	d101      	bne.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80068aa:	2301      	movs	r3, #1
 80068ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00a      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068ba:	4b24      	ldr	r3, [pc, #144]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80068bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068c8:	4920      	ldr	r1, [pc, #128]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80068ca:	4313      	orrs	r3, r2
 80068cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00a      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80068dc:	4b1b      	ldr	r3, [pc, #108]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80068de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068ea:	4918      	ldr	r1, [pc, #96]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00a      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80068fe:	4b13      	ldr	r3, [pc, #76]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006904:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800690c:	490f      	ldr	r1, [pc, #60]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800690e:	4313      	orrs	r3, r2
 8006910:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d005      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006922:	f040 809c 	bne.w	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006926:	4b09      	ldr	r3, [pc, #36]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a08      	ldr	r2, [pc, #32]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800692c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006930:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006932:	f7fc fbfd 	bl	8003130 <HAL_GetTick>
 8006936:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006938:	e00a      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800693a:	f7fc fbf9 	bl	8003130 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	2b64      	cmp	r3, #100	; 0x64
 8006946:	d903      	bls.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e115      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x684>
 800694c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006950:	4b8b      	ldr	r3, [pc, #556]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1ee      	bne.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	2b00      	cmp	r3, #0
 8006966:	d017      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696c:	2b00      	cmp	r3, #0
 800696e:	d113      	bne.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006970:	4b83      	ldr	r3, [pc, #524]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006976:	0e1b      	lsrs	r3, r3, #24
 8006978:	f003 030f 	and.w	r3, r3, #15
 800697c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	019a      	lsls	r2, r3, #6
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	061b      	lsls	r3, r3, #24
 8006988:	431a      	orrs	r2, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	071b      	lsls	r3, r3, #28
 8006990:	497b      	ldr	r1, [pc, #492]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006992:	4313      	orrs	r3, r2
 8006994:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d004      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069ac:	d00a      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d024      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069c2:	d11f      	bne.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80069c4:	4b6e      	ldr	r3, [pc, #440]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80069c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069ca:	0f1b      	lsrs	r3, r3, #28
 80069cc:	f003 0307 	and.w	r3, r3, #7
 80069d0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	019a      	lsls	r2, r3, #6
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	061b      	lsls	r3, r3, #24
 80069de:	431a      	orrs	r2, r3
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	071b      	lsls	r3, r3, #28
 80069e4:	4966      	ldr	r1, [pc, #408]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80069ec:	4b64      	ldr	r3, [pc, #400]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80069ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069f2:	f023 021f 	bic.w	r2, r3, #31
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	3b01      	subs	r3, #1
 80069fc:	4960      	ldr	r1, [pc, #384]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00d      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	019a      	lsls	r2, r3, #6
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	061b      	lsls	r3, r3, #24
 8006a1c:	431a      	orrs	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	071b      	lsls	r3, r3, #28
 8006a24:	4956      	ldr	r1, [pc, #344]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006a2c:	4b54      	ldr	r3, [pc, #336]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a53      	ldr	r2, [pc, #332]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006a32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a38:	f7fc fb7a 	bl	8003130 <HAL_GetTick>
 8006a3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a3e:	e008      	b.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a40:	f7fc fb76 	bl	8003130 <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b64      	cmp	r3, #100	; 0x64
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e092      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a52:	4b4b      	ldr	r3, [pc, #300]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d0f0      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	f040 8088 	bne.w	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006a66:	4b46      	ldr	r3, [pc, #280]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a45      	ldr	r2, [pc, #276]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006a6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a72:	f7fc fb5d 	bl	8003130 <HAL_GetTick>
 8006a76:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a78:	e008      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006a7a:	f7fc fb59 	bl	8003130 <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	2b64      	cmp	r3, #100	; 0x64
 8006a86:	d901      	bls.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e075      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a8c:	4b3c      	ldr	r3, [pc, #240]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a98:	d0ef      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d003      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d009      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d024      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d120      	bne.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006ac2:	4b2f      	ldr	r3, [pc, #188]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ac8:	0c1b      	lsrs	r3, r3, #16
 8006aca:	f003 0303 	and.w	r3, r3, #3
 8006ace:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	019a      	lsls	r2, r3, #6
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	041b      	lsls	r3, r3, #16
 8006ada:	431a      	orrs	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	695b      	ldr	r3, [r3, #20]
 8006ae0:	061b      	lsls	r3, r3, #24
 8006ae2:	4927      	ldr	r1, [pc, #156]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006aea:	4b25      	ldr	r3, [pc, #148]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006af0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a1b      	ldr	r3, [r3, #32]
 8006af8:	3b01      	subs	r3, #1
 8006afa:	021b      	lsls	r3, r3, #8
 8006afc:	4920      	ldr	r1, [pc, #128]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d018      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b18:	d113      	bne.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b1a:	4b19      	ldr	r3, [pc, #100]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b20:	0e1b      	lsrs	r3, r3, #24
 8006b22:	f003 030f 	and.w	r3, r3, #15
 8006b26:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	019a      	lsls	r2, r3, #6
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	041b      	lsls	r3, r3, #16
 8006b34:	431a      	orrs	r2, r3
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	061b      	lsls	r3, r3, #24
 8006b3a:	4911      	ldr	r1, [pc, #68]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006b42:	4b0f      	ldr	r3, [pc, #60]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a0e      	ldr	r2, [pc, #56]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b4e:	f7fc faef 	bl	8003130 <HAL_GetTick>
 8006b52:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b54:	e008      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006b56:	f7fc faeb 	bl	8003130 <HAL_GetTick>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	2b64      	cmp	r3, #100	; 0x64
 8006b62:	d901      	bls.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	e007      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b68:	4b05      	ldr	r3, [pc, #20]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b74:	d1ef      	bne.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3720      	adds	r7, #32
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	40023800 	.word	0x40023800

08006b84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e01d      	b.n	8006bd2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d106      	bne.n	8006bb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f7fb fe8a 	bl	80028c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	3304      	adds	r3, #4
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	4610      	mov	r0, r2
 8006bc4:	f000 fd48 	bl	8007658 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3708      	adds	r7, #8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b082      	sub	sp, #8
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d101      	bne.n	8006bec <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e01d      	b.n	8006c28 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d106      	bne.n	8006c06 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7fb ff03 	bl	8002a0c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2202      	movs	r2, #2
 8006c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	3304      	adds	r3, #4
 8006c16:	4619      	mov	r1, r3
 8006c18:	4610      	mov	r0, r2
 8006c1a:	f000 fd1d 	bl	8007658 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e01d      	b.n	8006c7e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d106      	bne.n	8006c5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f7fb feb8 	bl	80029cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2202      	movs	r2, #2
 8006c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	3304      	adds	r3, #4
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	4610      	mov	r0, r2
 8006c70:	f000 fcf2 	bl	8007658 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3708      	adds	r7, #8
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
	...

08006c88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2201      	movs	r2, #1
 8006c98:	6839      	ldr	r1, [r7, #0]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f001 fa0b 	bl	80080b6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a17      	ldr	r2, [pc, #92]	; (8006d04 <HAL_TIM_PWM_Start+0x7c>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d004      	beq.n	8006cb4 <HAL_TIM_PWM_Start+0x2c>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a16      	ldr	r2, [pc, #88]	; (8006d08 <HAL_TIM_PWM_Start+0x80>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d101      	bne.n	8006cb8 <HAL_TIM_PWM_Start+0x30>
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e000      	b.n	8006cba <HAL_TIM_PWM_Start+0x32>
 8006cb8:	2300      	movs	r3, #0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d007      	beq.n	8006cce <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ccc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	689a      	ldr	r2, [r3, #8]
 8006cd4:	4b0d      	ldr	r3, [pc, #52]	; (8006d0c <HAL_TIM_PWM_Start+0x84>)
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2b06      	cmp	r3, #6
 8006cde:	d00b      	beq.n	8006cf8 <HAL_TIM_PWM_Start+0x70>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ce6:	d007      	beq.n	8006cf8 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f042 0201 	orr.w	r2, r2, #1
 8006cf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	40010000 	.word	0x40010000
 8006d08:	40010400 	.word	0x40010400
 8006d0c:	00010007 	.word	0x00010007

08006d10 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e01d      	b.n	8006d5e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d106      	bne.n	8006d3c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f815 	bl	8006d66 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2202      	movs	r2, #2
 8006d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	3304      	adds	r3, #4
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	4610      	mov	r0, r2
 8006d50:	f000 fc82 	bl	8007658 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b083      	sub	sp, #12
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006d6e:	bf00      	nop
 8006d70:	370c      	adds	r7, #12
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
	...

08006d7c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b0c      	cmp	r3, #12
 8006d8a:	d841      	bhi.n	8006e10 <HAL_TIM_IC_Start_IT+0x94>
 8006d8c:	a201      	add	r2, pc, #4	; (adr r2, 8006d94 <HAL_TIM_IC_Start_IT+0x18>)
 8006d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d92:	bf00      	nop
 8006d94:	08006dc9 	.word	0x08006dc9
 8006d98:	08006e11 	.word	0x08006e11
 8006d9c:	08006e11 	.word	0x08006e11
 8006da0:	08006e11 	.word	0x08006e11
 8006da4:	08006ddb 	.word	0x08006ddb
 8006da8:	08006e11 	.word	0x08006e11
 8006dac:	08006e11 	.word	0x08006e11
 8006db0:	08006e11 	.word	0x08006e11
 8006db4:	08006ded 	.word	0x08006ded
 8006db8:	08006e11 	.word	0x08006e11
 8006dbc:	08006e11 	.word	0x08006e11
 8006dc0:	08006e11 	.word	0x08006e11
 8006dc4:	08006dff 	.word	0x08006dff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68da      	ldr	r2, [r3, #12]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0202 	orr.w	r2, r2, #2
 8006dd6:	60da      	str	r2, [r3, #12]
      break;
 8006dd8:	e01b      	b.n	8006e12 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68da      	ldr	r2, [r3, #12]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f042 0204 	orr.w	r2, r2, #4
 8006de8:	60da      	str	r2, [r3, #12]
      break;
 8006dea:	e012      	b.n	8006e12 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68da      	ldr	r2, [r3, #12]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f042 0208 	orr.w	r2, r2, #8
 8006dfa:	60da      	str	r2, [r3, #12]
      break;
 8006dfc:	e009      	b.n	8006e12 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68da      	ldr	r2, [r3, #12]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f042 0210 	orr.w	r2, r2, #16
 8006e0c:	60da      	str	r2, [r3, #12]
      break;
 8006e0e:	e000      	b.n	8006e12 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8006e10:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2201      	movs	r2, #1
 8006e18:	6839      	ldr	r1, [r7, #0]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f001 f94b 	bl	80080b6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	689a      	ldr	r2, [r3, #8]
 8006e26:	4b0b      	ldr	r3, [pc, #44]	; (8006e54 <HAL_TIM_IC_Start_IT+0xd8>)
 8006e28:	4013      	ands	r3, r2
 8006e2a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2b06      	cmp	r3, #6
 8006e30:	d00b      	beq.n	8006e4a <HAL_TIM_IC_Start_IT+0xce>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e38:	d007      	beq.n	8006e4a <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f042 0201 	orr.w	r2, r2, #1
 8006e48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	00010007 	.word	0x00010007

08006e58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	f003 0302 	and.w	r3, r3, #2
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d122      	bne.n	8006eb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	f003 0302 	and.w	r3, r3, #2
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d11b      	bne.n	8006eb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f06f 0202 	mvn.w	r2, #2
 8006e84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	f003 0303 	and.w	r3, r3, #3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7fa fda8 	bl	80019f0 <HAL_TIM_IC_CaptureCallback>
 8006ea0:	e005      	b.n	8006eae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fbba 	bl	800761c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 fbc1 	bl	8007630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	f003 0304 	and.w	r3, r3, #4
 8006ebe:	2b04      	cmp	r3, #4
 8006ec0:	d122      	bne.n	8006f08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	f003 0304 	and.w	r3, r3, #4
 8006ecc:	2b04      	cmp	r3, #4
 8006ece:	d11b      	bne.n	8006f08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f06f 0204 	mvn.w	r2, #4
 8006ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2202      	movs	r2, #2
 8006ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d003      	beq.n	8006ef6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7fa fd7e 	bl	80019f0 <HAL_TIM_IC_CaptureCallback>
 8006ef4:	e005      	b.n	8006f02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fb90 	bl	800761c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fb97 	bl	8007630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	f003 0308 	and.w	r3, r3, #8
 8006f12:	2b08      	cmp	r3, #8
 8006f14:	d122      	bne.n	8006f5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	f003 0308 	and.w	r3, r3, #8
 8006f20:	2b08      	cmp	r3, #8
 8006f22:	d11b      	bne.n	8006f5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f06f 0208 	mvn.w	r2, #8
 8006f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2204      	movs	r2, #4
 8006f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	69db      	ldr	r3, [r3, #28]
 8006f3a:	f003 0303 	and.w	r3, r3, #3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7fa fd54 	bl	80019f0 <HAL_TIM_IC_CaptureCallback>
 8006f48:	e005      	b.n	8006f56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fb66 	bl	800761c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fb6d 	bl	8007630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	f003 0310 	and.w	r3, r3, #16
 8006f66:	2b10      	cmp	r3, #16
 8006f68:	d122      	bne.n	8006fb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f003 0310 	and.w	r3, r3, #16
 8006f74:	2b10      	cmp	r3, #16
 8006f76:	d11b      	bne.n	8006fb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f06f 0210 	mvn.w	r2, #16
 8006f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2208      	movs	r2, #8
 8006f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	69db      	ldr	r3, [r3, #28]
 8006f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f7fa fd2a 	bl	80019f0 <HAL_TIM_IC_CaptureCallback>
 8006f9c:	e005      	b.n	8006faa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 fb3c 	bl	800761c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fb43 	bl	8007630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	f003 0301 	and.w	r3, r3, #1
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d10e      	bne.n	8006fdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	f003 0301 	and.w	r3, r3, #1
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d107      	bne.n	8006fdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f06f 0201 	mvn.w	r2, #1
 8006fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fb16 	bl	8007608 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe6:	2b80      	cmp	r3, #128	; 0x80
 8006fe8:	d10e      	bne.n	8007008 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ff4:	2b80      	cmp	r3, #128	; 0x80
 8006ff6:	d107      	bne.n	8007008 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f001 f914 	bl	8008230 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007016:	d10e      	bne.n	8007036 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007022:	2b80      	cmp	r3, #128	; 0x80
 8007024:	d107      	bne.n	8007036 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800702e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f001 f907 	bl	8008244 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007040:	2b40      	cmp	r3, #64	; 0x40
 8007042:	d10e      	bne.n	8007062 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800704e:	2b40      	cmp	r3, #64	; 0x40
 8007050:	d107      	bne.n	8007062 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800705a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 faf1 	bl	8007644 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	f003 0320 	and.w	r3, r3, #32
 800706c:	2b20      	cmp	r3, #32
 800706e:	d10e      	bne.n	800708e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	f003 0320 	and.w	r3, r3, #32
 800707a:	2b20      	cmp	r3, #32
 800707c:	d107      	bne.n	800708e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f06f 0220 	mvn.w	r2, #32
 8007086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f001 f8c7 	bl	800821c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800708e:	bf00      	nop
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
	...

08007098 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d101      	bne.n	80070b2 <HAL_TIM_OC_ConfigChannel+0x1a>
 80070ae:	2302      	movs	r3, #2
 80070b0:	e06c      	b.n	800718c <HAL_TIM_OC_ConfigChannel+0xf4>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2201      	movs	r2, #1
 80070b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2202      	movs	r2, #2
 80070be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2b14      	cmp	r3, #20
 80070c6:	d857      	bhi.n	8007178 <HAL_TIM_OC_ConfigChannel+0xe0>
 80070c8:	a201      	add	r2, pc, #4	; (adr r2, 80070d0 <HAL_TIM_OC_ConfigChannel+0x38>)
 80070ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ce:	bf00      	nop
 80070d0:	08007125 	.word	0x08007125
 80070d4:	08007179 	.word	0x08007179
 80070d8:	08007179 	.word	0x08007179
 80070dc:	08007179 	.word	0x08007179
 80070e0:	08007133 	.word	0x08007133
 80070e4:	08007179 	.word	0x08007179
 80070e8:	08007179 	.word	0x08007179
 80070ec:	08007179 	.word	0x08007179
 80070f0:	08007141 	.word	0x08007141
 80070f4:	08007179 	.word	0x08007179
 80070f8:	08007179 	.word	0x08007179
 80070fc:	08007179 	.word	0x08007179
 8007100:	0800714f 	.word	0x0800714f
 8007104:	08007179 	.word	0x08007179
 8007108:	08007179 	.word	0x08007179
 800710c:	08007179 	.word	0x08007179
 8007110:	0800715d 	.word	0x0800715d
 8007114:	08007179 	.word	0x08007179
 8007118:	08007179 	.word	0x08007179
 800711c:	08007179 	.word	0x08007179
 8007120:	0800716b 	.word	0x0800716b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68b9      	ldr	r1, [r7, #8]
 800712a:	4618      	mov	r0, r3
 800712c:	f000 fb34 	bl	8007798 <TIM_OC1_SetConfig>
      break;
 8007130:	e023      	b.n	800717a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68b9      	ldr	r1, [r7, #8]
 8007138:	4618      	mov	r0, r3
 800713a:	f000 fb9f 	bl	800787c <TIM_OC2_SetConfig>
      break;
 800713e:	e01c      	b.n	800717a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68b9      	ldr	r1, [r7, #8]
 8007146:	4618      	mov	r0, r3
 8007148:	f000 fc10 	bl	800796c <TIM_OC3_SetConfig>
      break;
 800714c:	e015      	b.n	800717a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68b9      	ldr	r1, [r7, #8]
 8007154:	4618      	mov	r0, r3
 8007156:	f000 fc7f 	bl	8007a58 <TIM_OC4_SetConfig>
      break;
 800715a:	e00e      	b.n	800717a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68b9      	ldr	r1, [r7, #8]
 8007162:	4618      	mov	r0, r3
 8007164:	f000 fcd0 	bl	8007b08 <TIM_OC5_SetConfig>
      break;
 8007168:	e007      	b.n	800717a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68b9      	ldr	r1, [r7, #8]
 8007170:	4618      	mov	r0, r3
 8007172:	f000 fd1b 	bl	8007bac <TIM_OC6_SetConfig>
      break;
 8007176:	e000      	b.n	800717a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 8007178:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d101      	bne.n	80071ae <HAL_TIM_IC_ConfigChannel+0x1a>
 80071aa:	2302      	movs	r3, #2
 80071ac:	e08a      	b.n	80072c4 <HAL_TIM_IC_ConfigChannel+0x130>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2202      	movs	r2, #2
 80071ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d11b      	bne.n	80071fc <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6818      	ldr	r0, [r3, #0]
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	6819      	ldr	r1, [r3, #0]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	f000 fdc6 	bl	8007d64 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	699a      	ldr	r2, [r3, #24]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f022 020c 	bic.w	r2, r2, #12
 80071e6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6999      	ldr	r1, [r3, #24]
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	689a      	ldr	r2, [r3, #8]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	430a      	orrs	r2, r1
 80071f8:	619a      	str	r2, [r3, #24]
 80071fa:	e05a      	b.n	80072b2 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b04      	cmp	r3, #4
 8007200:	d11c      	bne.n	800723c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6818      	ldr	r0, [r3, #0]
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	6819      	ldr	r1, [r3, #0]
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	f000 fe4a 	bl	8007eaa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	699a      	ldr	r2, [r3, #24]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007224:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	6999      	ldr	r1, [r3, #24]
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	021a      	lsls	r2, r3, #8
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	430a      	orrs	r2, r1
 8007238:	619a      	str	r2, [r3, #24]
 800723a:	e03a      	b.n	80072b2 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b08      	cmp	r3, #8
 8007240:	d11b      	bne.n	800727a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6818      	ldr	r0, [r3, #0]
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	6819      	ldr	r1, [r3, #0]
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	685a      	ldr	r2, [r3, #4]
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	f000 fe97 	bl	8007f84 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	69da      	ldr	r2, [r3, #28]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f022 020c 	bic.w	r2, r2, #12
 8007264:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	69d9      	ldr	r1, [r3, #28]
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	689a      	ldr	r2, [r3, #8]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	430a      	orrs	r2, r1
 8007276:	61da      	str	r2, [r3, #28]
 8007278:	e01b      	b.n	80072b2 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6818      	ldr	r0, [r3, #0]
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	6819      	ldr	r1, [r3, #0]
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	685a      	ldr	r2, [r3, #4]
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	f000 feb7 	bl	8007ffc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	69da      	ldr	r2, [r3, #28]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800729c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	69d9      	ldr	r1, [r3, #28]
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	021a      	lsls	r2, r3, #8
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	430a      	orrs	r2, r1
 80072b0:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d101      	bne.n	80072e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80072e2:	2302      	movs	r3, #2
 80072e4:	e105      	b.n	80074f2 <HAL_TIM_PWM_ConfigChannel+0x226>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2202      	movs	r2, #2
 80072f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2b14      	cmp	r3, #20
 80072fa:	f200 80f0 	bhi.w	80074de <HAL_TIM_PWM_ConfigChannel+0x212>
 80072fe:	a201      	add	r2, pc, #4	; (adr r2, 8007304 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007304:	08007359 	.word	0x08007359
 8007308:	080074df 	.word	0x080074df
 800730c:	080074df 	.word	0x080074df
 8007310:	080074df 	.word	0x080074df
 8007314:	08007399 	.word	0x08007399
 8007318:	080074df 	.word	0x080074df
 800731c:	080074df 	.word	0x080074df
 8007320:	080074df 	.word	0x080074df
 8007324:	080073db 	.word	0x080073db
 8007328:	080074df 	.word	0x080074df
 800732c:	080074df 	.word	0x080074df
 8007330:	080074df 	.word	0x080074df
 8007334:	0800741b 	.word	0x0800741b
 8007338:	080074df 	.word	0x080074df
 800733c:	080074df 	.word	0x080074df
 8007340:	080074df 	.word	0x080074df
 8007344:	0800745d 	.word	0x0800745d
 8007348:	080074df 	.word	0x080074df
 800734c:	080074df 	.word	0x080074df
 8007350:	080074df 	.word	0x080074df
 8007354:	0800749d 	.word	0x0800749d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68b9      	ldr	r1, [r7, #8]
 800735e:	4618      	mov	r0, r3
 8007360:	f000 fa1a 	bl	8007798 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	699a      	ldr	r2, [r3, #24]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f042 0208 	orr.w	r2, r2, #8
 8007372:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	699a      	ldr	r2, [r3, #24]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f022 0204 	bic.w	r2, r2, #4
 8007382:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	6999      	ldr	r1, [r3, #24]
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	691a      	ldr	r2, [r3, #16]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	430a      	orrs	r2, r1
 8007394:	619a      	str	r2, [r3, #24]
      break;
 8007396:	e0a3      	b.n	80074e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68b9      	ldr	r1, [r7, #8]
 800739e:	4618      	mov	r0, r3
 80073a0:	f000 fa6c 	bl	800787c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	699a      	ldr	r2, [r3, #24]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	699a      	ldr	r2, [r3, #24]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6999      	ldr	r1, [r3, #24]
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	021a      	lsls	r2, r3, #8
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	430a      	orrs	r2, r1
 80073d6:	619a      	str	r2, [r3, #24]
      break;
 80073d8:	e082      	b.n	80074e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68b9      	ldr	r1, [r7, #8]
 80073e0:	4618      	mov	r0, r3
 80073e2:	f000 fac3 	bl	800796c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	69da      	ldr	r2, [r3, #28]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f042 0208 	orr.w	r2, r2, #8
 80073f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	69da      	ldr	r2, [r3, #28]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f022 0204 	bic.w	r2, r2, #4
 8007404:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	69d9      	ldr	r1, [r3, #28]
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	691a      	ldr	r2, [r3, #16]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	430a      	orrs	r2, r1
 8007416:	61da      	str	r2, [r3, #28]
      break;
 8007418:	e062      	b.n	80074e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68b9      	ldr	r1, [r7, #8]
 8007420:	4618      	mov	r0, r3
 8007422:	f000 fb19 	bl	8007a58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	69da      	ldr	r2, [r3, #28]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	69da      	ldr	r2, [r3, #28]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	69d9      	ldr	r1, [r3, #28]
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	021a      	lsls	r2, r3, #8
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	430a      	orrs	r2, r1
 8007458:	61da      	str	r2, [r3, #28]
      break;
 800745a:	e041      	b.n	80074e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68b9      	ldr	r1, [r7, #8]
 8007462:	4618      	mov	r0, r3
 8007464:	f000 fb50 	bl	8007b08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f042 0208 	orr.w	r2, r2, #8
 8007476:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f022 0204 	bic.w	r2, r2, #4
 8007486:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	691a      	ldr	r2, [r3, #16]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	430a      	orrs	r2, r1
 8007498:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800749a:	e021      	b.n	80074e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68b9      	ldr	r1, [r7, #8]
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 fb82 	bl	8007bac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	021a      	lsls	r2, r3, #8
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	430a      	orrs	r2, r1
 80074da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80074dc:	e000      	b.n	80074e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80074de:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop

080074fc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800750c:	2b01      	cmp	r3, #1
 800750e:	d101      	bne.n	8007514 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007510:	2302      	movs	r3, #2
 8007512:	e031      	b.n	8007578 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2202      	movs	r2, #2
 8007520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fb94 	bl	8007c54 <TIM_SlaveTimer_SetConfig>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d009      	beq.n	8007546 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e018      	b.n	8007578 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68da      	ldr	r2, [r3, #12]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007554:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68da      	ldr	r2, [r3, #12]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007564:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3708      	adds	r7, #8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800758a:	2300      	movs	r3, #0
 800758c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2b0c      	cmp	r3, #12
 8007592:	d831      	bhi.n	80075f8 <HAL_TIM_ReadCapturedValue+0x78>
 8007594:	a201      	add	r2, pc, #4	; (adr r2, 800759c <HAL_TIM_ReadCapturedValue+0x1c>)
 8007596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800759a:	bf00      	nop
 800759c:	080075d1 	.word	0x080075d1
 80075a0:	080075f9 	.word	0x080075f9
 80075a4:	080075f9 	.word	0x080075f9
 80075a8:	080075f9 	.word	0x080075f9
 80075ac:	080075db 	.word	0x080075db
 80075b0:	080075f9 	.word	0x080075f9
 80075b4:	080075f9 	.word	0x080075f9
 80075b8:	080075f9 	.word	0x080075f9
 80075bc:	080075e5 	.word	0x080075e5
 80075c0:	080075f9 	.word	0x080075f9
 80075c4:	080075f9 	.word	0x080075f9
 80075c8:	080075f9 	.word	0x080075f9
 80075cc:	080075ef 	.word	0x080075ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075d6:	60fb      	str	r3, [r7, #12]

      break;
 80075d8:	e00f      	b.n	80075fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e0:	60fb      	str	r3, [r7, #12]

      break;
 80075e2:	e00a      	b.n	80075fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ea:	60fb      	str	r3, [r7, #12]

      break;
 80075ec:	e005      	b.n	80075fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f4:	60fb      	str	r3, [r7, #12]

      break;
 80075f6:	e000      	b.n	80075fa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80075f8:	bf00      	nop
  }

  return tmpreg;
 80075fa:	68fb      	ldr	r3, [r7, #12]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007624:	bf00      	nop
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a40      	ldr	r2, [pc, #256]	; (800776c <TIM_Base_SetConfig+0x114>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d013      	beq.n	8007698 <TIM_Base_SetConfig+0x40>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007676:	d00f      	beq.n	8007698 <TIM_Base_SetConfig+0x40>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a3d      	ldr	r2, [pc, #244]	; (8007770 <TIM_Base_SetConfig+0x118>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d00b      	beq.n	8007698 <TIM_Base_SetConfig+0x40>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a3c      	ldr	r2, [pc, #240]	; (8007774 <TIM_Base_SetConfig+0x11c>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d007      	beq.n	8007698 <TIM_Base_SetConfig+0x40>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a3b      	ldr	r2, [pc, #236]	; (8007778 <TIM_Base_SetConfig+0x120>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d003      	beq.n	8007698 <TIM_Base_SetConfig+0x40>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a3a      	ldr	r2, [pc, #232]	; (800777c <TIM_Base_SetConfig+0x124>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d108      	bne.n	80076aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800769e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a2f      	ldr	r2, [pc, #188]	; (800776c <TIM_Base_SetConfig+0x114>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d02b      	beq.n	800770a <TIM_Base_SetConfig+0xb2>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076b8:	d027      	beq.n	800770a <TIM_Base_SetConfig+0xb2>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a2c      	ldr	r2, [pc, #176]	; (8007770 <TIM_Base_SetConfig+0x118>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d023      	beq.n	800770a <TIM_Base_SetConfig+0xb2>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a2b      	ldr	r2, [pc, #172]	; (8007774 <TIM_Base_SetConfig+0x11c>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d01f      	beq.n	800770a <TIM_Base_SetConfig+0xb2>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a2a      	ldr	r2, [pc, #168]	; (8007778 <TIM_Base_SetConfig+0x120>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d01b      	beq.n	800770a <TIM_Base_SetConfig+0xb2>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a29      	ldr	r2, [pc, #164]	; (800777c <TIM_Base_SetConfig+0x124>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d017      	beq.n	800770a <TIM_Base_SetConfig+0xb2>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a28      	ldr	r2, [pc, #160]	; (8007780 <TIM_Base_SetConfig+0x128>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d013      	beq.n	800770a <TIM_Base_SetConfig+0xb2>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a27      	ldr	r2, [pc, #156]	; (8007784 <TIM_Base_SetConfig+0x12c>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d00f      	beq.n	800770a <TIM_Base_SetConfig+0xb2>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a26      	ldr	r2, [pc, #152]	; (8007788 <TIM_Base_SetConfig+0x130>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d00b      	beq.n	800770a <TIM_Base_SetConfig+0xb2>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a25      	ldr	r2, [pc, #148]	; (800778c <TIM_Base_SetConfig+0x134>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d007      	beq.n	800770a <TIM_Base_SetConfig+0xb2>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a24      	ldr	r2, [pc, #144]	; (8007790 <TIM_Base_SetConfig+0x138>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d003      	beq.n	800770a <TIM_Base_SetConfig+0xb2>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a23      	ldr	r2, [pc, #140]	; (8007794 <TIM_Base_SetConfig+0x13c>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d108      	bne.n	800771c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	4313      	orrs	r3, r2
 800771a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	4313      	orrs	r3, r2
 8007728:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	689a      	ldr	r2, [r3, #8]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a0a      	ldr	r2, [pc, #40]	; (800776c <TIM_Base_SetConfig+0x114>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d003      	beq.n	8007750 <TIM_Base_SetConfig+0xf8>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a0c      	ldr	r2, [pc, #48]	; (800777c <TIM_Base_SetConfig+0x124>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d103      	bne.n	8007758 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	691a      	ldr	r2, [r3, #16]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	615a      	str	r2, [r3, #20]
}
 800775e:	bf00      	nop
 8007760:	3714      	adds	r7, #20
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	40010000 	.word	0x40010000
 8007770:	40000400 	.word	0x40000400
 8007774:	40000800 	.word	0x40000800
 8007778:	40000c00 	.word	0x40000c00
 800777c:	40010400 	.word	0x40010400
 8007780:	40014000 	.word	0x40014000
 8007784:	40014400 	.word	0x40014400
 8007788:	40014800 	.word	0x40014800
 800778c:	40001800 	.word	0x40001800
 8007790:	40001c00 	.word	0x40001c00
 8007794:	40002000 	.word	0x40002000

08007798 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007798:	b480      	push	{r7}
 800779a:	b087      	sub	sp, #28
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	f023 0201 	bic.w	r2, r3, #1
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	4b2b      	ldr	r3, [pc, #172]	; (8007870 <TIM_OC1_SetConfig+0xd8>)
 80077c4:	4013      	ands	r3, r2
 80077c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f023 0303 	bic.w	r3, r3, #3
 80077ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	f023 0302 	bic.w	r3, r3, #2
 80077e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a21      	ldr	r2, [pc, #132]	; (8007874 <TIM_OC1_SetConfig+0xdc>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d003      	beq.n	80077fc <TIM_OC1_SetConfig+0x64>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a20      	ldr	r2, [pc, #128]	; (8007878 <TIM_OC1_SetConfig+0xe0>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d10c      	bne.n	8007816 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	f023 0308 	bic.w	r3, r3, #8
 8007802:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	697a      	ldr	r2, [r7, #20]
 800780a:	4313      	orrs	r3, r2
 800780c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f023 0304 	bic.w	r3, r3, #4
 8007814:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a16      	ldr	r2, [pc, #88]	; (8007874 <TIM_OC1_SetConfig+0xdc>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d003      	beq.n	8007826 <TIM_OC1_SetConfig+0x8e>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a15      	ldr	r2, [pc, #84]	; (8007878 <TIM_OC1_SetConfig+0xe0>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d111      	bne.n	800784a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800782c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007834:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	4313      	orrs	r3, r2
 800783e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	693a      	ldr	r2, [r7, #16]
 8007846:	4313      	orrs	r3, r2
 8007848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	685a      	ldr	r2, [r3, #4]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	621a      	str	r2, [r3, #32]
}
 8007864:	bf00      	nop
 8007866:	371c      	adds	r7, #28
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr
 8007870:	fffeff8f 	.word	0xfffeff8f
 8007874:	40010000 	.word	0x40010000
 8007878:	40010400 	.word	0x40010400

0800787c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800787c:	b480      	push	{r7}
 800787e:	b087      	sub	sp, #28
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a1b      	ldr	r3, [r3, #32]
 800788a:	f023 0210 	bic.w	r2, r3, #16
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a1b      	ldr	r3, [r3, #32]
 8007896:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	699b      	ldr	r3, [r3, #24]
 80078a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	4b2e      	ldr	r3, [pc, #184]	; (8007960 <TIM_OC2_SetConfig+0xe4>)
 80078a8:	4013      	ands	r3, r2
 80078aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	021b      	lsls	r3, r3, #8
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	4313      	orrs	r3, r2
 80078be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	f023 0320 	bic.w	r3, r3, #32
 80078c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	011b      	lsls	r3, r3, #4
 80078ce:	697a      	ldr	r2, [r7, #20]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a23      	ldr	r2, [pc, #140]	; (8007964 <TIM_OC2_SetConfig+0xe8>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d003      	beq.n	80078e4 <TIM_OC2_SetConfig+0x68>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a22      	ldr	r2, [pc, #136]	; (8007968 <TIM_OC2_SetConfig+0xec>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d10d      	bne.n	8007900 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	011b      	lsls	r3, r3, #4
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a18      	ldr	r2, [pc, #96]	; (8007964 <TIM_OC2_SetConfig+0xe8>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d003      	beq.n	8007910 <TIM_OC2_SetConfig+0x94>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a17      	ldr	r2, [pc, #92]	; (8007968 <TIM_OC2_SetConfig+0xec>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d113      	bne.n	8007938 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007916:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800791e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	695b      	ldr	r3, [r3, #20]
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	693a      	ldr	r2, [r7, #16]
 8007928:	4313      	orrs	r3, r2
 800792a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	693a      	ldr	r2, [r7, #16]
 8007934:	4313      	orrs	r3, r2
 8007936:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	693a      	ldr	r2, [r7, #16]
 800793c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	685a      	ldr	r2, [r3, #4]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	621a      	str	r2, [r3, #32]
}
 8007952:	bf00      	nop
 8007954:	371c      	adds	r7, #28
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	feff8fff 	.word	0xfeff8fff
 8007964:	40010000 	.word	0x40010000
 8007968:	40010400 	.word	0x40010400

0800796c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800796c:	b480      	push	{r7}
 800796e:	b087      	sub	sp, #28
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a1b      	ldr	r3, [r3, #32]
 800797a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	69db      	ldr	r3, [r3, #28]
 8007992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	4b2d      	ldr	r3, [pc, #180]	; (8007a4c <TIM_OC3_SetConfig+0xe0>)
 8007998:	4013      	ands	r3, r2
 800799a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f023 0303 	bic.w	r3, r3, #3
 80079a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	021b      	lsls	r3, r3, #8
 80079bc:	697a      	ldr	r2, [r7, #20]
 80079be:	4313      	orrs	r3, r2
 80079c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a22      	ldr	r2, [pc, #136]	; (8007a50 <TIM_OC3_SetConfig+0xe4>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d003      	beq.n	80079d2 <TIM_OC3_SetConfig+0x66>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a21      	ldr	r2, [pc, #132]	; (8007a54 <TIM_OC3_SetConfig+0xe8>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d10d      	bne.n	80079ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	021b      	lsls	r3, r3, #8
 80079e0:	697a      	ldr	r2, [r7, #20]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a17      	ldr	r2, [pc, #92]	; (8007a50 <TIM_OC3_SetConfig+0xe4>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d003      	beq.n	80079fe <TIM_OC3_SetConfig+0x92>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a16      	ldr	r2, [pc, #88]	; (8007a54 <TIM_OC3_SetConfig+0xe8>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d113      	bne.n	8007a26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	695b      	ldr	r3, [r3, #20]
 8007a12:	011b      	lsls	r3, r3, #4
 8007a14:	693a      	ldr	r2, [r7, #16]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	011b      	lsls	r3, r3, #4
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	693a      	ldr	r2, [r7, #16]
 8007a2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	685a      	ldr	r2, [r3, #4]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	697a      	ldr	r2, [r7, #20]
 8007a3e:	621a      	str	r2, [r3, #32]
}
 8007a40:	bf00      	nop
 8007a42:	371c      	adds	r7, #28
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr
 8007a4c:	fffeff8f 	.word	0xfffeff8f
 8007a50:	40010000 	.word	0x40010000
 8007a54:	40010400 	.word	0x40010400

08007a58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b087      	sub	sp, #28
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a1b      	ldr	r3, [r3, #32]
 8007a66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a1b      	ldr	r3, [r3, #32]
 8007a72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	69db      	ldr	r3, [r3, #28]
 8007a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	4b1e      	ldr	r3, [pc, #120]	; (8007afc <TIM_OC4_SetConfig+0xa4>)
 8007a84:	4013      	ands	r3, r2
 8007a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	021b      	lsls	r3, r3, #8
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007aa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	031b      	lsls	r3, r3, #12
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a13      	ldr	r2, [pc, #76]	; (8007b00 <TIM_OC4_SetConfig+0xa8>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d003      	beq.n	8007ac0 <TIM_OC4_SetConfig+0x68>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a12      	ldr	r2, [pc, #72]	; (8007b04 <TIM_OC4_SetConfig+0xac>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d109      	bne.n	8007ad4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ac6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	695b      	ldr	r3, [r3, #20]
 8007acc:	019b      	lsls	r3, r3, #6
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	697a      	ldr	r2, [r7, #20]
 8007ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	685a      	ldr	r2, [r3, #4]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	621a      	str	r2, [r3, #32]
}
 8007aee:	bf00      	nop
 8007af0:	371c      	adds	r7, #28
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	feff8fff 	.word	0xfeff8fff
 8007b00:	40010000 	.word	0x40010000
 8007b04:	40010400 	.word	0x40010400

08007b08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b087      	sub	sp, #28
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a1b      	ldr	r3, [r3, #32]
 8007b16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a1b      	ldr	r3, [r3, #32]
 8007b22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	4b1b      	ldr	r3, [pc, #108]	; (8007ba0 <TIM_OC5_SetConfig+0x98>)
 8007b34:	4013      	ands	r3, r2
 8007b36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007b48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	041b      	lsls	r3, r3, #16
 8007b50:	693a      	ldr	r2, [r7, #16]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a12      	ldr	r2, [pc, #72]	; (8007ba4 <TIM_OC5_SetConfig+0x9c>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d003      	beq.n	8007b66 <TIM_OC5_SetConfig+0x5e>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a11      	ldr	r2, [pc, #68]	; (8007ba8 <TIM_OC5_SetConfig+0xa0>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d109      	bne.n	8007b7a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	021b      	lsls	r3, r3, #8
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	685a      	ldr	r2, [r3, #4]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	621a      	str	r2, [r3, #32]
}
 8007b94:	bf00      	nop
 8007b96:	371c      	adds	r7, #28
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	fffeff8f 	.word	0xfffeff8f
 8007ba4:	40010000 	.word	0x40010000
 8007ba8:	40010400 	.word	0x40010400

08007bac <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b087      	sub	sp, #28
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a1b      	ldr	r3, [r3, #32]
 8007bc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	4b1c      	ldr	r3, [pc, #112]	; (8007c48 <TIM_OC6_SetConfig+0x9c>)
 8007bd8:	4013      	ands	r3, r2
 8007bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	021b      	lsls	r3, r3, #8
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007bee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	051b      	lsls	r3, r3, #20
 8007bf6:	693a      	ldr	r2, [r7, #16]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a13      	ldr	r2, [pc, #76]	; (8007c4c <TIM_OC6_SetConfig+0xa0>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d003      	beq.n	8007c0c <TIM_OC6_SetConfig+0x60>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4a12      	ldr	r2, [pc, #72]	; (8007c50 <TIM_OC6_SetConfig+0xa4>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d109      	bne.n	8007c20 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	695b      	ldr	r3, [r3, #20]
 8007c18:	029b      	lsls	r3, r3, #10
 8007c1a:	697a      	ldr	r2, [r7, #20]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	697a      	ldr	r2, [r7, #20]
 8007c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	685a      	ldr	r2, [r3, #4]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	693a      	ldr	r2, [r7, #16]
 8007c38:	621a      	str	r2, [r3, #32]
}
 8007c3a:	bf00      	nop
 8007c3c:	371c      	adds	r7, #28
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	feff8fff 	.word	0xfeff8fff
 8007c4c:	40010000 	.word	0x40010000
 8007c50:	40010400 	.word	0x40010400

08007c54 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b086      	sub	sp, #24
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c6c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007c78:	697a      	ldr	r2, [r7, #20]
 8007c7a:	4b39      	ldr	r3, [pc, #228]	; (8007d60 <TIM_SlaveTimer_SetConfig+0x10c>)
 8007c7c:	4013      	ands	r3, r2
 8007c7e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	697a      	ldr	r2, [r7, #20]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	2b30      	cmp	r3, #48	; 0x30
 8007c98:	d05c      	beq.n	8007d54 <TIM_SlaveTimer_SetConfig+0x100>
 8007c9a:	2b30      	cmp	r3, #48	; 0x30
 8007c9c:	d806      	bhi.n	8007cac <TIM_SlaveTimer_SetConfig+0x58>
 8007c9e:	2b10      	cmp	r3, #16
 8007ca0:	d058      	beq.n	8007d54 <TIM_SlaveTimer_SetConfig+0x100>
 8007ca2:	2b20      	cmp	r3, #32
 8007ca4:	d056      	beq.n	8007d54 <TIM_SlaveTimer_SetConfig+0x100>
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d054      	beq.n	8007d54 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8007caa:	e054      	b.n	8007d56 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8007cac:	2b50      	cmp	r3, #80	; 0x50
 8007cae:	d03d      	beq.n	8007d2c <TIM_SlaveTimer_SetConfig+0xd8>
 8007cb0:	2b50      	cmp	r3, #80	; 0x50
 8007cb2:	d802      	bhi.n	8007cba <TIM_SlaveTimer_SetConfig+0x66>
 8007cb4:	2b40      	cmp	r3, #64	; 0x40
 8007cb6:	d010      	beq.n	8007cda <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8007cb8:	e04d      	b.n	8007d56 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8007cba:	2b60      	cmp	r3, #96	; 0x60
 8007cbc:	d040      	beq.n	8007d40 <TIM_SlaveTimer_SetConfig+0xec>
 8007cbe:	2b70      	cmp	r3, #112	; 0x70
 8007cc0:	d000      	beq.n	8007cc4 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8007cc2:	e048      	b.n	8007d56 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6818      	ldr	r0, [r3, #0]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	68d9      	ldr	r1, [r3, #12]
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	689a      	ldr	r2, [r3, #8]
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	f000 f9cf 	bl	8008076 <TIM_ETR_SetConfig>
      break;
 8007cd8:	e03d      	b.n	8007d56 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2b05      	cmp	r3, #5
 8007ce0:	d101      	bne.n	8007ce6 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e038      	b.n	8007d58 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	6a1b      	ldr	r3, [r3, #32]
 8007cec:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	6a1a      	ldr	r2, [r3, #32]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f022 0201 	bic.w	r2, r2, #1
 8007cfc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d0c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	011b      	lsls	r3, r3, #4
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	693a      	ldr	r2, [r7, #16]
 8007d28:	621a      	str	r2, [r3, #32]
      break;
 8007d2a:	e014      	b.n	8007d56 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6818      	ldr	r0, [r3, #0]
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	6899      	ldr	r1, [r3, #8]
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	461a      	mov	r2, r3
 8007d3a:	f000 f887 	bl	8007e4c <TIM_TI1_ConfigInputStage>
      break;
 8007d3e:	e00a      	b.n	8007d56 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6818      	ldr	r0, [r3, #0]
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	6899      	ldr	r1, [r3, #8]
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	f000 f8e9 	bl	8007f24 <TIM_TI2_ConfigInputStage>
      break;
 8007d52:	e000      	b.n	8007d56 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8007d54:	bf00      	nop
  }
  return HAL_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3718      	adds	r7, #24
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	fffefff8 	.word	0xfffefff8

08007d64 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b087      	sub	sp, #28
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
 8007d70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6a1b      	ldr	r3, [r3, #32]
 8007d76:	f023 0201 	bic.w	r2, r3, #1
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6a1b      	ldr	r3, [r3, #32]
 8007d88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	4a28      	ldr	r2, [pc, #160]	; (8007e30 <TIM_TI1_SetConfig+0xcc>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d01b      	beq.n	8007dca <TIM_TI1_SetConfig+0x66>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d98:	d017      	beq.n	8007dca <TIM_TI1_SetConfig+0x66>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	4a25      	ldr	r2, [pc, #148]	; (8007e34 <TIM_TI1_SetConfig+0xd0>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d013      	beq.n	8007dca <TIM_TI1_SetConfig+0x66>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	4a24      	ldr	r2, [pc, #144]	; (8007e38 <TIM_TI1_SetConfig+0xd4>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d00f      	beq.n	8007dca <TIM_TI1_SetConfig+0x66>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	4a23      	ldr	r2, [pc, #140]	; (8007e3c <TIM_TI1_SetConfig+0xd8>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d00b      	beq.n	8007dca <TIM_TI1_SetConfig+0x66>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	4a22      	ldr	r2, [pc, #136]	; (8007e40 <TIM_TI1_SetConfig+0xdc>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d007      	beq.n	8007dca <TIM_TI1_SetConfig+0x66>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	4a21      	ldr	r2, [pc, #132]	; (8007e44 <TIM_TI1_SetConfig+0xe0>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d003      	beq.n	8007dca <TIM_TI1_SetConfig+0x66>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	4a20      	ldr	r2, [pc, #128]	; (8007e48 <TIM_TI1_SetConfig+0xe4>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d101      	bne.n	8007dce <TIM_TI1_SetConfig+0x6a>
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e000      	b.n	8007dd0 <TIM_TI1_SetConfig+0x6c>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d008      	beq.n	8007de6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	f023 0303 	bic.w	r3, r3, #3
 8007dda:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007ddc:	697a      	ldr	r2, [r7, #20]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	617b      	str	r3, [r7, #20]
 8007de4:	e003      	b.n	8007dee <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f043 0301 	orr.w	r3, r3, #1
 8007dec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007df4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	011b      	lsls	r3, r3, #4
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	697a      	ldr	r2, [r7, #20]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	f023 030a 	bic.w	r3, r3, #10
 8007e08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	f003 030a 	and.w	r3, r3, #10
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	697a      	ldr	r2, [r7, #20]
 8007e1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	621a      	str	r2, [r3, #32]
}
 8007e22:	bf00      	nop
 8007e24:	371c      	adds	r7, #28
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	40010000 	.word	0x40010000
 8007e34:	40000400 	.word	0x40000400
 8007e38:	40000800 	.word	0x40000800
 8007e3c:	40000c00 	.word	0x40000c00
 8007e40:	40010400 	.word	0x40010400
 8007e44:	40014000 	.word	0x40014000
 8007e48:	40001800 	.word	0x40001800

08007e4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b087      	sub	sp, #28
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6a1b      	ldr	r3, [r3, #32]
 8007e5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	f023 0201 	bic.w	r2, r3, #1
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	011b      	lsls	r3, r3, #4
 8007e7c:	693a      	ldr	r2, [r7, #16]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	f023 030a 	bic.w	r3, r3, #10
 8007e88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	693a      	ldr	r2, [r7, #16]
 8007e96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	697a      	ldr	r2, [r7, #20]
 8007e9c:	621a      	str	r2, [r3, #32]
}
 8007e9e:	bf00      	nop
 8007ea0:	371c      	adds	r7, #28
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b087      	sub	sp, #28
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	60f8      	str	r0, [r7, #12]
 8007eb2:	60b9      	str	r1, [r7, #8]
 8007eb4:	607a      	str	r2, [r7, #4]
 8007eb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6a1b      	ldr	r3, [r3, #32]
 8007ebc:	f023 0210 	bic.w	r2, r3, #16
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6a1b      	ldr	r3, [r3, #32]
 8007ece:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ed6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	021b      	lsls	r3, r3, #8
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ee8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	031b      	lsls	r3, r3, #12
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	697a      	ldr	r2, [r7, #20]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007efc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	011b      	lsls	r3, r3, #4
 8007f02:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	693a      	ldr	r2, [r7, #16]
 8007f16:	621a      	str	r2, [r3, #32]
}
 8007f18:	bf00      	nop
 8007f1a:	371c      	adds	r7, #28
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b087      	sub	sp, #28
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6a1b      	ldr	r3, [r3, #32]
 8007f34:	f023 0210 	bic.w	r2, r3, #16
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6a1b      	ldr	r3, [r3, #32]
 8007f46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	031b      	lsls	r3, r3, #12
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	011b      	lsls	r3, r3, #4
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	693a      	ldr	r2, [r7, #16]
 8007f76:	621a      	str	r2, [r3, #32]
}
 8007f78:	bf00      	nop
 8007f7a:	371c      	adds	r7, #28
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b087      	sub	sp, #28
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	607a      	str	r2, [r7, #4]
 8007f90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6a1b      	ldr	r3, [r3, #32]
 8007f96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6a1b      	ldr	r3, [r3, #32]
 8007fa8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	f023 0303 	bic.w	r3, r3, #3
 8007fb0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007fb2:	697a      	ldr	r2, [r7, #20]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fc0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	011b      	lsls	r3, r3, #4
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	697a      	ldr	r2, [r7, #20]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007fd4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	021b      	lsls	r3, r3, #8
 8007fda:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	621a      	str	r2, [r3, #32]
}
 8007ff0:	bf00      	nop
 8007ff2:	371c      	adds	r7, #28
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b087      	sub	sp, #28
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	607a      	str	r2, [r7, #4]
 8008008:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6a1b      	ldr	r3, [r3, #32]
 800800e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	69db      	ldr	r3, [r3, #28]
 800801a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6a1b      	ldr	r3, [r3, #32]
 8008020:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008028:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	021b      	lsls	r3, r3, #8
 800802e:	697a      	ldr	r2, [r7, #20]
 8008030:	4313      	orrs	r3, r2
 8008032:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800803a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	031b      	lsls	r3, r3, #12
 8008040:	b29b      	uxth	r3, r3
 8008042:	697a      	ldr	r2, [r7, #20]
 8008044:	4313      	orrs	r3, r2
 8008046:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800804e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	031b      	lsls	r3, r3, #12
 8008054:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008058:	693a      	ldr	r2, [r7, #16]
 800805a:	4313      	orrs	r3, r2
 800805c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	697a      	ldr	r2, [r7, #20]
 8008062:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	693a      	ldr	r2, [r7, #16]
 8008068:	621a      	str	r2, [r3, #32]
}
 800806a:	bf00      	nop
 800806c:	371c      	adds	r7, #28
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr

08008076 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008076:	b480      	push	{r7}
 8008078:	b087      	sub	sp, #28
 800807a:	af00      	add	r7, sp, #0
 800807c:	60f8      	str	r0, [r7, #12]
 800807e:	60b9      	str	r1, [r7, #8]
 8008080:	607a      	str	r2, [r7, #4]
 8008082:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008090:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	021a      	lsls	r2, r3, #8
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	431a      	orrs	r2, r3
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	4313      	orrs	r3, r2
 800809e:	697a      	ldr	r2, [r7, #20]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	609a      	str	r2, [r3, #8]
}
 80080aa:	bf00      	nop
 80080ac:	371c      	adds	r7, #28
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr

080080b6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080b6:	b480      	push	{r7}
 80080b8:	b087      	sub	sp, #28
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	60f8      	str	r0, [r7, #12]
 80080be:	60b9      	str	r1, [r7, #8]
 80080c0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	f003 031f 	and.w	r3, r3, #31
 80080c8:	2201      	movs	r2, #1
 80080ca:	fa02 f303 	lsl.w	r3, r2, r3
 80080ce:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6a1a      	ldr	r2, [r3, #32]
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	43db      	mvns	r3, r3
 80080d8:	401a      	ands	r2, r3
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6a1a      	ldr	r2, [r3, #32]
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	f003 031f 	and.w	r3, r3, #31
 80080e8:	6879      	ldr	r1, [r7, #4]
 80080ea:	fa01 f303 	lsl.w	r3, r1, r3
 80080ee:	431a      	orrs	r2, r3
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	621a      	str	r2, [r3, #32]
}
 80080f4:	bf00      	nop
 80080f6:	371c      	adds	r7, #28
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008110:	2b01      	cmp	r3, #1
 8008112:	d101      	bne.n	8008118 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008114:	2302      	movs	r3, #2
 8008116:	e06d      	b.n	80081f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2202      	movs	r2, #2
 8008124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a30      	ldr	r2, [pc, #192]	; (8008200 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d004      	beq.n	800814c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a2f      	ldr	r2, [pc, #188]	; (8008204 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d108      	bne.n	800815e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008152:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	4313      	orrs	r3, r2
 800815c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008164:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	4313      	orrs	r3, r2
 800816e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a20      	ldr	r2, [pc, #128]	; (8008200 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d022      	beq.n	80081c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800818a:	d01d      	beq.n	80081c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a1d      	ldr	r2, [pc, #116]	; (8008208 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d018      	beq.n	80081c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a1c      	ldr	r2, [pc, #112]	; (800820c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d013      	beq.n	80081c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a1a      	ldr	r2, [pc, #104]	; (8008210 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d00e      	beq.n	80081c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a15      	ldr	r2, [pc, #84]	; (8008204 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d009      	beq.n	80081c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a16      	ldr	r2, [pc, #88]	; (8008214 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d004      	beq.n	80081c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a15      	ldr	r2, [pc, #84]	; (8008218 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d10c      	bne.n	80081e2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr
 8008200:	40010000 	.word	0x40010000
 8008204:	40010400 	.word	0x40010400
 8008208:	40000400 	.word	0x40000400
 800820c:	40000800 	.word	0x40000800
 8008210:	40000c00 	.word	0x40000c00
 8008214:	40014000 	.word	0x40014000
 8008218:	40001800 	.word	0x40001800

0800821c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008224:	bf00      	nop
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008238:	bf00      	nop
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800824c:	bf00      	nop
 800824e:	370c      	adds	r7, #12
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e040      	b.n	80082ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800826e:	2b00      	cmp	r3, #0
 8008270:	d106      	bne.n	8008280 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7fa fdb4 	bl	8002de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2224      	movs	r2, #36	; 0x24
 8008284:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f022 0201 	bic.w	r2, r2, #1
 8008294:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fa70 	bl	800877c <UART_SetConfig>
 800829c:	4603      	mov	r3, r0
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d101      	bne.n	80082a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e022      	b.n	80082ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d002      	beq.n	80082b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fd0e 	bl	8008cd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	685a      	ldr	r2, [r3, #4]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	689a      	ldr	r2, [r3, #8]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f042 0201 	orr.w	r2, r2, #1
 80082e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 fd95 	bl	8008e14 <UART_CheckIdleState>
 80082ea:	4603      	mov	r3, r0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	4613      	mov	r3, r2
 8008300:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008306:	2b20      	cmp	r3, #32
 8008308:	d144      	bne.n	8008394 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d002      	beq.n	8008316 <HAL_UART_Transmit_IT+0x22>
 8008310:	88fb      	ldrh	r3, [r7, #6]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d101      	bne.n	800831a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e03d      	b.n	8008396 <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008320:	2b01      	cmp	r3, #1
 8008322:	d101      	bne.n	8008328 <HAL_UART_Transmit_IT+0x34>
 8008324:	2302      	movs	r3, #2
 8008326:	e036      	b.n	8008396 <HAL_UART_Transmit_IT+0xa2>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	88fa      	ldrh	r2, [r7, #6]
 800833a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	88fa      	ldrh	r2, [r7, #6]
 8008342:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2200      	movs	r2, #0
 800834a:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2200      	movs	r2, #0
 8008350:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2221      	movs	r2, #33	; 0x21
 8008356:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008360:	d107      	bne.n	8008372 <HAL_UART_Transmit_IT+0x7e>
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d103      	bne.n	8008372 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	4a0d      	ldr	r2, [pc, #52]	; (80083a4 <HAL_UART_Transmit_IT+0xb0>)
 800836e:	665a      	str	r2, [r3, #100]	; 0x64
 8008370:	e002      	b.n	8008378 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	4a0c      	ldr	r2, [pc, #48]	; (80083a8 <HAL_UART_Transmit_IT+0xb4>)
 8008376:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2200      	movs	r2, #0
 800837c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800838e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8008390:	2300      	movs	r3, #0
 8008392:	e000      	b.n	8008396 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8008394:	2302      	movs	r3, #2
  }
}
 8008396:	4618      	mov	r0, r3
 8008398:	3714      	adds	r7, #20
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	08009047 	.word	0x08009047
 80083a8:	08008fd5 	.word	0x08008fd5

080083ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	4613      	mov	r3, r2
 80083b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083be:	2b20      	cmp	r3, #32
 80083c0:	f040 808a 	bne.w	80084d8 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d002      	beq.n	80083d0 <HAL_UART_Receive_IT+0x24>
 80083ca:	88fb      	ldrh	r3, [r7, #6]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d101      	bne.n	80083d4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e082      	b.n	80084da <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d101      	bne.n	80083e2 <HAL_UART_Receive_IT+0x36>
 80083de:	2302      	movs	r3, #2
 80083e0:	e07b      	b.n	80084da <HAL_UART_Receive_IT+0x12e>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2201      	movs	r2, #1
 80083e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	88fa      	ldrh	r2, [r7, #6]
 80083f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	88fa      	ldrh	r2, [r7, #6]
 80083fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2200      	movs	r2, #0
 8008404:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800840e:	d10e      	bne.n	800842e <HAL_UART_Receive_IT+0x82>
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d105      	bne.n	8008424 <HAL_UART_Receive_IT+0x78>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800841e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008422:	e02d      	b.n	8008480 <HAL_UART_Receive_IT+0xd4>
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	22ff      	movs	r2, #255	; 0xff
 8008428:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800842c:	e028      	b.n	8008480 <HAL_UART_Receive_IT+0xd4>
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d10d      	bne.n	8008452 <HAL_UART_Receive_IT+0xa6>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d104      	bne.n	8008448 <HAL_UART_Receive_IT+0x9c>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	22ff      	movs	r2, #255	; 0xff
 8008442:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008446:	e01b      	b.n	8008480 <HAL_UART_Receive_IT+0xd4>
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	227f      	movs	r2, #127	; 0x7f
 800844c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008450:	e016      	b.n	8008480 <HAL_UART_Receive_IT+0xd4>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800845a:	d10d      	bne.n	8008478 <HAL_UART_Receive_IT+0xcc>
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d104      	bne.n	800846e <HAL_UART_Receive_IT+0xc2>
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	227f      	movs	r2, #127	; 0x7f
 8008468:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800846c:	e008      	b.n	8008480 <HAL_UART_Receive_IT+0xd4>
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	223f      	movs	r2, #63	; 0x3f
 8008472:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008476:	e003      	b.n	8008480 <HAL_UART_Receive_IT+0xd4>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2200      	movs	r2, #0
 8008484:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2222      	movs	r2, #34	; 0x22
 800848a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	689a      	ldr	r2, [r3, #8]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f042 0201 	orr.w	r2, r2, #1
 800849a:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084a4:	d107      	bne.n	80084b6 <HAL_UART_Receive_IT+0x10a>
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d103      	bne.n	80084b6 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	4a0d      	ldr	r2, [pc, #52]	; (80084e8 <HAL_UART_Receive_IT+0x13c>)
 80084b2:	661a      	str	r2, [r3, #96]	; 0x60
 80084b4:	e002      	b.n	80084bc <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	4a0c      	ldr	r2, [pc, #48]	; (80084ec <HAL_UART_Receive_IT+0x140>)
 80084ba:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80084d2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80084d4:	2300      	movs	r3, #0
 80084d6:	e000      	b.n	80084da <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80084d8:	2302      	movs	r3, #2
  }
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3714      	adds	r7, #20
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
 80084e6:	bf00      	nop
 80084e8:	0800919b 	.word	0x0800919b
 80084ec:	080090f5 	.word	0x080090f5

080084f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b088      	sub	sp, #32
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	69db      	ldr	r3, [r3, #28]
 80084fe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008510:	69fa      	ldr	r2, [r7, #28]
 8008512:	f640 030f 	movw	r3, #2063	; 0x80f
 8008516:	4013      	ands	r3, r2
 8008518:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d113      	bne.n	8008548 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	f003 0320 	and.w	r3, r3, #32
 8008526:	2b00      	cmp	r3, #0
 8008528:	d00e      	beq.n	8008548 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	f003 0320 	and.w	r3, r3, #32
 8008530:	2b00      	cmp	r3, #0
 8008532:	d009      	beq.n	8008548 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008538:	2b00      	cmp	r3, #0
 800853a:	f000 8100 	beq.w	800873e <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	4798      	blx	r3
      }
      return;
 8008546:	e0fa      	b.n	800873e <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	2b00      	cmp	r3, #0
 800854c:	f000 80d5 	beq.w	80086fa <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	f003 0301 	and.w	r3, r3, #1
 8008556:	2b00      	cmp	r3, #0
 8008558:	d105      	bne.n	8008566 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008560:	2b00      	cmp	r3, #0
 8008562:	f000 80ca 	beq.w	80086fa <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	f003 0301 	and.w	r3, r3, #1
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00e      	beq.n	800858e <HAL_UART_IRQHandler+0x9e>
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008576:	2b00      	cmp	r3, #0
 8008578:	d009      	beq.n	800858e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2201      	movs	r2, #1
 8008580:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008586:	f043 0201 	orr.w	r2, r3, #1
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	f003 0302 	and.w	r3, r3, #2
 8008594:	2b00      	cmp	r3, #0
 8008596:	d00e      	beq.n	80085b6 <HAL_UART_IRQHandler+0xc6>
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	f003 0301 	and.w	r3, r3, #1
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d009      	beq.n	80085b6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2202      	movs	r2, #2
 80085a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085ae:	f043 0204 	orr.w	r2, r3, #4
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	f003 0304 	and.w	r3, r3, #4
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00e      	beq.n	80085de <HAL_UART_IRQHandler+0xee>
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	f003 0301 	and.w	r3, r3, #1
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d009      	beq.n	80085de <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2204      	movs	r2, #4
 80085d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085d6:	f043 0202 	orr.w	r2, r3, #2
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	f003 0308 	and.w	r3, r3, #8
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d013      	beq.n	8008610 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	f003 0320 	and.w	r3, r3, #32
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d104      	bne.n	80085fc <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d009      	beq.n	8008610 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2208      	movs	r2, #8
 8008602:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008608:	f043 0208 	orr.w	r2, r3, #8
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00f      	beq.n	800863a <HAL_UART_IRQHandler+0x14a>
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00a      	beq.n	800863a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800862c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008632:	f043 0220 	orr.w	r2, r3, #32
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800863e:	2b00      	cmp	r3, #0
 8008640:	d07f      	beq.n	8008742 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	f003 0320 	and.w	r3, r3, #32
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00c      	beq.n	8008666 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	f003 0320 	and.w	r3, r3, #32
 8008652:	2b00      	cmp	r3, #0
 8008654:	d007      	beq.n	8008666 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800865a:	2b00      	cmp	r3, #0
 800865c:	d003      	beq.n	8008666 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800866a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008676:	2b40      	cmp	r3, #64	; 0x40
 8008678:	d004      	beq.n	8008684 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008680:	2b00      	cmp	r3, #0
 8008682:	d031      	beq.n	80086e8 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fc6f 	bl	8008f68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008694:	2b40      	cmp	r3, #64	; 0x40
 8008696:	d123      	bne.n	80086e0 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	689a      	ldr	r2, [r3, #8]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086a6:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d013      	beq.n	80086d8 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086b4:	4a26      	ldr	r2, [pc, #152]	; (8008750 <HAL_UART_IRQHandler+0x260>)
 80086b6:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086bc:	4618      	mov	r0, r3
 80086be:	f7fb f9eb 	bl	8003a98 <HAL_DMA_Abort_IT>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d016      	beq.n	80086f6 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80086d2:	4610      	mov	r0, r2
 80086d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086d6:	e00e      	b.n	80086f6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 f845 	bl	8008768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086de:	e00a      	b.n	80086f6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 f841 	bl	8008768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086e6:	e006      	b.n	80086f6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 f83d 	bl	8008768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80086f4:	e025      	b.n	8008742 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086f6:	bf00      	nop
    return;
 80086f8:	e023      	b.n	8008742 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80086fa:	69fb      	ldr	r3, [r7, #28]
 80086fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00d      	beq.n	8008720 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800870a:	2b00      	cmp	r3, #0
 800870c:	d008      	beq.n	8008720 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008712:	2b00      	cmp	r3, #0
 8008714:	d017      	beq.n	8008746 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	4798      	blx	r3
    }
    return;
 800871e:	e012      	b.n	8008746 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00e      	beq.n	8008748 <HAL_UART_IRQHandler+0x258>
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008730:	2b00      	cmp	r3, #0
 8008732:	d009      	beq.n	8008748 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fcc4 	bl	80090c2 <UART_EndTransmit_IT>
    return;
 800873a:	bf00      	nop
 800873c:	e004      	b.n	8008748 <HAL_UART_IRQHandler+0x258>
      return;
 800873e:	bf00      	nop
 8008740:	e002      	b.n	8008748 <HAL_UART_IRQHandler+0x258>
    return;
 8008742:	bf00      	nop
 8008744:	e000      	b.n	8008748 <HAL_UART_IRQHandler+0x258>
    return;
 8008746:	bf00      	nop
  }

}
 8008748:	3720      	adds	r7, #32
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	08008fa9 	.word	0x08008fa9

08008754 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008770:	bf00      	nop
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b088      	sub	sp, #32
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008784:	2300      	movs	r3, #0
 8008786:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008788:	2300      	movs	r3, #0
 800878a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	689a      	ldr	r2, [r3, #8]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	431a      	orrs	r2, r3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	431a      	orrs	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	69db      	ldr	r3, [r3, #28]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	4bb1      	ldr	r3, [pc, #708]	; (8008a70 <UART_SetConfig+0x2f4>)
 80087ac:	4013      	ands	r3, r2
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	6812      	ldr	r2, [r2, #0]
 80087b2:	6939      	ldr	r1, [r7, #16]
 80087b4:	430b      	orrs	r3, r1
 80087b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	68da      	ldr	r2, [r3, #12]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	430a      	orrs	r2, r1
 80087cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	699b      	ldr	r3, [r3, #24]
 80087d2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6a1b      	ldr	r3, [r3, #32]
 80087d8:	693a      	ldr	r2, [r7, #16]
 80087da:	4313      	orrs	r3, r2
 80087dc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	693a      	ldr	r2, [r7, #16]
 80087ee:	430a      	orrs	r2, r1
 80087f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a9f      	ldr	r2, [pc, #636]	; (8008a74 <UART_SetConfig+0x2f8>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d121      	bne.n	8008840 <UART_SetConfig+0xc4>
 80087fc:	4b9e      	ldr	r3, [pc, #632]	; (8008a78 <UART_SetConfig+0x2fc>)
 80087fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008802:	f003 0303 	and.w	r3, r3, #3
 8008806:	2b03      	cmp	r3, #3
 8008808:	d816      	bhi.n	8008838 <UART_SetConfig+0xbc>
 800880a:	a201      	add	r2, pc, #4	; (adr r2, 8008810 <UART_SetConfig+0x94>)
 800880c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008810:	08008821 	.word	0x08008821
 8008814:	0800882d 	.word	0x0800882d
 8008818:	08008827 	.word	0x08008827
 800881c:	08008833 	.word	0x08008833
 8008820:	2301      	movs	r3, #1
 8008822:	77fb      	strb	r3, [r7, #31]
 8008824:	e151      	b.n	8008aca <UART_SetConfig+0x34e>
 8008826:	2302      	movs	r3, #2
 8008828:	77fb      	strb	r3, [r7, #31]
 800882a:	e14e      	b.n	8008aca <UART_SetConfig+0x34e>
 800882c:	2304      	movs	r3, #4
 800882e:	77fb      	strb	r3, [r7, #31]
 8008830:	e14b      	b.n	8008aca <UART_SetConfig+0x34e>
 8008832:	2308      	movs	r3, #8
 8008834:	77fb      	strb	r3, [r7, #31]
 8008836:	e148      	b.n	8008aca <UART_SetConfig+0x34e>
 8008838:	2310      	movs	r3, #16
 800883a:	77fb      	strb	r3, [r7, #31]
 800883c:	bf00      	nop
 800883e:	e144      	b.n	8008aca <UART_SetConfig+0x34e>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a8d      	ldr	r2, [pc, #564]	; (8008a7c <UART_SetConfig+0x300>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d134      	bne.n	80088b4 <UART_SetConfig+0x138>
 800884a:	4b8b      	ldr	r3, [pc, #556]	; (8008a78 <UART_SetConfig+0x2fc>)
 800884c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008850:	f003 030c 	and.w	r3, r3, #12
 8008854:	2b0c      	cmp	r3, #12
 8008856:	d829      	bhi.n	80088ac <UART_SetConfig+0x130>
 8008858:	a201      	add	r2, pc, #4	; (adr r2, 8008860 <UART_SetConfig+0xe4>)
 800885a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885e:	bf00      	nop
 8008860:	08008895 	.word	0x08008895
 8008864:	080088ad 	.word	0x080088ad
 8008868:	080088ad 	.word	0x080088ad
 800886c:	080088ad 	.word	0x080088ad
 8008870:	080088a1 	.word	0x080088a1
 8008874:	080088ad 	.word	0x080088ad
 8008878:	080088ad 	.word	0x080088ad
 800887c:	080088ad 	.word	0x080088ad
 8008880:	0800889b 	.word	0x0800889b
 8008884:	080088ad 	.word	0x080088ad
 8008888:	080088ad 	.word	0x080088ad
 800888c:	080088ad 	.word	0x080088ad
 8008890:	080088a7 	.word	0x080088a7
 8008894:	2300      	movs	r3, #0
 8008896:	77fb      	strb	r3, [r7, #31]
 8008898:	e117      	b.n	8008aca <UART_SetConfig+0x34e>
 800889a:	2302      	movs	r3, #2
 800889c:	77fb      	strb	r3, [r7, #31]
 800889e:	e114      	b.n	8008aca <UART_SetConfig+0x34e>
 80088a0:	2304      	movs	r3, #4
 80088a2:	77fb      	strb	r3, [r7, #31]
 80088a4:	e111      	b.n	8008aca <UART_SetConfig+0x34e>
 80088a6:	2308      	movs	r3, #8
 80088a8:	77fb      	strb	r3, [r7, #31]
 80088aa:	e10e      	b.n	8008aca <UART_SetConfig+0x34e>
 80088ac:	2310      	movs	r3, #16
 80088ae:	77fb      	strb	r3, [r7, #31]
 80088b0:	bf00      	nop
 80088b2:	e10a      	b.n	8008aca <UART_SetConfig+0x34e>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a71      	ldr	r2, [pc, #452]	; (8008a80 <UART_SetConfig+0x304>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d120      	bne.n	8008900 <UART_SetConfig+0x184>
 80088be:	4b6e      	ldr	r3, [pc, #440]	; (8008a78 <UART_SetConfig+0x2fc>)
 80088c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80088c8:	2b10      	cmp	r3, #16
 80088ca:	d00f      	beq.n	80088ec <UART_SetConfig+0x170>
 80088cc:	2b10      	cmp	r3, #16
 80088ce:	d802      	bhi.n	80088d6 <UART_SetConfig+0x15a>
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d005      	beq.n	80088e0 <UART_SetConfig+0x164>
 80088d4:	e010      	b.n	80088f8 <UART_SetConfig+0x17c>
 80088d6:	2b20      	cmp	r3, #32
 80088d8:	d005      	beq.n	80088e6 <UART_SetConfig+0x16a>
 80088da:	2b30      	cmp	r3, #48	; 0x30
 80088dc:	d009      	beq.n	80088f2 <UART_SetConfig+0x176>
 80088de:	e00b      	b.n	80088f8 <UART_SetConfig+0x17c>
 80088e0:	2300      	movs	r3, #0
 80088e2:	77fb      	strb	r3, [r7, #31]
 80088e4:	e0f1      	b.n	8008aca <UART_SetConfig+0x34e>
 80088e6:	2302      	movs	r3, #2
 80088e8:	77fb      	strb	r3, [r7, #31]
 80088ea:	e0ee      	b.n	8008aca <UART_SetConfig+0x34e>
 80088ec:	2304      	movs	r3, #4
 80088ee:	77fb      	strb	r3, [r7, #31]
 80088f0:	e0eb      	b.n	8008aca <UART_SetConfig+0x34e>
 80088f2:	2308      	movs	r3, #8
 80088f4:	77fb      	strb	r3, [r7, #31]
 80088f6:	e0e8      	b.n	8008aca <UART_SetConfig+0x34e>
 80088f8:	2310      	movs	r3, #16
 80088fa:	77fb      	strb	r3, [r7, #31]
 80088fc:	bf00      	nop
 80088fe:	e0e4      	b.n	8008aca <UART_SetConfig+0x34e>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a5f      	ldr	r2, [pc, #380]	; (8008a84 <UART_SetConfig+0x308>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d120      	bne.n	800894c <UART_SetConfig+0x1d0>
 800890a:	4b5b      	ldr	r3, [pc, #364]	; (8008a78 <UART_SetConfig+0x2fc>)
 800890c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008910:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008914:	2b40      	cmp	r3, #64	; 0x40
 8008916:	d00f      	beq.n	8008938 <UART_SetConfig+0x1bc>
 8008918:	2b40      	cmp	r3, #64	; 0x40
 800891a:	d802      	bhi.n	8008922 <UART_SetConfig+0x1a6>
 800891c:	2b00      	cmp	r3, #0
 800891e:	d005      	beq.n	800892c <UART_SetConfig+0x1b0>
 8008920:	e010      	b.n	8008944 <UART_SetConfig+0x1c8>
 8008922:	2b80      	cmp	r3, #128	; 0x80
 8008924:	d005      	beq.n	8008932 <UART_SetConfig+0x1b6>
 8008926:	2bc0      	cmp	r3, #192	; 0xc0
 8008928:	d009      	beq.n	800893e <UART_SetConfig+0x1c2>
 800892a:	e00b      	b.n	8008944 <UART_SetConfig+0x1c8>
 800892c:	2300      	movs	r3, #0
 800892e:	77fb      	strb	r3, [r7, #31]
 8008930:	e0cb      	b.n	8008aca <UART_SetConfig+0x34e>
 8008932:	2302      	movs	r3, #2
 8008934:	77fb      	strb	r3, [r7, #31]
 8008936:	e0c8      	b.n	8008aca <UART_SetConfig+0x34e>
 8008938:	2304      	movs	r3, #4
 800893a:	77fb      	strb	r3, [r7, #31]
 800893c:	e0c5      	b.n	8008aca <UART_SetConfig+0x34e>
 800893e:	2308      	movs	r3, #8
 8008940:	77fb      	strb	r3, [r7, #31]
 8008942:	e0c2      	b.n	8008aca <UART_SetConfig+0x34e>
 8008944:	2310      	movs	r3, #16
 8008946:	77fb      	strb	r3, [r7, #31]
 8008948:	bf00      	nop
 800894a:	e0be      	b.n	8008aca <UART_SetConfig+0x34e>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a4d      	ldr	r2, [pc, #308]	; (8008a88 <UART_SetConfig+0x30c>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d124      	bne.n	80089a0 <UART_SetConfig+0x224>
 8008956:	4b48      	ldr	r3, [pc, #288]	; (8008a78 <UART_SetConfig+0x2fc>)
 8008958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800895c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008964:	d012      	beq.n	800898c <UART_SetConfig+0x210>
 8008966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800896a:	d802      	bhi.n	8008972 <UART_SetConfig+0x1f6>
 800896c:	2b00      	cmp	r3, #0
 800896e:	d007      	beq.n	8008980 <UART_SetConfig+0x204>
 8008970:	e012      	b.n	8008998 <UART_SetConfig+0x21c>
 8008972:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008976:	d006      	beq.n	8008986 <UART_SetConfig+0x20a>
 8008978:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800897c:	d009      	beq.n	8008992 <UART_SetConfig+0x216>
 800897e:	e00b      	b.n	8008998 <UART_SetConfig+0x21c>
 8008980:	2300      	movs	r3, #0
 8008982:	77fb      	strb	r3, [r7, #31]
 8008984:	e0a1      	b.n	8008aca <UART_SetConfig+0x34e>
 8008986:	2302      	movs	r3, #2
 8008988:	77fb      	strb	r3, [r7, #31]
 800898a:	e09e      	b.n	8008aca <UART_SetConfig+0x34e>
 800898c:	2304      	movs	r3, #4
 800898e:	77fb      	strb	r3, [r7, #31]
 8008990:	e09b      	b.n	8008aca <UART_SetConfig+0x34e>
 8008992:	2308      	movs	r3, #8
 8008994:	77fb      	strb	r3, [r7, #31]
 8008996:	e098      	b.n	8008aca <UART_SetConfig+0x34e>
 8008998:	2310      	movs	r3, #16
 800899a:	77fb      	strb	r3, [r7, #31]
 800899c:	bf00      	nop
 800899e:	e094      	b.n	8008aca <UART_SetConfig+0x34e>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a39      	ldr	r2, [pc, #228]	; (8008a8c <UART_SetConfig+0x310>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d124      	bne.n	80089f4 <UART_SetConfig+0x278>
 80089aa:	4b33      	ldr	r3, [pc, #204]	; (8008a78 <UART_SetConfig+0x2fc>)
 80089ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80089b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089b8:	d012      	beq.n	80089e0 <UART_SetConfig+0x264>
 80089ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089be:	d802      	bhi.n	80089c6 <UART_SetConfig+0x24a>
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d007      	beq.n	80089d4 <UART_SetConfig+0x258>
 80089c4:	e012      	b.n	80089ec <UART_SetConfig+0x270>
 80089c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089ca:	d006      	beq.n	80089da <UART_SetConfig+0x25e>
 80089cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089d0:	d009      	beq.n	80089e6 <UART_SetConfig+0x26a>
 80089d2:	e00b      	b.n	80089ec <UART_SetConfig+0x270>
 80089d4:	2301      	movs	r3, #1
 80089d6:	77fb      	strb	r3, [r7, #31]
 80089d8:	e077      	b.n	8008aca <UART_SetConfig+0x34e>
 80089da:	2302      	movs	r3, #2
 80089dc:	77fb      	strb	r3, [r7, #31]
 80089de:	e074      	b.n	8008aca <UART_SetConfig+0x34e>
 80089e0:	2304      	movs	r3, #4
 80089e2:	77fb      	strb	r3, [r7, #31]
 80089e4:	e071      	b.n	8008aca <UART_SetConfig+0x34e>
 80089e6:	2308      	movs	r3, #8
 80089e8:	77fb      	strb	r3, [r7, #31]
 80089ea:	e06e      	b.n	8008aca <UART_SetConfig+0x34e>
 80089ec:	2310      	movs	r3, #16
 80089ee:	77fb      	strb	r3, [r7, #31]
 80089f0:	bf00      	nop
 80089f2:	e06a      	b.n	8008aca <UART_SetConfig+0x34e>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a25      	ldr	r2, [pc, #148]	; (8008a90 <UART_SetConfig+0x314>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d124      	bne.n	8008a48 <UART_SetConfig+0x2cc>
 80089fe:	4b1e      	ldr	r3, [pc, #120]	; (8008a78 <UART_SetConfig+0x2fc>)
 8008a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a04:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a0c:	d012      	beq.n	8008a34 <UART_SetConfig+0x2b8>
 8008a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a12:	d802      	bhi.n	8008a1a <UART_SetConfig+0x29e>
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d007      	beq.n	8008a28 <UART_SetConfig+0x2ac>
 8008a18:	e012      	b.n	8008a40 <UART_SetConfig+0x2c4>
 8008a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a1e:	d006      	beq.n	8008a2e <UART_SetConfig+0x2b2>
 8008a20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a24:	d009      	beq.n	8008a3a <UART_SetConfig+0x2be>
 8008a26:	e00b      	b.n	8008a40 <UART_SetConfig+0x2c4>
 8008a28:	2300      	movs	r3, #0
 8008a2a:	77fb      	strb	r3, [r7, #31]
 8008a2c:	e04d      	b.n	8008aca <UART_SetConfig+0x34e>
 8008a2e:	2302      	movs	r3, #2
 8008a30:	77fb      	strb	r3, [r7, #31]
 8008a32:	e04a      	b.n	8008aca <UART_SetConfig+0x34e>
 8008a34:	2304      	movs	r3, #4
 8008a36:	77fb      	strb	r3, [r7, #31]
 8008a38:	e047      	b.n	8008aca <UART_SetConfig+0x34e>
 8008a3a:	2308      	movs	r3, #8
 8008a3c:	77fb      	strb	r3, [r7, #31]
 8008a3e:	e044      	b.n	8008aca <UART_SetConfig+0x34e>
 8008a40:	2310      	movs	r3, #16
 8008a42:	77fb      	strb	r3, [r7, #31]
 8008a44:	bf00      	nop
 8008a46:	e040      	b.n	8008aca <UART_SetConfig+0x34e>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a11      	ldr	r2, [pc, #68]	; (8008a94 <UART_SetConfig+0x318>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d139      	bne.n	8008ac6 <UART_SetConfig+0x34a>
 8008a52:	4b09      	ldr	r3, [pc, #36]	; (8008a78 <UART_SetConfig+0x2fc>)
 8008a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008a5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a60:	d027      	beq.n	8008ab2 <UART_SetConfig+0x336>
 8008a62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a66:	d817      	bhi.n	8008a98 <UART_SetConfig+0x31c>
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d01c      	beq.n	8008aa6 <UART_SetConfig+0x32a>
 8008a6c:	e027      	b.n	8008abe <UART_SetConfig+0x342>
 8008a6e:	bf00      	nop
 8008a70:	efff69f3 	.word	0xefff69f3
 8008a74:	40011000 	.word	0x40011000
 8008a78:	40023800 	.word	0x40023800
 8008a7c:	40004400 	.word	0x40004400
 8008a80:	40004800 	.word	0x40004800
 8008a84:	40004c00 	.word	0x40004c00
 8008a88:	40005000 	.word	0x40005000
 8008a8c:	40011400 	.word	0x40011400
 8008a90:	40007800 	.word	0x40007800
 8008a94:	40007c00 	.word	0x40007c00
 8008a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a9c:	d006      	beq.n	8008aac <UART_SetConfig+0x330>
 8008a9e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008aa2:	d009      	beq.n	8008ab8 <UART_SetConfig+0x33c>
 8008aa4:	e00b      	b.n	8008abe <UART_SetConfig+0x342>
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	77fb      	strb	r3, [r7, #31]
 8008aaa:	e00e      	b.n	8008aca <UART_SetConfig+0x34e>
 8008aac:	2302      	movs	r3, #2
 8008aae:	77fb      	strb	r3, [r7, #31]
 8008ab0:	e00b      	b.n	8008aca <UART_SetConfig+0x34e>
 8008ab2:	2304      	movs	r3, #4
 8008ab4:	77fb      	strb	r3, [r7, #31]
 8008ab6:	e008      	b.n	8008aca <UART_SetConfig+0x34e>
 8008ab8:	2308      	movs	r3, #8
 8008aba:	77fb      	strb	r3, [r7, #31]
 8008abc:	e005      	b.n	8008aca <UART_SetConfig+0x34e>
 8008abe:	2310      	movs	r3, #16
 8008ac0:	77fb      	strb	r3, [r7, #31]
 8008ac2:	bf00      	nop
 8008ac4:	e001      	b.n	8008aca <UART_SetConfig+0x34e>
 8008ac6:	2310      	movs	r3, #16
 8008ac8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	69db      	ldr	r3, [r3, #28]
 8008ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ad2:	d17f      	bne.n	8008bd4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8008ad4:	7ffb      	ldrb	r3, [r7, #31]
 8008ad6:	2b08      	cmp	r3, #8
 8008ad8:	d85c      	bhi.n	8008b94 <UART_SetConfig+0x418>
 8008ada:	a201      	add	r2, pc, #4	; (adr r2, 8008ae0 <UART_SetConfig+0x364>)
 8008adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae0:	08008b05 	.word	0x08008b05
 8008ae4:	08008b25 	.word	0x08008b25
 8008ae8:	08008b45 	.word	0x08008b45
 8008aec:	08008b95 	.word	0x08008b95
 8008af0:	08008b5d 	.word	0x08008b5d
 8008af4:	08008b95 	.word	0x08008b95
 8008af8:	08008b95 	.word	0x08008b95
 8008afc:	08008b95 	.word	0x08008b95
 8008b00:	08008b7d 	.word	0x08008b7d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b04:	f7fd fcce 	bl	80064a4 <HAL_RCC_GetPCLK1Freq>
 8008b08:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	005a      	lsls	r2, r3, #1
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	085b      	lsrs	r3, r3, #1
 8008b14:	441a      	add	r2, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	61bb      	str	r3, [r7, #24]
        break;
 8008b22:	e03a      	b.n	8008b9a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b24:	f7fd fcd2 	bl	80064cc <HAL_RCC_GetPCLK2Freq>
 8008b28:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	005a      	lsls	r2, r3, #1
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	085b      	lsrs	r3, r3, #1
 8008b34:	441a      	add	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	61bb      	str	r3, [r7, #24]
        break;
 8008b42:	e02a      	b.n	8008b9a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	085a      	lsrs	r2, r3, #1
 8008b4a:	4b5f      	ldr	r3, [pc, #380]	; (8008cc8 <UART_SetConfig+0x54c>)
 8008b4c:	4413      	add	r3, r2
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	6852      	ldr	r2, [r2, #4]
 8008b52:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	61bb      	str	r3, [r7, #24]
        break;
 8008b5a:	e01e      	b.n	8008b9a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b5c:	f7fd fbbe 	bl	80062dc <HAL_RCC_GetSysClockFreq>
 8008b60:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	005a      	lsls	r2, r3, #1
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	085b      	lsrs	r3, r3, #1
 8008b6c:	441a      	add	r2, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	61bb      	str	r3, [r7, #24]
        break;
 8008b7a:	e00e      	b.n	8008b9a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	085b      	lsrs	r3, r3, #1
 8008b82:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	61bb      	str	r3, [r7, #24]
        break;
 8008b92:	e002      	b.n	8008b9a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	75fb      	strb	r3, [r7, #23]
        break;
 8008b98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	2b0f      	cmp	r3, #15
 8008b9e:	d916      	bls.n	8008bce <UART_SetConfig+0x452>
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ba6:	d212      	bcs.n	8008bce <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	f023 030f 	bic.w	r3, r3, #15
 8008bb0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008bb2:	69bb      	ldr	r3, [r7, #24]
 8008bb4:	085b      	lsrs	r3, r3, #1
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	f003 0307 	and.w	r3, r3, #7
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	897b      	ldrh	r3, [r7, #10]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	897a      	ldrh	r2, [r7, #10]
 8008bca:	60da      	str	r2, [r3, #12]
 8008bcc:	e070      	b.n	8008cb0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	75fb      	strb	r3, [r7, #23]
 8008bd2:	e06d      	b.n	8008cb0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8008bd4:	7ffb      	ldrb	r3, [r7, #31]
 8008bd6:	2b08      	cmp	r3, #8
 8008bd8:	d859      	bhi.n	8008c8e <UART_SetConfig+0x512>
 8008bda:	a201      	add	r2, pc, #4	; (adr r2, 8008be0 <UART_SetConfig+0x464>)
 8008bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be0:	08008c05 	.word	0x08008c05
 8008be4:	08008c23 	.word	0x08008c23
 8008be8:	08008c41 	.word	0x08008c41
 8008bec:	08008c8f 	.word	0x08008c8f
 8008bf0:	08008c59 	.word	0x08008c59
 8008bf4:	08008c8f 	.word	0x08008c8f
 8008bf8:	08008c8f 	.word	0x08008c8f
 8008bfc:	08008c8f 	.word	0x08008c8f
 8008c00:	08008c77 	.word	0x08008c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c04:	f7fd fc4e 	bl	80064a4 <HAL_RCC_GetPCLK1Freq>
 8008c08:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	085a      	lsrs	r2, r3, #1
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	441a      	add	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	61bb      	str	r3, [r7, #24]
        break;
 8008c20:	e038      	b.n	8008c94 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c22:	f7fd fc53 	bl	80064cc <HAL_RCC_GetPCLK2Freq>
 8008c26:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	085a      	lsrs	r2, r3, #1
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	441a      	add	r2, r3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	61bb      	str	r3, [r7, #24]
        break;
 8008c3e:	e029      	b.n	8008c94 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	085a      	lsrs	r2, r3, #1
 8008c46:	4b21      	ldr	r3, [pc, #132]	; (8008ccc <UART_SetConfig+0x550>)
 8008c48:	4413      	add	r3, r2
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	6852      	ldr	r2, [r2, #4]
 8008c4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	61bb      	str	r3, [r7, #24]
        break;
 8008c56:	e01d      	b.n	8008c94 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c58:	f7fd fb40 	bl	80062dc <HAL_RCC_GetSysClockFreq>
 8008c5c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	085a      	lsrs	r2, r3, #1
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	441a      	add	r2, r3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	61bb      	str	r3, [r7, #24]
        break;
 8008c74:	e00e      	b.n	8008c94 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	085b      	lsrs	r3, r3, #1
 8008c7c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	61bb      	str	r3, [r7, #24]
        break;
 8008c8c:	e002      	b.n	8008c94 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	75fb      	strb	r3, [r7, #23]
        break;
 8008c92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	2b0f      	cmp	r3, #15
 8008c98:	d908      	bls.n	8008cac <UART_SetConfig+0x530>
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ca0:	d204      	bcs.n	8008cac <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	69ba      	ldr	r2, [r7, #24]
 8008ca8:	60da      	str	r2, [r3, #12]
 8008caa:	e001      	b.n	8008cb0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3720      	adds	r7, #32
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	01e84800 	.word	0x01e84800
 8008ccc:	00f42400 	.word	0x00f42400

08008cd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cdc:	f003 0301 	and.w	r3, r3, #1
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00a      	beq.n	8008cfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	430a      	orrs	r2, r1
 8008cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfe:	f003 0302 	and.w	r3, r3, #2
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d00a      	beq.n	8008d1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	430a      	orrs	r2, r1
 8008d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d20:	f003 0304 	and.w	r3, r3, #4
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00a      	beq.n	8008d3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	430a      	orrs	r2, r1
 8008d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d42:	f003 0308 	and.w	r3, r3, #8
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00a      	beq.n	8008d60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	430a      	orrs	r2, r1
 8008d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d64:	f003 0310 	and.w	r3, r3, #16
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d00a      	beq.n	8008d82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	430a      	orrs	r2, r1
 8008d80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d86:	f003 0320 	and.w	r3, r3, #32
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00a      	beq.n	8008da4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	430a      	orrs	r2, r1
 8008da2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d01a      	beq.n	8008de6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	430a      	orrs	r2, r1
 8008dc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dce:	d10a      	bne.n	8008de6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	430a      	orrs	r2, r1
 8008de4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00a      	beq.n	8008e08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	430a      	orrs	r2, r1
 8008e06:	605a      	str	r2, [r3, #4]
  }
}
 8008e08:	bf00      	nop
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b086      	sub	sp, #24
 8008e18:	af02      	add	r7, sp, #8
 8008e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008e22:	f7fa f985 	bl	8003130 <HAL_GetTick>
 8008e26:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f003 0308 	and.w	r3, r3, #8
 8008e32:	2b08      	cmp	r3, #8
 8008e34:	d10e      	bne.n	8008e54 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 f814 	bl	8008e72 <UART_WaitOnFlagUntilTimeout>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d001      	beq.n	8008e54 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e50:	2303      	movs	r3, #3
 8008e52:	e00a      	b.n	8008e6a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2220      	movs	r2, #32
 8008e58:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2220      	movs	r2, #32
 8008e5e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b084      	sub	sp, #16
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	60f8      	str	r0, [r7, #12]
 8008e7a:	60b9      	str	r1, [r7, #8]
 8008e7c:	603b      	str	r3, [r7, #0]
 8008e7e:	4613      	mov	r3, r2
 8008e80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e82:	e05d      	b.n	8008f40 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e8a:	d059      	beq.n	8008f40 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e8c:	f7fa f950 	bl	8003130 <HAL_GetTick>
 8008e90:	4602      	mov	r2, r0
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	1ad3      	subs	r3, r2, r3
 8008e96:	69ba      	ldr	r2, [r7, #24]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d302      	bcc.n	8008ea2 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d11b      	bne.n	8008eda <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008eb0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	689a      	ldr	r2, [r3, #8]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f022 0201 	bic.w	r2, r2, #1
 8008ec0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2220      	movs	r2, #32
 8008ec6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2220      	movs	r2, #32
 8008ecc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	e042      	b.n	8008f60 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 0304 	and.w	r3, r3, #4
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d02b      	beq.n	8008f40 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	69db      	ldr	r3, [r3, #28]
 8008eee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ef6:	d123      	bne.n	8008f40 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f00:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008f10:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	689a      	ldr	r2, [r3, #8]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f022 0201 	bic.w	r2, r2, #1
 8008f20:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2220      	movs	r2, #32
 8008f26:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2220      	movs	r2, #32
 8008f2c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2220      	movs	r2, #32
 8008f32:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	e00f      	b.n	8008f60 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	69da      	ldr	r2, [r3, #28]
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	4013      	ands	r3, r2
 8008f4a:	68ba      	ldr	r2, [r7, #8]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	bf0c      	ite	eq
 8008f50:	2301      	moveq	r3, #1
 8008f52:	2300      	movne	r3, #0
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	461a      	mov	r2, r3
 8008f58:	79fb      	ldrb	r3, [r7, #7]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d092      	beq.n	8008e84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3710      	adds	r7, #16
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008f7e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	689a      	ldr	r2, [r3, #8]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f022 0201 	bic.w	r2, r2, #1
 8008f8e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2220      	movs	r2, #32
 8008f94:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8008f9c:	bf00      	nop
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f7ff fbce 	bl	8008768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fcc:	bf00      	nop
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fe0:	2b21      	cmp	r3, #33	; 0x21
 8008fe2:	d12a      	bne.n	800903a <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d110      	bne.n	8009012 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ffe:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800900e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009010:	e013      	b.n	800903a <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009016:	781a      	ldrb	r2, [r3, #0]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009022:	1c5a      	adds	r2, r3, #1
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800902e:	b29b      	uxth	r3, r3
 8009030:	3b01      	subs	r3, #1
 8009032:	b29a      	uxth	r2, r3
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800903a:	bf00      	nop
 800903c:	370c      	adds	r7, #12
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr

08009046 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009046:	b480      	push	{r7}
 8009048:	b085      	sub	sp, #20
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009052:	2b21      	cmp	r3, #33	; 0x21
 8009054:	d12f      	bne.n	80090b6 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800905c:	b29b      	uxth	r3, r3
 800905e:	2b00      	cmp	r3, #0
 8009060:	d110      	bne.n	8009084 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009070:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009080:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009082:	e018      	b.n	80090b6 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009088:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	881b      	ldrh	r3, [r3, #0]
 800908e:	461a      	mov	r2, r3
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009098:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800909e:	1c9a      	adds	r2, r3, #2
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	3b01      	subs	r3, #1
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80090b6:	bf00      	nop
 80090b8:	3714      	adds	r7, #20
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr

080090c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80090c2:	b580      	push	{r7, lr}
 80090c4:	b082      	sub	sp, #8
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090d8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2220      	movs	r2, #32
 80090de:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f7ff fb34 	bl	8008754 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090ec:	bf00      	nop
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009102:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009108:	2b22      	cmp	r3, #34	; 0x22
 800910a:	d13a      	bne.n	8009182 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009112:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009114:	89bb      	ldrh	r3, [r7, #12]
 8009116:	b2d9      	uxtb	r1, r3
 8009118:	89fb      	ldrh	r3, [r7, #14]
 800911a:	b2da      	uxtb	r2, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009120:	400a      	ands	r2, r1
 8009122:	b2d2      	uxtb	r2, r2
 8009124:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800912a:	1c5a      	adds	r2, r3, #1
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009136:	b29b      	uxth	r3, r3
 8009138:	3b01      	subs	r3, #1
 800913a:	b29a      	uxth	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009148:	b29b      	uxth	r3, r3
 800914a:	2b00      	cmp	r3, #0
 800914c:	d121      	bne.n	8009192 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800915c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	689a      	ldr	r2, [r3, #8]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f022 0201 	bic.w	r2, r2, #1
 800916c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2220      	movs	r2, #32
 8009172:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f7f8 fc0a 	bl	8001994 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009180:	e007      	b.n	8009192 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	699a      	ldr	r2, [r3, #24]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f042 0208 	orr.w	r2, r2, #8
 8009190:	619a      	str	r2, [r3, #24]
}
 8009192:	bf00      	nop
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b084      	sub	sp, #16
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80091a8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091ae:	2b22      	cmp	r3, #34	; 0x22
 80091b0:	d13a      	bne.n	8009228 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091be:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80091c0:	89ba      	ldrh	r2, [r7, #12]
 80091c2:	89fb      	ldrh	r3, [r7, #14]
 80091c4:	4013      	ands	r3, r2
 80091c6:	b29a      	uxth	r2, r3
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091d0:	1c9a      	adds	r2, r3, #2
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80091dc:	b29b      	uxth	r3, r3
 80091de:	3b01      	subs	r3, #1
 80091e0:	b29a      	uxth	r2, r3
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d121      	bne.n	8009238 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009202:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	689a      	ldr	r2, [r3, #8]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f022 0201 	bic.w	r2, r2, #1
 8009212:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2220      	movs	r2, #32
 8009218:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f7f8 fbb7 	bl	8001994 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009226:	e007      	b.n	8009238 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	699a      	ldr	r2, [r3, #24]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f042 0208 	orr.w	r2, r2, #8
 8009236:	619a      	str	r2, [r3, #24]
}
 8009238:	bf00      	nop
 800923a:	3710      	adds	r7, #16
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <__errno>:
 8009240:	4b01      	ldr	r3, [pc, #4]	; (8009248 <__errno+0x8>)
 8009242:	6818      	ldr	r0, [r3, #0]
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	20000014 	.word	0x20000014

0800924c <__libc_init_array>:
 800924c:	b570      	push	{r4, r5, r6, lr}
 800924e:	4e0d      	ldr	r6, [pc, #52]	; (8009284 <__libc_init_array+0x38>)
 8009250:	4c0d      	ldr	r4, [pc, #52]	; (8009288 <__libc_init_array+0x3c>)
 8009252:	1ba4      	subs	r4, r4, r6
 8009254:	10a4      	asrs	r4, r4, #2
 8009256:	2500      	movs	r5, #0
 8009258:	42a5      	cmp	r5, r4
 800925a:	d109      	bne.n	8009270 <__libc_init_array+0x24>
 800925c:	4e0b      	ldr	r6, [pc, #44]	; (800928c <__libc_init_array+0x40>)
 800925e:	4c0c      	ldr	r4, [pc, #48]	; (8009290 <__libc_init_array+0x44>)
 8009260:	f000 fc30 	bl	8009ac4 <_init>
 8009264:	1ba4      	subs	r4, r4, r6
 8009266:	10a4      	asrs	r4, r4, #2
 8009268:	2500      	movs	r5, #0
 800926a:	42a5      	cmp	r5, r4
 800926c:	d105      	bne.n	800927a <__libc_init_array+0x2e>
 800926e:	bd70      	pop	{r4, r5, r6, pc}
 8009270:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009274:	4798      	blx	r3
 8009276:	3501      	adds	r5, #1
 8009278:	e7ee      	b.n	8009258 <__libc_init_array+0xc>
 800927a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800927e:	4798      	blx	r3
 8009280:	3501      	adds	r5, #1
 8009282:	e7f2      	b.n	800926a <__libc_init_array+0x1e>
 8009284:	08009b50 	.word	0x08009b50
 8009288:	08009b50 	.word	0x08009b50
 800928c:	08009b50 	.word	0x08009b50
 8009290:	08009b54 	.word	0x08009b54

08009294 <malloc>:
 8009294:	4b02      	ldr	r3, [pc, #8]	; (80092a0 <malloc+0xc>)
 8009296:	4601      	mov	r1, r0
 8009298:	6818      	ldr	r0, [r3, #0]
 800929a:	f000 b865 	b.w	8009368 <_malloc_r>
 800929e:	bf00      	nop
 80092a0:	20000014 	.word	0x20000014

080092a4 <memcpy>:
 80092a4:	b510      	push	{r4, lr}
 80092a6:	1e43      	subs	r3, r0, #1
 80092a8:	440a      	add	r2, r1
 80092aa:	4291      	cmp	r1, r2
 80092ac:	d100      	bne.n	80092b0 <memcpy+0xc>
 80092ae:	bd10      	pop	{r4, pc}
 80092b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092b8:	e7f7      	b.n	80092aa <memcpy+0x6>

080092ba <memset>:
 80092ba:	4402      	add	r2, r0
 80092bc:	4603      	mov	r3, r0
 80092be:	4293      	cmp	r3, r2
 80092c0:	d100      	bne.n	80092c4 <memset+0xa>
 80092c2:	4770      	bx	lr
 80092c4:	f803 1b01 	strb.w	r1, [r3], #1
 80092c8:	e7f9      	b.n	80092be <memset+0x4>
	...

080092cc <_free_r>:
 80092cc:	b538      	push	{r3, r4, r5, lr}
 80092ce:	4605      	mov	r5, r0
 80092d0:	2900      	cmp	r1, #0
 80092d2:	d045      	beq.n	8009360 <_free_r+0x94>
 80092d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092d8:	1f0c      	subs	r4, r1, #4
 80092da:	2b00      	cmp	r3, #0
 80092dc:	bfb8      	it	lt
 80092de:	18e4      	addlt	r4, r4, r3
 80092e0:	f000 f8cc 	bl	800947c <__malloc_lock>
 80092e4:	4a1f      	ldr	r2, [pc, #124]	; (8009364 <_free_r+0x98>)
 80092e6:	6813      	ldr	r3, [r2, #0]
 80092e8:	4610      	mov	r0, r2
 80092ea:	b933      	cbnz	r3, 80092fa <_free_r+0x2e>
 80092ec:	6063      	str	r3, [r4, #4]
 80092ee:	6014      	str	r4, [r2, #0]
 80092f0:	4628      	mov	r0, r5
 80092f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092f6:	f000 b8c2 	b.w	800947e <__malloc_unlock>
 80092fa:	42a3      	cmp	r3, r4
 80092fc:	d90c      	bls.n	8009318 <_free_r+0x4c>
 80092fe:	6821      	ldr	r1, [r4, #0]
 8009300:	1862      	adds	r2, r4, r1
 8009302:	4293      	cmp	r3, r2
 8009304:	bf04      	itt	eq
 8009306:	681a      	ldreq	r2, [r3, #0]
 8009308:	685b      	ldreq	r3, [r3, #4]
 800930a:	6063      	str	r3, [r4, #4]
 800930c:	bf04      	itt	eq
 800930e:	1852      	addeq	r2, r2, r1
 8009310:	6022      	streq	r2, [r4, #0]
 8009312:	6004      	str	r4, [r0, #0]
 8009314:	e7ec      	b.n	80092f0 <_free_r+0x24>
 8009316:	4613      	mov	r3, r2
 8009318:	685a      	ldr	r2, [r3, #4]
 800931a:	b10a      	cbz	r2, 8009320 <_free_r+0x54>
 800931c:	42a2      	cmp	r2, r4
 800931e:	d9fa      	bls.n	8009316 <_free_r+0x4a>
 8009320:	6819      	ldr	r1, [r3, #0]
 8009322:	1858      	adds	r0, r3, r1
 8009324:	42a0      	cmp	r0, r4
 8009326:	d10b      	bne.n	8009340 <_free_r+0x74>
 8009328:	6820      	ldr	r0, [r4, #0]
 800932a:	4401      	add	r1, r0
 800932c:	1858      	adds	r0, r3, r1
 800932e:	4282      	cmp	r2, r0
 8009330:	6019      	str	r1, [r3, #0]
 8009332:	d1dd      	bne.n	80092f0 <_free_r+0x24>
 8009334:	6810      	ldr	r0, [r2, #0]
 8009336:	6852      	ldr	r2, [r2, #4]
 8009338:	605a      	str	r2, [r3, #4]
 800933a:	4401      	add	r1, r0
 800933c:	6019      	str	r1, [r3, #0]
 800933e:	e7d7      	b.n	80092f0 <_free_r+0x24>
 8009340:	d902      	bls.n	8009348 <_free_r+0x7c>
 8009342:	230c      	movs	r3, #12
 8009344:	602b      	str	r3, [r5, #0]
 8009346:	e7d3      	b.n	80092f0 <_free_r+0x24>
 8009348:	6820      	ldr	r0, [r4, #0]
 800934a:	1821      	adds	r1, r4, r0
 800934c:	428a      	cmp	r2, r1
 800934e:	bf04      	itt	eq
 8009350:	6811      	ldreq	r1, [r2, #0]
 8009352:	6852      	ldreq	r2, [r2, #4]
 8009354:	6062      	str	r2, [r4, #4]
 8009356:	bf04      	itt	eq
 8009358:	1809      	addeq	r1, r1, r0
 800935a:	6021      	streq	r1, [r4, #0]
 800935c:	605c      	str	r4, [r3, #4]
 800935e:	e7c7      	b.n	80092f0 <_free_r+0x24>
 8009360:	bd38      	pop	{r3, r4, r5, pc}
 8009362:	bf00      	nop
 8009364:	200000a0 	.word	0x200000a0

08009368 <_malloc_r>:
 8009368:	b570      	push	{r4, r5, r6, lr}
 800936a:	1ccd      	adds	r5, r1, #3
 800936c:	f025 0503 	bic.w	r5, r5, #3
 8009370:	3508      	adds	r5, #8
 8009372:	2d0c      	cmp	r5, #12
 8009374:	bf38      	it	cc
 8009376:	250c      	movcc	r5, #12
 8009378:	2d00      	cmp	r5, #0
 800937a:	4606      	mov	r6, r0
 800937c:	db01      	blt.n	8009382 <_malloc_r+0x1a>
 800937e:	42a9      	cmp	r1, r5
 8009380:	d903      	bls.n	800938a <_malloc_r+0x22>
 8009382:	230c      	movs	r3, #12
 8009384:	6033      	str	r3, [r6, #0]
 8009386:	2000      	movs	r0, #0
 8009388:	bd70      	pop	{r4, r5, r6, pc}
 800938a:	f000 f877 	bl	800947c <__malloc_lock>
 800938e:	4a21      	ldr	r2, [pc, #132]	; (8009414 <_malloc_r+0xac>)
 8009390:	6814      	ldr	r4, [r2, #0]
 8009392:	4621      	mov	r1, r4
 8009394:	b991      	cbnz	r1, 80093bc <_malloc_r+0x54>
 8009396:	4c20      	ldr	r4, [pc, #128]	; (8009418 <_malloc_r+0xb0>)
 8009398:	6823      	ldr	r3, [r4, #0]
 800939a:	b91b      	cbnz	r3, 80093a4 <_malloc_r+0x3c>
 800939c:	4630      	mov	r0, r6
 800939e:	f000 f83d 	bl	800941c <_sbrk_r>
 80093a2:	6020      	str	r0, [r4, #0]
 80093a4:	4629      	mov	r1, r5
 80093a6:	4630      	mov	r0, r6
 80093a8:	f000 f838 	bl	800941c <_sbrk_r>
 80093ac:	1c43      	adds	r3, r0, #1
 80093ae:	d124      	bne.n	80093fa <_malloc_r+0x92>
 80093b0:	230c      	movs	r3, #12
 80093b2:	6033      	str	r3, [r6, #0]
 80093b4:	4630      	mov	r0, r6
 80093b6:	f000 f862 	bl	800947e <__malloc_unlock>
 80093ba:	e7e4      	b.n	8009386 <_malloc_r+0x1e>
 80093bc:	680b      	ldr	r3, [r1, #0]
 80093be:	1b5b      	subs	r3, r3, r5
 80093c0:	d418      	bmi.n	80093f4 <_malloc_r+0x8c>
 80093c2:	2b0b      	cmp	r3, #11
 80093c4:	d90f      	bls.n	80093e6 <_malloc_r+0x7e>
 80093c6:	600b      	str	r3, [r1, #0]
 80093c8:	50cd      	str	r5, [r1, r3]
 80093ca:	18cc      	adds	r4, r1, r3
 80093cc:	4630      	mov	r0, r6
 80093ce:	f000 f856 	bl	800947e <__malloc_unlock>
 80093d2:	f104 000b 	add.w	r0, r4, #11
 80093d6:	1d23      	adds	r3, r4, #4
 80093d8:	f020 0007 	bic.w	r0, r0, #7
 80093dc:	1ac3      	subs	r3, r0, r3
 80093de:	d0d3      	beq.n	8009388 <_malloc_r+0x20>
 80093e0:	425a      	negs	r2, r3
 80093e2:	50e2      	str	r2, [r4, r3]
 80093e4:	e7d0      	b.n	8009388 <_malloc_r+0x20>
 80093e6:	428c      	cmp	r4, r1
 80093e8:	684b      	ldr	r3, [r1, #4]
 80093ea:	bf16      	itet	ne
 80093ec:	6063      	strne	r3, [r4, #4]
 80093ee:	6013      	streq	r3, [r2, #0]
 80093f0:	460c      	movne	r4, r1
 80093f2:	e7eb      	b.n	80093cc <_malloc_r+0x64>
 80093f4:	460c      	mov	r4, r1
 80093f6:	6849      	ldr	r1, [r1, #4]
 80093f8:	e7cc      	b.n	8009394 <_malloc_r+0x2c>
 80093fa:	1cc4      	adds	r4, r0, #3
 80093fc:	f024 0403 	bic.w	r4, r4, #3
 8009400:	42a0      	cmp	r0, r4
 8009402:	d005      	beq.n	8009410 <_malloc_r+0xa8>
 8009404:	1a21      	subs	r1, r4, r0
 8009406:	4630      	mov	r0, r6
 8009408:	f000 f808 	bl	800941c <_sbrk_r>
 800940c:	3001      	adds	r0, #1
 800940e:	d0cf      	beq.n	80093b0 <_malloc_r+0x48>
 8009410:	6025      	str	r5, [r4, #0]
 8009412:	e7db      	b.n	80093cc <_malloc_r+0x64>
 8009414:	200000a0 	.word	0x200000a0
 8009418:	200000a4 	.word	0x200000a4

0800941c <_sbrk_r>:
 800941c:	b538      	push	{r3, r4, r5, lr}
 800941e:	4c06      	ldr	r4, [pc, #24]	; (8009438 <_sbrk_r+0x1c>)
 8009420:	2300      	movs	r3, #0
 8009422:	4605      	mov	r5, r0
 8009424:	4608      	mov	r0, r1
 8009426:	6023      	str	r3, [r4, #0]
 8009428:	f7f9 fdbc 	bl	8002fa4 <_sbrk>
 800942c:	1c43      	adds	r3, r0, #1
 800942e:	d102      	bne.n	8009436 <_sbrk_r+0x1a>
 8009430:	6823      	ldr	r3, [r4, #0]
 8009432:	b103      	cbz	r3, 8009436 <_sbrk_r+0x1a>
 8009434:	602b      	str	r3, [r5, #0]
 8009436:	bd38      	pop	{r3, r4, r5, pc}
 8009438:	200005a4 	.word	0x200005a4

0800943c <siprintf>:
 800943c:	b40e      	push	{r1, r2, r3}
 800943e:	b500      	push	{lr}
 8009440:	b09c      	sub	sp, #112	; 0x70
 8009442:	ab1d      	add	r3, sp, #116	; 0x74
 8009444:	9002      	str	r0, [sp, #8]
 8009446:	9006      	str	r0, [sp, #24]
 8009448:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800944c:	4809      	ldr	r0, [pc, #36]	; (8009474 <siprintf+0x38>)
 800944e:	9107      	str	r1, [sp, #28]
 8009450:	9104      	str	r1, [sp, #16]
 8009452:	4909      	ldr	r1, [pc, #36]	; (8009478 <siprintf+0x3c>)
 8009454:	f853 2b04 	ldr.w	r2, [r3], #4
 8009458:	9105      	str	r1, [sp, #20]
 800945a:	6800      	ldr	r0, [r0, #0]
 800945c:	9301      	str	r3, [sp, #4]
 800945e:	a902      	add	r1, sp, #8
 8009460:	f000 f868 	bl	8009534 <_svfiprintf_r>
 8009464:	9b02      	ldr	r3, [sp, #8]
 8009466:	2200      	movs	r2, #0
 8009468:	701a      	strb	r2, [r3, #0]
 800946a:	b01c      	add	sp, #112	; 0x70
 800946c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009470:	b003      	add	sp, #12
 8009472:	4770      	bx	lr
 8009474:	20000014 	.word	0x20000014
 8009478:	ffff0208 	.word	0xffff0208

0800947c <__malloc_lock>:
 800947c:	4770      	bx	lr

0800947e <__malloc_unlock>:
 800947e:	4770      	bx	lr

08009480 <__ssputs_r>:
 8009480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009484:	688e      	ldr	r6, [r1, #8]
 8009486:	429e      	cmp	r6, r3
 8009488:	4682      	mov	sl, r0
 800948a:	460c      	mov	r4, r1
 800948c:	4690      	mov	r8, r2
 800948e:	4699      	mov	r9, r3
 8009490:	d837      	bhi.n	8009502 <__ssputs_r+0x82>
 8009492:	898a      	ldrh	r2, [r1, #12]
 8009494:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009498:	d031      	beq.n	80094fe <__ssputs_r+0x7e>
 800949a:	6825      	ldr	r5, [r4, #0]
 800949c:	6909      	ldr	r1, [r1, #16]
 800949e:	1a6f      	subs	r7, r5, r1
 80094a0:	6965      	ldr	r5, [r4, #20]
 80094a2:	2302      	movs	r3, #2
 80094a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094a8:	fb95 f5f3 	sdiv	r5, r5, r3
 80094ac:	f109 0301 	add.w	r3, r9, #1
 80094b0:	443b      	add	r3, r7
 80094b2:	429d      	cmp	r5, r3
 80094b4:	bf38      	it	cc
 80094b6:	461d      	movcc	r5, r3
 80094b8:	0553      	lsls	r3, r2, #21
 80094ba:	d530      	bpl.n	800951e <__ssputs_r+0x9e>
 80094bc:	4629      	mov	r1, r5
 80094be:	f7ff ff53 	bl	8009368 <_malloc_r>
 80094c2:	4606      	mov	r6, r0
 80094c4:	b950      	cbnz	r0, 80094dc <__ssputs_r+0x5c>
 80094c6:	230c      	movs	r3, #12
 80094c8:	f8ca 3000 	str.w	r3, [sl]
 80094cc:	89a3      	ldrh	r3, [r4, #12]
 80094ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094d2:	81a3      	strh	r3, [r4, #12]
 80094d4:	f04f 30ff 	mov.w	r0, #4294967295
 80094d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094dc:	463a      	mov	r2, r7
 80094de:	6921      	ldr	r1, [r4, #16]
 80094e0:	f7ff fee0 	bl	80092a4 <memcpy>
 80094e4:	89a3      	ldrh	r3, [r4, #12]
 80094e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80094ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094ee:	81a3      	strh	r3, [r4, #12]
 80094f0:	6126      	str	r6, [r4, #16]
 80094f2:	6165      	str	r5, [r4, #20]
 80094f4:	443e      	add	r6, r7
 80094f6:	1bed      	subs	r5, r5, r7
 80094f8:	6026      	str	r6, [r4, #0]
 80094fa:	60a5      	str	r5, [r4, #8]
 80094fc:	464e      	mov	r6, r9
 80094fe:	454e      	cmp	r6, r9
 8009500:	d900      	bls.n	8009504 <__ssputs_r+0x84>
 8009502:	464e      	mov	r6, r9
 8009504:	4632      	mov	r2, r6
 8009506:	4641      	mov	r1, r8
 8009508:	6820      	ldr	r0, [r4, #0]
 800950a:	f000 fa93 	bl	8009a34 <memmove>
 800950e:	68a3      	ldr	r3, [r4, #8]
 8009510:	1b9b      	subs	r3, r3, r6
 8009512:	60a3      	str	r3, [r4, #8]
 8009514:	6823      	ldr	r3, [r4, #0]
 8009516:	441e      	add	r6, r3
 8009518:	6026      	str	r6, [r4, #0]
 800951a:	2000      	movs	r0, #0
 800951c:	e7dc      	b.n	80094d8 <__ssputs_r+0x58>
 800951e:	462a      	mov	r2, r5
 8009520:	f000 faa1 	bl	8009a66 <_realloc_r>
 8009524:	4606      	mov	r6, r0
 8009526:	2800      	cmp	r0, #0
 8009528:	d1e2      	bne.n	80094f0 <__ssputs_r+0x70>
 800952a:	6921      	ldr	r1, [r4, #16]
 800952c:	4650      	mov	r0, sl
 800952e:	f7ff fecd 	bl	80092cc <_free_r>
 8009532:	e7c8      	b.n	80094c6 <__ssputs_r+0x46>

08009534 <_svfiprintf_r>:
 8009534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009538:	461d      	mov	r5, r3
 800953a:	898b      	ldrh	r3, [r1, #12]
 800953c:	061f      	lsls	r7, r3, #24
 800953e:	b09d      	sub	sp, #116	; 0x74
 8009540:	4680      	mov	r8, r0
 8009542:	460c      	mov	r4, r1
 8009544:	4616      	mov	r6, r2
 8009546:	d50f      	bpl.n	8009568 <_svfiprintf_r+0x34>
 8009548:	690b      	ldr	r3, [r1, #16]
 800954a:	b96b      	cbnz	r3, 8009568 <_svfiprintf_r+0x34>
 800954c:	2140      	movs	r1, #64	; 0x40
 800954e:	f7ff ff0b 	bl	8009368 <_malloc_r>
 8009552:	6020      	str	r0, [r4, #0]
 8009554:	6120      	str	r0, [r4, #16]
 8009556:	b928      	cbnz	r0, 8009564 <_svfiprintf_r+0x30>
 8009558:	230c      	movs	r3, #12
 800955a:	f8c8 3000 	str.w	r3, [r8]
 800955e:	f04f 30ff 	mov.w	r0, #4294967295
 8009562:	e0c8      	b.n	80096f6 <_svfiprintf_r+0x1c2>
 8009564:	2340      	movs	r3, #64	; 0x40
 8009566:	6163      	str	r3, [r4, #20]
 8009568:	2300      	movs	r3, #0
 800956a:	9309      	str	r3, [sp, #36]	; 0x24
 800956c:	2320      	movs	r3, #32
 800956e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009572:	2330      	movs	r3, #48	; 0x30
 8009574:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009578:	9503      	str	r5, [sp, #12]
 800957a:	f04f 0b01 	mov.w	fp, #1
 800957e:	4637      	mov	r7, r6
 8009580:	463d      	mov	r5, r7
 8009582:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009586:	b10b      	cbz	r3, 800958c <_svfiprintf_r+0x58>
 8009588:	2b25      	cmp	r3, #37	; 0x25
 800958a:	d13e      	bne.n	800960a <_svfiprintf_r+0xd6>
 800958c:	ebb7 0a06 	subs.w	sl, r7, r6
 8009590:	d00b      	beq.n	80095aa <_svfiprintf_r+0x76>
 8009592:	4653      	mov	r3, sl
 8009594:	4632      	mov	r2, r6
 8009596:	4621      	mov	r1, r4
 8009598:	4640      	mov	r0, r8
 800959a:	f7ff ff71 	bl	8009480 <__ssputs_r>
 800959e:	3001      	adds	r0, #1
 80095a0:	f000 80a4 	beq.w	80096ec <_svfiprintf_r+0x1b8>
 80095a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095a6:	4453      	add	r3, sl
 80095a8:	9309      	str	r3, [sp, #36]	; 0x24
 80095aa:	783b      	ldrb	r3, [r7, #0]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f000 809d 	beq.w	80096ec <_svfiprintf_r+0x1b8>
 80095b2:	2300      	movs	r3, #0
 80095b4:	f04f 32ff 	mov.w	r2, #4294967295
 80095b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095bc:	9304      	str	r3, [sp, #16]
 80095be:	9307      	str	r3, [sp, #28]
 80095c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095c4:	931a      	str	r3, [sp, #104]	; 0x68
 80095c6:	462f      	mov	r7, r5
 80095c8:	2205      	movs	r2, #5
 80095ca:	f817 1b01 	ldrb.w	r1, [r7], #1
 80095ce:	4850      	ldr	r0, [pc, #320]	; (8009710 <_svfiprintf_r+0x1dc>)
 80095d0:	f7f6 fe2e 	bl	8000230 <memchr>
 80095d4:	9b04      	ldr	r3, [sp, #16]
 80095d6:	b9d0      	cbnz	r0, 800960e <_svfiprintf_r+0xda>
 80095d8:	06d9      	lsls	r1, r3, #27
 80095da:	bf44      	itt	mi
 80095dc:	2220      	movmi	r2, #32
 80095de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80095e2:	071a      	lsls	r2, r3, #28
 80095e4:	bf44      	itt	mi
 80095e6:	222b      	movmi	r2, #43	; 0x2b
 80095e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80095ec:	782a      	ldrb	r2, [r5, #0]
 80095ee:	2a2a      	cmp	r2, #42	; 0x2a
 80095f0:	d015      	beq.n	800961e <_svfiprintf_r+0xea>
 80095f2:	9a07      	ldr	r2, [sp, #28]
 80095f4:	462f      	mov	r7, r5
 80095f6:	2000      	movs	r0, #0
 80095f8:	250a      	movs	r5, #10
 80095fa:	4639      	mov	r1, r7
 80095fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009600:	3b30      	subs	r3, #48	; 0x30
 8009602:	2b09      	cmp	r3, #9
 8009604:	d94d      	bls.n	80096a2 <_svfiprintf_r+0x16e>
 8009606:	b1b8      	cbz	r0, 8009638 <_svfiprintf_r+0x104>
 8009608:	e00f      	b.n	800962a <_svfiprintf_r+0xf6>
 800960a:	462f      	mov	r7, r5
 800960c:	e7b8      	b.n	8009580 <_svfiprintf_r+0x4c>
 800960e:	4a40      	ldr	r2, [pc, #256]	; (8009710 <_svfiprintf_r+0x1dc>)
 8009610:	1a80      	subs	r0, r0, r2
 8009612:	fa0b f000 	lsl.w	r0, fp, r0
 8009616:	4318      	orrs	r0, r3
 8009618:	9004      	str	r0, [sp, #16]
 800961a:	463d      	mov	r5, r7
 800961c:	e7d3      	b.n	80095c6 <_svfiprintf_r+0x92>
 800961e:	9a03      	ldr	r2, [sp, #12]
 8009620:	1d11      	adds	r1, r2, #4
 8009622:	6812      	ldr	r2, [r2, #0]
 8009624:	9103      	str	r1, [sp, #12]
 8009626:	2a00      	cmp	r2, #0
 8009628:	db01      	blt.n	800962e <_svfiprintf_r+0xfa>
 800962a:	9207      	str	r2, [sp, #28]
 800962c:	e004      	b.n	8009638 <_svfiprintf_r+0x104>
 800962e:	4252      	negs	r2, r2
 8009630:	f043 0302 	orr.w	r3, r3, #2
 8009634:	9207      	str	r2, [sp, #28]
 8009636:	9304      	str	r3, [sp, #16]
 8009638:	783b      	ldrb	r3, [r7, #0]
 800963a:	2b2e      	cmp	r3, #46	; 0x2e
 800963c:	d10c      	bne.n	8009658 <_svfiprintf_r+0x124>
 800963e:	787b      	ldrb	r3, [r7, #1]
 8009640:	2b2a      	cmp	r3, #42	; 0x2a
 8009642:	d133      	bne.n	80096ac <_svfiprintf_r+0x178>
 8009644:	9b03      	ldr	r3, [sp, #12]
 8009646:	1d1a      	adds	r2, r3, #4
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	9203      	str	r2, [sp, #12]
 800964c:	2b00      	cmp	r3, #0
 800964e:	bfb8      	it	lt
 8009650:	f04f 33ff 	movlt.w	r3, #4294967295
 8009654:	3702      	adds	r7, #2
 8009656:	9305      	str	r3, [sp, #20]
 8009658:	4d2e      	ldr	r5, [pc, #184]	; (8009714 <_svfiprintf_r+0x1e0>)
 800965a:	7839      	ldrb	r1, [r7, #0]
 800965c:	2203      	movs	r2, #3
 800965e:	4628      	mov	r0, r5
 8009660:	f7f6 fde6 	bl	8000230 <memchr>
 8009664:	b138      	cbz	r0, 8009676 <_svfiprintf_r+0x142>
 8009666:	2340      	movs	r3, #64	; 0x40
 8009668:	1b40      	subs	r0, r0, r5
 800966a:	fa03 f000 	lsl.w	r0, r3, r0
 800966e:	9b04      	ldr	r3, [sp, #16]
 8009670:	4303      	orrs	r3, r0
 8009672:	3701      	adds	r7, #1
 8009674:	9304      	str	r3, [sp, #16]
 8009676:	7839      	ldrb	r1, [r7, #0]
 8009678:	4827      	ldr	r0, [pc, #156]	; (8009718 <_svfiprintf_r+0x1e4>)
 800967a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800967e:	2206      	movs	r2, #6
 8009680:	1c7e      	adds	r6, r7, #1
 8009682:	f7f6 fdd5 	bl	8000230 <memchr>
 8009686:	2800      	cmp	r0, #0
 8009688:	d038      	beq.n	80096fc <_svfiprintf_r+0x1c8>
 800968a:	4b24      	ldr	r3, [pc, #144]	; (800971c <_svfiprintf_r+0x1e8>)
 800968c:	bb13      	cbnz	r3, 80096d4 <_svfiprintf_r+0x1a0>
 800968e:	9b03      	ldr	r3, [sp, #12]
 8009690:	3307      	adds	r3, #7
 8009692:	f023 0307 	bic.w	r3, r3, #7
 8009696:	3308      	adds	r3, #8
 8009698:	9303      	str	r3, [sp, #12]
 800969a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800969c:	444b      	add	r3, r9
 800969e:	9309      	str	r3, [sp, #36]	; 0x24
 80096a0:	e76d      	b.n	800957e <_svfiprintf_r+0x4a>
 80096a2:	fb05 3202 	mla	r2, r5, r2, r3
 80096a6:	2001      	movs	r0, #1
 80096a8:	460f      	mov	r7, r1
 80096aa:	e7a6      	b.n	80095fa <_svfiprintf_r+0xc6>
 80096ac:	2300      	movs	r3, #0
 80096ae:	3701      	adds	r7, #1
 80096b0:	9305      	str	r3, [sp, #20]
 80096b2:	4619      	mov	r1, r3
 80096b4:	250a      	movs	r5, #10
 80096b6:	4638      	mov	r0, r7
 80096b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096bc:	3a30      	subs	r2, #48	; 0x30
 80096be:	2a09      	cmp	r2, #9
 80096c0:	d903      	bls.n	80096ca <_svfiprintf_r+0x196>
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d0c8      	beq.n	8009658 <_svfiprintf_r+0x124>
 80096c6:	9105      	str	r1, [sp, #20]
 80096c8:	e7c6      	b.n	8009658 <_svfiprintf_r+0x124>
 80096ca:	fb05 2101 	mla	r1, r5, r1, r2
 80096ce:	2301      	movs	r3, #1
 80096d0:	4607      	mov	r7, r0
 80096d2:	e7f0      	b.n	80096b6 <_svfiprintf_r+0x182>
 80096d4:	ab03      	add	r3, sp, #12
 80096d6:	9300      	str	r3, [sp, #0]
 80096d8:	4622      	mov	r2, r4
 80096da:	4b11      	ldr	r3, [pc, #68]	; (8009720 <_svfiprintf_r+0x1ec>)
 80096dc:	a904      	add	r1, sp, #16
 80096de:	4640      	mov	r0, r8
 80096e0:	f3af 8000 	nop.w
 80096e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80096e8:	4681      	mov	r9, r0
 80096ea:	d1d6      	bne.n	800969a <_svfiprintf_r+0x166>
 80096ec:	89a3      	ldrh	r3, [r4, #12]
 80096ee:	065b      	lsls	r3, r3, #25
 80096f0:	f53f af35 	bmi.w	800955e <_svfiprintf_r+0x2a>
 80096f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096f6:	b01d      	add	sp, #116	; 0x74
 80096f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096fc:	ab03      	add	r3, sp, #12
 80096fe:	9300      	str	r3, [sp, #0]
 8009700:	4622      	mov	r2, r4
 8009702:	4b07      	ldr	r3, [pc, #28]	; (8009720 <_svfiprintf_r+0x1ec>)
 8009704:	a904      	add	r1, sp, #16
 8009706:	4640      	mov	r0, r8
 8009708:	f000 f882 	bl	8009810 <_printf_i>
 800970c:	e7ea      	b.n	80096e4 <_svfiprintf_r+0x1b0>
 800970e:	bf00      	nop
 8009710:	08009b14 	.word	0x08009b14
 8009714:	08009b1a 	.word	0x08009b1a
 8009718:	08009b1e 	.word	0x08009b1e
 800971c:	00000000 	.word	0x00000000
 8009720:	08009481 	.word	0x08009481

08009724 <_printf_common>:
 8009724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009728:	4691      	mov	r9, r2
 800972a:	461f      	mov	r7, r3
 800972c:	688a      	ldr	r2, [r1, #8]
 800972e:	690b      	ldr	r3, [r1, #16]
 8009730:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009734:	4293      	cmp	r3, r2
 8009736:	bfb8      	it	lt
 8009738:	4613      	movlt	r3, r2
 800973a:	f8c9 3000 	str.w	r3, [r9]
 800973e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009742:	4606      	mov	r6, r0
 8009744:	460c      	mov	r4, r1
 8009746:	b112      	cbz	r2, 800974e <_printf_common+0x2a>
 8009748:	3301      	adds	r3, #1
 800974a:	f8c9 3000 	str.w	r3, [r9]
 800974e:	6823      	ldr	r3, [r4, #0]
 8009750:	0699      	lsls	r1, r3, #26
 8009752:	bf42      	ittt	mi
 8009754:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009758:	3302      	addmi	r3, #2
 800975a:	f8c9 3000 	strmi.w	r3, [r9]
 800975e:	6825      	ldr	r5, [r4, #0]
 8009760:	f015 0506 	ands.w	r5, r5, #6
 8009764:	d107      	bne.n	8009776 <_printf_common+0x52>
 8009766:	f104 0a19 	add.w	sl, r4, #25
 800976a:	68e3      	ldr	r3, [r4, #12]
 800976c:	f8d9 2000 	ldr.w	r2, [r9]
 8009770:	1a9b      	subs	r3, r3, r2
 8009772:	42ab      	cmp	r3, r5
 8009774:	dc28      	bgt.n	80097c8 <_printf_common+0xa4>
 8009776:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800977a:	6822      	ldr	r2, [r4, #0]
 800977c:	3300      	adds	r3, #0
 800977e:	bf18      	it	ne
 8009780:	2301      	movne	r3, #1
 8009782:	0692      	lsls	r2, r2, #26
 8009784:	d42d      	bmi.n	80097e2 <_printf_common+0xbe>
 8009786:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800978a:	4639      	mov	r1, r7
 800978c:	4630      	mov	r0, r6
 800978e:	47c0      	blx	r8
 8009790:	3001      	adds	r0, #1
 8009792:	d020      	beq.n	80097d6 <_printf_common+0xb2>
 8009794:	6823      	ldr	r3, [r4, #0]
 8009796:	68e5      	ldr	r5, [r4, #12]
 8009798:	f8d9 2000 	ldr.w	r2, [r9]
 800979c:	f003 0306 	and.w	r3, r3, #6
 80097a0:	2b04      	cmp	r3, #4
 80097a2:	bf08      	it	eq
 80097a4:	1aad      	subeq	r5, r5, r2
 80097a6:	68a3      	ldr	r3, [r4, #8]
 80097a8:	6922      	ldr	r2, [r4, #16]
 80097aa:	bf0c      	ite	eq
 80097ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097b0:	2500      	movne	r5, #0
 80097b2:	4293      	cmp	r3, r2
 80097b4:	bfc4      	itt	gt
 80097b6:	1a9b      	subgt	r3, r3, r2
 80097b8:	18ed      	addgt	r5, r5, r3
 80097ba:	f04f 0900 	mov.w	r9, #0
 80097be:	341a      	adds	r4, #26
 80097c0:	454d      	cmp	r5, r9
 80097c2:	d11a      	bne.n	80097fa <_printf_common+0xd6>
 80097c4:	2000      	movs	r0, #0
 80097c6:	e008      	b.n	80097da <_printf_common+0xb6>
 80097c8:	2301      	movs	r3, #1
 80097ca:	4652      	mov	r2, sl
 80097cc:	4639      	mov	r1, r7
 80097ce:	4630      	mov	r0, r6
 80097d0:	47c0      	blx	r8
 80097d2:	3001      	adds	r0, #1
 80097d4:	d103      	bne.n	80097de <_printf_common+0xba>
 80097d6:	f04f 30ff 	mov.w	r0, #4294967295
 80097da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097de:	3501      	adds	r5, #1
 80097e0:	e7c3      	b.n	800976a <_printf_common+0x46>
 80097e2:	18e1      	adds	r1, r4, r3
 80097e4:	1c5a      	adds	r2, r3, #1
 80097e6:	2030      	movs	r0, #48	; 0x30
 80097e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80097ec:	4422      	add	r2, r4
 80097ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80097f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80097f6:	3302      	adds	r3, #2
 80097f8:	e7c5      	b.n	8009786 <_printf_common+0x62>
 80097fa:	2301      	movs	r3, #1
 80097fc:	4622      	mov	r2, r4
 80097fe:	4639      	mov	r1, r7
 8009800:	4630      	mov	r0, r6
 8009802:	47c0      	blx	r8
 8009804:	3001      	adds	r0, #1
 8009806:	d0e6      	beq.n	80097d6 <_printf_common+0xb2>
 8009808:	f109 0901 	add.w	r9, r9, #1
 800980c:	e7d8      	b.n	80097c0 <_printf_common+0x9c>
	...

08009810 <_printf_i>:
 8009810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009814:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009818:	460c      	mov	r4, r1
 800981a:	7e09      	ldrb	r1, [r1, #24]
 800981c:	b085      	sub	sp, #20
 800981e:	296e      	cmp	r1, #110	; 0x6e
 8009820:	4617      	mov	r7, r2
 8009822:	4606      	mov	r6, r0
 8009824:	4698      	mov	r8, r3
 8009826:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009828:	f000 80b3 	beq.w	8009992 <_printf_i+0x182>
 800982c:	d822      	bhi.n	8009874 <_printf_i+0x64>
 800982e:	2963      	cmp	r1, #99	; 0x63
 8009830:	d036      	beq.n	80098a0 <_printf_i+0x90>
 8009832:	d80a      	bhi.n	800984a <_printf_i+0x3a>
 8009834:	2900      	cmp	r1, #0
 8009836:	f000 80b9 	beq.w	80099ac <_printf_i+0x19c>
 800983a:	2958      	cmp	r1, #88	; 0x58
 800983c:	f000 8083 	beq.w	8009946 <_printf_i+0x136>
 8009840:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009844:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009848:	e032      	b.n	80098b0 <_printf_i+0xa0>
 800984a:	2964      	cmp	r1, #100	; 0x64
 800984c:	d001      	beq.n	8009852 <_printf_i+0x42>
 800984e:	2969      	cmp	r1, #105	; 0x69
 8009850:	d1f6      	bne.n	8009840 <_printf_i+0x30>
 8009852:	6820      	ldr	r0, [r4, #0]
 8009854:	6813      	ldr	r3, [r2, #0]
 8009856:	0605      	lsls	r5, r0, #24
 8009858:	f103 0104 	add.w	r1, r3, #4
 800985c:	d52a      	bpl.n	80098b4 <_printf_i+0xa4>
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	6011      	str	r1, [r2, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	da03      	bge.n	800986e <_printf_i+0x5e>
 8009866:	222d      	movs	r2, #45	; 0x2d
 8009868:	425b      	negs	r3, r3
 800986a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800986e:	486f      	ldr	r0, [pc, #444]	; (8009a2c <_printf_i+0x21c>)
 8009870:	220a      	movs	r2, #10
 8009872:	e039      	b.n	80098e8 <_printf_i+0xd8>
 8009874:	2973      	cmp	r1, #115	; 0x73
 8009876:	f000 809d 	beq.w	80099b4 <_printf_i+0x1a4>
 800987a:	d808      	bhi.n	800988e <_printf_i+0x7e>
 800987c:	296f      	cmp	r1, #111	; 0x6f
 800987e:	d020      	beq.n	80098c2 <_printf_i+0xb2>
 8009880:	2970      	cmp	r1, #112	; 0x70
 8009882:	d1dd      	bne.n	8009840 <_printf_i+0x30>
 8009884:	6823      	ldr	r3, [r4, #0]
 8009886:	f043 0320 	orr.w	r3, r3, #32
 800988a:	6023      	str	r3, [r4, #0]
 800988c:	e003      	b.n	8009896 <_printf_i+0x86>
 800988e:	2975      	cmp	r1, #117	; 0x75
 8009890:	d017      	beq.n	80098c2 <_printf_i+0xb2>
 8009892:	2978      	cmp	r1, #120	; 0x78
 8009894:	d1d4      	bne.n	8009840 <_printf_i+0x30>
 8009896:	2378      	movs	r3, #120	; 0x78
 8009898:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800989c:	4864      	ldr	r0, [pc, #400]	; (8009a30 <_printf_i+0x220>)
 800989e:	e055      	b.n	800994c <_printf_i+0x13c>
 80098a0:	6813      	ldr	r3, [r2, #0]
 80098a2:	1d19      	adds	r1, r3, #4
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	6011      	str	r1, [r2, #0]
 80098a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098b0:	2301      	movs	r3, #1
 80098b2:	e08c      	b.n	80099ce <_printf_i+0x1be>
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	6011      	str	r1, [r2, #0]
 80098b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80098bc:	bf18      	it	ne
 80098be:	b21b      	sxthne	r3, r3
 80098c0:	e7cf      	b.n	8009862 <_printf_i+0x52>
 80098c2:	6813      	ldr	r3, [r2, #0]
 80098c4:	6825      	ldr	r5, [r4, #0]
 80098c6:	1d18      	adds	r0, r3, #4
 80098c8:	6010      	str	r0, [r2, #0]
 80098ca:	0628      	lsls	r0, r5, #24
 80098cc:	d501      	bpl.n	80098d2 <_printf_i+0xc2>
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	e002      	b.n	80098d8 <_printf_i+0xc8>
 80098d2:	0668      	lsls	r0, r5, #25
 80098d4:	d5fb      	bpl.n	80098ce <_printf_i+0xbe>
 80098d6:	881b      	ldrh	r3, [r3, #0]
 80098d8:	4854      	ldr	r0, [pc, #336]	; (8009a2c <_printf_i+0x21c>)
 80098da:	296f      	cmp	r1, #111	; 0x6f
 80098dc:	bf14      	ite	ne
 80098de:	220a      	movne	r2, #10
 80098e0:	2208      	moveq	r2, #8
 80098e2:	2100      	movs	r1, #0
 80098e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80098e8:	6865      	ldr	r5, [r4, #4]
 80098ea:	60a5      	str	r5, [r4, #8]
 80098ec:	2d00      	cmp	r5, #0
 80098ee:	f2c0 8095 	blt.w	8009a1c <_printf_i+0x20c>
 80098f2:	6821      	ldr	r1, [r4, #0]
 80098f4:	f021 0104 	bic.w	r1, r1, #4
 80098f8:	6021      	str	r1, [r4, #0]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d13d      	bne.n	800997a <_printf_i+0x16a>
 80098fe:	2d00      	cmp	r5, #0
 8009900:	f040 808e 	bne.w	8009a20 <_printf_i+0x210>
 8009904:	4665      	mov	r5, ip
 8009906:	2a08      	cmp	r2, #8
 8009908:	d10b      	bne.n	8009922 <_printf_i+0x112>
 800990a:	6823      	ldr	r3, [r4, #0]
 800990c:	07db      	lsls	r3, r3, #31
 800990e:	d508      	bpl.n	8009922 <_printf_i+0x112>
 8009910:	6923      	ldr	r3, [r4, #16]
 8009912:	6862      	ldr	r2, [r4, #4]
 8009914:	429a      	cmp	r2, r3
 8009916:	bfde      	ittt	le
 8009918:	2330      	movle	r3, #48	; 0x30
 800991a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800991e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009922:	ebac 0305 	sub.w	r3, ip, r5
 8009926:	6123      	str	r3, [r4, #16]
 8009928:	f8cd 8000 	str.w	r8, [sp]
 800992c:	463b      	mov	r3, r7
 800992e:	aa03      	add	r2, sp, #12
 8009930:	4621      	mov	r1, r4
 8009932:	4630      	mov	r0, r6
 8009934:	f7ff fef6 	bl	8009724 <_printf_common>
 8009938:	3001      	adds	r0, #1
 800993a:	d14d      	bne.n	80099d8 <_printf_i+0x1c8>
 800993c:	f04f 30ff 	mov.w	r0, #4294967295
 8009940:	b005      	add	sp, #20
 8009942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009946:	4839      	ldr	r0, [pc, #228]	; (8009a2c <_printf_i+0x21c>)
 8009948:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800994c:	6813      	ldr	r3, [r2, #0]
 800994e:	6821      	ldr	r1, [r4, #0]
 8009950:	1d1d      	adds	r5, r3, #4
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	6015      	str	r5, [r2, #0]
 8009956:	060a      	lsls	r2, r1, #24
 8009958:	d50b      	bpl.n	8009972 <_printf_i+0x162>
 800995a:	07ca      	lsls	r2, r1, #31
 800995c:	bf44      	itt	mi
 800995e:	f041 0120 	orrmi.w	r1, r1, #32
 8009962:	6021      	strmi	r1, [r4, #0]
 8009964:	b91b      	cbnz	r3, 800996e <_printf_i+0x15e>
 8009966:	6822      	ldr	r2, [r4, #0]
 8009968:	f022 0220 	bic.w	r2, r2, #32
 800996c:	6022      	str	r2, [r4, #0]
 800996e:	2210      	movs	r2, #16
 8009970:	e7b7      	b.n	80098e2 <_printf_i+0xd2>
 8009972:	064d      	lsls	r5, r1, #25
 8009974:	bf48      	it	mi
 8009976:	b29b      	uxthmi	r3, r3
 8009978:	e7ef      	b.n	800995a <_printf_i+0x14a>
 800997a:	4665      	mov	r5, ip
 800997c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009980:	fb02 3311 	mls	r3, r2, r1, r3
 8009984:	5cc3      	ldrb	r3, [r0, r3]
 8009986:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800998a:	460b      	mov	r3, r1
 800998c:	2900      	cmp	r1, #0
 800998e:	d1f5      	bne.n	800997c <_printf_i+0x16c>
 8009990:	e7b9      	b.n	8009906 <_printf_i+0xf6>
 8009992:	6813      	ldr	r3, [r2, #0]
 8009994:	6825      	ldr	r5, [r4, #0]
 8009996:	6961      	ldr	r1, [r4, #20]
 8009998:	1d18      	adds	r0, r3, #4
 800999a:	6010      	str	r0, [r2, #0]
 800999c:	0628      	lsls	r0, r5, #24
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	d501      	bpl.n	80099a6 <_printf_i+0x196>
 80099a2:	6019      	str	r1, [r3, #0]
 80099a4:	e002      	b.n	80099ac <_printf_i+0x19c>
 80099a6:	066a      	lsls	r2, r5, #25
 80099a8:	d5fb      	bpl.n	80099a2 <_printf_i+0x192>
 80099aa:	8019      	strh	r1, [r3, #0]
 80099ac:	2300      	movs	r3, #0
 80099ae:	6123      	str	r3, [r4, #16]
 80099b0:	4665      	mov	r5, ip
 80099b2:	e7b9      	b.n	8009928 <_printf_i+0x118>
 80099b4:	6813      	ldr	r3, [r2, #0]
 80099b6:	1d19      	adds	r1, r3, #4
 80099b8:	6011      	str	r1, [r2, #0]
 80099ba:	681d      	ldr	r5, [r3, #0]
 80099bc:	6862      	ldr	r2, [r4, #4]
 80099be:	2100      	movs	r1, #0
 80099c0:	4628      	mov	r0, r5
 80099c2:	f7f6 fc35 	bl	8000230 <memchr>
 80099c6:	b108      	cbz	r0, 80099cc <_printf_i+0x1bc>
 80099c8:	1b40      	subs	r0, r0, r5
 80099ca:	6060      	str	r0, [r4, #4]
 80099cc:	6863      	ldr	r3, [r4, #4]
 80099ce:	6123      	str	r3, [r4, #16]
 80099d0:	2300      	movs	r3, #0
 80099d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099d6:	e7a7      	b.n	8009928 <_printf_i+0x118>
 80099d8:	6923      	ldr	r3, [r4, #16]
 80099da:	462a      	mov	r2, r5
 80099dc:	4639      	mov	r1, r7
 80099de:	4630      	mov	r0, r6
 80099e0:	47c0      	blx	r8
 80099e2:	3001      	adds	r0, #1
 80099e4:	d0aa      	beq.n	800993c <_printf_i+0x12c>
 80099e6:	6823      	ldr	r3, [r4, #0]
 80099e8:	079b      	lsls	r3, r3, #30
 80099ea:	d413      	bmi.n	8009a14 <_printf_i+0x204>
 80099ec:	68e0      	ldr	r0, [r4, #12]
 80099ee:	9b03      	ldr	r3, [sp, #12]
 80099f0:	4298      	cmp	r0, r3
 80099f2:	bfb8      	it	lt
 80099f4:	4618      	movlt	r0, r3
 80099f6:	e7a3      	b.n	8009940 <_printf_i+0x130>
 80099f8:	2301      	movs	r3, #1
 80099fa:	464a      	mov	r2, r9
 80099fc:	4639      	mov	r1, r7
 80099fe:	4630      	mov	r0, r6
 8009a00:	47c0      	blx	r8
 8009a02:	3001      	adds	r0, #1
 8009a04:	d09a      	beq.n	800993c <_printf_i+0x12c>
 8009a06:	3501      	adds	r5, #1
 8009a08:	68e3      	ldr	r3, [r4, #12]
 8009a0a:	9a03      	ldr	r2, [sp, #12]
 8009a0c:	1a9b      	subs	r3, r3, r2
 8009a0e:	42ab      	cmp	r3, r5
 8009a10:	dcf2      	bgt.n	80099f8 <_printf_i+0x1e8>
 8009a12:	e7eb      	b.n	80099ec <_printf_i+0x1dc>
 8009a14:	2500      	movs	r5, #0
 8009a16:	f104 0919 	add.w	r9, r4, #25
 8009a1a:	e7f5      	b.n	8009a08 <_printf_i+0x1f8>
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d1ac      	bne.n	800997a <_printf_i+0x16a>
 8009a20:	7803      	ldrb	r3, [r0, #0]
 8009a22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a26:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a2a:	e76c      	b.n	8009906 <_printf_i+0xf6>
 8009a2c:	08009b25 	.word	0x08009b25
 8009a30:	08009b36 	.word	0x08009b36

08009a34 <memmove>:
 8009a34:	4288      	cmp	r0, r1
 8009a36:	b510      	push	{r4, lr}
 8009a38:	eb01 0302 	add.w	r3, r1, r2
 8009a3c:	d807      	bhi.n	8009a4e <memmove+0x1a>
 8009a3e:	1e42      	subs	r2, r0, #1
 8009a40:	4299      	cmp	r1, r3
 8009a42:	d00a      	beq.n	8009a5a <memmove+0x26>
 8009a44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a48:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009a4c:	e7f8      	b.n	8009a40 <memmove+0xc>
 8009a4e:	4283      	cmp	r3, r0
 8009a50:	d9f5      	bls.n	8009a3e <memmove+0xa>
 8009a52:	1881      	adds	r1, r0, r2
 8009a54:	1ad2      	subs	r2, r2, r3
 8009a56:	42d3      	cmn	r3, r2
 8009a58:	d100      	bne.n	8009a5c <memmove+0x28>
 8009a5a:	bd10      	pop	{r4, pc}
 8009a5c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a60:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009a64:	e7f7      	b.n	8009a56 <memmove+0x22>

08009a66 <_realloc_r>:
 8009a66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a68:	4607      	mov	r7, r0
 8009a6a:	4614      	mov	r4, r2
 8009a6c:	460e      	mov	r6, r1
 8009a6e:	b921      	cbnz	r1, 8009a7a <_realloc_r+0x14>
 8009a70:	4611      	mov	r1, r2
 8009a72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009a76:	f7ff bc77 	b.w	8009368 <_malloc_r>
 8009a7a:	b922      	cbnz	r2, 8009a86 <_realloc_r+0x20>
 8009a7c:	f7ff fc26 	bl	80092cc <_free_r>
 8009a80:	4625      	mov	r5, r4
 8009a82:	4628      	mov	r0, r5
 8009a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a86:	f000 f814 	bl	8009ab2 <_malloc_usable_size_r>
 8009a8a:	42a0      	cmp	r0, r4
 8009a8c:	d20f      	bcs.n	8009aae <_realloc_r+0x48>
 8009a8e:	4621      	mov	r1, r4
 8009a90:	4638      	mov	r0, r7
 8009a92:	f7ff fc69 	bl	8009368 <_malloc_r>
 8009a96:	4605      	mov	r5, r0
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	d0f2      	beq.n	8009a82 <_realloc_r+0x1c>
 8009a9c:	4631      	mov	r1, r6
 8009a9e:	4622      	mov	r2, r4
 8009aa0:	f7ff fc00 	bl	80092a4 <memcpy>
 8009aa4:	4631      	mov	r1, r6
 8009aa6:	4638      	mov	r0, r7
 8009aa8:	f7ff fc10 	bl	80092cc <_free_r>
 8009aac:	e7e9      	b.n	8009a82 <_realloc_r+0x1c>
 8009aae:	4635      	mov	r5, r6
 8009ab0:	e7e7      	b.n	8009a82 <_realloc_r+0x1c>

08009ab2 <_malloc_usable_size_r>:
 8009ab2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ab6:	1f18      	subs	r0, r3, #4
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	bfbc      	itt	lt
 8009abc:	580b      	ldrlt	r3, [r1, r0]
 8009abe:	18c0      	addlt	r0, r0, r3
 8009ac0:	4770      	bx	lr
	...

08009ac4 <_init>:
 8009ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac6:	bf00      	nop
 8009ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aca:	bc08      	pop	{r3}
 8009acc:	469e      	mov	lr, r3
 8009ace:	4770      	bx	lr

08009ad0 <_fini>:
 8009ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad2:	bf00      	nop
 8009ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ad6:	bc08      	pop	{r3}
 8009ad8:	469e      	mov	lr, r3
 8009ada:	4770      	bx	lr
