
stm32f7-drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005768  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005948  08005948  00015948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005968  08005968  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08005968  08005968  00015968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005970  08005970  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005970  08005970  00015970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005974  08005974  00015974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08005978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000724  20000084  080059fc  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a8  080059fc  000207a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b1e  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b1d  00000000  00000000  00033bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001220  00000000  00000000  000366f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010b8  00000000  00000000  00037910  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002433c  00000000  00000000  000389c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ef2c  00000000  00000000  0005cd04  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e174d  00000000  00000000  0006bc30  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014d37d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d18  00000000  00000000  0014d3f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000084 	.word	0x20000084
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005930 	.word	0x08005930

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000088 	.word	0x20000088
 800021c:	08005930 	.word	0x08005930

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <ADC_INIT>:
/* Function Summary: The input from the ADC handler will be piped directly to the inputVar via DMA.
 * Parameters: hadc - ADC handler for particular ADC pin. inputVar - Variable you want ADC values stored into.
 */

void ADC_INIT(ADC_HandleTypeDef* hadc, uint32_t* inputVar)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc, inputVar, sizeof(*inputVar));
 800052a:	2204      	movs	r2, #4
 800052c:	6839      	ldr	r1, [r7, #0]
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f001 f962 	bl	80017f8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start(hadc);
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f001 f89f 	bl	8001678 <HAL_ADC_Start>
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <ESC_INIT_CONTROLLER>:
#if defined(DSHOT150) || defined(DSHOT300) || defined(DSHOT600) || defined(DSHOT1200)

#define __DSHOT_SEND_BIT(__ESC__, __BIT__) ((__ESC__)->Throttle = (((__BIT__ & 0b1) == 0b1) ? DSHOT_HIGH_BIT : DSHOT_LOW_BIT))

ESC_CONTROLLER* ESC_INIT_CONTROLLER(TIM_HandleTypeDef* timer, DMA_HandleTypeDef* hdmaArray[])
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b084      	sub	sp, #16
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
 800054a:	6039      	str	r1, [r7, #0]
	ESC_CONTROLLER* ESC_CONTROLLER = malloc(sizeof(ESC_CONTROLLER) * ESC_COUNT);
 800054c:	2010      	movs	r0, #16
 800054e:	f005 f973 	bl	8005838 <malloc>
 8000552:	4603      	mov	r3, r0
 8000554:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < ESC_COUNT; i++)
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	e05f      	b.n	800061c <ESC_INIT_CONTROLLER+0xda>
	{
		ESC_CONTROLLER[i].Throttle = 0;
 800055c:	68fa      	ldr	r2, [r7, #12]
 800055e:	4613      	mov	r3, r2
 8000560:	009b      	lsls	r3, r3, #2
 8000562:	4413      	add	r3, r2
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	461a      	mov	r2, r3
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	4413      	add	r3, r2
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
		ESC_CONTROLLER[i].Channel = 4*i;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	0099      	lsls	r1, r3, #2
 8000574:	68fa      	ldr	r2, [r7, #12]
 8000576:	4613      	mov	r3, r2
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	4413      	add	r3, r2
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	461a      	mov	r2, r3
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	4413      	add	r3, r2
 8000584:	460a      	mov	r2, r1
 8000586:	605a      	str	r2, [r3, #4]
		ESC_CONTROLLER[i].Number = i;
 8000588:	68fa      	ldr	r2, [r7, #12]
 800058a:	4613      	mov	r3, r2
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	4413      	add	r3, r2
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	461a      	mov	r2, r3
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	4413      	add	r3, r2
 8000598:	68fa      	ldr	r2, [r7, #12]
 800059a:	609a      	str	r2, [r3, #8]
		ESC_CONTROLLER[i].Timer = timer;
 800059c:	68fa      	ldr	r2, [r7, #12]
 800059e:	4613      	mov	r3, r2
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	4413      	add	r3, r2
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	461a      	mov	r2, r3
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	4413      	add	r3, r2
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	60da      	str	r2, [r3, #12]
		ESC_CONTROLLER[i].Dma = hdmaArray[i];
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	683a      	ldr	r2, [r7, #0]
 80005b6:	18d1      	adds	r1, r2, r3
 80005b8:	68fa      	ldr	r2, [r7, #12]
 80005ba:	4613      	mov	r3, r2
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	4413      	add	r3, r2
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	461a      	mov	r2, r3
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	4413      	add	r3, r2
 80005c8:	680a      	ldr	r2, [r1, #0]
 80005ca:	611a      	str	r2, [r3, #16]
		HAL_DMA_Start(hdmaArray[i], (uint32_t) &ESC_CONTROLLER[i].Throttle, (uint32_t) &timer->Instance->CCR1 + (4*i), sizeof(ESC_CONTROLLER[i].Throttle));
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	683a      	ldr	r2, [r7, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	6818      	ldr	r0, [r3, #0]
 80005d6:	68fa      	ldr	r2, [r7, #12]
 80005d8:	4613      	mov	r3, r2
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	4413      	add	r3, r2
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	461a      	mov	r2, r3
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	4413      	add	r3, r2
 80005e6:	4619      	mov	r1, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3334      	adds	r3, #52	; 0x34
 80005ee:	461a      	mov	r2, r3
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	441a      	add	r2, r3
 80005f6:	2304      	movs	r3, #4
 80005f8:	f001 fe7c 	bl	80022f4 <HAL_DMA_Start>
		HAL_TIM_PWM_Start(timer, ESC_CONTROLLER[i].Channel);
 80005fc:	68fa      	ldr	r2, [r7, #12]
 80005fe:	4613      	mov	r3, r2
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	4413      	add	r3, r2
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	461a      	mov	r2, r3
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	4413      	add	r3, r2
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	4619      	mov	r1, r3
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f003 fcdf 	bl	8003fd4 <HAL_TIM_PWM_Start>
	for (int i = 0; i < ESC_COUNT; i++)
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	3301      	adds	r3, #1
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	2b03      	cmp	r3, #3
 8000620:	dd9c      	ble.n	800055c <ESC_INIT_CONTROLLER+0x1a>
	}
	return ESC_CONTROLLER;
 8000622:	68bb      	ldr	r3, [r7, #8]
}
 8000624:	4618      	mov	r0, r3
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <ESC_UPDATE_THROTTLE>:

void ESC_UPDATE_THROTTLE(ESC_CONTROLLER* ESC, uint32_t throttle)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
	if (throttle > 2048) throttle = 2047;											// Throttle cannot exceed 11 bits, so max value is 2047
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800063c:	d902      	bls.n	8000644 <ESC_UPDATE_THROTTLE+0x18>
 800063e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000642:	603b      	str	r3, [r7, #0]
	uint8_t telemtry =0b0;															// Updating only throttle value, so telemtry is 0
 8000644:	2300      	movs	r3, #0
 8000646:	73fb      	strb	r3, [r7, #15]
	uint8_t checksum = 0b0000;														// Updating only throttle value, so checksum is 0
 8000648:	2300      	movs	r3, #0
 800064a:	77fb      	strb	r3, [r7, #31]
	for (int checksumBits = 0; checksumBits < 4; checksumBits++)
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]
 8000650:	e04f      	b.n	80006f2 <ESC_UPDATE_THROTTLE+0xc6>
		{
			__DSHOT_SEND_BIT(ESC, checksum);
 8000652:	7ffb      	ldrb	r3, [r7, #31]
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d002      	beq.n	8000662 <ESC_UPDATE_THROTTLE+0x36>
 800065c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000660:	e001      	b.n	8000666 <ESC_UPDATE_THROTTLE+0x3a>
 8000662:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	601a      	str	r2, [r3, #0]
			checksum = checksum >> 1;
 800066a:	7ffb      	ldrb	r3, [r7, #31]
 800066c:	085b      	lsrs	r3, r3, #1
 800066e:	77fb      	strb	r3, [r7, #31]
			__HAL_DMA_CLEAR_FLAG(ESC->Dma, DMA_FLAG_TCIF0_4 | DMA_FLAG_HTIF0_4 |
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	691b      	ldr	r3, [r3, #16]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	461a      	mov	r2, r3
 8000678:	4b86      	ldr	r3, [pc, #536]	; (8000894 <ESC_UPDATE_THROTTLE+0x268>)
 800067a:	429a      	cmp	r2, r3
 800067c:	d903      	bls.n	8000686 <ESC_UPDATE_THROTTLE+0x5a>
 800067e:	4b86      	ldr	r3, [pc, #536]	; (8000898 <ESC_UPDATE_THROTTLE+0x26c>)
 8000680:	4a86      	ldr	r2, [pc, #536]	; (800089c <ESC_UPDATE_THROTTLE+0x270>)
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	e018      	b.n	80006b8 <ESC_UPDATE_THROTTLE+0x8c>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	691b      	ldr	r3, [r3, #16]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	461a      	mov	r2, r3
 800068e:	4b84      	ldr	r3, [pc, #528]	; (80008a0 <ESC_UPDATE_THROTTLE+0x274>)
 8000690:	429a      	cmp	r2, r3
 8000692:	d903      	bls.n	800069c <ESC_UPDATE_THROTTLE+0x70>
 8000694:	4b80      	ldr	r3, [pc, #512]	; (8000898 <ESC_UPDATE_THROTTLE+0x26c>)
 8000696:	4a81      	ldr	r2, [pc, #516]	; (800089c <ESC_UPDATE_THROTTLE+0x270>)
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	e00d      	b.n	80006b8 <ESC_UPDATE_THROTTLE+0x8c>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	461a      	mov	r2, r3
 80006a4:	4b7f      	ldr	r3, [pc, #508]	; (80008a4 <ESC_UPDATE_THROTTLE+0x278>)
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d903      	bls.n	80006b2 <ESC_UPDATE_THROTTLE+0x86>
 80006aa:	4b7f      	ldr	r3, [pc, #508]	; (80008a8 <ESC_UPDATE_THROTTLE+0x27c>)
 80006ac:	4a7b      	ldr	r2, [pc, #492]	; (800089c <ESC_UPDATE_THROTTLE+0x270>)
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	e002      	b.n	80006b8 <ESC_UPDATE_THROTTLE+0x8c>
 80006b2:	4b7d      	ldr	r3, [pc, #500]	; (80008a8 <ESC_UPDATE_THROTTLE+0x27c>)
 80006b4:	4a79      	ldr	r2, [pc, #484]	; (800089c <ESC_UPDATE_THROTTLE+0x270>)
 80006b6:	609a      	str	r2, [r3, #8]
										   DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 |
										   DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 |
										   DMA_FLAG_TCIF3_7 | DMA_FLAG_HTIF3_7);	// Clear transfer and half transfer complete flags
			__HAL_DMA_SET_COUNTER(ESC->Dma, sizeof(ESC->Throttle));
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	691b      	ldr	r3, [r3, #16]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2204      	movs	r2, #4
 80006c0:	605a      	str	r2, [r3, #4]
			__HAL_DMA_ENABLE(ESC->Dma);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	691b      	ldr	r3, [r3, #16]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	691b      	ldr	r3, [r3, #16]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f042 0201 	orr.w	r2, r2, #1
 80006d4:	601a      	str	r2, [r3, #0]
			HAL_TIM_PWM_Start(ESC->Timer, ESC->Channel);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	68da      	ldr	r2, [r3, #12]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	4619      	mov	r1, r3
 80006e0:	4610      	mov	r0, r2
 80006e2:	f003 fc77 	bl	8003fd4 <HAL_TIM_PWM_Start>
			HAL_Delay(1);
 80006e6:	2001      	movs	r0, #1
 80006e8:	f000 ff60 	bl	80015ac <HAL_Delay>
	for (int checksumBits = 0; checksumBits < 4; checksumBits++)
 80006ec:	69bb      	ldr	r3, [r7, #24]
 80006ee:	3301      	adds	r3, #1
 80006f0:	61bb      	str	r3, [r7, #24]
 80006f2:	69bb      	ldr	r3, [r7, #24]
 80006f4:	2b03      	cmp	r3, #3
 80006f6:	ddac      	ble.n	8000652 <ESC_UPDATE_THROTTLE+0x26>
		}
	for (int telemetryBit = 0; telemetryBit < 1; telemetryBit++)
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	e04c      	b.n	8000798 <ESC_UPDATE_THROTTLE+0x16c>
		{
			__DSHOT_SEND_BIT(ESC, telemtry);
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	f003 0301 	and.w	r3, r3, #1
 8000704:	2b00      	cmp	r3, #0
 8000706:	d002      	beq.n	800070e <ESC_UPDATE_THROTTLE+0xe2>
 8000708:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800070c:	e001      	b.n	8000712 <ESC_UPDATE_THROTTLE+0xe6>
 800070e:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	601a      	str	r2, [r3, #0]
			__HAL_DMA_CLEAR_FLAG(ESC->Dma, DMA_FLAG_TCIF0_4 | DMA_FLAG_HTIF0_4 |
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	691b      	ldr	r3, [r3, #16]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	461a      	mov	r2, r3
 800071e:	4b5d      	ldr	r3, [pc, #372]	; (8000894 <ESC_UPDATE_THROTTLE+0x268>)
 8000720:	429a      	cmp	r2, r3
 8000722:	d903      	bls.n	800072c <ESC_UPDATE_THROTTLE+0x100>
 8000724:	4b5c      	ldr	r3, [pc, #368]	; (8000898 <ESC_UPDATE_THROTTLE+0x26c>)
 8000726:	4a5d      	ldr	r2, [pc, #372]	; (800089c <ESC_UPDATE_THROTTLE+0x270>)
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	e018      	b.n	800075e <ESC_UPDATE_THROTTLE+0x132>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	691b      	ldr	r3, [r3, #16]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	461a      	mov	r2, r3
 8000734:	4b5a      	ldr	r3, [pc, #360]	; (80008a0 <ESC_UPDATE_THROTTLE+0x274>)
 8000736:	429a      	cmp	r2, r3
 8000738:	d903      	bls.n	8000742 <ESC_UPDATE_THROTTLE+0x116>
 800073a:	4b57      	ldr	r3, [pc, #348]	; (8000898 <ESC_UPDATE_THROTTLE+0x26c>)
 800073c:	4a57      	ldr	r2, [pc, #348]	; (800089c <ESC_UPDATE_THROTTLE+0x270>)
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	e00d      	b.n	800075e <ESC_UPDATE_THROTTLE+0x132>
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	691b      	ldr	r3, [r3, #16]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	461a      	mov	r2, r3
 800074a:	4b56      	ldr	r3, [pc, #344]	; (80008a4 <ESC_UPDATE_THROTTLE+0x278>)
 800074c:	429a      	cmp	r2, r3
 800074e:	d903      	bls.n	8000758 <ESC_UPDATE_THROTTLE+0x12c>
 8000750:	4b55      	ldr	r3, [pc, #340]	; (80008a8 <ESC_UPDATE_THROTTLE+0x27c>)
 8000752:	4a52      	ldr	r2, [pc, #328]	; (800089c <ESC_UPDATE_THROTTLE+0x270>)
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	e002      	b.n	800075e <ESC_UPDATE_THROTTLE+0x132>
 8000758:	4b53      	ldr	r3, [pc, #332]	; (80008a8 <ESC_UPDATE_THROTTLE+0x27c>)
 800075a:	4a50      	ldr	r2, [pc, #320]	; (800089c <ESC_UPDATE_THROTTLE+0x270>)
 800075c:	609a      	str	r2, [r3, #8]
										   DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 |
										   DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 |
										   DMA_FLAG_TCIF3_7 | DMA_FLAG_HTIF3_7);	// Clear transfer and half transfer complete flags
			__HAL_DMA_SET_COUNTER(ESC->Dma, sizeof(ESC->Throttle));
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	691b      	ldr	r3, [r3, #16]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2204      	movs	r2, #4
 8000766:	605a      	str	r2, [r3, #4]
			__HAL_DMA_ENABLE(ESC->Dma);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	691b      	ldr	r3, [r3, #16]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	691b      	ldr	r3, [r3, #16]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f042 0201 	orr.w	r2, r2, #1
 800077a:	601a      	str	r2, [r3, #0]
			HAL_TIM_PWM_Start(ESC->Timer, ESC->Channel);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	68da      	ldr	r2, [r3, #12]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	4619      	mov	r1, r3
 8000786:	4610      	mov	r0, r2
 8000788:	f003 fc24 	bl	8003fd4 <HAL_TIM_PWM_Start>
			HAL_Delay(1);
 800078c:	2001      	movs	r0, #1
 800078e:	f000 ff0d 	bl	80015ac <HAL_Delay>
	for (int telemetryBit = 0; telemetryBit < 1; telemetryBit++)
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	3301      	adds	r3, #1
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	2b00      	cmp	r3, #0
 800079c:	ddaf      	ble.n	80006fe <ESC_UPDATE_THROTTLE+0xd2>
		}
	for (int throttleBits = 0; throttleBits < 11; throttleBits++)
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	e04f      	b.n	8000844 <ESC_UPDATE_THROTTLE+0x218>
	{
		__DSHOT_SEND_BIT(ESC, throttle);
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d002      	beq.n	80007b4 <ESC_UPDATE_THROTTLE+0x188>
 80007ae:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80007b2:	e001      	b.n	80007b8 <ESC_UPDATE_THROTTLE+0x18c>
 80007b4:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	601a      	str	r2, [r3, #0]
		throttle = throttle >> 1;
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	085b      	lsrs	r3, r3, #1
 80007c0:	603b      	str	r3, [r7, #0]
		__HAL_DMA_CLEAR_FLAG(ESC->Dma, DMA_FLAG_TCIF0_4 | DMA_FLAG_HTIF0_4 |
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	691b      	ldr	r3, [r3, #16]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	461a      	mov	r2, r3
 80007ca:	4b32      	ldr	r3, [pc, #200]	; (8000894 <ESC_UPDATE_THROTTLE+0x268>)
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d903      	bls.n	80007d8 <ESC_UPDATE_THROTTLE+0x1ac>
 80007d0:	4b31      	ldr	r3, [pc, #196]	; (8000898 <ESC_UPDATE_THROTTLE+0x26c>)
 80007d2:	4a32      	ldr	r2, [pc, #200]	; (800089c <ESC_UPDATE_THROTTLE+0x270>)
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	e018      	b.n	800080a <ESC_UPDATE_THROTTLE+0x1de>
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	691b      	ldr	r3, [r3, #16]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	461a      	mov	r2, r3
 80007e0:	4b2f      	ldr	r3, [pc, #188]	; (80008a0 <ESC_UPDATE_THROTTLE+0x274>)
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d903      	bls.n	80007ee <ESC_UPDATE_THROTTLE+0x1c2>
 80007e6:	4b2c      	ldr	r3, [pc, #176]	; (8000898 <ESC_UPDATE_THROTTLE+0x26c>)
 80007e8:	4a2c      	ldr	r2, [pc, #176]	; (800089c <ESC_UPDATE_THROTTLE+0x270>)
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	e00d      	b.n	800080a <ESC_UPDATE_THROTTLE+0x1de>
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	691b      	ldr	r3, [r3, #16]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b2b      	ldr	r3, [pc, #172]	; (80008a4 <ESC_UPDATE_THROTTLE+0x278>)
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d903      	bls.n	8000804 <ESC_UPDATE_THROTTLE+0x1d8>
 80007fc:	4b2a      	ldr	r3, [pc, #168]	; (80008a8 <ESC_UPDATE_THROTTLE+0x27c>)
 80007fe:	4a27      	ldr	r2, [pc, #156]	; (800089c <ESC_UPDATE_THROTTLE+0x270>)
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	e002      	b.n	800080a <ESC_UPDATE_THROTTLE+0x1de>
 8000804:	4b28      	ldr	r3, [pc, #160]	; (80008a8 <ESC_UPDATE_THROTTLE+0x27c>)
 8000806:	4a25      	ldr	r2, [pc, #148]	; (800089c <ESC_UPDATE_THROTTLE+0x270>)
 8000808:	609a      	str	r2, [r3, #8]
									   DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 |
									   DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 |
									   DMA_FLAG_TCIF3_7 | DMA_FLAG_HTIF3_7);	// Clear transfer and half transfer complete flags
		__HAL_DMA_SET_COUNTER(ESC->Dma, sizeof(ESC->Throttle));
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	691b      	ldr	r3, [r3, #16]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2204      	movs	r2, #4
 8000812:	605a      	str	r2, [r3, #4]
		__HAL_DMA_ENABLE(ESC->Dma);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	691b      	ldr	r3, [r3, #16]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	691b      	ldr	r3, [r3, #16]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f042 0201 	orr.w	r2, r2, #1
 8000826:	601a      	str	r2, [r3, #0]
		HAL_TIM_PWM_Start(ESC->Timer, ESC->Channel);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	68da      	ldr	r2, [r3, #12]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	4619      	mov	r1, r3
 8000832:	4610      	mov	r0, r2
 8000834:	f003 fbce 	bl	8003fd4 <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 8000838:	2001      	movs	r0, #1
 800083a:	f000 feb7 	bl	80015ac <HAL_Delay>
	for (int throttleBits = 0; throttleBits < 11; throttleBits++)
 800083e:	693b      	ldr	r3, [r7, #16]
 8000840:	3301      	adds	r3, #1
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	2b0a      	cmp	r3, #10
 8000848:	ddac      	ble.n	80007a4 <ESC_UPDATE_THROTTLE+0x178>
	}
	// Send 0 for last pwm signal
	ESC->Throttle = 0;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
	__HAL_DMA_CLEAR_FLAG(ESC->Dma, DMA_FLAG_TCIF0_4 | DMA_FLAG_HTIF0_4 |
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	691b      	ldr	r3, [r3, #16]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	461a      	mov	r2, r3
 8000858:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <ESC_UPDATE_THROTTLE+0x268>)
 800085a:	429a      	cmp	r2, r3
 800085c:	d903      	bls.n	8000866 <ESC_UPDATE_THROTTLE+0x23a>
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <ESC_UPDATE_THROTTLE+0x26c>)
 8000860:	4a0e      	ldr	r2, [pc, #56]	; (800089c <ESC_UPDATE_THROTTLE+0x270>)
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	e025      	b.n	80008b2 <ESC_UPDATE_THROTTLE+0x286>
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	691b      	ldr	r3, [r3, #16]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	461a      	mov	r2, r3
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <ESC_UPDATE_THROTTLE+0x274>)
 8000870:	429a      	cmp	r2, r3
 8000872:	d903      	bls.n	800087c <ESC_UPDATE_THROTTLE+0x250>
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <ESC_UPDATE_THROTTLE+0x26c>)
 8000876:	4a09      	ldr	r2, [pc, #36]	; (800089c <ESC_UPDATE_THROTTLE+0x270>)
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	e01a      	b.n	80008b2 <ESC_UPDATE_THROTTLE+0x286>
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	691b      	ldr	r3, [r3, #16]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	461a      	mov	r2, r3
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <ESC_UPDATE_THROTTLE+0x278>)
 8000886:	429a      	cmp	r2, r3
 8000888:	d910      	bls.n	80008ac <ESC_UPDATE_THROTTLE+0x280>
 800088a:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <ESC_UPDATE_THROTTLE+0x27c>)
 800088c:	4a03      	ldr	r2, [pc, #12]	; (800089c <ESC_UPDATE_THROTTLE+0x270>)
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	e00f      	b.n	80008b2 <ESC_UPDATE_THROTTLE+0x286>
 8000892:	bf00      	nop
 8000894:	40026458 	.word	0x40026458
 8000898:	40026400 	.word	0x40026400
 800089c:	0c300c30 	.word	0x0c300c30
 80008a0:	400260b8 	.word	0x400260b8
 80008a4:	40026058 	.word	0x40026058
 80008a8:	40026000 	.word	0x40026000
 80008ac:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <ESC_UPDATE_THROTTLE+0x2c4>)
 80008ae:	4a11      	ldr	r2, [pc, #68]	; (80008f4 <ESC_UPDATE_THROTTLE+0x2c8>)
 80008b0:	609a      	str	r2, [r3, #8]
								   DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 |
								   DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 |
								   DMA_FLAG_TCIF3_7 | DMA_FLAG_HTIF3_7);	// Clear transfer and half transfer complete flags
	__HAL_DMA_SET_COUNTER(ESC->Dma, sizeof(ESC->Throttle));
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	691b      	ldr	r3, [r3, #16]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2204      	movs	r2, #4
 80008ba:	605a      	str	r2, [r3, #4]
	__HAL_DMA_ENABLE(ESC->Dma);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	691b      	ldr	r3, [r3, #16]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	691b      	ldr	r3, [r3, #16]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f042 0201 	orr.w	r2, r2, #1
 80008ce:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(ESC->Timer, ESC->Channel);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	68da      	ldr	r2, [r3, #12]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	4619      	mov	r1, r3
 80008da:	4610      	mov	r0, r2
 80008dc:	f003 fb7a 	bl	8003fd4 <HAL_TIM_PWM_Start>
	HAL_Delay(1);
 80008e0:	2001      	movs	r0, #1
 80008e2:	f000 fe63 	bl	80015ac <HAL_Delay>
}
 80008e6:	bf00      	nop
 80008e8:	3720      	adds	r7, #32
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40026000 	.word	0x40026000
 80008f4:	0c300c30 	.word	0x0c300c30

080008f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fc:	f000 fdf9 	bl	80014f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000900:	f000 f830 	bl	8000964 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000904:	f000 faee 	bl	8000ee4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000908:	f000 f9ee 	bl	8000ce8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800090c:	f000 f98e 	bl	8000c2c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000910:	f000 f9bc 	bl	8000c8c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 8000914:	f000 f90e 	bl	8000b34 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000918:	f000 f8ba 	bl	8000a90 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  ADC_INIT(&hadc1, &throttlePot);
 800091c:	490b      	ldr	r1, [pc, #44]	; (800094c <main+0x54>)
 800091e:	480c      	ldr	r0, [pc, #48]	; (8000950 <main+0x58>)
 8000920:	f7ff fdfe 	bl	8000520 <ADC_INIT>
  myESCSet = ESC_INIT_CONTROLLER(&htim4, hdmaArray);
 8000924:	490b      	ldr	r1, [pc, #44]	; (8000954 <main+0x5c>)
 8000926:	480c      	ldr	r0, [pc, #48]	; (8000958 <main+0x60>)
 8000928:	f7ff fe0b 	bl	8000542 <ESC_INIT_CONTROLLER>
 800092c:	4602      	mov	r2, r0
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <main+0x64>)
 8000930:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    ESC_UPDATE_THROTTLE(&myESCSet[0], throttle);
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <main+0x64>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <main+0x68>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4619      	mov	r1, r3
 800093c:	4610      	mov	r0, r2
 800093e:	f7ff fe75 	bl	800062c <ESC_UPDATE_THROTTLE>
    HAL_Delay(1000);
 8000942:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000946:	f000 fe31 	bl	80015ac <HAL_Delay>
    ESC_UPDATE_THROTTLE(&myESCSet[0], throttle);
 800094a:	e7f2      	b.n	8000932 <main+0x3a>
 800094c:	2000079c 	.word	0x2000079c
 8000950:	20000634 	.word	0x20000634
 8000954:	20000004 	.word	0x20000004
 8000958:	2000010c 	.word	0x2000010c
 800095c:	200005d0 	.word	0x200005d0
 8000960:	20000000 	.word	0x20000000

08000964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b0b4      	sub	sp, #208	; 0xd0
 8000968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800096e:	2230      	movs	r2, #48	; 0x30
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f004 ff68 	bl	8005848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000978:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	2280      	movs	r2, #128	; 0x80
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f004 ff59 	bl	8005848 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000996:	f002 faad 	bl	8002ef4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	4b3a      	ldr	r3, [pc, #232]	; (8000a84 <SystemClock_Config+0x120>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	4a39      	ldr	r2, [pc, #228]	; (8000a84 <SystemClock_Config+0x120>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a4:	6413      	str	r3, [r2, #64]	; 0x40
 80009a6:	4b37      	ldr	r3, [pc, #220]	; (8000a84 <SystemClock_Config+0x120>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b2:	4b35      	ldr	r3, [pc, #212]	; (8000a88 <SystemClock_Config+0x124>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a34      	ldr	r2, [pc, #208]	; (8000a88 <SystemClock_Config+0x124>)
 80009b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009bc:	6013      	str	r3, [r2, #0]
 80009be:	4b32      	ldr	r3, [pc, #200]	; (8000a88 <SystemClock_Config+0x124>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ca:	2301      	movs	r3, #1
 80009cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d8:	2302      	movs	r3, #2
 80009da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009e6:	2308      	movs	r3, #8
 80009e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 80009ec:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80009f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009f4:	2302      	movs	r3, #2
 80009f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80009fa:	2309      	movs	r3, #9
 80009fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a00:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f002 fad5 	bl	8002fb4 <HAL_RCC_OscConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000a10:	f000 fb20 	bl	8001054 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a14:	f002 fa7e 	bl	8002f14 <HAL_PWREx_EnableOverDrive>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000a1e:	f000 fb19 	bl	8001054 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a22:	230f      	movs	r3, #15
 8000a24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a44:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a48:	2107      	movs	r1, #7
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f002 fd56 	bl	80034fc <HAL_RCC_ClockConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000a56:	f000 fafd 	bl	8001054 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <SystemClock_Config+0x128>)
 8000a5c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f002 ff3d 	bl	80038ec <HAL_RCCEx_PeriphCLKConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0x118>
  {
    Error_Handler();
 8000a78:	f000 faec 	bl	8001054 <Error_Handler>
  }
}
 8000a7c:	bf00      	nop
 8000a7e:	37d0      	adds	r7, #208	; 0xd0
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40007000 	.word	0x40007000
 8000a8c:	00200100 	.word	0x00200100

08000a90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a96:	463b      	mov	r3, r7
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000aa2:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000aa4:	4a21      	ldr	r2, [pc, #132]	; (8000b2c <MX_ADC1_Init+0x9c>)
 8000aa6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000aaa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000aae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ab0:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000abc:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ac2:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aca:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ad0:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000ad2:	4a17      	ldr	r2, [pc, #92]	; (8000b30 <MX_ADC1_Init+0xa0>)
 8000ad4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ad6:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000aea:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000af0:	480d      	ldr	r0, [pc, #52]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000af2:	f000 fd7d 	bl	80015f0 <HAL_ADC_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000afc:	f000 faaa 	bl	8001054 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000b00:	2309      	movs	r3, #9
 8000b02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b04:	2301      	movs	r3, #1
 8000b06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000b12:	f000 ff69 	bl	80019e8 <HAL_ADC_ConfigChannel>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b1c:	f000 fa9a 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000634 	.word	0x20000634
 8000b2c:	40012000 	.word	0x40012000
 8000b30:	0f000001 	.word	0x0f000001

08000b34 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b46:	463b      	mov	r3, r7
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
 8000b54:	615a      	str	r2, [r3, #20]
 8000b56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b58:	4b32      	ldr	r3, [pc, #200]	; (8000c24 <MX_TIM4_Init+0xf0>)
 8000b5a:	4a33      	ldr	r2, [pc, #204]	; (8000c28 <MX_TIM4_Init+0xf4>)
 8000b5c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b5e:	4b31      	ldr	r3, [pc, #196]	; (8000c24 <MX_TIM4_Init+0xf0>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b64:	4b2f      	ldr	r3, [pc, #188]	; (8000c24 <MX_TIM4_Init+0xf0>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 719;
 8000b6a:	4b2e      	ldr	r3, [pc, #184]	; (8000c24 <MX_TIM4_Init+0xf0>)
 8000b6c:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000b70:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b72:	4b2c      	ldr	r3, [pc, #176]	; (8000c24 <MX_TIM4_Init+0xf0>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b78:	4b2a      	ldr	r3, [pc, #168]	; (8000c24 <MX_TIM4_Init+0xf0>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000b7e:	4829      	ldr	r0, [pc, #164]	; (8000c24 <MX_TIM4_Init+0xf0>)
 8000b80:	f003 f9fc 	bl	8003f7c <HAL_TIM_PWM_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000b8a:	f000 fa63 	bl	8001054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4821      	ldr	r0, [pc, #132]	; (8000c24 <MX_TIM4_Init+0xf0>)
 8000b9e:	f003 fe99 	bl	80048d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000ba8:	f000 fa54 	bl	8001054 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bac:	2360      	movs	r3, #96	; 0x60
 8000bae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4818      	ldr	r0, [pc, #96]	; (8000c24 <MX_TIM4_Init+0xf0>)
 8000bc4:	f003 fa4a 	bl	800405c <HAL_TIM_PWM_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000bce:	f000 fa41 	bl	8001054 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bd2:	463b      	mov	r3, r7
 8000bd4:	2204      	movs	r2, #4
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4812      	ldr	r0, [pc, #72]	; (8000c24 <MX_TIM4_Init+0xf0>)
 8000bda:	f003 fa3f 	bl	800405c <HAL_TIM_PWM_ConfigChannel>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000be4:	f000 fa36 	bl	8001054 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000be8:	463b      	mov	r3, r7
 8000bea:	2208      	movs	r2, #8
 8000bec:	4619      	mov	r1, r3
 8000bee:	480d      	ldr	r0, [pc, #52]	; (8000c24 <MX_TIM4_Init+0xf0>)
 8000bf0:	f003 fa34 	bl	800405c <HAL_TIM_PWM_ConfigChannel>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8000bfa:	f000 fa2b 	bl	8001054 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bfe:	463b      	mov	r3, r7
 8000c00:	220c      	movs	r2, #12
 8000c02:	4619      	mov	r1, r3
 8000c04:	4807      	ldr	r0, [pc, #28]	; (8000c24 <MX_TIM4_Init+0xf0>)
 8000c06:	f003 fa29 	bl	800405c <HAL_TIM_PWM_ConfigChannel>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8000c10:	f000 fa20 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c14:	4803      	ldr	r0, [pc, #12]	; (8000c24 <MX_TIM4_Init+0xf0>)
 8000c16:	f000 fadd 	bl	80011d4 <HAL_TIM_MspPostInit>

}
 8000c1a:	bf00      	nop
 8000c1c:	3728      	adds	r7, #40	; 0x28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2000010c 	.word	0x2000010c
 8000c28:	40000800 	.word	0x40000800

08000c2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c32:	4a15      	ldr	r2, [pc, #84]	; (8000c88 <MX_USART3_UART_Init+0x5c>)
 8000c34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c6e:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c70:	f003 febe 	bl	80049f0 <HAL_UART_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c7a:	f000 f9eb 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2000014c 	.word	0x2000014c
 8000c88:	40004800 	.word	0x40004800

08000c8c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c96:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c9a:	2206      	movs	r2, #6
 8000c9c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ca6:	2202      	movs	r2, #2
 8000ca8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cd0:	f001 ffc7 	bl	8002c62 <HAL_PCD_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000cda:	f000 f9bb 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200001cc 	.word	0x200001cc

08000ce8 <MX_DMA_Init>:
  *   hdma_memtomem_dma2_stream1
  *   hdma_memtomem_dma2_stream2
  *   hdma_memtomem_dma2_stream3
  */
static void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cee:	4b74      	ldr	r3, [pc, #464]	; (8000ec0 <MX_DMA_Init+0x1d8>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a73      	ldr	r2, [pc, #460]	; (8000ec0 <MX_DMA_Init+0x1d8>)
 8000cf4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b71      	ldr	r3, [pc, #452]	; (8000ec0 <MX_DMA_Init+0x1d8>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000d06:	4b6f      	ldr	r3, [pc, #444]	; (8000ec4 <MX_DMA_Init+0x1dc>)
 8000d08:	4a6f      	ldr	r2, [pc, #444]	; (8000ec8 <MX_DMA_Init+0x1e0>)
 8000d0a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000d0c:	4b6d      	ldr	r3, [pc, #436]	; (8000ec4 <MX_DMA_Init+0x1dc>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000d12:	4b6c      	ldr	r3, [pc, #432]	; (8000ec4 <MX_DMA_Init+0x1dc>)
 8000d14:	2280      	movs	r2, #128	; 0x80
 8000d16:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d18:	4b6a      	ldr	r3, [pc, #424]	; (8000ec4 <MX_DMA_Init+0x1dc>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_DISABLE;
 8000d1e:	4b69      	ldr	r3, [pc, #420]	; (8000ec4 <MX_DMA_Init+0x1dc>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d24:	4b67      	ldr	r3, [pc, #412]	; (8000ec4 <MX_DMA_Init+0x1dc>)
 8000d26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d2a:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d2c:	4b65      	ldr	r3, [pc, #404]	; (8000ec4 <MX_DMA_Init+0x1dc>)
 8000d2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d32:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000d34:	4b63      	ldr	r3, [pc, #396]	; (8000ec4 <MX_DMA_Init+0x1dc>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d3a:	4b62      	ldr	r3, [pc, #392]	; (8000ec4 <MX_DMA_Init+0x1dc>)
 8000d3c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d40:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d42:	4b60      	ldr	r3, [pc, #384]	; (8000ec4 <MX_DMA_Init+0x1dc>)
 8000d44:	2204      	movs	r2, #4
 8000d46:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d48:	4b5e      	ldr	r3, [pc, #376]	; (8000ec4 <MX_DMA_Init+0x1dc>)
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000d4e:	4b5d      	ldr	r3, [pc, #372]	; (8000ec4 <MX_DMA_Init+0x1dc>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000d54:	4b5b      	ldr	r3, [pc, #364]	; (8000ec4 <MX_DMA_Init+0x1dc>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000d5a:	485a      	ldr	r0, [pc, #360]	; (8000ec4 <MX_DMA_Init+0x1dc>)
 8000d5c:	f001 fa1c 	bl	8002198 <HAL_DMA_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_DMA_Init+0x82>
  {
    Error_Handler( );
 8000d66:	f000 f975 	bl	8001054 <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream1 on DMA2_Stream1 */
  hdma_memtomem_dma2_stream1.Instance = DMA2_Stream1;
 8000d6a:	4b58      	ldr	r3, [pc, #352]	; (8000ecc <MX_DMA_Init+0x1e4>)
 8000d6c:	4a58      	ldr	r2, [pc, #352]	; (8000ed0 <MX_DMA_Init+0x1e8>)
 8000d6e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream1.Init.Channel = DMA_CHANNEL_0;
 8000d70:	4b56      	ldr	r3, [pc, #344]	; (8000ecc <MX_DMA_Init+0x1e4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000d76:	4b55      	ldr	r3, [pc, #340]	; (8000ecc <MX_DMA_Init+0x1e4>)
 8000d78:	2280      	movs	r2, #128	; 0x80
 8000d7a:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d7c:	4b53      	ldr	r3, [pc, #332]	; (8000ecc <MX_DMA_Init+0x1e4>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream1.Init.MemInc = DMA_MINC_DISABLE;
 8000d82:	4b52      	ldr	r3, [pc, #328]	; (8000ecc <MX_DMA_Init+0x1e4>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d88:	4b50      	ldr	r3, [pc, #320]	; (8000ecc <MX_DMA_Init+0x1e4>)
 8000d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d8e:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d90:	4b4e      	ldr	r3, [pc, #312]	; (8000ecc <MX_DMA_Init+0x1e4>)
 8000d92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d96:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream1.Init.Mode = DMA_NORMAL;
 8000d98:	4b4c      	ldr	r3, [pc, #304]	; (8000ecc <MX_DMA_Init+0x1e4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d9e:	4b4b      	ldr	r3, [pc, #300]	; (8000ecc <MX_DMA_Init+0x1e4>)
 8000da0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000da4:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000da6:	4b49      	ldr	r3, [pc, #292]	; (8000ecc <MX_DMA_Init+0x1e4>)
 8000da8:	2204      	movs	r2, #4
 8000daa:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000dac:	4b47      	ldr	r3, [pc, #284]	; (8000ecc <MX_DMA_Init+0x1e4>)
 8000dae:	2203      	movs	r2, #3
 8000db0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000db2:	4b46      	ldr	r3, [pc, #280]	; (8000ecc <MX_DMA_Init+0x1e4>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000db8:	4b44      	ldr	r3, [pc, #272]	; (8000ecc <MX_DMA_Init+0x1e4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream1) != HAL_OK)
 8000dbe:	4843      	ldr	r0, [pc, #268]	; (8000ecc <MX_DMA_Init+0x1e4>)
 8000dc0:	f001 f9ea 	bl	8002198 <HAL_DMA_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_DMA_Init+0xe6>
  {
    Error_Handler( );
 8000dca:	f000 f943 	bl	8001054 <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream2 on DMA2_Stream2 */
  hdma_memtomem_dma2_stream2.Instance = DMA2_Stream2;
 8000dce:	4b41      	ldr	r3, [pc, #260]	; (8000ed4 <MX_DMA_Init+0x1ec>)
 8000dd0:	4a41      	ldr	r2, [pc, #260]	; (8000ed8 <MX_DMA_Init+0x1f0>)
 8000dd2:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream2.Init.Channel = DMA_CHANNEL_0;
 8000dd4:	4b3f      	ldr	r3, [pc, #252]	; (8000ed4 <MX_DMA_Init+0x1ec>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000dda:	4b3e      	ldr	r3, [pc, #248]	; (8000ed4 <MX_DMA_Init+0x1ec>)
 8000ddc:	2280      	movs	r2, #128	; 0x80
 8000dde:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000de0:	4b3c      	ldr	r3, [pc, #240]	; (8000ed4 <MX_DMA_Init+0x1ec>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream2.Init.MemInc = DMA_MINC_DISABLE;
 8000de6:	4b3b      	ldr	r3, [pc, #236]	; (8000ed4 <MX_DMA_Init+0x1ec>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000dec:	4b39      	ldr	r3, [pc, #228]	; (8000ed4 <MX_DMA_Init+0x1ec>)
 8000dee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000df2:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000df4:	4b37      	ldr	r3, [pc, #220]	; (8000ed4 <MX_DMA_Init+0x1ec>)
 8000df6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dfa:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream2.Init.Mode = DMA_NORMAL;
 8000dfc:	4b35      	ldr	r3, [pc, #212]	; (8000ed4 <MX_DMA_Init+0x1ec>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e02:	4b34      	ldr	r3, [pc, #208]	; (8000ed4 <MX_DMA_Init+0x1ec>)
 8000e04:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e08:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000e0a:	4b32      	ldr	r3, [pc, #200]	; (8000ed4 <MX_DMA_Init+0x1ec>)
 8000e0c:	2204      	movs	r2, #4
 8000e0e:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000e10:	4b30      	ldr	r3, [pc, #192]	; (8000ed4 <MX_DMA_Init+0x1ec>)
 8000e12:	2203      	movs	r2, #3
 8000e14:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream2.Init.MemBurst = DMA_MBURST_SINGLE;
 8000e16:	4b2f      	ldr	r3, [pc, #188]	; (8000ed4 <MX_DMA_Init+0x1ec>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000e1c:	4b2d      	ldr	r3, [pc, #180]	; (8000ed4 <MX_DMA_Init+0x1ec>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream2) != HAL_OK)
 8000e22:	482c      	ldr	r0, [pc, #176]	; (8000ed4 <MX_DMA_Init+0x1ec>)
 8000e24:	f001 f9b8 	bl	8002198 <HAL_DMA_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_DMA_Init+0x14a>
  {
    Error_Handler( );
 8000e2e:	f000 f911 	bl	8001054 <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream3 on DMA2_Stream3 */
  hdma_memtomem_dma2_stream3.Instance = DMA2_Stream3;
 8000e32:	4b2a      	ldr	r3, [pc, #168]	; (8000edc <MX_DMA_Init+0x1f4>)
 8000e34:	4a2a      	ldr	r2, [pc, #168]	; (8000ee0 <MX_DMA_Init+0x1f8>)
 8000e36:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream3.Init.Channel = DMA_CHANNEL_0;
 8000e38:	4b28      	ldr	r3, [pc, #160]	; (8000edc <MX_DMA_Init+0x1f4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream3.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000e3e:	4b27      	ldr	r3, [pc, #156]	; (8000edc <MX_DMA_Init+0x1f4>)
 8000e40:	2280      	movs	r2, #128	; 0x80
 8000e42:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e44:	4b25      	ldr	r3, [pc, #148]	; (8000edc <MX_DMA_Init+0x1f4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream3.Init.MemInc = DMA_MINC_DISABLE;
 8000e4a:	4b24      	ldr	r3, [pc, #144]	; (8000edc <MX_DMA_Init+0x1f4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e50:	4b22      	ldr	r3, [pc, #136]	; (8000edc <MX_DMA_Init+0x1f4>)
 8000e52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e56:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e58:	4b20      	ldr	r3, [pc, #128]	; (8000edc <MX_DMA_Init+0x1f4>)
 8000e5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e5e:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream3.Init.Mode = DMA_NORMAL;
 8000e60:	4b1e      	ldr	r3, [pc, #120]	; (8000edc <MX_DMA_Init+0x1f4>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e66:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <MX_DMA_Init+0x1f4>)
 8000e68:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e6c:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000e6e:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <MX_DMA_Init+0x1f4>)
 8000e70:	2204      	movs	r2, #4
 8000e72:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000e74:	4b19      	ldr	r3, [pc, #100]	; (8000edc <MX_DMA_Init+0x1f4>)
 8000e76:	2203      	movs	r2, #3
 8000e78:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream3.Init.MemBurst = DMA_MBURST_SINGLE;
 8000e7a:	4b18      	ldr	r3, [pc, #96]	; (8000edc <MX_DMA_Init+0x1f4>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000e80:	4b16      	ldr	r3, [pc, #88]	; (8000edc <MX_DMA_Init+0x1f4>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream3) != HAL_OK)
 8000e86:	4815      	ldr	r0, [pc, #84]	; (8000edc <MX_DMA_Init+0x1f4>)
 8000e88:	f001 f986 	bl	8002198 <HAL_DMA_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_DMA_Init+0x1ae>
  {
    Error_Handler( );
 8000e92:	f000 f8df 	bl	8001054 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2100      	movs	r1, #0
 8000e9a:	2038      	movs	r0, #56	; 0x38
 8000e9c:	f001 f945 	bl	800212a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ea0:	2038      	movs	r0, #56	; 0x38
 8000ea2:	f001 f95e 	bl	8002162 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	203c      	movs	r0, #60	; 0x3c
 8000eac:	f001 f93d 	bl	800212a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000eb0:	203c      	movs	r0, #60	; 0x3c
 8000eb2:	f001 f956 	bl	8002162 <HAL_NVIC_EnableIRQ>

}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	200000ac 	.word	0x200000ac
 8000ec8:	40026410 	.word	0x40026410
 8000ecc:	2000067c 	.word	0x2000067c
 8000ed0:	40026428 	.word	0x40026428
 8000ed4:	2000073c 	.word	0x2000073c
 8000ed8:	40026440 	.word	0x40026440
 8000edc:	200005d4 	.word	0x200005d4
 8000ee0:	40026458 	.word	0x40026458

08000ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08c      	sub	sp, #48	; 0x30
 8000ee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efa:	4b46      	ldr	r3, [pc, #280]	; (8001014 <MX_GPIO_Init+0x130>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a45      	ldr	r2, [pc, #276]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f00:	f043 0304 	orr.w	r3, r3, #4
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b43      	ldr	r3, [pc, #268]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0304 	and.w	r3, r3, #4
 8000f0e:	61bb      	str	r3, [r7, #24]
 8000f10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f12:	4b40      	ldr	r3, [pc, #256]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a3f      	ldr	r2, [pc, #252]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b3d      	ldr	r3, [pc, #244]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2a:	4b3a      	ldr	r3, [pc, #232]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a39      	ldr	r2, [pc, #228]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b37      	ldr	r3, [pc, #220]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f42:	4b34      	ldr	r3, [pc, #208]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a33      	ldr	r2, [pc, #204]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f48:	f043 0308 	orr.w	r3, r3, #8
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b31      	ldr	r3, [pc, #196]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0308 	and.w	r3, r3, #8
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f5a:	4b2e      	ldr	r3, [pc, #184]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a2d      	ldr	r2, [pc, #180]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b2b      	ldr	r3, [pc, #172]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	4b28      	ldr	r3, [pc, #160]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a27      	ldr	r2, [pc, #156]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b25      	ldr	r3, [pc, #148]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000f90:	4821      	ldr	r0, [pc, #132]	; (8001018 <MX_GPIO_Init+0x134>)
 8000f92:	f001 fe4d 	bl	8002c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2140      	movs	r1, #64	; 0x40
 8000f9a:	4820      	ldr	r0, [pc, #128]	; (800101c <MX_GPIO_Init+0x138>)
 8000f9c:	f001 fe48 	bl	8002c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000fa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fa6:	4b1e      	ldr	r3, [pc, #120]	; (8001020 <MX_GPIO_Init+0x13c>)
 8000fa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	481b      	ldr	r0, [pc, #108]	; (8001024 <MX_GPIO_Init+0x140>)
 8000fb6:	f001 fca1 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000fba:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000fbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fcc:	f107 031c 	add.w	r3, r7, #28
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4811      	ldr	r0, [pc, #68]	; (8001018 <MX_GPIO_Init+0x134>)
 8000fd4:	f001 fc92 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000fd8:	2340      	movs	r3, #64	; 0x40
 8000fda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fe8:	f107 031c 	add.w	r3, r7, #28
 8000fec:	4619      	mov	r1, r3
 8000fee:	480b      	ldr	r0, [pc, #44]	; (800101c <MX_GPIO_Init+0x138>)
 8000ff0:	f001 fc84 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4619      	mov	r1, r3
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <MX_GPIO_Init+0x138>)
 8001008:	f001 fc78 	bl	80028fc <HAL_GPIO_Init>

}
 800100c:	bf00      	nop
 800100e:	3730      	adds	r7, #48	; 0x30
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40023800 	.word	0x40023800
 8001018:	40020400 	.word	0x40020400
 800101c:	40021800 	.word	0x40021800
 8001020:	10110000 	.word	0x10110000
 8001024:	40020800 	.word	0x40020800

08001028 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
    void HAL_ADC_ConvHalfCpltCallback (ADC_HandleTypeDef* hadc)
    {
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	__NOP();
 8001030:	bf00      	nop
    }
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <HAL_ADC_ConvCpltCallback>:

    void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef* hadc)
    {
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
    __NOP();
 8001046:	bf00      	nop
    }
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <HAL_MspInit+0x44>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <HAL_MspInit+0x44>)
 8001070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001074:	6413      	str	r3, [r2, #64]	; 0x40
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <HAL_MspInit+0x44>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <HAL_MspInit+0x44>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	4a08      	ldr	r2, [pc, #32]	; (80010a8 <HAL_MspInit+0x44>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108c:	6453      	str	r3, [r2, #68]	; 0x44
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_MspInit+0x44>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a2d      	ldr	r2, [pc, #180]	; (8001180 <HAL_ADC_MspInit+0xd4>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d154      	bne.n	8001178 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010ce:	4b2d      	ldr	r3, [pc, #180]	; (8001184 <HAL_ADC_MspInit+0xd8>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	4a2c      	ldr	r2, [pc, #176]	; (8001184 <HAL_ADC_MspInit+0xd8>)
 80010d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d8:	6453      	str	r3, [r2, #68]	; 0x44
 80010da:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <HAL_ADC_MspInit+0xd8>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e6:	4b27      	ldr	r3, [pc, #156]	; (8001184 <HAL_ADC_MspInit+0xd8>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a26      	ldr	r2, [pc, #152]	; (8001184 <HAL_ADC_MspInit+0xd8>)
 80010ec:	f043 0302 	orr.w	r3, r3, #2
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b24      	ldr	r3, [pc, #144]	; (8001184 <HAL_ADC_MspInit+0xd8>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_Throttle_Control_Pin;
 80010fe:	2302      	movs	r3, #2
 8001100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001102:	2303      	movs	r3, #3
 8001104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_Throttle_Control_GPIO_Port, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	481d      	ldr	r0, [pc, #116]	; (8001188 <HAL_ADC_MspInit+0xdc>)
 8001112:	f001 fbf3 	bl	80028fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <HAL_ADC_MspInit+0xe0>)
 8001118:	4a1d      	ldr	r2, [pc, #116]	; (8001190 <HAL_ADC_MspInit+0xe4>)
 800111a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800111c:	4b1b      	ldr	r3, [pc, #108]	; (800118c <HAL_ADC_MspInit+0xe0>)
 800111e:	2200      	movs	r2, #0
 8001120:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001122:	4b1a      	ldr	r3, [pc, #104]	; (800118c <HAL_ADC_MspInit+0xe0>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001128:	4b18      	ldr	r3, [pc, #96]	; (800118c <HAL_ADC_MspInit+0xe0>)
 800112a:	2200      	movs	r2, #0
 800112c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800112e:	4b17      	ldr	r3, [pc, #92]	; (800118c <HAL_ADC_MspInit+0xe0>)
 8001130:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001134:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <HAL_ADC_MspInit+0xe0>)
 8001138:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800113c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800113e:	4b13      	ldr	r3, [pc, #76]	; (800118c <HAL_ADC_MspInit+0xe0>)
 8001140:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001144:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <HAL_ADC_MspInit+0xe0>)
 8001148:	f44f 7280 	mov.w	r2, #256	; 0x100
 800114c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800114e:	4b0f      	ldr	r3, [pc, #60]	; (800118c <HAL_ADC_MspInit+0xe0>)
 8001150:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001154:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <HAL_ADC_MspInit+0xe0>)
 8001158:	2200      	movs	r2, #0
 800115a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800115c:	480b      	ldr	r0, [pc, #44]	; (800118c <HAL_ADC_MspInit+0xe0>)
 800115e:	f001 f81b 	bl	8002198 <HAL_DMA_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8001168:	f7ff ff74 	bl	8001054 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a07      	ldr	r2, [pc, #28]	; (800118c <HAL_ADC_MspInit+0xe0>)
 8001170:	639a      	str	r2, [r3, #56]	; 0x38
 8001172:	4a06      	ldr	r2, [pc, #24]	; (800118c <HAL_ADC_MspInit+0xe0>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001178:	bf00      	nop
 800117a:	3728      	adds	r7, #40	; 0x28
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40012000 	.word	0x40012000
 8001184:	40023800 	.word	0x40023800
 8001188:	40020400 	.word	0x40020400
 800118c:	200006dc 	.word	0x200006dc
 8001190:	40026470 	.word	0x40026470

08001194 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <HAL_TIM_PWM_MspInit+0x38>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d10b      	bne.n	80011be <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	4a09      	ldr	r2, [pc, #36]	; (80011d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80011ac:	f043 0304 	orr.w	r3, r3, #4
 80011b0:	6413      	str	r3, [r2, #64]	; 0x40
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f003 0304 	and.w	r3, r3, #4
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80011be:	bf00      	nop
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40000800 	.word	0x40000800
 80011d0:	40023800 	.word	0x40023800

080011d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a11      	ldr	r2, [pc, #68]	; (8001238 <HAL_TIM_MspPostInit+0x64>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d11c      	bne.n	8001230 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <HAL_TIM_MspPostInit+0x68>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a10      	ldr	r2, [pc, #64]	; (800123c <HAL_TIM_MspPostInit+0x68>)
 80011fc:	f043 0308 	orr.w	r3, r3, #8
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <HAL_TIM_MspPostInit+0x68>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0308 	and.w	r3, r3, #8
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = Timer4_CH1_ESC1_Pin|Timer4_CH2_ESC2_Pin|Timer4_CH3_ESC3_Pin|Timer4_CH4_ESC4_Pin;
 800120e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001212:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001220:	2302      	movs	r3, #2
 8001222:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	4619      	mov	r1, r3
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <HAL_TIM_MspPostInit+0x6c>)
 800122c:	f001 fb66 	bl	80028fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001230:	bf00      	nop
 8001232:	3720      	adds	r7, #32
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40000800 	.word	0x40000800
 800123c:	40023800 	.word	0x40023800
 8001240:	40020c00 	.word	0x40020c00

08001244 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	; 0x28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a17      	ldr	r2, [pc, #92]	; (80012c0 <HAL_UART_MspInit+0x7c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d128      	bne.n	80012b8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001266:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <HAL_UART_MspInit+0x80>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	4a16      	ldr	r2, [pc, #88]	; (80012c4 <HAL_UART_MspInit+0x80>)
 800126c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001270:	6413      	str	r3, [r2, #64]	; 0x40
 8001272:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <HAL_UART_MspInit+0x80>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800127e:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <HAL_UART_MspInit+0x80>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a10      	ldr	r2, [pc, #64]	; (80012c4 <HAL_UART_MspInit+0x80>)
 8001284:	f043 0308 	orr.w	r3, r3, #8
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <HAL_UART_MspInit+0x80>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001296:	f44f 7340 	mov.w	r3, #768	; 0x300
 800129a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a4:	2303      	movs	r3, #3
 80012a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012a8:	2307      	movs	r3, #7
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4619      	mov	r1, r3
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <HAL_UART_MspInit+0x84>)
 80012b4:	f001 fb22 	bl	80028fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012b8:	bf00      	nop
 80012ba:	3728      	adds	r7, #40	; 0x28
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40004800 	.word	0x40004800
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020c00 	.word	0x40020c00

080012cc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	; 0x28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012ec:	d141      	bne.n	8001372 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	4b23      	ldr	r3, [pc, #140]	; (800137c <HAL_PCD_MspInit+0xb0>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a22      	ldr	r2, [pc, #136]	; (800137c <HAL_PCD_MspInit+0xb0>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b20      	ldr	r3, [pc, #128]	; (800137c <HAL_PCD_MspInit+0xb0>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001306:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800130a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001318:	230a      	movs	r3, #10
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	4817      	ldr	r0, [pc, #92]	; (8001380 <HAL_PCD_MspInit+0xb4>)
 8001324:	f001 faea 	bl	80028fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001328:	f44f 7300 	mov.w	r3, #512	; 0x200
 800132c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132e:	2300      	movs	r3, #0
 8001330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	4619      	mov	r1, r3
 800133c:	4810      	ldr	r0, [pc, #64]	; (8001380 <HAL_PCD_MspInit+0xb4>)
 800133e:	f001 fadd 	bl	80028fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <HAL_PCD_MspInit+0xb0>)
 8001344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001346:	4a0d      	ldr	r2, [pc, #52]	; (800137c <HAL_PCD_MspInit+0xb0>)
 8001348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800134c:	6353      	str	r3, [r2, #52]	; 0x34
 800134e:	4b0b      	ldr	r3, [pc, #44]	; (800137c <HAL_PCD_MspInit+0xb0>)
 8001350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <HAL_PCD_MspInit+0xb0>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	4a07      	ldr	r2, [pc, #28]	; (800137c <HAL_PCD_MspInit+0xb0>)
 8001360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001364:	6453      	str	r3, [r2, #68]	; 0x44
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_PCD_MspInit+0xb0>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001372:	bf00      	nop
 8001374:	3728      	adds	r7, #40	; 0x28
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800
 8001380:	40020000 	.word	0x40020000

08001384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001396:	e7fe      	b.n	8001396 <HardFault_Handler+0x4>

08001398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800139c:	e7fe      	b.n	800139c <MemManage_Handler+0x4>

0800139e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <BusFault_Handler+0x4>

080013a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <UsageFault_Handler+0x4>

080013aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d8:	f000 f8c8 	bl	800156c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}

080013e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <DMA2_Stream0_IRQHandler+0x10>)
 80013e6:	f001 f821 	bl	800242c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200000ac 	.word	0x200000ac

080013f4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013f8:	4802      	ldr	r0, [pc, #8]	; (8001404 <DMA2_Stream4_IRQHandler+0x10>)
 80013fa:	f001 f817 	bl	800242c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200006dc 	.word	0x200006dc

08001408 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001410:	4a14      	ldr	r2, [pc, #80]	; (8001464 <_sbrk+0x5c>)
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <_sbrk+0x60>)
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800141c:	4b13      	ldr	r3, [pc, #76]	; (800146c <_sbrk+0x64>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d102      	bne.n	800142a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <_sbrk+0x64>)
 8001426:	4a12      	ldr	r2, [pc, #72]	; (8001470 <_sbrk+0x68>)
 8001428:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <_sbrk+0x64>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	429a      	cmp	r2, r3
 8001436:	d207      	bcs.n	8001448 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001438:	f004 f9d4 	bl	80057e4 <__errno>
 800143c:	4602      	mov	r2, r0
 800143e:	230c      	movs	r3, #12
 8001440:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	e009      	b.n	800145c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <_sbrk+0x64>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800144e:	4b07      	ldr	r3, [pc, #28]	; (800146c <_sbrk+0x64>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4413      	add	r3, r2
 8001456:	4a05      	ldr	r2, [pc, #20]	; (800146c <_sbrk+0x64>)
 8001458:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800145a:	68fb      	ldr	r3, [r7, #12]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20040000 	.word	0x20040000
 8001468:	00000400 	.word	0x00000400
 800146c:	200000a0 	.word	0x200000a0
 8001470:	200007a8 	.word	0x200007a8

08001474 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <SystemInit+0x28>)
 800147a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800147e:	4a07      	ldr	r2, [pc, #28]	; (800149c <SystemInit+0x28>)
 8001480:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001484:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001488:	4b04      	ldr	r3, [pc, #16]	; (800149c <SystemInit+0x28>)
 800148a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800148e:	609a      	str	r2, [r3, #8]
#endif
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014a6:	e003      	b.n	80014b0 <LoopCopyDataInit>

080014a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014ae:	3104      	adds	r1, #4

080014b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014b0:	480b      	ldr	r0, [pc, #44]	; (80014e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014b2:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014b8:	d3f6      	bcc.n	80014a8 <CopyDataInit>
  ldr  r2, =_sbss
 80014ba:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014bc:	e002      	b.n	80014c4 <LoopFillZerobss>

080014be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014c0:	f842 3b04 	str.w	r3, [r2], #4

080014c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014c8:	d3f9      	bcc.n	80014be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014ca:	f7ff ffd3 	bl	8001474 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ce:	f004 f98f 	bl	80057f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014d2:	f7ff fa11 	bl	80008f8 <main>
  bx  lr    
 80014d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014d8:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 80014dc:	08005978 	.word	0x08005978
  ldr  r0, =_sdata
 80014e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014e4:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 80014e8:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 80014ec:	200007a8 	.word	0x200007a8

080014f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f0:	e7fe      	b.n	80014f0 <ADC_IRQHandler>

080014f2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f6:	2003      	movs	r0, #3
 80014f8:	f000 fe0c 	bl	8002114 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014fc:	2000      	movs	r0, #0
 80014fe:	f000 f805 	bl	800150c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001502:	f7ff fdaf 	bl	8001064 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_InitTick+0x54>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <HAL_InitTick+0x58>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4619      	mov	r1, r3
 800151e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001522:	fbb3 f3f1 	udiv	r3, r3, r1
 8001526:	fbb2 f3f3 	udiv	r3, r2, r3
 800152a:	4618      	mov	r0, r3
 800152c:	f000 fe27 	bl	800217e <HAL_SYSTICK_Config>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e00e      	b.n	8001558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b0f      	cmp	r3, #15
 800153e:	d80a      	bhi.n	8001556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001540:	2200      	movs	r2, #0
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	f04f 30ff 	mov.w	r0, #4294967295
 8001548:	f000 fdef 	bl	800212a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800154c:	4a06      	ldr	r2, [pc, #24]	; (8001568 <HAL_InitTick+0x5c>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
 8001554:	e000      	b.n	8001558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000014 	.word	0x20000014
 8001564:	2000001c 	.word	0x2000001c
 8001568:	20000018 	.word	0x20000018

0800156c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_IncTick+0x20>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_IncTick+0x24>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4413      	add	r3, r2
 800157c:	4a04      	ldr	r2, [pc, #16]	; (8001590 <HAL_IncTick+0x24>)
 800157e:	6013      	str	r3, [r2, #0]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	2000001c 	.word	0x2000001c
 8001590:	200007a0 	.word	0x200007a0

08001594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return uwTick;
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <HAL_GetTick+0x14>)
 800159a:	681b      	ldr	r3, [r3, #0]
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	200007a0 	.word	0x200007a0

080015ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015b4:	f7ff ffee 	bl	8001594 <HAL_GetTick>
 80015b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c4:	d005      	beq.n	80015d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_Delay+0x40>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4413      	add	r3, r2
 80015d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015d2:	bf00      	nop
 80015d4:	f7ff ffde 	bl	8001594 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d8f7      	bhi.n	80015d4 <HAL_Delay+0x28>
  {
  }
}
 80015e4:	bf00      	nop
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	2000001c 	.word	0x2000001c

080015f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015f8:	2300      	movs	r3, #0
 80015fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e031      	b.n	800166a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	2b00      	cmp	r3, #0
 800160c:	d109      	bne.n	8001622 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff fd4c 	bl	80010ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f003 0310 	and.w	r3, r3, #16
 800162a:	2b00      	cmp	r3, #0
 800162c:	d116      	bne.n	800165c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001632:	4b10      	ldr	r3, [pc, #64]	; (8001674 <HAL_ADC_Init+0x84>)
 8001634:	4013      	ands	r3, r2
 8001636:	f043 0202 	orr.w	r2, r3, #2
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 fb1c 	bl	8001c7c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f023 0303 	bic.w	r3, r3, #3
 8001652:	f043 0201 	orr.w	r2, r3, #1
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	641a      	str	r2, [r3, #64]	; 0x40
 800165a:	e001      	b.n	8001660 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001668:	7bfb      	ldrb	r3, [r7, #15]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	ffffeefd 	.word	0xffffeefd

08001678 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800168a:	2b01      	cmp	r3, #1
 800168c:	d101      	bne.n	8001692 <HAL_ADC_Start+0x1a>
 800168e:	2302      	movs	r3, #2
 8001690:	e0a0      	b.n	80017d4 <HAL_ADC_Start+0x15c>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d018      	beq.n	80016da <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0201 	orr.w	r2, r2, #1
 80016b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80016b8:	4b49      	ldr	r3, [pc, #292]	; (80017e0 <HAL_ADC_Start+0x168>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a49      	ldr	r2, [pc, #292]	; (80017e4 <HAL_ADC_Start+0x16c>)
 80016be:	fba2 2303 	umull	r2, r3, r2, r3
 80016c2:	0c9a      	lsrs	r2, r3, #18
 80016c4:	4613      	mov	r3, r2
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	4413      	add	r3, r2
 80016ca:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80016cc:	e002      	b.n	80016d4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	3b01      	subs	r3, #1
 80016d2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f9      	bne.n	80016ce <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d174      	bne.n	80017d2 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ec:	4b3e      	ldr	r3, [pc, #248]	; (80017e8 <HAL_ADC_Start+0x170>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001702:	2b00      	cmp	r3, #0
 8001704:	d007      	beq.n	8001716 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800170e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800171e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001722:	d106      	bne.n	8001732 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001728:	f023 0206 	bic.w	r2, r3, #6
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	645a      	str	r2, [r3, #68]	; 0x44
 8001730:	e002      	b.n	8001738 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001748:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800174a:	4b28      	ldr	r3, [pc, #160]	; (80017ec <HAL_ADC_Start+0x174>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 031f 	and.w	r3, r3, #31
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10f      	bne.n	8001776 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d136      	bne.n	80017d2 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	e02d      	b.n	80017d2 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a1d      	ldr	r2, [pc, #116]	; (80017f0 <HAL_ADC_Start+0x178>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d10e      	bne.n	800179e <HAL_ADC_Start+0x126>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d107      	bne.n	800179e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800179c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800179e:	4b13      	ldr	r3, [pc, #76]	; (80017ec <HAL_ADC_Start+0x174>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 0310 	and.w	r3, r3, #16
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d113      	bne.n	80017d2 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a11      	ldr	r2, [pc, #68]	; (80017f4 <HAL_ADC_Start+0x17c>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d10e      	bne.n	80017d2 <HAL_ADC_Start+0x15a>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d107      	bne.n	80017d2 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017d0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	20000014 	.word	0x20000014
 80017e4:	431bde83 	.word	0x431bde83
 80017e8:	fffff8fe 	.word	0xfffff8fe
 80017ec:	40012300 	.word	0x40012300
 80017f0:	40012000 	.word	0x40012000
 80017f4:	40012200 	.word	0x40012200

080017f8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800180e:	2b01      	cmp	r3, #1
 8001810:	d101      	bne.n	8001816 <HAL_ADC_Start_DMA+0x1e>
 8001812:	2302      	movs	r3, #2
 8001814:	e0c7      	b.n	80019a6 <HAL_ADC_Start_DMA+0x1ae>
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2201      	movs	r2, #1
 800181a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b01      	cmp	r3, #1
 800182a:	d018      	beq.n	800185e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	689a      	ldr	r2, [r3, #8]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 0201 	orr.w	r2, r2, #1
 800183a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800183c:	4b5c      	ldr	r3, [pc, #368]	; (80019b0 <HAL_ADC_Start_DMA+0x1b8>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a5c      	ldr	r2, [pc, #368]	; (80019b4 <HAL_ADC_Start_DMA+0x1bc>)
 8001842:	fba2 2303 	umull	r2, r3, r2, r3
 8001846:	0c9a      	lsrs	r2, r3, #18
 8001848:	4613      	mov	r3, r2
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	4413      	add	r3, r2
 800184e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001850:	e002      	b.n	8001858 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	3b01      	subs	r3, #1
 8001856:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f9      	bne.n	8001852 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b01      	cmp	r3, #1
 800186a:	f040 809b 	bne.w	80019a4 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001872:	4b51      	ldr	r3, [pc, #324]	; (80019b8 <HAL_ADC_Start_DMA+0x1c0>)
 8001874:	4013      	ands	r3, r2
 8001876:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001888:	2b00      	cmp	r3, #0
 800188a:	d007      	beq.n	800189c <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001890:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001894:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018a8:	d106      	bne.n	80018b8 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	f023 0206 	bic.w	r2, r3, #6
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	645a      	str	r2, [r3, #68]	; 0x44
 80018b6:	e002      	b.n	80018be <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2200      	movs	r2, #0
 80018bc:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ca:	4a3c      	ldr	r2, [pc, #240]	; (80019bc <HAL_ADC_Start_DMA+0x1c4>)
 80018cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d2:	4a3b      	ldr	r2, [pc, #236]	; (80019c0 <HAL_ADC_Start_DMA+0x1c8>)
 80018d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018da:	4a3a      	ldr	r2, [pc, #232]	; (80019c4 <HAL_ADC_Start_DMA+0x1cc>)
 80018dc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80018f6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001906:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	334c      	adds	r3, #76	; 0x4c
 8001912:	4619      	mov	r1, r3
 8001914:	68ba      	ldr	r2, [r7, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f000 fd27 	bl	800236a <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800191c:	4b2a      	ldr	r3, [pc, #168]	; (80019c8 <HAL_ADC_Start_DMA+0x1d0>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 031f 	and.w	r3, r3, #31
 8001924:	2b00      	cmp	r3, #0
 8001926:	d10f      	bne.n	8001948 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d136      	bne.n	80019a4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	e02d      	b.n	80019a4 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a1f      	ldr	r2, [pc, #124]	; (80019cc <HAL_ADC_Start_DMA+0x1d4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d10e      	bne.n	8001970 <HAL_ADC_Start_DMA+0x178>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d107      	bne.n	8001970 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689a      	ldr	r2, [r3, #8]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800196e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001970:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <HAL_ADC_Start_DMA+0x1d0>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 0310 	and.w	r3, r3, #16
 8001978:	2b00      	cmp	r3, #0
 800197a:	d113      	bne.n	80019a4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a13      	ldr	r2, [pc, #76]	; (80019d0 <HAL_ADC_Start_DMA+0x1d8>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d10e      	bne.n	80019a4 <HAL_ADC_Start_DMA+0x1ac>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d107      	bne.n	80019a4 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019a2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000014 	.word	0x20000014
 80019b4:	431bde83 	.word	0x431bde83
 80019b8:	fffff8fe 	.word	0xfffff8fe
 80019bc:	08001e71 	.word	0x08001e71
 80019c0:	08001f2b 	.word	0x08001f2b
 80019c4:	08001f47 	.word	0x08001f47
 80019c8:	40012300 	.word	0x40012300
 80019cc:	40012000 	.word	0x40012000
 80019d0:	40012200 	.word	0x40012200

080019d4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d101      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x1c>
 8001a00:	2302      	movs	r3, #2
 8001a02:	e12a      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x272>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b09      	cmp	r3, #9
 8001a12:	d93a      	bls.n	8001a8a <HAL_ADC_ConfigChannel+0xa2>
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a1c:	d035      	beq.n	8001a8a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68d9      	ldr	r1, [r3, #12]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	4413      	add	r3, r2
 8001a32:	3b1e      	subs	r3, #30
 8001a34:	2207      	movs	r2, #7
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43da      	mvns	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	400a      	ands	r2, r1
 8001a42:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a87      	ldr	r2, [pc, #540]	; (8001c68 <HAL_ADC_ConfigChannel+0x280>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d10a      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68d9      	ldr	r1, [r3, #12]
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	061a      	lsls	r2, r3, #24
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a62:	e035      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68d9      	ldr	r1, [r3, #12]
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	4618      	mov	r0, r3
 8001a76:	4603      	mov	r3, r0
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	4403      	add	r3, r0
 8001a7c:	3b1e      	subs	r3, #30
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a88:	e022      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6919      	ldr	r1, [r3, #16]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	461a      	mov	r2, r3
 8001a98:	4613      	mov	r3, r2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	4413      	add	r3, r2
 8001a9e:	2207      	movs	r2, #7
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43da      	mvns	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	400a      	ands	r2, r1
 8001aac:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6919      	ldr	r1, [r3, #16]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	4618      	mov	r0, r3
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	4403      	add	r3, r0
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b06      	cmp	r3, #6
 8001ad6:	d824      	bhi.n	8001b22 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3b05      	subs	r3, #5
 8001aea:	221f      	movs	r2, #31
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43da      	mvns	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	400a      	ands	r2, r1
 8001af8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	4618      	mov	r0, r3
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	3b05      	subs	r3, #5
 8001b14:	fa00 f203 	lsl.w	r2, r0, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	635a      	str	r2, [r3, #52]	; 0x34
 8001b20:	e04c      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b0c      	cmp	r3, #12
 8001b28:	d824      	bhi.n	8001b74 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	3b23      	subs	r3, #35	; 0x23
 8001b3c:	221f      	movs	r2, #31
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43da      	mvns	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	400a      	ands	r2, r1
 8001b4a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	4618      	mov	r0, r3
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	3b23      	subs	r3, #35	; 0x23
 8001b66:	fa00 f203 	lsl.w	r2, r0, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	631a      	str	r2, [r3, #48]	; 0x30
 8001b72:	e023      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	3b41      	subs	r3, #65	; 0x41
 8001b86:	221f      	movs	r2, #31
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43da      	mvns	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	400a      	ands	r2, r1
 8001b94:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	3b41      	subs	r3, #65	; 0x41
 8001bb0:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a2a      	ldr	r2, [pc, #168]	; (8001c6c <HAL_ADC_ConfigChannel+0x284>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d10a      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x1f4>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001bce:	d105      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001bd0:	4b27      	ldr	r3, [pc, #156]	; (8001c70 <HAL_ADC_ConfigChannel+0x288>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	4a26      	ldr	r2, [pc, #152]	; (8001c70 <HAL_ADC_ConfigChannel+0x288>)
 8001bd6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001bda:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a22      	ldr	r2, [pc, #136]	; (8001c6c <HAL_ADC_ConfigChannel+0x284>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d109      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x212>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2b12      	cmp	r3, #18
 8001bec:	d105      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001bee:	4b20      	ldr	r3, [pc, #128]	; (8001c70 <HAL_ADC_ConfigChannel+0x288>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	4a1f      	ldr	r2, [pc, #124]	; (8001c70 <HAL_ADC_ConfigChannel+0x288>)
 8001bf4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bf8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a1b      	ldr	r2, [pc, #108]	; (8001c6c <HAL_ADC_ConfigChannel+0x284>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d125      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x268>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a17      	ldr	r2, [pc, #92]	; (8001c68 <HAL_ADC_ConfigChannel+0x280>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d003      	beq.n	8001c16 <HAL_ADC_ConfigChannel+0x22e>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2b11      	cmp	r3, #17
 8001c14:	d11c      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001c16:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <HAL_ADC_ConfigChannel+0x288>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	4a15      	ldr	r2, [pc, #84]	; (8001c70 <HAL_ADC_ConfigChannel+0x288>)
 8001c1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c20:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a10      	ldr	r2, [pc, #64]	; (8001c68 <HAL_ADC_ConfigChannel+0x280>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d111      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001c2c:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <HAL_ADC_ConfigChannel+0x28c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a11      	ldr	r2, [pc, #68]	; (8001c78 <HAL_ADC_ConfigChannel+0x290>)
 8001c32:	fba2 2303 	umull	r2, r3, r2, r3
 8001c36:	0c9a      	lsrs	r2, r3, #18
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001c42:	e002      	b.n	8001c4a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1f9      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	10000012 	.word	0x10000012
 8001c6c:	40012000 	.word	0x40012000
 8001c70:	40012300 	.word	0x40012300
 8001c74:	20000014 	.word	0x20000014
 8001c78:	431bde83 	.word	0x431bde83

08001c7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001c84:	4b78      	ldr	r3, [pc, #480]	; (8001e68 <ADC_Init+0x1ec>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	4a77      	ldr	r2, [pc, #476]	; (8001e68 <ADC_Init+0x1ec>)
 8001c8a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001c8e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001c90:	4b75      	ldr	r3, [pc, #468]	; (8001e68 <ADC_Init+0x1ec>)
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	4973      	ldr	r1, [pc, #460]	; (8001e68 <ADC_Init+0x1ec>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6859      	ldr	r1, [r3, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	021a      	lsls	r2, r3, #8
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001cd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6859      	ldr	r1, [r3, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cf2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6899      	ldr	r1, [r3, #8]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0a:	4a58      	ldr	r2, [pc, #352]	; (8001e6c <ADC_Init+0x1f0>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d022      	beq.n	8001d56 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6899      	ldr	r1, [r3, #8]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6899      	ldr	r1, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	e00f      	b.n	8001d76 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d74:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 0202 	bic.w	r2, r2, #2
 8001d84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6899      	ldr	r1, [r3, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	005a      	lsls	r2, r3, #1
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d01b      	beq.n	8001ddc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001db2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001dc2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6859      	ldr	r1, [r3, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	035a      	lsls	r2, r3, #13
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	e007      	b.n	8001dec <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	051a      	lsls	r2, r3, #20
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6899      	ldr	r1, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e2e:	025a      	lsls	r2, r3, #9
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6899      	ldr	r1, [r3, #8]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	029a      	lsls	r2, r3, #10
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	609a      	str	r2, [r3, #8]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	40012300 	.word	0x40012300
 8001e6c:	0f000001 	.word	0x0f000001

08001e70 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d13c      	bne.n	8001f04 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d12b      	bne.n	8001efc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d127      	bne.n	8001efc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d006      	beq.n	8001ec8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d119      	bne.n	8001efc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0220 	bic.w	r2, r2, #32
 8001ed6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d105      	bne.n	8001efc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	f043 0201 	orr.w	r2, r3, #1
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f7ff f89e 	bl	800103e <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001f02:	e00e      	b.n	8001f22 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	f003 0310 	and.w	r3, r3, #16
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d003      	beq.n	8001f18 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f7ff fd5f 	bl	80019d4 <HAL_ADC_ErrorCallback>
}
 8001f16:	e004      	b.n	8001f22 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	4798      	blx	r3
}
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b084      	sub	sp, #16
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f36:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f7ff f875 	bl	8001028 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f3e:	bf00      	nop
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b084      	sub	sp, #16
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f52:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2240      	movs	r2, #64	; 0x40
 8001f58:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	f043 0204 	orr.w	r2, r3, #4
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f7ff fd34 	bl	80019d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f6c:	bf00      	nop
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <__NVIC_SetPriorityGrouping+0x40>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f90:	4013      	ands	r3, r2
 8001f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fa2:	4a04      	ldr	r2, [pc, #16]	; (8001fb4 <__NVIC_SetPriorityGrouping+0x40>)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	60d3      	str	r3, [r2, #12]
}
 8001fa8:	bf00      	nop
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000ed00 	.word	0xe000ed00
 8001fb8:	05fa0000 	.word	0x05fa0000

08001fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc0:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	0a1b      	lsrs	r3, r3, #8
 8001fc6:	f003 0307 	and.w	r3, r3, #7
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	db0b      	blt.n	8002002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	f003 021f 	and.w	r2, r3, #31
 8001ff0:	4907      	ldr	r1, [pc, #28]	; (8002010 <__NVIC_EnableIRQ+0x38>)
 8001ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff6:	095b      	lsrs	r3, r3, #5
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8001ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	e000e100 	.word	0xe000e100

08002014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	6039      	str	r1, [r7, #0]
 800201e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002024:	2b00      	cmp	r3, #0
 8002026:	db0a      	blt.n	800203e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	b2da      	uxtb	r2, r3
 800202c:	490c      	ldr	r1, [pc, #48]	; (8002060 <__NVIC_SetPriority+0x4c>)
 800202e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002032:	0112      	lsls	r2, r2, #4
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	440b      	add	r3, r1
 8002038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800203c:	e00a      	b.n	8002054 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	b2da      	uxtb	r2, r3
 8002042:	4908      	ldr	r1, [pc, #32]	; (8002064 <__NVIC_SetPriority+0x50>)
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	3b04      	subs	r3, #4
 800204c:	0112      	lsls	r2, r2, #4
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	440b      	add	r3, r1
 8002052:	761a      	strb	r2, [r3, #24]
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	e000e100 	.word	0xe000e100
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002068:	b480      	push	{r7}
 800206a:	b089      	sub	sp, #36	; 0x24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f1c3 0307 	rsb	r3, r3, #7
 8002082:	2b04      	cmp	r3, #4
 8002084:	bf28      	it	cs
 8002086:	2304      	movcs	r3, #4
 8002088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	3304      	adds	r3, #4
 800208e:	2b06      	cmp	r3, #6
 8002090:	d902      	bls.n	8002098 <NVIC_EncodePriority+0x30>
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3b03      	subs	r3, #3
 8002096:	e000      	b.n	800209a <NVIC_EncodePriority+0x32>
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800209c:	f04f 32ff 	mov.w	r2, #4294967295
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43da      	mvns	r2, r3
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	401a      	ands	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b0:	f04f 31ff 	mov.w	r1, #4294967295
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ba:	43d9      	mvns	r1, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c0:	4313      	orrs	r3, r2
         );
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3724      	adds	r7, #36	; 0x24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
	...

080020d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3b01      	subs	r3, #1
 80020dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020e0:	d301      	bcc.n	80020e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020e2:	2301      	movs	r3, #1
 80020e4:	e00f      	b.n	8002106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020e6:	4a0a      	ldr	r2, [pc, #40]	; (8002110 <SysTick_Config+0x40>)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ee:	210f      	movs	r1, #15
 80020f0:	f04f 30ff 	mov.w	r0, #4294967295
 80020f4:	f7ff ff8e 	bl	8002014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020f8:	4b05      	ldr	r3, [pc, #20]	; (8002110 <SysTick_Config+0x40>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020fe:	4b04      	ldr	r3, [pc, #16]	; (8002110 <SysTick_Config+0x40>)
 8002100:	2207      	movs	r2, #7
 8002102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	e000e010 	.word	0xe000e010

08002114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff ff29 	bl	8001f74 <__NVIC_SetPriorityGrouping>
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800212a:	b580      	push	{r7, lr}
 800212c:	b086      	sub	sp, #24
 800212e:	af00      	add	r7, sp, #0
 8002130:	4603      	mov	r3, r0
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
 8002136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800213c:	f7ff ff3e 	bl	8001fbc <__NVIC_GetPriorityGrouping>
 8002140:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	68b9      	ldr	r1, [r7, #8]
 8002146:	6978      	ldr	r0, [r7, #20]
 8002148:	f7ff ff8e 	bl	8002068 <NVIC_EncodePriority>
 800214c:	4602      	mov	r2, r0
 800214e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002152:	4611      	mov	r1, r2
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ff5d 	bl	8002014 <__NVIC_SetPriority>
}
 800215a:	bf00      	nop
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	4603      	mov	r3, r0
 800216a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800216c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff ff31 	bl	8001fd8 <__NVIC_EnableIRQ>
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff ffa2 	bl	80020d0 <SysTick_Config>
 800218c:	4603      	mov	r3, r0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021a4:	f7ff f9f6 	bl	8001594 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e099      	b.n	80022e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2202      	movs	r2, #2
 80021c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0201 	bic.w	r2, r2, #1
 80021d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021d4:	e00f      	b.n	80021f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021d6:	f7ff f9dd 	bl	8001594 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b05      	cmp	r3, #5
 80021e2:	d908      	bls.n	80021f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2220      	movs	r2, #32
 80021e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2203      	movs	r2, #3
 80021ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e078      	b.n	80022e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1e8      	bne.n	80021d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	4b38      	ldr	r3, [pc, #224]	; (80022f0 <HAL_DMA_Init+0x158>)
 8002210:	4013      	ands	r3, r2
 8002212:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002222:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800222e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800223a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	4313      	orrs	r3, r2
 8002246:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	2b04      	cmp	r3, #4
 800224e:	d107      	bne.n	8002260 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	4313      	orrs	r3, r2
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	4313      	orrs	r3, r2
 800225e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	f023 0307 	bic.w	r3, r3, #7
 8002276:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	4313      	orrs	r3, r2
 8002280:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	2b04      	cmp	r3, #4
 8002288:	d117      	bne.n	80022ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	4313      	orrs	r3, r2
 8002292:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00e      	beq.n	80022ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 fab3 	bl	8002808 <DMA_CheckFifoParam>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d008      	beq.n	80022ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2240      	movs	r2, #64	; 0x40
 80022ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80022b6:	2301      	movs	r3, #1
 80022b8:	e016      	b.n	80022e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 fa6a 	bl	800279c <DMA_CalcBaseAndBitshift>
 80022c8:	4603      	mov	r3, r0
 80022ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d0:	223f      	movs	r2, #63	; 0x3f
 80022d2:	409a      	lsls	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	e010803f 	.word	0xe010803f

080022f4 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
 8002300:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002302:	2300      	movs	r3, #0
 8002304:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_DMA_Start+0x20>
 8002310:	2302      	movs	r3, #2
 8002312:	e026      	b.n	8002362 <HAL_DMA_Start+0x6e>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b01      	cmp	r3, #1
 8002326:	d115      	bne.n	8002354 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2202      	movs	r2, #2
 800232c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	68b9      	ldr	r1, [r7, #8]
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f000 f9ff 	bl	8002740 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f042 0201 	orr.w	r2, r2, #1
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	e005      	b.n	8002360 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800235c:	2302      	movs	r3, #2
 800235e:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8002360:	7dfb      	ldrb	r3, [r7, #23]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b086      	sub	sp, #24
 800236e:	af00      	add	r7, sp, #0
 8002370:	60f8      	str	r0, [r7, #12]
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	607a      	str	r2, [r7, #4]
 8002376:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002380:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002388:	2b01      	cmp	r3, #1
 800238a:	d101      	bne.n	8002390 <HAL_DMA_Start_IT+0x26>
 800238c:	2302      	movs	r3, #2
 800238e:	e048      	b.n	8002422 <HAL_DMA_Start_IT+0xb8>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d137      	bne.n	8002414 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	68b9      	ldr	r1, [r7, #8]
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 f9c1 	bl	8002740 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c2:	223f      	movs	r2, #63	; 0x3f
 80023c4:	409a      	lsls	r2, r3
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f042 0216 	orr.w	r2, r2, #22
 80023d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695a      	ldr	r2, [r3, #20]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023e8:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d007      	beq.n	8002402 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f042 0208 	orr.w	r2, r2, #8
 8002400:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f042 0201 	orr.w	r2, r2, #1
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	e005      	b.n	8002420 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800241c:	2302      	movs	r3, #2
 800241e:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002420:	7dfb      	ldrb	r3, [r7, #23]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002438:	4b92      	ldr	r3, [pc, #584]	; (8002684 <HAL_DMA_IRQHandler+0x258>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a92      	ldr	r2, [pc, #584]	; (8002688 <HAL_DMA_IRQHandler+0x25c>)
 800243e:	fba2 2303 	umull	r2, r3, r2, r3
 8002442:	0a9b      	lsrs	r3, r3, #10
 8002444:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002456:	2208      	movs	r2, #8
 8002458:	409a      	lsls	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4013      	ands	r3, r2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d01a      	beq.n	8002498 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	d013      	beq.n	8002498 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0204 	bic.w	r2, r2, #4
 800247e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002484:	2208      	movs	r2, #8
 8002486:	409a      	lsls	r2, r3
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002490:	f043 0201 	orr.w	r2, r3, #1
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249c:	2201      	movs	r2, #1
 800249e:	409a      	lsls	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4013      	ands	r3, r2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d012      	beq.n	80024ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00b      	beq.n	80024ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ba:	2201      	movs	r2, #1
 80024bc:	409a      	lsls	r2, r3
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c6:	f043 0202 	orr.w	r2, r3, #2
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d2:	2204      	movs	r2, #4
 80024d4:	409a      	lsls	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4013      	ands	r3, r2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d012      	beq.n	8002504 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00b      	beq.n	8002504 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f0:	2204      	movs	r2, #4
 80024f2:	409a      	lsls	r2, r3
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fc:	f043 0204 	orr.w	r2, r3, #4
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002508:	2210      	movs	r2, #16
 800250a:	409a      	lsls	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4013      	ands	r3, r2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d043      	beq.n	800259c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d03c      	beq.n	800259c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002526:	2210      	movs	r2, #16
 8002528:	409a      	lsls	r2, r3
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d018      	beq.n	800256e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d108      	bne.n	800255c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	2b00      	cmp	r3, #0
 8002550:	d024      	beq.n	800259c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	4798      	blx	r3
 800255a:	e01f      	b.n	800259c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002560:	2b00      	cmp	r3, #0
 8002562:	d01b      	beq.n	800259c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	4798      	blx	r3
 800256c:	e016      	b.n	800259c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002578:	2b00      	cmp	r3, #0
 800257a:	d107      	bne.n	800258c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0208 	bic.w	r2, r2, #8
 800258a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a0:	2220      	movs	r2, #32
 80025a2:	409a      	lsls	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 808e 	beq.w	80026ca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0310 	and.w	r3, r3, #16
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 8086 	beq.w	80026ca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c2:	2220      	movs	r2, #32
 80025c4:	409a      	lsls	r2, r3
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b05      	cmp	r3, #5
 80025d4:	d136      	bne.n	8002644 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0216 	bic.w	r2, r2, #22
 80025e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695a      	ldr	r2, [r3, #20]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d103      	bne.n	8002606 <HAL_DMA_IRQHandler+0x1da>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002602:	2b00      	cmp	r3, #0
 8002604:	d007      	beq.n	8002616 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0208 	bic.w	r2, r2, #8
 8002614:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261a:	223f      	movs	r2, #63	; 0x3f
 800261c:	409a      	lsls	r2, r3
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002636:	2b00      	cmp	r3, #0
 8002638:	d07d      	beq.n	8002736 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	4798      	blx	r3
        }
        return;
 8002642:	e078      	b.n	8002736 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d01c      	beq.n	800268c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d108      	bne.n	8002672 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002664:	2b00      	cmp	r3, #0
 8002666:	d030      	beq.n	80026ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	4798      	blx	r3
 8002670:	e02b      	b.n	80026ca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002676:	2b00      	cmp	r3, #0
 8002678:	d027      	beq.n	80026ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	4798      	blx	r3
 8002682:	e022      	b.n	80026ca <HAL_DMA_IRQHandler+0x29e>
 8002684:	20000014 	.word	0x20000014
 8002688:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10f      	bne.n	80026ba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0210 	bic.w	r2, r2, #16
 80026a8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d032      	beq.n	8002738 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d022      	beq.n	8002724 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2205      	movs	r2, #5
 80026e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0201 	bic.w	r2, r2, #1
 80026f4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	3301      	adds	r3, #1
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d307      	bcc.n	8002712 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1f2      	bne.n	80026f6 <HAL_DMA_IRQHandler+0x2ca>
 8002710:	e000      	b.n	8002714 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002712:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	4798      	blx	r3
 8002734:	e000      	b.n	8002738 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002736:	bf00      	nop
    }
  }
}
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop

08002740 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
 800274c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800275c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	2b40      	cmp	r3, #64	; 0x40
 800276c:	d108      	bne.n	8002780 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800277e:	e007      	b.n	8002790 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68ba      	ldr	r2, [r7, #8]
 8002786:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	60da      	str	r2, [r3, #12]
}
 8002790:	bf00      	nop
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	3b10      	subs	r3, #16
 80027ac:	4a13      	ldr	r2, [pc, #76]	; (80027fc <DMA_CalcBaseAndBitshift+0x60>)
 80027ae:	fba2 2303 	umull	r2, r3, r2, r3
 80027b2:	091b      	lsrs	r3, r3, #4
 80027b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027b6:	4a12      	ldr	r2, [pc, #72]	; (8002800 <DMA_CalcBaseAndBitshift+0x64>)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4413      	add	r3, r2
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	461a      	mov	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d908      	bls.n	80027dc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <DMA_CalcBaseAndBitshift+0x68>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	1d1a      	adds	r2, r3, #4
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	659a      	str	r2, [r3, #88]	; 0x58
 80027da:	e006      	b.n	80027ea <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	4b08      	ldr	r3, [pc, #32]	; (8002804 <DMA_CalcBaseAndBitshift+0x68>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	aaaaaaab 	.word	0xaaaaaaab
 8002800:	08005960 	.word	0x08005960
 8002804:	fffffc00 	.word	0xfffffc00

08002808 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002818:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d11f      	bne.n	8002862 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	2b03      	cmp	r3, #3
 8002826:	d855      	bhi.n	80028d4 <DMA_CheckFifoParam+0xcc>
 8002828:	a201      	add	r2, pc, #4	; (adr r2, 8002830 <DMA_CheckFifoParam+0x28>)
 800282a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282e:	bf00      	nop
 8002830:	08002841 	.word	0x08002841
 8002834:	08002853 	.word	0x08002853
 8002838:	08002841 	.word	0x08002841
 800283c:	080028d5 	.word	0x080028d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d045      	beq.n	80028d8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002850:	e042      	b.n	80028d8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800285a:	d13f      	bne.n	80028dc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002860:	e03c      	b.n	80028dc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800286a:	d121      	bne.n	80028b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b03      	cmp	r3, #3
 8002870:	d836      	bhi.n	80028e0 <DMA_CheckFifoParam+0xd8>
 8002872:	a201      	add	r2, pc, #4	; (adr r2, 8002878 <DMA_CheckFifoParam+0x70>)
 8002874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002878:	08002889 	.word	0x08002889
 800287c:	0800288f 	.word	0x0800288f
 8002880:	08002889 	.word	0x08002889
 8002884:	080028a1 	.word	0x080028a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
      break;
 800288c:	e02f      	b.n	80028ee <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002892:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d024      	beq.n	80028e4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800289e:	e021      	b.n	80028e4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028a8:	d11e      	bne.n	80028e8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028ae:	e01b      	b.n	80028e8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d902      	bls.n	80028bc <DMA_CheckFifoParam+0xb4>
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d003      	beq.n	80028c2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028ba:	e018      	b.n	80028ee <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	73fb      	strb	r3, [r7, #15]
      break;
 80028c0:	e015      	b.n	80028ee <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00e      	beq.n	80028ec <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	73fb      	strb	r3, [r7, #15]
      break;
 80028d2:	e00b      	b.n	80028ec <DMA_CheckFifoParam+0xe4>
      break;
 80028d4:	bf00      	nop
 80028d6:	e00a      	b.n	80028ee <DMA_CheckFifoParam+0xe6>
      break;
 80028d8:	bf00      	nop
 80028da:	e008      	b.n	80028ee <DMA_CheckFifoParam+0xe6>
      break;
 80028dc:	bf00      	nop
 80028de:	e006      	b.n	80028ee <DMA_CheckFifoParam+0xe6>
      break;
 80028e0:	bf00      	nop
 80028e2:	e004      	b.n	80028ee <DMA_CheckFifoParam+0xe6>
      break;
 80028e4:	bf00      	nop
 80028e6:	e002      	b.n	80028ee <DMA_CheckFifoParam+0xe6>
      break;   
 80028e8:	bf00      	nop
 80028ea:	e000      	b.n	80028ee <DMA_CheckFifoParam+0xe6>
      break;
 80028ec:	bf00      	nop
    }
  } 
  
  return status; 
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b089      	sub	sp, #36	; 0x24
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002906:	2300      	movs	r3, #0
 8002908:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800290a:	2300      	movs	r3, #0
 800290c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	e169      	b.n	8002bf0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800291c:	2201      	movs	r2, #1
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	429a      	cmp	r2, r3
 8002936:	f040 8158 	bne.w	8002bea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d00b      	beq.n	800295a <HAL_GPIO_Init+0x5e>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d007      	beq.n	800295a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800294e:	2b11      	cmp	r3, #17
 8002950:	d003      	beq.n	800295a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b12      	cmp	r3, #18
 8002958:	d130      	bne.n	80029bc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	2203      	movs	r2, #3
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002990:	2201      	movs	r2, #1
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	091b      	lsrs	r3, r3, #4
 80029a6:	f003 0201 	and.w	r2, r3, #1
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	2203      	movs	r2, #3
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d003      	beq.n	80029fc <HAL_GPIO_Init+0x100>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b12      	cmp	r3, #18
 80029fa:	d123      	bne.n	8002a44 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	08da      	lsrs	r2, r3, #3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3208      	adds	r2, #8
 8002a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	220f      	movs	r2, #15
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	08da      	lsrs	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3208      	adds	r2, #8
 8002a3e:	69b9      	ldr	r1, [r7, #24]
 8002a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	2203      	movs	r2, #3
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 0203 	and.w	r2, r3, #3
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 80b2 	beq.w	8002bea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a86:	4b5f      	ldr	r3, [pc, #380]	; (8002c04 <HAL_GPIO_Init+0x308>)
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	4a5e      	ldr	r2, [pc, #376]	; (8002c04 <HAL_GPIO_Init+0x308>)
 8002a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a90:	6453      	str	r3, [r2, #68]	; 0x44
 8002a92:	4b5c      	ldr	r3, [pc, #368]	; (8002c04 <HAL_GPIO_Init+0x308>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a9e:	4a5a      	ldr	r2, [pc, #360]	; (8002c08 <HAL_GPIO_Init+0x30c>)
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	089b      	lsrs	r3, r3, #2
 8002aa4:	3302      	adds	r3, #2
 8002aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	220f      	movs	r2, #15
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a51      	ldr	r2, [pc, #324]	; (8002c0c <HAL_GPIO_Init+0x310>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d02b      	beq.n	8002b22 <HAL_GPIO_Init+0x226>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a50      	ldr	r2, [pc, #320]	; (8002c10 <HAL_GPIO_Init+0x314>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d025      	beq.n	8002b1e <HAL_GPIO_Init+0x222>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a4f      	ldr	r2, [pc, #316]	; (8002c14 <HAL_GPIO_Init+0x318>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d01f      	beq.n	8002b1a <HAL_GPIO_Init+0x21e>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a4e      	ldr	r2, [pc, #312]	; (8002c18 <HAL_GPIO_Init+0x31c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d019      	beq.n	8002b16 <HAL_GPIO_Init+0x21a>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a4d      	ldr	r2, [pc, #308]	; (8002c1c <HAL_GPIO_Init+0x320>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d013      	beq.n	8002b12 <HAL_GPIO_Init+0x216>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a4c      	ldr	r2, [pc, #304]	; (8002c20 <HAL_GPIO_Init+0x324>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d00d      	beq.n	8002b0e <HAL_GPIO_Init+0x212>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a4b      	ldr	r2, [pc, #300]	; (8002c24 <HAL_GPIO_Init+0x328>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d007      	beq.n	8002b0a <HAL_GPIO_Init+0x20e>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a4a      	ldr	r2, [pc, #296]	; (8002c28 <HAL_GPIO_Init+0x32c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d101      	bne.n	8002b06 <HAL_GPIO_Init+0x20a>
 8002b02:	2307      	movs	r3, #7
 8002b04:	e00e      	b.n	8002b24 <HAL_GPIO_Init+0x228>
 8002b06:	2308      	movs	r3, #8
 8002b08:	e00c      	b.n	8002b24 <HAL_GPIO_Init+0x228>
 8002b0a:	2306      	movs	r3, #6
 8002b0c:	e00a      	b.n	8002b24 <HAL_GPIO_Init+0x228>
 8002b0e:	2305      	movs	r3, #5
 8002b10:	e008      	b.n	8002b24 <HAL_GPIO_Init+0x228>
 8002b12:	2304      	movs	r3, #4
 8002b14:	e006      	b.n	8002b24 <HAL_GPIO_Init+0x228>
 8002b16:	2303      	movs	r3, #3
 8002b18:	e004      	b.n	8002b24 <HAL_GPIO_Init+0x228>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e002      	b.n	8002b24 <HAL_GPIO_Init+0x228>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <HAL_GPIO_Init+0x228>
 8002b22:	2300      	movs	r3, #0
 8002b24:	69fa      	ldr	r2, [r7, #28]
 8002b26:	f002 0203 	and.w	r2, r2, #3
 8002b2a:	0092      	lsls	r2, r2, #2
 8002b2c:	4093      	lsls	r3, r2
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b34:	4934      	ldr	r1, [pc, #208]	; (8002c08 <HAL_GPIO_Init+0x30c>)
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	089b      	lsrs	r3, r3, #2
 8002b3a:	3302      	adds	r3, #2
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b42:	4b3a      	ldr	r3, [pc, #232]	; (8002c2c <HAL_GPIO_Init+0x330>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b66:	4a31      	ldr	r2, [pc, #196]	; (8002c2c <HAL_GPIO_Init+0x330>)
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b6c:	4b2f      	ldr	r3, [pc, #188]	; (8002c2c <HAL_GPIO_Init+0x330>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b90:	4a26      	ldr	r2, [pc, #152]	; (8002c2c <HAL_GPIO_Init+0x330>)
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b96:	4b25      	ldr	r3, [pc, #148]	; (8002c2c <HAL_GPIO_Init+0x330>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bba:	4a1c      	ldr	r2, [pc, #112]	; (8002c2c <HAL_GPIO_Init+0x330>)
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bc0:	4b1a      	ldr	r3, [pc, #104]	; (8002c2c <HAL_GPIO_Init+0x330>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002be4:	4a11      	ldr	r2, [pc, #68]	; (8002c2c <HAL_GPIO_Init+0x330>)
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	3301      	adds	r3, #1
 8002bee:	61fb      	str	r3, [r7, #28]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	2b0f      	cmp	r3, #15
 8002bf4:	f67f ae92 	bls.w	800291c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002bf8:	bf00      	nop
 8002bfa:	3724      	adds	r7, #36	; 0x24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40013800 	.word	0x40013800
 8002c0c:	40020000 	.word	0x40020000
 8002c10:	40020400 	.word	0x40020400
 8002c14:	40020800 	.word	0x40020800
 8002c18:	40020c00 	.word	0x40020c00
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	40021400 	.word	0x40021400
 8002c24:	40021800 	.word	0x40021800
 8002c28:	40021c00 	.word	0x40021c00
 8002c2c:	40013c00 	.word	0x40013c00

08002c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	807b      	strh	r3, [r7, #2]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c40:	787b      	ldrb	r3, [r7, #1]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c46:	887a      	ldrh	r2, [r7, #2]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002c4c:	e003      	b.n	8002c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c4e:	887b      	ldrh	r3, [r7, #2]
 8002c50:	041a      	lsls	r2, r3, #16
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	619a      	str	r2, [r3, #24]
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c64:	b08f      	sub	sp, #60	; 0x3c
 8002c66:	af0a      	add	r7, sp, #40	; 0x28
 8002c68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e116      	b.n	8002ea2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d106      	bne.n	8002c94 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7fe fb1c 	bl	80012cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2203      	movs	r2, #3
 8002c98:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d102      	bne.n	8002cae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f002 fb3e 	bl	8005334 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	603b      	str	r3, [r7, #0]
 8002cbe:	687e      	ldr	r6, [r7, #4]
 8002cc0:	466d      	mov	r5, sp
 8002cc2:	f106 0410 	add.w	r4, r6, #16
 8002cc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ccc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cd6:	1d33      	adds	r3, r6, #4
 8002cd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cda:	6838      	ldr	r0, [r7, #0]
 8002cdc:	f002 facc 	bl	8005278 <USB_CoreInit>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d005      	beq.n	8002cf2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2202      	movs	r2, #2
 8002cea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e0d7      	b.n	8002ea2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f002 fb2c 	bl	8005356 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cfe:	2300      	movs	r3, #0
 8002d00:	73fb      	strb	r3, [r7, #15]
 8002d02:	e04a      	b.n	8002d9a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d04:	7bfa      	ldrb	r2, [r7, #15]
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	1a9b      	subs	r3, r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	333d      	adds	r3, #61	; 0x3d
 8002d14:	2201      	movs	r2, #1
 8002d16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d18:	7bfa      	ldrb	r2, [r7, #15]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	1a9b      	subs	r3, r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	333c      	adds	r3, #60	; 0x3c
 8002d28:	7bfa      	ldrb	r2, [r7, #15]
 8002d2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d2c:	7bfa      	ldrb	r2, [r7, #15]
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
 8002d30:	b298      	uxth	r0, r3
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	1a9b      	subs	r3, r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	3342      	adds	r3, #66	; 0x42
 8002d40:	4602      	mov	r2, r0
 8002d42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d44:	7bfa      	ldrb	r2, [r7, #15]
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	1a9b      	subs	r3, r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	333f      	adds	r3, #63	; 0x3f
 8002d54:	2200      	movs	r2, #0
 8002d56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d58:	7bfa      	ldrb	r2, [r7, #15]
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	3344      	adds	r3, #68	; 0x44
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d6c:	7bfa      	ldrb	r2, [r7, #15]
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	4613      	mov	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	1a9b      	subs	r3, r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	3348      	adds	r3, #72	; 0x48
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d80:	7bfa      	ldrb	r2, [r7, #15]
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	1a9b      	subs	r3, r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	3350      	adds	r3, #80	; 0x50
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	3301      	adds	r3, #1
 8002d98:	73fb      	strb	r3, [r7, #15]
 8002d9a:	7bfa      	ldrb	r2, [r7, #15]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d3af      	bcc.n	8002d04 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002da4:	2300      	movs	r3, #0
 8002da6:	73fb      	strb	r3, [r7, #15]
 8002da8:	e044      	b.n	8002e34 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002daa:	7bfa      	ldrb	r2, [r7, #15]
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	1a9b      	subs	r3, r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002dc0:	7bfa      	ldrb	r2, [r7, #15]
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	1a9b      	subs	r3, r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002dd2:	7bfa      	ldrb	r2, [r7, #15]
 8002dd4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002dd6:	7bfa      	ldrb	r2, [r7, #15]
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	1a9b      	subs	r3, r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	440b      	add	r3, r1
 8002de4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002de8:	2200      	movs	r2, #0
 8002dea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002dec:	7bfa      	ldrb	r2, [r7, #15]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e02:	7bfa      	ldrb	r2, [r7, #15]
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	1a9b      	subs	r3, r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e18:	7bfa      	ldrb	r2, [r7, #15]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	3301      	adds	r3, #1
 8002e32:	73fb      	strb	r3, [r7, #15]
 8002e34:	7bfa      	ldrb	r2, [r7, #15]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d3b5      	bcc.n	8002daa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	603b      	str	r3, [r7, #0]
 8002e44:	687e      	ldr	r6, [r7, #4]
 8002e46:	466d      	mov	r5, sp
 8002e48:	f106 0410 	add.w	r4, r6, #16
 8002e4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e58:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e5c:	1d33      	adds	r3, r6, #4
 8002e5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e60:	6838      	ldr	r0, [r7, #0]
 8002e62:	f002 faa3 	bl	80053ac <USB_DevInit>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d005      	beq.n	8002e78 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e014      	b.n	8002ea2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d102      	bne.n	8002e96 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f80b 	bl	8002eac <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f002 fc55 	bl	800574a <USB_DevDisconnect>

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002eac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002eda:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <HAL_PCDEx_ActivateLPM+0x44>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	10000003 	.word	0x10000003

08002ef4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ef8:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a04      	ldr	r2, [pc, #16]	; (8002f10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f02:	6013      	str	r3, [r2, #0]
}
 8002f04:	bf00      	nop
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40007000 	.word	0x40007000

08002f14 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f1e:	4b23      	ldr	r3, [pc, #140]	; (8002fac <HAL_PWREx_EnableOverDrive+0x98>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	4a22      	ldr	r2, [pc, #136]	; (8002fac <HAL_PWREx_EnableOverDrive+0x98>)
 8002f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f28:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2a:	4b20      	ldr	r3, [pc, #128]	; (8002fac <HAL_PWREx_EnableOverDrive+0x98>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f36:	4b1e      	ldr	r3, [pc, #120]	; (8002fb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a1d      	ldr	r2, [pc, #116]	; (8002fb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f40:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f42:	f7fe fb27 	bl	8001594 <HAL_GetTick>
 8002f46:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f48:	e009      	b.n	8002f5e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f4a:	f7fe fb23 	bl	8001594 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f58:	d901      	bls.n	8002f5e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e022      	b.n	8002fa4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f5e:	4b14      	ldr	r3, [pc, #80]	; (8002fb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f6a:	d1ee      	bne.n	8002f4a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002f6c:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a0f      	ldr	r2, [pc, #60]	; (8002fb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f76:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f78:	f7fe fb0c 	bl	8001594 <HAL_GetTick>
 8002f7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f7e:	e009      	b.n	8002f94 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f80:	f7fe fb08 	bl	8001594 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f8e:	d901      	bls.n	8002f94 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e007      	b.n	8002fa4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f94:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fa0:	d1ee      	bne.n	8002f80 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	40007000 	.word	0x40007000

08002fb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e291      	b.n	80034ee <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 8087 	beq.w	80030e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fd8:	4b96      	ldr	r3, [pc, #600]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 030c 	and.w	r3, r3, #12
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d00c      	beq.n	8002ffe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fe4:	4b93      	ldr	r3, [pc, #588]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 030c 	and.w	r3, r3, #12
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d112      	bne.n	8003016 <HAL_RCC_OscConfig+0x62>
 8002ff0:	4b90      	ldr	r3, [pc, #576]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ffc:	d10b      	bne.n	8003016 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ffe:	4b8d      	ldr	r3, [pc, #564]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d06c      	beq.n	80030e4 <HAL_RCC_OscConfig+0x130>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d168      	bne.n	80030e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e26b      	b.n	80034ee <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800301e:	d106      	bne.n	800302e <HAL_RCC_OscConfig+0x7a>
 8003020:	4b84      	ldr	r3, [pc, #528]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a83      	ldr	r2, [pc, #524]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302a:	6013      	str	r3, [r2, #0]
 800302c:	e02e      	b.n	800308c <HAL_RCC_OscConfig+0xd8>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10c      	bne.n	8003050 <HAL_RCC_OscConfig+0x9c>
 8003036:	4b7f      	ldr	r3, [pc, #508]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a7e      	ldr	r2, [pc, #504]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 800303c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	4b7c      	ldr	r3, [pc, #496]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a7b      	ldr	r2, [pc, #492]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003048:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	e01d      	b.n	800308c <HAL_RCC_OscConfig+0xd8>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003058:	d10c      	bne.n	8003074 <HAL_RCC_OscConfig+0xc0>
 800305a:	4b76      	ldr	r3, [pc, #472]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a75      	ldr	r2, [pc, #468]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	4b73      	ldr	r3, [pc, #460]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a72      	ldr	r2, [pc, #456]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 800306c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e00b      	b.n	800308c <HAL_RCC_OscConfig+0xd8>
 8003074:	4b6f      	ldr	r3, [pc, #444]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a6e      	ldr	r2, [pc, #440]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 800307a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800307e:	6013      	str	r3, [r2, #0]
 8003080:	4b6c      	ldr	r3, [pc, #432]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a6b      	ldr	r2, [pc, #428]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800308a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d013      	beq.n	80030bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7fe fa7e 	bl	8001594 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800309c:	f7fe fa7a 	bl	8001594 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b64      	cmp	r3, #100	; 0x64
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e21f      	b.n	80034ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ae:	4b61      	ldr	r3, [pc, #388]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0f0      	beq.n	800309c <HAL_RCC_OscConfig+0xe8>
 80030ba:	e014      	b.n	80030e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030bc:	f7fe fa6a 	bl	8001594 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c4:	f7fe fa66 	bl	8001594 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b64      	cmp	r3, #100	; 0x64
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e20b      	b.n	80034ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030d6:	4b57      	ldr	r3, [pc, #348]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x110>
 80030e2:	e000      	b.n	80030e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d069      	beq.n	80031c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030f2:	4b50      	ldr	r3, [pc, #320]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 030c 	and.w	r3, r3, #12
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00b      	beq.n	8003116 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030fe:	4b4d      	ldr	r3, [pc, #308]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b08      	cmp	r3, #8
 8003108:	d11c      	bne.n	8003144 <HAL_RCC_OscConfig+0x190>
 800310a:	4b4a      	ldr	r3, [pc, #296]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d116      	bne.n	8003144 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003116:	4b47      	ldr	r3, [pc, #284]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d005      	beq.n	800312e <HAL_RCC_OscConfig+0x17a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d001      	beq.n	800312e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e1df      	b.n	80034ee <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312e:	4b41      	ldr	r3, [pc, #260]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	493d      	ldr	r1, [pc, #244]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 800313e:	4313      	orrs	r3, r2
 8003140:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003142:	e040      	b.n	80031c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d023      	beq.n	8003194 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800314c:	4b39      	ldr	r3, [pc, #228]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a38      	ldr	r2, [pc, #224]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003152:	f043 0301 	orr.w	r3, r3, #1
 8003156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7fe fa1c 	bl	8001594 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003160:	f7fe fa18 	bl	8001594 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e1bd      	b.n	80034ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003172:	4b30      	ldr	r3, [pc, #192]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800317e:	4b2d      	ldr	r3, [pc, #180]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4929      	ldr	r1, [pc, #164]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 800318e:	4313      	orrs	r3, r2
 8003190:	600b      	str	r3, [r1, #0]
 8003192:	e018      	b.n	80031c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003194:	4b27      	ldr	r3, [pc, #156]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a26      	ldr	r2, [pc, #152]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 800319a:	f023 0301 	bic.w	r3, r3, #1
 800319e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a0:	f7fe f9f8 	bl	8001594 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a8:	f7fe f9f4 	bl	8001594 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e199      	b.n	80034ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ba:	4b1e      	ldr	r3, [pc, #120]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1f0      	bne.n	80031a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d038      	beq.n	8003244 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d019      	beq.n	800320e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031da:	4b16      	ldr	r3, [pc, #88]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 80031dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031de:	4a15      	ldr	r2, [pc, #84]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e6:	f7fe f9d5 	bl	8001594 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ee:	f7fe f9d1 	bl	8001594 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e176      	b.n	80034ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003200:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0f0      	beq.n	80031ee <HAL_RCC_OscConfig+0x23a>
 800320c:	e01a      	b.n	8003244 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800320e:	4b09      	ldr	r3, [pc, #36]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003212:	4a08      	ldr	r2, [pc, #32]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003214:	f023 0301 	bic.w	r3, r3, #1
 8003218:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321a:	f7fe f9bb 	bl	8001594 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003220:	e00a      	b.n	8003238 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003222:	f7fe f9b7 	bl	8001594 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d903      	bls.n	8003238 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e15c      	b.n	80034ee <HAL_RCC_OscConfig+0x53a>
 8003234:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003238:	4b91      	ldr	r3, [pc, #580]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 800323a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1ee      	bne.n	8003222 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 80a4 	beq.w	800339a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003252:	4b8b      	ldr	r3, [pc, #556]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10d      	bne.n	800327a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800325e:	4b88      	ldr	r3, [pc, #544]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	4a87      	ldr	r2, [pc, #540]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 8003264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003268:	6413      	str	r3, [r2, #64]	; 0x40
 800326a:	4b85      	ldr	r3, [pc, #532]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003272:	60bb      	str	r3, [r7, #8]
 8003274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003276:	2301      	movs	r3, #1
 8003278:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800327a:	4b82      	ldr	r3, [pc, #520]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003282:	2b00      	cmp	r3, #0
 8003284:	d118      	bne.n	80032b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003286:	4b7f      	ldr	r3, [pc, #508]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a7e      	ldr	r2, [pc, #504]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 800328c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003290:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003292:	f7fe f97f 	bl	8001594 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800329a:	f7fe f97b 	bl	8001594 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b64      	cmp	r3, #100	; 0x64
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e120      	b.n	80034ee <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ac:	4b75      	ldr	r3, [pc, #468]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0f0      	beq.n	800329a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d106      	bne.n	80032ce <HAL_RCC_OscConfig+0x31a>
 80032c0:	4b6f      	ldr	r3, [pc, #444]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 80032c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c4:	4a6e      	ldr	r2, [pc, #440]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	6713      	str	r3, [r2, #112]	; 0x70
 80032cc:	e02d      	b.n	800332a <HAL_RCC_OscConfig+0x376>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10c      	bne.n	80032f0 <HAL_RCC_OscConfig+0x33c>
 80032d6:	4b6a      	ldr	r3, [pc, #424]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 80032d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032da:	4a69      	ldr	r2, [pc, #420]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 80032dc:	f023 0301 	bic.w	r3, r3, #1
 80032e0:	6713      	str	r3, [r2, #112]	; 0x70
 80032e2:	4b67      	ldr	r3, [pc, #412]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 80032e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e6:	4a66      	ldr	r2, [pc, #408]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 80032e8:	f023 0304 	bic.w	r3, r3, #4
 80032ec:	6713      	str	r3, [r2, #112]	; 0x70
 80032ee:	e01c      	b.n	800332a <HAL_RCC_OscConfig+0x376>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	2b05      	cmp	r3, #5
 80032f6:	d10c      	bne.n	8003312 <HAL_RCC_OscConfig+0x35e>
 80032f8:	4b61      	ldr	r3, [pc, #388]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 80032fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fc:	4a60      	ldr	r2, [pc, #384]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 80032fe:	f043 0304 	orr.w	r3, r3, #4
 8003302:	6713      	str	r3, [r2, #112]	; 0x70
 8003304:	4b5e      	ldr	r3, [pc, #376]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 8003306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003308:	4a5d      	ldr	r2, [pc, #372]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	6713      	str	r3, [r2, #112]	; 0x70
 8003310:	e00b      	b.n	800332a <HAL_RCC_OscConfig+0x376>
 8003312:	4b5b      	ldr	r3, [pc, #364]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 8003314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003316:	4a5a      	ldr	r2, [pc, #360]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 8003318:	f023 0301 	bic.w	r3, r3, #1
 800331c:	6713      	str	r3, [r2, #112]	; 0x70
 800331e:	4b58      	ldr	r3, [pc, #352]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 8003320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003322:	4a57      	ldr	r2, [pc, #348]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 8003324:	f023 0304 	bic.w	r3, r3, #4
 8003328:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d015      	beq.n	800335e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003332:	f7fe f92f 	bl	8001594 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003338:	e00a      	b.n	8003350 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800333a:	f7fe f92b 	bl	8001594 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	f241 3288 	movw	r2, #5000	; 0x1388
 8003348:	4293      	cmp	r3, r2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e0ce      	b.n	80034ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003350:	4b4b      	ldr	r3, [pc, #300]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 8003352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0ee      	beq.n	800333a <HAL_RCC_OscConfig+0x386>
 800335c:	e014      	b.n	8003388 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335e:	f7fe f919 	bl	8001594 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003364:	e00a      	b.n	800337c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003366:	f7fe f915 	bl	8001594 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	f241 3288 	movw	r2, #5000	; 0x1388
 8003374:	4293      	cmp	r3, r2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e0b8      	b.n	80034ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800337c:	4b40      	ldr	r3, [pc, #256]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 800337e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1ee      	bne.n	8003366 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003388:	7dfb      	ldrb	r3, [r7, #23]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d105      	bne.n	800339a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800338e:	4b3c      	ldr	r3, [pc, #240]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	4a3b      	ldr	r2, [pc, #236]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 8003394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003398:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 80a4 	beq.w	80034ec <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033a4:	4b36      	ldr	r3, [pc, #216]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 030c 	and.w	r3, r3, #12
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d06b      	beq.n	8003488 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d149      	bne.n	800344c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b8:	4b31      	ldr	r3, [pc, #196]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a30      	ldr	r2, [pc, #192]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 80033be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fe f8e6 	bl	8001594 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033cc:	f7fe f8e2 	bl	8001594 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e087      	b.n	80034ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033de:	4b28      	ldr	r3, [pc, #160]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69da      	ldr	r2, [r3, #28]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	019b      	lsls	r3, r3, #6
 80033fa:	431a      	orrs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	085b      	lsrs	r3, r3, #1
 8003402:	3b01      	subs	r3, #1
 8003404:	041b      	lsls	r3, r3, #16
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340c:	061b      	lsls	r3, r3, #24
 800340e:	4313      	orrs	r3, r2
 8003410:	4a1b      	ldr	r2, [pc, #108]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 8003412:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003416:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003418:	4b19      	ldr	r3, [pc, #100]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a18      	ldr	r2, [pc, #96]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 800341e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003424:	f7fe f8b6 	bl	8001594 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800342c:	f7fe f8b2 	bl	8001594 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e057      	b.n	80034ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800343e:	4b10      	ldr	r3, [pc, #64]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f0      	beq.n	800342c <HAL_RCC_OscConfig+0x478>
 800344a:	e04f      	b.n	80034ec <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344c:	4b0c      	ldr	r3, [pc, #48]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a0b      	ldr	r2, [pc, #44]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 8003452:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003458:	f7fe f89c 	bl	8001594 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003460:	f7fe f898 	bl	8001594 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e03d      	b.n	80034ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003472:	4b03      	ldr	r3, [pc, #12]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0x4ac>
 800347e:	e035      	b.n	80034ec <HAL_RCC_OscConfig+0x538>
 8003480:	40023800 	.word	0x40023800
 8003484:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003488:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <HAL_RCC_OscConfig+0x544>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d028      	beq.n	80034e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d121      	bne.n	80034e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d11a      	bne.n	80034e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034b8:	4013      	ands	r3, r2
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034be:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d111      	bne.n	80034e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ce:	085b      	lsrs	r3, r3, #1
 80034d0:	3b01      	subs	r3, #1
 80034d2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d107      	bne.n	80034e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40023800 	.word	0x40023800

080034fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e0d0      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003514:	4b6a      	ldr	r3, [pc, #424]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 030f 	and.w	r3, r3, #15
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d910      	bls.n	8003544 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003522:	4b67      	ldr	r3, [pc, #412]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f023 020f 	bic.w	r2, r3, #15
 800352a:	4965      	ldr	r1, [pc, #404]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	4313      	orrs	r3, r2
 8003530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003532:	4b63      	ldr	r3, [pc, #396]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d001      	beq.n	8003544 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0b8      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d020      	beq.n	8003592 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800355c:	4b59      	ldr	r3, [pc, #356]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	4a58      	ldr	r2, [pc, #352]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 8003562:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003566:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003574:	4b53      	ldr	r3, [pc, #332]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	4a52      	ldr	r2, [pc, #328]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 800357a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800357e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003580:	4b50      	ldr	r3, [pc, #320]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	494d      	ldr	r1, [pc, #308]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 800358e:	4313      	orrs	r3, r2
 8003590:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d040      	beq.n	8003620 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d107      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a6:	4b47      	ldr	r3, [pc, #284]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d115      	bne.n	80035de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e07f      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d107      	bne.n	80035ce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035be:	4b41      	ldr	r3, [pc, #260]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d109      	bne.n	80035de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e073      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ce:	4b3d      	ldr	r3, [pc, #244]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e06b      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035de:	4b39      	ldr	r3, [pc, #228]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f023 0203 	bic.w	r2, r3, #3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	4936      	ldr	r1, [pc, #216]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035f0:	f7fd ffd0 	bl	8001594 <HAL_GetTick>
 80035f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f6:	e00a      	b.n	800360e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f8:	f7fd ffcc 	bl	8001594 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	f241 3288 	movw	r2, #5000	; 0x1388
 8003606:	4293      	cmp	r3, r2
 8003608:	d901      	bls.n	800360e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e053      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360e:	4b2d      	ldr	r3, [pc, #180]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 020c 	and.w	r2, r3, #12
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	429a      	cmp	r2, r3
 800361e:	d1eb      	bne.n	80035f8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003620:	4b27      	ldr	r3, [pc, #156]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 030f 	and.w	r3, r3, #15
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d210      	bcs.n	8003650 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362e:	4b24      	ldr	r3, [pc, #144]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f023 020f 	bic.w	r2, r3, #15
 8003636:	4922      	ldr	r1, [pc, #136]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	4313      	orrs	r3, r2
 800363c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800363e:	4b20      	ldr	r3, [pc, #128]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d001      	beq.n	8003650 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e032      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800365c:	4b19      	ldr	r3, [pc, #100]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	4916      	ldr	r1, [pc, #88]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 800366a:	4313      	orrs	r3, r2
 800366c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b00      	cmp	r3, #0
 8003678:	d009      	beq.n	800368e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800367a:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	490e      	ldr	r1, [pc, #56]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 800368a:	4313      	orrs	r3, r2
 800368c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800368e:	f000 f821 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 8003692:	4601      	mov	r1, r0
 8003694:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	4a0a      	ldr	r2, [pc, #40]	; (80036c8 <HAL_RCC_ClockConfig+0x1cc>)
 80036a0:	5cd3      	ldrb	r3, [r2, r3]
 80036a2:	fa21 f303 	lsr.w	r3, r1, r3
 80036a6:	4a09      	ldr	r2, [pc, #36]	; (80036cc <HAL_RCC_ClockConfig+0x1d0>)
 80036a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036aa:	4b09      	ldr	r3, [pc, #36]	; (80036d0 <HAL_RCC_ClockConfig+0x1d4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fd ff2c 	bl	800150c <HAL_InitTick>

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40023c00 	.word	0x40023c00
 80036c4:	40023800 	.word	0x40023800
 80036c8:	08005948 	.word	0x08005948
 80036cc:	20000014 	.word	0x20000014
 80036d0:	20000018 	.word	0x20000018

080036d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80036da:	2300      	movs	r3, #0
 80036dc:	607b      	str	r3, [r7, #4]
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	2300      	movs	r3, #0
 80036e4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036ea:	4b63      	ldr	r3, [pc, #396]	; (8003878 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 030c 	and.w	r3, r3, #12
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d007      	beq.n	8003706 <HAL_RCC_GetSysClockFreq+0x32>
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d008      	beq.n	800370c <HAL_RCC_GetSysClockFreq+0x38>
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f040 80b4 	bne.w	8003868 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003700:	4b5e      	ldr	r3, [pc, #376]	; (800387c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003702:	60bb      	str	r3, [r7, #8]
      break;
 8003704:	e0b3      	b.n	800386e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003706:	4b5e      	ldr	r3, [pc, #376]	; (8003880 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003708:	60bb      	str	r3, [r7, #8]
      break;
 800370a:	e0b0      	b.n	800386e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800370c:	4b5a      	ldr	r3, [pc, #360]	; (8003878 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003714:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003716:	4b58      	ldr	r3, [pc, #352]	; (8003878 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d04a      	beq.n	80037b8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003722:	4b55      	ldr	r3, [pc, #340]	; (8003878 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	099b      	lsrs	r3, r3, #6
 8003728:	f04f 0400 	mov.w	r4, #0
 800372c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	ea03 0501 	and.w	r5, r3, r1
 8003738:	ea04 0602 	and.w	r6, r4, r2
 800373c:	4629      	mov	r1, r5
 800373e:	4632      	mov	r2, r6
 8003740:	f04f 0300 	mov.w	r3, #0
 8003744:	f04f 0400 	mov.w	r4, #0
 8003748:	0154      	lsls	r4, r2, #5
 800374a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800374e:	014b      	lsls	r3, r1, #5
 8003750:	4619      	mov	r1, r3
 8003752:	4622      	mov	r2, r4
 8003754:	1b49      	subs	r1, r1, r5
 8003756:	eb62 0206 	sbc.w	r2, r2, r6
 800375a:	f04f 0300 	mov.w	r3, #0
 800375e:	f04f 0400 	mov.w	r4, #0
 8003762:	0194      	lsls	r4, r2, #6
 8003764:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003768:	018b      	lsls	r3, r1, #6
 800376a:	1a5b      	subs	r3, r3, r1
 800376c:	eb64 0402 	sbc.w	r4, r4, r2
 8003770:	f04f 0100 	mov.w	r1, #0
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	00e2      	lsls	r2, r4, #3
 800377a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800377e:	00d9      	lsls	r1, r3, #3
 8003780:	460b      	mov	r3, r1
 8003782:	4614      	mov	r4, r2
 8003784:	195b      	adds	r3, r3, r5
 8003786:	eb44 0406 	adc.w	r4, r4, r6
 800378a:	f04f 0100 	mov.w	r1, #0
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	0262      	lsls	r2, r4, #9
 8003794:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003798:	0259      	lsls	r1, r3, #9
 800379a:	460b      	mov	r3, r1
 800379c:	4614      	mov	r4, r2
 800379e:	4618      	mov	r0, r3
 80037a0:	4621      	mov	r1, r4
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f04f 0400 	mov.w	r4, #0
 80037a8:	461a      	mov	r2, r3
 80037aa:	4623      	mov	r3, r4
 80037ac:	f7fc fd38 	bl	8000220 <__aeabi_uldivmod>
 80037b0:	4603      	mov	r3, r0
 80037b2:	460c      	mov	r4, r1
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	e049      	b.n	800384c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037b8:	4b2f      	ldr	r3, [pc, #188]	; (8003878 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	099b      	lsrs	r3, r3, #6
 80037be:	f04f 0400 	mov.w	r4, #0
 80037c2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	ea03 0501 	and.w	r5, r3, r1
 80037ce:	ea04 0602 	and.w	r6, r4, r2
 80037d2:	4629      	mov	r1, r5
 80037d4:	4632      	mov	r2, r6
 80037d6:	f04f 0300 	mov.w	r3, #0
 80037da:	f04f 0400 	mov.w	r4, #0
 80037de:	0154      	lsls	r4, r2, #5
 80037e0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037e4:	014b      	lsls	r3, r1, #5
 80037e6:	4619      	mov	r1, r3
 80037e8:	4622      	mov	r2, r4
 80037ea:	1b49      	subs	r1, r1, r5
 80037ec:	eb62 0206 	sbc.w	r2, r2, r6
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	f04f 0400 	mov.w	r4, #0
 80037f8:	0194      	lsls	r4, r2, #6
 80037fa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037fe:	018b      	lsls	r3, r1, #6
 8003800:	1a5b      	subs	r3, r3, r1
 8003802:	eb64 0402 	sbc.w	r4, r4, r2
 8003806:	f04f 0100 	mov.w	r1, #0
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	00e2      	lsls	r2, r4, #3
 8003810:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003814:	00d9      	lsls	r1, r3, #3
 8003816:	460b      	mov	r3, r1
 8003818:	4614      	mov	r4, r2
 800381a:	195b      	adds	r3, r3, r5
 800381c:	eb44 0406 	adc.w	r4, r4, r6
 8003820:	f04f 0100 	mov.w	r1, #0
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	02a2      	lsls	r2, r4, #10
 800382a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800382e:	0299      	lsls	r1, r3, #10
 8003830:	460b      	mov	r3, r1
 8003832:	4614      	mov	r4, r2
 8003834:	4618      	mov	r0, r3
 8003836:	4621      	mov	r1, r4
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f04f 0400 	mov.w	r4, #0
 800383e:	461a      	mov	r2, r3
 8003840:	4623      	mov	r3, r4
 8003842:	f7fc fced 	bl	8000220 <__aeabi_uldivmod>
 8003846:	4603      	mov	r3, r0
 8003848:	460c      	mov	r4, r1
 800384a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800384c:	4b0a      	ldr	r3, [pc, #40]	; (8003878 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	0c1b      	lsrs	r3, r3, #16
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	3301      	adds	r3, #1
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	fbb2 f3f3 	udiv	r3, r2, r3
 8003864:	60bb      	str	r3, [r7, #8]
      break;
 8003866:	e002      	b.n	800386e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003868:	4b04      	ldr	r3, [pc, #16]	; (800387c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800386a:	60bb      	str	r3, [r7, #8]
      break;
 800386c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800386e:	68bb      	ldr	r3, [r7, #8]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003878:	40023800 	.word	0x40023800
 800387c:	00f42400 	.word	0x00f42400
 8003880:	007a1200 	.word	0x007a1200

08003884 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003888:	4b03      	ldr	r3, [pc, #12]	; (8003898 <HAL_RCC_GetHCLKFreq+0x14>)
 800388a:	681b      	ldr	r3, [r3, #0]
}
 800388c:	4618      	mov	r0, r3
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	20000014 	.word	0x20000014

0800389c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038a0:	f7ff fff0 	bl	8003884 <HAL_RCC_GetHCLKFreq>
 80038a4:	4601      	mov	r1, r0
 80038a6:	4b05      	ldr	r3, [pc, #20]	; (80038bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	0a9b      	lsrs	r3, r3, #10
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	4a03      	ldr	r2, [pc, #12]	; (80038c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038b2:	5cd3      	ldrb	r3, [r2, r3]
 80038b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40023800 	.word	0x40023800
 80038c0:	08005958 	.word	0x08005958

080038c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038c8:	f7ff ffdc 	bl	8003884 <HAL_RCC_GetHCLKFreq>
 80038cc:	4601      	mov	r1, r0
 80038ce:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	0b5b      	lsrs	r3, r3, #13
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	4a03      	ldr	r2, [pc, #12]	; (80038e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038da:	5cd3      	ldrb	r3, [r2, r3]
 80038dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40023800 	.word	0x40023800
 80038e8:	08005958 	.word	0x08005958

080038ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b088      	sub	sp, #32
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80038f4:	2300      	movs	r3, #0
 80038f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80038f8:	2300      	movs	r3, #0
 80038fa:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80038fc:	2300      	movs	r3, #0
 80038fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003900:	2300      	movs	r3, #0
 8003902:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b00      	cmp	r3, #0
 800390e:	d012      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003910:	4b65      	ldr	r3, [pc, #404]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	4a64      	ldr	r2, [pc, #400]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003916:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800391a:	6093      	str	r3, [r2, #8]
 800391c:	4b62      	ldr	r3, [pc, #392]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003924:	4960      	ldr	r1, [pc, #384]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003926:	4313      	orrs	r3, r2
 8003928:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8003932:	2301      	movs	r3, #1
 8003934:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d017      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003942:	4b59      	ldr	r3, [pc, #356]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003948:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003950:	4955      	ldr	r1, [pc, #340]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800395c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003960:	d101      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8003962:	2301      	movs	r3, #1
 8003964:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800396e:	2301      	movs	r3, #1
 8003970:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d017      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800397e:	4b4a      	ldr	r3, [pc, #296]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003984:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398c:	4946      	ldr	r1, [pc, #280]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003998:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800399c:	d101      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800399e:	2301      	movs	r3, #1
 80039a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80039aa:	2301      	movs	r3, #1
 80039ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0320 	and.w	r3, r3, #32
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 808b 	beq.w	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80039bc:	4b3a      	ldr	r3, [pc, #232]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	4a39      	ldr	r2, [pc, #228]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c6:	6413      	str	r3, [r2, #64]	; 0x40
 80039c8:	4b37      	ldr	r3, [pc, #220]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039d4:	4b35      	ldr	r3, [pc, #212]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a34      	ldr	r2, [pc, #208]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80039da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039e0:	f7fd fdd8 	bl	8001594 <HAL_GetTick>
 80039e4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e8:	f7fd fdd4 	bl	8001594 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b64      	cmp	r3, #100	; 0x64
 80039f4:	d901      	bls.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e2ba      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039fa:	4b2c      	ldr	r3, [pc, #176]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0f0      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a06:	4b28      	ldr	r3, [pc, #160]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a0e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d035      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d02e      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a24:	4b20      	ldr	r3, [pc, #128]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a2c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a2e:	4b1e      	ldr	r3, [pc, #120]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a32:	4a1d      	ldr	r2, [pc, #116]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a38:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a3a:	4b1b      	ldr	r3, [pc, #108]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3e:	4a1a      	ldr	r2, [pc, #104]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a44:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003a46:	4a18      	ldr	r2, [pc, #96]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a4c:	4b16      	ldr	r3, [pc, #88]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d114      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a58:	f7fd fd9c 	bl	8001594 <HAL_GetTick>
 8003a5c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a5e:	e00a      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a60:	f7fd fd98 	bl	8001594 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e27c      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a76:	4b0c      	ldr	r3, [pc, #48]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0ee      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a8e:	d111      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8003a90:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003a9c:	4b04      	ldr	r3, [pc, #16]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003a9e:	400b      	ands	r3, r1
 8003aa0:	4901      	ldr	r1, [pc, #4]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	608b      	str	r3, [r1, #8]
 8003aa6:	e00b      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	40007000 	.word	0x40007000
 8003ab0:	0ffffcff 	.word	0x0ffffcff
 8003ab4:	4ba3      	ldr	r3, [pc, #652]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	4aa2      	ldr	r2, [pc, #648]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003aba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003abe:	6093      	str	r3, [r2, #8]
 8003ac0:	4ba0      	ldr	r3, [pc, #640]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003ac2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003acc:	499d      	ldr	r1, [pc, #628]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0310 	and.w	r3, r3, #16
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d010      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ade:	4b99      	ldr	r3, [pc, #612]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ae4:	4a97      	ldr	r2, [pc, #604]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003aee:	4b95      	ldr	r3, [pc, #596]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003af0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af8:	4992      	ldr	r1, [pc, #584]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00a      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b0c:	4b8d      	ldr	r3, [pc, #564]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b1a:	498a      	ldr	r1, [pc, #552]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b2e:	4b85      	ldr	r3, [pc, #532]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b3c:	4981      	ldr	r1, [pc, #516]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b50:	4b7c      	ldr	r3, [pc, #496]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b5e:	4979      	ldr	r1, [pc, #484]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b72:	4b74      	ldr	r3, [pc, #464]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b78:	f023 0203 	bic.w	r2, r3, #3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b80:	4970      	ldr	r1, [pc, #448]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00a      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b94:	4b6b      	ldr	r3, [pc, #428]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9a:	f023 020c 	bic.w	r2, r3, #12
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	4968      	ldr	r1, [pc, #416]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bb6:	4b63      	ldr	r3, [pc, #396]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bbc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc4:	495f      	ldr	r1, [pc, #380]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00a      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bd8:	4b5a      	ldr	r3, [pc, #360]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bde:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be6:	4957      	ldr	r1, [pc, #348]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bfa:	4b52      	ldr	r3, [pc, #328]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c08:	494e      	ldr	r1, [pc, #312]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003c1c:	4b49      	ldr	r3, [pc, #292]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c2a:	4946      	ldr	r1, [pc, #280]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003c3e:	4b41      	ldr	r3, [pc, #260]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4c:	493d      	ldr	r1, [pc, #244]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00a      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c60:	4b38      	ldr	r3, [pc, #224]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6e:	4935      	ldr	r1, [pc, #212]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d011      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c82:	4b30      	ldr	r3, [pc, #192]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c88:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c90:	492c      	ldr	r1, [pc, #176]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cb2:	4b24      	ldr	r3, [pc, #144]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cc0:	4920      	ldr	r1, [pc, #128]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00a      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003cd4:	4b1b      	ldr	r3, [pc, #108]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cda:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ce2:	4918      	ldr	r1, [pc, #96]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003cf6:	4b13      	ldr	r3, [pc, #76]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d04:	490f      	ldr	r1, [pc, #60]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d005      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d1a:	f040 809c 	bne.w	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d1e:	4b09      	ldr	r3, [pc, #36]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a08      	ldr	r2, [pc, #32]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003d24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d2a:	f7fd fc33 	bl	8001594 <HAL_GetTick>
 8003d2e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d30:	e00a      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d32:	f7fd fc2f 	bl	8001594 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b64      	cmp	r3, #100	; 0x64
 8003d3e:	d903      	bls.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e115      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8003d44:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d48:	4b8b      	ldr	r3, [pc, #556]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1ee      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d017      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d113      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d68:	4b83      	ldr	r3, [pc, #524]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d6e:	0e1b      	lsrs	r3, r3, #24
 8003d70:	f003 030f 	and.w	r3, r3, #15
 8003d74:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	019a      	lsls	r2, r3, #6
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	061b      	lsls	r3, r3, #24
 8003d80:	431a      	orrs	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	071b      	lsls	r3, r3, #28
 8003d88:	497b      	ldr	r1, [pc, #492]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d004      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003da4:	d00a      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d024      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dba:	d11f      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003dbc:	4b6e      	ldr	r3, [pc, #440]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc2:	0f1b      	lsrs	r3, r3, #28
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	019a      	lsls	r2, r3, #6
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	061b      	lsls	r3, r3, #24
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	071b      	lsls	r3, r3, #28
 8003ddc:	4966      	ldr	r1, [pc, #408]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003de4:	4b64      	ldr	r3, [pc, #400]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dea:	f023 021f 	bic.w	r2, r3, #31
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	4960      	ldr	r1, [pc, #384]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00d      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	019a      	lsls	r2, r3, #6
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	061b      	lsls	r3, r3, #24
 8003e14:	431a      	orrs	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	071b      	lsls	r3, r3, #28
 8003e1c:	4956      	ldr	r1, [pc, #344]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e24:	4b54      	ldr	r3, [pc, #336]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a53      	ldr	r2, [pc, #332]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003e2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e30:	f7fd fbb0 	bl	8001594 <HAL_GetTick>
 8003e34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e36:	e008      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e38:	f7fd fbac 	bl	8001594 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b64      	cmp	r3, #100	; 0x64
 8003e44:	d901      	bls.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e092      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e4a:	4b4b      	ldr	r3, [pc, #300]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0f0      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	f040 8088 	bne.w	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003e5e:	4b46      	ldr	r3, [pc, #280]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a45      	ldr	r2, [pc, #276]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003e64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e6a:	f7fd fb93 	bl	8001594 <HAL_GetTick>
 8003e6e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e70:	e008      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e72:	f7fd fb8f 	bl	8001594 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b64      	cmp	r3, #100	; 0x64
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e075      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e84:	4b3c      	ldr	r3, [pc, #240]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e90:	d0ef      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d009      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d024      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d120      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003eba:	4b2f      	ldr	r3, [pc, #188]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec0:	0c1b      	lsrs	r3, r3, #16
 8003ec2:	f003 0303 	and.w	r3, r3, #3
 8003ec6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	019a      	lsls	r2, r3, #6
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	041b      	lsls	r3, r3, #16
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	061b      	lsls	r3, r3, #24
 8003eda:	4927      	ldr	r1, [pc, #156]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003ee2:	4b25      	ldr	r3, [pc, #148]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ee8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	021b      	lsls	r3, r3, #8
 8003ef4:	4920      	ldr	r1, [pc, #128]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d018      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f10:	d113      	bne.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f12:	4b19      	ldr	r3, [pc, #100]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f18:	0e1b      	lsrs	r3, r3, #24
 8003f1a:	f003 030f 	and.w	r3, r3, #15
 8003f1e:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	019a      	lsls	r2, r3, #6
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	041b      	lsls	r3, r3, #16
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	061b      	lsls	r3, r3, #24
 8003f32:	4911      	ldr	r1, [pc, #68]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003f3a:	4b0f      	ldr	r3, [pc, #60]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a0e      	ldr	r2, [pc, #56]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f46:	f7fd fb25 	bl	8001594 <HAL_GetTick>
 8003f4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f4e:	f7fd fb21 	bl	8001594 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b64      	cmp	r3, #100	; 0x64
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e007      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f60:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f6c:	d1ef      	bne.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3720      	adds	r7, #32
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40023800 	.word	0x40023800

08003f7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e01d      	b.n	8003fca <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fd f8f6 	bl	8001194 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4610      	mov	r0, r2
 8003fbc:	f000 f966 	bl	800428c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
	...

08003fd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	6839      	ldr	r1, [r7, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 fc4e 	bl	8004888 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a17      	ldr	r2, [pc, #92]	; (8004050 <HAL_TIM_PWM_Start+0x7c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d004      	beq.n	8004000 <HAL_TIM_PWM_Start+0x2c>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a16      	ldr	r2, [pc, #88]	; (8004054 <HAL_TIM_PWM_Start+0x80>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d101      	bne.n	8004004 <HAL_TIM_PWM_Start+0x30>
 8004000:	2301      	movs	r3, #1
 8004002:	e000      	b.n	8004006 <HAL_TIM_PWM_Start+0x32>
 8004004:	2300      	movs	r3, #0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d007      	beq.n	800401a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004018:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	4b0d      	ldr	r3, [pc, #52]	; (8004058 <HAL_TIM_PWM_Start+0x84>)
 8004022:	4013      	ands	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b06      	cmp	r3, #6
 800402a:	d00b      	beq.n	8004044 <HAL_TIM_PWM_Start+0x70>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004032:	d007      	beq.n	8004044 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0201 	orr.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40010000 	.word	0x40010000
 8004054:	40010400 	.word	0x40010400
 8004058:	00010007 	.word	0x00010007

0800405c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800406e:	2b01      	cmp	r3, #1
 8004070:	d101      	bne.n	8004076 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004072:	2302      	movs	r3, #2
 8004074:	e105      	b.n	8004282 <HAL_TIM_PWM_ConfigChannel+0x226>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2202      	movs	r2, #2
 8004082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b14      	cmp	r3, #20
 800408a:	f200 80f0 	bhi.w	800426e <HAL_TIM_PWM_ConfigChannel+0x212>
 800408e:	a201      	add	r2, pc, #4	; (adr r2, 8004094 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004094:	080040e9 	.word	0x080040e9
 8004098:	0800426f 	.word	0x0800426f
 800409c:	0800426f 	.word	0x0800426f
 80040a0:	0800426f 	.word	0x0800426f
 80040a4:	08004129 	.word	0x08004129
 80040a8:	0800426f 	.word	0x0800426f
 80040ac:	0800426f 	.word	0x0800426f
 80040b0:	0800426f 	.word	0x0800426f
 80040b4:	0800416b 	.word	0x0800416b
 80040b8:	0800426f 	.word	0x0800426f
 80040bc:	0800426f 	.word	0x0800426f
 80040c0:	0800426f 	.word	0x0800426f
 80040c4:	080041ab 	.word	0x080041ab
 80040c8:	0800426f 	.word	0x0800426f
 80040cc:	0800426f 	.word	0x0800426f
 80040d0:	0800426f 	.word	0x0800426f
 80040d4:	080041ed 	.word	0x080041ed
 80040d8:	0800426f 	.word	0x0800426f
 80040dc:	0800426f 	.word	0x0800426f
 80040e0:	0800426f 	.word	0x0800426f
 80040e4:	0800422d 	.word	0x0800422d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68b9      	ldr	r1, [r7, #8]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 f96c 	bl	80043cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699a      	ldr	r2, [r3, #24]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0208 	orr.w	r2, r2, #8
 8004102:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699a      	ldr	r2, [r3, #24]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0204 	bic.w	r2, r2, #4
 8004112:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6999      	ldr	r1, [r3, #24]
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	691a      	ldr	r2, [r3, #16]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	619a      	str	r2, [r3, #24]
      break;
 8004126:	e0a3      	b.n	8004270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68b9      	ldr	r1, [r7, #8]
 800412e:	4618      	mov	r0, r3
 8004130:	f000 f9be 	bl	80044b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699a      	ldr	r2, [r3, #24]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004142:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699a      	ldr	r2, [r3, #24]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004152:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6999      	ldr	r1, [r3, #24]
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	021a      	lsls	r2, r3, #8
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	619a      	str	r2, [r3, #24]
      break;
 8004168:	e082      	b.n	8004270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68b9      	ldr	r1, [r7, #8]
 8004170:	4618      	mov	r0, r3
 8004172:	f000 fa15 	bl	80045a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	69da      	ldr	r2, [r3, #28]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f042 0208 	orr.w	r2, r2, #8
 8004184:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	69da      	ldr	r2, [r3, #28]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 0204 	bic.w	r2, r2, #4
 8004194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69d9      	ldr	r1, [r3, #28]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	691a      	ldr	r2, [r3, #16]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	61da      	str	r2, [r3, #28]
      break;
 80041a8:	e062      	b.n	8004270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68b9      	ldr	r1, [r7, #8]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 fa6b 	bl	800468c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	69da      	ldr	r2, [r3, #28]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69da      	ldr	r2, [r3, #28]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	69d9      	ldr	r1, [r3, #28]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	021a      	lsls	r2, r3, #8
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	61da      	str	r2, [r3, #28]
      break;
 80041ea:	e041      	b.n	8004270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68b9      	ldr	r1, [r7, #8]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 faa2 	bl	800473c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0208 	orr.w	r2, r2, #8
 8004206:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0204 	bic.w	r2, r2, #4
 8004216:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	691a      	ldr	r2, [r3, #16]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800422a:	e021      	b.n	8004270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68b9      	ldr	r1, [r7, #8]
 8004232:	4618      	mov	r0, r3
 8004234:	f000 fad4 	bl	80047e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004246:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004256:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	021a      	lsls	r2, r3, #8
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800426c:	e000      	b.n	8004270 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800426e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop

0800428c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a40      	ldr	r2, [pc, #256]	; (80043a0 <TIM_Base_SetConfig+0x114>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d013      	beq.n	80042cc <TIM_Base_SetConfig+0x40>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042aa:	d00f      	beq.n	80042cc <TIM_Base_SetConfig+0x40>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a3d      	ldr	r2, [pc, #244]	; (80043a4 <TIM_Base_SetConfig+0x118>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d00b      	beq.n	80042cc <TIM_Base_SetConfig+0x40>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a3c      	ldr	r2, [pc, #240]	; (80043a8 <TIM_Base_SetConfig+0x11c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d007      	beq.n	80042cc <TIM_Base_SetConfig+0x40>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a3b      	ldr	r2, [pc, #236]	; (80043ac <TIM_Base_SetConfig+0x120>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d003      	beq.n	80042cc <TIM_Base_SetConfig+0x40>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a3a      	ldr	r2, [pc, #232]	; (80043b0 <TIM_Base_SetConfig+0x124>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d108      	bne.n	80042de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	4313      	orrs	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a2f      	ldr	r2, [pc, #188]	; (80043a0 <TIM_Base_SetConfig+0x114>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d02b      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ec:	d027      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a2c      	ldr	r2, [pc, #176]	; (80043a4 <TIM_Base_SetConfig+0x118>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d023      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a2b      	ldr	r2, [pc, #172]	; (80043a8 <TIM_Base_SetConfig+0x11c>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d01f      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a2a      	ldr	r2, [pc, #168]	; (80043ac <TIM_Base_SetConfig+0x120>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d01b      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a29      	ldr	r2, [pc, #164]	; (80043b0 <TIM_Base_SetConfig+0x124>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d017      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a28      	ldr	r2, [pc, #160]	; (80043b4 <TIM_Base_SetConfig+0x128>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d013      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a27      	ldr	r2, [pc, #156]	; (80043b8 <TIM_Base_SetConfig+0x12c>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d00f      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a26      	ldr	r2, [pc, #152]	; (80043bc <TIM_Base_SetConfig+0x130>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d00b      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a25      	ldr	r2, [pc, #148]	; (80043c0 <TIM_Base_SetConfig+0x134>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d007      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a24      	ldr	r2, [pc, #144]	; (80043c4 <TIM_Base_SetConfig+0x138>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d003      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a23      	ldr	r2, [pc, #140]	; (80043c8 <TIM_Base_SetConfig+0x13c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d108      	bne.n	8004350 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	4313      	orrs	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a0a      	ldr	r2, [pc, #40]	; (80043a0 <TIM_Base_SetConfig+0x114>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d003      	beq.n	8004384 <TIM_Base_SetConfig+0xf8>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a0c      	ldr	r2, [pc, #48]	; (80043b0 <TIM_Base_SetConfig+0x124>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d103      	bne.n	800438c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	615a      	str	r2, [r3, #20]
}
 8004392:	bf00      	nop
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40010000 	.word	0x40010000
 80043a4:	40000400 	.word	0x40000400
 80043a8:	40000800 	.word	0x40000800
 80043ac:	40000c00 	.word	0x40000c00
 80043b0:	40010400 	.word	0x40010400
 80043b4:	40014000 	.word	0x40014000
 80043b8:	40014400 	.word	0x40014400
 80043bc:	40014800 	.word	0x40014800
 80043c0:	40001800 	.word	0x40001800
 80043c4:	40001c00 	.word	0x40001c00
 80043c8:	40002000 	.word	0x40002000

080043cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	f023 0201 	bic.w	r2, r3, #1
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	4b2b      	ldr	r3, [pc, #172]	; (80044a4 <TIM_OC1_SetConfig+0xd8>)
 80043f8:	4013      	ands	r3, r2
 80043fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 0303 	bic.w	r3, r3, #3
 8004402:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	4313      	orrs	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f023 0302 	bic.w	r3, r3, #2
 8004414:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	4313      	orrs	r3, r2
 800441e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a21      	ldr	r2, [pc, #132]	; (80044a8 <TIM_OC1_SetConfig+0xdc>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d003      	beq.n	8004430 <TIM_OC1_SetConfig+0x64>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a20      	ldr	r2, [pc, #128]	; (80044ac <TIM_OC1_SetConfig+0xe0>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d10c      	bne.n	800444a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	f023 0308 	bic.w	r3, r3, #8
 8004436:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	4313      	orrs	r3, r2
 8004440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f023 0304 	bic.w	r3, r3, #4
 8004448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a16      	ldr	r2, [pc, #88]	; (80044a8 <TIM_OC1_SetConfig+0xdc>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d003      	beq.n	800445a <TIM_OC1_SetConfig+0x8e>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a15      	ldr	r2, [pc, #84]	; (80044ac <TIM_OC1_SetConfig+0xe0>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d111      	bne.n	800447e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004460:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004468:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	4313      	orrs	r3, r2
 8004472:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	4313      	orrs	r3, r2
 800447c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	621a      	str	r2, [r3, #32]
}
 8004498:	bf00      	nop
 800449a:	371c      	adds	r7, #28
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	fffeff8f 	.word	0xfffeff8f
 80044a8:	40010000 	.word	0x40010000
 80044ac:	40010400 	.word	0x40010400

080044b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	f023 0210 	bic.w	r2, r3, #16
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	4b2e      	ldr	r3, [pc, #184]	; (8004594 <TIM_OC2_SetConfig+0xe4>)
 80044dc:	4013      	ands	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	021b      	lsls	r3, r3, #8
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f023 0320 	bic.w	r3, r3, #32
 80044fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	011b      	lsls	r3, r3, #4
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	4313      	orrs	r3, r2
 8004506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a23      	ldr	r2, [pc, #140]	; (8004598 <TIM_OC2_SetConfig+0xe8>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d003      	beq.n	8004518 <TIM_OC2_SetConfig+0x68>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a22      	ldr	r2, [pc, #136]	; (800459c <TIM_OC2_SetConfig+0xec>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d10d      	bne.n	8004534 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800451e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	011b      	lsls	r3, r3, #4
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	4313      	orrs	r3, r2
 800452a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004532:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a18      	ldr	r2, [pc, #96]	; (8004598 <TIM_OC2_SetConfig+0xe8>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d003      	beq.n	8004544 <TIM_OC2_SetConfig+0x94>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a17      	ldr	r2, [pc, #92]	; (800459c <TIM_OC2_SetConfig+0xec>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d113      	bne.n	800456c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800454a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004552:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	4313      	orrs	r3, r2
 800455e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	4313      	orrs	r3, r2
 800456a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	621a      	str	r2, [r3, #32]
}
 8004586:	bf00      	nop
 8004588:	371c      	adds	r7, #28
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	feff8fff 	.word	0xfeff8fff
 8004598:	40010000 	.word	0x40010000
 800459c:	40010400 	.word	0x40010400

080045a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	4b2d      	ldr	r3, [pc, #180]	; (8004680 <TIM_OC3_SetConfig+0xe0>)
 80045cc:	4013      	ands	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f023 0303 	bic.w	r3, r3, #3
 80045d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	4313      	orrs	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	021b      	lsls	r3, r3, #8
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a22      	ldr	r2, [pc, #136]	; (8004684 <TIM_OC3_SetConfig+0xe4>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d003      	beq.n	8004606 <TIM_OC3_SetConfig+0x66>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a21      	ldr	r2, [pc, #132]	; (8004688 <TIM_OC3_SetConfig+0xe8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d10d      	bne.n	8004622 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800460c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	021b      	lsls	r3, r3, #8
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	4313      	orrs	r3, r2
 8004618:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004620:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a17      	ldr	r2, [pc, #92]	; (8004684 <TIM_OC3_SetConfig+0xe4>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d003      	beq.n	8004632 <TIM_OC3_SetConfig+0x92>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a16      	ldr	r2, [pc, #88]	; (8004688 <TIM_OC3_SetConfig+0xe8>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d113      	bne.n	800465a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	4313      	orrs	r3, r2
 8004658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	621a      	str	r2, [r3, #32]
}
 8004674:	bf00      	nop
 8004676:	371c      	adds	r7, #28
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	fffeff8f 	.word	0xfffeff8f
 8004684:	40010000 	.word	0x40010000
 8004688:	40010400 	.word	0x40010400

0800468c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	4b1e      	ldr	r3, [pc, #120]	; (8004730 <TIM_OC4_SetConfig+0xa4>)
 80046b8:	4013      	ands	r3, r2
 80046ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	021b      	lsls	r3, r3, #8
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	031b      	lsls	r3, r3, #12
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a13      	ldr	r2, [pc, #76]	; (8004734 <TIM_OC4_SetConfig+0xa8>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d003      	beq.n	80046f4 <TIM_OC4_SetConfig+0x68>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a12      	ldr	r2, [pc, #72]	; (8004738 <TIM_OC4_SetConfig+0xac>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d109      	bne.n	8004708 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	019b      	lsls	r3, r3, #6
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	4313      	orrs	r3, r2
 8004706:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	621a      	str	r2, [r3, #32]
}
 8004722:	bf00      	nop
 8004724:	371c      	adds	r7, #28
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	feff8fff 	.word	0xfeff8fff
 8004734:	40010000 	.word	0x40010000
 8004738:	40010400 	.word	0x40010400

0800473c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	4b1b      	ldr	r3, [pc, #108]	; (80047d4 <TIM_OC5_SetConfig+0x98>)
 8004768:	4013      	ands	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	4313      	orrs	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800477c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	041b      	lsls	r3, r3, #16
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4313      	orrs	r3, r2
 8004788:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a12      	ldr	r2, [pc, #72]	; (80047d8 <TIM_OC5_SetConfig+0x9c>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d003      	beq.n	800479a <TIM_OC5_SetConfig+0x5e>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a11      	ldr	r2, [pc, #68]	; (80047dc <TIM_OC5_SetConfig+0xa0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d109      	bne.n	80047ae <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	021b      	lsls	r3, r3, #8
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	621a      	str	r2, [r3, #32]
}
 80047c8:	bf00      	nop
 80047ca:	371c      	adds	r7, #28
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	fffeff8f 	.word	0xfffeff8f
 80047d8:	40010000 	.word	0x40010000
 80047dc:	40010400 	.word	0x40010400

080047e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	4b1c      	ldr	r3, [pc, #112]	; (800487c <TIM_OC6_SetConfig+0x9c>)
 800480c:	4013      	ands	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	021b      	lsls	r3, r3, #8
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	4313      	orrs	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004822:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	051b      	lsls	r3, r3, #20
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	4313      	orrs	r3, r2
 800482e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a13      	ldr	r2, [pc, #76]	; (8004880 <TIM_OC6_SetConfig+0xa0>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d003      	beq.n	8004840 <TIM_OC6_SetConfig+0x60>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a12      	ldr	r2, [pc, #72]	; (8004884 <TIM_OC6_SetConfig+0xa4>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d109      	bne.n	8004854 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004846:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	029b      	lsls	r3, r3, #10
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4313      	orrs	r3, r2
 8004852:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	621a      	str	r2, [r3, #32]
}
 800486e:	bf00      	nop
 8004870:	371c      	adds	r7, #28
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	feff8fff 	.word	0xfeff8fff
 8004880:	40010000 	.word	0x40010000
 8004884:	40010400 	.word	0x40010400

08004888 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f003 031f 	and.w	r3, r3, #31
 800489a:	2201      	movs	r2, #1
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6a1a      	ldr	r2, [r3, #32]
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	43db      	mvns	r3, r3
 80048aa:	401a      	ands	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a1a      	ldr	r2, [r3, #32]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f003 031f 	and.w	r3, r3, #31
 80048ba:	6879      	ldr	r1, [r7, #4]
 80048bc:	fa01 f303 	lsl.w	r3, r1, r3
 80048c0:	431a      	orrs	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	621a      	str	r2, [r3, #32]
}
 80048c6:	bf00      	nop
 80048c8:	371c      	adds	r7, #28
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
	...

080048d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d101      	bne.n	80048ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048e8:	2302      	movs	r3, #2
 80048ea:	e06d      	b.n	80049c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a30      	ldr	r2, [pc, #192]	; (80049d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d004      	beq.n	8004920 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a2f      	ldr	r2, [pc, #188]	; (80049d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d108      	bne.n	8004932 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004926:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	4313      	orrs	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004938:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	4313      	orrs	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a20      	ldr	r2, [pc, #128]	; (80049d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d022      	beq.n	800499c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800495e:	d01d      	beq.n	800499c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a1d      	ldr	r2, [pc, #116]	; (80049dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d018      	beq.n	800499c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a1c      	ldr	r2, [pc, #112]	; (80049e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d013      	beq.n	800499c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a1a      	ldr	r2, [pc, #104]	; (80049e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d00e      	beq.n	800499c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a15      	ldr	r2, [pc, #84]	; (80049d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d009      	beq.n	800499c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a16      	ldr	r2, [pc, #88]	; (80049e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d004      	beq.n	800499c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a15      	ldr	r2, [pc, #84]	; (80049ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d10c      	bne.n	80049b6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	40010000 	.word	0x40010000
 80049d8:	40010400 	.word	0x40010400
 80049dc:	40000400 	.word	0x40000400
 80049e0:	40000800 	.word	0x40000800
 80049e4:	40000c00 	.word	0x40000c00
 80049e8:	40014000 	.word	0x40014000
 80049ec:	40001800 	.word	0x40001800

080049f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e040      	b.n	8004a84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d106      	bne.n	8004a18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7fc fc16 	bl	8001244 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2224      	movs	r2, #36	; 0x24
 8004a1c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0201 	bic.w	r2, r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f82c 	bl	8004a8c <UART_SetConfig>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d101      	bne.n	8004a3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e022      	b.n	8004a84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 faca 	bl	8004fe0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0201 	orr.w	r2, r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 fb51 	bl	8005124 <UART_CheckIdleState>
 8004a82:	4603      	mov	r3, r0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3708      	adds	r7, #8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b088      	sub	sp, #32
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	4bb1      	ldr	r3, [pc, #708]	; (8004d80 <UART_SetConfig+0x2f4>)
 8004abc:	4013      	ands	r3, r2
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6812      	ldr	r2, [r2, #0]
 8004ac2:	6939      	ldr	r1, [r7, #16]
 8004ac4:	430b      	orrs	r3, r1
 8004ac6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a9f      	ldr	r2, [pc, #636]	; (8004d84 <UART_SetConfig+0x2f8>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d121      	bne.n	8004b50 <UART_SetConfig+0xc4>
 8004b0c:	4b9e      	ldr	r3, [pc, #632]	; (8004d88 <UART_SetConfig+0x2fc>)
 8004b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	2b03      	cmp	r3, #3
 8004b18:	d816      	bhi.n	8004b48 <UART_SetConfig+0xbc>
 8004b1a:	a201      	add	r2, pc, #4	; (adr r2, 8004b20 <UART_SetConfig+0x94>)
 8004b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b20:	08004b31 	.word	0x08004b31
 8004b24:	08004b3d 	.word	0x08004b3d
 8004b28:	08004b37 	.word	0x08004b37
 8004b2c:	08004b43 	.word	0x08004b43
 8004b30:	2301      	movs	r3, #1
 8004b32:	77fb      	strb	r3, [r7, #31]
 8004b34:	e151      	b.n	8004dda <UART_SetConfig+0x34e>
 8004b36:	2302      	movs	r3, #2
 8004b38:	77fb      	strb	r3, [r7, #31]
 8004b3a:	e14e      	b.n	8004dda <UART_SetConfig+0x34e>
 8004b3c:	2304      	movs	r3, #4
 8004b3e:	77fb      	strb	r3, [r7, #31]
 8004b40:	e14b      	b.n	8004dda <UART_SetConfig+0x34e>
 8004b42:	2308      	movs	r3, #8
 8004b44:	77fb      	strb	r3, [r7, #31]
 8004b46:	e148      	b.n	8004dda <UART_SetConfig+0x34e>
 8004b48:	2310      	movs	r3, #16
 8004b4a:	77fb      	strb	r3, [r7, #31]
 8004b4c:	bf00      	nop
 8004b4e:	e144      	b.n	8004dda <UART_SetConfig+0x34e>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a8d      	ldr	r2, [pc, #564]	; (8004d8c <UART_SetConfig+0x300>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d134      	bne.n	8004bc4 <UART_SetConfig+0x138>
 8004b5a:	4b8b      	ldr	r3, [pc, #556]	; (8004d88 <UART_SetConfig+0x2fc>)
 8004b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b60:	f003 030c 	and.w	r3, r3, #12
 8004b64:	2b0c      	cmp	r3, #12
 8004b66:	d829      	bhi.n	8004bbc <UART_SetConfig+0x130>
 8004b68:	a201      	add	r2, pc, #4	; (adr r2, 8004b70 <UART_SetConfig+0xe4>)
 8004b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6e:	bf00      	nop
 8004b70:	08004ba5 	.word	0x08004ba5
 8004b74:	08004bbd 	.word	0x08004bbd
 8004b78:	08004bbd 	.word	0x08004bbd
 8004b7c:	08004bbd 	.word	0x08004bbd
 8004b80:	08004bb1 	.word	0x08004bb1
 8004b84:	08004bbd 	.word	0x08004bbd
 8004b88:	08004bbd 	.word	0x08004bbd
 8004b8c:	08004bbd 	.word	0x08004bbd
 8004b90:	08004bab 	.word	0x08004bab
 8004b94:	08004bbd 	.word	0x08004bbd
 8004b98:	08004bbd 	.word	0x08004bbd
 8004b9c:	08004bbd 	.word	0x08004bbd
 8004ba0:	08004bb7 	.word	0x08004bb7
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	77fb      	strb	r3, [r7, #31]
 8004ba8:	e117      	b.n	8004dda <UART_SetConfig+0x34e>
 8004baa:	2302      	movs	r3, #2
 8004bac:	77fb      	strb	r3, [r7, #31]
 8004bae:	e114      	b.n	8004dda <UART_SetConfig+0x34e>
 8004bb0:	2304      	movs	r3, #4
 8004bb2:	77fb      	strb	r3, [r7, #31]
 8004bb4:	e111      	b.n	8004dda <UART_SetConfig+0x34e>
 8004bb6:	2308      	movs	r3, #8
 8004bb8:	77fb      	strb	r3, [r7, #31]
 8004bba:	e10e      	b.n	8004dda <UART_SetConfig+0x34e>
 8004bbc:	2310      	movs	r3, #16
 8004bbe:	77fb      	strb	r3, [r7, #31]
 8004bc0:	bf00      	nop
 8004bc2:	e10a      	b.n	8004dda <UART_SetConfig+0x34e>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a71      	ldr	r2, [pc, #452]	; (8004d90 <UART_SetConfig+0x304>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d120      	bne.n	8004c10 <UART_SetConfig+0x184>
 8004bce:	4b6e      	ldr	r3, [pc, #440]	; (8004d88 <UART_SetConfig+0x2fc>)
 8004bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004bd8:	2b10      	cmp	r3, #16
 8004bda:	d00f      	beq.n	8004bfc <UART_SetConfig+0x170>
 8004bdc:	2b10      	cmp	r3, #16
 8004bde:	d802      	bhi.n	8004be6 <UART_SetConfig+0x15a>
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <UART_SetConfig+0x164>
 8004be4:	e010      	b.n	8004c08 <UART_SetConfig+0x17c>
 8004be6:	2b20      	cmp	r3, #32
 8004be8:	d005      	beq.n	8004bf6 <UART_SetConfig+0x16a>
 8004bea:	2b30      	cmp	r3, #48	; 0x30
 8004bec:	d009      	beq.n	8004c02 <UART_SetConfig+0x176>
 8004bee:	e00b      	b.n	8004c08 <UART_SetConfig+0x17c>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	77fb      	strb	r3, [r7, #31]
 8004bf4:	e0f1      	b.n	8004dda <UART_SetConfig+0x34e>
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	77fb      	strb	r3, [r7, #31]
 8004bfa:	e0ee      	b.n	8004dda <UART_SetConfig+0x34e>
 8004bfc:	2304      	movs	r3, #4
 8004bfe:	77fb      	strb	r3, [r7, #31]
 8004c00:	e0eb      	b.n	8004dda <UART_SetConfig+0x34e>
 8004c02:	2308      	movs	r3, #8
 8004c04:	77fb      	strb	r3, [r7, #31]
 8004c06:	e0e8      	b.n	8004dda <UART_SetConfig+0x34e>
 8004c08:	2310      	movs	r3, #16
 8004c0a:	77fb      	strb	r3, [r7, #31]
 8004c0c:	bf00      	nop
 8004c0e:	e0e4      	b.n	8004dda <UART_SetConfig+0x34e>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a5f      	ldr	r2, [pc, #380]	; (8004d94 <UART_SetConfig+0x308>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d120      	bne.n	8004c5c <UART_SetConfig+0x1d0>
 8004c1a:	4b5b      	ldr	r3, [pc, #364]	; (8004d88 <UART_SetConfig+0x2fc>)
 8004c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c20:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c24:	2b40      	cmp	r3, #64	; 0x40
 8004c26:	d00f      	beq.n	8004c48 <UART_SetConfig+0x1bc>
 8004c28:	2b40      	cmp	r3, #64	; 0x40
 8004c2a:	d802      	bhi.n	8004c32 <UART_SetConfig+0x1a6>
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d005      	beq.n	8004c3c <UART_SetConfig+0x1b0>
 8004c30:	e010      	b.n	8004c54 <UART_SetConfig+0x1c8>
 8004c32:	2b80      	cmp	r3, #128	; 0x80
 8004c34:	d005      	beq.n	8004c42 <UART_SetConfig+0x1b6>
 8004c36:	2bc0      	cmp	r3, #192	; 0xc0
 8004c38:	d009      	beq.n	8004c4e <UART_SetConfig+0x1c2>
 8004c3a:	e00b      	b.n	8004c54 <UART_SetConfig+0x1c8>
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	77fb      	strb	r3, [r7, #31]
 8004c40:	e0cb      	b.n	8004dda <UART_SetConfig+0x34e>
 8004c42:	2302      	movs	r3, #2
 8004c44:	77fb      	strb	r3, [r7, #31]
 8004c46:	e0c8      	b.n	8004dda <UART_SetConfig+0x34e>
 8004c48:	2304      	movs	r3, #4
 8004c4a:	77fb      	strb	r3, [r7, #31]
 8004c4c:	e0c5      	b.n	8004dda <UART_SetConfig+0x34e>
 8004c4e:	2308      	movs	r3, #8
 8004c50:	77fb      	strb	r3, [r7, #31]
 8004c52:	e0c2      	b.n	8004dda <UART_SetConfig+0x34e>
 8004c54:	2310      	movs	r3, #16
 8004c56:	77fb      	strb	r3, [r7, #31]
 8004c58:	bf00      	nop
 8004c5a:	e0be      	b.n	8004dda <UART_SetConfig+0x34e>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a4d      	ldr	r2, [pc, #308]	; (8004d98 <UART_SetConfig+0x30c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d124      	bne.n	8004cb0 <UART_SetConfig+0x224>
 8004c66:	4b48      	ldr	r3, [pc, #288]	; (8004d88 <UART_SetConfig+0x2fc>)
 8004c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c74:	d012      	beq.n	8004c9c <UART_SetConfig+0x210>
 8004c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c7a:	d802      	bhi.n	8004c82 <UART_SetConfig+0x1f6>
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d007      	beq.n	8004c90 <UART_SetConfig+0x204>
 8004c80:	e012      	b.n	8004ca8 <UART_SetConfig+0x21c>
 8004c82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c86:	d006      	beq.n	8004c96 <UART_SetConfig+0x20a>
 8004c88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c8c:	d009      	beq.n	8004ca2 <UART_SetConfig+0x216>
 8004c8e:	e00b      	b.n	8004ca8 <UART_SetConfig+0x21c>
 8004c90:	2300      	movs	r3, #0
 8004c92:	77fb      	strb	r3, [r7, #31]
 8004c94:	e0a1      	b.n	8004dda <UART_SetConfig+0x34e>
 8004c96:	2302      	movs	r3, #2
 8004c98:	77fb      	strb	r3, [r7, #31]
 8004c9a:	e09e      	b.n	8004dda <UART_SetConfig+0x34e>
 8004c9c:	2304      	movs	r3, #4
 8004c9e:	77fb      	strb	r3, [r7, #31]
 8004ca0:	e09b      	b.n	8004dda <UART_SetConfig+0x34e>
 8004ca2:	2308      	movs	r3, #8
 8004ca4:	77fb      	strb	r3, [r7, #31]
 8004ca6:	e098      	b.n	8004dda <UART_SetConfig+0x34e>
 8004ca8:	2310      	movs	r3, #16
 8004caa:	77fb      	strb	r3, [r7, #31]
 8004cac:	bf00      	nop
 8004cae:	e094      	b.n	8004dda <UART_SetConfig+0x34e>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a39      	ldr	r2, [pc, #228]	; (8004d9c <UART_SetConfig+0x310>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d124      	bne.n	8004d04 <UART_SetConfig+0x278>
 8004cba:	4b33      	ldr	r3, [pc, #204]	; (8004d88 <UART_SetConfig+0x2fc>)
 8004cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cc8:	d012      	beq.n	8004cf0 <UART_SetConfig+0x264>
 8004cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cce:	d802      	bhi.n	8004cd6 <UART_SetConfig+0x24a>
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d007      	beq.n	8004ce4 <UART_SetConfig+0x258>
 8004cd4:	e012      	b.n	8004cfc <UART_SetConfig+0x270>
 8004cd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cda:	d006      	beq.n	8004cea <UART_SetConfig+0x25e>
 8004cdc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ce0:	d009      	beq.n	8004cf6 <UART_SetConfig+0x26a>
 8004ce2:	e00b      	b.n	8004cfc <UART_SetConfig+0x270>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	77fb      	strb	r3, [r7, #31]
 8004ce8:	e077      	b.n	8004dda <UART_SetConfig+0x34e>
 8004cea:	2302      	movs	r3, #2
 8004cec:	77fb      	strb	r3, [r7, #31]
 8004cee:	e074      	b.n	8004dda <UART_SetConfig+0x34e>
 8004cf0:	2304      	movs	r3, #4
 8004cf2:	77fb      	strb	r3, [r7, #31]
 8004cf4:	e071      	b.n	8004dda <UART_SetConfig+0x34e>
 8004cf6:	2308      	movs	r3, #8
 8004cf8:	77fb      	strb	r3, [r7, #31]
 8004cfa:	e06e      	b.n	8004dda <UART_SetConfig+0x34e>
 8004cfc:	2310      	movs	r3, #16
 8004cfe:	77fb      	strb	r3, [r7, #31]
 8004d00:	bf00      	nop
 8004d02:	e06a      	b.n	8004dda <UART_SetConfig+0x34e>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a25      	ldr	r2, [pc, #148]	; (8004da0 <UART_SetConfig+0x314>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d124      	bne.n	8004d58 <UART_SetConfig+0x2cc>
 8004d0e:	4b1e      	ldr	r3, [pc, #120]	; (8004d88 <UART_SetConfig+0x2fc>)
 8004d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d14:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d1c:	d012      	beq.n	8004d44 <UART_SetConfig+0x2b8>
 8004d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d22:	d802      	bhi.n	8004d2a <UART_SetConfig+0x29e>
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d007      	beq.n	8004d38 <UART_SetConfig+0x2ac>
 8004d28:	e012      	b.n	8004d50 <UART_SetConfig+0x2c4>
 8004d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d2e:	d006      	beq.n	8004d3e <UART_SetConfig+0x2b2>
 8004d30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d34:	d009      	beq.n	8004d4a <UART_SetConfig+0x2be>
 8004d36:	e00b      	b.n	8004d50 <UART_SetConfig+0x2c4>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	77fb      	strb	r3, [r7, #31]
 8004d3c:	e04d      	b.n	8004dda <UART_SetConfig+0x34e>
 8004d3e:	2302      	movs	r3, #2
 8004d40:	77fb      	strb	r3, [r7, #31]
 8004d42:	e04a      	b.n	8004dda <UART_SetConfig+0x34e>
 8004d44:	2304      	movs	r3, #4
 8004d46:	77fb      	strb	r3, [r7, #31]
 8004d48:	e047      	b.n	8004dda <UART_SetConfig+0x34e>
 8004d4a:	2308      	movs	r3, #8
 8004d4c:	77fb      	strb	r3, [r7, #31]
 8004d4e:	e044      	b.n	8004dda <UART_SetConfig+0x34e>
 8004d50:	2310      	movs	r3, #16
 8004d52:	77fb      	strb	r3, [r7, #31]
 8004d54:	bf00      	nop
 8004d56:	e040      	b.n	8004dda <UART_SetConfig+0x34e>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a11      	ldr	r2, [pc, #68]	; (8004da4 <UART_SetConfig+0x318>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d139      	bne.n	8004dd6 <UART_SetConfig+0x34a>
 8004d62:	4b09      	ldr	r3, [pc, #36]	; (8004d88 <UART_SetConfig+0x2fc>)
 8004d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004d6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d70:	d027      	beq.n	8004dc2 <UART_SetConfig+0x336>
 8004d72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d76:	d817      	bhi.n	8004da8 <UART_SetConfig+0x31c>
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d01c      	beq.n	8004db6 <UART_SetConfig+0x32a>
 8004d7c:	e027      	b.n	8004dce <UART_SetConfig+0x342>
 8004d7e:	bf00      	nop
 8004d80:	efff69f3 	.word	0xefff69f3
 8004d84:	40011000 	.word	0x40011000
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	40004400 	.word	0x40004400
 8004d90:	40004800 	.word	0x40004800
 8004d94:	40004c00 	.word	0x40004c00
 8004d98:	40005000 	.word	0x40005000
 8004d9c:	40011400 	.word	0x40011400
 8004da0:	40007800 	.word	0x40007800
 8004da4:	40007c00 	.word	0x40007c00
 8004da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dac:	d006      	beq.n	8004dbc <UART_SetConfig+0x330>
 8004dae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004db2:	d009      	beq.n	8004dc8 <UART_SetConfig+0x33c>
 8004db4:	e00b      	b.n	8004dce <UART_SetConfig+0x342>
 8004db6:	2300      	movs	r3, #0
 8004db8:	77fb      	strb	r3, [r7, #31]
 8004dba:	e00e      	b.n	8004dda <UART_SetConfig+0x34e>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	77fb      	strb	r3, [r7, #31]
 8004dc0:	e00b      	b.n	8004dda <UART_SetConfig+0x34e>
 8004dc2:	2304      	movs	r3, #4
 8004dc4:	77fb      	strb	r3, [r7, #31]
 8004dc6:	e008      	b.n	8004dda <UART_SetConfig+0x34e>
 8004dc8:	2308      	movs	r3, #8
 8004dca:	77fb      	strb	r3, [r7, #31]
 8004dcc:	e005      	b.n	8004dda <UART_SetConfig+0x34e>
 8004dce:	2310      	movs	r3, #16
 8004dd0:	77fb      	strb	r3, [r7, #31]
 8004dd2:	bf00      	nop
 8004dd4:	e001      	b.n	8004dda <UART_SetConfig+0x34e>
 8004dd6:	2310      	movs	r3, #16
 8004dd8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004de2:	d17f      	bne.n	8004ee4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8004de4:	7ffb      	ldrb	r3, [r7, #31]
 8004de6:	2b08      	cmp	r3, #8
 8004de8:	d85c      	bhi.n	8004ea4 <UART_SetConfig+0x418>
 8004dea:	a201      	add	r2, pc, #4	; (adr r2, 8004df0 <UART_SetConfig+0x364>)
 8004dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df0:	08004e15 	.word	0x08004e15
 8004df4:	08004e35 	.word	0x08004e35
 8004df8:	08004e55 	.word	0x08004e55
 8004dfc:	08004ea5 	.word	0x08004ea5
 8004e00:	08004e6d 	.word	0x08004e6d
 8004e04:	08004ea5 	.word	0x08004ea5
 8004e08:	08004ea5 	.word	0x08004ea5
 8004e0c:	08004ea5 	.word	0x08004ea5
 8004e10:	08004e8d 	.word	0x08004e8d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e14:	f7fe fd42 	bl	800389c <HAL_RCC_GetPCLK1Freq>
 8004e18:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	005a      	lsls	r2, r3, #1
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	085b      	lsrs	r3, r3, #1
 8004e24:	441a      	add	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	61bb      	str	r3, [r7, #24]
        break;
 8004e32:	e03a      	b.n	8004eaa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e34:	f7fe fd46 	bl	80038c4 <HAL_RCC_GetPCLK2Freq>
 8004e38:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	005a      	lsls	r2, r3, #1
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	085b      	lsrs	r3, r3, #1
 8004e44:	441a      	add	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	61bb      	str	r3, [r7, #24]
        break;
 8004e52:	e02a      	b.n	8004eaa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	085a      	lsrs	r2, r3, #1
 8004e5a:	4b5f      	ldr	r3, [pc, #380]	; (8004fd8 <UART_SetConfig+0x54c>)
 8004e5c:	4413      	add	r3, r2
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6852      	ldr	r2, [r2, #4]
 8004e62:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	61bb      	str	r3, [r7, #24]
        break;
 8004e6a:	e01e      	b.n	8004eaa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e6c:	f7fe fc32 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 8004e70:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	005a      	lsls	r2, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	085b      	lsrs	r3, r3, #1
 8004e7c:	441a      	add	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	61bb      	str	r3, [r7, #24]
        break;
 8004e8a:	e00e      	b.n	8004eaa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	085b      	lsrs	r3, r3, #1
 8004e92:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	61bb      	str	r3, [r7, #24]
        break;
 8004ea2:	e002      	b.n	8004eaa <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	75fb      	strb	r3, [r7, #23]
        break;
 8004ea8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	2b0f      	cmp	r3, #15
 8004eae:	d916      	bls.n	8004ede <UART_SetConfig+0x452>
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eb6:	d212      	bcs.n	8004ede <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	f023 030f 	bic.w	r3, r3, #15
 8004ec0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	085b      	lsrs	r3, r3, #1
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	897b      	ldrh	r3, [r7, #10]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	897a      	ldrh	r2, [r7, #10]
 8004eda:	60da      	str	r2, [r3, #12]
 8004edc:	e070      	b.n	8004fc0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	75fb      	strb	r3, [r7, #23]
 8004ee2:	e06d      	b.n	8004fc0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8004ee4:	7ffb      	ldrb	r3, [r7, #31]
 8004ee6:	2b08      	cmp	r3, #8
 8004ee8:	d859      	bhi.n	8004f9e <UART_SetConfig+0x512>
 8004eea:	a201      	add	r2, pc, #4	; (adr r2, 8004ef0 <UART_SetConfig+0x464>)
 8004eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef0:	08004f15 	.word	0x08004f15
 8004ef4:	08004f33 	.word	0x08004f33
 8004ef8:	08004f51 	.word	0x08004f51
 8004efc:	08004f9f 	.word	0x08004f9f
 8004f00:	08004f69 	.word	0x08004f69
 8004f04:	08004f9f 	.word	0x08004f9f
 8004f08:	08004f9f 	.word	0x08004f9f
 8004f0c:	08004f9f 	.word	0x08004f9f
 8004f10:	08004f87 	.word	0x08004f87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f14:	f7fe fcc2 	bl	800389c <HAL_RCC_GetPCLK1Freq>
 8004f18:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	085a      	lsrs	r2, r3, #1
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	441a      	add	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	61bb      	str	r3, [r7, #24]
        break;
 8004f30:	e038      	b.n	8004fa4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f32:	f7fe fcc7 	bl	80038c4 <HAL_RCC_GetPCLK2Freq>
 8004f36:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	085a      	lsrs	r2, r3, #1
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	441a      	add	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	61bb      	str	r3, [r7, #24]
        break;
 8004f4e:	e029      	b.n	8004fa4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	085a      	lsrs	r2, r3, #1
 8004f56:	4b21      	ldr	r3, [pc, #132]	; (8004fdc <UART_SetConfig+0x550>)
 8004f58:	4413      	add	r3, r2
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6852      	ldr	r2, [r2, #4]
 8004f5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	61bb      	str	r3, [r7, #24]
        break;
 8004f66:	e01d      	b.n	8004fa4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f68:	f7fe fbb4 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 8004f6c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	085a      	lsrs	r2, r3, #1
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	441a      	add	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	61bb      	str	r3, [r7, #24]
        break;
 8004f84:	e00e      	b.n	8004fa4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	085b      	lsrs	r3, r3, #1
 8004f8c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	61bb      	str	r3, [r7, #24]
        break;
 8004f9c:	e002      	b.n	8004fa4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	75fb      	strb	r3, [r7, #23]
        break;
 8004fa2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	2b0f      	cmp	r3, #15
 8004fa8:	d908      	bls.n	8004fbc <UART_SetConfig+0x530>
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb0:	d204      	bcs.n	8004fbc <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	60da      	str	r2, [r3, #12]
 8004fba:	e001      	b.n	8004fc0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3720      	adds	r7, #32
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	01e84800 	.word	0x01e84800
 8004fdc:	00f42400 	.word	0x00f42400

08004fe0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00a      	beq.n	800500a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	430a      	orrs	r2, r1
 800502a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00a      	beq.n	800504e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	f003 0308 	and.w	r3, r3, #8
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00a      	beq.n	8005070 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005074:	f003 0310 	and.w	r3, r3, #16
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d01a      	beq.n	80050f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050de:	d10a      	bne.n	80050f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00a      	beq.n	8005118 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	430a      	orrs	r2, r1
 8005116:	605a      	str	r2, [r3, #4]
  }
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af02      	add	r7, sp, #8
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005132:	f7fc fa2f 	bl	8001594 <HAL_GetTick>
 8005136:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0308 	and.w	r3, r3, #8
 8005142:	2b08      	cmp	r3, #8
 8005144:	d10e      	bne.n	8005164 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005146:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f814 	bl	8005182 <UART_WaitOnFlagUntilTimeout>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d001      	beq.n	8005164 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e00a      	b.n	800517a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2220      	movs	r2, #32
 8005168:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2220      	movs	r2, #32
 800516e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b084      	sub	sp, #16
 8005186:	af00      	add	r7, sp, #0
 8005188:	60f8      	str	r0, [r7, #12]
 800518a:	60b9      	str	r1, [r7, #8]
 800518c:	603b      	str	r3, [r7, #0]
 800518e:	4613      	mov	r3, r2
 8005190:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005192:	e05d      	b.n	8005250 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519a:	d059      	beq.n	8005250 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800519c:	f7fc f9fa 	bl	8001594 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d302      	bcc.n	80051b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d11b      	bne.n	80051ea <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80051c0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	689a      	ldr	r2, [r3, #8]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f022 0201 	bic.w	r2, r2, #1
 80051d0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2220      	movs	r2, #32
 80051d6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2220      	movs	r2, #32
 80051dc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e042      	b.n	8005270 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d02b      	beq.n	8005250 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005202:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005206:	d123      	bne.n	8005250 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005210:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005220:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 0201 	bic.w	r2, r2, #1
 8005230:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2220      	movs	r2, #32
 8005236:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2220      	movs	r2, #32
 800523c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2220      	movs	r2, #32
 8005242:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e00f      	b.n	8005270 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	69da      	ldr	r2, [r3, #28]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	4013      	ands	r3, r2
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	429a      	cmp	r2, r3
 800525e:	bf0c      	ite	eq
 8005260:	2301      	moveq	r3, #1
 8005262:	2300      	movne	r3, #0
 8005264:	b2db      	uxtb	r3, r3
 8005266:	461a      	mov	r2, r3
 8005268:	79fb      	ldrb	r3, [r7, #7]
 800526a:	429a      	cmp	r2, r3
 800526c:	d092      	beq.n	8005194 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005278:	b084      	sub	sp, #16
 800527a:	b580      	push	{r7, lr}
 800527c:	b084      	sub	sp, #16
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	f107 001c 	add.w	r0, r7, #28
 8005286:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800528a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528c:	2b01      	cmp	r3, #1
 800528e:	d126      	bne.n	80052de <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005294:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68da      	ldr	r2, [r3, #12]
 80052a0:	4b23      	ldr	r3, [pc, #140]	; (8005330 <USB_CoreInit+0xb8>)
 80052a2:	4013      	ands	r3, r2
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f043 0210 	orr.w	r2, r3, #16
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d105      	bne.n	80052d2 <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 fa52 	bl	800577c <USB_CoreReset>
 80052d8:	4603      	mov	r3, r0
 80052da:	73fb      	strb	r3, [r7, #15]
 80052dc:	e010      	b.n	8005300 <USB_CoreInit+0x88>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 fa46 	bl	800577c <USB_CoreReset>
 80052f0:	4603      	mov	r3, r0
 80052f2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005302:	2b01      	cmp	r3, #1
 8005304:	d10b      	bne.n	800531e <USB_CoreInit+0xa6>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f043 0206 	orr.w	r2, r3, #6
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f043 0220 	orr.w	r2, r3, #32
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800531e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800532a:	b004      	add	sp, #16
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	ffbdffbf 	.word	0xffbdffbf

08005334 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f023 0201 	bic.w	r2, r3, #1
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b082      	sub	sp, #8
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
 800535e:	460b      	mov	r3, r1
 8005360:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800536e:	78fb      	ldrb	r3, [r7, #3]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d106      	bne.n	8005382 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	60da      	str	r2, [r3, #12]
 8005380:	e00b      	b.n	800539a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005382:	78fb      	ldrb	r3, [r7, #3]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d106      	bne.n	8005396 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	60da      	str	r2, [r3, #12]
 8005394:	e001      	b.n	800539a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e003      	b.n	80053a2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800539a:	2032      	movs	r0, #50	; 0x32
 800539c:	f7fc f906 	bl	80015ac <HAL_Delay>

  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
	...

080053ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053ac:	b084      	sub	sp, #16
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b086      	sub	sp, #24
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80053ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053be:	2300      	movs	r3, #0
 80053c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80053c6:	2300      	movs	r3, #0
 80053c8:	613b      	str	r3, [r7, #16]
 80053ca:	e009      	b.n	80053e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	3340      	adds	r3, #64	; 0x40
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	2200      	movs	r2, #0
 80053d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	3301      	adds	r3, #1
 80053de:	613b      	str	r3, [r7, #16]
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	2b0e      	cmp	r3, #14
 80053e4:	d9f2      	bls.n	80053cc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d11c      	bne.n	8005426 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053fa:	f043 0302 	orr.w	r3, r3, #2
 80053fe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005404:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	e005      	b.n	8005432 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005438:	461a      	mov	r2, r3
 800543a:	2300      	movs	r3, #0
 800543c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005444:	4619      	mov	r1, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544c:	461a      	mov	r2, r3
 800544e:	680b      	ldr	r3, [r1, #0]
 8005450:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005454:	2b01      	cmp	r3, #1
 8005456:	d10c      	bne.n	8005472 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545a:	2b00      	cmp	r3, #0
 800545c:	d104      	bne.n	8005468 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800545e:	2100      	movs	r1, #0
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f959 	bl	8005718 <USB_SetDevSpeed>
 8005466:	e018      	b.n	800549a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005468:	2101      	movs	r1, #1
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f954 	bl	8005718 <USB_SetDevSpeed>
 8005470:	e013      	b.n	800549a <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005474:	2b03      	cmp	r3, #3
 8005476:	d10c      	bne.n	8005492 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547a:	2b00      	cmp	r3, #0
 800547c:	d104      	bne.n	8005488 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800547e:	2100      	movs	r1, #0
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f949 	bl	8005718 <USB_SetDevSpeed>
 8005486:	e008      	b.n	800549a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005488:	2101      	movs	r1, #1
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f944 	bl	8005718 <USB_SetDevSpeed>
 8005490:	e003      	b.n	800549a <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005492:	2103      	movs	r1, #3
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 f93f 	bl	8005718 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800549a:	2110      	movs	r1, #16
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f8f3 	bl	8005688 <USB_FlushTxFifo>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f911 	bl	80056d4 <USB_FlushRxFifo>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c2:	461a      	mov	r2, r3
 80054c4:	2300      	movs	r3, #0
 80054c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ce:	461a      	mov	r2, r3
 80054d0:	2300      	movs	r3, #0
 80054d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054da:	461a      	mov	r2, r3
 80054dc:	2300      	movs	r3, #0
 80054de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054e0:	2300      	movs	r3, #0
 80054e2:	613b      	str	r3, [r7, #16]
 80054e4:	e043      	b.n	800556e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	015a      	lsls	r2, r3, #5
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4413      	add	r3, r2
 80054ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054fc:	d118      	bne.n	8005530 <USB_DevInit+0x184>
    {
      if (i == 0U)
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10a      	bne.n	800551a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005510:	461a      	mov	r2, r3
 8005512:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005516:	6013      	str	r3, [r2, #0]
 8005518:	e013      	b.n	8005542 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	4413      	add	r3, r2
 8005522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005526:	461a      	mov	r2, r3
 8005528:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800552c:	6013      	str	r3, [r2, #0]
 800552e:	e008      	b.n	8005542 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553c:	461a      	mov	r2, r3
 800553e:	2300      	movs	r3, #0
 8005540:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554e:	461a      	mov	r2, r3
 8005550:	2300      	movs	r3, #0
 8005552:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4413      	add	r3, r2
 800555c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005560:	461a      	mov	r2, r3
 8005562:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005566:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	3301      	adds	r3, #1
 800556c:	613b      	str	r3, [r7, #16]
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	429a      	cmp	r2, r3
 8005574:	d3b7      	bcc.n	80054e6 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005576:	2300      	movs	r3, #0
 8005578:	613b      	str	r3, [r7, #16]
 800557a:	e043      	b.n	8005604 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4413      	add	r3, r2
 8005584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800558e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005592:	d118      	bne.n	80055c6 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10a      	bne.n	80055b0 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a6:	461a      	mov	r2, r3
 80055a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	e013      	b.n	80055d8 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055bc:	461a      	mov	r2, r3
 80055be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055c2:	6013      	str	r3, [r2, #0]
 80055c4:	e008      	b.n	80055d8 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d2:	461a      	mov	r2, r3
 80055d4:	2300      	movs	r3, #0
 80055d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e4:	461a      	mov	r2, r3
 80055e6:	2300      	movs	r3, #0
 80055e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f6:	461a      	mov	r2, r3
 80055f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	3301      	adds	r3, #1
 8005602:	613b      	str	r3, [r7, #16]
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	429a      	cmp	r2, r3
 800560a:	d3b7      	bcc.n	800557c <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800561a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800561e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800562c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800562e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005630:	2b00      	cmp	r3, #0
 8005632:	d105      	bne.n	8005640 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	f043 0210 	orr.w	r2, r3, #16
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	699a      	ldr	r2, [r3, #24]
 8005644:	4b0e      	ldr	r3, [pc, #56]	; (8005680 <USB_DevInit+0x2d4>)
 8005646:	4313      	orrs	r3, r2
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800564c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800564e:	2b00      	cmp	r3, #0
 8005650:	d005      	beq.n	800565e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	f043 0208 	orr.w	r2, r3, #8
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800565e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005660:	2b01      	cmp	r3, #1
 8005662:	d105      	bne.n	8005670 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	699a      	ldr	r2, [r3, #24]
 8005668:	4b06      	ldr	r3, [pc, #24]	; (8005684 <USB_DevInit+0x2d8>)
 800566a:	4313      	orrs	r3, r2
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005670:	7dfb      	ldrb	r3, [r7, #23]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3718      	adds	r7, #24
 8005676:	46bd      	mov	sp, r7
 8005678:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800567c:	b004      	add	sp, #16
 800567e:	4770      	bx	lr
 8005680:	803c3800 	.word	0x803c3800
 8005684:	40000004 	.word	0x40000004

08005688 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	019b      	lsls	r3, r3, #6
 800569a:	f043 0220 	orr.w	r2, r3, #32
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	3301      	adds	r3, #1
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	4a09      	ldr	r2, [pc, #36]	; (80056d0 <USB_FlushTxFifo+0x48>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d901      	bls.n	80056b4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e006      	b.n	80056c2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	f003 0320 	and.w	r3, r3, #32
 80056bc:	2b20      	cmp	r3, #32
 80056be:	d0f0      	beq.n	80056a2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	00030d40 	.word	0x00030d40

080056d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80056dc:	2300      	movs	r3, #0
 80056de:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2210      	movs	r2, #16
 80056e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	3301      	adds	r3, #1
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4a09      	ldr	r2, [pc, #36]	; (8005714 <USB_FlushRxFifo+0x40>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d901      	bls.n	80056f8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e006      	b.n	8005706 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	f003 0310 	and.w	r3, r3, #16
 8005700:	2b10      	cmp	r3, #16
 8005702:	d0f0      	beq.n	80056e6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	00030d40 	.word	0x00030d40

08005718 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	460b      	mov	r3, r1
 8005722:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	78fb      	ldrb	r3, [r7, #3]
 8005732:	68f9      	ldr	r1, [r7, #12]
 8005734:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005738:	4313      	orrs	r3, r2
 800573a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b084      	sub	sp, #16
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005764:	f043 0302 	orr.w	r3, r3, #2
 8005768:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800576a:	2003      	movs	r0, #3
 800576c:	f7fb ff1e 	bl	80015ac <HAL_Delay>

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
	...

0800577c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005784:	2300      	movs	r3, #0
 8005786:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	3301      	adds	r3, #1
 800578c:	60fb      	str	r3, [r7, #12]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4a13      	ldr	r2, [pc, #76]	; (80057e0 <USB_CoreReset+0x64>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d901      	bls.n	800579a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e01b      	b.n	80057d2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	daf2      	bge.n	8005788 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	f043 0201 	orr.w	r2, r3, #1
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	3301      	adds	r3, #1
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4a09      	ldr	r2, [pc, #36]	; (80057e0 <USB_CoreReset+0x64>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d901      	bls.n	80057c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e006      	b.n	80057d2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d0f0      	beq.n	80057b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	00030d40 	.word	0x00030d40

080057e4 <__errno>:
 80057e4:	4b01      	ldr	r3, [pc, #4]	; (80057ec <__errno+0x8>)
 80057e6:	6818      	ldr	r0, [r3, #0]
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	20000020 	.word	0x20000020

080057f0 <__libc_init_array>:
 80057f0:	b570      	push	{r4, r5, r6, lr}
 80057f2:	4e0d      	ldr	r6, [pc, #52]	; (8005828 <__libc_init_array+0x38>)
 80057f4:	4c0d      	ldr	r4, [pc, #52]	; (800582c <__libc_init_array+0x3c>)
 80057f6:	1ba4      	subs	r4, r4, r6
 80057f8:	10a4      	asrs	r4, r4, #2
 80057fa:	2500      	movs	r5, #0
 80057fc:	42a5      	cmp	r5, r4
 80057fe:	d109      	bne.n	8005814 <__libc_init_array+0x24>
 8005800:	4e0b      	ldr	r6, [pc, #44]	; (8005830 <__libc_init_array+0x40>)
 8005802:	4c0c      	ldr	r4, [pc, #48]	; (8005834 <__libc_init_array+0x44>)
 8005804:	f000 f894 	bl	8005930 <_init>
 8005808:	1ba4      	subs	r4, r4, r6
 800580a:	10a4      	asrs	r4, r4, #2
 800580c:	2500      	movs	r5, #0
 800580e:	42a5      	cmp	r5, r4
 8005810:	d105      	bne.n	800581e <__libc_init_array+0x2e>
 8005812:	bd70      	pop	{r4, r5, r6, pc}
 8005814:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005818:	4798      	blx	r3
 800581a:	3501      	adds	r5, #1
 800581c:	e7ee      	b.n	80057fc <__libc_init_array+0xc>
 800581e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005822:	4798      	blx	r3
 8005824:	3501      	adds	r5, #1
 8005826:	e7f2      	b.n	800580e <__libc_init_array+0x1e>
 8005828:	08005970 	.word	0x08005970
 800582c:	08005970 	.word	0x08005970
 8005830:	08005970 	.word	0x08005970
 8005834:	08005974 	.word	0x08005974

08005838 <malloc>:
 8005838:	4b02      	ldr	r3, [pc, #8]	; (8005844 <malloc+0xc>)
 800583a:	4601      	mov	r1, r0
 800583c:	6818      	ldr	r0, [r3, #0]
 800583e:	f000 b80b 	b.w	8005858 <_malloc_r>
 8005842:	bf00      	nop
 8005844:	20000020 	.word	0x20000020

08005848 <memset>:
 8005848:	4402      	add	r2, r0
 800584a:	4603      	mov	r3, r0
 800584c:	4293      	cmp	r3, r2
 800584e:	d100      	bne.n	8005852 <memset+0xa>
 8005850:	4770      	bx	lr
 8005852:	f803 1b01 	strb.w	r1, [r3], #1
 8005856:	e7f9      	b.n	800584c <memset+0x4>

08005858 <_malloc_r>:
 8005858:	b570      	push	{r4, r5, r6, lr}
 800585a:	1ccd      	adds	r5, r1, #3
 800585c:	f025 0503 	bic.w	r5, r5, #3
 8005860:	3508      	adds	r5, #8
 8005862:	2d0c      	cmp	r5, #12
 8005864:	bf38      	it	cc
 8005866:	250c      	movcc	r5, #12
 8005868:	2d00      	cmp	r5, #0
 800586a:	4606      	mov	r6, r0
 800586c:	db01      	blt.n	8005872 <_malloc_r+0x1a>
 800586e:	42a9      	cmp	r1, r5
 8005870:	d903      	bls.n	800587a <_malloc_r+0x22>
 8005872:	230c      	movs	r3, #12
 8005874:	6033      	str	r3, [r6, #0]
 8005876:	2000      	movs	r0, #0
 8005878:	bd70      	pop	{r4, r5, r6, pc}
 800587a:	f000 f857 	bl	800592c <__malloc_lock>
 800587e:	4a21      	ldr	r2, [pc, #132]	; (8005904 <_malloc_r+0xac>)
 8005880:	6814      	ldr	r4, [r2, #0]
 8005882:	4621      	mov	r1, r4
 8005884:	b991      	cbnz	r1, 80058ac <_malloc_r+0x54>
 8005886:	4c20      	ldr	r4, [pc, #128]	; (8005908 <_malloc_r+0xb0>)
 8005888:	6823      	ldr	r3, [r4, #0]
 800588a:	b91b      	cbnz	r3, 8005894 <_malloc_r+0x3c>
 800588c:	4630      	mov	r0, r6
 800588e:	f000 f83d 	bl	800590c <_sbrk_r>
 8005892:	6020      	str	r0, [r4, #0]
 8005894:	4629      	mov	r1, r5
 8005896:	4630      	mov	r0, r6
 8005898:	f000 f838 	bl	800590c <_sbrk_r>
 800589c:	1c43      	adds	r3, r0, #1
 800589e:	d124      	bne.n	80058ea <_malloc_r+0x92>
 80058a0:	230c      	movs	r3, #12
 80058a2:	6033      	str	r3, [r6, #0]
 80058a4:	4630      	mov	r0, r6
 80058a6:	f000 f842 	bl	800592e <__malloc_unlock>
 80058aa:	e7e4      	b.n	8005876 <_malloc_r+0x1e>
 80058ac:	680b      	ldr	r3, [r1, #0]
 80058ae:	1b5b      	subs	r3, r3, r5
 80058b0:	d418      	bmi.n	80058e4 <_malloc_r+0x8c>
 80058b2:	2b0b      	cmp	r3, #11
 80058b4:	d90f      	bls.n	80058d6 <_malloc_r+0x7e>
 80058b6:	600b      	str	r3, [r1, #0]
 80058b8:	50cd      	str	r5, [r1, r3]
 80058ba:	18cc      	adds	r4, r1, r3
 80058bc:	4630      	mov	r0, r6
 80058be:	f000 f836 	bl	800592e <__malloc_unlock>
 80058c2:	f104 000b 	add.w	r0, r4, #11
 80058c6:	1d23      	adds	r3, r4, #4
 80058c8:	f020 0007 	bic.w	r0, r0, #7
 80058cc:	1ac3      	subs	r3, r0, r3
 80058ce:	d0d3      	beq.n	8005878 <_malloc_r+0x20>
 80058d0:	425a      	negs	r2, r3
 80058d2:	50e2      	str	r2, [r4, r3]
 80058d4:	e7d0      	b.n	8005878 <_malloc_r+0x20>
 80058d6:	428c      	cmp	r4, r1
 80058d8:	684b      	ldr	r3, [r1, #4]
 80058da:	bf16      	itet	ne
 80058dc:	6063      	strne	r3, [r4, #4]
 80058de:	6013      	streq	r3, [r2, #0]
 80058e0:	460c      	movne	r4, r1
 80058e2:	e7eb      	b.n	80058bc <_malloc_r+0x64>
 80058e4:	460c      	mov	r4, r1
 80058e6:	6849      	ldr	r1, [r1, #4]
 80058e8:	e7cc      	b.n	8005884 <_malloc_r+0x2c>
 80058ea:	1cc4      	adds	r4, r0, #3
 80058ec:	f024 0403 	bic.w	r4, r4, #3
 80058f0:	42a0      	cmp	r0, r4
 80058f2:	d005      	beq.n	8005900 <_malloc_r+0xa8>
 80058f4:	1a21      	subs	r1, r4, r0
 80058f6:	4630      	mov	r0, r6
 80058f8:	f000 f808 	bl	800590c <_sbrk_r>
 80058fc:	3001      	adds	r0, #1
 80058fe:	d0cf      	beq.n	80058a0 <_malloc_r+0x48>
 8005900:	6025      	str	r5, [r4, #0]
 8005902:	e7db      	b.n	80058bc <_malloc_r+0x64>
 8005904:	200000a4 	.word	0x200000a4
 8005908:	200000a8 	.word	0x200000a8

0800590c <_sbrk_r>:
 800590c:	b538      	push	{r3, r4, r5, lr}
 800590e:	4c06      	ldr	r4, [pc, #24]	; (8005928 <_sbrk_r+0x1c>)
 8005910:	2300      	movs	r3, #0
 8005912:	4605      	mov	r5, r0
 8005914:	4608      	mov	r0, r1
 8005916:	6023      	str	r3, [r4, #0]
 8005918:	f7fb fd76 	bl	8001408 <_sbrk>
 800591c:	1c43      	adds	r3, r0, #1
 800591e:	d102      	bne.n	8005926 <_sbrk_r+0x1a>
 8005920:	6823      	ldr	r3, [r4, #0]
 8005922:	b103      	cbz	r3, 8005926 <_sbrk_r+0x1a>
 8005924:	602b      	str	r3, [r5, #0]
 8005926:	bd38      	pop	{r3, r4, r5, pc}
 8005928:	200007a4 	.word	0x200007a4

0800592c <__malloc_lock>:
 800592c:	4770      	bx	lr

0800592e <__malloc_unlock>:
 800592e:	4770      	bx	lr

08005930 <_init>:
 8005930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005932:	bf00      	nop
 8005934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005936:	bc08      	pop	{r3}
 8005938:	469e      	mov	lr, r3
 800593a:	4770      	bx	lr

0800593c <_fini>:
 800593c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800593e:	bf00      	nop
 8005940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005942:	bc08      	pop	{r3}
 8005944:	469e      	mov	lr, r3
 8005946:	4770      	bx	lr
