
stm32f7-drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e40  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08008020  08008020  00018020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008040  08008040  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008040  08008040  00018040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008048  08008048  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008048  08008048  00018048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800804c  0800804c  0001804c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  20000070  080080c0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  080080c0  00020458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015433  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c19  00000000  00000000  000354d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001298  00000000  00000000  000380f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001120  00000000  00000000  00039388  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024c27  00000000  00000000  0003a4a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fc9c  00000000  00000000  0005f0cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e1d52  00000000  00000000  0006ed6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00150abd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e64  00000000  00000000  00150b38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008008 	.word	0x08008008

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08008008 	.word	0x08008008

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <ADC_INIT>:
/* Function Summary: The input from the ADC handler will be piped directly to the inputVar via DMA.
 * Parameters: hadc - ADC handler for particular ADC pin. inputVar - Variable you want ADC values stored into.
 */

void ADC_INIT(ADC_HandleTypeDef* hadc, uint32_t* inputVar)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc, inputVar, sizeof(*inputVar));
 800052a:	2204      	movs	r2, #4
 800052c:	6839      	ldr	r1, [r7, #0]
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f001 fdea 	bl	8002108 <HAL_ADC_Start_DMA>
	HAL_ADC_Start(hadc);
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f001 fd27 	bl	8001f88 <HAL_ADC_Start>
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <ESC_INIT>:
#if defined(DSHOT150) || defined(DSHOT300) || defined(DSHOT600) || defined(DSHOT1200)

#define __DSHOT_MAKE_BYTE(__DSHOT_BYTE__, __BIT__) (__DSHOT_BYTE__ = (((__BIT__ & 0b1) == 0b1) ? DSHOT_HIGH_BIT : DSHOT_LOW_BIT))

ESC_CONTROLLER* ESC_INIT(TIM_HandleTypeDef* dmaTimerTick, TIM_HandleTypeDef* pwmTimer, DMA_HandleTypeDef* dma)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b086      	sub	sp, #24
 8000546:	af00      	add	r7, sp, #0
 8000548:	60f8      	str	r0, [r7, #12]
 800054a:	60b9      	str	r1, [r7, #8]
 800054c:	607a      	str	r2, [r7, #4]
	dmaTimerTick->Instance->ARR = TIMER_ARR - 1;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	22b3      	movs	r2, #179	; 0xb3
 8000554:	62da      	str	r2, [r3, #44]	; 0x2c
	pwmTimer->Instance->ARR = TIMER_ARR - 1;
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	22b3      	movs	r2, #179	; 0xb3
 800055c:	62da      	str	r2, [r3, #44]	; 0x2c
	ESC_CONTROLLER* ESC_CONTROLLER = malloc(sizeof(ESC_CONTROLLER) * ESC_COUNT);
 800055e:	2010      	movs	r0, #16
 8000560:	f007 fcd6 	bl	8007f10 <malloc>
 8000564:	4603      	mov	r3, r0
 8000566:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < ESC_COUNT; i++)
 8000568:	2300      	movs	r3, #0
 800056a:	617b      	str	r3, [r7, #20]
 800056c:	e064      	b.n	8000638 <ESC_INIT+0xf6>
	{
		ESC_CONTROLLER[i].Throttle = 0;
 800056e:	697a      	ldr	r2, [r7, #20]
 8000570:	4613      	mov	r3, r2
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	4413      	add	r3, r2
 8000576:	00db      	lsls	r3, r3, #3
 8000578:	461a      	mov	r2, r3
 800057a:	693b      	ldr	r3, [r7, #16]
 800057c:	4413      	add	r3, r2
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
		ESC_CONTROLLER[i].Channel = 4*i;
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	0099      	lsls	r1, r3, #2
 8000586:	697a      	ldr	r2, [r7, #20]
 8000588:	4613      	mov	r3, r2
 800058a:	005b      	lsls	r3, r3, #1
 800058c:	4413      	add	r3, r2
 800058e:	00db      	lsls	r3, r3, #3
 8000590:	461a      	mov	r2, r3
 8000592:	693b      	ldr	r3, [r7, #16]
 8000594:	4413      	add	r3, r2
 8000596:	460a      	mov	r2, r1
 8000598:	605a      	str	r2, [r3, #4]
		ESC_CONTROLLER[i].Number = i;
 800059a:	697a      	ldr	r2, [r7, #20]
 800059c:	4613      	mov	r3, r2
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	4413      	add	r3, r2
 80005a2:	00db      	lsls	r3, r3, #3
 80005a4:	461a      	mov	r2, r3
 80005a6:	693b      	ldr	r3, [r7, #16]
 80005a8:	4413      	add	r3, r2
 80005aa:	697a      	ldr	r2, [r7, #20]
 80005ac:	609a      	str	r2, [r3, #8]
		ESC_CONTROLLER[i].Timer = dmaTimerTick;
 80005ae:	697a      	ldr	r2, [r7, #20]
 80005b0:	4613      	mov	r3, r2
 80005b2:	005b      	lsls	r3, r3, #1
 80005b4:	4413      	add	r3, r2
 80005b6:	00db      	lsls	r3, r3, #3
 80005b8:	461a      	mov	r2, r3
 80005ba:	693b      	ldr	r3, [r7, #16]
 80005bc:	4413      	add	r3, r2
 80005be:	68fa      	ldr	r2, [r7, #12]
 80005c0:	60da      	str	r2, [r3, #12]
		ESC_CONTROLLER[i].DMA = dma;
 80005c2:	697a      	ldr	r2, [r7, #20]
 80005c4:	4613      	mov	r3, r2
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	4413      	add	r3, r2
 80005ca:	00db      	lsls	r3, r3, #3
 80005cc:	461a      	mov	r2, r3
 80005ce:	693b      	ldr	r3, [r7, #16]
 80005d0:	4413      	add	r3, r2
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	611a      	str	r2, [r3, #16]
		ESC_CONTROLLER[i].CCR = (uint32_t) &(dmaTimerTick->Instance->CCR1) + (4*i);
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	3334      	adds	r3, #52	; 0x34
 80005dc:	4618      	mov	r0, r3
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	4619      	mov	r1, r3
 80005e4:	697a      	ldr	r2, [r7, #20]
 80005e6:	4613      	mov	r3, r2
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	4413      	add	r3, r2
 80005ec:	00db      	lsls	r3, r3, #3
 80005ee:	461a      	mov	r2, r3
 80005f0:	693b      	ldr	r3, [r7, #16]
 80005f2:	4413      	add	r3, r2
 80005f4:	1842      	adds	r2, r0, r1
 80005f6:	615a      	str	r2, [r3, #20]
		*((uint32_t *) ESC_CONTROLLER[i].CCR) = 0;
 80005f8:	697a      	ldr	r2, [r7, #20]
 80005fa:	4613      	mov	r3, r2
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	4413      	add	r3, r2
 8000600:	00db      	lsls	r3, r3, #3
 8000602:	461a      	mov	r2, r3
 8000604:	693b      	ldr	r3, [r7, #16]
 8000606:	4413      	add	r3, r2
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	461a      	mov	r2, r3
 800060c:	2300      	movs	r3, #0
 800060e:	6013      	str	r3, [r2, #0]
		HAL_TIM_PWM_Start(dmaTimerTick, ESC_CONTROLLER[i].Channel);
 8000610:	697a      	ldr	r2, [r7, #20]
 8000612:	4613      	mov	r3, r2
 8000614:	005b      	lsls	r3, r3, #1
 8000616:	4413      	add	r3, r2
 8000618:	00db      	lsls	r3, r3, #3
 800061a:	461a      	mov	r2, r3
 800061c:	693b      	ldr	r3, [r7, #16]
 800061e:	4413      	add	r3, r2
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	4619      	mov	r1, r3
 8000624:	68f8      	ldr	r0, [r7, #12]
 8000626:	f005 feeb 	bl	8006400 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(pwmTimer, TIM_CHANNEL_1);
 800062a:	2100      	movs	r1, #0
 800062c:	68b8      	ldr	r0, [r7, #8]
 800062e:	f005 fee7 	bl	8006400 <HAL_TIM_PWM_Start>
	for (int i = 0; i < ESC_COUNT; i++)
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	3301      	adds	r3, #1
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	2b03      	cmp	r3, #3
 800063c:	dd97      	ble.n	800056e <ESC_INIT+0x2c>
	}
	return ESC_CONTROLLER;
 800063e:	693b      	ldr	r3, [r7, #16]
}
 8000640:	4618      	mov	r0, r3
 8000642:	3718      	adds	r7, #24
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <ESC_UPDATE_THROTTLE>:

void ESC_UPDATE_THROTTLE(ESC_CONTROLLER* ESC, uint32_t throttle, uint8_t telemetry, uint8_t checksum)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b098      	sub	sp, #96	; 0x60
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	4611      	mov	r1, r2
 8000654:	461a      	mov	r2, r3
 8000656:	460b      	mov	r3, r1
 8000658:	71fb      	strb	r3, [r7, #7]
 800065a:	4613      	mov	r3, r2
 800065c:	71bb      	strb	r3, [r7, #6]
	if(!telemetry) checksum = 0;
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d101      	bne.n	8000668 <ESC_UPDATE_THROTTLE+0x20>
 8000664:	2300      	movs	r3, #0
 8000666:	71bb      	strb	r3, [r7, #6]
	// Throttle cannot exceed 11 bits, so max value is 2047
	if (throttle >= 2048) throttle = 2047;
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800066e:	d302      	bcc.n	8000676 <ESC_UPDATE_THROTTLE+0x2e>
 8000670:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000674:	60bb      	str	r3, [r7, #8]
	// 17th bit is to set CCR to 0 to keep it low between packets
	uint32_t dshotPacket[17] = {0};
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	2244      	movs	r2, #68	; 0x44
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f007 fc4e 	bl	8007f20 <memset>
	dshotPacket[16] = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	657b      	str	r3, [r7, #84]	; 0x54
	// Populate checksum bits
	for (int checksumBits = 15; checksumBits >= 11; checksumBits--)
 8000688:	230f      	movs	r3, #15
 800068a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800068c:	e014      	b.n	80006b8 <ESC_UPDATE_THROTTLE+0x70>
	{
		__DSHOT_MAKE_BYTE(dshotPacket[checksumBits], checksum);
 800068e:	79bb      	ldrb	r3, [r7, #6]
 8000690:	f003 0301 	and.w	r3, r3, #1
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <ESC_UPDATE_THROTTLE+0x54>
 8000698:	2287      	movs	r2, #135	; 0x87
 800069a:	e000      	b.n	800069e <ESC_UPDATE_THROTTLE+0x56>
 800069c:	2244      	movs	r2, #68	; 0x44
 800069e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80006a6:	440b      	add	r3, r1
 80006a8:	f843 2c4c 	str.w	r2, [r3, #-76]
		checksum = checksum >> 1;
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	085b      	lsrs	r3, r3, #1
 80006b0:	71bb      	strb	r3, [r7, #6]
	for (int checksumBits = 15; checksumBits >= 11; checksumBits--)
 80006b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006b4:	3b01      	subs	r3, #1
 80006b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80006b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006ba:	2b0a      	cmp	r3, #10
 80006bc:	dce7      	bgt.n	800068e <ESC_UPDATE_THROTTLE+0x46>
	}
	// Populate telemetry bit
	//__DSHOT_MAKE_BYTE(dshotPacket[11], telemetry);
	// Populate throttle bits
	for (int throttleBits = 10; throttleBits >=0; throttleBits--)	{
 80006be:	230a      	movs	r3, #10
 80006c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80006c2:	e014      	b.n	80006ee <ESC_UPDATE_THROTTLE+0xa6>
		__DSHOT_MAKE_BYTE(dshotPacket[throttleBits], throttle);
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <ESC_UPDATE_THROTTLE+0x8a>
 80006ce:	2287      	movs	r2, #135	; 0x87
 80006d0:	e000      	b.n	80006d4 <ESC_UPDATE_THROTTLE+0x8c>
 80006d2:	2244      	movs	r2, #68	; 0x44
 80006d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80006dc:	440b      	add	r3, r1
 80006de:	f843 2c4c 	str.w	r2, [r3, #-76]
		throttle = throttle >> 1;
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	085b      	lsrs	r3, r3, #1
 80006e6:	60bb      	str	r3, [r7, #8]
	for (int throttleBits = 10; throttleBits >=0; throttleBits--)	{
 80006e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006ea:	3b01      	subs	r3, #1
 80006ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80006ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	dae7      	bge.n	80006c4 <ESC_UPDATE_THROTTLE+0x7c>
	}
	// Setup the DMA stream to send the dshotPacket bytes to the CCR
	// Clear transfer and half transfer complete flags
	__HAL_DMA_CLEAR_FLAG(ESC->DMA, (DMA_FLAG_TCIF0_4 | DMA_FLAG_HTIF0_4 | DMA_FLAG_FEIF0_4));
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	691b      	ldr	r3, [r3, #16]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	461a      	mov	r2, r3
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <ESC_UPDATE_THROTTLE+0x144>)
 80006fe:	429a      	cmp	r2, r3
 8000700:	d903      	bls.n	800070a <ESC_UPDATE_THROTTLE+0xc2>
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <ESC_UPDATE_THROTTLE+0x148>)
 8000704:	2231      	movs	r2, #49	; 0x31
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	e018      	b.n	800073c <ESC_UPDATE_THROTTLE+0xf4>
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	691b      	ldr	r3, [r3, #16]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	461a      	mov	r2, r3
 8000712:	4b20      	ldr	r3, [pc, #128]	; (8000794 <ESC_UPDATE_THROTTLE+0x14c>)
 8000714:	429a      	cmp	r2, r3
 8000716:	d903      	bls.n	8000720 <ESC_UPDATE_THROTTLE+0xd8>
 8000718:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <ESC_UPDATE_THROTTLE+0x148>)
 800071a:	2231      	movs	r2, #49	; 0x31
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	e00d      	b.n	800073c <ESC_UPDATE_THROTTLE+0xf4>
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	691b      	ldr	r3, [r3, #16]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	461a      	mov	r2, r3
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <ESC_UPDATE_THROTTLE+0x150>)
 800072a:	429a      	cmp	r2, r3
 800072c:	d903      	bls.n	8000736 <ESC_UPDATE_THROTTLE+0xee>
 800072e:	4b1b      	ldr	r3, [pc, #108]	; (800079c <ESC_UPDATE_THROTTLE+0x154>)
 8000730:	2231      	movs	r2, #49	; 0x31
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	e002      	b.n	800073c <ESC_UPDATE_THROTTLE+0xf4>
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <ESC_UPDATE_THROTTLE+0x154>)
 8000738:	2231      	movs	r2, #49	; 0x31
 800073a:	609a      	str	r2, [r3, #8]
	ESC->DMA->Instance->NDTR = 17;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	691b      	ldr	r3, [r3, #16]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2211      	movs	r2, #17
 8000744:	605a      	str	r2, [r3, #4]
	ESC->DMA->Instance->M0AR = (uint32_t) &dshotPacket;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	691b      	ldr	r3, [r3, #16]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f107 0214 	add.w	r2, r7, #20
 8000750:	60da      	str	r2, [r3, #12]
	ESC->DMA->Instance->PAR = ESC->CCR;
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	691b      	ldr	r3, [r3, #16]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	68fa      	ldr	r2, [r7, #12]
 800075a:	6952      	ldr	r2, [r2, #20]
 800075c:	609a      	str	r2, [r3, #8]
	__HAL_DMA_ENABLE(ESC->DMA);
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	691b      	ldr	r3, [r3, #16]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	691b      	ldr	r3, [r3, #16]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f042 0201 	orr.w	r2, r2, #1
 8000770:	601a      	str	r2, [r3, #0]
	while(ESC->DMA->Instance->CR & 0x1);
 8000772:	bf00      	nop
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	691b      	ldr	r3, [r3, #16]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f003 0301 	and.w	r3, r3, #1
 8000780:	2b00      	cmp	r3, #0
 8000782:	d1f7      	bne.n	8000774 <ESC_UPDATE_THROTTLE+0x12c>
}
 8000784:	bf00      	nop
 8000786:	3760      	adds	r7, #96	; 0x60
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40026458 	.word	0x40026458
 8000790:	40026400 	.word	0x40026400
 8000794:	400260b8 	.word	0x400260b8
 8000798:	40026058 	.word	0x40026058
 800079c:	40026000 	.word	0x40026000

080007a0 <RX_INIT>:
 */

#include "RX.h"

RX_CONTROLLER* RX_INIT(TIM_HandleTypeDef* timerSticks, TIM_HandleTypeDef* timerSwitches, DMA_HandleTypeDef* DMA)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
	RX_CONTROLLER* RX_CONTROLLER = malloc(sizeof(RX_CONTROLLER));
 80007ac:	2004      	movs	r0, #4
 80007ae:	f007 fbaf 	bl	8007f10 <malloc>
 80007b2:	4603      	mov	r3, r0
 80007b4:	617b      	str	r3, [r7, #20]
	RX_CONTROLLER->throttle = 0;
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
	RX_CONTROLLER->pitch = 0;
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	2200      	movs	r2, #0
 80007c0:	605a      	str	r2, [r3, #4]
	RX_CONTROLLER->roll = 0;
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
	RX_CONTROLLER->yaw = 0;
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
	RX_CONTROLLER->switchA = 0;
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
	RX_CONTROLLER->switchB = 0;
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	2200      	movs	r2, #0
 80007d8:	615a      	str	r2, [r3, #20]
	RX_CONTROLLER->timerSticks = timerSticks;
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	68fa      	ldr	r2, [r7, #12]
 80007de:	619a      	str	r2, [r3, #24]
	RX_CONTROLLER->timerSwitches = timerSwitches;
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	61da      	str	r2, [r3, #28]
	RX_CONTROLLER->DMA = DMA;
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	621a      	str	r2, [r3, #32]
	return RX_CONTROLLER;
 80007ec:	697b      	ldr	r3, [r7, #20]
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3718      	adds	r7, #24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <RX_UPDATE>:

void RX_UPDATE(RX_CONTROLLER* RX_CONTROLLER)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
	HAL_TIM_IC_Start_DMA(RX_CONTROLLER->timerSticks, TIM_CHANNEL_1, &RX_CONTROLLER->throttle, 4); // This will increment channel and data memory
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	6998      	ldr	r0, [r3, #24]
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	2304      	movs	r3, #4
 8000806:	2100      	movs	r1, #0
 8000808:	f005 fe6a 	bl	80064e0 <HAL_TIM_IC_Start_DMA>
	while(RX_CONTROLLER->DMA->Instance->CR & 0x1);
 800080c:	bf00      	nop
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6a1b      	ldr	r3, [r3, #32]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1f7      	bne.n	800080e <RX_UPDATE+0x18>
	HAL_TIM_IC_Start_DMA(RX_CONTROLLER->timerSticks, TIM_CHANNEL_1, &RX_CONTROLLER->switchA, 1);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6998      	ldr	r0, [r3, #24]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f103 0210 	add.w	r2, r3, #16
 8000828:	2301      	movs	r3, #1
 800082a:	2100      	movs	r1, #0
 800082c:	f005 fe58 	bl	80064e0 <HAL_TIM_IC_Start_DMA>
	HAL_TIM_IC_Start_DMA(RX_CONTROLLER->timerSticks, TIM_CHANNEL_4, &RX_CONTROLLER->switchB, 1);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	6998      	ldr	r0, [r3, #24]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f103 0214 	add.w	r2, r3, #20
 800083a:	2301      	movs	r3, #1
 800083c:	210c      	movs	r1, #12
 800083e:	f005 fe4f 	bl	80064e0 <HAL_TIM_IC_Start_DMA>
	while(RX_CONTROLLER->DMA->Instance->CR & 0x1);
 8000842:	bf00      	nop
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	6a1b      	ldr	r3, [r3, #32]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	2b00      	cmp	r3, #0
 8000852:	d1f7      	bne.n	8000844 <RX_UPDATE+0x4e>
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <XLG_INIT>:
  * @param writeSize	write here
  * @retval void
  */

void XLG_INIT(I2C_HandleTypeDef* i2c)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	uint8_t writeThis = 0b10100000;
 8000864:	23a0      	movs	r3, #160	; 0xa0
 8000866:	73fb      	strb	r3, [r7, #15]
	XLG_WRITE(i2c, CTRL1_XL, &writeThis, 1);
 8000868:	f107 020f 	add.w	r2, r7, #15
 800086c:	2301      	movs	r3, #1
 800086e:	2110      	movs	r1, #16
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f000 f80d 	bl	8000890 <XLG_WRITE>
	writeThis = 0b10001100;
 8000876:	238c      	movs	r3, #140	; 0x8c
 8000878:	73fb      	strb	r3, [r7, #15]
	XLG_WRITE(i2c, CTRL2_G, &writeThis, 1);
 800087a:	f107 020f 	add.w	r2, r7, #15
 800087e:	2301      	movs	r3, #1
 8000880:	2111      	movs	r1, #17
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f000 f804 	bl	8000890 <XLG_WRITE>
}
 8000888:	bf00      	nop
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <XLG_WRITE>:

void XLG_WRITE(I2C_HandleTypeDef* i2c, uint8_t addr, uint8_t* writeByte, uint32_t writeSize)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af02      	add	r7, sp, #8
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	607a      	str	r2, [r7, #4]
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	460b      	mov	r3, r1
 800089e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write_DMA(i2c, XLG_I2C_ADDR, addr, XLG_REG_SIZE, writeByte, writeSize);
 80008a0:	7afb      	ldrb	r3, [r7, #11]
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	9301      	str	r3, [sp, #4]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	2301      	movs	r3, #1
 80008b0:	21d4      	movs	r1, #212	; 0xd4
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	f002 fffa 	bl	80038ac <HAL_I2C_Mem_Write_DMA>
	while(i2c->hdmatx->State != HAL_DMA_STATE_READY);
 80008b8:	bf00      	nop
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d1f8      	bne.n	80008ba <XLG_WRITE+0x2a>
	i2c->State = HAL_I2C_STATE_READY;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	2220      	movs	r2, #32
 80008cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80008d0:	bf00      	nop
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <XLG_READ>:

void XLG_READ(I2C_HandleTypeDef* i2c, uint8_t addr, uint8_t* readByte, uint32_t readSize)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b088      	sub	sp, #32
 80008dc:	af04      	add	r7, sp, #16
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	607a      	str	r2, [r7, #4]
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	460b      	mov	r3, r1
 80008e6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Read_DMA(i2c, XLG_I2C_ADDR, addr, XLG_REG_SIZE, readByte, readSize);
 80008e8:	7afb      	ldrb	r3, [r7, #11]
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	9301      	str	r3, [sp, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	2301      	movs	r3, #1
 80008f8:	21d4      	movs	r1, #212	; 0xd4
 80008fa:	68f8      	ldr	r0, [r7, #12]
 80008fc:	f003 f8cc 	bl	8003a98 <HAL_I2C_Mem_Read_DMA>
	HAL_I2C_Mem_Read(i2c, XLG_I2C_ADDR, addr, XLG_REG_SIZE, readByte, readSize, HAL_MAX_DELAY);
 8000900:	7afb      	ldrb	r3, [r7, #11]
 8000902:	b299      	uxth	r1, r3
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	b29b      	uxth	r3, r3
 8000908:	f04f 32ff 	mov.w	r2, #4294967295
 800090c:	9202      	str	r2, [sp, #8]
 800090e:	9301      	str	r3, [sp, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	2301      	movs	r3, #1
 8000916:	460a      	mov	r2, r1
 8000918:	21d4      	movs	r1, #212	; 0xd4
 800091a:	68f8      	ldr	r0, [r7, #12]
 800091c:	f002 feac 	bl	8003678 <HAL_I2C_Mem_Read>
	while(i2c->hdmarx->State != HAL_DMA_STATE_READY);
 8000920:	bf00      	nop
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000926:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800092a:	b2db      	uxtb	r3, r3
 800092c:	2b01      	cmp	r3, #1
 800092e:	d1f8      	bne.n	8000922 <XLG_READ+0x4a>
	i2c->State = HAL_I2C_STATE_READY;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	2220      	movs	r2, #32
 8000934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8000938:	bf00      	nop
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <XLG_XL_DATA_READY>:

_Bool XLG_XL_DATA_READY(I2C_HandleTypeDef* i2c)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	73fb      	strb	r3, [r7, #15]
	XLG_READ(i2c, STATUS_REG, &status, 1);
 800094c:	f107 020f 	add.w	r2, r7, #15
 8000950:	2301      	movs	r3, #1
 8000952:	211e      	movs	r1, #30
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f7ff ffbf 	bl	80008d8 <XLG_READ>
	return (status & 0b1); // Mask with XLDA bit in STATUS_REG
 800095a:	7bfb      	ldrb	r3, [r7, #15]
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	2b00      	cmp	r3, #0
 8000962:	bf14      	ite	ne
 8000964:	2301      	movne	r3, #1
 8000966:	2300      	moveq	r3, #0
 8000968:	b2db      	uxtb	r3, r3
}
 800096a:	4618      	mov	r0, r3
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <XLG_G_DATA_READY>:

_Bool XLG_G_DATA_READY(I2C_HandleTypeDef* i2c)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b084      	sub	sp, #16
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	73fb      	strb	r3, [r7, #15]
	XLG_READ(i2c, STATUS_REG, &status, 1);
 800097e:	f107 020f 	add.w	r2, r7, #15
 8000982:	2301      	movs	r3, #1
 8000984:	211e      	movs	r1, #30
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f7ff ffa6 	bl	80008d8 <XLG_READ>
	return (status & 0b10); // Mask with DGA bit in STATUS_REG
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	2b00      	cmp	r3, #0
 8000994:	bf14      	ite	ne
 8000996:	2301      	movne	r3, #1
 8000998:	2300      	moveq	r3, #0
 800099a:	b2db      	uxtb	r3, r3
}
 800099c:	4618      	mov	r0, r3
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <XLG_G_DATA_READ>:
	XLG_READ(i2c, STATUS_REG, &status, 1);
	return (status & 0b100); // Mask with TDA bit in STATUS_REG
}

void XLG_G_DATA_READ(I2C_HandleTypeDef* i2c, XLG_DATA* gData)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
	if (XLG_G_DATA_READY(i2c))
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f7ff ffdf 	bl	8000972 <XLG_G_DATA_READY>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d064      	beq.n	8000a84 <XLG_G_DATA_READ+0xe0>
	{
		gData->dataReady = true;
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	2201      	movs	r2, #1
 80009be:	719a      	strb	r2, [r3, #6]
		uint8_t readByte[6] = {0};
 80009c0:	f107 0308 	add.w	r3, r7, #8
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	809a      	strh	r2, [r3, #4]
		XLG_READ(i2c, OUTX_H_G, &readByte[0], 1);
 80009ca:	f107 0208 	add.w	r2, r7, #8
 80009ce:	2301      	movs	r3, #1
 80009d0:	2123      	movs	r1, #35	; 0x23
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff ff80 	bl	80008d8 <XLG_READ>
		XLG_READ(i2c, OUTX_L_G, &readByte[1], 1);
 80009d8:	f107 0308 	add.w	r3, r7, #8
 80009dc:	1c5a      	adds	r2, r3, #1
 80009de:	2301      	movs	r3, #1
 80009e0:	2122      	movs	r1, #34	; 0x22
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f7ff ff78 	bl	80008d8 <XLG_READ>
		XLG_READ(i2c, OUTY_H_G, &readByte[2], 1);
 80009e8:	f107 0308 	add.w	r3, r7, #8
 80009ec:	1c9a      	adds	r2, r3, #2
 80009ee:	2301      	movs	r3, #1
 80009f0:	2125      	movs	r1, #37	; 0x25
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f7ff ff70 	bl	80008d8 <XLG_READ>
		XLG_READ(i2c, OUTY_L_G, &readByte[3], 1);
 80009f8:	f107 0308 	add.w	r3, r7, #8
 80009fc:	1cda      	adds	r2, r3, #3
 80009fe:	2301      	movs	r3, #1
 8000a00:	2124      	movs	r1, #36	; 0x24
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff ff68 	bl	80008d8 <XLG_READ>
		XLG_READ(i2c, OUTZ_H_G, &readByte[4], 1);
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	1d1a      	adds	r2, r3, #4
 8000a0e:	2301      	movs	r3, #1
 8000a10:	2127      	movs	r1, #39	; 0x27
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff ff60 	bl	80008d8 <XLG_READ>
		XLG_READ(i2c, OUTZ_L_G, &readByte[5], 1);
 8000a18:	f107 0308 	add.w	r3, r7, #8
 8000a1c:	1d5a      	adds	r2, r3, #5
 8000a1e:	2301      	movs	r3, #1
 8000a20:	2126      	movs	r1, #38	; 0x26
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f7ff ff58 	bl	80008d8 <XLG_READ>
		gData->x = readByte[0];
 8000a28:	7a3b      	ldrb	r3, [r7, #8]
 8000a2a:	b21a      	sxth	r2, r3
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	801a      	strh	r2, [r3, #0]
		gData->x = (gData->x << 8) | readByte[1];
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a36:	021b      	lsls	r3, r3, #8
 8000a38:	b21a      	sxth	r2, r3
 8000a3a:	7a7b      	ldrb	r3, [r7, #9]
 8000a3c:	b21b      	sxth	r3, r3
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	b21a      	sxth	r2, r3
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	801a      	strh	r2, [r3, #0]
		gData->y = readByte[2];
 8000a46:	7abb      	ldrb	r3, [r7, #10]
 8000a48:	b21a      	sxth	r2, r3
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	805a      	strh	r2, [r3, #2]
		gData->y = (gData->y << 8) | readByte[3];
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a54:	021b      	lsls	r3, r3, #8
 8000a56:	b21a      	sxth	r2, r3
 8000a58:	7afb      	ldrb	r3, [r7, #11]
 8000a5a:	b21b      	sxth	r3, r3
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	b21a      	sxth	r2, r3
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	805a      	strh	r2, [r3, #2]
		gData->z = readByte[4];
 8000a64:	7b3b      	ldrb	r3, [r7, #12]
 8000a66:	b21a      	sxth	r2, r3
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	809a      	strh	r2, [r3, #4]
		gData->z = (gData->z << 8) | readByte[5];
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a72:	021b      	lsls	r3, r3, #8
 8000a74:	b21a      	sxth	r2, r3
 8000a76:	7b7b      	ldrb	r3, [r7, #13]
 8000a78:	b21b      	sxth	r3, r3
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	b21a      	sxth	r2, r3
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	809a      	strh	r2, [r3, #4]
	}
	else
	{
		gData->dataReady = false;
	}
}
 8000a82:	e002      	b.n	8000a8a <XLG_G_DATA_READ+0xe6>
		gData->dataReady = false;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	2200      	movs	r2, #0
 8000a88:	719a      	strb	r2, [r3, #6]
}
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <XLG_XL_DATA_READ>:

void XLG_XL_DATA_READ(I2C_HandleTypeDef* i2c, XLG_DATA* xlData)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b084      	sub	sp, #16
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
 8000a9a:	6039      	str	r1, [r7, #0]
	if (XLG_XL_DATA_READY(i2c))
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff ff4f 	bl	8000940 <XLG_XL_DATA_READY>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d064      	beq.n	8000b72 <XLG_XL_DATA_READ+0xe0>
	{
		xlData->dataReady = true;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	2201      	movs	r2, #1
 8000aac:	719a      	strb	r2, [r3, #6]
		uint8_t readByte[6] = {0};
 8000aae:	f107 0308 	add.w	r3, r7, #8
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	809a      	strh	r2, [r3, #4]
		XLG_READ(i2c, OUTX_H_XL, &readByte[0], 1);
 8000ab8:	f107 0208 	add.w	r2, r7, #8
 8000abc:	2301      	movs	r3, #1
 8000abe:	2129      	movs	r1, #41	; 0x29
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff ff09 	bl	80008d8 <XLG_READ>
		XLG_READ(i2c, OUTX_L_XL, &readByte[1], 1);
 8000ac6:	f107 0308 	add.w	r3, r7, #8
 8000aca:	1c5a      	adds	r2, r3, #1
 8000acc:	2301      	movs	r3, #1
 8000ace:	2128      	movs	r1, #40	; 0x28
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff ff01 	bl	80008d8 <XLG_READ>
		XLG_READ(i2c, OUTY_H_XL, &readByte[2], 1);
 8000ad6:	f107 0308 	add.w	r3, r7, #8
 8000ada:	1c9a      	adds	r2, r3, #2
 8000adc:	2301      	movs	r3, #1
 8000ade:	212b      	movs	r1, #43	; 0x2b
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f7ff fef9 	bl	80008d8 <XLG_READ>
		XLG_READ(i2c, OUTY_L_XL, &readByte[3], 1);
 8000ae6:	f107 0308 	add.w	r3, r7, #8
 8000aea:	1cda      	adds	r2, r3, #3
 8000aec:	2301      	movs	r3, #1
 8000aee:	212a      	movs	r1, #42	; 0x2a
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff fef1 	bl	80008d8 <XLG_READ>
		XLG_READ(i2c, OUTZ_H_XL, &readByte[4], 1);
 8000af6:	f107 0308 	add.w	r3, r7, #8
 8000afa:	1d1a      	adds	r2, r3, #4
 8000afc:	2301      	movs	r3, #1
 8000afe:	212d      	movs	r1, #45	; 0x2d
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff fee9 	bl	80008d8 <XLG_READ>
		XLG_READ(i2c, OUTZ_L_XL, &readByte[5], 1);
 8000b06:	f107 0308 	add.w	r3, r7, #8
 8000b0a:	1d5a      	adds	r2, r3, #5
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	212c      	movs	r1, #44	; 0x2c
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff fee1 	bl	80008d8 <XLG_READ>
		xlData->x = readByte[0];
 8000b16:	7a3b      	ldrb	r3, [r7, #8]
 8000b18:	b21a      	sxth	r2, r3
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	801a      	strh	r2, [r3, #0]
		xlData->x = (xlData->x << 8) | readByte[1];
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b24:	021b      	lsls	r3, r3, #8
 8000b26:	b21a      	sxth	r2, r3
 8000b28:	7a7b      	ldrb	r3, [r7, #9]
 8000b2a:	b21b      	sxth	r3, r3
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	b21a      	sxth	r2, r3
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	801a      	strh	r2, [r3, #0]
		xlData->y = readByte[2];
 8000b34:	7abb      	ldrb	r3, [r7, #10]
 8000b36:	b21a      	sxth	r2, r3
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	805a      	strh	r2, [r3, #2]
		xlData->y = (xlData->y << 8) | readByte[3];
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b42:	021b      	lsls	r3, r3, #8
 8000b44:	b21a      	sxth	r2, r3
 8000b46:	7afb      	ldrb	r3, [r7, #11]
 8000b48:	b21b      	sxth	r3, r3
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	b21a      	sxth	r2, r3
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	805a      	strh	r2, [r3, #2]
		xlData->z = readByte[4];
 8000b52:	7b3b      	ldrb	r3, [r7, #12]
 8000b54:	b21a      	sxth	r2, r3
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	809a      	strh	r2, [r3, #4]
		xlData->z = (xlData->z << 8) | readByte[5];
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b60:	021b      	lsls	r3, r3, #8
 8000b62:	b21a      	sxth	r2, r3
 8000b64:	7b7b      	ldrb	r3, [r7, #13]
 8000b66:	b21b      	sxth	r3, r3
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	b21a      	sxth	r2, r3
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	809a      	strh	r2, [r3, #4]
	}
	else
	{
		xlData->dataReady = false;
	}
}
 8000b70:	e002      	b.n	8000b78 <XLG_XL_DATA_READ+0xe6>
		xlData->dataReady = false;
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	2200      	movs	r2, #0
 8000b76:	719a      	strb	r2, [r3, #6]
}
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b86:	f001 f95e 	bl	8001e46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8a:	f000 f87f 	bl	8000c8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b8e:	f000 fc31 	bl	80013f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b92:	f000 fbf9 	bl	8001388 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000b96:	f000 fbbf 	bl	8001318 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8000b9a:	f000 fbed 	bl	8001378 <MX_USB_OTG_FS_USB_Init>
  MX_TIM4_Init();
 8000b9e:	f000 fb29 	bl	80011f4 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000ba2:	f000 f90b 	bl	8000dbc <MX_ADC1_Init>
  MX_I2C1_Init();
 8000ba6:	f000 f95b 	bl	8000e60 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000baa:	f000 faa7 	bl	80010fc <MX_TIM3_Init>
  MX_TIM2_Init();
 8000bae:	f000 fa13 	bl	8000fd8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000bb2:	f000 f995 	bl	8000ee0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  ADC_INIT(&hadc1, &throttlePot);
 8000bb6:	4926      	ldr	r1, [pc, #152]	; (8000c50 <main+0xd0>)
 8000bb8:	4826      	ldr	r0, [pc, #152]	; (8000c54 <main+0xd4>)
 8000bba:	f7ff fcb1 	bl	8000520 <ADC_INIT>
  XLG_INIT(&hi2c1);
 8000bbe:	4826      	ldr	r0, [pc, #152]	; (8000c58 <main+0xd8>)
 8000bc0:	f7ff fe4c 	bl	800085c <XLG_INIT>
  ESC_CONTROLLER* myESCSet = ESC_INIT(&htim3, &htim4, &hdma_tim4_ch1);
 8000bc4:	4a25      	ldr	r2, [pc, #148]	; (8000c5c <main+0xdc>)
 8000bc6:	4926      	ldr	r1, [pc, #152]	; (8000c60 <main+0xe0>)
 8000bc8:	4826      	ldr	r0, [pc, #152]	; (8000c64 <main+0xe4>)
 8000bca:	f7ff fcba 	bl	8000542 <ESC_INIT>
 8000bce:	6078      	str	r0, [r7, #4]
  RX_CONTROLLER* myRX = RX_INIT(&htim1, &htim2, &hdma_tim2_up_ch3);
 8000bd0:	4a25      	ldr	r2, [pc, #148]	; (8000c68 <main+0xe8>)
 8000bd2:	4926      	ldr	r1, [pc, #152]	; (8000c6c <main+0xec>)
 8000bd4:	4826      	ldr	r0, [pc, #152]	; (8000c70 <main+0xf0>)
 8000bd6:	f7ff fde3 	bl	80007a0 <RX_INIT>
 8000bda:	6038      	str	r0, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  RX_UPDATE(myRX);
 8000bdc:	6838      	ldr	r0, [r7, #0]
 8000bde:	f7ff fe0a 	bl	80007f6 <RX_UPDATE>
	  XLG_G_DATA_READ(&hi2c1, &gData);
 8000be2:	4924      	ldr	r1, [pc, #144]	; (8000c74 <main+0xf4>)
 8000be4:	481c      	ldr	r0, [pc, #112]	; (8000c58 <main+0xd8>)
 8000be6:	f7ff fedd 	bl	80009a4 <XLG_G_DATA_READ>
	  XLG_XL_DATA_READ(&hi2c1, &xlData);
 8000bea:	4923      	ldr	r1, [pc, #140]	; (8000c78 <main+0xf8>)
 8000bec:	481a      	ldr	r0, [pc, #104]	; (8000c58 <main+0xd8>)
 8000bee:	f7ff ff50 	bl	8000a92 <XLG_XL_DATA_READ>
//		  sprintf((char*)buf, "%i %i %i %i %i %i\r\n", xlData.x, xlData.y, xlData.z,
//		  	  	  	  	  	  	  	  	  	  	  	   gData.x, gData.y, gData.z);
//		  HAL_UART_Transmit(&huart3, buf, strlen((char*)buf), HAL_MAX_DELAY);
//	  }
//	  DSHOT_ADC_CONV(throttle, throttlePot);
	  throttle++;
 8000bf2:	4b22      	ldr	r3, [pc, #136]	; (8000c7c <main+0xfc>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	4a20      	ldr	r2, [pc, #128]	; (8000c7c <main+0xfc>)
 8000bfa:	6013      	str	r3, [r2, #0]
	  if(throttle > 3000) throttle = 0;
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <main+0xfc>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d902      	bls.n	8000c0e <main+0x8e>
 8000c08:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <main+0xfc>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
	  ESC_UPDATE_THROTTLE(&myESCSet[motorNum], throttle, telemetry, checksum);
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <main+0x100>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	461a      	mov	r2, r3
 8000c14:	4613      	mov	r3, r2
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	4413      	add	r3, r2
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	1898      	adds	r0, r3, r2
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <main+0xfc>)
 8000c24:	6819      	ldr	r1, [r3, #0]
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <main+0x104>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <main+0x108>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	f7ff fd0a 	bl	8000648 <ESC_UPDATE_THROTTLE>
	  motorNum++;
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <main+0x100>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <main+0x100>)
 8000c3e:	701a      	strb	r2, [r3, #0]
	  if (motorNum > 3) motorNum = 0;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <main+0x100>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b03      	cmp	r3, #3
 8000c46:	d9c9      	bls.n	8000bdc <main+0x5c>
 8000c48:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <main+0x100>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
	  RX_UPDATE(myRX);
 8000c4e:	e7c5      	b.n	8000bdc <main+0x5c>
 8000c50:	20000444 	.word	0x20000444
 8000c54:	200002b4 	.word	0x200002b4
 8000c58:	200001c8 	.word	0x200001c8
 8000c5c:	200003e4 	.word	0x200003e4
 8000c60:	200000a8 	.word	0x200000a8
 8000c64:	20000274 	.word	0x20000274
 8000c68:	20000214 	.word	0x20000214
 8000c6c:	200003a4 	.word	0x200003a4
 8000c70:	20000304 	.word	0x20000304
 8000c74:	200002fc 	.word	0x200002fc
 8000c78:	20000448 	.word	0x20000448
 8000c7c:	2000008c 	.word	0x2000008c
 8000c80:	20000098 	.word	0x20000098
 8000c84:	20000094 	.word	0x20000094
 8000c88:	20000090 	.word	0x20000090

08000c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b0b4      	sub	sp, #208	; 0xd0
 8000c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c92:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000c96:	2230      	movs	r2, #48	; 0x30
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f007 f940 	bl	8007f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	2280      	movs	r2, #128	; 0x80
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f007 f931 	bl	8007f20 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000cbe:	f004 fb05 	bl	80052cc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc2:	4b3b      	ldr	r3, [pc, #236]	; (8000db0 <SystemClock_Config+0x124>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	4a3a      	ldr	r2, [pc, #232]	; (8000db0 <SystemClock_Config+0x124>)
 8000cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cce:	4b38      	ldr	r3, [pc, #224]	; (8000db0 <SystemClock_Config+0x124>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cda:	4b36      	ldr	r3, [pc, #216]	; (8000db4 <SystemClock_Config+0x128>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a35      	ldr	r2, [pc, #212]	; (8000db4 <SystemClock_Config+0x128>)
 8000ce0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	4b33      	ldr	r3, [pc, #204]	; (8000db4 <SystemClock_Config+0x128>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cf8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d00:	2302      	movs	r3, #2
 8000d02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d0e:	2308      	movs	r3, #8
 8000d10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000d14:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000d18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000d22:	2309      	movs	r3, #9
 8000d24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d28:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f004 fb2d 	bl	800538c <HAL_RCC_OscConfig>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000d38:	f000 fc5c 	bl	80015f4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d3c:	f004 fad6 	bl	80052ec <HAL_PWREx_EnableOverDrive>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000d46:	f000 fc55 	bl	80015f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4a:	230f      	movs	r3, #15
 8000d4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d50:	2302      	movs	r3, #2
 8000d52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d5c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d6c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d70:	2107      	movs	r1, #7
 8000d72:	4618      	mov	r0, r3
 8000d74:	f004 fdae 	bl	80058d4 <HAL_RCC_ClockConfig>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000d7e:	f000 fc39 	bl	80015f4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8000d82:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <SystemClock_Config+0x12c>)
 8000d84:	60fb      	str	r3, [r7, #12]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d86:	2300      	movs	r3, #0
 8000d88:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	66bb      	str	r3, [r7, #104]	; 0x68
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f004 ff93 	bl	8005cc4 <HAL_RCCEx_PeriphCLKConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000da4:	f000 fc26 	bl	80015f4 <Error_Handler>
  }
}
 8000da8:	bf00      	nop
 8000daa:	37d0      	adds	r7, #208	; 0xd0
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40007000 	.word	0x40007000
 8000db8:	00204100 	.word	0x00204100

08000dbc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dce:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000dd0:	4a21      	ldr	r2, [pc, #132]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000dd2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dd4:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000dd6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dda:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ddc:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000de2:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000de8:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dee:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dfc:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000dfe:	4a17      	ldr	r2, [pc, #92]	; (8000e5c <MX_ADC1_Init+0xa0>)
 8000e00:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e02:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e16:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e1c:	480d      	ldr	r0, [pc, #52]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000e1e:	f001 f86f 	bl	8001f00 <HAL_ADC_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e28:	f000 fbe4 	bl	80015f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e2c:	2309      	movs	r3, #9
 8000e2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e30:	2301      	movs	r3, #1
 8000e32:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e38:	463b      	mov	r3, r7
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000e3e:	f001 fa5b 	bl	80022f8 <HAL_ADC_ConfigChannel>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e48:	f000 fbd4 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200002b4 	.word	0x200002b4
 8000e58:	40012000 	.word	0x40012000
 8000e5c:	0f000001 	.word	0x0f000001

08000e60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e64:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <MX_I2C1_Init+0x74>)
 8000e66:	4a1c      	ldr	r2, [pc, #112]	; (8000ed8 <MX_I2C1_Init+0x78>)
 8000e68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000e6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <MX_I2C1_Init+0x74>)
 8000e6c:	4a1b      	ldr	r2, [pc, #108]	; (8000edc <MX_I2C1_Init+0x7c>)
 8000e6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 212;
 8000e70:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <MX_I2C1_Init+0x74>)
 8000e72:	22d4      	movs	r2, #212	; 0xd4
 8000e74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e76:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <MX_I2C1_Init+0x74>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e7c:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <MX_I2C1_Init+0x74>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e82:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <MX_I2C1_Init+0x74>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <MX_I2C1_Init+0x74>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MX_I2C1_Init+0x74>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <MX_I2C1_Init+0x74>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e9a:	480e      	ldr	r0, [pc, #56]	; (8000ed4 <MX_I2C1_Init+0x74>)
 8000e9c:	f002 fb5c 	bl	8003558 <HAL_I2C_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ea6:	f000 fba5 	bl	80015f4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4809      	ldr	r0, [pc, #36]	; (8000ed4 <MX_I2C1_Init+0x74>)
 8000eae:	f004 f976 	bl	800519e <HAL_I2CEx_ConfigAnalogFilter>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000eb8:	f000 fb9c 	bl	80015f4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_I2C1_Init+0x74>)
 8000ec0:	f004 f9b8 	bl	8005234 <HAL_I2CEx_ConfigDigitalFilter>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000eca:	f000 fb93 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200001c8 	.word	0x200001c8
 8000ed8:	40005400 	.word	0x40005400
 8000edc:	20404768 	.word	0x20404768

08000ee0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b088      	sub	sp, #32
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000efe:	4b34      	ldr	r3, [pc, #208]	; (8000fd0 <MX_TIM1_Init+0xf0>)
 8000f00:	4a34      	ldr	r2, [pc, #208]	; (8000fd4 <MX_TIM1_Init+0xf4>)
 8000f02:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1079;
 8000f04:	4b32      	ldr	r3, [pc, #200]	; (8000fd0 <MX_TIM1_Init+0xf0>)
 8000f06:	f240 4237 	movw	r2, #1079	; 0x437
 8000f0a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0c:	4b30      	ldr	r3, [pc, #192]	; (8000fd0 <MX_TIM1_Init+0xf0>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8000f12:	4b2f      	ldr	r3, [pc, #188]	; (8000fd0 <MX_TIM1_Init+0xf0>)
 8000f14:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000f18:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f1a:	4b2d      	ldr	r3, [pc, #180]	; (8000fd0 <MX_TIM1_Init+0xf0>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f20:	4b2b      	ldr	r3, [pc, #172]	; (8000fd0 <MX_TIM1_Init+0xf0>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f26:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <MX_TIM1_Init+0xf0>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000f2c:	4828      	ldr	r0, [pc, #160]	; (8000fd0 <MX_TIM1_Init+0xf0>)
 8000f2e:	f005 faab 	bl	8006488 <HAL_TIM_IC_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000f38:	f000 fb5c 	bl	80015f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4820      	ldr	r0, [pc, #128]	; (8000fd0 <MX_TIM1_Init+0xf0>)
 8000f50:	f006 fae2 	bl	8007518 <HAL_TIMEx_MasterConfigSynchronization>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000f5a:	f000 fb4b 	bl	80015f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f62:	2301      	movs	r3, #1
 8000f64:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	2200      	movs	r2, #0
 8000f72:	4619      	mov	r1, r3
 8000f74:	4816      	ldr	r0, [pc, #88]	; (8000fd0 <MX_TIM1_Init+0xf0>)
 8000f76:	f005 fc2d 	bl	80067d4 <HAL_TIM_IC_ConfigChannel>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000f80:	f000 fb38 	bl	80015f4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	2204      	movs	r2, #4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4811      	ldr	r0, [pc, #68]	; (8000fd0 <MX_TIM1_Init+0xf0>)
 8000f8c:	f005 fc22 	bl	80067d4 <HAL_TIM_IC_ConfigChannel>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8000f96:	f000 fb2d 	bl	80015f4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2208      	movs	r2, #8
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	480b      	ldr	r0, [pc, #44]	; (8000fd0 <MX_TIM1_Init+0xf0>)
 8000fa2:	f005 fc17 	bl	80067d4 <HAL_TIM_IC_ConfigChannel>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000fac:	f000 fb22 	bl	80015f4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4806      	ldr	r0, [pc, #24]	; (8000fd0 <MX_TIM1_Init+0xf0>)
 8000fb8:	f005 fc0c 	bl	80067d4 <HAL_TIM_IC_ConfigChannel>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 8000fc2:	f000 fb17 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	3720      	adds	r7, #32
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000304 	.word	0x20000304
 8000fd4:	40010000 	.word	0x40010000

08000fd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08e      	sub	sp, #56	; 0x38
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	611a      	str	r2, [r3, #16]
 8001006:	615a      	str	r2, [r3, #20]
 8001008:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800100a:	4b3b      	ldr	r3, [pc, #236]	; (80010f8 <MX_TIM2_Init+0x120>)
 800100c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001010:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1079;
 8001012:	4b39      	ldr	r3, [pc, #228]	; (80010f8 <MX_TIM2_Init+0x120>)
 8001014:	f240 4237 	movw	r2, #1079	; 0x437
 8001018:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101a:	4b37      	ldr	r3, [pc, #220]	; (80010f8 <MX_TIM2_Init+0x120>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8001020:	4b35      	ldr	r3, [pc, #212]	; (80010f8 <MX_TIM2_Init+0x120>)
 8001022:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001026:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001028:	4b33      	ldr	r3, [pc, #204]	; (80010f8 <MX_TIM2_Init+0x120>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800102e:	4b32      	ldr	r3, [pc, #200]	; (80010f8 <MX_TIM2_Init+0x120>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001034:	4830      	ldr	r0, [pc, #192]	; (80010f8 <MX_TIM2_Init+0x120>)
 8001036:	f005 fa27 	bl	8006488 <HAL_TIM_IC_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001040:	f000 fad8 	bl	80015f4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001044:	482c      	ldr	r0, [pc, #176]	; (80010f8 <MX_TIM2_Init+0x120>)
 8001046:	f005 f985 	bl	8006354 <HAL_TIM_OC_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001050:	f000 fad0 	bl	80015f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001054:	2300      	movs	r3, #0
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800105c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001060:	4619      	mov	r1, r3
 8001062:	4825      	ldr	r0, [pc, #148]	; (80010f8 <MX_TIM2_Init+0x120>)
 8001064:	f006 fa58 	bl	8007518 <HAL_TIMEx_MasterConfigSynchronization>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800106e:	f000 fac1 	bl	80015f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001076:	2301      	movs	r3, #1
 8001078:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	2200      	movs	r2, #0
 8001088:	4619      	mov	r1, r3
 800108a:	481b      	ldr	r0, [pc, #108]	; (80010f8 <MX_TIM2_Init+0x120>)
 800108c:	f005 fba2 	bl	80067d4 <HAL_TIM_IC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8001096:	f000 faad 	bl	80015f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 800109a:	2310      	movs	r3, #16
 800109c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010aa:	463b      	mov	r3, r7
 80010ac:	2208      	movs	r2, #8
 80010ae:	4619      	mov	r1, r3
 80010b0:	4811      	ldr	r0, [pc, #68]	; (80010f8 <MX_TIM2_Init+0x120>)
 80010b2:	f005 fb11 	bl	80066d8 <HAL_TIM_OC_ConfigChannel>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80010bc:	f000 fa9a 	bl	80015f4 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_3);
 80010c0:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <MX_TIM2_Init+0x120>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	69da      	ldr	r2, [r3, #28]
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <MX_TIM2_Init+0x120>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f042 0208 	orr.w	r2, r2, #8
 80010ce:	61da      	str	r2, [r3, #28]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80010d0:	f107 031c 	add.w	r3, r7, #28
 80010d4:	220c      	movs	r2, #12
 80010d6:	4619      	mov	r1, r3
 80010d8:	4807      	ldr	r0, [pc, #28]	; (80010f8 <MX_TIM2_Init+0x120>)
 80010da:	f005 fb7b 	bl	80067d4 <HAL_TIM_IC_ConfigChannel>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 80010e4:	f000 fa86 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010e8:	4803      	ldr	r0, [pc, #12]	; (80010f8 <MX_TIM2_Init+0x120>)
 80010ea:	f000 fcdf 	bl	8001aac <HAL_TIM_MspPostInit>

}
 80010ee:	bf00      	nop
 80010f0:	3738      	adds	r7, #56	; 0x38
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200003a4 	.word	0x200003a4

080010fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001102:	f107 031c 	add.w	r3, r7, #28
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800110e:	463b      	mov	r3, r7
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
 800111c:	615a      	str	r2, [r3, #20]
 800111e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001120:	4b32      	ldr	r3, [pc, #200]	; (80011ec <MX_TIM3_Init+0xf0>)
 8001122:	4a33      	ldr	r2, [pc, #204]	; (80011f0 <MX_TIM3_Init+0xf4>)
 8001124:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001126:	4b31      	ldr	r3, [pc, #196]	; (80011ec <MX_TIM3_Init+0xf0>)
 8001128:	2200      	movs	r2, #0
 800112a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112c:	4b2f      	ldr	r3, [pc, #188]	; (80011ec <MX_TIM3_Init+0xf0>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 359;
 8001132:	4b2e      	ldr	r3, [pc, #184]	; (80011ec <MX_TIM3_Init+0xf0>)
 8001134:	f240 1267 	movw	r2, #359	; 0x167
 8001138:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113a:	4b2c      	ldr	r3, [pc, #176]	; (80011ec <MX_TIM3_Init+0xf0>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001140:	4b2a      	ldr	r3, [pc, #168]	; (80011ec <MX_TIM3_Init+0xf0>)
 8001142:	2280      	movs	r2, #128	; 0x80
 8001144:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001146:	4829      	ldr	r0, [pc, #164]	; (80011ec <MX_TIM3_Init+0xf0>)
 8001148:	f005 f92f 	bl	80063aa <HAL_TIM_PWM_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001152:	f000 fa4f 	bl	80015f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115a:	2300      	movs	r3, #0
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800115e:	f107 031c 	add.w	r3, r7, #28
 8001162:	4619      	mov	r1, r3
 8001164:	4821      	ldr	r0, [pc, #132]	; (80011ec <MX_TIM3_Init+0xf0>)
 8001166:	f006 f9d7 	bl	8007518 <HAL_TIMEx_MasterConfigSynchronization>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001170:	f000 fa40 	bl	80015f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001174:	2360      	movs	r3, #96	; 0x60
 8001176:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001184:	463b      	mov	r3, r7
 8001186:	2200      	movs	r2, #0
 8001188:	4619      	mov	r1, r3
 800118a:	4818      	ldr	r0, [pc, #96]	; (80011ec <MX_TIM3_Init+0xf0>)
 800118c:	f005 fbbe 	bl	800690c <HAL_TIM_PWM_ConfigChannel>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001196:	f000 fa2d 	bl	80015f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800119a:	463b      	mov	r3, r7
 800119c:	2204      	movs	r2, #4
 800119e:	4619      	mov	r1, r3
 80011a0:	4812      	ldr	r0, [pc, #72]	; (80011ec <MX_TIM3_Init+0xf0>)
 80011a2:	f005 fbb3 	bl	800690c <HAL_TIM_PWM_ConfigChannel>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80011ac:	f000 fa22 	bl	80015f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011b0:	463b      	mov	r3, r7
 80011b2:	2208      	movs	r2, #8
 80011b4:	4619      	mov	r1, r3
 80011b6:	480d      	ldr	r0, [pc, #52]	; (80011ec <MX_TIM3_Init+0xf0>)
 80011b8:	f005 fba8 	bl	800690c <HAL_TIM_PWM_ConfigChannel>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80011c2:	f000 fa17 	bl	80015f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011c6:	463b      	mov	r3, r7
 80011c8:	220c      	movs	r2, #12
 80011ca:	4619      	mov	r1, r3
 80011cc:	4807      	ldr	r0, [pc, #28]	; (80011ec <MX_TIM3_Init+0xf0>)
 80011ce:	f005 fb9d 	bl	800690c <HAL_TIM_PWM_ConfigChannel>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80011d8:	f000 fa0c 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011dc:	4803      	ldr	r0, [pc, #12]	; (80011ec <MX_TIM3_Init+0xf0>)
 80011de:	f000 fc65 	bl	8001aac <HAL_TIM_MspPostInit>

}
 80011e2:	bf00      	nop
 80011e4:	3728      	adds	r7, #40	; 0x28
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000274 	.word	0x20000274
 80011f0:	40000400 	.word	0x40000400

080011f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fa:	f107 031c 	add.w	r3, r7, #28
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001206:	463b      	mov	r3, r7
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
 8001214:	615a      	str	r2, [r3, #20]
 8001216:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001218:	4b3d      	ldr	r3, [pc, #244]	; (8001310 <MX_TIM4_Init+0x11c>)
 800121a:	4a3e      	ldr	r2, [pc, #248]	; (8001314 <MX_TIM4_Init+0x120>)
 800121c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800121e:	4b3c      	ldr	r3, [pc, #240]	; (8001310 <MX_TIM4_Init+0x11c>)
 8001220:	2200      	movs	r2, #0
 8001222:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001224:	4b3a      	ldr	r3, [pc, #232]	; (8001310 <MX_TIM4_Init+0x11c>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 359;
 800122a:	4b39      	ldr	r3, [pc, #228]	; (8001310 <MX_TIM4_Init+0x11c>)
 800122c:	f240 1267 	movw	r2, #359	; 0x167
 8001230:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001232:	4b37      	ldr	r3, [pc, #220]	; (8001310 <MX_TIM4_Init+0x11c>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001238:	4b35      	ldr	r3, [pc, #212]	; (8001310 <MX_TIM4_Init+0x11c>)
 800123a:	2280      	movs	r2, #128	; 0x80
 800123c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800123e:	4834      	ldr	r0, [pc, #208]	; (8001310 <MX_TIM4_Init+0x11c>)
 8001240:	f005 f888 	bl	8006354 <HAL_TIM_OC_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800124a:	f000 f9d3 	bl	80015f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800124e:	4830      	ldr	r0, [pc, #192]	; (8001310 <MX_TIM4_Init+0x11c>)
 8001250:	f005 f8ab 	bl	80063aa <HAL_TIM_PWM_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 800125a:	f000 f9cb 	bl	80015f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	4619      	mov	r1, r3
 800126c:	4828      	ldr	r0, [pc, #160]	; (8001310 <MX_TIM4_Init+0x11c>)
 800126e:	f006 f953 	bl	8007518 <HAL_TIMEx_MasterConfigSynchronization>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001278:	f000 f9bc 	bl	80015f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 800127c:	2310      	movs	r3, #16
 800127e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 8001280:	2301      	movs	r3, #1
 8001282:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800128c:	463b      	mov	r3, r7
 800128e:	2200      	movs	r2, #0
 8001290:	4619      	mov	r1, r3
 8001292:	481f      	ldr	r0, [pc, #124]	; (8001310 <MX_TIM4_Init+0x11c>)
 8001294:	f005 fa20 	bl	80066d8 <HAL_TIM_OC_ConfigChannel>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800129e:	f000 f9a9 	bl	80015f4 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_1);
 80012a2:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <MX_TIM4_Init+0x11c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	699a      	ldr	r2, [r3, #24]
 80012a8:	4b19      	ldr	r3, [pc, #100]	; (8001310 <MX_TIM4_Init+0x11c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f042 0208 	orr.w	r2, r2, #8
 80012b0:	619a      	str	r2, [r3, #24]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b2:	2360      	movs	r3, #96	; 0x60
 80012b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012ba:	463b      	mov	r3, r7
 80012bc:	2204      	movs	r2, #4
 80012be:	4619      	mov	r1, r3
 80012c0:	4813      	ldr	r0, [pc, #76]	; (8001310 <MX_TIM4_Init+0x11c>)
 80012c2:	f005 fb23 	bl	800690c <HAL_TIM_PWM_ConfigChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 80012cc:	f000 f992 	bl	80015f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012d0:	463b      	mov	r3, r7
 80012d2:	2208      	movs	r2, #8
 80012d4:	4619      	mov	r1, r3
 80012d6:	480e      	ldr	r0, [pc, #56]	; (8001310 <MX_TIM4_Init+0x11c>)
 80012d8:	f005 fb18 	bl	800690c <HAL_TIM_PWM_ConfigChannel>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 80012e2:	f000 f987 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  // Set DMA Transfers to 17 with DBL and destination to CCR1 (15) with DBA
  htim4.Instance->DCR =  TIM_DCR_DBA_1 | TIM_DCR_DBA_2 | TIM_DCR_DBA_3; // Transfer at CCR2, 1 transfer
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <MX_TIM4_Init+0x11c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	220e      	movs	r2, #14
 80012ec:	649a      	str	r2, [r3, #72]	; 0x48
  // Enable Update DMA Request
  htim4.Instance->DIER = TIM_DIER_UDE;
 80012ee:	4b08      	ldr	r3, [pc, #32]	; (8001310 <MX_TIM4_Init+0x11c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012f6:	60da      	str	r2, [r3, #12]
  // Enable DMA requests on CH1
  htim4.Instance->DIER = TIM_DIER_CC1DE;
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <MX_TIM4_Init+0x11c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001300:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001302:	4803      	ldr	r0, [pc, #12]	; (8001310 <MX_TIM4_Init+0x11c>)
 8001304:	f000 fbd2 	bl	8001aac <HAL_TIM_MspPostInit>

}
 8001308:	bf00      	nop
 800130a:	3728      	adds	r7, #40	; 0x28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200000a8 	.word	0x200000a8
 8001314:	40000800 	.word	0x40000800

08001318 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800131c:	4b14      	ldr	r3, [pc, #80]	; (8001370 <MX_USART3_UART_Init+0x58>)
 800131e:	4a15      	ldr	r2, [pc, #84]	; (8001374 <MX_USART3_UART_Init+0x5c>)
 8001320:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001322:	4b13      	ldr	r3, [pc, #76]	; (8001370 <MX_USART3_UART_Init+0x58>)
 8001324:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001328:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <MX_USART3_UART_Init+0x58>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <MX_USART3_UART_Init+0x58>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <MX_USART3_UART_Init+0x58>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <MX_USART3_UART_Init+0x58>)
 800133e:	220c      	movs	r2, #12
 8001340:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <MX_USART3_UART_Init+0x58>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <MX_USART3_UART_Init+0x58>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <MX_USART3_UART_Init+0x58>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <MX_USART3_UART_Init+0x58>)
 8001356:	2200      	movs	r2, #0
 8001358:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800135a:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_USART3_UART_Init+0x58>)
 800135c:	f006 f96a 	bl	8007634 <HAL_UART_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001366:	f000 f945 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200000e8 	.word	0x200000e8
 8001374:	40004800 	.word	0x40004800

08001378 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <MX_DMA_Init+0x68>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a17      	ldr	r2, [pc, #92]	; (80013f0 <MX_DMA_Init+0x68>)
 8001394:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <MX_DMA_Init+0x68>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	200b      	movs	r0, #11
 80013ac:	f001 fb45 	bl	8002a3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013b0:	200b      	movs	r0, #11
 80013b2:	f001 fb5e 	bl	8002a72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	200c      	movs	r0, #12
 80013bc:	f001 fb3d 	bl	8002a3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80013c0:	200c      	movs	r0, #12
 80013c2:	f001 fb56 	bl	8002a72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2100      	movs	r1, #0
 80013ca:	2010      	movs	r0, #16
 80013cc:	f001 fb35 	bl	8002a3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80013d0:	2010      	movs	r0, #16
 80013d2:	f001 fb4e 	bl	8002a72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	202f      	movs	r0, #47	; 0x2f
 80013dc:	f001 fb2d 	bl	8002a3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80013e0:	202f      	movs	r0, #47	; 0x2f
 80013e2:	f001 fb46 	bl	8002a72 <HAL_NVIC_EnableIRQ>

}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800

080013f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08e      	sub	sp, #56	; 0x38
 80013f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800140a:	4b68      	ldr	r3, [pc, #416]	; (80015ac <MX_GPIO_Init+0x1b8>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a67      	ldr	r2, [pc, #412]	; (80015ac <MX_GPIO_Init+0x1b8>)
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b65      	ldr	r3, [pc, #404]	; (80015ac <MX_GPIO_Init+0x1b8>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	623b      	str	r3, [r7, #32]
 8001420:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001422:	4b62      	ldr	r3, [pc, #392]	; (80015ac <MX_GPIO_Init+0x1b8>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a61      	ldr	r2, [pc, #388]	; (80015ac <MX_GPIO_Init+0x1b8>)
 8001428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b5f      	ldr	r3, [pc, #380]	; (80015ac <MX_GPIO_Init+0x1b8>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001436:	61fb      	str	r3, [r7, #28]
 8001438:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	4b5c      	ldr	r3, [pc, #368]	; (80015ac <MX_GPIO_Init+0x1b8>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a5b      	ldr	r2, [pc, #364]	; (80015ac <MX_GPIO_Init+0x1b8>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b59      	ldr	r3, [pc, #356]	; (80015ac <MX_GPIO_Init+0x1b8>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	61bb      	str	r3, [r7, #24]
 8001450:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	4b56      	ldr	r3, [pc, #344]	; (80015ac <MX_GPIO_Init+0x1b8>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a55      	ldr	r2, [pc, #340]	; (80015ac <MX_GPIO_Init+0x1b8>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b53      	ldr	r3, [pc, #332]	; (80015ac <MX_GPIO_Init+0x1b8>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800146a:	4b50      	ldr	r3, [pc, #320]	; (80015ac <MX_GPIO_Init+0x1b8>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a4f      	ldr	r2, [pc, #316]	; (80015ac <MX_GPIO_Init+0x1b8>)
 8001470:	f043 0320 	orr.w	r3, r3, #32
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b4d      	ldr	r3, [pc, #308]	; (80015ac <MX_GPIO_Init+0x1b8>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0320 	and.w	r3, r3, #32
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001482:	4b4a      	ldr	r3, [pc, #296]	; (80015ac <MX_GPIO_Init+0x1b8>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a49      	ldr	r2, [pc, #292]	; (80015ac <MX_GPIO_Init+0x1b8>)
 8001488:	f043 0310 	orr.w	r3, r3, #16
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b47      	ldr	r3, [pc, #284]	; (80015ac <MX_GPIO_Init+0x1b8>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0310 	and.w	r3, r3, #16
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800149a:	4b44      	ldr	r3, [pc, #272]	; (80015ac <MX_GPIO_Init+0x1b8>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a43      	ldr	r2, [pc, #268]	; (80015ac <MX_GPIO_Init+0x1b8>)
 80014a0:	f043 0308 	orr.w	r3, r3, #8
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b41      	ldr	r3, [pc, #260]	; (80015ac <MX_GPIO_Init+0x1b8>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014b2:	4b3e      	ldr	r3, [pc, #248]	; (80015ac <MX_GPIO_Init+0x1b8>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a3d      	ldr	r2, [pc, #244]	; (80015ac <MX_GPIO_Init+0x1b8>)
 80014b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b3b      	ldr	r3, [pc, #236]	; (80015ac <MX_GPIO_Init+0x1b8>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80014d0:	4837      	ldr	r0, [pc, #220]	; (80015b0 <MX_GPIO_Init+0x1bc>)
 80014d2:	f002 f827 	bl	8003524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2140      	movs	r1, #64	; 0x40
 80014da:	4836      	ldr	r0, [pc, #216]	; (80015b4 <MX_GPIO_Init+0x1c0>)
 80014dc:	f002 f822 	bl	8003524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80014e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014e6:	4b34      	ldr	r3, [pc, #208]	; (80015b8 <MX_GPIO_Init+0x1c4>)
 80014e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80014ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f2:	4619      	mov	r1, r3
 80014f4:	4831      	ldr	r0, [pc, #196]	; (80015bc <MX_GPIO_Init+0x1c8>)
 80014f6:	f001 fe7b 	bl	80031f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80014fa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001500:	2300      	movs	r3, #0
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150c:	4619      	mov	r1, r3
 800150e:	482c      	ldr	r0, [pc, #176]	; (80015c0 <MX_GPIO_Init+0x1cc>)
 8001510:	f001 fe6e 	bl	80031f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001514:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151a:	2301      	movs	r3, #1
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152a:	4619      	mov	r1, r3
 800152c:	4820      	ldr	r0, [pc, #128]	; (80015b0 <MX_GPIO_Init+0x1bc>)
 800152e:	f001 fe5f 	bl	80031f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001532:	2340      	movs	r3, #64	; 0x40
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001536:	2301      	movs	r3, #1
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001546:	4619      	mov	r1, r3
 8001548:	481a      	ldr	r0, [pc, #104]	; (80015b4 <MX_GPIO_Init+0x1c0>)
 800154a:	f001 fe51 	bl	80031f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800154e:	2380      	movs	r3, #128	; 0x80
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001552:	2300      	movs	r3, #0
 8001554:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800155a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155e:	4619      	mov	r1, r3
 8001560:	4814      	ldr	r0, [pc, #80]	; (80015b4 <MX_GPIO_Init+0x1c0>)
 8001562:	f001 fe45 	bl	80031f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin PA10 USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|GPIO_PIN_10|USB_DM_Pin|USB_DP_Pin;
 8001566:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001578:	230a      	movs	r3, #10
 800157a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001580:	4619      	mov	r1, r3
 8001582:	4810      	ldr	r0, [pc, #64]	; (80015c4 <MX_GPIO_Init+0x1d0>)
 8001584:	f001 fe34 	bl	80031f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001588:	f44f 7300 	mov.w	r3, #512	; 0x200
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158e:	2300      	movs	r3, #0
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159a:	4619      	mov	r1, r3
 800159c:	4809      	ldr	r0, [pc, #36]	; (80015c4 <MX_GPIO_Init+0x1d0>)
 800159e:	f001 fe27 	bl	80031f0 <HAL_GPIO_Init>

}
 80015a2:	bf00      	nop
 80015a4:	3738      	adds	r7, #56	; 0x38
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40020400 	.word	0x40020400
 80015b4:	40021800 	.word	0x40021800
 80015b8:	10110000 	.word	0x10110000
 80015bc:	40020800 	.word	0x40020800
 80015c0:	40021400 	.word	0x40021400
 80015c4:	40020000 	.word	0x40020000

080015c8 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
    void HAL_ADC_ConvHalfCpltCallback (ADC_HandleTypeDef* hadc)
    {
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	__NOP();
 80015d0:	bf00      	nop
    }
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <HAL_ADC_ConvCpltCallback>:

    void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef* hadc)
    {
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
    __NOP();
 80015e6:	bf00      	nop
    }
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800160a:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <HAL_MspInit+0x44>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	4a0e      	ldr	r2, [pc, #56]	; (8001648 <HAL_MspInit+0x44>)
 8001610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001614:	6413      	str	r3, [r2, #64]	; 0x40
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <HAL_MspInit+0x44>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <HAL_MspInit+0x44>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	4a08      	ldr	r2, [pc, #32]	; (8001648 <HAL_MspInit+0x44>)
 8001628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800162c:	6453      	str	r3, [r2, #68]	; 0x44
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_MspInit+0x44>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001636:	603b      	str	r3, [r7, #0]
 8001638:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800

0800164c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	; 0x28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a15      	ldr	r2, [pc, #84]	; (80016c0 <HAL_ADC_MspInit+0x74>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d123      	bne.n	80016b6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <HAL_ADC_MspInit+0x78>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	4a14      	ldr	r2, [pc, #80]	; (80016c4 <HAL_ADC_MspInit+0x78>)
 8001674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001678:	6453      	str	r3, [r2, #68]	; 0x44
 800167a:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_ADC_MspInit+0x78>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <HAL_ADC_MspInit+0x78>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a0e      	ldr	r2, [pc, #56]	; (80016c4 <HAL_ADC_MspInit+0x78>)
 800168c:	f043 0302 	orr.w	r3, r3, #2
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <HAL_ADC_MspInit+0x78>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_THROTTLE_CONTROL_Pin;
 800169e:	2302      	movs	r3, #2
 80016a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016a2:	2303      	movs	r3, #3
 80016a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_THROTTLE_CONTROL_GPIO_Port, &GPIO_InitStruct);
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	4619      	mov	r1, r3
 80016b0:	4805      	ldr	r0, [pc, #20]	; (80016c8 <HAL_ADC_MspInit+0x7c>)
 80016b2:	f001 fd9d 	bl	80031f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016b6:	bf00      	nop
 80016b8:	3728      	adds	r7, #40	; 0x28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40012000 	.word	0x40012000
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40020400 	.word	0x40020400

080016cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	; 0x28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a52      	ldr	r2, [pc, #328]	; (8001834 <HAL_I2C_MspInit+0x168>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	f040 809d 	bne.w	800182a <HAL_I2C_MspInit+0x15e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f0:	4b51      	ldr	r3, [pc, #324]	; (8001838 <HAL_I2C_MspInit+0x16c>)
 80016f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f4:	4a50      	ldr	r2, [pc, #320]	; (8001838 <HAL_I2C_MspInit+0x16c>)
 80016f6:	f043 0302 	orr.w	r3, r3, #2
 80016fa:	6313      	str	r3, [r2, #48]	; 0x30
 80016fc:	4b4e      	ldr	r3, [pc, #312]	; (8001838 <HAL_I2C_MspInit+0x16c>)
 80016fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001708:	f44f 7340 	mov.w	r3, #768	; 0x300
 800170c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800170e:	2312      	movs	r3, #18
 8001710:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001712:	2301      	movs	r3, #1
 8001714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001716:	2303      	movs	r3, #3
 8001718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800171a:	2304      	movs	r3, #4
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	4845      	ldr	r0, [pc, #276]	; (800183c <HAL_I2C_MspInit+0x170>)
 8001726:	f001 fd63 	bl	80031f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800172a:	4b43      	ldr	r3, [pc, #268]	; (8001838 <HAL_I2C_MspInit+0x16c>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	4a42      	ldr	r2, [pc, #264]	; (8001838 <HAL_I2C_MspInit+0x16c>)
 8001730:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001734:	6413      	str	r3, [r2, #64]	; 0x40
 8001736:	4b40      	ldr	r3, [pc, #256]	; (8001838 <HAL_I2C_MspInit+0x16c>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8001742:	4b3f      	ldr	r3, [pc, #252]	; (8001840 <HAL_I2C_MspInit+0x174>)
 8001744:	4a3f      	ldr	r2, [pc, #252]	; (8001844 <HAL_I2C_MspInit+0x178>)
 8001746:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001748:	4b3d      	ldr	r3, [pc, #244]	; (8001840 <HAL_I2C_MspInit+0x174>)
 800174a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800174e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001750:	4b3b      	ldr	r3, [pc, #236]	; (8001840 <HAL_I2C_MspInit+0x174>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001756:	4b3a      	ldr	r3, [pc, #232]	; (8001840 <HAL_I2C_MspInit+0x174>)
 8001758:	2200      	movs	r2, #0
 800175a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800175c:	4b38      	ldr	r3, [pc, #224]	; (8001840 <HAL_I2C_MspInit+0x174>)
 800175e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001762:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001764:	4b36      	ldr	r3, [pc, #216]	; (8001840 <HAL_I2C_MspInit+0x174>)
 8001766:	2200      	movs	r2, #0
 8001768:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800176a:	4b35      	ldr	r3, [pc, #212]	; (8001840 <HAL_I2C_MspInit+0x174>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001770:	4b33      	ldr	r3, [pc, #204]	; (8001840 <HAL_I2C_MspInit+0x174>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001776:	4b32      	ldr	r3, [pc, #200]	; (8001840 <HAL_I2C_MspInit+0x174>)
 8001778:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800177c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800177e:	4b30      	ldr	r3, [pc, #192]	; (8001840 <HAL_I2C_MspInit+0x174>)
 8001780:	2204      	movs	r2, #4
 8001782:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001784:	4b2e      	ldr	r3, [pc, #184]	; (8001840 <HAL_I2C_MspInit+0x174>)
 8001786:	2203      	movs	r2, #3
 8001788:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_rx.Init.MemBurst = DMA_MBURST_INC4;
 800178a:	4b2d      	ldr	r3, [pc, #180]	; (8001840 <HAL_I2C_MspInit+0x174>)
 800178c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001790:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001792:	4b2b      	ldr	r3, [pc, #172]	; (8001840 <HAL_I2C_MspInit+0x174>)
 8001794:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001798:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800179a:	4829      	ldr	r0, [pc, #164]	; (8001840 <HAL_I2C_MspInit+0x174>)
 800179c:	f001 f984 	bl	8002aa8 <HAL_DMA_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_I2C_MspInit+0xde>
    {
      Error_Handler();
 80017a6:	f7ff ff25 	bl	80015f4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a24      	ldr	r2, [pc, #144]	; (8001840 <HAL_I2C_MspInit+0x174>)
 80017ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80017b0:	4a23      	ldr	r2, [pc, #140]	; (8001840 <HAL_I2C_MspInit+0x174>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 80017b6:	4b24      	ldr	r3, [pc, #144]	; (8001848 <HAL_I2C_MspInit+0x17c>)
 80017b8:	4a24      	ldr	r2, [pc, #144]	; (800184c <HAL_I2C_MspInit+0x180>)
 80017ba:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80017bc:	4b22      	ldr	r3, [pc, #136]	; (8001848 <HAL_I2C_MspInit+0x17c>)
 80017be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017c2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017c4:	4b20      	ldr	r3, [pc, #128]	; (8001848 <HAL_I2C_MspInit+0x17c>)
 80017c6:	2240      	movs	r2, #64	; 0x40
 80017c8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ca:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <HAL_I2C_MspInit+0x17c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017d0:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <HAL_I2C_MspInit+0x17c>)
 80017d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017d6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017d8:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <HAL_I2C_MspInit+0x17c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017de:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <HAL_I2C_MspInit+0x17c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80017e4:	4b18      	ldr	r3, [pc, #96]	; (8001848 <HAL_I2C_MspInit+0x17c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80017ea:	4b17      	ldr	r3, [pc, #92]	; (8001848 <HAL_I2C_MspInit+0x17c>)
 80017ec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80017f0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <HAL_I2C_MspInit+0x17c>)
 80017f4:	2204      	movs	r2, #4
 80017f6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80017f8:	4b13      	ldr	r3, [pc, #76]	; (8001848 <HAL_I2C_MspInit+0x17c>)
 80017fa:	2203      	movs	r2, #3
 80017fc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80017fe:	4b12      	ldr	r3, [pc, #72]	; (8001848 <HAL_I2C_MspInit+0x17c>)
 8001800:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001804:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <HAL_I2C_MspInit+0x17c>)
 8001808:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800180c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800180e:	480e      	ldr	r0, [pc, #56]	; (8001848 <HAL_I2C_MspInit+0x17c>)
 8001810:	f001 f94a 	bl	8002aa8 <HAL_DMA_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_I2C_MspInit+0x152>
    {
      Error_Handler();
 800181a:	f7ff feeb 	bl	80015f4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a09      	ldr	r2, [pc, #36]	; (8001848 <HAL_I2C_MspInit+0x17c>)
 8001822:	639a      	str	r2, [r3, #56]	; 0x38
 8001824:	4a08      	ldr	r2, [pc, #32]	; (8001848 <HAL_I2C_MspInit+0x17c>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800182a:	bf00      	nop
 800182c:	3728      	adds	r7, #40	; 0x28
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40005400 	.word	0x40005400
 8001838:	40023800 	.word	0x40023800
 800183c:	40020400 	.word	0x40020400
 8001840:	20000344 	.word	0x20000344
 8001844:	40026088 	.word	0x40026088
 8001848:	20000168 	.word	0x20000168
 800184c:	400260b8 	.word	0x400260b8

08001850 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08c      	sub	sp, #48	; 0x30
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 031c 	add.w	r3, r7, #28
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a50      	ldr	r2, [pc, #320]	; (80019b0 <HAL_TIM_IC_MspInit+0x160>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d129      	bne.n	80018c6 <HAL_TIM_IC_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001872:	4b50      	ldr	r3, [pc, #320]	; (80019b4 <HAL_TIM_IC_MspInit+0x164>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	4a4f      	ldr	r2, [pc, #316]	; (80019b4 <HAL_TIM_IC_MspInit+0x164>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6453      	str	r3, [r2, #68]	; 0x44
 800187e:	4b4d      	ldr	r3, [pc, #308]	; (80019b4 <HAL_TIM_IC_MspInit+0x164>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	61bb      	str	r3, [r7, #24]
 8001888:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800188a:	4b4a      	ldr	r3, [pc, #296]	; (80019b4 <HAL_TIM_IC_MspInit+0x164>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a49      	ldr	r2, [pc, #292]	; (80019b4 <HAL_TIM_IC_MspInit+0x164>)
 8001890:	f043 0310 	orr.w	r3, r3, #16
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b47      	ldr	r3, [pc, #284]	; (80019b4 <HAL_TIM_IC_MspInit+0x164>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0310 	and.w	r3, r3, #16
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	697b      	ldr	r3, [r7, #20]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80018a2:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80018a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018b4:	2301      	movs	r3, #1
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018b8:	f107 031c 	add.w	r3, r7, #28
 80018bc:	4619      	mov	r1, r3
 80018be:	483e      	ldr	r0, [pc, #248]	; (80019b8 <HAL_TIM_IC_MspInit+0x168>)
 80018c0:	f001 fc96 	bl	80031f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018c4:	e06f      	b.n	80019a6 <HAL_TIM_IC_MspInit+0x156>
  else if(htim_ic->Instance==TIM2)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ce:	d16a      	bne.n	80019a6 <HAL_TIM_IC_MspInit+0x156>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018d0:	4b38      	ldr	r3, [pc, #224]	; (80019b4 <HAL_TIM_IC_MspInit+0x164>)
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	4a37      	ldr	r2, [pc, #220]	; (80019b4 <HAL_TIM_IC_MspInit+0x164>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	6413      	str	r3, [r2, #64]	; 0x40
 80018dc:	4b35      	ldr	r3, [pc, #212]	; (80019b4 <HAL_TIM_IC_MspInit+0x164>)
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e8:	4b32      	ldr	r3, [pc, #200]	; (80019b4 <HAL_TIM_IC_MspInit+0x164>)
 80018ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ec:	4a31      	ldr	r2, [pc, #196]	; (80019b4 <HAL_TIM_IC_MspInit+0x164>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6313      	str	r3, [r2, #48]	; 0x30
 80018f4:	4b2f      	ldr	r3, [pc, #188]	; (80019b4 <HAL_TIM_IC_MspInit+0x164>)
 80018f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001900:	2309      	movs	r3, #9
 8001902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001910:	2301      	movs	r3, #1
 8001912:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001914:	f107 031c 	add.w	r3, r7, #28
 8001918:	4619      	mov	r1, r3
 800191a:	4828      	ldr	r0, [pc, #160]	; (80019bc <HAL_TIM_IC_MspInit+0x16c>)
 800191c:	f001 fc68 	bl	80031f0 <HAL_GPIO_Init>
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8001920:	4b27      	ldr	r3, [pc, #156]	; (80019c0 <HAL_TIM_IC_MspInit+0x170>)
 8001922:	4a28      	ldr	r2, [pc, #160]	; (80019c4 <HAL_TIM_IC_MspInit+0x174>)
 8001924:	601a      	str	r2, [r3, #0]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8001926:	4b26      	ldr	r3, [pc, #152]	; (80019c0 <HAL_TIM_IC_MspInit+0x170>)
 8001928:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800192c:	605a      	str	r2, [r3, #4]
    hdma_tim2_up_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800192e:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <HAL_TIM_IC_MspInit+0x170>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_ENABLE;
 8001934:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <HAL_TIM_IC_MspInit+0x170>)
 8001936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800193a:	60da      	str	r2, [r3, #12]
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800193c:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <HAL_TIM_IC_MspInit+0x170>)
 800193e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001942:	611a      	str	r2, [r3, #16]
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001944:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <HAL_TIM_IC_MspInit+0x170>)
 8001946:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800194a:	615a      	str	r2, [r3, #20]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800194c:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <HAL_TIM_IC_MspInit+0x170>)
 800194e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001952:	619a      	str	r2, [r3, #24]
    hdma_tim2_up_ch3.Init.Mode = DMA_NORMAL;
 8001954:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <HAL_TIM_IC_MspInit+0x170>)
 8001956:	2200      	movs	r2, #0
 8001958:	61da      	str	r2, [r3, #28]
    hdma_tim2_up_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 800195a:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <HAL_TIM_IC_MspInit+0x170>)
 800195c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001960:	621a      	str	r2, [r3, #32]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001962:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <HAL_TIM_IC_MspInit+0x170>)
 8001964:	2204      	movs	r2, #4
 8001966:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_up_ch3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001968:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <HAL_TIM_IC_MspInit+0x170>)
 800196a:	2203      	movs	r2, #3
 800196c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_up_ch3.Init.MemBurst = DMA_MBURST_INC4;
 800196e:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <HAL_TIM_IC_MspInit+0x170>)
 8001970:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001974:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_up_ch3.Init.PeriphBurst = DMA_PBURST_INC4;
 8001976:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <HAL_TIM_IC_MspInit+0x170>)
 8001978:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800197c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 800197e:	4810      	ldr	r0, [pc, #64]	; (80019c0 <HAL_TIM_IC_MspInit+0x170>)
 8001980:	f001 f892 	bl	8002aa8 <HAL_DMA_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_TIM_IC_MspInit+0x13e>
      Error_Handler();
 800198a:	f7ff fe33 	bl	80015f4 <Error_Handler>
    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <HAL_TIM_IC_MspInit+0x170>)
 8001992:	621a      	str	r2, [r3, #32]
 8001994:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <HAL_TIM_IC_MspInit+0x170>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a08      	ldr	r2, [pc, #32]	; (80019c0 <HAL_TIM_IC_MspInit+0x170>)
 800199e:	62da      	str	r2, [r3, #44]	; 0x2c
 80019a0:	4a07      	ldr	r2, [pc, #28]	; (80019c0 <HAL_TIM_IC_MspInit+0x170>)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80019a6:	bf00      	nop
 80019a8:	3730      	adds	r7, #48	; 0x30
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40010000 	.word	0x40010000
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40020000 	.word	0x40020000
 80019c0:	20000214 	.word	0x20000214
 80019c4:	40026028 	.word	0x40026028

080019c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <HAL_TIM_PWM_MspInit+0x38>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d10b      	bne.n	80019f2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019da:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <HAL_TIM_PWM_MspInit+0x3c>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	4a09      	ldr	r2, [pc, #36]	; (8001a04 <HAL_TIM_PWM_MspInit+0x3c>)
 80019e0:	f043 0302 	orr.w	r3, r3, #2
 80019e4:	6413      	str	r3, [r2, #64]	; 0x40
 80019e6:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <HAL_TIM_PWM_MspInit+0x3c>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019f2:	bf00      	nop
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	40000400 	.word	0x40000400
 8001a04:	40023800 	.word	0x40023800

08001a08 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a21      	ldr	r2, [pc, #132]	; (8001a9c <HAL_TIM_OC_MspInit+0x94>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d13c      	bne.n	8001a94 <HAL_TIM_OC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a1a:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <HAL_TIM_OC_MspInit+0x98>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	4a20      	ldr	r2, [pc, #128]	; (8001aa0 <HAL_TIM_OC_MspInit+0x98>)
 8001a20:	f043 0304 	orr.w	r3, r3, #4
 8001a24:	6413      	str	r3, [r2, #64]	; 0x40
 8001a26:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <HAL_TIM_OC_MspInit+0x98>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8001a32:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <HAL_TIM_OC_MspInit+0x9c>)
 8001a34:	4a1c      	ldr	r2, [pc, #112]	; (8001aa8 <HAL_TIM_OC_MspInit+0xa0>)
 8001a36:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8001a38:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <HAL_TIM_OC_MspInit+0x9c>)
 8001a3a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a3e:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a40:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <HAL_TIM_OC_MspInit+0x9c>)
 8001a42:	2240      	movs	r2, #64	; 0x40
 8001a44:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a46:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <HAL_TIM_OC_MspInit+0x9c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001a4c:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <HAL_TIM_OC_MspInit+0x9c>)
 8001a4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a52:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a54:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <HAL_TIM_OC_MspInit+0x9c>)
 8001a56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a5a:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <HAL_TIM_OC_MspInit+0x9c>)
 8001a5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a62:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <HAL_TIM_OC_MspInit+0x9c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <HAL_TIM_OC_MspInit+0x9c>)
 8001a6c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a70:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a72:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <HAL_TIM_OC_MspInit+0x9c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8001a78:	480a      	ldr	r0, [pc, #40]	; (8001aa4 <HAL_TIM_OC_MspInit+0x9c>)
 8001a7a:	f001 f815 	bl	8002aa8 <HAL_DMA_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <HAL_TIM_OC_MspInit+0x80>
    {
      Error_Handler();
 8001a84:	f7ff fdb6 	bl	80015f4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a06      	ldr	r2, [pc, #24]	; (8001aa4 <HAL_TIM_OC_MspInit+0x9c>)
 8001a8c:	625a      	str	r2, [r3, #36]	; 0x24
 8001a8e:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <HAL_TIM_OC_MspInit+0x9c>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a94:	bf00      	nop
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40000800 	.word	0x40000800
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	200003e4 	.word	0x200003e4
 8001aa8:	40026010 	.word	0x40026010

08001aac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08c      	sub	sp, #48	; 0x30
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 031c 	add.w	r3, r7, #28
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001acc:	d11c      	bne.n	8001b08 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ace:	4b4f      	ldr	r3, [pc, #316]	; (8001c0c <HAL_TIM_MspPostInit+0x160>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a4e      	ldr	r2, [pc, #312]	; (8001c0c <HAL_TIM_MspPostInit+0x160>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b4c      	ldr	r3, [pc, #304]	; (8001c0c <HAL_TIM_MspPostInit+0x160>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	61bb      	str	r3, [r7, #24]
 8001ae4:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2300      	movs	r3, #0
 8001af4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001af6:	2301      	movs	r3, #1
 8001af8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afa:	f107 031c 	add.w	r3, r7, #28
 8001afe:	4619      	mov	r1, r3
 8001b00:	4843      	ldr	r0, [pc, #268]	; (8001c10 <HAL_TIM_MspPostInit+0x164>)
 8001b02:	f001 fb75 	bl	80031f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b06:	e07c      	b.n	8001c02 <HAL_TIM_MspPostInit+0x156>
  else if(htim->Instance==TIM3)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a41      	ldr	r2, [pc, #260]	; (8001c14 <HAL_TIM_MspPostInit+0x168>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d155      	bne.n	8001bbe <HAL_TIM_MspPostInit+0x112>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b12:	4b3e      	ldr	r3, [pc, #248]	; (8001c0c <HAL_TIM_MspPostInit+0x160>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a3d      	ldr	r2, [pc, #244]	; (8001c0c <HAL_TIM_MspPostInit+0x160>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b3b      	ldr	r3, [pc, #236]	; (8001c0c <HAL_TIM_MspPostInit+0x160>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2a:	4b38      	ldr	r3, [pc, #224]	; (8001c0c <HAL_TIM_MspPostInit+0x160>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a37      	ldr	r2, [pc, #220]	; (8001c0c <HAL_TIM_MspPostInit+0x160>)
 8001b30:	f043 0302 	orr.w	r3, r3, #2
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b35      	ldr	r3, [pc, #212]	; (8001c0c <HAL_TIM_MspPostInit+0x160>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b42:	4b32      	ldr	r3, [pc, #200]	; (8001c0c <HAL_TIM_MspPostInit+0x160>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a31      	ldr	r2, [pc, #196]	; (8001c0c <HAL_TIM_MspPostInit+0x160>)
 8001b48:	f043 0304 	orr.w	r3, r3, #4
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b2f      	ldr	r3, [pc, #188]	; (8001c0c <HAL_TIM_MspPostInit+0x160>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM_3_CH1_MOTOR_1_Pin|TIM_3_CH1_MOTOR_2_Pin;
 8001b5a:	23c0      	movs	r3, #192	; 0xc0
 8001b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2300      	movs	r3, #0
 8001b68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6e:	f107 031c 	add.w	r3, r7, #28
 8001b72:	4619      	mov	r1, r3
 8001b74:	4826      	ldr	r0, [pc, #152]	; (8001c10 <HAL_TIM_MspPostInit+0x164>)
 8001b76:	f001 fb3b 	bl	80031f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM_3_CH1_MOTOR_3_Pin;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b86:	2300      	movs	r3, #0
 8001b88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM_3_CH1_MOTOR_3_GPIO_Port, &GPIO_InitStruct);
 8001b8e:	f107 031c 	add.w	r3, r7, #28
 8001b92:	4619      	mov	r1, r3
 8001b94:	4820      	ldr	r0, [pc, #128]	; (8001c18 <HAL_TIM_MspPostInit+0x16c>)
 8001b96:	f001 fb2b 	bl	80031f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM_3_CH1_MOTOR_4_Pin;
 8001b9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bac:	2302      	movs	r3, #2
 8001bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM_3_CH1_MOTOR_4_GPIO_Port, &GPIO_InitStruct);
 8001bb0:	f107 031c 	add.w	r3, r7, #28
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4819      	ldr	r0, [pc, #100]	; (8001c1c <HAL_TIM_MspPostInit+0x170>)
 8001bb8:	f001 fb1a 	bl	80031f0 <HAL_GPIO_Init>
}
 8001bbc:	e021      	b.n	8001c02 <HAL_TIM_MspPostInit+0x156>
  else if(htim->Instance==TIM4)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a17      	ldr	r2, [pc, #92]	; (8001c20 <HAL_TIM_MspPostInit+0x174>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d11c      	bne.n	8001c02 <HAL_TIM_MspPostInit+0x156>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bc8:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <HAL_TIM_MspPostInit+0x160>)
 8001bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bcc:	4a0f      	ldr	r2, [pc, #60]	; (8001c0c <HAL_TIM_MspPostInit+0x160>)
 8001bce:	f043 0308 	orr.w	r3, r3, #8
 8001bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd4:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <HAL_TIM_MspPostInit+0x160>)
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM4_CH1_DMA_LATCH_Pin|TIM4_CH2_MOTOR_1_Pin|TIM4_CH3_MOTOR_2_Pin;
 8001be0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bf6:	f107 031c 	add.w	r3, r7, #28
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4809      	ldr	r0, [pc, #36]	; (8001c24 <HAL_TIM_MspPostInit+0x178>)
 8001bfe:	f001 faf7 	bl	80031f0 <HAL_GPIO_Init>
}
 8001c02:	bf00      	nop
 8001c04:	3730      	adds	r7, #48	; 0x30
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40020000 	.word	0x40020000
 8001c14:	40000400 	.word	0x40000400
 8001c18:	40020400 	.word	0x40020400
 8001c1c:	40020800 	.word	0x40020800
 8001c20:	40000800 	.word	0x40000800
 8001c24:	40020c00 	.word	0x40020c00

08001c28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a17      	ldr	r2, [pc, #92]	; (8001ca4 <HAL_UART_MspInit+0x7c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d128      	bne.n	8001c9c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c4a:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <HAL_UART_MspInit+0x80>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	4a16      	ldr	r2, [pc, #88]	; (8001ca8 <HAL_UART_MspInit+0x80>)
 8001c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c54:	6413      	str	r3, [r2, #64]	; 0x40
 8001c56:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <HAL_UART_MspInit+0x80>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c62:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <HAL_UART_MspInit+0x80>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a10      	ldr	r2, [pc, #64]	; (8001ca8 <HAL_UART_MspInit+0x80>)
 8001c68:	f043 0308 	orr.w	r3, r3, #8
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <HAL_UART_MspInit+0x80>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001c7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c80:	2302      	movs	r3, #2
 8001c82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c8c:	2307      	movs	r3, #7
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	4619      	mov	r1, r3
 8001c96:	4805      	ldr	r0, [pc, #20]	; (8001cac <HAL_UART_MspInit+0x84>)
 8001c98:	f001 faaa 	bl	80031f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c9c:	bf00      	nop
 8001c9e:	3728      	adds	r7, #40	; 0x28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40004800 	.word	0x40004800
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40020c00 	.word	0x40020c00

08001cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc2:	e7fe      	b.n	8001cc2 <HardFault_Handler+0x4>

08001cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <MemManage_Handler+0x4>

08001cca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cce:	e7fe      	b.n	8001cce <BusFault_Handler+0x4>

08001cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd4:	e7fe      	b.n	8001cd4 <UsageFault_Handler+0x4>

08001cd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d04:	f000 f8dc 	bl	8001ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8001d10:	4802      	ldr	r0, [pc, #8]	; (8001d1c <DMA1_Stream0_IRQHandler+0x10>)
 8001d12:	f000 fff9 	bl	8002d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200003e4 	.word	0x200003e4

08001d20 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8001d24:	4802      	ldr	r0, [pc, #8]	; (8001d30 <DMA1_Stream1_IRQHandler+0x10>)
 8001d26:	f000 ffef 	bl	8002d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000214 	.word	0x20000214

08001d34 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001d38:	4802      	ldr	r0, [pc, #8]	; (8001d44 <DMA1_Stream5_IRQHandler+0x10>)
 8001d3a:	f000 ffe5 	bl	8002d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000344 	.word	0x20000344

08001d48 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001d4c:	4802      	ldr	r0, [pc, #8]	; (8001d58 <DMA1_Stream7_IRQHandler+0x10>)
 8001d4e:	f000 ffdb 	bl	8002d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000168 	.word	0x20000168

08001d5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d64:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <_sbrk+0x5c>)
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <_sbrk+0x60>)
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d70:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <_sbrk+0x64>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d102      	bne.n	8001d7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <_sbrk+0x64>)
 8001d7a:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <_sbrk+0x68>)
 8001d7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d7e:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <_sbrk+0x64>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d207      	bcs.n	8001d9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d8c:	f006 f896 	bl	8007ebc <__errno>
 8001d90:	4602      	mov	r2, r0
 8001d92:	230c      	movs	r3, #12
 8001d94:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001d96:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9a:	e009      	b.n	8001db0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <_sbrk+0x64>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001da2:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <_sbrk+0x64>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <_sbrk+0x64>)
 8001dac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dae:	68fb      	ldr	r3, [r7, #12]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20040000 	.word	0x20040000
 8001dbc:	00000400 	.word	0x00000400
 8001dc0:	2000009c 	.word	0x2000009c
 8001dc4:	20000458 	.word	0x20000458

08001dc8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dcc:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <SystemInit+0x28>)
 8001dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dd2:	4a07      	ldr	r2, [pc, #28]	; (8001df0 <SystemInit+0x28>)
 8001dd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ddc:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <SystemInit+0x28>)
 8001dde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001de2:	609a      	str	r2, [r3, #8]
#endif
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001df4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001df8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001dfa:	e003      	b.n	8001e04 <LoopCopyDataInit>

08001dfc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001dfe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e02:	3104      	adds	r1, #4

08001e04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e04:	480b      	ldr	r0, [pc, #44]	; (8001e34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e06:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e0c:	d3f6      	bcc.n	8001dfc <CopyDataInit>
  ldr  r2, =_sbss
 8001e0e:	4a0b      	ldr	r2, [pc, #44]	; (8001e3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e10:	e002      	b.n	8001e18 <LoopFillZerobss>

08001e12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e14:	f842 3b04 	str.w	r3, [r2], #4

08001e18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e18:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e1c:	d3f9      	bcc.n	8001e12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e1e:	f7ff ffd3 	bl	8001dc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e22:	f006 f851 	bl	8007ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e26:	f7fe feab 	bl	8000b80 <main>
  bx  lr    
 8001e2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e2c:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8001e30:	08008050 	.word	0x08008050
  ldr  r0, =_sdata
 8001e34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e38:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001e3c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001e40:	20000458 	.word	0x20000458

08001e44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e44:	e7fe      	b.n	8001e44 <ADC_IRQHandler>

08001e46 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e4a:	2003      	movs	r0, #3
 8001e4c:	f000 fdea 	bl	8002a24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e50:	2000      	movs	r0, #0
 8001e52:	f000 f805 	bl	8001e60 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001e56:	f7ff fbd5 	bl	8001604 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e68:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_InitTick+0x54>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <HAL_InitTick+0x58>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	4619      	mov	r1, r3
 8001e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 fe05 	bl	8002a8e <HAL_SYSTICK_Config>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e00e      	b.n	8001eac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b0f      	cmp	r3, #15
 8001e92:	d80a      	bhi.n	8001eaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e94:	2200      	movs	r2, #0
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	f04f 30ff 	mov.w	r0, #4294967295
 8001e9c:	f000 fdcd 	bl	8002a3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ea0:	4a06      	ldr	r2, [pc, #24]	; (8001ebc <HAL_InitTick+0x5c>)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	e000      	b.n	8001eac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20000000 	.word	0x20000000
 8001eb8:	20000008 	.word	0x20000008
 8001ebc:	20000004 	.word	0x20000004

08001ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_IncTick+0x20>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_IncTick+0x24>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4413      	add	r3, r2
 8001ed0:	4a04      	ldr	r2, [pc, #16]	; (8001ee4 <HAL_IncTick+0x24>)
 8001ed2:	6013      	str	r3, [r2, #0]
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	20000008 	.word	0x20000008
 8001ee4:	20000450 	.word	0x20000450

08001ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return uwTick;
 8001eec:	4b03      	ldr	r3, [pc, #12]	; (8001efc <HAL_GetTick+0x14>)
 8001eee:	681b      	ldr	r3, [r3, #0]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20000450 	.word	0x20000450

08001f00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e031      	b.n	8001f7a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d109      	bne.n	8001f32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff fb94 	bl	800164c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f003 0310 	and.w	r3, r3, #16
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d116      	bne.n	8001f6c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f42:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <HAL_ADC_Init+0x84>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	f043 0202 	orr.w	r2, r3, #2
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 fb1c 	bl	800258c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f023 0303 	bic.w	r3, r3, #3
 8001f62:	f043 0201 	orr.w	r2, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	641a      	str	r2, [r3, #64]	; 0x40
 8001f6a:	e001      	b.n	8001f70 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	ffffeefd 	.word	0xffffeefd

08001f88 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d101      	bne.n	8001fa2 <HAL_ADC_Start+0x1a>
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	e0a0      	b.n	80020e4 <HAL_ADC_Start+0x15c>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d018      	beq.n	8001fea <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0201 	orr.w	r2, r2, #1
 8001fc6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001fc8:	4b49      	ldr	r3, [pc, #292]	; (80020f0 <HAL_ADC_Start+0x168>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a49      	ldr	r2, [pc, #292]	; (80020f4 <HAL_ADC_Start+0x16c>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	0c9a      	lsrs	r2, r3, #18
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	4413      	add	r3, r2
 8001fda:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001fdc:	e002      	b.n	8001fe4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f9      	bne.n	8001fde <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d174      	bne.n	80020e2 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ffc:	4b3e      	ldr	r3, [pc, #248]	; (80020f8 <HAL_ADC_Start+0x170>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002012:	2b00      	cmp	r3, #0
 8002014:	d007      	beq.n	8002026 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800201e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800202e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002032:	d106      	bne.n	8002042 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002038:	f023 0206 	bic.w	r2, r3, #6
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	645a      	str	r2, [r3, #68]	; 0x44
 8002040:	e002      	b.n	8002048 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002058:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800205a:	4b28      	ldr	r3, [pc, #160]	; (80020fc <HAL_ADC_Start+0x174>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 031f 	and.w	r3, r3, #31
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10f      	bne.n	8002086 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d136      	bne.n	80020e2 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	e02d      	b.n	80020e2 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a1d      	ldr	r2, [pc, #116]	; (8002100 <HAL_ADC_Start+0x178>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d10e      	bne.n	80020ae <HAL_ADC_Start+0x126>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d107      	bne.n	80020ae <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020ac:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80020ae:	4b13      	ldr	r3, [pc, #76]	; (80020fc <HAL_ADC_Start+0x174>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 0310 	and.w	r3, r3, #16
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d113      	bne.n	80020e2 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a11      	ldr	r2, [pc, #68]	; (8002104 <HAL_ADC_Start+0x17c>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d10e      	bne.n	80020e2 <HAL_ADC_Start+0x15a>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d107      	bne.n	80020e2 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020e0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	20000000 	.word	0x20000000
 80020f4:	431bde83 	.word	0x431bde83
 80020f8:	fffff8fe 	.word	0xfffff8fe
 80020fc:	40012300 	.word	0x40012300
 8002100:	40012000 	.word	0x40012000
 8002104:	40012200 	.word	0x40012200

08002108 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800211e:	2b01      	cmp	r3, #1
 8002120:	d101      	bne.n	8002126 <HAL_ADC_Start_DMA+0x1e>
 8002122:	2302      	movs	r3, #2
 8002124:	e0c7      	b.n	80022b6 <HAL_ADC_Start_DMA+0x1ae>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b01      	cmp	r3, #1
 800213a:	d018      	beq.n	800216e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689a      	ldr	r2, [r3, #8]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0201 	orr.w	r2, r2, #1
 800214a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800214c:	4b5c      	ldr	r3, [pc, #368]	; (80022c0 <HAL_ADC_Start_DMA+0x1b8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a5c      	ldr	r2, [pc, #368]	; (80022c4 <HAL_ADC_Start_DMA+0x1bc>)
 8002152:	fba2 2303 	umull	r2, r3, r2, r3
 8002156:	0c9a      	lsrs	r2, r3, #18
 8002158:	4613      	mov	r3, r2
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	4413      	add	r3, r2
 800215e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002160:	e002      	b.n	8002168 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	3b01      	subs	r3, #1
 8002166:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f9      	bne.n	8002162 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b01      	cmp	r3, #1
 800217a:	f040 809b 	bne.w	80022b4 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002182:	4b51      	ldr	r3, [pc, #324]	; (80022c8 <HAL_ADC_Start_DMA+0x1c0>)
 8002184:	4013      	ands	r3, r2
 8002186:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002198:	2b00      	cmp	r3, #0
 800219a:	d007      	beq.n	80021ac <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021b8:	d106      	bne.n	80021c8 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	f023 0206 	bic.w	r2, r3, #6
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	645a      	str	r2, [r3, #68]	; 0x44
 80021c6:	e002      	b.n	80021ce <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021da:	4a3c      	ldr	r2, [pc, #240]	; (80022cc <HAL_ADC_Start_DMA+0x1c4>)
 80021dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e2:	4a3b      	ldr	r2, [pc, #236]	; (80022d0 <HAL_ADC_Start_DMA+0x1c8>)
 80021e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ea:	4a3a      	ldr	r2, [pc, #232]	; (80022d4 <HAL_ADC_Start_DMA+0x1cc>)
 80021ec:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80021f6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002206:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002216:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	334c      	adds	r3, #76	; 0x4c
 8002222:	4619      	mov	r1, r3
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f000 fcec 	bl	8002c04 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800222c:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <HAL_ADC_Start_DMA+0x1d0>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 031f 	and.w	r3, r3, #31
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10f      	bne.n	8002258 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d136      	bne.n	80022b4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002254:	609a      	str	r2, [r3, #8]
 8002256:	e02d      	b.n	80022b4 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a1f      	ldr	r2, [pc, #124]	; (80022dc <HAL_ADC_Start_DMA+0x1d4>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d10e      	bne.n	8002280 <HAL_ADC_Start_DMA+0x178>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d107      	bne.n	8002280 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800227e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002280:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <HAL_ADC_Start_DMA+0x1d0>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	2b00      	cmp	r3, #0
 800228a:	d113      	bne.n	80022b4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a13      	ldr	r2, [pc, #76]	; (80022e0 <HAL_ADC_Start_DMA+0x1d8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d10e      	bne.n	80022b4 <HAL_ADC_Start_DMA+0x1ac>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d107      	bne.n	80022b4 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022b2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20000000 	.word	0x20000000
 80022c4:	431bde83 	.word	0x431bde83
 80022c8:	fffff8fe 	.word	0xfffff8fe
 80022cc:	08002781 	.word	0x08002781
 80022d0:	0800283b 	.word	0x0800283b
 80022d4:	08002857 	.word	0x08002857
 80022d8:	40012300 	.word	0x40012300
 80022dc:	40012000 	.word	0x40012000
 80022e0:	40012200 	.word	0x40012200

080022e4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x1c>
 8002310:	2302      	movs	r3, #2
 8002312:	e12a      	b.n	800256a <HAL_ADC_ConfigChannel+0x272>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b09      	cmp	r3, #9
 8002322:	d93a      	bls.n	800239a <HAL_ADC_ConfigChannel+0xa2>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800232c:	d035      	beq.n	800239a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68d9      	ldr	r1, [r3, #12]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	b29b      	uxth	r3, r3
 800233a:	461a      	mov	r2, r3
 800233c:	4613      	mov	r3, r2
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4413      	add	r3, r2
 8002342:	3b1e      	subs	r3, #30
 8002344:	2207      	movs	r2, #7
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43da      	mvns	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	400a      	ands	r2, r1
 8002352:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a87      	ldr	r2, [pc, #540]	; (8002578 <HAL_ADC_ConfigChannel+0x280>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d10a      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68d9      	ldr	r1, [r3, #12]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	061a      	lsls	r2, r3, #24
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002372:	e035      	b.n	80023e0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68d9      	ldr	r1, [r3, #12]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	b29b      	uxth	r3, r3
 8002384:	4618      	mov	r0, r3
 8002386:	4603      	mov	r3, r0
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	4403      	add	r3, r0
 800238c:	3b1e      	subs	r3, #30
 800238e:	409a      	lsls	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002398:	e022      	b.n	80023e0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6919      	ldr	r1, [r3, #16]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	461a      	mov	r2, r3
 80023a8:	4613      	mov	r3, r2
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	4413      	add	r3, r2
 80023ae:	2207      	movs	r2, #7
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43da      	mvns	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	400a      	ands	r2, r1
 80023bc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6919      	ldr	r1, [r3, #16]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	4618      	mov	r0, r3
 80023d0:	4603      	mov	r3, r0
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	4403      	add	r3, r0
 80023d6:	409a      	lsls	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b06      	cmp	r3, #6
 80023e6:	d824      	bhi.n	8002432 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	3b05      	subs	r3, #5
 80023fa:	221f      	movs	r2, #31
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43da      	mvns	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	400a      	ands	r2, r1
 8002408:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	b29b      	uxth	r3, r3
 8002416:	4618      	mov	r0, r3
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	3b05      	subs	r3, #5
 8002424:	fa00 f203 	lsl.w	r2, r0, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	635a      	str	r2, [r3, #52]	; 0x34
 8002430:	e04c      	b.n	80024cc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b0c      	cmp	r3, #12
 8002438:	d824      	bhi.n	8002484 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	3b23      	subs	r3, #35	; 0x23
 800244c:	221f      	movs	r2, #31
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43da      	mvns	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	400a      	ands	r2, r1
 800245a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	b29b      	uxth	r3, r3
 8002468:	4618      	mov	r0, r3
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	3b23      	subs	r3, #35	; 0x23
 8002476:	fa00 f203 	lsl.w	r2, r0, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	631a      	str	r2, [r3, #48]	; 0x30
 8002482:	e023      	b.n	80024cc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	3b41      	subs	r3, #65	; 0x41
 8002496:	221f      	movs	r2, #31
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43da      	mvns	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	400a      	ands	r2, r1
 80024a4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	4618      	mov	r0, r3
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	3b41      	subs	r3, #65	; 0x41
 80024c0:	fa00 f203 	lsl.w	r2, r0, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a2a      	ldr	r2, [pc, #168]	; (800257c <HAL_ADC_ConfigChannel+0x284>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d10a      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x1f4>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024de:	d105      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80024e0:	4b27      	ldr	r3, [pc, #156]	; (8002580 <HAL_ADC_ConfigChannel+0x288>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	4a26      	ldr	r2, [pc, #152]	; (8002580 <HAL_ADC_ConfigChannel+0x288>)
 80024e6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80024ea:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a22      	ldr	r2, [pc, #136]	; (800257c <HAL_ADC_ConfigChannel+0x284>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d109      	bne.n	800250a <HAL_ADC_ConfigChannel+0x212>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b12      	cmp	r3, #18
 80024fc:	d105      	bne.n	800250a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80024fe:	4b20      	ldr	r3, [pc, #128]	; (8002580 <HAL_ADC_ConfigChannel+0x288>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	4a1f      	ldr	r2, [pc, #124]	; (8002580 <HAL_ADC_ConfigChannel+0x288>)
 8002504:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002508:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a1b      	ldr	r2, [pc, #108]	; (800257c <HAL_ADC_ConfigChannel+0x284>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d125      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x268>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a17      	ldr	r2, [pc, #92]	; (8002578 <HAL_ADC_ConfigChannel+0x280>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d003      	beq.n	8002526 <HAL_ADC_ConfigChannel+0x22e>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2b11      	cmp	r3, #17
 8002524:	d11c      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002526:	4b16      	ldr	r3, [pc, #88]	; (8002580 <HAL_ADC_ConfigChannel+0x288>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4a15      	ldr	r2, [pc, #84]	; (8002580 <HAL_ADC_ConfigChannel+0x288>)
 800252c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002530:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a10      	ldr	r2, [pc, #64]	; (8002578 <HAL_ADC_ConfigChannel+0x280>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d111      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800253c:	4b11      	ldr	r3, [pc, #68]	; (8002584 <HAL_ADC_ConfigChannel+0x28c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a11      	ldr	r2, [pc, #68]	; (8002588 <HAL_ADC_ConfigChannel+0x290>)
 8002542:	fba2 2303 	umull	r2, r3, r2, r3
 8002546:	0c9a      	lsrs	r2, r3, #18
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002552:	e002      	b.n	800255a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	3b01      	subs	r3, #1
 8002558:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1f9      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	10000012 	.word	0x10000012
 800257c:	40012000 	.word	0x40012000
 8002580:	40012300 	.word	0x40012300
 8002584:	20000000 	.word	0x20000000
 8002588:	431bde83 	.word	0x431bde83

0800258c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002594:	4b78      	ldr	r3, [pc, #480]	; (8002778 <ADC_Init+0x1ec>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	4a77      	ldr	r2, [pc, #476]	; (8002778 <ADC_Init+0x1ec>)
 800259a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800259e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80025a0:	4b75      	ldr	r3, [pc, #468]	; (8002778 <ADC_Init+0x1ec>)
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	4973      	ldr	r1, [pc, #460]	; (8002778 <ADC_Init+0x1ec>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6859      	ldr	r1, [r3, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	021a      	lsls	r2, r3, #8
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80025e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6859      	ldr	r1, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002602:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6899      	ldr	r1, [r3, #8]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261a:	4a58      	ldr	r2, [pc, #352]	; (800277c <ADC_Init+0x1f0>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d022      	beq.n	8002666 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800262e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6899      	ldr	r1, [r3, #8]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002650:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6899      	ldr	r1, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	430a      	orrs	r2, r1
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	e00f      	b.n	8002686 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002674:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002684:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0202 	bic.w	r2, r2, #2
 8002694:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6899      	ldr	r1, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	005a      	lsls	r2, r3, #1
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d01b      	beq.n	80026ec <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80026d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6859      	ldr	r1, [r3, #4]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	3b01      	subs	r3, #1
 80026e0:	035a      	lsls	r2, r3, #13
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	e007      	b.n	80026fc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800270a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	3b01      	subs	r3, #1
 8002718:	051a      	lsls	r2, r3, #20
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002730:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6899      	ldr	r1, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800273e:	025a      	lsls	r2, r3, #9
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002756:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6899      	ldr	r1, [r3, #8]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	029a      	lsls	r2, r3, #10
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	609a      	str	r2, [r3, #8]
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	40012300 	.word	0x40012300
 800277c:	0f000001 	.word	0x0f000001

08002780 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002796:	2b00      	cmp	r3, #0
 8002798:	d13c      	bne.n	8002814 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d12b      	bne.n	800280c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d127      	bne.n	800280c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d006      	beq.n	80027d8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d119      	bne.n	800280c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0220 	bic.w	r2, r2, #32
 80027e6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d105      	bne.n	800280c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	f043 0201 	orr.w	r2, r3, #1
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f7fe fee6 	bl	80015de <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002812:	e00e      	b.n	8002832 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	f003 0310 	and.w	r3, r3, #16
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f7ff fd5f 	bl	80022e4 <HAL_ADC_ErrorCallback>
}
 8002826:	e004      	b.n	8002832 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	4798      	blx	r3
}
 8002832:	bf00      	nop
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b084      	sub	sp, #16
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002846:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f7fe febd 	bl	80015c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800284e:	bf00      	nop
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b084      	sub	sp, #16
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002862:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2240      	movs	r2, #64	; 0x40
 8002868:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	f043 0204 	orr.w	r2, r3, #4
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f7ff fd34 	bl	80022e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800287c:	bf00      	nop
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <__NVIC_SetPriorityGrouping+0x40>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028a0:	4013      	ands	r3, r2
 80028a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <__NVIC_SetPriorityGrouping+0x44>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028b2:	4a04      	ldr	r2, [pc, #16]	; (80028c4 <__NVIC_SetPriorityGrouping+0x40>)
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	60d3      	str	r3, [r2, #12]
}
 80028b8:	bf00      	nop
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	e000ed00 	.word	0xe000ed00
 80028c8:	05fa0000 	.word	0x05fa0000

080028cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028d0:	4b04      	ldr	r3, [pc, #16]	; (80028e4 <__NVIC_GetPriorityGrouping+0x18>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	0a1b      	lsrs	r3, r3, #8
 80028d6:	f003 0307 	and.w	r3, r3, #7
}
 80028da:	4618      	mov	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	e000ed00 	.word	0xe000ed00

080028e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	db0b      	blt.n	8002912 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	f003 021f 	and.w	r2, r3, #31
 8002900:	4907      	ldr	r1, [pc, #28]	; (8002920 <__NVIC_EnableIRQ+0x38>)
 8002902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002906:	095b      	lsrs	r3, r3, #5
 8002908:	2001      	movs	r0, #1
 800290a:	fa00 f202 	lsl.w	r2, r0, r2
 800290e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	e000e100 	.word	0xe000e100

08002924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	4603      	mov	r3, r0
 800292c:	6039      	str	r1, [r7, #0]
 800292e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002934:	2b00      	cmp	r3, #0
 8002936:	db0a      	blt.n	800294e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	b2da      	uxtb	r2, r3
 800293c:	490c      	ldr	r1, [pc, #48]	; (8002970 <__NVIC_SetPriority+0x4c>)
 800293e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002942:	0112      	lsls	r2, r2, #4
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	440b      	add	r3, r1
 8002948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800294c:	e00a      	b.n	8002964 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	b2da      	uxtb	r2, r3
 8002952:	4908      	ldr	r1, [pc, #32]	; (8002974 <__NVIC_SetPriority+0x50>)
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	3b04      	subs	r3, #4
 800295c:	0112      	lsls	r2, r2, #4
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	440b      	add	r3, r1
 8002962:	761a      	strb	r2, [r3, #24]
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	e000e100 	.word	0xe000e100
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002978:	b480      	push	{r7}
 800297a:	b089      	sub	sp, #36	; 0x24
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	f1c3 0307 	rsb	r3, r3, #7
 8002992:	2b04      	cmp	r3, #4
 8002994:	bf28      	it	cs
 8002996:	2304      	movcs	r3, #4
 8002998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	3304      	adds	r3, #4
 800299e:	2b06      	cmp	r3, #6
 80029a0:	d902      	bls.n	80029a8 <NVIC_EncodePriority+0x30>
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	3b03      	subs	r3, #3
 80029a6:	e000      	b.n	80029aa <NVIC_EncodePriority+0x32>
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ac:	f04f 32ff 	mov.w	r2, #4294967295
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	43da      	mvns	r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	401a      	ands	r2, r3
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029c0:	f04f 31ff 	mov.w	r1, #4294967295
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ca:	43d9      	mvns	r1, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d0:	4313      	orrs	r3, r2
         );
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3724      	adds	r7, #36	; 0x24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
	...

080029e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029f0:	d301      	bcc.n	80029f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029f2:	2301      	movs	r3, #1
 80029f4:	e00f      	b.n	8002a16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029f6:	4a0a      	ldr	r2, [pc, #40]	; (8002a20 <SysTick_Config+0x40>)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029fe:	210f      	movs	r1, #15
 8002a00:	f04f 30ff 	mov.w	r0, #4294967295
 8002a04:	f7ff ff8e 	bl	8002924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a08:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <SysTick_Config+0x40>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a0e:	4b04      	ldr	r3, [pc, #16]	; (8002a20 <SysTick_Config+0x40>)
 8002a10:	2207      	movs	r2, #7
 8002a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	e000e010 	.word	0xe000e010

08002a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff ff29 	bl	8002884 <__NVIC_SetPriorityGrouping>
}
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b086      	sub	sp, #24
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	4603      	mov	r3, r0
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	607a      	str	r2, [r7, #4]
 8002a46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a4c:	f7ff ff3e 	bl	80028cc <__NVIC_GetPriorityGrouping>
 8002a50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	68b9      	ldr	r1, [r7, #8]
 8002a56:	6978      	ldr	r0, [r7, #20]
 8002a58:	f7ff ff8e 	bl	8002978 <NVIC_EncodePriority>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a62:	4611      	mov	r1, r2
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff ff5d 	bl	8002924 <__NVIC_SetPriority>
}
 8002a6a:	bf00      	nop
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b082      	sub	sp, #8
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	4603      	mov	r3, r0
 8002a7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff ff31 	bl	80028e8 <__NVIC_EnableIRQ>
}
 8002a86:	bf00      	nop
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b082      	sub	sp, #8
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff ffa2 	bl	80029e0 <SysTick_Config>
 8002a9c:	4603      	mov	r3, r0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ab4:	f7ff fa18 	bl	8001ee8 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e099      	b.n	8002bf8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0201 	bic.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ae4:	e00f      	b.n	8002b06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ae6:	f7ff f9ff 	bl	8001ee8 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b05      	cmp	r3, #5
 8002af2:	d908      	bls.n	8002b06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2220      	movs	r2, #32
 8002af8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2203      	movs	r2, #3
 8002afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e078      	b.n	8002bf8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1e8      	bne.n	8002ae6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	4b38      	ldr	r3, [pc, #224]	; (8002c00 <HAL_DMA_Init+0x158>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d107      	bne.n	8002b70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f023 0307 	bic.w	r3, r3, #7
 8002b86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d117      	bne.n	8002bca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00e      	beq.n	8002bca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 faa5 	bl	80030fc <DMA_CheckFifoParam>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d008      	beq.n	8002bca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2240      	movs	r2, #64	; 0x40
 8002bbc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e016      	b.n	8002bf8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 fa5c 	bl	8003090 <DMA_CalcBaseAndBitshift>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be0:	223f      	movs	r2, #63	; 0x3f
 8002be2:	409a      	lsls	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	e010803f 	.word	0xe010803f

08002c04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
 8002c10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d101      	bne.n	8002c2a <HAL_DMA_Start_IT+0x26>
 8002c26:	2302      	movs	r3, #2
 8002c28:	e048      	b.n	8002cbc <HAL_DMA_Start_IT+0xb8>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d137      	bne.n	8002cae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2202      	movs	r2, #2
 8002c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	68b9      	ldr	r1, [r7, #8]
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 f9ee 	bl	8003034 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5c:	223f      	movs	r2, #63	; 0x3f
 8002c5e:	409a      	lsls	r2, r3
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0216 	orr.w	r2, r2, #22
 8002c72:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695a      	ldr	r2, [r3, #20]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c82:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d007      	beq.n	8002c9c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0208 	orr.w	r2, r2, #8
 8002c9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0201 	orr.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	e005      	b.n	8002cba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d004      	beq.n	8002ce2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2280      	movs	r2, #128	; 0x80
 8002cdc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e00c      	b.n	8002cfc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2205      	movs	r2, #5
 8002ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0201 	bic.w	r2, r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002d14:	4b92      	ldr	r3, [pc, #584]	; (8002f60 <HAL_DMA_IRQHandler+0x258>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a92      	ldr	r2, [pc, #584]	; (8002f64 <HAL_DMA_IRQHandler+0x25c>)
 8002d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1e:	0a9b      	lsrs	r3, r3, #10
 8002d20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d32:	2208      	movs	r2, #8
 8002d34:	409a      	lsls	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d01a      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d013      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0204 	bic.w	r2, r2, #4
 8002d5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d60:	2208      	movs	r2, #8
 8002d62:	409a      	lsls	r2, r3
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6c:	f043 0201 	orr.w	r2, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d78:	2201      	movs	r2, #1
 8002d7a:	409a      	lsls	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d012      	beq.n	8002daa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00b      	beq.n	8002daa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d96:	2201      	movs	r2, #1
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da2:	f043 0202 	orr.w	r2, r3, #2
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dae:	2204      	movs	r2, #4
 8002db0:	409a      	lsls	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d012      	beq.n	8002de0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00b      	beq.n	8002de0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dcc:	2204      	movs	r2, #4
 8002dce:	409a      	lsls	r2, r3
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd8:	f043 0204 	orr.w	r2, r3, #4
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de4:	2210      	movs	r2, #16
 8002de6:	409a      	lsls	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d043      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d03c      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e02:	2210      	movs	r2, #16
 8002e04:	409a      	lsls	r2, r3
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d018      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d108      	bne.n	8002e38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d024      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	4798      	blx	r3
 8002e36:	e01f      	b.n	8002e78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d01b      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	4798      	blx	r3
 8002e48:	e016      	b.n	8002e78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d107      	bne.n	8002e68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0208 	bic.w	r2, r2, #8
 8002e66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	409a      	lsls	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 808e 	beq.w	8002fa6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 8086 	beq.w	8002fa6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	409a      	lsls	r2, r3
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b05      	cmp	r3, #5
 8002eb0:	d136      	bne.n	8002f20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0216 	bic.w	r2, r2, #22
 8002ec0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695a      	ldr	r2, [r3, #20]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ed0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d103      	bne.n	8002ee2 <HAL_DMA_IRQHandler+0x1da>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d007      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0208 	bic.w	r2, r2, #8
 8002ef0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef6:	223f      	movs	r2, #63	; 0x3f
 8002ef8:	409a      	lsls	r2, r3
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d07d      	beq.n	8003012 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	4798      	blx	r3
        }
        return;
 8002f1e:	e078      	b.n	8003012 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d01c      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d108      	bne.n	8002f4e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d030      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	4798      	blx	r3
 8002f4c:	e02b      	b.n	8002fa6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d027      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	4798      	blx	r3
 8002f5e:	e022      	b.n	8002fa6 <HAL_DMA_IRQHandler+0x29e>
 8002f60:	20000000 	.word	0x20000000
 8002f64:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10f      	bne.n	8002f96 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0210 	bic.w	r2, r2, #16
 8002f84:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d032      	beq.n	8003014 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d022      	beq.n	8003000 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2205      	movs	r2, #5
 8002fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0201 	bic.w	r2, r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	60bb      	str	r3, [r7, #8]
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d307      	bcc.n	8002fee <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1f2      	bne.n	8002fd2 <HAL_DMA_IRQHandler+0x2ca>
 8002fec:	e000      	b.n	8002ff0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002fee:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	4798      	blx	r3
 8003010:	e000      	b.n	8003014 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003012:	bf00      	nop
    }
  }
}
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop

0800301c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003028:	4618      	mov	r0, r3
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
 8003040:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003050:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b40      	cmp	r3, #64	; 0x40
 8003060:	d108      	bne.n	8003074 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003072:	e007      	b.n	8003084 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	60da      	str	r2, [r3, #12]
}
 8003084:	bf00      	nop
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	b2db      	uxtb	r3, r3
 800309e:	3b10      	subs	r3, #16
 80030a0:	4a13      	ldr	r2, [pc, #76]	; (80030f0 <DMA_CalcBaseAndBitshift+0x60>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	091b      	lsrs	r3, r3, #4
 80030a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030aa:	4a12      	ldr	r2, [pc, #72]	; (80030f4 <DMA_CalcBaseAndBitshift+0x64>)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4413      	add	r3, r2
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2b03      	cmp	r3, #3
 80030bc:	d908      	bls.n	80030d0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	461a      	mov	r2, r3
 80030c4:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <DMA_CalcBaseAndBitshift+0x68>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	1d1a      	adds	r2, r3, #4
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	659a      	str	r2, [r3, #88]	; 0x58
 80030ce:	e006      	b.n	80030de <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <DMA_CalcBaseAndBitshift+0x68>)
 80030d8:	4013      	ands	r3, r2
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	aaaaaaab 	.word	0xaaaaaaab
 80030f4:	08008038 	.word	0x08008038
 80030f8:	fffffc00 	.word	0xfffffc00

080030fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d11f      	bne.n	8003156 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b03      	cmp	r3, #3
 800311a:	d855      	bhi.n	80031c8 <DMA_CheckFifoParam+0xcc>
 800311c:	a201      	add	r2, pc, #4	; (adr r2, 8003124 <DMA_CheckFifoParam+0x28>)
 800311e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003122:	bf00      	nop
 8003124:	08003135 	.word	0x08003135
 8003128:	08003147 	.word	0x08003147
 800312c:	08003135 	.word	0x08003135
 8003130:	080031c9 	.word	0x080031c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003138:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d045      	beq.n	80031cc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003144:	e042      	b.n	80031cc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800314e:	d13f      	bne.n	80031d0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003154:	e03c      	b.n	80031d0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800315e:	d121      	bne.n	80031a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2b03      	cmp	r3, #3
 8003164:	d836      	bhi.n	80031d4 <DMA_CheckFifoParam+0xd8>
 8003166:	a201      	add	r2, pc, #4	; (adr r2, 800316c <DMA_CheckFifoParam+0x70>)
 8003168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316c:	0800317d 	.word	0x0800317d
 8003170:	08003183 	.word	0x08003183
 8003174:	0800317d 	.word	0x0800317d
 8003178:	08003195 	.word	0x08003195
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	73fb      	strb	r3, [r7, #15]
      break;
 8003180:	e02f      	b.n	80031e2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d024      	beq.n	80031d8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003192:	e021      	b.n	80031d8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003198:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800319c:	d11e      	bne.n	80031dc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031a2:	e01b      	b.n	80031dc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d902      	bls.n	80031b0 <DMA_CheckFifoParam+0xb4>
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d003      	beq.n	80031b6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031ae:	e018      	b.n	80031e2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	73fb      	strb	r3, [r7, #15]
      break;
 80031b4:	e015      	b.n	80031e2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00e      	beq.n	80031e0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	73fb      	strb	r3, [r7, #15]
      break;
 80031c6:	e00b      	b.n	80031e0 <DMA_CheckFifoParam+0xe4>
      break;
 80031c8:	bf00      	nop
 80031ca:	e00a      	b.n	80031e2 <DMA_CheckFifoParam+0xe6>
      break;
 80031cc:	bf00      	nop
 80031ce:	e008      	b.n	80031e2 <DMA_CheckFifoParam+0xe6>
      break;
 80031d0:	bf00      	nop
 80031d2:	e006      	b.n	80031e2 <DMA_CheckFifoParam+0xe6>
      break;
 80031d4:	bf00      	nop
 80031d6:	e004      	b.n	80031e2 <DMA_CheckFifoParam+0xe6>
      break;
 80031d8:	bf00      	nop
 80031da:	e002      	b.n	80031e2 <DMA_CheckFifoParam+0xe6>
      break;   
 80031dc:	bf00      	nop
 80031de:	e000      	b.n	80031e2 <DMA_CheckFifoParam+0xe6>
      break;
 80031e0:	bf00      	nop
    }
  } 
  
  return status; 
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b089      	sub	sp, #36	; 0x24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80031fa:	2300      	movs	r3, #0
 80031fc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80031fe:	2300      	movs	r3, #0
 8003200:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003202:	2300      	movs	r3, #0
 8003204:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003206:	2300      	movs	r3, #0
 8003208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
 800320e:	e169      	b.n	80034e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003210:	2201      	movs	r2, #1
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	4013      	ands	r3, r2
 8003222:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	429a      	cmp	r2, r3
 800322a:	f040 8158 	bne.w	80034de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d00b      	beq.n	800324e <HAL_GPIO_Init+0x5e>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d007      	beq.n	800324e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003242:	2b11      	cmp	r3, #17
 8003244:	d003      	beq.n	800324e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b12      	cmp	r3, #18
 800324c:	d130      	bne.n	80032b0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	2203      	movs	r2, #3
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	43db      	mvns	r3, r3
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	4013      	ands	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4313      	orrs	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003284:	2201      	movs	r2, #1
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4013      	ands	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	091b      	lsrs	r3, r3, #4
 800329a:	f003 0201 	and.w	r2, r3, #1
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	2203      	movs	r2, #3
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	43db      	mvns	r3, r3
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4013      	ands	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d003      	beq.n	80032f0 <HAL_GPIO_Init+0x100>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2b12      	cmp	r3, #18
 80032ee:	d123      	bne.n	8003338 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	08da      	lsrs	r2, r3, #3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3208      	adds	r2, #8
 80032f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	220f      	movs	r2, #15
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	43db      	mvns	r3, r3
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	4013      	ands	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4313      	orrs	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	08da      	lsrs	r2, r3, #3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3208      	adds	r2, #8
 8003332:	69b9      	ldr	r1, [r7, #24]
 8003334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	2203      	movs	r2, #3
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	43db      	mvns	r3, r3
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	4013      	ands	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 0203 	and.w	r2, r3, #3
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4313      	orrs	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 80b2 	beq.w	80034de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800337a:	4b5f      	ldr	r3, [pc, #380]	; (80034f8 <HAL_GPIO_Init+0x308>)
 800337c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337e:	4a5e      	ldr	r2, [pc, #376]	; (80034f8 <HAL_GPIO_Init+0x308>)
 8003380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003384:	6453      	str	r3, [r2, #68]	; 0x44
 8003386:	4b5c      	ldr	r3, [pc, #368]	; (80034f8 <HAL_GPIO_Init+0x308>)
 8003388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003392:	4a5a      	ldr	r2, [pc, #360]	; (80034fc <HAL_GPIO_Init+0x30c>)
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	089b      	lsrs	r3, r3, #2
 8003398:	3302      	adds	r3, #2
 800339a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800339e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	220f      	movs	r2, #15
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43db      	mvns	r3, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4013      	ands	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a51      	ldr	r2, [pc, #324]	; (8003500 <HAL_GPIO_Init+0x310>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d02b      	beq.n	8003416 <HAL_GPIO_Init+0x226>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a50      	ldr	r2, [pc, #320]	; (8003504 <HAL_GPIO_Init+0x314>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d025      	beq.n	8003412 <HAL_GPIO_Init+0x222>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a4f      	ldr	r2, [pc, #316]	; (8003508 <HAL_GPIO_Init+0x318>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d01f      	beq.n	800340e <HAL_GPIO_Init+0x21e>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a4e      	ldr	r2, [pc, #312]	; (800350c <HAL_GPIO_Init+0x31c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d019      	beq.n	800340a <HAL_GPIO_Init+0x21a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a4d      	ldr	r2, [pc, #308]	; (8003510 <HAL_GPIO_Init+0x320>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d013      	beq.n	8003406 <HAL_GPIO_Init+0x216>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a4c      	ldr	r2, [pc, #304]	; (8003514 <HAL_GPIO_Init+0x324>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00d      	beq.n	8003402 <HAL_GPIO_Init+0x212>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a4b      	ldr	r2, [pc, #300]	; (8003518 <HAL_GPIO_Init+0x328>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d007      	beq.n	80033fe <HAL_GPIO_Init+0x20e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a4a      	ldr	r2, [pc, #296]	; (800351c <HAL_GPIO_Init+0x32c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d101      	bne.n	80033fa <HAL_GPIO_Init+0x20a>
 80033f6:	2307      	movs	r3, #7
 80033f8:	e00e      	b.n	8003418 <HAL_GPIO_Init+0x228>
 80033fa:	2308      	movs	r3, #8
 80033fc:	e00c      	b.n	8003418 <HAL_GPIO_Init+0x228>
 80033fe:	2306      	movs	r3, #6
 8003400:	e00a      	b.n	8003418 <HAL_GPIO_Init+0x228>
 8003402:	2305      	movs	r3, #5
 8003404:	e008      	b.n	8003418 <HAL_GPIO_Init+0x228>
 8003406:	2304      	movs	r3, #4
 8003408:	e006      	b.n	8003418 <HAL_GPIO_Init+0x228>
 800340a:	2303      	movs	r3, #3
 800340c:	e004      	b.n	8003418 <HAL_GPIO_Init+0x228>
 800340e:	2302      	movs	r3, #2
 8003410:	e002      	b.n	8003418 <HAL_GPIO_Init+0x228>
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <HAL_GPIO_Init+0x228>
 8003416:	2300      	movs	r3, #0
 8003418:	69fa      	ldr	r2, [r7, #28]
 800341a:	f002 0203 	and.w	r2, r2, #3
 800341e:	0092      	lsls	r2, r2, #2
 8003420:	4093      	lsls	r3, r2
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4313      	orrs	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003428:	4934      	ldr	r1, [pc, #208]	; (80034fc <HAL_GPIO_Init+0x30c>)
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	089b      	lsrs	r3, r3, #2
 800342e:	3302      	adds	r3, #2
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003436:	4b3a      	ldr	r3, [pc, #232]	; (8003520 <HAL_GPIO_Init+0x330>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	43db      	mvns	r3, r3
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4013      	ands	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	4313      	orrs	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800345a:	4a31      	ldr	r2, [pc, #196]	; (8003520 <HAL_GPIO_Init+0x330>)
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003460:	4b2f      	ldr	r3, [pc, #188]	; (8003520 <HAL_GPIO_Init+0x330>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	43db      	mvns	r3, r3
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4013      	ands	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003484:	4a26      	ldr	r2, [pc, #152]	; (8003520 <HAL_GPIO_Init+0x330>)
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800348a:	4b25      	ldr	r3, [pc, #148]	; (8003520 <HAL_GPIO_Init+0x330>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	43db      	mvns	r3, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4013      	ands	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034ae:	4a1c      	ldr	r2, [pc, #112]	; (8003520 <HAL_GPIO_Init+0x330>)
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034b4:	4b1a      	ldr	r3, [pc, #104]	; (8003520 <HAL_GPIO_Init+0x330>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	43db      	mvns	r3, r3
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	4013      	ands	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034d8:	4a11      	ldr	r2, [pc, #68]	; (8003520 <HAL_GPIO_Init+0x330>)
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	3301      	adds	r3, #1
 80034e2:	61fb      	str	r3, [r7, #28]
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	2b0f      	cmp	r3, #15
 80034e8:	f67f ae92 	bls.w	8003210 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80034ec:	bf00      	nop
 80034ee:	3724      	adds	r7, #36	; 0x24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40013800 	.word	0x40013800
 8003500:	40020000 	.word	0x40020000
 8003504:	40020400 	.word	0x40020400
 8003508:	40020800 	.word	0x40020800
 800350c:	40020c00 	.word	0x40020c00
 8003510:	40021000 	.word	0x40021000
 8003514:	40021400 	.word	0x40021400
 8003518:	40021800 	.word	0x40021800
 800351c:	40021c00 	.word	0x40021c00
 8003520:	40013c00 	.word	0x40013c00

08003524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	807b      	strh	r3, [r7, #2]
 8003530:	4613      	mov	r3, r2
 8003532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003534:	787b      	ldrb	r3, [r7, #1]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800353a:	887a      	ldrh	r2, [r7, #2]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003540:	e003      	b.n	800354a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003542:	887b      	ldrh	r3, [r7, #2]
 8003544:	041a      	lsls	r2, r3, #16
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	619a      	str	r2, [r3, #24]
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
	...

08003558 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e07f      	b.n	800366a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d106      	bne.n	8003584 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fe f8a4 	bl	80016cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2224      	movs	r2, #36	; 0x24
 8003588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0201 	bic.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d107      	bne.n	80035d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035ce:	609a      	str	r2, [r3, #8]
 80035d0:	e006      	b.n	80035e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80035de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d104      	bne.n	80035f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6859      	ldr	r1, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	4b1d      	ldr	r3, [pc, #116]	; (8003674 <HAL_I2C_Init+0x11c>)
 80035fe:	430b      	orrs	r3, r1
 8003600:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003610:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691a      	ldr	r2, [r3, #16]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	ea42 0103 	orr.w	r1, r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	021a      	lsls	r2, r3, #8
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	69d9      	ldr	r1, [r3, #28]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a1a      	ldr	r2, [r3, #32]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	430a      	orrs	r2, r1
 800363a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0201 	orr.w	r2, r2, #1
 800364a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2220      	movs	r2, #32
 8003656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	02008000 	.word	0x02008000

08003678 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b088      	sub	sp, #32
 800367c:	af02      	add	r7, sp, #8
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	4608      	mov	r0, r1
 8003682:	4611      	mov	r1, r2
 8003684:	461a      	mov	r2, r3
 8003686:	4603      	mov	r3, r0
 8003688:	817b      	strh	r3, [r7, #10]
 800368a:	460b      	mov	r3, r1
 800368c:	813b      	strh	r3, [r7, #8]
 800368e:	4613      	mov	r3, r2
 8003690:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b20      	cmp	r3, #32
 800369c:	f040 80fd 	bne.w	800389a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d002      	beq.n	80036ac <HAL_I2C_Mem_Read+0x34>
 80036a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d105      	bne.n	80036b8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0f1      	b.n	800389c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d101      	bne.n	80036c6 <HAL_I2C_Mem_Read+0x4e>
 80036c2:	2302      	movs	r3, #2
 80036c4:	e0ea      	b.n	800389c <HAL_I2C_Mem_Read+0x224>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036ce:	f7fe fc0b 	bl	8001ee8 <HAL_GetTick>
 80036d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	2319      	movs	r3, #25
 80036da:	2201      	movs	r2, #1
 80036dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f001 fb39 	bl	8004d58 <I2C_WaitOnFlagUntilTimeout>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e0d5      	b.n	800389c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2222      	movs	r2, #34	; 0x22
 80036f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2240      	movs	r2, #64	; 0x40
 80036fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6a3a      	ldr	r2, [r7, #32]
 800370a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003710:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003718:	88f8      	ldrh	r0, [r7, #6]
 800371a:	893a      	ldrh	r2, [r7, #8]
 800371c:	8979      	ldrh	r1, [r7, #10]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	9301      	str	r3, [sp, #4]
 8003722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	4603      	mov	r3, r0
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 fe27 	bl	800437c <I2C_RequestMemoryRead>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d005      	beq.n	8003740 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e0ad      	b.n	800389c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003744:	b29b      	uxth	r3, r3
 8003746:	2bff      	cmp	r3, #255	; 0xff
 8003748:	d90e      	bls.n	8003768 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	22ff      	movs	r2, #255	; 0xff
 800374e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003754:	b2da      	uxtb	r2, r3
 8003756:	8979      	ldrh	r1, [r7, #10]
 8003758:	4b52      	ldr	r3, [pc, #328]	; (80038a4 <HAL_I2C_Mem_Read+0x22c>)
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f001 fc1b 	bl	8004f9c <I2C_TransferConfig>
 8003766:	e00f      	b.n	8003788 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376c:	b29a      	uxth	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003776:	b2da      	uxtb	r2, r3
 8003778:	8979      	ldrh	r1, [r7, #10]
 800377a:	4b4a      	ldr	r3, [pc, #296]	; (80038a4 <HAL_I2C_Mem_Read+0x22c>)
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f001 fc0a 	bl	8004f9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378e:	2200      	movs	r2, #0
 8003790:	2104      	movs	r1, #4
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f001 fae0 	bl	8004d58 <I2C_WaitOnFlagUntilTimeout>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e07c      	b.n	800389c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d034      	beq.n	8003848 <HAL_I2C_Mem_Read+0x1d0>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d130      	bne.n	8003848 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ec:	2200      	movs	r2, #0
 80037ee:	2180      	movs	r1, #128	; 0x80
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f001 fab1 	bl	8004d58 <I2C_WaitOnFlagUntilTimeout>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e04d      	b.n	800389c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003804:	b29b      	uxth	r3, r3
 8003806:	2bff      	cmp	r3, #255	; 0xff
 8003808:	d90e      	bls.n	8003828 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	22ff      	movs	r2, #255	; 0xff
 800380e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003814:	b2da      	uxtb	r2, r3
 8003816:	8979      	ldrh	r1, [r7, #10]
 8003818:	2300      	movs	r3, #0
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f001 fbbb 	bl	8004f9c <I2C_TransferConfig>
 8003826:	e00f      	b.n	8003848 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382c:	b29a      	uxth	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003836:	b2da      	uxtb	r2, r3
 8003838:	8979      	ldrh	r1, [r7, #10]
 800383a:	2300      	movs	r3, #0
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f001 fbaa 	bl	8004f9c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384c:	b29b      	uxth	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d19a      	bne.n	8003788 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f001 fafe 	bl	8004e58 <I2C_WaitOnSTOPFlagUntilTimeout>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e01a      	b.n	800389c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2220      	movs	r2, #32
 800386c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6859      	ldr	r1, [r3, #4]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <HAL_I2C_Mem_Read+0x230>)
 800387a:	400b      	ands	r3, r1
 800387c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	e000      	b.n	800389c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800389a:	2302      	movs	r3, #2
  }
}
 800389c:	4618      	mov	r0, r3
 800389e:	3718      	adds	r7, #24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	80002400 	.word	0x80002400
 80038a8:	fe00e800 	.word	0xfe00e800

080038ac <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08a      	sub	sp, #40	; 0x28
 80038b0:	af02      	add	r7, sp, #8
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	4608      	mov	r0, r1
 80038b6:	4611      	mov	r1, r2
 80038b8:	461a      	mov	r2, r3
 80038ba:	4603      	mov	r3, r0
 80038bc:	817b      	strh	r3, [r7, #10]
 80038be:	460b      	mov	r3, r1
 80038c0:	813b      	strh	r3, [r7, #8]
 80038c2:	4613      	mov	r3, r2
 80038c4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b20      	cmp	r3, #32
 80038d0:	f040 80d5 	bne.w	8003a7e <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 80038d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d002      	beq.n	80038e0 <HAL_I2C_Mem_Write_DMA+0x34>
 80038da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d105      	bne.n	80038ec <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e0c9      	b.n	8003a80 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038fa:	d101      	bne.n	8003900 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 80038fc:	2302      	movs	r3, #2
 80038fe:	e0bf      	b.n	8003a80 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003906:	2b01      	cmp	r3, #1
 8003908:	d101      	bne.n	800390e <HAL_I2C_Mem_Write_DMA+0x62>
 800390a:	2302      	movs	r3, #2
 800390c:	e0b8      	b.n	8003a80 <HAL_I2C_Mem_Write_DMA+0x1d4>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003916:	f7fe fae7 	bl	8001ee8 <HAL_GetTick>
 800391a:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2221      	movs	r2, #33	; 0x21
 8003920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2240      	movs	r2, #64	; 0x40
 8003928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003936:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800393c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	4a51      	ldr	r2, [pc, #324]	; (8003a88 <HAL_I2C_Mem_Write_DMA+0x1dc>)
 8003942:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4a51      	ldr	r2, [pc, #324]	; (8003a8c <HAL_I2C_Mem_Write_DMA+0x1e0>)
 8003948:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394e:	b29b      	uxth	r3, r3
 8003950:	2bff      	cmp	r3, #255	; 0xff
 8003952:	d906      	bls.n	8003962 <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	22ff      	movs	r2, #255	; 0xff
 8003958:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800395a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800395e:	61fb      	str	r3, [r7, #28]
 8003960:	e007      	b.n	8003972 <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003966:	b29a      	uxth	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800396c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003970:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003972:	88f8      	ldrh	r0, [r7, #6]
 8003974:	893a      	ldrh	r2, [r7, #8]
 8003976:	8979      	ldrh	r1, [r7, #10]
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	9301      	str	r3, [sp, #4]
 800397c:	2319      	movs	r3, #25
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	4603      	mov	r3, r0
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 fca6 	bl	80042d4 <I2C_RequestMemoryWrite>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d005      	beq.n	800399a <HAL_I2C_Mem_Write_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e072      	b.n	8003a80 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d020      	beq.n	80039e4 <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	4a3a      	ldr	r2, [pc, #232]	; (8003a90 <HAL_I2C_Mem_Write_DMA+0x1e4>)
 80039a8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ae:	4a39      	ldr	r2, [pc, #228]	; (8003a94 <HAL_I2C_Mem_Write_DMA+0x1e8>)
 80039b0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b6:	2200      	movs	r2, #0
 80039b8:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	2200      	movs	r2, #0
 80039c0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80039c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3328      	adds	r3, #40	; 0x28
 80039ce:	461a      	mov	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d4:	f7ff f916 	bl	8002c04 <HAL_DMA_Start_IT>
 80039d8:	4603      	mov	r3, r0
 80039da:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80039dc:	7dfb      	ldrb	r3, [r7, #23]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d139      	bne.n	8003a56 <HAL_I2C_Mem_Write_DMA+0x1aa>
 80039e2:	e013      	b.n	8003a0c <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e039      	b.n	8003a80 <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	8979      	ldrh	r1, [r7, #10]
 8003a14:	2300      	movs	r3, #0
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f001 fabe 	bl	8004f9c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003a3a:	2111      	movs	r1, #17
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f001 fadb 	bl	8004ff8 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a50:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	e014      	b.n	8003a80 <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6a:	f043 0210 	orr.w	r2, r3, #16
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e000      	b.n	8003a80 <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8003a7e:	2302      	movs	r3, #2
  }
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3720      	adds	r7, #32
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	ffff0000 	.word	0xffff0000
 8003a8c:	08003f5f 	.word	0x08003f5f
 8003a90:	08004b71 	.word	0x08004b71
 8003a94:	08004c9d 	.word	0x08004c9d

08003a98 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b08a      	sub	sp, #40	; 0x28
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	4608      	mov	r0, r1
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	817b      	strh	r3, [r7, #10]
 8003aaa:	460b      	mov	r3, r1
 8003aac:	813b      	strh	r3, [r7, #8]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b20      	cmp	r3, #32
 8003abc:	f040 80d5 	bne.w	8003c6a <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <HAL_I2C_Mem_Read_DMA+0x34>
 8003ac6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d105      	bne.n	8003ad8 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ad2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e0c9      	b.n	8003c6c <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ae6:	d101      	bne.n	8003aec <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e0bf      	b.n	8003c6c <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d101      	bne.n	8003afa <HAL_I2C_Mem_Read_DMA+0x62>
 8003af6:	2302      	movs	r3, #2
 8003af8:	e0b8      	b.n	8003c6c <HAL_I2C_Mem_Read_DMA+0x1d4>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b02:	f7fe f9f1 	bl	8001ee8 <HAL_GetTick>
 8003b06:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2222      	movs	r2, #34	; 0x22
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2240      	movs	r2, #64	; 0x40
 8003b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003b28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4a51      	ldr	r2, [pc, #324]	; (8003c74 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 8003b2e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4a51      	ldr	r2, [pc, #324]	; (8003c78 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 8003b34:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	2bff      	cmp	r3, #255	; 0xff
 8003b3e:	d906      	bls.n	8003b4e <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	22ff      	movs	r2, #255	; 0xff
 8003b44:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003b46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b4a:	61fb      	str	r3, [r7, #28]
 8003b4c:	e007      	b.n	8003b5e <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003b58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b5c:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003b5e:	88f8      	ldrh	r0, [r7, #6]
 8003b60:	893a      	ldrh	r2, [r7, #8]
 8003b62:	8979      	ldrh	r1, [r7, #10]
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	9301      	str	r3, [sp, #4]
 8003b68:	2319      	movs	r3, #25
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 fc04 	bl	800437c <I2C_RequestMemoryRead>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d005      	beq.n	8003b86 <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e072      	b.n	8003c6c <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d020      	beq.n	8003bd0 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b92:	4a3a      	ldr	r2, [pc, #232]	; (8003c7c <HAL_I2C_Mem_Read_DMA+0x1e4>)
 8003b94:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9a:	4a39      	ldr	r2, [pc, #228]	; (8003c80 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8003b9c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003baa:	2200      	movs	r2, #0
 8003bac:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	3324      	adds	r3, #36	; 0x24
 8003bb8:	4619      	mov	r1, r3
 8003bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc0:	f7ff f820 	bl	8002c04 <HAL_DMA_Start_IT>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8003bc8:	7dfb      	ldrb	r3, [r7, #23]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d139      	bne.n	8003c42 <HAL_I2C_Mem_Read_DMA+0x1aa>
 8003bce:	e013      	b.n	8003bf8 <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e039      	b.n	8003c6c <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	8979      	ldrh	r1, [r7, #10]
 8003c00:	4b20      	ldr	r3, [pc, #128]	; (8003c84 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f001 f9c8 	bl	8004f9c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003c26:	2111      	movs	r1, #17
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f001 f9e5 	bl	8004ff8 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c3c:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	e014      	b.n	8003c6c <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c56:	f043 0210 	orr.w	r2, r3, #16
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8003c6a:	2302      	movs	r3, #2
  }
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3720      	adds	r7, #32
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	ffff0000 	.word	0xffff0000
 8003c78:	08003f5f 	.word	0x08003f5f
 8003c7c:	08004c07 	.word	0x08004c07
 8003c80:	08004c9d 	.word	0x08004c9d
 8003c84:	80002400 	.word	0x80002400

08003c88 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	70fb      	strb	r3, [r7, #3]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d101      	bne.n	8003d7c <I2C_Slave_ISR_IT+0x24>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	e0ec      	b.n	8003f56 <I2C_Slave_ISR_IT+0x1fe>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d009      	beq.n	8003da4 <I2C_Slave_ISR_IT+0x4c>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	095b      	lsrs	r3, r3, #5
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003d9c:	6939      	ldr	r1, [r7, #16]
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 fcd8 	bl	8004754 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	091b      	lsrs	r3, r3, #4
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d04d      	beq.n	8003e4c <I2C_Slave_ISR_IT+0xf4>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	091b      	lsrs	r3, r3, #4
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d047      	beq.n	8003e4c <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d128      	bne.n	8003e18 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b28      	cmp	r3, #40	; 0x28
 8003dd0:	d108      	bne.n	8003de4 <I2C_Slave_ISR_IT+0x8c>
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003dd8:	d104      	bne.n	8003de4 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003dda:	6939      	ldr	r1, [r7, #16]
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 fd8f 	bl	8004900 <I2C_ITListenCplt>
 8003de2:	e032      	b.n	8003e4a <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b29      	cmp	r3, #41	; 0x29
 8003dee:	d10e      	bne.n	8003e0e <I2C_Slave_ISR_IT+0xb6>
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003df6:	d00a      	beq.n	8003e0e <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2210      	movs	r2, #16
 8003dfe:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 fe91 	bl	8004b28 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 fbcb 	bl	80045a2 <I2C_ITSlaveSeqCplt>
 8003e0c:	e01d      	b.n	8003e4a <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2210      	movs	r2, #16
 8003e14:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003e16:	e096      	b.n	8003f46 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2210      	movs	r2, #16
 8003e1e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e24:	f043 0204 	orr.w	r2, r3, #4
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d004      	beq.n	8003e3c <I2C_Slave_ISR_IT+0xe4>
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e38:	f040 8085 	bne.w	8003f46 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e40:	4619      	mov	r1, r3
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 fdb0 	bl	80049a8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003e48:	e07d      	b.n	8003f46 <I2C_Slave_ISR_IT+0x1ee>
 8003e4a:	e07c      	b.n	8003f46 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	089b      	lsrs	r3, r3, #2
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d030      	beq.n	8003eba <I2C_Slave_ISR_IT+0x162>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	089b      	lsrs	r3, r3, #2
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d02a      	beq.n	8003eba <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d018      	beq.n	8003ea0 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	1c5a      	adds	r2, r3, #1
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d14f      	bne.n	8003f4a <I2C_Slave_ISR_IT+0x1f2>
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003eb0:	d04b      	beq.n	8003f4a <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 fb75 	bl	80045a2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003eb8:	e047      	b.n	8003f4a <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	08db      	lsrs	r3, r3, #3
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00a      	beq.n	8003edc <I2C_Slave_ISR_IT+0x184>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	08db      	lsrs	r3, r3, #3
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d004      	beq.n	8003edc <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003ed2:	6939      	ldr	r1, [r7, #16]
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f000 faa5 	bl	8004424 <I2C_ITAddrCplt>
 8003eda:	e037      	b.n	8003f4c <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	085b      	lsrs	r3, r3, #1
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d031      	beq.n	8003f4c <I2C_Slave_ISR_IT+0x1f4>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	085b      	lsrs	r3, r3, #1
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d02b      	beq.n	8003f4c <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d018      	beq.n	8003f30 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	781a      	ldrb	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f26:	3b01      	subs	r3, #1
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	851a      	strh	r2, [r3, #40]	; 0x28
 8003f2e:	e00d      	b.n	8003f4c <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f36:	d002      	beq.n	8003f3e <I2C_Slave_ISR_IT+0x1e6>
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d106      	bne.n	8003f4c <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f000 fb2f 	bl	80045a2 <I2C_ITSlaveSeqCplt>
 8003f44:	e002      	b.n	8003f4c <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003f46:	bf00      	nop
 8003f48:	e000      	b.n	8003f4c <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003f4a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b088      	sub	sp, #32
 8003f62:	af02      	add	r7, sp, #8
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d101      	bne.n	8003f78 <I2C_Master_ISR_DMA+0x1a>
 8003f74:	2302      	movs	r3, #2
 8003f76:	e0e1      	b.n	800413c <I2C_Master_ISR_DMA+0x1de>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	091b      	lsrs	r3, r3, #4
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d017      	beq.n	8003fbc <I2C_Master_ISR_DMA+0x5e>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	091b      	lsrs	r3, r3, #4
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d011      	beq.n	8003fbc <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2210      	movs	r2, #16
 8003f9e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa4:	f043 0204 	orr.w	r2, r3, #4
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003fac:	2112      	movs	r1, #18
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f001 f822 	bl	8004ff8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 fdb7 	bl	8004b28 <I2C_Flush_TXDR>
 8003fba:	e0ba      	b.n	8004132 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	09db      	lsrs	r3, r3, #7
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d072      	beq.n	80040ae <I2C_Master_ISR_DMA+0x150>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	099b      	lsrs	r3, r3, #6
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d06c      	beq.n	80040ae <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fe2:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d04e      	beq.n	800408c <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ffa:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004000:	b29b      	uxth	r3, r3
 8004002:	2bff      	cmp	r3, #255	; 0xff
 8004004:	d906      	bls.n	8004014 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	22ff      	movs	r2, #255	; 0xff
 800400a:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800400c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004010:	617b      	str	r3, [r7, #20]
 8004012:	e010      	b.n	8004036 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004022:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004026:	d003      	beq.n	8004030 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	e002      	b.n	8004036 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004030:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004034:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403a:	b2da      	uxtb	r2, r3
 800403c:	8a79      	ldrh	r1, [r7, #18]
 800403e:	2300      	movs	r3, #0
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 ffa9 	bl	8004f9c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404e:	b29a      	uxth	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	b29a      	uxth	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b22      	cmp	r3, #34	; 0x22
 8004066:	d108      	bne.n	800407a <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004076:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004078:	e05b      	b.n	8004132 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004088:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800408a:	e052      	b.n	8004132 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004096:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800409a:	d003      	beq.n	80040a4 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 fa43 	bl	8004528 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80040a2:	e046      	b.n	8004132 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80040a4:	2140      	movs	r1, #64	; 0x40
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 fc7e 	bl	80049a8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80040ac:	e041      	b.n	8004132 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	099b      	lsrs	r3, r3, #6
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d029      	beq.n	800410e <I2C_Master_ISR_DMA+0x1b0>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	099b      	lsrs	r3, r3, #6
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d023      	beq.n	800410e <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d119      	bne.n	8004104 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040de:	d027      	beq.n	8004130 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040e8:	d108      	bne.n	80040fc <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040f8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80040fa:	e019      	b.n	8004130 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 fa13 	bl	8004528 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004102:	e015      	b.n	8004130 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004104:	2140      	movs	r1, #64	; 0x40
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 fc4e 	bl	80049a8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800410c:	e010      	b.n	8004130 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	095b      	lsrs	r3, r3, #5
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00b      	beq.n	8004132 <I2C_Master_ISR_DMA+0x1d4>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	095b      	lsrs	r3, r3, #5
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d005      	beq.n	8004132 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004126:	68b9      	ldr	r1, [r7, #8]
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 fa77 	bl	800461c <I2C_ITMasterCplt>
 800412e:	e000      	b.n	8004132 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8004130:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	613b      	str	r3, [r7, #16]
  uint32_t treatdmanack = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <I2C_Slave_ISR_DMA+0x24>
 8004164:	2302      	movs	r3, #2
 8004166:	e0b1      	b.n	80042cc <I2C_Slave_ISR_DMA+0x188>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	095b      	lsrs	r3, r3, #5
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b00      	cmp	r3, #0
 800417a:	d009      	beq.n	8004190 <I2C_Slave_ISR_DMA+0x4c>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	095b      	lsrs	r3, r3, #5
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b00      	cmp	r3, #0
 8004186:	d003      	beq.n	8004190 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004188:	68b9      	ldr	r1, [r7, #8]
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 fae2 	bl	8004754 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	091b      	lsrs	r3, r3, #4
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 8082 	beq.w	80042a2 <I2C_Slave_ISR_DMA+0x15e>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	091b      	lsrs	r3, r3, #4
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d07b      	beq.n	80042a2 <I2C_Slave_ISR_DMA+0x15e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	0b9b      	lsrs	r3, r3, #14
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d105      	bne.n	80041c2 <I2C_Slave_ISR_DMA+0x7e>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	0bdb      	lsrs	r3, r3, #15
 80041ba:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d068      	beq.n	8004294 <I2C_Slave_ISR_DMA+0x150>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00d      	beq.n	80041e6 <I2C_Slave_ISR_DMA+0xa2>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	0bdb      	lsrs	r3, r3, #15
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d007      	beq.n	80041e6 <I2C_Slave_ISR_DMA+0xa2>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <I2C_Slave_ISR_DMA+0xa2>
          {
            treatdmanack = 1U;
 80041e2:	2301      	movs	r3, #1
 80041e4:	617b      	str	r3, [r7, #20]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00d      	beq.n	800420a <I2C_Slave_ISR_DMA+0xc6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	0b9b      	lsrs	r3, r3, #14
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d007      	beq.n	800420a <I2C_Slave_ISR_DMA+0xc6>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <I2C_Slave_ISR_DMA+0xc6>
          {
            treatdmanack = 1U;
 8004206:	2301      	movs	r3, #1
 8004208:	617b      	str	r3, [r7, #20]
          }
        }
      }

      if (treatdmanack == 1U)
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d128      	bne.n	8004262 <I2C_Slave_ISR_DMA+0x11e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b28      	cmp	r3, #40	; 0x28
 800421a:	d108      	bne.n	800422e <I2C_Slave_ISR_DMA+0xea>
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004222:	d104      	bne.n	800422e <I2C_Slave_ISR_DMA+0xea>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004224:	68b9      	ldr	r1, [r7, #8]
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 fb6a 	bl	8004900 <I2C_ITListenCplt>
 800422c:	e031      	b.n	8004292 <I2C_Slave_ISR_DMA+0x14e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b29      	cmp	r3, #41	; 0x29
 8004238:	d10e      	bne.n	8004258 <I2C_Slave_ISR_DMA+0x114>
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004240:	d00a      	beq.n	8004258 <I2C_Slave_ISR_DMA+0x114>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2210      	movs	r2, #16
 8004248:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 fc6c 	bl	8004b28 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 f9a6 	bl	80045a2 <I2C_ITSlaveSeqCplt>
 8004256:	e01c      	b.n	8004292 <I2C_Slave_ISR_DMA+0x14e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2210      	movs	r2, #16
 800425e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004260:	e01d      	b.n	800429e <I2C_Slave_ISR_DMA+0x15a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2210      	movs	r2, #16
 8004268:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426e:	f043 0204 	orr.w	r2, r3, #4
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	645a      	str	r2, [r3, #68]	; 0x44

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <I2C_Slave_ISR_DMA+0x140>
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004282:	d10c      	bne.n	800429e <I2C_Slave_ISR_DMA+0x15a>
        {
          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004288:	4619      	mov	r1, r3
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 fb8c 	bl	80049a8 <I2C_ITError>
      if (treatdmanack == 1U)
 8004290:	e005      	b.n	800429e <I2C_Slave_ISR_DMA+0x15a>
 8004292:	e004      	b.n	800429e <I2C_Slave_ISR_DMA+0x15a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2210      	movs	r2, #16
 800429a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800429c:	e011      	b.n	80042c2 <I2C_Slave_ISR_DMA+0x17e>
      if (treatdmanack == 1U)
 800429e:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80042a0:	e00f      	b.n	80042c2 <I2C_Slave_ISR_DMA+0x17e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	08db      	lsrs	r3, r3, #3
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d009      	beq.n	80042c2 <I2C_Slave_ISR_DMA+0x17e>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	08db      	lsrs	r3, r3, #3
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <I2C_Slave_ISR_DMA+0x17e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80042ba:	68b9      	ldr	r1, [r7, #8]
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 f8b1 	bl	8004424 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3718      	adds	r7, #24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af02      	add	r7, sp, #8
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	4608      	mov	r0, r1
 80042de:	4611      	mov	r1, r2
 80042e0:	461a      	mov	r2, r3
 80042e2:	4603      	mov	r3, r0
 80042e4:	817b      	strh	r3, [r7, #10]
 80042e6:	460b      	mov	r3, r1
 80042e8:	813b      	strh	r3, [r7, #8]
 80042ea:	4613      	mov	r3, r2
 80042ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80042ee:	88fb      	ldrh	r3, [r7, #6]
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	8979      	ldrh	r1, [r7, #10]
 80042f4:	4b20      	ldr	r3, [pc, #128]	; (8004378 <I2C_RequestMemoryWrite+0xa4>)
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 fe4d 	bl	8004f9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004302:	69fa      	ldr	r2, [r7, #28]
 8004304:	69b9      	ldr	r1, [r7, #24]
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 fd66 	bl	8004dd8 <I2C_WaitOnTXISFlagUntilTimeout>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e02c      	b.n	8004370 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004316:	88fb      	ldrh	r3, [r7, #6]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d105      	bne.n	8004328 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800431c:	893b      	ldrh	r3, [r7, #8]
 800431e:	b2da      	uxtb	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	629a      	str	r2, [r3, #40]	; 0x28
 8004326:	e015      	b.n	8004354 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004328:	893b      	ldrh	r3, [r7, #8]
 800432a:	0a1b      	lsrs	r3, r3, #8
 800432c:	b29b      	uxth	r3, r3
 800432e:	b2da      	uxtb	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004336:	69fa      	ldr	r2, [r7, #28]
 8004338:	69b9      	ldr	r1, [r7, #24]
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 fd4c 	bl	8004dd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e012      	b.n	8004370 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800434a:	893b      	ldrh	r3, [r7, #8]
 800434c:	b2da      	uxtb	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	2200      	movs	r2, #0
 800435c:	2180      	movs	r1, #128	; 0x80
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 fcfa 	bl	8004d58 <I2C_WaitOnFlagUntilTimeout>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e000      	b.n	8004370 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	80002000 	.word	0x80002000

0800437c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af02      	add	r7, sp, #8
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	4608      	mov	r0, r1
 8004386:	4611      	mov	r1, r2
 8004388:	461a      	mov	r2, r3
 800438a:	4603      	mov	r3, r0
 800438c:	817b      	strh	r3, [r7, #10]
 800438e:	460b      	mov	r3, r1
 8004390:	813b      	strh	r3, [r7, #8]
 8004392:	4613      	mov	r3, r2
 8004394:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004396:	88fb      	ldrh	r3, [r7, #6]
 8004398:	b2da      	uxtb	r2, r3
 800439a:	8979      	ldrh	r1, [r7, #10]
 800439c:	4b20      	ldr	r3, [pc, #128]	; (8004420 <I2C_RequestMemoryRead+0xa4>)
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	2300      	movs	r3, #0
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 fdfa 	bl	8004f9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043a8:	69fa      	ldr	r2, [r7, #28]
 80043aa:	69b9      	ldr	r1, [r7, #24]
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 fd13 	bl	8004dd8 <I2C_WaitOnTXISFlagUntilTimeout>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e02c      	b.n	8004416 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043bc:	88fb      	ldrh	r3, [r7, #6]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d105      	bne.n	80043ce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043c2:	893b      	ldrh	r3, [r7, #8]
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	629a      	str	r2, [r3, #40]	; 0x28
 80043cc:	e015      	b.n	80043fa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043ce:	893b      	ldrh	r3, [r7, #8]
 80043d0:	0a1b      	lsrs	r3, r3, #8
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043dc:	69fa      	ldr	r2, [r7, #28]
 80043de:	69b9      	ldr	r1, [r7, #24]
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 fcf9 	bl	8004dd8 <I2C_WaitOnTXISFlagUntilTimeout>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e012      	b.n	8004416 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043f0:	893b      	ldrh	r3, [r7, #8]
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	2200      	movs	r2, #0
 8004402:	2140      	movs	r1, #64	; 0x40
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 fca7 	bl	8004d58 <I2C_WaitOnFlagUntilTimeout>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e000      	b.n	8004416 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	80002000 	.word	0x80002000

08004424 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004434:	b2db      	uxtb	r3, r3
 8004436:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800443a:	2b28      	cmp	r3, #40	; 0x28
 800443c:	d168      	bne.n	8004510 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	0c1b      	lsrs	r3, r3, #16
 8004446:	b2db      	uxtb	r3, r3
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	0c1b      	lsrs	r3, r3, #16
 8004456:	b29b      	uxth	r3, r3
 8004458:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800445c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	b29b      	uxth	r3, r3
 8004466:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800446a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	b29b      	uxth	r3, r3
 8004474:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004478:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	2b02      	cmp	r3, #2
 8004480:	d137      	bne.n	80044f2 <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8004482:	897b      	ldrh	r3, [r7, #10]
 8004484:	09db      	lsrs	r3, r3, #7
 8004486:	b29a      	uxth	r2, r3
 8004488:	89bb      	ldrh	r3, [r7, #12]
 800448a:	4053      	eors	r3, r2
 800448c:	b29b      	uxth	r3, r3
 800448e:	f003 0306 	and.w	r3, r3, #6
 8004492:	2b00      	cmp	r3, #0
 8004494:	d11c      	bne.n	80044d0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004496:	897b      	ldrh	r3, [r7, #10]
 8004498:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800449e:	1c5a      	adds	r2, r3, #1
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d139      	bne.n	8004520 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2208      	movs	r2, #8
 80044b8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80044c2:	89ba      	ldrh	r2, [r7, #12]
 80044c4:	7bfb      	ldrb	r3, [r7, #15]
 80044c6:	4619      	mov	r1, r3
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7ff fc05 	bl	8003cd8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80044ce:	e027      	b.n	8004520 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 80044d0:	893b      	ldrh	r3, [r7, #8]
 80044d2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80044d4:	2104      	movs	r1, #4
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 fdfc 	bl	80050d4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80044e4:	89ba      	ldrh	r2, [r7, #12]
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
 80044e8:	4619      	mov	r1, r3
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7ff fbf4 	bl	8003cd8 <HAL_I2C_AddrCallback>
}
 80044f0:	e016      	b.n	8004520 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80044f2:	2104      	movs	r1, #4
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 fded 	bl	80050d4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004502:	89ba      	ldrh	r2, [r7, #12]
 8004504:	7bfb      	ldrb	r3, [r7, #15]
 8004506:	4619      	mov	r1, r3
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7ff fbe5 	bl	8003cd8 <HAL_I2C_AddrCallback>
}
 800450e:	e007      	b.n	8004520 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2208      	movs	r2, #8
 8004516:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004520:	bf00      	nop
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b21      	cmp	r3, #33	; 0x21
 8004542:	d115      	bne.n	8004570 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2211      	movs	r2, #17
 8004550:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004558:	2101      	movs	r1, #1
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 fdba 	bl	80050d4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7ff fb8d 	bl	8003c88 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800456e:	e014      	b.n	800459a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2220      	movs	r2, #32
 8004574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2212      	movs	r2, #18
 800457c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004584:	2102      	movs	r1, #2
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fda4 	bl	80050d4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7ff fb81 	bl	8003c9c <HAL_I2C_MasterRxCpltCallback>
}
 800459a:	bf00      	nop
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b082      	sub	sp, #8
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b29      	cmp	r3, #41	; 0x29
 80045bc:	d112      	bne.n	80045e4 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2228      	movs	r2, #40	; 0x28
 80045c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2221      	movs	r2, #33	; 0x21
 80045ca:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80045cc:	2101      	movs	r1, #1
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fd80 	bl	80050d4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f7ff fb67 	bl	8003cb0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80045e2:	e017      	b.n	8004614 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b2a      	cmp	r3, #42	; 0x2a
 80045ee:	d111      	bne.n	8004614 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2228      	movs	r2, #40	; 0x28
 80045f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2222      	movs	r2, #34	; 0x22
 80045fc:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80045fe:	2102      	movs	r1, #2
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 fd67 	bl	80050d4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7ff fb58 	bl	8003cc4 <HAL_I2C_SlaveRxCpltCallback>
}
 8004614:	bf00      	nop
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2220      	movs	r2, #32
 800462c:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6859      	ldr	r1, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	4b44      	ldr	r3, [pc, #272]	; (800474c <I2C_ITMasterCplt+0x130>)
 800463a:	400b      	ands	r3, r1
 800463c:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a40      	ldr	r2, [pc, #256]	; (8004750 <I2C_ITMasterCplt+0x134>)
 800464e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	091b      	lsrs	r3, r3, #4
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b00      	cmp	r3, #0
 800465a:	d009      	beq.n	8004670 <I2C_ITMasterCplt+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2210      	movs	r2, #16
 8004662:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004668:	f043 0204 	orr.w	r2, r3, #4
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 fa59 	bl	8004b28 <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004676:	2103      	movs	r1, #3
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 fd2b 	bl	80050d4 <I2C_Disable_IRQ>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004682:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b60      	cmp	r3, #96	; 0x60
 800468e:	d002      	beq.n	8004696 <I2C_ITMasterCplt+0x7a>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d006      	beq.n	80046a4 <I2C_ITMasterCplt+0x88>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469a:	4619      	mov	r1, r3
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 f983 	bl	80049a8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80046a2:	e04e      	b.n	8004742 <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b21      	cmp	r3, #33	; 0x21
 80046ae:	d121      	bne.n	80046f4 <I2C_ITMasterCplt+0xd8>
    hi2c->State = HAL_I2C_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b40      	cmp	r3, #64	; 0x40
 80046c2:	d10b      	bne.n	80046dc <I2C_ITMasterCplt+0xc0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7ff fb17 	bl	8003d08 <HAL_I2C_MemTxCpltCallback>
}
 80046da:	e032      	b.n	8004742 <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7ff facb 	bl	8003c88 <HAL_I2C_MasterTxCpltCallback>
}
 80046f2:	e026      	b.n	8004742 <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b22      	cmp	r3, #34	; 0x22
 80046fe:	d120      	bne.n	8004742 <I2C_ITMasterCplt+0x126>
    hi2c->State = HAL_I2C_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2220      	movs	r2, #32
 8004704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b40      	cmp	r3, #64	; 0x40
 8004712:	d10b      	bne.n	800472c <I2C_ITMasterCplt+0x110>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7ff faf9 	bl	8003d1c <HAL_I2C_MemRxCpltCallback>
}
 800472a:	e00a      	b.n	8004742 <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f7ff faad 	bl	8003c9c <HAL_I2C_MasterRxCpltCallback>
}
 8004742:	bf00      	nop
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	fe00e800 	.word	0xfe00e800
 8004750:	ffff0000 	.word	0xffff0000

08004754 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2220      	movs	r2, #32
 8004770:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004772:	2107      	movs	r1, #7
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 fcad 	bl	80050d4 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004788:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6859      	ldr	r1, [r3, #4]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	4b58      	ldr	r3, [pc, #352]	; (80048f8 <I2C_ITSlaveCplt+0x1a4>)
 8004796:	400b      	ands	r3, r1
 8004798:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f9c4 	bl	8004b28 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	0b9b      	lsrs	r3, r3, #14
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00b      	beq.n	80047c4 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d018      	beq.n	80047e6 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	b29a      	uxth	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047c2:	e010      	b.n	80047e6 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	0bdb      	lsrs	r3, r3, #15
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00a      	beq.n	80047e6 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d006      	beq.n	80047e6 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	089b      	lsrs	r3, r3, #2
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d020      	beq.n	8004834 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f023 0304 	bic.w	r3, r3, #4
 80047f8:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	b2d2      	uxtb	r2, r2
 8004806:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	1c5a      	adds	r2, r3, #1
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00c      	beq.n	8004834 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481e:	3b01      	subs	r3, #1
 8004820:	b29a      	uxth	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482a:	b29b      	uxth	r3, r3
 800482c:	3b01      	subs	r3, #1
 800482e:	b29a      	uxth	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004838:	b29b      	uxth	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d005      	beq.n	800484a <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004842:	f043 0204 	orr.w	r2, r3, #4
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004862:	2b00      	cmp	r3, #0
 8004864:	d010      	beq.n	8004888 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486a:	4619      	mov	r1, r3
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 f89b 	bl	80049a8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b28      	cmp	r3, #40	; 0x28
 800487c:	d138      	bne.n	80048f0 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800487e:	68f9      	ldr	r1, [r7, #12]
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f83d 	bl	8004900 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004886:	e033      	b.n	80048f0 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004890:	d011      	beq.n	80048b6 <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7ff fe85 	bl	80045a2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a18      	ldr	r2, [pc, #96]	; (80048fc <I2C_ITSlaveCplt+0x1a8>)
 800489c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7ff fa20 	bl	8003cf4 <HAL_I2C_ListenCpltCallback>
}
 80048b4:	e01c      	b.n	80048f0 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b22      	cmp	r3, #34	; 0x22
 80048c0:	d10b      	bne.n	80048da <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2220      	movs	r2, #32
 80048c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7ff f9f6 	bl	8003cc4 <HAL_I2C_SlaveRxCpltCallback>
}
 80048d8:	e00a      	b.n	80048f0 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7ff f9e0 	bl	8003cb0 <HAL_I2C_SlaveTxCpltCallback>
}
 80048f0:	bf00      	nop
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	fe00e800 	.word	0xfe00e800
 80048fc:	ffff0000 	.word	0xffff0000

08004900 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a25      	ldr	r2, [pc, #148]	; (80049a4 <I2C_ITListenCplt+0xa4>)
 800490e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2220      	movs	r2, #32
 800491a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	089b      	lsrs	r3, r3, #2
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b00      	cmp	r3, #0
 8004936:	d022      	beq.n	800497e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004954:	2b00      	cmp	r3, #0
 8004956:	d012      	beq.n	800497e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495c:	3b01      	subs	r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004968:	b29b      	uxth	r3, r3
 800496a:	3b01      	subs	r3, #1
 800496c:	b29a      	uxth	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004976:	f043 0204 	orr.w	r2, r3, #4
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800497e:	2107      	movs	r1, #7
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 fba7 	bl	80050d4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2210      	movs	r2, #16
 800498c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7ff f9ac 	bl	8003cf4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800499c:	bf00      	nop
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	ffff0000 	.word	0xffff0000

080049a8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049b8:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a55      	ldr	r2, [pc, #340]	; (8004b1c <I2C_ITError+0x174>)
 80049c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	431a      	orrs	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80049da:	7bfb      	ldrb	r3, [r7, #15]
 80049dc:	2b28      	cmp	r3, #40	; 0x28
 80049de:	d005      	beq.n	80049ec <I2C_ITError+0x44>
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
 80049e2:	2b29      	cmp	r3, #41	; 0x29
 80049e4:	d002      	beq.n	80049ec <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
 80049e8:	2b2a      	cmp	r3, #42	; 0x2a
 80049ea:	d10e      	bne.n	8004a0a <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80049ec:	2103      	movs	r1, #3
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 fb70 	bl	80050d4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2228      	movs	r2, #40	; 0x28
 80049f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a46      	ldr	r2, [pc, #280]	; (8004b20 <I2C_ITError+0x178>)
 8004a06:	635a      	str	r2, [r3, #52]	; 0x34
 8004a08:	e013      	b.n	8004a32 <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a0a:	2107      	movs	r1, #7
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 fb61 	bl	80050d4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b60      	cmp	r3, #96	; 0x60
 8004a1c:	d003      	beq.n	8004a26 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2220      	movs	r2, #32
 8004a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a40:	d123      	bne.n	8004a8a <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a50:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d05c      	beq.n	8004b14 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5e:	4a31      	ldr	r2, [pc, #196]	; (8004b24 <I2C_ITError+0x17c>)
 8004a60:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fe f928 	bl	8002cc4 <HAL_DMA_Abort_IT>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d04c      	beq.n	8004b14 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a84:	4610      	mov	r0, r2
 8004a86:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a88:	e044      	b.n	8004b14 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a98:	d123      	bne.n	8004ae2 <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004aa8:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d030      	beq.n	8004b14 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab6:	4a1b      	ldr	r2, [pc, #108]	; (8004b24 <I2C_ITError+0x17c>)
 8004ab8:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fe f8fc 	bl	8002cc4 <HAL_DMA_Abort_IT>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d020      	beq.n	8004b14 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004adc:	4610      	mov	r0, r2
 8004ade:	4798      	blx	r3
}
 8004ae0:	e018      	b.n	8004b14 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b60      	cmp	r3, #96	; 0x60
 8004aec:	d10b      	bne.n	8004b06 <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7ff f920 	bl	8003d44 <HAL_I2C_AbortCpltCallback>
}
 8004b04:	e006      	b.n	8004b14 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7ff f90e 	bl	8003d30 <HAL_I2C_ErrorCallback>
}
 8004b14:	bf00      	nop
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	ffff0000 	.word	0xffff0000
 8004b20:	08003d59 	.word	0x08003d59
 8004b24:	08004d11 	.word	0x08004d11

08004b28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d103      	bne.n	8004b46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2200      	movs	r2, #0
 8004b44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d007      	beq.n	8004b64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699a      	ldr	r2, [r3, #24]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0201 	orr.w	r2, r2, #1
 8004b62:	619a      	str	r2, [r3, #24]
  }
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b8c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d104      	bne.n	8004ba2 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004b98:	2112      	movs	r1, #18
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f000 fa2c 	bl	8004ff8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004ba0:	e02d      	b.n	8004bfe <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8004baa:	441a      	add	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	2bff      	cmp	r3, #255	; 0xff
 8004bb8:	d903      	bls.n	8004bc2 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	22ff      	movs	r2, #255	; 0xff
 8004bbe:	851a      	strh	r2, [r3, #40]	; 0x28
 8004bc0:	e004      	b.n	8004bcc <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	3328      	adds	r3, #40	; 0x28
 8004bdc:	461a      	mov	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be2:	f7fe f80f 	bl	8002c04 <HAL_DMA_Start_IT>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d004      	beq.n	8004bf6 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004bec:	2110      	movs	r1, #16
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f7ff feda 	bl	80049a8 <I2C_ITError>
}
 8004bf4:	e003      	b.n	8004bfe <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004bf6:	2112      	movs	r1, #18
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 f9fd 	bl	8004ff8 <I2C_Enable_IRQ>
}
 8004bfe:	bf00      	nop
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b084      	sub	sp, #16
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c22:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d104      	bne.n	8004c38 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004c2e:	2112      	movs	r1, #18
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 f9e1 	bl	8004ff8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004c36:	e02d      	b.n	8004c94 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8004c40:	441a      	add	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	2bff      	cmp	r3, #255	; 0xff
 8004c4e:	d903      	bls.n	8004c58 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	22ff      	movs	r2, #255	; 0xff
 8004c54:	851a      	strh	r2, [r3, #40]	; 0x28
 8004c56:	e004      	b.n	8004c62 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3324      	adds	r3, #36	; 0x24
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	461a      	mov	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c78:	f7fd ffc4 	bl	8002c04 <HAL_DMA_Start_IT>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d004      	beq.n	8004c8c <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004c82:	2110      	movs	r1, #16
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f7ff fe8f 	bl	80049a8 <I2C_ITError>
}
 8004c8a:	e003      	b.n	8004c94 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004c8c:	2112      	movs	r1, #18
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 f9b2 	bl	8004ff8 <I2C_Enable_IRQ>
}
 8004c94:	bf00      	nop
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cac:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d007      	beq.n	8004cc6 <I2C_DMAError+0x2a>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d007      	beq.n	8004cde <I2C_DMAError+0x42>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7fe f99c 	bl	800301c <HAL_DMA_GetError>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d00e      	beq.n	8004d08 <I2C_DMAError+0x6c>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00b      	beq.n	8004d08 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cfe:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004d00:	2110      	movs	r1, #16
 8004d02:	68b8      	ldr	r0, [r7, #8]
 8004d04:	f7ff fe50 	bl	80049a8 <I2C_ITError>
  }
}
 8004d08:	bf00      	nop
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d22:	2200      	movs	r2, #0
 8004d24:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b60      	cmp	r3, #96	; 0x60
 8004d38:	d107      	bne.n	8004d4a <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f7fe fffe 	bl	8003d44 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d48:	e002      	b.n	8004d50 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f7fe fff0 	bl	8003d30 <HAL_I2C_ErrorCallback>
}
 8004d50:	bf00      	nop
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	603b      	str	r3, [r7, #0]
 8004d64:	4613      	mov	r3, r2
 8004d66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d68:	e022      	b.n	8004db0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d70:	d01e      	beq.n	8004db0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d72:	f7fd f8b9 	bl	8001ee8 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d302      	bcc.n	8004d88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d113      	bne.n	8004db0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8c:	f043 0220 	orr.w	r2, r3, #32
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e00f      	b.n	8004dd0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699a      	ldr	r2, [r3, #24]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	4013      	ands	r3, r2
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	bf0c      	ite	eq
 8004dc0:	2301      	moveq	r3, #1
 8004dc2:	2300      	movne	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	79fb      	ldrb	r3, [r7, #7]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d0cd      	beq.n	8004d6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004de4:	e02c      	b.n	8004e40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	68b9      	ldr	r1, [r7, #8]
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f000 f870 	bl	8004ed0 <I2C_IsAcknowledgeFailed>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e02a      	b.n	8004e50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e00:	d01e      	beq.n	8004e40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e02:	f7fd f871 	bl	8001ee8 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d302      	bcc.n	8004e18 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d113      	bne.n	8004e40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1c:	f043 0220 	orr.w	r2, r3, #32
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e007      	b.n	8004e50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d1cb      	bne.n	8004de6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e64:	e028      	b.n	8004eb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	68b9      	ldr	r1, [r7, #8]
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f000 f830 	bl	8004ed0 <I2C_IsAcknowledgeFailed>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e026      	b.n	8004ec8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e7a:	f7fd f835 	bl	8001ee8 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d302      	bcc.n	8004e90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d113      	bne.n	8004eb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e94:	f043 0220 	orr.w	r2, r3, #32
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e007      	b.n	8004ec8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	f003 0320 	and.w	r3, r3, #32
 8004ec2:	2b20      	cmp	r3, #32
 8004ec4:	d1cf      	bne.n	8004e66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	f003 0310 	and.w	r3, r3, #16
 8004ee6:	2b10      	cmp	r3, #16
 8004ee8:	d151      	bne.n	8004f8e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004eea:	e022      	b.n	8004f32 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef2:	d01e      	beq.n	8004f32 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef4:	f7fc fff8 	bl	8001ee8 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d302      	bcc.n	8004f0a <I2C_IsAcknowledgeFailed+0x3a>
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d113      	bne.n	8004f32 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0e:	f043 0220 	orr.w	r2, r3, #32
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e02e      	b.n	8004f90 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	f003 0320 	and.w	r3, r3, #32
 8004f3c:	2b20      	cmp	r3, #32
 8004f3e:	d1d5      	bne.n	8004eec <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2210      	movs	r2, #16
 8004f46:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f7ff fde9 	bl	8004b28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6859      	ldr	r1, [r3, #4]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	4b0d      	ldr	r3, [pc, #52]	; (8004f98 <I2C_IsAcknowledgeFailed+0xc8>)
 8004f62:	400b      	ands	r3, r1
 8004f64:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6a:	f043 0204 	orr.w	r2, r3, #4
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e000      	b.n	8004f90 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	fe00e800 	.word	0xfe00e800

08004f9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	607b      	str	r3, [r7, #4]
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	817b      	strh	r3, [r7, #10]
 8004faa:	4613      	mov	r3, r2
 8004fac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	0d5b      	lsrs	r3, r3, #21
 8004fb8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004fbc:	4b0d      	ldr	r3, [pc, #52]	; (8004ff4 <I2C_TransferConfig+0x58>)
 8004fbe:	430b      	orrs	r3, r1
 8004fc0:	43db      	mvns	r3, r3
 8004fc2:	ea02 0103 	and.w	r1, r2, r3
 8004fc6:	897b      	ldrh	r3, [r7, #10]
 8004fc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004fcc:	7a7b      	ldrb	r3, [r7, #9]
 8004fce:	041b      	lsls	r3, r3, #16
 8004fd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004fe6:	bf00      	nop
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	03ff63ff 	.word	0x03ff63ff

08004ff8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	460b      	mov	r3, r1
 8005002:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005004:	2300      	movs	r3, #0
 8005006:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800500c:	4a2f      	ldr	r2, [pc, #188]	; (80050cc <I2C_Enable_IRQ+0xd4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d004      	beq.n	800501c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005016:	4a2e      	ldr	r2, [pc, #184]	; (80050d0 <I2C_Enable_IRQ+0xd8>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d124      	bne.n	8005066 <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800501c:	887b      	ldrh	r3, [r7, #2]
 800501e:	f003 0304 	and.w	r3, r3, #4
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800502c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800502e:	887b      	ldrh	r3, [r7, #2]
 8005030:	f003 0311 	and.w	r3, r3, #17
 8005034:	2b11      	cmp	r3, #17
 8005036:	d103      	bne.n	8005040 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800503e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8005040:	887b      	ldrh	r3, [r7, #2]
 8005042:	f003 0312 	and.w	r3, r3, #18
 8005046:	2b12      	cmp	r3, #18
 8005048:	d103      	bne.n	8005052 <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f043 0320 	orr.w	r3, r3, #32
 8005050:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8005052:	887b      	ldrh	r3, [r7, #2]
 8005054:	f003 0312 	and.w	r3, r3, #18
 8005058:	2b12      	cmp	r3, #18
 800505a:	d128      	bne.n	80050ae <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005062:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8005064:	e023      	b.n	80050ae <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005066:	887b      	ldrh	r3, [r7, #2]
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005076:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005078:	887b      	ldrh	r3, [r7, #2]
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8005088:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800508a:	887b      	ldrh	r3, [r7, #2]
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d003      	beq.n	800509c <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800509a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800509c:	887b      	ldrh	r3, [r7, #2]
 800509e:	f003 0312 	and.w	r3, r3, #18
 80050a2:	2b12      	cmp	r3, #18
 80050a4:	d103      	bne.n	80050ae <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f043 0320 	orr.w	r3, r3, #32
 80050ac:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	6819      	ldr	r1, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	601a      	str	r2, [r3, #0]
}
 80050be:	bf00      	nop
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	08003f5f 	.word	0x08003f5f
 80050d0:	08004145 	.word	0x08004145

080050d4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	460b      	mov	r3, r1
 80050de:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80050e4:	887b      	ldrh	r3, [r7, #2]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00f      	beq.n	800510e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80050f4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005102:	2b28      	cmp	r3, #40	; 0x28
 8005104:	d003      	beq.n	800510e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800510c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800510e:	887b      	ldrh	r3, [r7, #2]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00f      	beq.n	8005138 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800511e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005126:	b2db      	uxtb	r3, r3
 8005128:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800512c:	2b28      	cmp	r3, #40	; 0x28
 800512e:	d003      	beq.n	8005138 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005136:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005138:	887b      	ldrh	r3, [r7, #2]
 800513a:	f003 0304 	and.w	r3, r3, #4
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005148:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800514a:	887b      	ldrh	r3, [r7, #2]
 800514c:	f003 0311 	and.w	r3, r3, #17
 8005150:	2b11      	cmp	r3, #17
 8005152:	d103      	bne.n	800515c <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800515a:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800515c:	887b      	ldrh	r3, [r7, #2]
 800515e:	f003 0312 	and.w	r3, r3, #18
 8005162:	2b12      	cmp	r3, #18
 8005164:	d103      	bne.n	800516e <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f043 0320 	orr.w	r3, r3, #32
 800516c:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800516e:	887b      	ldrh	r3, [r7, #2]
 8005170:	f003 0312 	and.w	r3, r3, #18
 8005174:	2b12      	cmp	r3, #18
 8005176:	d103      	bne.n	8005180 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800517e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6819      	ldr	r1, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	43da      	mvns	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	400a      	ands	r2, r1
 8005190:	601a      	str	r2, [r3, #0]
}
 8005192:	bf00      	nop
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b20      	cmp	r3, #32
 80051b2:	d138      	bne.n	8005226 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d101      	bne.n	80051c2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80051be:	2302      	movs	r3, #2
 80051c0:	e032      	b.n	8005228 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2224      	movs	r2, #36	; 0x24
 80051ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 0201 	bic.w	r2, r2, #1
 80051e0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051f0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6819      	ldr	r1, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	683a      	ldr	r2, [r7, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f042 0201 	orr.w	r2, r2, #1
 8005210:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2220      	movs	r2, #32
 8005216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005222:	2300      	movs	r3, #0
 8005224:	e000      	b.n	8005228 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005226:	2302      	movs	r3, #2
  }
}
 8005228:	4618      	mov	r0, r3
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b20      	cmp	r3, #32
 8005248:	d139      	bne.n	80052be <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005254:	2302      	movs	r3, #2
 8005256:	e033      	b.n	80052c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2224      	movs	r2, #36	; 0x24
 8005264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f022 0201 	bic.w	r2, r2, #1
 8005276:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005286:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	021b      	lsls	r3, r3, #8
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f042 0201 	orr.w	r2, r2, #1
 80052a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2220      	movs	r2, #32
 80052ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	e000      	b.n	80052c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80052be:	2302      	movs	r3, #2
  }
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3714      	adds	r7, #20
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052d0:	4b05      	ldr	r3, [pc, #20]	; (80052e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a04      	ldr	r2, [pc, #16]	; (80052e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80052d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052da:	6013      	str	r3, [r2, #0]
}
 80052dc:	bf00      	nop
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	40007000 	.word	0x40007000

080052ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80052f2:	2300      	movs	r3, #0
 80052f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80052f6:	4b23      	ldr	r3, [pc, #140]	; (8005384 <HAL_PWREx_EnableOverDrive+0x98>)
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	4a22      	ldr	r2, [pc, #136]	; (8005384 <HAL_PWREx_EnableOverDrive+0x98>)
 80052fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005300:	6413      	str	r3, [r2, #64]	; 0x40
 8005302:	4b20      	ldr	r3, [pc, #128]	; (8005384 <HAL_PWREx_EnableOverDrive+0x98>)
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800530a:	603b      	str	r3, [r7, #0]
 800530c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800530e:	4b1e      	ldr	r3, [pc, #120]	; (8005388 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a1d      	ldr	r2, [pc, #116]	; (8005388 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005318:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800531a:	f7fc fde5 	bl	8001ee8 <HAL_GetTick>
 800531e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005320:	e009      	b.n	8005336 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005322:	f7fc fde1 	bl	8001ee8 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005330:	d901      	bls.n	8005336 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e022      	b.n	800537c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005336:	4b14      	ldr	r3, [pc, #80]	; (8005388 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800533e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005342:	d1ee      	bne.n	8005322 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005344:	4b10      	ldr	r3, [pc, #64]	; (8005388 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a0f      	ldr	r2, [pc, #60]	; (8005388 <HAL_PWREx_EnableOverDrive+0x9c>)
 800534a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800534e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005350:	f7fc fdca 	bl	8001ee8 <HAL_GetTick>
 8005354:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005356:	e009      	b.n	800536c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005358:	f7fc fdc6 	bl	8001ee8 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005366:	d901      	bls.n	800536c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e007      	b.n	800537c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800536c:	4b06      	ldr	r3, [pc, #24]	; (8005388 <HAL_PWREx_EnableOverDrive+0x9c>)
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005374:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005378:	d1ee      	bne.n	8005358 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3708      	adds	r7, #8
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	40023800 	.word	0x40023800
 8005388:	40007000 	.word	0x40007000

0800538c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005394:	2300      	movs	r3, #0
 8005396:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e291      	b.n	80058c6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f000 8087 	beq.w	80054be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80053b0:	4b96      	ldr	r3, [pc, #600]	; (800560c <HAL_RCC_OscConfig+0x280>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f003 030c 	and.w	r3, r3, #12
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	d00c      	beq.n	80053d6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053bc:	4b93      	ldr	r3, [pc, #588]	; (800560c <HAL_RCC_OscConfig+0x280>)
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f003 030c 	and.w	r3, r3, #12
 80053c4:	2b08      	cmp	r3, #8
 80053c6:	d112      	bne.n	80053ee <HAL_RCC_OscConfig+0x62>
 80053c8:	4b90      	ldr	r3, [pc, #576]	; (800560c <HAL_RCC_OscConfig+0x280>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053d4:	d10b      	bne.n	80053ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d6:	4b8d      	ldr	r3, [pc, #564]	; (800560c <HAL_RCC_OscConfig+0x280>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d06c      	beq.n	80054bc <HAL_RCC_OscConfig+0x130>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d168      	bne.n	80054bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e26b      	b.n	80058c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053f6:	d106      	bne.n	8005406 <HAL_RCC_OscConfig+0x7a>
 80053f8:	4b84      	ldr	r3, [pc, #528]	; (800560c <HAL_RCC_OscConfig+0x280>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a83      	ldr	r2, [pc, #524]	; (800560c <HAL_RCC_OscConfig+0x280>)
 80053fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005402:	6013      	str	r3, [r2, #0]
 8005404:	e02e      	b.n	8005464 <HAL_RCC_OscConfig+0xd8>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10c      	bne.n	8005428 <HAL_RCC_OscConfig+0x9c>
 800540e:	4b7f      	ldr	r3, [pc, #508]	; (800560c <HAL_RCC_OscConfig+0x280>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a7e      	ldr	r2, [pc, #504]	; (800560c <HAL_RCC_OscConfig+0x280>)
 8005414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005418:	6013      	str	r3, [r2, #0]
 800541a:	4b7c      	ldr	r3, [pc, #496]	; (800560c <HAL_RCC_OscConfig+0x280>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a7b      	ldr	r2, [pc, #492]	; (800560c <HAL_RCC_OscConfig+0x280>)
 8005420:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005424:	6013      	str	r3, [r2, #0]
 8005426:	e01d      	b.n	8005464 <HAL_RCC_OscConfig+0xd8>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005430:	d10c      	bne.n	800544c <HAL_RCC_OscConfig+0xc0>
 8005432:	4b76      	ldr	r3, [pc, #472]	; (800560c <HAL_RCC_OscConfig+0x280>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a75      	ldr	r2, [pc, #468]	; (800560c <HAL_RCC_OscConfig+0x280>)
 8005438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	4b73      	ldr	r3, [pc, #460]	; (800560c <HAL_RCC_OscConfig+0x280>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a72      	ldr	r2, [pc, #456]	; (800560c <HAL_RCC_OscConfig+0x280>)
 8005444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005448:	6013      	str	r3, [r2, #0]
 800544a:	e00b      	b.n	8005464 <HAL_RCC_OscConfig+0xd8>
 800544c:	4b6f      	ldr	r3, [pc, #444]	; (800560c <HAL_RCC_OscConfig+0x280>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a6e      	ldr	r2, [pc, #440]	; (800560c <HAL_RCC_OscConfig+0x280>)
 8005452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005456:	6013      	str	r3, [r2, #0]
 8005458:	4b6c      	ldr	r3, [pc, #432]	; (800560c <HAL_RCC_OscConfig+0x280>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a6b      	ldr	r2, [pc, #428]	; (800560c <HAL_RCC_OscConfig+0x280>)
 800545e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d013      	beq.n	8005494 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800546c:	f7fc fd3c 	bl	8001ee8 <HAL_GetTick>
 8005470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005472:	e008      	b.n	8005486 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005474:	f7fc fd38 	bl	8001ee8 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b64      	cmp	r3, #100	; 0x64
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e21f      	b.n	80058c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005486:	4b61      	ldr	r3, [pc, #388]	; (800560c <HAL_RCC_OscConfig+0x280>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d0f0      	beq.n	8005474 <HAL_RCC_OscConfig+0xe8>
 8005492:	e014      	b.n	80054be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005494:	f7fc fd28 	bl	8001ee8 <HAL_GetTick>
 8005498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800549a:	e008      	b.n	80054ae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800549c:	f7fc fd24 	bl	8001ee8 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b64      	cmp	r3, #100	; 0x64
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e20b      	b.n	80058c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ae:	4b57      	ldr	r3, [pc, #348]	; (800560c <HAL_RCC_OscConfig+0x280>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1f0      	bne.n	800549c <HAL_RCC_OscConfig+0x110>
 80054ba:	e000      	b.n	80054be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d069      	beq.n	800559e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054ca:	4b50      	ldr	r3, [pc, #320]	; (800560c <HAL_RCC_OscConfig+0x280>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f003 030c 	and.w	r3, r3, #12
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00b      	beq.n	80054ee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054d6:	4b4d      	ldr	r3, [pc, #308]	; (800560c <HAL_RCC_OscConfig+0x280>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f003 030c 	and.w	r3, r3, #12
 80054de:	2b08      	cmp	r3, #8
 80054e0:	d11c      	bne.n	800551c <HAL_RCC_OscConfig+0x190>
 80054e2:	4b4a      	ldr	r3, [pc, #296]	; (800560c <HAL_RCC_OscConfig+0x280>)
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d116      	bne.n	800551c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ee:	4b47      	ldr	r3, [pc, #284]	; (800560c <HAL_RCC_OscConfig+0x280>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d005      	beq.n	8005506 <HAL_RCC_OscConfig+0x17a>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d001      	beq.n	8005506 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e1df      	b.n	80058c6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005506:	4b41      	ldr	r3, [pc, #260]	; (800560c <HAL_RCC_OscConfig+0x280>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	493d      	ldr	r1, [pc, #244]	; (800560c <HAL_RCC_OscConfig+0x280>)
 8005516:	4313      	orrs	r3, r2
 8005518:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800551a:	e040      	b.n	800559e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d023      	beq.n	800556c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005524:	4b39      	ldr	r3, [pc, #228]	; (800560c <HAL_RCC_OscConfig+0x280>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a38      	ldr	r2, [pc, #224]	; (800560c <HAL_RCC_OscConfig+0x280>)
 800552a:	f043 0301 	orr.w	r3, r3, #1
 800552e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005530:	f7fc fcda 	bl	8001ee8 <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005538:	f7fc fcd6 	bl	8001ee8 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e1bd      	b.n	80058c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800554a:	4b30      	ldr	r3, [pc, #192]	; (800560c <HAL_RCC_OscConfig+0x280>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d0f0      	beq.n	8005538 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005556:	4b2d      	ldr	r3, [pc, #180]	; (800560c <HAL_RCC_OscConfig+0x280>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	4929      	ldr	r1, [pc, #164]	; (800560c <HAL_RCC_OscConfig+0x280>)
 8005566:	4313      	orrs	r3, r2
 8005568:	600b      	str	r3, [r1, #0]
 800556a:	e018      	b.n	800559e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800556c:	4b27      	ldr	r3, [pc, #156]	; (800560c <HAL_RCC_OscConfig+0x280>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a26      	ldr	r2, [pc, #152]	; (800560c <HAL_RCC_OscConfig+0x280>)
 8005572:	f023 0301 	bic.w	r3, r3, #1
 8005576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005578:	f7fc fcb6 	bl	8001ee8 <HAL_GetTick>
 800557c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800557e:	e008      	b.n	8005592 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005580:	f7fc fcb2 	bl	8001ee8 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b02      	cmp	r3, #2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e199      	b.n	80058c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005592:	4b1e      	ldr	r3, [pc, #120]	; (800560c <HAL_RCC_OscConfig+0x280>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1f0      	bne.n	8005580 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0308 	and.w	r3, r3, #8
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d038      	beq.n	800561c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d019      	beq.n	80055e6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055b2:	4b16      	ldr	r3, [pc, #88]	; (800560c <HAL_RCC_OscConfig+0x280>)
 80055b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055b6:	4a15      	ldr	r2, [pc, #84]	; (800560c <HAL_RCC_OscConfig+0x280>)
 80055b8:	f043 0301 	orr.w	r3, r3, #1
 80055bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055be:	f7fc fc93 	bl	8001ee8 <HAL_GetTick>
 80055c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055c4:	e008      	b.n	80055d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055c6:	f7fc fc8f 	bl	8001ee8 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d901      	bls.n	80055d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e176      	b.n	80058c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055d8:	4b0c      	ldr	r3, [pc, #48]	; (800560c <HAL_RCC_OscConfig+0x280>)
 80055da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055dc:	f003 0302 	and.w	r3, r3, #2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d0f0      	beq.n	80055c6 <HAL_RCC_OscConfig+0x23a>
 80055e4:	e01a      	b.n	800561c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055e6:	4b09      	ldr	r3, [pc, #36]	; (800560c <HAL_RCC_OscConfig+0x280>)
 80055e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ea:	4a08      	ldr	r2, [pc, #32]	; (800560c <HAL_RCC_OscConfig+0x280>)
 80055ec:	f023 0301 	bic.w	r3, r3, #1
 80055f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f2:	f7fc fc79 	bl	8001ee8 <HAL_GetTick>
 80055f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055f8:	e00a      	b.n	8005610 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055fa:	f7fc fc75 	bl	8001ee8 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b02      	cmp	r3, #2
 8005606:	d903      	bls.n	8005610 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e15c      	b.n	80058c6 <HAL_RCC_OscConfig+0x53a>
 800560c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005610:	4b91      	ldr	r3, [pc, #580]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 8005612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1ee      	bne.n	80055fa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 80a4 	beq.w	8005772 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800562a:	4b8b      	ldr	r3, [pc, #556]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10d      	bne.n	8005652 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005636:	4b88      	ldr	r3, [pc, #544]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	4a87      	ldr	r2, [pc, #540]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 800563c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005640:	6413      	str	r3, [r2, #64]	; 0x40
 8005642:	4b85      	ldr	r3, [pc, #532]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800564a:	60bb      	str	r3, [r7, #8]
 800564c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800564e:	2301      	movs	r3, #1
 8005650:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005652:	4b82      	ldr	r3, [pc, #520]	; (800585c <HAL_RCC_OscConfig+0x4d0>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565a:	2b00      	cmp	r3, #0
 800565c:	d118      	bne.n	8005690 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800565e:	4b7f      	ldr	r3, [pc, #508]	; (800585c <HAL_RCC_OscConfig+0x4d0>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a7e      	ldr	r2, [pc, #504]	; (800585c <HAL_RCC_OscConfig+0x4d0>)
 8005664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800566a:	f7fc fc3d 	bl	8001ee8 <HAL_GetTick>
 800566e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005672:	f7fc fc39 	bl	8001ee8 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b64      	cmp	r3, #100	; 0x64
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e120      	b.n	80058c6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005684:	4b75      	ldr	r3, [pc, #468]	; (800585c <HAL_RCC_OscConfig+0x4d0>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0f0      	beq.n	8005672 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d106      	bne.n	80056a6 <HAL_RCC_OscConfig+0x31a>
 8005698:	4b6f      	ldr	r3, [pc, #444]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 800569a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569c:	4a6e      	ldr	r2, [pc, #440]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 800569e:	f043 0301 	orr.w	r3, r3, #1
 80056a2:	6713      	str	r3, [r2, #112]	; 0x70
 80056a4:	e02d      	b.n	8005702 <HAL_RCC_OscConfig+0x376>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10c      	bne.n	80056c8 <HAL_RCC_OscConfig+0x33c>
 80056ae:	4b6a      	ldr	r3, [pc, #424]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 80056b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b2:	4a69      	ldr	r2, [pc, #420]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 80056b4:	f023 0301 	bic.w	r3, r3, #1
 80056b8:	6713      	str	r3, [r2, #112]	; 0x70
 80056ba:	4b67      	ldr	r3, [pc, #412]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 80056bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056be:	4a66      	ldr	r2, [pc, #408]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 80056c0:	f023 0304 	bic.w	r3, r3, #4
 80056c4:	6713      	str	r3, [r2, #112]	; 0x70
 80056c6:	e01c      	b.n	8005702 <HAL_RCC_OscConfig+0x376>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	2b05      	cmp	r3, #5
 80056ce:	d10c      	bne.n	80056ea <HAL_RCC_OscConfig+0x35e>
 80056d0:	4b61      	ldr	r3, [pc, #388]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 80056d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d4:	4a60      	ldr	r2, [pc, #384]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 80056d6:	f043 0304 	orr.w	r3, r3, #4
 80056da:	6713      	str	r3, [r2, #112]	; 0x70
 80056dc:	4b5e      	ldr	r3, [pc, #376]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 80056de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e0:	4a5d      	ldr	r2, [pc, #372]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 80056e2:	f043 0301 	orr.w	r3, r3, #1
 80056e6:	6713      	str	r3, [r2, #112]	; 0x70
 80056e8:	e00b      	b.n	8005702 <HAL_RCC_OscConfig+0x376>
 80056ea:	4b5b      	ldr	r3, [pc, #364]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 80056ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ee:	4a5a      	ldr	r2, [pc, #360]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 80056f0:	f023 0301 	bic.w	r3, r3, #1
 80056f4:	6713      	str	r3, [r2, #112]	; 0x70
 80056f6:	4b58      	ldr	r3, [pc, #352]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 80056f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fa:	4a57      	ldr	r2, [pc, #348]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 80056fc:	f023 0304 	bic.w	r3, r3, #4
 8005700:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d015      	beq.n	8005736 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800570a:	f7fc fbed 	bl	8001ee8 <HAL_GetTick>
 800570e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005710:	e00a      	b.n	8005728 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005712:	f7fc fbe9 	bl	8001ee8 <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005720:	4293      	cmp	r3, r2
 8005722:	d901      	bls.n	8005728 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e0ce      	b.n	80058c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005728:	4b4b      	ldr	r3, [pc, #300]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 800572a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572c:	f003 0302 	and.w	r3, r3, #2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d0ee      	beq.n	8005712 <HAL_RCC_OscConfig+0x386>
 8005734:	e014      	b.n	8005760 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005736:	f7fc fbd7 	bl	8001ee8 <HAL_GetTick>
 800573a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800573c:	e00a      	b.n	8005754 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800573e:	f7fc fbd3 	bl	8001ee8 <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	f241 3288 	movw	r2, #5000	; 0x1388
 800574c:	4293      	cmp	r3, r2
 800574e:	d901      	bls.n	8005754 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e0b8      	b.n	80058c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005754:	4b40      	ldr	r3, [pc, #256]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 8005756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005758:	f003 0302 	and.w	r3, r3, #2
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1ee      	bne.n	800573e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005760:	7dfb      	ldrb	r3, [r7, #23]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d105      	bne.n	8005772 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005766:	4b3c      	ldr	r3, [pc, #240]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 8005768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576a:	4a3b      	ldr	r2, [pc, #236]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 800576c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005770:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 80a4 	beq.w	80058c4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800577c:	4b36      	ldr	r3, [pc, #216]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f003 030c 	and.w	r3, r3, #12
 8005784:	2b08      	cmp	r3, #8
 8005786:	d06b      	beq.n	8005860 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	2b02      	cmp	r3, #2
 800578e:	d149      	bne.n	8005824 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005790:	4b31      	ldr	r3, [pc, #196]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a30      	ldr	r2, [pc, #192]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 8005796:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800579a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579c:	f7fc fba4 	bl	8001ee8 <HAL_GetTick>
 80057a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057a2:	e008      	b.n	80057b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057a4:	f7fc fba0 	bl	8001ee8 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d901      	bls.n	80057b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e087      	b.n	80058c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057b6:	4b28      	ldr	r3, [pc, #160]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1f0      	bne.n	80057a4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	69da      	ldr	r2, [r3, #28]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	431a      	orrs	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d0:	019b      	lsls	r3, r3, #6
 80057d2:	431a      	orrs	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d8:	085b      	lsrs	r3, r3, #1
 80057da:	3b01      	subs	r3, #1
 80057dc:	041b      	lsls	r3, r3, #16
 80057de:	431a      	orrs	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e4:	061b      	lsls	r3, r3, #24
 80057e6:	4313      	orrs	r3, r2
 80057e8:	4a1b      	ldr	r2, [pc, #108]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 80057ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057ee:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057f0:	4b19      	ldr	r3, [pc, #100]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a18      	ldr	r2, [pc, #96]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 80057f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057fc:	f7fc fb74 	bl	8001ee8 <HAL_GetTick>
 8005800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005802:	e008      	b.n	8005816 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005804:	f7fc fb70 	bl	8001ee8 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d901      	bls.n	8005816 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e057      	b.n	80058c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005816:	4b10      	ldr	r3, [pc, #64]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d0f0      	beq.n	8005804 <HAL_RCC_OscConfig+0x478>
 8005822:	e04f      	b.n	80058c4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005824:	4b0c      	ldr	r3, [pc, #48]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a0b      	ldr	r2, [pc, #44]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 800582a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800582e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005830:	f7fc fb5a 	bl	8001ee8 <HAL_GetTick>
 8005834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005836:	e008      	b.n	800584a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005838:	f7fc fb56 	bl	8001ee8 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b02      	cmp	r3, #2
 8005844:	d901      	bls.n	800584a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e03d      	b.n	80058c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800584a:	4b03      	ldr	r3, [pc, #12]	; (8005858 <HAL_RCC_OscConfig+0x4cc>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1f0      	bne.n	8005838 <HAL_RCC_OscConfig+0x4ac>
 8005856:	e035      	b.n	80058c4 <HAL_RCC_OscConfig+0x538>
 8005858:	40023800 	.word	0x40023800
 800585c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005860:	4b1b      	ldr	r3, [pc, #108]	; (80058d0 <HAL_RCC_OscConfig+0x544>)
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d028      	beq.n	80058c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005878:	429a      	cmp	r2, r3
 800587a:	d121      	bne.n	80058c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005886:	429a      	cmp	r2, r3
 8005888:	d11a      	bne.n	80058c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005890:	4013      	ands	r3, r2
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005896:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005898:	4293      	cmp	r3, r2
 800589a:	d111      	bne.n	80058c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a6:	085b      	lsrs	r3, r3, #1
 80058a8:	3b01      	subs	r3, #1
 80058aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d107      	bne.n	80058c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80058bc:	429a      	cmp	r2, r3
 80058be:	d001      	beq.n	80058c4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e000      	b.n	80058c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3718      	adds	r7, #24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	40023800 	.word	0x40023800

080058d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80058de:	2300      	movs	r3, #0
 80058e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e0d0      	b.n	8005a8e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058ec:	4b6a      	ldr	r3, [pc, #424]	; (8005a98 <HAL_RCC_ClockConfig+0x1c4>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 030f 	and.w	r3, r3, #15
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d910      	bls.n	800591c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058fa:	4b67      	ldr	r3, [pc, #412]	; (8005a98 <HAL_RCC_ClockConfig+0x1c4>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f023 020f 	bic.w	r2, r3, #15
 8005902:	4965      	ldr	r1, [pc, #404]	; (8005a98 <HAL_RCC_ClockConfig+0x1c4>)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	4313      	orrs	r3, r2
 8005908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800590a:	4b63      	ldr	r3, [pc, #396]	; (8005a98 <HAL_RCC_ClockConfig+0x1c4>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 030f 	and.w	r3, r3, #15
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	429a      	cmp	r2, r3
 8005916:	d001      	beq.n	800591c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e0b8      	b.n	8005a8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d020      	beq.n	800596a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0304 	and.w	r3, r3, #4
 8005930:	2b00      	cmp	r3, #0
 8005932:	d005      	beq.n	8005940 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005934:	4b59      	ldr	r3, [pc, #356]	; (8005a9c <HAL_RCC_ClockConfig+0x1c8>)
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	4a58      	ldr	r2, [pc, #352]	; (8005a9c <HAL_RCC_ClockConfig+0x1c8>)
 800593a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800593e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0308 	and.w	r3, r3, #8
 8005948:	2b00      	cmp	r3, #0
 800594a:	d005      	beq.n	8005958 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800594c:	4b53      	ldr	r3, [pc, #332]	; (8005a9c <HAL_RCC_ClockConfig+0x1c8>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	4a52      	ldr	r2, [pc, #328]	; (8005a9c <HAL_RCC_ClockConfig+0x1c8>)
 8005952:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005956:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005958:	4b50      	ldr	r3, [pc, #320]	; (8005a9c <HAL_RCC_ClockConfig+0x1c8>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	494d      	ldr	r1, [pc, #308]	; (8005a9c <HAL_RCC_ClockConfig+0x1c8>)
 8005966:	4313      	orrs	r3, r2
 8005968:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d040      	beq.n	80059f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d107      	bne.n	800598e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800597e:	4b47      	ldr	r3, [pc, #284]	; (8005a9c <HAL_RCC_ClockConfig+0x1c8>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d115      	bne.n	80059b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e07f      	b.n	8005a8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	2b02      	cmp	r3, #2
 8005994:	d107      	bne.n	80059a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005996:	4b41      	ldr	r3, [pc, #260]	; (8005a9c <HAL_RCC_ClockConfig+0x1c8>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d109      	bne.n	80059b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e073      	b.n	8005a8e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059a6:	4b3d      	ldr	r3, [pc, #244]	; (8005a9c <HAL_RCC_ClockConfig+0x1c8>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e06b      	b.n	8005a8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059b6:	4b39      	ldr	r3, [pc, #228]	; (8005a9c <HAL_RCC_ClockConfig+0x1c8>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f023 0203 	bic.w	r2, r3, #3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	4936      	ldr	r1, [pc, #216]	; (8005a9c <HAL_RCC_ClockConfig+0x1c8>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059c8:	f7fc fa8e 	bl	8001ee8 <HAL_GetTick>
 80059cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ce:	e00a      	b.n	80059e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059d0:	f7fc fa8a 	bl	8001ee8 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	f241 3288 	movw	r2, #5000	; 0x1388
 80059de:	4293      	cmp	r3, r2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e053      	b.n	8005a8e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059e6:	4b2d      	ldr	r3, [pc, #180]	; (8005a9c <HAL_RCC_ClockConfig+0x1c8>)
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f003 020c 	and.w	r2, r3, #12
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d1eb      	bne.n	80059d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059f8:	4b27      	ldr	r3, [pc, #156]	; (8005a98 <HAL_RCC_ClockConfig+0x1c4>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 030f 	and.w	r3, r3, #15
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d210      	bcs.n	8005a28 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a06:	4b24      	ldr	r3, [pc, #144]	; (8005a98 <HAL_RCC_ClockConfig+0x1c4>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f023 020f 	bic.w	r2, r3, #15
 8005a0e:	4922      	ldr	r1, [pc, #136]	; (8005a98 <HAL_RCC_ClockConfig+0x1c4>)
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a16:	4b20      	ldr	r3, [pc, #128]	; (8005a98 <HAL_RCC_ClockConfig+0x1c4>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 030f 	and.w	r3, r3, #15
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d001      	beq.n	8005a28 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e032      	b.n	8005a8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0304 	and.w	r3, r3, #4
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d008      	beq.n	8005a46 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a34:	4b19      	ldr	r3, [pc, #100]	; (8005a9c <HAL_RCC_ClockConfig+0x1c8>)
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	4916      	ldr	r1, [pc, #88]	; (8005a9c <HAL_RCC_ClockConfig+0x1c8>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0308 	and.w	r3, r3, #8
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d009      	beq.n	8005a66 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a52:	4b12      	ldr	r3, [pc, #72]	; (8005a9c <HAL_RCC_ClockConfig+0x1c8>)
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	00db      	lsls	r3, r3, #3
 8005a60:	490e      	ldr	r1, [pc, #56]	; (8005a9c <HAL_RCC_ClockConfig+0x1c8>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a66:	f000 f821 	bl	8005aac <HAL_RCC_GetSysClockFreq>
 8005a6a:	4601      	mov	r1, r0
 8005a6c:	4b0b      	ldr	r3, [pc, #44]	; (8005a9c <HAL_RCC_ClockConfig+0x1c8>)
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	091b      	lsrs	r3, r3, #4
 8005a72:	f003 030f 	and.w	r3, r3, #15
 8005a76:	4a0a      	ldr	r2, [pc, #40]	; (8005aa0 <HAL_RCC_ClockConfig+0x1cc>)
 8005a78:	5cd3      	ldrb	r3, [r2, r3]
 8005a7a:	fa21 f303 	lsr.w	r3, r1, r3
 8005a7e:	4a09      	ldr	r2, [pc, #36]	; (8005aa4 <HAL_RCC_ClockConfig+0x1d0>)
 8005a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a82:	4b09      	ldr	r3, [pc, #36]	; (8005aa8 <HAL_RCC_ClockConfig+0x1d4>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fc f9ea 	bl	8001e60 <HAL_InitTick>

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	40023c00 	.word	0x40023c00
 8005a9c:	40023800 	.word	0x40023800
 8005aa0:	08008020 	.word	0x08008020
 8005aa4:	20000000 	.word	0x20000000
 8005aa8:	20000004 	.word	0x20000004

08005aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	607b      	str	r3, [r7, #4]
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	60fb      	str	r3, [r7, #12]
 8005aba:	2300      	movs	r3, #0
 8005abc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ac2:	4b63      	ldr	r3, [pc, #396]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f003 030c 	and.w	r3, r3, #12
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	d007      	beq.n	8005ade <HAL_RCC_GetSysClockFreq+0x32>
 8005ace:	2b08      	cmp	r3, #8
 8005ad0:	d008      	beq.n	8005ae4 <HAL_RCC_GetSysClockFreq+0x38>
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f040 80b4 	bne.w	8005c40 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ad8:	4b5e      	ldr	r3, [pc, #376]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005ada:	60bb      	str	r3, [r7, #8]
      break;
 8005adc:	e0b3      	b.n	8005c46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ade:	4b5e      	ldr	r3, [pc, #376]	; (8005c58 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005ae0:	60bb      	str	r3, [r7, #8]
      break;
 8005ae2:	e0b0      	b.n	8005c46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ae4:	4b5a      	ldr	r3, [pc, #360]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005aec:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005aee:	4b58      	ldr	r3, [pc, #352]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d04a      	beq.n	8005b90 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005afa:	4b55      	ldr	r3, [pc, #340]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	099b      	lsrs	r3, r3, #6
 8005b00:	f04f 0400 	mov.w	r4, #0
 8005b04:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005b08:	f04f 0200 	mov.w	r2, #0
 8005b0c:	ea03 0501 	and.w	r5, r3, r1
 8005b10:	ea04 0602 	and.w	r6, r4, r2
 8005b14:	4629      	mov	r1, r5
 8005b16:	4632      	mov	r2, r6
 8005b18:	f04f 0300 	mov.w	r3, #0
 8005b1c:	f04f 0400 	mov.w	r4, #0
 8005b20:	0154      	lsls	r4, r2, #5
 8005b22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005b26:	014b      	lsls	r3, r1, #5
 8005b28:	4619      	mov	r1, r3
 8005b2a:	4622      	mov	r2, r4
 8005b2c:	1b49      	subs	r1, r1, r5
 8005b2e:	eb62 0206 	sbc.w	r2, r2, r6
 8005b32:	f04f 0300 	mov.w	r3, #0
 8005b36:	f04f 0400 	mov.w	r4, #0
 8005b3a:	0194      	lsls	r4, r2, #6
 8005b3c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005b40:	018b      	lsls	r3, r1, #6
 8005b42:	1a5b      	subs	r3, r3, r1
 8005b44:	eb64 0402 	sbc.w	r4, r4, r2
 8005b48:	f04f 0100 	mov.w	r1, #0
 8005b4c:	f04f 0200 	mov.w	r2, #0
 8005b50:	00e2      	lsls	r2, r4, #3
 8005b52:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005b56:	00d9      	lsls	r1, r3, #3
 8005b58:	460b      	mov	r3, r1
 8005b5a:	4614      	mov	r4, r2
 8005b5c:	195b      	adds	r3, r3, r5
 8005b5e:	eb44 0406 	adc.w	r4, r4, r6
 8005b62:	f04f 0100 	mov.w	r1, #0
 8005b66:	f04f 0200 	mov.w	r2, #0
 8005b6a:	0262      	lsls	r2, r4, #9
 8005b6c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005b70:	0259      	lsls	r1, r3, #9
 8005b72:	460b      	mov	r3, r1
 8005b74:	4614      	mov	r4, r2
 8005b76:	4618      	mov	r0, r3
 8005b78:	4621      	mov	r1, r4
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f04f 0400 	mov.w	r4, #0
 8005b80:	461a      	mov	r2, r3
 8005b82:	4623      	mov	r3, r4
 8005b84:	f7fa fb4c 	bl	8000220 <__aeabi_uldivmod>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	460c      	mov	r4, r1
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	e049      	b.n	8005c24 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b90:	4b2f      	ldr	r3, [pc, #188]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	099b      	lsrs	r3, r3, #6
 8005b96:	f04f 0400 	mov.w	r4, #0
 8005b9a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005b9e:	f04f 0200 	mov.w	r2, #0
 8005ba2:	ea03 0501 	and.w	r5, r3, r1
 8005ba6:	ea04 0602 	and.w	r6, r4, r2
 8005baa:	4629      	mov	r1, r5
 8005bac:	4632      	mov	r2, r6
 8005bae:	f04f 0300 	mov.w	r3, #0
 8005bb2:	f04f 0400 	mov.w	r4, #0
 8005bb6:	0154      	lsls	r4, r2, #5
 8005bb8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005bbc:	014b      	lsls	r3, r1, #5
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	4622      	mov	r2, r4
 8005bc2:	1b49      	subs	r1, r1, r5
 8005bc4:	eb62 0206 	sbc.w	r2, r2, r6
 8005bc8:	f04f 0300 	mov.w	r3, #0
 8005bcc:	f04f 0400 	mov.w	r4, #0
 8005bd0:	0194      	lsls	r4, r2, #6
 8005bd2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005bd6:	018b      	lsls	r3, r1, #6
 8005bd8:	1a5b      	subs	r3, r3, r1
 8005bda:	eb64 0402 	sbc.w	r4, r4, r2
 8005bde:	f04f 0100 	mov.w	r1, #0
 8005be2:	f04f 0200 	mov.w	r2, #0
 8005be6:	00e2      	lsls	r2, r4, #3
 8005be8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005bec:	00d9      	lsls	r1, r3, #3
 8005bee:	460b      	mov	r3, r1
 8005bf0:	4614      	mov	r4, r2
 8005bf2:	195b      	adds	r3, r3, r5
 8005bf4:	eb44 0406 	adc.w	r4, r4, r6
 8005bf8:	f04f 0100 	mov.w	r1, #0
 8005bfc:	f04f 0200 	mov.w	r2, #0
 8005c00:	02a2      	lsls	r2, r4, #10
 8005c02:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005c06:	0299      	lsls	r1, r3, #10
 8005c08:	460b      	mov	r3, r1
 8005c0a:	4614      	mov	r4, r2
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	4621      	mov	r1, r4
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f04f 0400 	mov.w	r4, #0
 8005c16:	461a      	mov	r2, r3
 8005c18:	4623      	mov	r3, r4
 8005c1a:	f7fa fb01 	bl	8000220 <__aeabi_uldivmod>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	460c      	mov	r4, r1
 8005c22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005c24:	4b0a      	ldr	r3, [pc, #40]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	0c1b      	lsrs	r3, r3, #16
 8005c2a:	f003 0303 	and.w	r3, r3, #3
 8005c2e:	3301      	adds	r3, #1
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c3c:	60bb      	str	r3, [r7, #8]
      break;
 8005c3e:	e002      	b.n	8005c46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c40:	4b04      	ldr	r3, [pc, #16]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005c42:	60bb      	str	r3, [r7, #8]
      break;
 8005c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c46:	68bb      	ldr	r3, [r7, #8]
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3714      	adds	r7, #20
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c50:	40023800 	.word	0x40023800
 8005c54:	00f42400 	.word	0x00f42400
 8005c58:	007a1200 	.word	0x007a1200

08005c5c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c60:	4b03      	ldr	r3, [pc, #12]	; (8005c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c62:	681b      	ldr	r3, [r3, #0]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	20000000 	.word	0x20000000

08005c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c78:	f7ff fff0 	bl	8005c5c <HAL_RCC_GetHCLKFreq>
 8005c7c:	4601      	mov	r1, r0
 8005c7e:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	0a9b      	lsrs	r3, r3, #10
 8005c84:	f003 0307 	and.w	r3, r3, #7
 8005c88:	4a03      	ldr	r2, [pc, #12]	; (8005c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c8a:	5cd3      	ldrb	r3, [r2, r3]
 8005c8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	40023800 	.word	0x40023800
 8005c98:	08008030 	.word	0x08008030

08005c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ca0:	f7ff ffdc 	bl	8005c5c <HAL_RCC_GetHCLKFreq>
 8005ca4:	4601      	mov	r1, r0
 8005ca6:	4b05      	ldr	r3, [pc, #20]	; (8005cbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	0b5b      	lsrs	r3, r3, #13
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	4a03      	ldr	r2, [pc, #12]	; (8005cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cb2:	5cd3      	ldrb	r3, [r2, r3]
 8005cb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	40023800 	.word	0x40023800
 8005cc0:	08008030 	.word	0x08008030

08005cc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b088      	sub	sp, #32
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0301 	and.w	r3, r3, #1
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d012      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ce8:	4b65      	ldr	r3, [pc, #404]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	4a64      	ldr	r2, [pc, #400]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005cee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005cf2:	6093      	str	r3, [r2, #8]
 8005cf4:	4b62      	ldr	r3, [pc, #392]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005cf6:	689a      	ldr	r2, [r3, #8]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfc:	4960      	ldr	r1, [pc, #384]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d017      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d1a:	4b59      	ldr	r3, [pc, #356]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d28:	4955      	ldr	r1, [pc, #340]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d38:	d101      	bne.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8005d46:	2301      	movs	r3, #1
 8005d48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d017      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005d56:	4b4a      	ldr	r3, [pc, #296]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d64:	4946      	ldr	r1, [pc, #280]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d74:	d101      	bne.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8005d76:	2301      	movs	r3, #1
 8005d78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8005d82:	2301      	movs	r3, #1
 8005d84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0320 	and.w	r3, r3, #32
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f000 808b 	beq.w	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d94:	4b3a      	ldr	r3, [pc, #232]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d98:	4a39      	ldr	r2, [pc, #228]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8005da0:	4b37      	ldr	r3, [pc, #220]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005dac:	4b35      	ldr	r3, [pc, #212]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a34      	ldr	r2, [pc, #208]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005db6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005db8:	f7fc f896 	bl	8001ee8 <HAL_GetTick>
 8005dbc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005dbe:	e008      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dc0:	f7fc f892 	bl	8001ee8 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	2b64      	cmp	r3, #100	; 0x64
 8005dcc:	d901      	bls.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e2ba      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005dd2:	4b2c      	ldr	r3, [pc, #176]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d0f0      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005dde:	4b28      	ldr	r3, [pc, #160]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005de6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d035      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d02e      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dfc:	4b20      	ldr	r3, [pc, #128]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e04:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e06:	4b1e      	ldr	r3, [pc, #120]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e0a:	4a1d      	ldr	r2, [pc, #116]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e10:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e12:	4b1b      	ldr	r3, [pc, #108]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e16:	4a1a      	ldr	r2, [pc, #104]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005e1e:	4a18      	ldr	r2, [pc, #96]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e24:	4b16      	ldr	r3, [pc, #88]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d114      	bne.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e30:	f7fc f85a 	bl	8001ee8 <HAL_GetTick>
 8005e34:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e36:	e00a      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e38:	f7fc f856 	bl	8001ee8 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d901      	bls.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e27c      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e4e:	4b0c      	ldr	r3, [pc, #48]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e52:	f003 0302 	and.w	r3, r3, #2
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d0ee      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e66:	d111      	bne.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8005e68:	4b05      	ldr	r3, [pc, #20]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005e74:	4b04      	ldr	r3, [pc, #16]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005e76:	400b      	ands	r3, r1
 8005e78:	4901      	ldr	r1, [pc, #4]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	608b      	str	r3, [r1, #8]
 8005e7e:	e00b      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005e80:	40023800 	.word	0x40023800
 8005e84:	40007000 	.word	0x40007000
 8005e88:	0ffffcff 	.word	0x0ffffcff
 8005e8c:	4ba3      	ldr	r3, [pc, #652]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	4aa2      	ldr	r2, [pc, #648]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005e92:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005e96:	6093      	str	r3, [r2, #8]
 8005e98:	4ba0      	ldr	r3, [pc, #640]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005e9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ea4:	499d      	ldr	r1, [pc, #628]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0310 	and.w	r3, r3, #16
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d010      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005eb6:	4b99      	ldr	r3, [pc, #612]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ebc:	4a97      	ldr	r2, [pc, #604]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005ebe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ec2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005ec6:	4b95      	ldr	r3, [pc, #596]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005ec8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed0:	4992      	ldr	r1, [pc, #584]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00a      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ee4:	4b8d      	ldr	r3, [pc, #564]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef2:	498a      	ldr	r1, [pc, #552]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f06:	4b85      	ldr	r3, [pc, #532]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f14:	4981      	ldr	r1, [pc, #516]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00a      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f28:	4b7c      	ldr	r3, [pc, #496]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f36:	4979      	ldr	r1, [pc, #484]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00a      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f4a:	4b74      	ldr	r3, [pc, #464]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f50:	f023 0203 	bic.w	r2, r3, #3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f58:	4970      	ldr	r1, [pc, #448]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00a      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f6c:	4b6b      	ldr	r3, [pc, #428]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f72:	f023 020c 	bic.w	r2, r3, #12
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	4968      	ldr	r1, [pc, #416]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00a      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f8e:	4b63      	ldr	r3, [pc, #396]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f94:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9c:	495f      	ldr	r1, [pc, #380]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00a      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005fb0:	4b5a      	ldr	r3, [pc, #360]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fb6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fbe:	4957      	ldr	r1, [pc, #348]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00a      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005fd2:	4b52      	ldr	r3, [pc, #328]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fe0:	494e      	ldr	r1, [pc, #312]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00a      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005ff4:	4b49      	ldr	r3, [pc, #292]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ffa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006002:	4946      	ldr	r1, [pc, #280]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006004:	4313      	orrs	r3, r2
 8006006:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00a      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006016:	4b41      	ldr	r3, [pc, #260]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800601c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006024:	493d      	ldr	r1, [pc, #244]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006026:	4313      	orrs	r3, r2
 8006028:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00a      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006038:	4b38      	ldr	r3, [pc, #224]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800603a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800603e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006046:	4935      	ldr	r1, [pc, #212]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006048:	4313      	orrs	r3, r2
 800604a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d011      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800605a:	4b30      	ldr	r3, [pc, #192]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800605c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006060:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006068:	492c      	ldr	r1, [pc, #176]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800606a:	4313      	orrs	r3, r2
 800606c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006074:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006078:	d101      	bne.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800607a:	2301      	movs	r3, #1
 800607c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00a      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800608a:	4b24      	ldr	r3, [pc, #144]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800608c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006090:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006098:	4920      	ldr	r1, [pc, #128]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800609a:	4313      	orrs	r3, r2
 800609c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00a      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80060ac:	4b1b      	ldr	r3, [pc, #108]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80060ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060ba:	4918      	ldr	r1, [pc, #96]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00a      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80060ce:	4b13      	ldr	r3, [pc, #76]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80060d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060d4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060dc:	490f      	ldr	r1, [pc, #60]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d005      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060f2:	f040 809c 	bne.w	800622e <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80060f6:	4b09      	ldr	r3, [pc, #36]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a08      	ldr	r2, [pc, #32]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80060fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006100:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006102:	f7fb fef1 	bl	8001ee8 <HAL_GetTick>
 8006106:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006108:	e00a      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800610a:	f7fb feed 	bl	8001ee8 <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	2b64      	cmp	r3, #100	; 0x64
 8006116:	d903      	bls.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e115      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x684>
 800611c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006120:	4b8b      	ldr	r3, [pc, #556]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1ee      	bne.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	2b00      	cmp	r3, #0
 8006136:	d017      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613c:	2b00      	cmp	r3, #0
 800613e:	d113      	bne.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006140:	4b83      	ldr	r3, [pc, #524]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006146:	0e1b      	lsrs	r3, r3, #24
 8006148:	f003 030f 	and.w	r3, r3, #15
 800614c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	019a      	lsls	r2, r3, #6
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	061b      	lsls	r3, r3, #24
 8006158:	431a      	orrs	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	071b      	lsls	r3, r3, #28
 8006160:	497b      	ldr	r1, [pc, #492]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006162:	4313      	orrs	r3, r2
 8006164:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d004      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006178:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800617c:	d00a      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006186:	2b00      	cmp	r3, #0
 8006188:	d024      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006192:	d11f      	bne.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006194:	4b6e      	ldr	r3, [pc, #440]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006196:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800619a:	0f1b      	lsrs	r3, r3, #28
 800619c:	f003 0307 	and.w	r3, r3, #7
 80061a0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	019a      	lsls	r2, r3, #6
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	061b      	lsls	r3, r3, #24
 80061ae:	431a      	orrs	r2, r3
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	071b      	lsls	r3, r3, #28
 80061b4:	4966      	ldr	r1, [pc, #408]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80061bc:	4b64      	ldr	r3, [pc, #400]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80061be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061c2:	f023 021f 	bic.w	r2, r3, #31
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	3b01      	subs	r3, #1
 80061cc:	4960      	ldr	r1, [pc, #384]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00d      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	019a      	lsls	r2, r3, #6
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	061b      	lsls	r3, r3, #24
 80061ec:	431a      	orrs	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	071b      	lsls	r3, r3, #28
 80061f4:	4956      	ldr	r1, [pc, #344]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80061fc:	4b54      	ldr	r3, [pc, #336]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a53      	ldr	r2, [pc, #332]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006202:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006206:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006208:	f7fb fe6e 	bl	8001ee8 <HAL_GetTick>
 800620c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800620e:	e008      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006210:	f7fb fe6a 	bl	8001ee8 <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	2b64      	cmp	r3, #100	; 0x64
 800621c:	d901      	bls.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e092      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006222:	4b4b      	ldr	r3, [pc, #300]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800622a:	2b00      	cmp	r3, #0
 800622c:	d0f0      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	2b01      	cmp	r3, #1
 8006232:	f040 8088 	bne.w	8006346 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006236:	4b46      	ldr	r3, [pc, #280]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a45      	ldr	r2, [pc, #276]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800623c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006240:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006242:	f7fb fe51 	bl	8001ee8 <HAL_GetTick>
 8006246:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006248:	e008      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800624a:	f7fb fe4d 	bl	8001ee8 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	2b64      	cmp	r3, #100	; 0x64
 8006256:	d901      	bls.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e075      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800625c:	4b3c      	ldr	r3, [pc, #240]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006264:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006268:	d0ef      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800627a:	2b00      	cmp	r3, #0
 800627c:	d009      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006286:	2b00      	cmp	r3, #0
 8006288:	d024      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628e:	2b00      	cmp	r3, #0
 8006290:	d120      	bne.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006292:	4b2f      	ldr	r3, [pc, #188]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006298:	0c1b      	lsrs	r3, r3, #16
 800629a:	f003 0303 	and.w	r3, r3, #3
 800629e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	019a      	lsls	r2, r3, #6
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	041b      	lsls	r3, r3, #16
 80062aa:	431a      	orrs	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	061b      	lsls	r3, r3, #24
 80062b2:	4927      	ldr	r1, [pc, #156]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80062ba:	4b25      	ldr	r3, [pc, #148]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80062bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	3b01      	subs	r3, #1
 80062ca:	021b      	lsls	r3, r3, #8
 80062cc:	4920      	ldr	r1, [pc, #128]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d018      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062e8:	d113      	bne.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80062ea:	4b19      	ldr	r3, [pc, #100]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80062ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f0:	0e1b      	lsrs	r3, r3, #24
 80062f2:	f003 030f 	and.w	r3, r3, #15
 80062f6:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	019a      	lsls	r2, r3, #6
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	041b      	lsls	r3, r3, #16
 8006304:	431a      	orrs	r2, r3
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	061b      	lsls	r3, r3, #24
 800630a:	4911      	ldr	r1, [pc, #68]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800630c:	4313      	orrs	r3, r2
 800630e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006312:	4b0f      	ldr	r3, [pc, #60]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a0e      	ldr	r2, [pc, #56]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800631c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800631e:	f7fb fde3 	bl	8001ee8 <HAL_GetTick>
 8006322:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006324:	e008      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006326:	f7fb fddf 	bl	8001ee8 <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	2b64      	cmp	r3, #100	; 0x64
 8006332:	d901      	bls.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	e007      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006338:	4b05      	ldr	r3, [pc, #20]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006340:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006344:	d1ef      	bne.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3720      	adds	r7, #32
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	40023800 	.word	0x40023800

08006354 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e01d      	b.n	80063a2 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d106      	bne.n	8006380 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f7fb fb44 	bl	8001a08 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2202      	movs	r2, #2
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	3304      	adds	r3, #4
 8006390:	4619      	mov	r1, r3
 8006392:	4610      	mov	r0, r2
 8006394:	f000 fc72 	bl	8006c7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b082      	sub	sp, #8
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d101      	bne.n	80063bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e01d      	b.n	80063f8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d106      	bne.n	80063d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7fb faf9 	bl	80019c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2202      	movs	r2, #2
 80063da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	3304      	adds	r3, #4
 80063e6:	4619      	mov	r1, r3
 80063e8:	4610      	mov	r0, r2
 80063ea:	f000 fc47 	bl	8006c7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2201      	movs	r2, #1
 8006410:	6839      	ldr	r1, [r7, #0]
 8006412:	4618      	mov	r0, r3
 8006414:	f001 f85a 	bl	80074cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a17      	ldr	r2, [pc, #92]	; (800647c <HAL_TIM_PWM_Start+0x7c>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d004      	beq.n	800642c <HAL_TIM_PWM_Start+0x2c>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a16      	ldr	r2, [pc, #88]	; (8006480 <HAL_TIM_PWM_Start+0x80>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d101      	bne.n	8006430 <HAL_TIM_PWM_Start+0x30>
 800642c:	2301      	movs	r3, #1
 800642e:	e000      	b.n	8006432 <HAL_TIM_PWM_Start+0x32>
 8006430:	2300      	movs	r3, #0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d007      	beq.n	8006446 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006444:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	4b0d      	ldr	r3, [pc, #52]	; (8006484 <HAL_TIM_PWM_Start+0x84>)
 800644e:	4013      	ands	r3, r2
 8006450:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2b06      	cmp	r3, #6
 8006456:	d00b      	beq.n	8006470 <HAL_TIM_PWM_Start+0x70>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800645e:	d007      	beq.n	8006470 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f042 0201 	orr.w	r2, r2, #1
 800646e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	40010000 	.word	0x40010000
 8006480:	40010400 	.word	0x40010400
 8006484:	00010007 	.word	0x00010007

08006488 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e01d      	b.n	80064d6 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d106      	bne.n	80064b4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7fb f9ce 	bl	8001850 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2202      	movs	r2, #2
 80064b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	3304      	adds	r3, #4
 80064c4:	4619      	mov	r1, r3
 80064c6:	4610      	mov	r0, r2
 80064c8:	f000 fbd8 	bl	8006c7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3708      	adds	r7, #8
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
	...

080064e0 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
 80064ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  if (htim->State == HAL_TIM_STATE_BUSY)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d101      	bne.n	80064fe <HAL_TIM_IC_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 80064fa:	2302      	movs	r3, #2
 80064fc:	e0e0      	b.n	80066c0 <HAL_TIM_IC_Start_DMA+0x1e0>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b01      	cmp	r3, #1
 8006508:	d10b      	bne.n	8006522 <HAL_TIM_IC_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d104      	bne.n	800651a <HAL_TIM_IC_Start_DMA+0x3a>
 8006510:	887b      	ldrh	r3, [r7, #2]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <HAL_TIM_IC_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e0d2      	b.n	80066c0 <HAL_TIM_IC_Start_DMA+0x1e0>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2202      	movs	r2, #2
 800651e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	2b0c      	cmp	r3, #12
 8006526:	f200 80ad 	bhi.w	8006684 <HAL_TIM_IC_Start_DMA+0x1a4>
 800652a:	a201      	add	r2, pc, #4	; (adr r2, 8006530 <HAL_TIM_IC_Start_DMA+0x50>)
 800652c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006530:	08006565 	.word	0x08006565
 8006534:	08006685 	.word	0x08006685
 8006538:	08006685 	.word	0x08006685
 800653c:	08006685 	.word	0x08006685
 8006540:	080065ad 	.word	0x080065ad
 8006544:	08006685 	.word	0x08006685
 8006548:	08006685 	.word	0x08006685
 800654c:	08006685 	.word	0x08006685
 8006550:	080065f5 	.word	0x080065f5
 8006554:	08006685 	.word	0x08006685
 8006558:	08006685 	.word	0x08006685
 800655c:	08006685 	.word	0x08006685
 8006560:	0800663d 	.word	0x0800663d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006568:	4a57      	ldr	r2, [pc, #348]	; (80066c8 <HAL_TIM_IC_Start_DMA+0x1e8>)
 800656a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006570:	4a56      	ldr	r2, [pc, #344]	; (80066cc <HAL_TIM_IC_Start_DMA+0x1ec>)
 8006572:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006578:	4a55      	ldr	r2, [pc, #340]	; (80066d0 <HAL_TIM_IC_Start_DMA+0x1f0>)
 800657a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	3334      	adds	r3, #52	; 0x34
 8006586:	4619      	mov	r1, r3
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	887b      	ldrh	r3, [r7, #2]
 800658c:	f7fc fb3a 	bl	8002c04 <HAL_DMA_Start_IT>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <HAL_TIM_IC_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e092      	b.n	80066c0 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68da      	ldr	r2, [r3, #12]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065a8:	60da      	str	r2, [r3, #12]
      break;
 80065aa:	e06c      	b.n	8006686 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b0:	4a45      	ldr	r2, [pc, #276]	; (80066c8 <HAL_TIM_IC_Start_DMA+0x1e8>)
 80065b2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b8:	4a44      	ldr	r2, [pc, #272]	; (80066cc <HAL_TIM_IC_Start_DMA+0x1ec>)
 80065ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c0:	4a43      	ldr	r2, [pc, #268]	; (80066d0 <HAL_TIM_IC_Start_DMA+0x1f0>)
 80065c2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	3338      	adds	r3, #56	; 0x38
 80065ce:	4619      	mov	r1, r3
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	887b      	ldrh	r3, [r7, #2]
 80065d4:	f7fc fb16 	bl	8002c04 <HAL_DMA_Start_IT>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <HAL_TIM_IC_Start_DMA+0x102>
      {
        return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e06e      	b.n	80066c0 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68da      	ldr	r2, [r3, #12]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065f0:	60da      	str	r2, [r3, #12]
      break;
 80065f2:	e048      	b.n	8006686 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f8:	4a33      	ldr	r2, [pc, #204]	; (80066c8 <HAL_TIM_IC_Start_DMA+0x1e8>)
 80065fa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006600:	4a32      	ldr	r2, [pc, #200]	; (80066cc <HAL_TIM_IC_Start_DMA+0x1ec>)
 8006602:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006608:	4a31      	ldr	r2, [pc, #196]	; (80066d0 <HAL_TIM_IC_Start_DMA+0x1f0>)
 800660a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	333c      	adds	r3, #60	; 0x3c
 8006616:	4619      	mov	r1, r3
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	887b      	ldrh	r3, [r7, #2]
 800661c:	f7fc faf2 	bl	8002c04 <HAL_DMA_Start_IT>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <HAL_TIM_IC_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e04a      	b.n	80066c0 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68da      	ldr	r2, [r3, #12]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006638:	60da      	str	r2, [r3, #12]
      break;
 800663a:	e024      	b.n	8006686 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006640:	4a21      	ldr	r2, [pc, #132]	; (80066c8 <HAL_TIM_IC_Start_DMA+0x1e8>)
 8006642:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006648:	4a20      	ldr	r2, [pc, #128]	; (80066cc <HAL_TIM_IC_Start_DMA+0x1ec>)
 800664a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006650:	4a1f      	ldr	r2, [pc, #124]	; (80066d0 <HAL_TIM_IC_Start_DMA+0x1f0>)
 8006652:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	3340      	adds	r3, #64	; 0x40
 800665e:	4619      	mov	r1, r3
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	887b      	ldrh	r3, [r7, #2]
 8006664:	f7fc face 	bl	8002c04 <HAL_DMA_Start_IT>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <HAL_TIM_IC_Start_DMA+0x192>
      {
        return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e026      	b.n	80066c0 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68da      	ldr	r2, [r3, #12]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006680:	60da      	str	r2, [r3, #12]
      break;
 8006682:	e000      	b.n	8006686 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    default:
      break;
 8006684:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2201      	movs	r2, #1
 800668c:	68b9      	ldr	r1, [r7, #8]
 800668e:	4618      	mov	r0, r3
 8006690:	f000 ff1c 	bl	80074cc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689a      	ldr	r2, [r3, #8]
 800669a:	4b0e      	ldr	r3, [pc, #56]	; (80066d4 <HAL_TIM_IC_Start_DMA+0x1f4>)
 800669c:	4013      	ands	r3, r2
 800669e:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	2b06      	cmp	r3, #6
 80066a4:	d00b      	beq.n	80066be <HAL_TIM_IC_Start_DMA+0x1de>
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066ac:	d007      	beq.n	80066be <HAL_TIM_IC_Start_DMA+0x1de>
  {
    __HAL_TIM_ENABLE(htim);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f042 0201 	orr.w	r2, r2, #1
 80066bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3718      	adds	r7, #24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	08006b9d 	.word	0x08006b9d
 80066cc:	08006c0d 	.word	0x08006c0d
 80066d0:	08006b79 	.word	0x08006b79
 80066d4:	00010007 	.word	0x00010007

080066d8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d101      	bne.n	80066f2 <HAL_TIM_OC_ConfigChannel+0x1a>
 80066ee:	2302      	movs	r3, #2
 80066f0:	e06c      	b.n	80067cc <HAL_TIM_OC_ConfigChannel+0xf4>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2202      	movs	r2, #2
 80066fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b14      	cmp	r3, #20
 8006706:	d857      	bhi.n	80067b8 <HAL_TIM_OC_ConfigChannel+0xe0>
 8006708:	a201      	add	r2, pc, #4	; (adr r2, 8006710 <HAL_TIM_OC_ConfigChannel+0x38>)
 800670a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670e:	bf00      	nop
 8006710:	08006765 	.word	0x08006765
 8006714:	080067b9 	.word	0x080067b9
 8006718:	080067b9 	.word	0x080067b9
 800671c:	080067b9 	.word	0x080067b9
 8006720:	08006773 	.word	0x08006773
 8006724:	080067b9 	.word	0x080067b9
 8006728:	080067b9 	.word	0x080067b9
 800672c:	080067b9 	.word	0x080067b9
 8006730:	08006781 	.word	0x08006781
 8006734:	080067b9 	.word	0x080067b9
 8006738:	080067b9 	.word	0x080067b9
 800673c:	080067b9 	.word	0x080067b9
 8006740:	0800678f 	.word	0x0800678f
 8006744:	080067b9 	.word	0x080067b9
 8006748:	080067b9 	.word	0x080067b9
 800674c:	080067b9 	.word	0x080067b9
 8006750:	0800679d 	.word	0x0800679d
 8006754:	080067b9 	.word	0x080067b9
 8006758:	080067b9 	.word	0x080067b9
 800675c:	080067b9 	.word	0x080067b9
 8006760:	080067ab 	.word	0x080067ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68b9      	ldr	r1, [r7, #8]
 800676a:	4618      	mov	r0, r3
 800676c:	f000 fb26 	bl	8006dbc <TIM_OC1_SetConfig>
      break;
 8006770:	e023      	b.n	80067ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68b9      	ldr	r1, [r7, #8]
 8006778:	4618      	mov	r0, r3
 800677a:	f000 fb91 	bl	8006ea0 <TIM_OC2_SetConfig>
      break;
 800677e:	e01c      	b.n	80067ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68b9      	ldr	r1, [r7, #8]
 8006786:	4618      	mov	r0, r3
 8006788:	f000 fc02 	bl	8006f90 <TIM_OC3_SetConfig>
      break;
 800678c:	e015      	b.n	80067ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68b9      	ldr	r1, [r7, #8]
 8006794:	4618      	mov	r0, r3
 8006796:	f000 fc71 	bl	800707c <TIM_OC4_SetConfig>
      break;
 800679a:	e00e      	b.n	80067ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68b9      	ldr	r1, [r7, #8]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f000 fcc2 	bl	800712c <TIM_OC5_SetConfig>
      break;
 80067a8:	e007      	b.n	80067ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68b9      	ldr	r1, [r7, #8]
 80067b0:	4618      	mov	r0, r3
 80067b2:	f000 fd0d 	bl	80071d0 <TIM_OC6_SetConfig>
      break;
 80067b6:	e000      	b.n	80067ba <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 80067b8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d101      	bne.n	80067ee <HAL_TIM_IC_ConfigChannel+0x1a>
 80067ea:	2302      	movs	r3, #2
 80067ec:	e08a      	b.n	8006904 <HAL_TIM_IC_ConfigChannel+0x130>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2202      	movs	r2, #2
 80067fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d11b      	bne.n	800683c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6818      	ldr	r0, [r3, #0]
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	6819      	ldr	r1, [r3, #0]
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	685a      	ldr	r2, [r3, #4]
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	f000 fd30 	bl	8007278 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	699a      	ldr	r2, [r3, #24]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f022 020c 	bic.w	r2, r2, #12
 8006826:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6999      	ldr	r1, [r3, #24]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	689a      	ldr	r2, [r3, #8]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	430a      	orrs	r2, r1
 8006838:	619a      	str	r2, [r3, #24]
 800683a:	e05a      	b.n	80068f2 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b04      	cmp	r3, #4
 8006840:	d11c      	bne.n	800687c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6818      	ldr	r0, [r3, #0]
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	6819      	ldr	r1, [r3, #0]
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	685a      	ldr	r2, [r3, #4]
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	f000 fd85 	bl	8007360 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	699a      	ldr	r2, [r3, #24]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006864:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	6999      	ldr	r1, [r3, #24]
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	021a      	lsls	r2, r3, #8
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	619a      	str	r2, [r3, #24]
 800687a:	e03a      	b.n	80068f2 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b08      	cmp	r3, #8
 8006880:	d11b      	bne.n	80068ba <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6818      	ldr	r0, [r3, #0]
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	6819      	ldr	r1, [r3, #0]
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	f000 fda2 	bl	80073da <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	69da      	ldr	r2, [r3, #28]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f022 020c 	bic.w	r2, r2, #12
 80068a4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	69d9      	ldr	r1, [r3, #28]
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	430a      	orrs	r2, r1
 80068b6:	61da      	str	r2, [r3, #28]
 80068b8:	e01b      	b.n	80068f2 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6818      	ldr	r0, [r3, #0]
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	6819      	ldr	r1, [r3, #0]
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	f000 fdc2 	bl	8007452 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	69da      	ldr	r2, [r3, #28]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80068dc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	69d9      	ldr	r1, [r3, #28]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	021a      	lsls	r2, r3, #8
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800691e:	2b01      	cmp	r3, #1
 8006920:	d101      	bne.n	8006926 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006922:	2302      	movs	r3, #2
 8006924:	e105      	b.n	8006b32 <HAL_TIM_PWM_ConfigChannel+0x226>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2202      	movs	r2, #2
 8006932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2b14      	cmp	r3, #20
 800693a:	f200 80f0 	bhi.w	8006b1e <HAL_TIM_PWM_ConfigChannel+0x212>
 800693e:	a201      	add	r2, pc, #4	; (adr r2, 8006944 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006944:	08006999 	.word	0x08006999
 8006948:	08006b1f 	.word	0x08006b1f
 800694c:	08006b1f 	.word	0x08006b1f
 8006950:	08006b1f 	.word	0x08006b1f
 8006954:	080069d9 	.word	0x080069d9
 8006958:	08006b1f 	.word	0x08006b1f
 800695c:	08006b1f 	.word	0x08006b1f
 8006960:	08006b1f 	.word	0x08006b1f
 8006964:	08006a1b 	.word	0x08006a1b
 8006968:	08006b1f 	.word	0x08006b1f
 800696c:	08006b1f 	.word	0x08006b1f
 8006970:	08006b1f 	.word	0x08006b1f
 8006974:	08006a5b 	.word	0x08006a5b
 8006978:	08006b1f 	.word	0x08006b1f
 800697c:	08006b1f 	.word	0x08006b1f
 8006980:	08006b1f 	.word	0x08006b1f
 8006984:	08006a9d 	.word	0x08006a9d
 8006988:	08006b1f 	.word	0x08006b1f
 800698c:	08006b1f 	.word	0x08006b1f
 8006990:	08006b1f 	.word	0x08006b1f
 8006994:	08006add 	.word	0x08006add
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68b9      	ldr	r1, [r7, #8]
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 fa0c 	bl	8006dbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	699a      	ldr	r2, [r3, #24]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f042 0208 	orr.w	r2, r2, #8
 80069b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	699a      	ldr	r2, [r3, #24]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f022 0204 	bic.w	r2, r2, #4
 80069c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6999      	ldr	r1, [r3, #24]
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	691a      	ldr	r2, [r3, #16]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	619a      	str	r2, [r3, #24]
      break;
 80069d6:	e0a3      	b.n	8006b20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68b9      	ldr	r1, [r7, #8]
 80069de:	4618      	mov	r0, r3
 80069e0:	f000 fa5e 	bl	8006ea0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	699a      	ldr	r2, [r3, #24]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	699a      	ldr	r2, [r3, #24]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6999      	ldr	r1, [r3, #24]
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	021a      	lsls	r2, r3, #8
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	430a      	orrs	r2, r1
 8006a16:	619a      	str	r2, [r3, #24]
      break;
 8006a18:	e082      	b.n	8006b20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68b9      	ldr	r1, [r7, #8]
 8006a20:	4618      	mov	r0, r3
 8006a22:	f000 fab5 	bl	8006f90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	69da      	ldr	r2, [r3, #28]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f042 0208 	orr.w	r2, r2, #8
 8006a34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	69da      	ldr	r2, [r3, #28]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f022 0204 	bic.w	r2, r2, #4
 8006a44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	69d9      	ldr	r1, [r3, #28]
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	691a      	ldr	r2, [r3, #16]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	430a      	orrs	r2, r1
 8006a56:	61da      	str	r2, [r3, #28]
      break;
 8006a58:	e062      	b.n	8006b20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68b9      	ldr	r1, [r7, #8]
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 fb0b 	bl	800707c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	69da      	ldr	r2, [r3, #28]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	69da      	ldr	r2, [r3, #28]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	69d9      	ldr	r1, [r3, #28]
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	021a      	lsls	r2, r3, #8
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	430a      	orrs	r2, r1
 8006a98:	61da      	str	r2, [r3, #28]
      break;
 8006a9a:	e041      	b.n	8006b20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68b9      	ldr	r1, [r7, #8]
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 fb42 	bl	800712c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f042 0208 	orr.w	r2, r2, #8
 8006ab6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f022 0204 	bic.w	r2, r2, #4
 8006ac6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	691a      	ldr	r2, [r3, #16]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006ada:	e021      	b.n	8006b20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68b9      	ldr	r1, [r7, #8]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 fb74 	bl	80071d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006af6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	021a      	lsls	r2, r3, #8
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b1c:	e000      	b.n	8006b20 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8006b1e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop

08006b3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b84:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f7ff ffe8 	bl	8006b64 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8006b94:	bf00      	nop
 8006b96:	3710      	adds	r7, #16
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba8:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d103      	bne.n	8006bc4 <TIM_DMACaptureCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	771a      	strb	r2, [r3, #28]
 8006bc2:	e019      	b.n	8006bf8 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d103      	bne.n	8006bd6 <TIM_DMACaptureCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2202      	movs	r2, #2
 8006bd2:	771a      	strb	r2, [r3, #28]
 8006bd4:	e010      	b.n	8006bf8 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d103      	bne.n	8006be8 <TIM_DMACaptureCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2204      	movs	r2, #4
 8006be4:	771a      	strb	r2, [r3, #28]
 8006be6:	e007      	b.n	8006bf8 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d102      	bne.n	8006bf8 <TIM_DMACaptureCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2208      	movs	r2, #8
 8006bf6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f7ff ff9f 	bl	8006b3c <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	771a      	strb	r2, [r3, #28]
}
 8006c04:	bf00      	nop
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c18:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d103      	bne.n	8006c34 <TIM_DMACaptureHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	771a      	strb	r2, [r3, #28]
 8006c32:	e019      	b.n	8006c68 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d103      	bne.n	8006c46 <TIM_DMACaptureHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2202      	movs	r2, #2
 8006c42:	771a      	strb	r2, [r3, #28]
 8006c44:	e010      	b.n	8006c68 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d103      	bne.n	8006c58 <TIM_DMACaptureHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2204      	movs	r2, #4
 8006c54:	771a      	strb	r2, [r3, #28]
 8006c56:	e007      	b.n	8006c68 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d102      	bne.n	8006c68 <TIM_DMACaptureHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2208      	movs	r2, #8
 8006c66:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f7ff ff71 	bl	8006b50 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	771a      	strb	r2, [r3, #28]
}
 8006c74:	bf00      	nop
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a40      	ldr	r2, [pc, #256]	; (8006d90 <TIM_Base_SetConfig+0x114>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d013      	beq.n	8006cbc <TIM_Base_SetConfig+0x40>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c9a:	d00f      	beq.n	8006cbc <TIM_Base_SetConfig+0x40>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a3d      	ldr	r2, [pc, #244]	; (8006d94 <TIM_Base_SetConfig+0x118>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d00b      	beq.n	8006cbc <TIM_Base_SetConfig+0x40>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a3c      	ldr	r2, [pc, #240]	; (8006d98 <TIM_Base_SetConfig+0x11c>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d007      	beq.n	8006cbc <TIM_Base_SetConfig+0x40>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a3b      	ldr	r2, [pc, #236]	; (8006d9c <TIM_Base_SetConfig+0x120>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d003      	beq.n	8006cbc <TIM_Base_SetConfig+0x40>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a3a      	ldr	r2, [pc, #232]	; (8006da0 <TIM_Base_SetConfig+0x124>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d108      	bne.n	8006cce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a2f      	ldr	r2, [pc, #188]	; (8006d90 <TIM_Base_SetConfig+0x114>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d02b      	beq.n	8006d2e <TIM_Base_SetConfig+0xb2>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cdc:	d027      	beq.n	8006d2e <TIM_Base_SetConfig+0xb2>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a2c      	ldr	r2, [pc, #176]	; (8006d94 <TIM_Base_SetConfig+0x118>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d023      	beq.n	8006d2e <TIM_Base_SetConfig+0xb2>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a2b      	ldr	r2, [pc, #172]	; (8006d98 <TIM_Base_SetConfig+0x11c>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d01f      	beq.n	8006d2e <TIM_Base_SetConfig+0xb2>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a2a      	ldr	r2, [pc, #168]	; (8006d9c <TIM_Base_SetConfig+0x120>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d01b      	beq.n	8006d2e <TIM_Base_SetConfig+0xb2>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a29      	ldr	r2, [pc, #164]	; (8006da0 <TIM_Base_SetConfig+0x124>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d017      	beq.n	8006d2e <TIM_Base_SetConfig+0xb2>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a28      	ldr	r2, [pc, #160]	; (8006da4 <TIM_Base_SetConfig+0x128>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d013      	beq.n	8006d2e <TIM_Base_SetConfig+0xb2>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a27      	ldr	r2, [pc, #156]	; (8006da8 <TIM_Base_SetConfig+0x12c>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d00f      	beq.n	8006d2e <TIM_Base_SetConfig+0xb2>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a26      	ldr	r2, [pc, #152]	; (8006dac <TIM_Base_SetConfig+0x130>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d00b      	beq.n	8006d2e <TIM_Base_SetConfig+0xb2>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a25      	ldr	r2, [pc, #148]	; (8006db0 <TIM_Base_SetConfig+0x134>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d007      	beq.n	8006d2e <TIM_Base_SetConfig+0xb2>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4a24      	ldr	r2, [pc, #144]	; (8006db4 <TIM_Base_SetConfig+0x138>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d003      	beq.n	8006d2e <TIM_Base_SetConfig+0xb2>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a23      	ldr	r2, [pc, #140]	; (8006db8 <TIM_Base_SetConfig+0x13c>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d108      	bne.n	8006d40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	689a      	ldr	r2, [r3, #8]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a0a      	ldr	r2, [pc, #40]	; (8006d90 <TIM_Base_SetConfig+0x114>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d003      	beq.n	8006d74 <TIM_Base_SetConfig+0xf8>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a0c      	ldr	r2, [pc, #48]	; (8006da0 <TIM_Base_SetConfig+0x124>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d103      	bne.n	8006d7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	691a      	ldr	r2, [r3, #16]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	615a      	str	r2, [r3, #20]
}
 8006d82:	bf00      	nop
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	40010000 	.word	0x40010000
 8006d94:	40000400 	.word	0x40000400
 8006d98:	40000800 	.word	0x40000800
 8006d9c:	40000c00 	.word	0x40000c00
 8006da0:	40010400 	.word	0x40010400
 8006da4:	40014000 	.word	0x40014000
 8006da8:	40014400 	.word	0x40014400
 8006dac:	40014800 	.word	0x40014800
 8006db0:	40001800 	.word	0x40001800
 8006db4:	40001c00 	.word	0x40001c00
 8006db8:	40002000 	.word	0x40002000

08006dbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b087      	sub	sp, #28
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	f023 0201 	bic.w	r2, r3, #1
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	4b2b      	ldr	r3, [pc, #172]	; (8006e94 <TIM_OC1_SetConfig+0xd8>)
 8006de8:	4013      	ands	r3, r2
 8006dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f023 0303 	bic.w	r3, r3, #3
 8006df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	f023 0302 	bic.w	r3, r3, #2
 8006e04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a21      	ldr	r2, [pc, #132]	; (8006e98 <TIM_OC1_SetConfig+0xdc>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d003      	beq.n	8006e20 <TIM_OC1_SetConfig+0x64>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a20      	ldr	r2, [pc, #128]	; (8006e9c <TIM_OC1_SetConfig+0xe0>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d10c      	bne.n	8006e3a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	f023 0308 	bic.w	r3, r3, #8
 8006e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f023 0304 	bic.w	r3, r3, #4
 8006e38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a16      	ldr	r2, [pc, #88]	; (8006e98 <TIM_OC1_SetConfig+0xdc>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d003      	beq.n	8006e4a <TIM_OC1_SetConfig+0x8e>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a15      	ldr	r2, [pc, #84]	; (8006e9c <TIM_OC1_SetConfig+0xe0>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d111      	bne.n	8006e6e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	621a      	str	r2, [r3, #32]
}
 8006e88:	bf00      	nop
 8006e8a:	371c      	adds	r7, #28
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr
 8006e94:	fffeff8f 	.word	0xfffeff8f
 8006e98:	40010000 	.word	0x40010000
 8006e9c:	40010400 	.word	0x40010400

08006ea0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b087      	sub	sp, #28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	f023 0210 	bic.w	r2, r3, #16
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	4b2e      	ldr	r3, [pc, #184]	; (8006f84 <TIM_OC2_SetConfig+0xe4>)
 8006ecc:	4013      	ands	r3, r2
 8006ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ed6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	021b      	lsls	r3, r3, #8
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f023 0320 	bic.w	r3, r3, #32
 8006eea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	011b      	lsls	r3, r3, #4
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a23      	ldr	r2, [pc, #140]	; (8006f88 <TIM_OC2_SetConfig+0xe8>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d003      	beq.n	8006f08 <TIM_OC2_SetConfig+0x68>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a22      	ldr	r2, [pc, #136]	; (8006f8c <TIM_OC2_SetConfig+0xec>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d10d      	bne.n	8006f24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	011b      	lsls	r3, r3, #4
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a18      	ldr	r2, [pc, #96]	; (8006f88 <TIM_OC2_SetConfig+0xe8>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d003      	beq.n	8006f34 <TIM_OC2_SetConfig+0x94>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a17      	ldr	r2, [pc, #92]	; (8006f8c <TIM_OC2_SetConfig+0xec>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d113      	bne.n	8006f5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	621a      	str	r2, [r3, #32]
}
 8006f76:	bf00      	nop
 8006f78:	371c      	adds	r7, #28
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	feff8fff 	.word	0xfeff8fff
 8006f88:	40010000 	.word	0x40010000
 8006f8c:	40010400 	.word	0x40010400

08006f90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b087      	sub	sp, #28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	69db      	ldr	r3, [r3, #28]
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	4b2d      	ldr	r3, [pc, #180]	; (8007070 <TIM_OC3_SetConfig+0xe0>)
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f023 0303 	bic.w	r3, r3, #3
 8006fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	021b      	lsls	r3, r3, #8
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a22      	ldr	r2, [pc, #136]	; (8007074 <TIM_OC3_SetConfig+0xe4>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d003      	beq.n	8006ff6 <TIM_OC3_SetConfig+0x66>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a21      	ldr	r2, [pc, #132]	; (8007078 <TIM_OC3_SetConfig+0xe8>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d10d      	bne.n	8007012 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ffc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	021b      	lsls	r3, r3, #8
 8007004:	697a      	ldr	r2, [r7, #20]
 8007006:	4313      	orrs	r3, r2
 8007008:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007010:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a17      	ldr	r2, [pc, #92]	; (8007074 <TIM_OC3_SetConfig+0xe4>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d003      	beq.n	8007022 <TIM_OC3_SetConfig+0x92>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a16      	ldr	r2, [pc, #88]	; (8007078 <TIM_OC3_SetConfig+0xe8>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d113      	bne.n	800704a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007028:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007030:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	011b      	lsls	r3, r3, #4
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	4313      	orrs	r3, r2
 800703c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	699b      	ldr	r3, [r3, #24]
 8007042:	011b      	lsls	r3, r3, #4
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	4313      	orrs	r3, r2
 8007048:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	685a      	ldr	r2, [r3, #4]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	621a      	str	r2, [r3, #32]
}
 8007064:	bf00      	nop
 8007066:	371c      	adds	r7, #28
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr
 8007070:	fffeff8f 	.word	0xfffeff8f
 8007074:	40010000 	.word	0x40010000
 8007078:	40010400 	.word	0x40010400

0800707c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800707c:	b480      	push	{r7}
 800707e:	b087      	sub	sp, #28
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a1b      	ldr	r3, [r3, #32]
 800708a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	69db      	ldr	r3, [r3, #28]
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	4b1e      	ldr	r3, [pc, #120]	; (8007120 <TIM_OC4_SetConfig+0xa4>)
 80070a8:	4013      	ands	r3, r2
 80070aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	021b      	lsls	r3, r3, #8
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	4313      	orrs	r3, r2
 80070be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	031b      	lsls	r3, r3, #12
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a13      	ldr	r2, [pc, #76]	; (8007124 <TIM_OC4_SetConfig+0xa8>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d003      	beq.n	80070e4 <TIM_OC4_SetConfig+0x68>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a12      	ldr	r2, [pc, #72]	; (8007128 <TIM_OC4_SetConfig+0xac>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d109      	bne.n	80070f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	695b      	ldr	r3, [r3, #20]
 80070f0:	019b      	lsls	r3, r3, #6
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	685a      	ldr	r2, [r3, #4]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	621a      	str	r2, [r3, #32]
}
 8007112:	bf00      	nop
 8007114:	371c      	adds	r7, #28
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	feff8fff 	.word	0xfeff8fff
 8007124:	40010000 	.word	0x40010000
 8007128:	40010400 	.word	0x40010400

0800712c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800712c:	b480      	push	{r7}
 800712e:	b087      	sub	sp, #28
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	4b1b      	ldr	r3, [pc, #108]	; (80071c4 <TIM_OC5_SetConfig+0x98>)
 8007158:	4013      	ands	r3, r2
 800715a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	4313      	orrs	r3, r2
 8007164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800716c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	041b      	lsls	r3, r3, #16
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	4313      	orrs	r3, r2
 8007178:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a12      	ldr	r2, [pc, #72]	; (80071c8 <TIM_OC5_SetConfig+0x9c>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d003      	beq.n	800718a <TIM_OC5_SetConfig+0x5e>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a11      	ldr	r2, [pc, #68]	; (80071cc <TIM_OC5_SetConfig+0xa0>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d109      	bne.n	800719e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007190:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	021b      	lsls	r3, r3, #8
 8007198:	697a      	ldr	r2, [r7, #20]
 800719a:	4313      	orrs	r3, r2
 800719c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	697a      	ldr	r2, [r7, #20]
 80071a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	685a      	ldr	r2, [r3, #4]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	693a      	ldr	r2, [r7, #16]
 80071b6:	621a      	str	r2, [r3, #32]
}
 80071b8:	bf00      	nop
 80071ba:	371c      	adds	r7, #28
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr
 80071c4:	fffeff8f 	.word	0xfffeff8f
 80071c8:	40010000 	.word	0x40010000
 80071cc:	40010400 	.word	0x40010400

080071d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b087      	sub	sp, #28
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	4b1c      	ldr	r3, [pc, #112]	; (800726c <TIM_OC6_SetConfig+0x9c>)
 80071fc:	4013      	ands	r3, r2
 80071fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	021b      	lsls	r3, r3, #8
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	4313      	orrs	r3, r2
 800720a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007212:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	051b      	lsls	r3, r3, #20
 800721a:	693a      	ldr	r2, [r7, #16]
 800721c:	4313      	orrs	r3, r2
 800721e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a13      	ldr	r2, [pc, #76]	; (8007270 <TIM_OC6_SetConfig+0xa0>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d003      	beq.n	8007230 <TIM_OC6_SetConfig+0x60>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a12      	ldr	r2, [pc, #72]	; (8007274 <TIM_OC6_SetConfig+0xa4>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d109      	bne.n	8007244 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007236:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	695b      	ldr	r3, [r3, #20]
 800723c:	029b      	lsls	r3, r3, #10
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	4313      	orrs	r3, r2
 8007242:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	685a      	ldr	r2, [r3, #4]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	693a      	ldr	r2, [r7, #16]
 800725c:	621a      	str	r2, [r3, #32]
}
 800725e:	bf00      	nop
 8007260:	371c      	adds	r7, #28
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	feff8fff 	.word	0xfeff8fff
 8007270:	40010000 	.word	0x40010000
 8007274:	40010400 	.word	0x40010400

08007278 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007278:	b480      	push	{r7}
 800727a:	b087      	sub	sp, #28
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
 8007284:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	f023 0201 	bic.w	r2, r3, #1
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6a1b      	ldr	r3, [r3, #32]
 800729c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	4a28      	ldr	r2, [pc, #160]	; (8007344 <TIM_TI1_SetConfig+0xcc>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d01b      	beq.n	80072de <TIM_TI1_SetConfig+0x66>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072ac:	d017      	beq.n	80072de <TIM_TI1_SetConfig+0x66>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	4a25      	ldr	r2, [pc, #148]	; (8007348 <TIM_TI1_SetConfig+0xd0>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d013      	beq.n	80072de <TIM_TI1_SetConfig+0x66>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	4a24      	ldr	r2, [pc, #144]	; (800734c <TIM_TI1_SetConfig+0xd4>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d00f      	beq.n	80072de <TIM_TI1_SetConfig+0x66>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	4a23      	ldr	r2, [pc, #140]	; (8007350 <TIM_TI1_SetConfig+0xd8>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d00b      	beq.n	80072de <TIM_TI1_SetConfig+0x66>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	4a22      	ldr	r2, [pc, #136]	; (8007354 <TIM_TI1_SetConfig+0xdc>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d007      	beq.n	80072de <TIM_TI1_SetConfig+0x66>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	4a21      	ldr	r2, [pc, #132]	; (8007358 <TIM_TI1_SetConfig+0xe0>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d003      	beq.n	80072de <TIM_TI1_SetConfig+0x66>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	4a20      	ldr	r2, [pc, #128]	; (800735c <TIM_TI1_SetConfig+0xe4>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d101      	bne.n	80072e2 <TIM_TI1_SetConfig+0x6a>
 80072de:	2301      	movs	r3, #1
 80072e0:	e000      	b.n	80072e4 <TIM_TI1_SetConfig+0x6c>
 80072e2:	2300      	movs	r3, #0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d008      	beq.n	80072fa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	f023 0303 	bic.w	r3, r3, #3
 80072ee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	617b      	str	r3, [r7, #20]
 80072f8:	e003      	b.n	8007302 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f043 0301 	orr.w	r3, r3, #1
 8007300:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007308:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	011b      	lsls	r3, r3, #4
 800730e:	b2db      	uxtb	r3, r3
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	4313      	orrs	r3, r2
 8007314:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	f023 030a 	bic.w	r3, r3, #10
 800731c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	f003 030a 	and.w	r3, r3, #10
 8007324:	693a      	ldr	r2, [r7, #16]
 8007326:	4313      	orrs	r3, r2
 8007328:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	697a      	ldr	r2, [r7, #20]
 800732e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	693a      	ldr	r2, [r7, #16]
 8007334:	621a      	str	r2, [r3, #32]
}
 8007336:	bf00      	nop
 8007338:	371c      	adds	r7, #28
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	40010000 	.word	0x40010000
 8007348:	40000400 	.word	0x40000400
 800734c:	40000800 	.word	0x40000800
 8007350:	40000c00 	.word	0x40000c00
 8007354:	40010400 	.word	0x40010400
 8007358:	40014000 	.word	0x40014000
 800735c:	40001800 	.word	0x40001800

08007360 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007360:	b480      	push	{r7}
 8007362:	b087      	sub	sp, #28
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	607a      	str	r2, [r7, #4]
 800736c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	f023 0210 	bic.w	r2, r3, #16
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6a1b      	ldr	r3, [r3, #32]
 8007384:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800738c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	021b      	lsls	r3, r3, #8
 8007392:	697a      	ldr	r2, [r7, #20]
 8007394:	4313      	orrs	r3, r2
 8007396:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800739e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	031b      	lsls	r3, r3, #12
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073b2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	011b      	lsls	r3, r3, #4
 80073b8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	4313      	orrs	r3, r2
 80073c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	697a      	ldr	r2, [r7, #20]
 80073c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	621a      	str	r2, [r3, #32]
}
 80073ce:	bf00      	nop
 80073d0:	371c      	adds	r7, #28
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80073da:	b480      	push	{r7}
 80073dc:	b087      	sub	sp, #28
 80073de:	af00      	add	r7, sp, #0
 80073e0:	60f8      	str	r0, [r7, #12]
 80073e2:	60b9      	str	r1, [r7, #8]
 80073e4:	607a      	str	r2, [r7, #4]
 80073e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6a1b      	ldr	r3, [r3, #32]
 80073ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	69db      	ldr	r3, [r3, #28]
 80073f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	f023 0303 	bic.w	r3, r3, #3
 8007406:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4313      	orrs	r3, r2
 800740e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007416:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	011b      	lsls	r3, r3, #4
 800741c:	b2db      	uxtb	r3, r3
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	4313      	orrs	r3, r2
 8007422:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800742a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	021b      	lsls	r3, r3, #8
 8007430:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	4313      	orrs	r3, r2
 8007438:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	693a      	ldr	r2, [r7, #16]
 8007444:	621a      	str	r2, [r3, #32]
}
 8007446:	bf00      	nop
 8007448:	371c      	adds	r7, #28
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007452:	b480      	push	{r7}
 8007454:	b087      	sub	sp, #28
 8007456:	af00      	add	r7, sp, #0
 8007458:	60f8      	str	r0, [r7, #12]
 800745a:	60b9      	str	r1, [r7, #8]
 800745c:	607a      	str	r2, [r7, #4]
 800745e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6a1b      	ldr	r3, [r3, #32]
 8007464:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	69db      	ldr	r3, [r3, #28]
 8007470:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800747e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	021b      	lsls	r3, r3, #8
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	4313      	orrs	r3, r2
 8007488:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007490:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	031b      	lsls	r3, r3, #12
 8007496:	b29b      	uxth	r3, r3
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	4313      	orrs	r3, r2
 800749c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80074a4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	031b      	lsls	r3, r3, #12
 80074aa:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80074ae:	693a      	ldr	r2, [r7, #16]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	621a      	str	r2, [r3, #32]
}
 80074c0:	bf00      	nop
 80074c2:	371c      	adds	r7, #28
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b087      	sub	sp, #28
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f003 031f 	and.w	r3, r3, #31
 80074de:	2201      	movs	r2, #1
 80074e0:	fa02 f303 	lsl.w	r3, r2, r3
 80074e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6a1a      	ldr	r2, [r3, #32]
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	43db      	mvns	r3, r3
 80074ee:	401a      	ands	r2, r3
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6a1a      	ldr	r2, [r3, #32]
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	f003 031f 	and.w	r3, r3, #31
 80074fe:	6879      	ldr	r1, [r7, #4]
 8007500:	fa01 f303 	lsl.w	r3, r1, r3
 8007504:	431a      	orrs	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	621a      	str	r2, [r3, #32]
}
 800750a:	bf00      	nop
 800750c:	371c      	adds	r7, #28
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
	...

08007518 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007528:	2b01      	cmp	r3, #1
 800752a:	d101      	bne.n	8007530 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800752c:	2302      	movs	r3, #2
 800752e:	e06d      	b.n	800760c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2202      	movs	r2, #2
 800753c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a30      	ldr	r2, [pc, #192]	; (8007618 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d004      	beq.n	8007564 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a2f      	ldr	r2, [pc, #188]	; (800761c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d108      	bne.n	8007576 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800756a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	4313      	orrs	r3, r2
 8007574:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800757c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	4313      	orrs	r3, r2
 8007586:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a20      	ldr	r2, [pc, #128]	; (8007618 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d022      	beq.n	80075e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075a2:	d01d      	beq.n	80075e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a1d      	ldr	r2, [pc, #116]	; (8007620 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d018      	beq.n	80075e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a1c      	ldr	r2, [pc, #112]	; (8007624 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d013      	beq.n	80075e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a1a      	ldr	r2, [pc, #104]	; (8007628 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d00e      	beq.n	80075e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a15      	ldr	r2, [pc, #84]	; (800761c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d009      	beq.n	80075e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a16      	ldr	r2, [pc, #88]	; (800762c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d004      	beq.n	80075e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a15      	ldr	r2, [pc, #84]	; (8007630 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d10c      	bne.n	80075fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr
 8007618:	40010000 	.word	0x40010000
 800761c:	40010400 	.word	0x40010400
 8007620:	40000400 	.word	0x40000400
 8007624:	40000800 	.word	0x40000800
 8007628:	40000c00 	.word	0x40000c00
 800762c:	40014000 	.word	0x40014000
 8007630:	40001800 	.word	0x40001800

08007634 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d101      	bne.n	8007646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e040      	b.n	80076c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800764a:	2b00      	cmp	r3, #0
 800764c:	d106      	bne.n	800765c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f7fa fae6 	bl	8001c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2224      	movs	r2, #36	; 0x24
 8007660:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f022 0201 	bic.w	r2, r2, #1
 8007670:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f82c 	bl	80076d0 <UART_SetConfig>
 8007678:	4603      	mov	r3, r0
 800767a:	2b01      	cmp	r3, #1
 800767c:	d101      	bne.n	8007682 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e022      	b.n	80076c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007686:	2b00      	cmp	r3, #0
 8007688:	d002      	beq.n	8007690 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 faca 	bl	8007c24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	685a      	ldr	r2, [r3, #4]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800769e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	689a      	ldr	r2, [r3, #8]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f042 0201 	orr.w	r2, r2, #1
 80076be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fb51 	bl	8007d68 <UART_CheckIdleState>
 80076c6:	4603      	mov	r3, r0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3708      	adds	r7, #8
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b088      	sub	sp, #32
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80076d8:	2300      	movs	r3, #0
 80076da:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80076dc:	2300      	movs	r3, #0
 80076de:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	689a      	ldr	r2, [r3, #8]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	431a      	orrs	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	431a      	orrs	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	69db      	ldr	r3, [r3, #28]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	4bb1      	ldr	r3, [pc, #708]	; (80079c4 <UART_SetConfig+0x2f4>)
 8007700:	4013      	ands	r3, r2
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	6812      	ldr	r2, [r2, #0]
 8007706:	6939      	ldr	r1, [r7, #16]
 8007708:	430b      	orrs	r3, r1
 800770a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	68da      	ldr	r2, [r3, #12]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	430a      	orrs	r2, r1
 8007720:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a1b      	ldr	r3, [r3, #32]
 800772c:	693a      	ldr	r2, [r7, #16]
 800772e:	4313      	orrs	r3, r2
 8007730:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	430a      	orrs	r2, r1
 8007744:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a9f      	ldr	r2, [pc, #636]	; (80079c8 <UART_SetConfig+0x2f8>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d121      	bne.n	8007794 <UART_SetConfig+0xc4>
 8007750:	4b9e      	ldr	r3, [pc, #632]	; (80079cc <UART_SetConfig+0x2fc>)
 8007752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007756:	f003 0303 	and.w	r3, r3, #3
 800775a:	2b03      	cmp	r3, #3
 800775c:	d816      	bhi.n	800778c <UART_SetConfig+0xbc>
 800775e:	a201      	add	r2, pc, #4	; (adr r2, 8007764 <UART_SetConfig+0x94>)
 8007760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007764:	08007775 	.word	0x08007775
 8007768:	08007781 	.word	0x08007781
 800776c:	0800777b 	.word	0x0800777b
 8007770:	08007787 	.word	0x08007787
 8007774:	2301      	movs	r3, #1
 8007776:	77fb      	strb	r3, [r7, #31]
 8007778:	e151      	b.n	8007a1e <UART_SetConfig+0x34e>
 800777a:	2302      	movs	r3, #2
 800777c:	77fb      	strb	r3, [r7, #31]
 800777e:	e14e      	b.n	8007a1e <UART_SetConfig+0x34e>
 8007780:	2304      	movs	r3, #4
 8007782:	77fb      	strb	r3, [r7, #31]
 8007784:	e14b      	b.n	8007a1e <UART_SetConfig+0x34e>
 8007786:	2308      	movs	r3, #8
 8007788:	77fb      	strb	r3, [r7, #31]
 800778a:	e148      	b.n	8007a1e <UART_SetConfig+0x34e>
 800778c:	2310      	movs	r3, #16
 800778e:	77fb      	strb	r3, [r7, #31]
 8007790:	bf00      	nop
 8007792:	e144      	b.n	8007a1e <UART_SetConfig+0x34e>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a8d      	ldr	r2, [pc, #564]	; (80079d0 <UART_SetConfig+0x300>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d134      	bne.n	8007808 <UART_SetConfig+0x138>
 800779e:	4b8b      	ldr	r3, [pc, #556]	; (80079cc <UART_SetConfig+0x2fc>)
 80077a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077a4:	f003 030c 	and.w	r3, r3, #12
 80077a8:	2b0c      	cmp	r3, #12
 80077aa:	d829      	bhi.n	8007800 <UART_SetConfig+0x130>
 80077ac:	a201      	add	r2, pc, #4	; (adr r2, 80077b4 <UART_SetConfig+0xe4>)
 80077ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b2:	bf00      	nop
 80077b4:	080077e9 	.word	0x080077e9
 80077b8:	08007801 	.word	0x08007801
 80077bc:	08007801 	.word	0x08007801
 80077c0:	08007801 	.word	0x08007801
 80077c4:	080077f5 	.word	0x080077f5
 80077c8:	08007801 	.word	0x08007801
 80077cc:	08007801 	.word	0x08007801
 80077d0:	08007801 	.word	0x08007801
 80077d4:	080077ef 	.word	0x080077ef
 80077d8:	08007801 	.word	0x08007801
 80077dc:	08007801 	.word	0x08007801
 80077e0:	08007801 	.word	0x08007801
 80077e4:	080077fb 	.word	0x080077fb
 80077e8:	2300      	movs	r3, #0
 80077ea:	77fb      	strb	r3, [r7, #31]
 80077ec:	e117      	b.n	8007a1e <UART_SetConfig+0x34e>
 80077ee:	2302      	movs	r3, #2
 80077f0:	77fb      	strb	r3, [r7, #31]
 80077f2:	e114      	b.n	8007a1e <UART_SetConfig+0x34e>
 80077f4:	2304      	movs	r3, #4
 80077f6:	77fb      	strb	r3, [r7, #31]
 80077f8:	e111      	b.n	8007a1e <UART_SetConfig+0x34e>
 80077fa:	2308      	movs	r3, #8
 80077fc:	77fb      	strb	r3, [r7, #31]
 80077fe:	e10e      	b.n	8007a1e <UART_SetConfig+0x34e>
 8007800:	2310      	movs	r3, #16
 8007802:	77fb      	strb	r3, [r7, #31]
 8007804:	bf00      	nop
 8007806:	e10a      	b.n	8007a1e <UART_SetConfig+0x34e>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a71      	ldr	r2, [pc, #452]	; (80079d4 <UART_SetConfig+0x304>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d120      	bne.n	8007854 <UART_SetConfig+0x184>
 8007812:	4b6e      	ldr	r3, [pc, #440]	; (80079cc <UART_SetConfig+0x2fc>)
 8007814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007818:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800781c:	2b10      	cmp	r3, #16
 800781e:	d00f      	beq.n	8007840 <UART_SetConfig+0x170>
 8007820:	2b10      	cmp	r3, #16
 8007822:	d802      	bhi.n	800782a <UART_SetConfig+0x15a>
 8007824:	2b00      	cmp	r3, #0
 8007826:	d005      	beq.n	8007834 <UART_SetConfig+0x164>
 8007828:	e010      	b.n	800784c <UART_SetConfig+0x17c>
 800782a:	2b20      	cmp	r3, #32
 800782c:	d005      	beq.n	800783a <UART_SetConfig+0x16a>
 800782e:	2b30      	cmp	r3, #48	; 0x30
 8007830:	d009      	beq.n	8007846 <UART_SetConfig+0x176>
 8007832:	e00b      	b.n	800784c <UART_SetConfig+0x17c>
 8007834:	2300      	movs	r3, #0
 8007836:	77fb      	strb	r3, [r7, #31]
 8007838:	e0f1      	b.n	8007a1e <UART_SetConfig+0x34e>
 800783a:	2302      	movs	r3, #2
 800783c:	77fb      	strb	r3, [r7, #31]
 800783e:	e0ee      	b.n	8007a1e <UART_SetConfig+0x34e>
 8007840:	2304      	movs	r3, #4
 8007842:	77fb      	strb	r3, [r7, #31]
 8007844:	e0eb      	b.n	8007a1e <UART_SetConfig+0x34e>
 8007846:	2308      	movs	r3, #8
 8007848:	77fb      	strb	r3, [r7, #31]
 800784a:	e0e8      	b.n	8007a1e <UART_SetConfig+0x34e>
 800784c:	2310      	movs	r3, #16
 800784e:	77fb      	strb	r3, [r7, #31]
 8007850:	bf00      	nop
 8007852:	e0e4      	b.n	8007a1e <UART_SetConfig+0x34e>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a5f      	ldr	r2, [pc, #380]	; (80079d8 <UART_SetConfig+0x308>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d120      	bne.n	80078a0 <UART_SetConfig+0x1d0>
 800785e:	4b5b      	ldr	r3, [pc, #364]	; (80079cc <UART_SetConfig+0x2fc>)
 8007860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007864:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007868:	2b40      	cmp	r3, #64	; 0x40
 800786a:	d00f      	beq.n	800788c <UART_SetConfig+0x1bc>
 800786c:	2b40      	cmp	r3, #64	; 0x40
 800786e:	d802      	bhi.n	8007876 <UART_SetConfig+0x1a6>
 8007870:	2b00      	cmp	r3, #0
 8007872:	d005      	beq.n	8007880 <UART_SetConfig+0x1b0>
 8007874:	e010      	b.n	8007898 <UART_SetConfig+0x1c8>
 8007876:	2b80      	cmp	r3, #128	; 0x80
 8007878:	d005      	beq.n	8007886 <UART_SetConfig+0x1b6>
 800787a:	2bc0      	cmp	r3, #192	; 0xc0
 800787c:	d009      	beq.n	8007892 <UART_SetConfig+0x1c2>
 800787e:	e00b      	b.n	8007898 <UART_SetConfig+0x1c8>
 8007880:	2300      	movs	r3, #0
 8007882:	77fb      	strb	r3, [r7, #31]
 8007884:	e0cb      	b.n	8007a1e <UART_SetConfig+0x34e>
 8007886:	2302      	movs	r3, #2
 8007888:	77fb      	strb	r3, [r7, #31]
 800788a:	e0c8      	b.n	8007a1e <UART_SetConfig+0x34e>
 800788c:	2304      	movs	r3, #4
 800788e:	77fb      	strb	r3, [r7, #31]
 8007890:	e0c5      	b.n	8007a1e <UART_SetConfig+0x34e>
 8007892:	2308      	movs	r3, #8
 8007894:	77fb      	strb	r3, [r7, #31]
 8007896:	e0c2      	b.n	8007a1e <UART_SetConfig+0x34e>
 8007898:	2310      	movs	r3, #16
 800789a:	77fb      	strb	r3, [r7, #31]
 800789c:	bf00      	nop
 800789e:	e0be      	b.n	8007a1e <UART_SetConfig+0x34e>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a4d      	ldr	r2, [pc, #308]	; (80079dc <UART_SetConfig+0x30c>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d124      	bne.n	80078f4 <UART_SetConfig+0x224>
 80078aa:	4b48      	ldr	r3, [pc, #288]	; (80079cc <UART_SetConfig+0x2fc>)
 80078ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078b8:	d012      	beq.n	80078e0 <UART_SetConfig+0x210>
 80078ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078be:	d802      	bhi.n	80078c6 <UART_SetConfig+0x1f6>
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d007      	beq.n	80078d4 <UART_SetConfig+0x204>
 80078c4:	e012      	b.n	80078ec <UART_SetConfig+0x21c>
 80078c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078ca:	d006      	beq.n	80078da <UART_SetConfig+0x20a>
 80078cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078d0:	d009      	beq.n	80078e6 <UART_SetConfig+0x216>
 80078d2:	e00b      	b.n	80078ec <UART_SetConfig+0x21c>
 80078d4:	2300      	movs	r3, #0
 80078d6:	77fb      	strb	r3, [r7, #31]
 80078d8:	e0a1      	b.n	8007a1e <UART_SetConfig+0x34e>
 80078da:	2302      	movs	r3, #2
 80078dc:	77fb      	strb	r3, [r7, #31]
 80078de:	e09e      	b.n	8007a1e <UART_SetConfig+0x34e>
 80078e0:	2304      	movs	r3, #4
 80078e2:	77fb      	strb	r3, [r7, #31]
 80078e4:	e09b      	b.n	8007a1e <UART_SetConfig+0x34e>
 80078e6:	2308      	movs	r3, #8
 80078e8:	77fb      	strb	r3, [r7, #31]
 80078ea:	e098      	b.n	8007a1e <UART_SetConfig+0x34e>
 80078ec:	2310      	movs	r3, #16
 80078ee:	77fb      	strb	r3, [r7, #31]
 80078f0:	bf00      	nop
 80078f2:	e094      	b.n	8007a1e <UART_SetConfig+0x34e>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a39      	ldr	r2, [pc, #228]	; (80079e0 <UART_SetConfig+0x310>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d124      	bne.n	8007948 <UART_SetConfig+0x278>
 80078fe:	4b33      	ldr	r3, [pc, #204]	; (80079cc <UART_SetConfig+0x2fc>)
 8007900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007904:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800790c:	d012      	beq.n	8007934 <UART_SetConfig+0x264>
 800790e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007912:	d802      	bhi.n	800791a <UART_SetConfig+0x24a>
 8007914:	2b00      	cmp	r3, #0
 8007916:	d007      	beq.n	8007928 <UART_SetConfig+0x258>
 8007918:	e012      	b.n	8007940 <UART_SetConfig+0x270>
 800791a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800791e:	d006      	beq.n	800792e <UART_SetConfig+0x25e>
 8007920:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007924:	d009      	beq.n	800793a <UART_SetConfig+0x26a>
 8007926:	e00b      	b.n	8007940 <UART_SetConfig+0x270>
 8007928:	2301      	movs	r3, #1
 800792a:	77fb      	strb	r3, [r7, #31]
 800792c:	e077      	b.n	8007a1e <UART_SetConfig+0x34e>
 800792e:	2302      	movs	r3, #2
 8007930:	77fb      	strb	r3, [r7, #31]
 8007932:	e074      	b.n	8007a1e <UART_SetConfig+0x34e>
 8007934:	2304      	movs	r3, #4
 8007936:	77fb      	strb	r3, [r7, #31]
 8007938:	e071      	b.n	8007a1e <UART_SetConfig+0x34e>
 800793a:	2308      	movs	r3, #8
 800793c:	77fb      	strb	r3, [r7, #31]
 800793e:	e06e      	b.n	8007a1e <UART_SetConfig+0x34e>
 8007940:	2310      	movs	r3, #16
 8007942:	77fb      	strb	r3, [r7, #31]
 8007944:	bf00      	nop
 8007946:	e06a      	b.n	8007a1e <UART_SetConfig+0x34e>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a25      	ldr	r2, [pc, #148]	; (80079e4 <UART_SetConfig+0x314>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d124      	bne.n	800799c <UART_SetConfig+0x2cc>
 8007952:	4b1e      	ldr	r3, [pc, #120]	; (80079cc <UART_SetConfig+0x2fc>)
 8007954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007958:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800795c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007960:	d012      	beq.n	8007988 <UART_SetConfig+0x2b8>
 8007962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007966:	d802      	bhi.n	800796e <UART_SetConfig+0x29e>
 8007968:	2b00      	cmp	r3, #0
 800796a:	d007      	beq.n	800797c <UART_SetConfig+0x2ac>
 800796c:	e012      	b.n	8007994 <UART_SetConfig+0x2c4>
 800796e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007972:	d006      	beq.n	8007982 <UART_SetConfig+0x2b2>
 8007974:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007978:	d009      	beq.n	800798e <UART_SetConfig+0x2be>
 800797a:	e00b      	b.n	8007994 <UART_SetConfig+0x2c4>
 800797c:	2300      	movs	r3, #0
 800797e:	77fb      	strb	r3, [r7, #31]
 8007980:	e04d      	b.n	8007a1e <UART_SetConfig+0x34e>
 8007982:	2302      	movs	r3, #2
 8007984:	77fb      	strb	r3, [r7, #31]
 8007986:	e04a      	b.n	8007a1e <UART_SetConfig+0x34e>
 8007988:	2304      	movs	r3, #4
 800798a:	77fb      	strb	r3, [r7, #31]
 800798c:	e047      	b.n	8007a1e <UART_SetConfig+0x34e>
 800798e:	2308      	movs	r3, #8
 8007990:	77fb      	strb	r3, [r7, #31]
 8007992:	e044      	b.n	8007a1e <UART_SetConfig+0x34e>
 8007994:	2310      	movs	r3, #16
 8007996:	77fb      	strb	r3, [r7, #31]
 8007998:	bf00      	nop
 800799a:	e040      	b.n	8007a1e <UART_SetConfig+0x34e>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a11      	ldr	r2, [pc, #68]	; (80079e8 <UART_SetConfig+0x318>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d139      	bne.n	8007a1a <UART_SetConfig+0x34a>
 80079a6:	4b09      	ldr	r3, [pc, #36]	; (80079cc <UART_SetConfig+0x2fc>)
 80079a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80079b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079b4:	d027      	beq.n	8007a06 <UART_SetConfig+0x336>
 80079b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079ba:	d817      	bhi.n	80079ec <UART_SetConfig+0x31c>
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d01c      	beq.n	80079fa <UART_SetConfig+0x32a>
 80079c0:	e027      	b.n	8007a12 <UART_SetConfig+0x342>
 80079c2:	bf00      	nop
 80079c4:	efff69f3 	.word	0xefff69f3
 80079c8:	40011000 	.word	0x40011000
 80079cc:	40023800 	.word	0x40023800
 80079d0:	40004400 	.word	0x40004400
 80079d4:	40004800 	.word	0x40004800
 80079d8:	40004c00 	.word	0x40004c00
 80079dc:	40005000 	.word	0x40005000
 80079e0:	40011400 	.word	0x40011400
 80079e4:	40007800 	.word	0x40007800
 80079e8:	40007c00 	.word	0x40007c00
 80079ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079f0:	d006      	beq.n	8007a00 <UART_SetConfig+0x330>
 80079f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80079f6:	d009      	beq.n	8007a0c <UART_SetConfig+0x33c>
 80079f8:	e00b      	b.n	8007a12 <UART_SetConfig+0x342>
 80079fa:	2300      	movs	r3, #0
 80079fc:	77fb      	strb	r3, [r7, #31]
 80079fe:	e00e      	b.n	8007a1e <UART_SetConfig+0x34e>
 8007a00:	2302      	movs	r3, #2
 8007a02:	77fb      	strb	r3, [r7, #31]
 8007a04:	e00b      	b.n	8007a1e <UART_SetConfig+0x34e>
 8007a06:	2304      	movs	r3, #4
 8007a08:	77fb      	strb	r3, [r7, #31]
 8007a0a:	e008      	b.n	8007a1e <UART_SetConfig+0x34e>
 8007a0c:	2308      	movs	r3, #8
 8007a0e:	77fb      	strb	r3, [r7, #31]
 8007a10:	e005      	b.n	8007a1e <UART_SetConfig+0x34e>
 8007a12:	2310      	movs	r3, #16
 8007a14:	77fb      	strb	r3, [r7, #31]
 8007a16:	bf00      	nop
 8007a18:	e001      	b.n	8007a1e <UART_SetConfig+0x34e>
 8007a1a:	2310      	movs	r3, #16
 8007a1c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	69db      	ldr	r3, [r3, #28]
 8007a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a26:	d17f      	bne.n	8007b28 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8007a28:	7ffb      	ldrb	r3, [r7, #31]
 8007a2a:	2b08      	cmp	r3, #8
 8007a2c:	d85c      	bhi.n	8007ae8 <UART_SetConfig+0x418>
 8007a2e:	a201      	add	r2, pc, #4	; (adr r2, 8007a34 <UART_SetConfig+0x364>)
 8007a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a34:	08007a59 	.word	0x08007a59
 8007a38:	08007a79 	.word	0x08007a79
 8007a3c:	08007a99 	.word	0x08007a99
 8007a40:	08007ae9 	.word	0x08007ae9
 8007a44:	08007ab1 	.word	0x08007ab1
 8007a48:	08007ae9 	.word	0x08007ae9
 8007a4c:	08007ae9 	.word	0x08007ae9
 8007a50:	08007ae9 	.word	0x08007ae9
 8007a54:	08007ad1 	.word	0x08007ad1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a58:	f7fe f90c 	bl	8005c74 <HAL_RCC_GetPCLK1Freq>
 8007a5c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	005a      	lsls	r2, r3, #1
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	085b      	lsrs	r3, r3, #1
 8007a68:	441a      	add	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	61bb      	str	r3, [r7, #24]
        break;
 8007a76:	e03a      	b.n	8007aee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a78:	f7fe f910 	bl	8005c9c <HAL_RCC_GetPCLK2Freq>
 8007a7c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	005a      	lsls	r2, r3, #1
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	085b      	lsrs	r3, r3, #1
 8007a88:	441a      	add	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	61bb      	str	r3, [r7, #24]
        break;
 8007a96:	e02a      	b.n	8007aee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	085a      	lsrs	r2, r3, #1
 8007a9e:	4b5f      	ldr	r3, [pc, #380]	; (8007c1c <UART_SetConfig+0x54c>)
 8007aa0:	4413      	add	r3, r2
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	6852      	ldr	r2, [r2, #4]
 8007aa6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	61bb      	str	r3, [r7, #24]
        break;
 8007aae:	e01e      	b.n	8007aee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ab0:	f7fd fffc 	bl	8005aac <HAL_RCC_GetSysClockFreq>
 8007ab4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	005a      	lsls	r2, r3, #1
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	085b      	lsrs	r3, r3, #1
 8007ac0:	441a      	add	r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	61bb      	str	r3, [r7, #24]
        break;
 8007ace:	e00e      	b.n	8007aee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	085b      	lsrs	r3, r3, #1
 8007ad6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	61bb      	str	r3, [r7, #24]
        break;
 8007ae6:	e002      	b.n	8007aee <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	75fb      	strb	r3, [r7, #23]
        break;
 8007aec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	2b0f      	cmp	r3, #15
 8007af2:	d916      	bls.n	8007b22 <UART_SetConfig+0x452>
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007afa:	d212      	bcs.n	8007b22 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	f023 030f 	bic.w	r3, r3, #15
 8007b04:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	085b      	lsrs	r3, r3, #1
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	f003 0307 	and.w	r3, r3, #7
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	897b      	ldrh	r3, [r7, #10]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	897a      	ldrh	r2, [r7, #10]
 8007b1e:	60da      	str	r2, [r3, #12]
 8007b20:	e070      	b.n	8007c04 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	75fb      	strb	r3, [r7, #23]
 8007b26:	e06d      	b.n	8007c04 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8007b28:	7ffb      	ldrb	r3, [r7, #31]
 8007b2a:	2b08      	cmp	r3, #8
 8007b2c:	d859      	bhi.n	8007be2 <UART_SetConfig+0x512>
 8007b2e:	a201      	add	r2, pc, #4	; (adr r2, 8007b34 <UART_SetConfig+0x464>)
 8007b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b34:	08007b59 	.word	0x08007b59
 8007b38:	08007b77 	.word	0x08007b77
 8007b3c:	08007b95 	.word	0x08007b95
 8007b40:	08007be3 	.word	0x08007be3
 8007b44:	08007bad 	.word	0x08007bad
 8007b48:	08007be3 	.word	0x08007be3
 8007b4c:	08007be3 	.word	0x08007be3
 8007b50:	08007be3 	.word	0x08007be3
 8007b54:	08007bcb 	.word	0x08007bcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b58:	f7fe f88c 	bl	8005c74 <HAL_RCC_GetPCLK1Freq>
 8007b5c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	085a      	lsrs	r2, r3, #1
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	441a      	add	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	61bb      	str	r3, [r7, #24]
        break;
 8007b74:	e038      	b.n	8007be8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b76:	f7fe f891 	bl	8005c9c <HAL_RCC_GetPCLK2Freq>
 8007b7a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	085a      	lsrs	r2, r3, #1
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	441a      	add	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	61bb      	str	r3, [r7, #24]
        break;
 8007b92:	e029      	b.n	8007be8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	085a      	lsrs	r2, r3, #1
 8007b9a:	4b21      	ldr	r3, [pc, #132]	; (8007c20 <UART_SetConfig+0x550>)
 8007b9c:	4413      	add	r3, r2
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	6852      	ldr	r2, [r2, #4]
 8007ba2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	61bb      	str	r3, [r7, #24]
        break;
 8007baa:	e01d      	b.n	8007be8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bac:	f7fd ff7e 	bl	8005aac <HAL_RCC_GetSysClockFreq>
 8007bb0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	085a      	lsrs	r2, r3, #1
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	441a      	add	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	61bb      	str	r3, [r7, #24]
        break;
 8007bc8:	e00e      	b.n	8007be8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	085b      	lsrs	r3, r3, #1
 8007bd0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	61bb      	str	r3, [r7, #24]
        break;
 8007be0:	e002      	b.n	8007be8 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	75fb      	strb	r3, [r7, #23]
        break;
 8007be6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	2b0f      	cmp	r3, #15
 8007bec:	d908      	bls.n	8007c00 <UART_SetConfig+0x530>
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bf4:	d204      	bcs.n	8007c00 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	69ba      	ldr	r2, [r7, #24]
 8007bfc:	60da      	str	r2, [r3, #12]
 8007bfe:	e001      	b.n	8007c04 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3720      	adds	r7, #32
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	01e84800 	.word	0x01e84800
 8007c20:	00f42400 	.word	0x00f42400

08007c24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c30:	f003 0301 	and.w	r3, r3, #1
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00a      	beq.n	8007c4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c52:	f003 0302 	and.w	r3, r3, #2
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00a      	beq.n	8007c70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	430a      	orrs	r2, r1
 8007c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c74:	f003 0304 	and.w	r3, r3, #4
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00a      	beq.n	8007c92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	430a      	orrs	r2, r1
 8007c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c96:	f003 0308 	and.w	r3, r3, #8
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00a      	beq.n	8007cb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	430a      	orrs	r2, r1
 8007cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb8:	f003 0310 	and.w	r3, r3, #16
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00a      	beq.n	8007cd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	430a      	orrs	r2, r1
 8007cd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cda:	f003 0320 	and.w	r3, r3, #32
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00a      	beq.n	8007cf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	430a      	orrs	r2, r1
 8007cf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d01a      	beq.n	8007d3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	430a      	orrs	r2, r1
 8007d18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d22:	d10a      	bne.n	8007d3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	430a      	orrs	r2, r1
 8007d38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00a      	beq.n	8007d5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	605a      	str	r2, [r3, #4]
  }
}
 8007d5c:	bf00      	nop
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b086      	sub	sp, #24
 8007d6c:	af02      	add	r7, sp, #8
 8007d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007d76:	f7fa f8b7 	bl	8001ee8 <HAL_GetTick>
 8007d7a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 0308 	and.w	r3, r3, #8
 8007d86:	2b08      	cmp	r3, #8
 8007d88:	d10e      	bne.n	8007da8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d8e:	9300      	str	r3, [sp, #0]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 f814 	bl	8007dc6 <UART_WaitOnFlagUntilTimeout>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d001      	beq.n	8007da8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007da4:	2303      	movs	r3, #3
 8007da6:	e00a      	b.n	8007dbe <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2220      	movs	r2, #32
 8007dac:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2220      	movs	r2, #32
 8007db2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b084      	sub	sp, #16
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	60f8      	str	r0, [r7, #12]
 8007dce:	60b9      	str	r1, [r7, #8]
 8007dd0:	603b      	str	r3, [r7, #0]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dd6:	e05d      	b.n	8007e94 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dde:	d059      	beq.n	8007e94 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007de0:	f7fa f882 	bl	8001ee8 <HAL_GetTick>
 8007de4:	4602      	mov	r2, r0
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	69ba      	ldr	r2, [r7, #24]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d302      	bcc.n	8007df6 <UART_WaitOnFlagUntilTimeout+0x30>
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d11b      	bne.n	8007e2e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007e04:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	689a      	ldr	r2, [r3, #8]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f022 0201 	bic.w	r2, r2, #1
 8007e14:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2220      	movs	r2, #32
 8007e1a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2220      	movs	r2, #32
 8007e20:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e042      	b.n	8007eb4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 0304 	and.w	r3, r3, #4
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d02b      	beq.n	8007e94 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	69db      	ldr	r3, [r3, #28]
 8007e42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e4a:	d123      	bne.n	8007e94 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e54:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007e64:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	689a      	ldr	r2, [r3, #8]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f022 0201 	bic.w	r2, r2, #1
 8007e74:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2220      	movs	r2, #32
 8007e7a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2220      	movs	r2, #32
 8007e80:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2220      	movs	r2, #32
 8007e86:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007e90:	2303      	movs	r3, #3
 8007e92:	e00f      	b.n	8007eb4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	69da      	ldr	r2, [r3, #28]
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	bf0c      	ite	eq
 8007ea4:	2301      	moveq	r3, #1
 8007ea6:	2300      	movne	r3, #0
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	461a      	mov	r2, r3
 8007eac:	79fb      	ldrb	r3, [r7, #7]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d092      	beq.n	8007dd8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <__errno>:
 8007ebc:	4b01      	ldr	r3, [pc, #4]	; (8007ec4 <__errno+0x8>)
 8007ebe:	6818      	ldr	r0, [r3, #0]
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	2000000c 	.word	0x2000000c

08007ec8 <__libc_init_array>:
 8007ec8:	b570      	push	{r4, r5, r6, lr}
 8007eca:	4e0d      	ldr	r6, [pc, #52]	; (8007f00 <__libc_init_array+0x38>)
 8007ecc:	4c0d      	ldr	r4, [pc, #52]	; (8007f04 <__libc_init_array+0x3c>)
 8007ece:	1ba4      	subs	r4, r4, r6
 8007ed0:	10a4      	asrs	r4, r4, #2
 8007ed2:	2500      	movs	r5, #0
 8007ed4:	42a5      	cmp	r5, r4
 8007ed6:	d109      	bne.n	8007eec <__libc_init_array+0x24>
 8007ed8:	4e0b      	ldr	r6, [pc, #44]	; (8007f08 <__libc_init_array+0x40>)
 8007eda:	4c0c      	ldr	r4, [pc, #48]	; (8007f0c <__libc_init_array+0x44>)
 8007edc:	f000 f894 	bl	8008008 <_init>
 8007ee0:	1ba4      	subs	r4, r4, r6
 8007ee2:	10a4      	asrs	r4, r4, #2
 8007ee4:	2500      	movs	r5, #0
 8007ee6:	42a5      	cmp	r5, r4
 8007ee8:	d105      	bne.n	8007ef6 <__libc_init_array+0x2e>
 8007eea:	bd70      	pop	{r4, r5, r6, pc}
 8007eec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ef0:	4798      	blx	r3
 8007ef2:	3501      	adds	r5, #1
 8007ef4:	e7ee      	b.n	8007ed4 <__libc_init_array+0xc>
 8007ef6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007efa:	4798      	blx	r3
 8007efc:	3501      	adds	r5, #1
 8007efe:	e7f2      	b.n	8007ee6 <__libc_init_array+0x1e>
 8007f00:	08008048 	.word	0x08008048
 8007f04:	08008048 	.word	0x08008048
 8007f08:	08008048 	.word	0x08008048
 8007f0c:	0800804c 	.word	0x0800804c

08007f10 <malloc>:
 8007f10:	4b02      	ldr	r3, [pc, #8]	; (8007f1c <malloc+0xc>)
 8007f12:	4601      	mov	r1, r0
 8007f14:	6818      	ldr	r0, [r3, #0]
 8007f16:	f000 b80b 	b.w	8007f30 <_malloc_r>
 8007f1a:	bf00      	nop
 8007f1c:	2000000c 	.word	0x2000000c

08007f20 <memset>:
 8007f20:	4402      	add	r2, r0
 8007f22:	4603      	mov	r3, r0
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d100      	bne.n	8007f2a <memset+0xa>
 8007f28:	4770      	bx	lr
 8007f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f2e:	e7f9      	b.n	8007f24 <memset+0x4>

08007f30 <_malloc_r>:
 8007f30:	b570      	push	{r4, r5, r6, lr}
 8007f32:	1ccd      	adds	r5, r1, #3
 8007f34:	f025 0503 	bic.w	r5, r5, #3
 8007f38:	3508      	adds	r5, #8
 8007f3a:	2d0c      	cmp	r5, #12
 8007f3c:	bf38      	it	cc
 8007f3e:	250c      	movcc	r5, #12
 8007f40:	2d00      	cmp	r5, #0
 8007f42:	4606      	mov	r6, r0
 8007f44:	db01      	blt.n	8007f4a <_malloc_r+0x1a>
 8007f46:	42a9      	cmp	r1, r5
 8007f48:	d903      	bls.n	8007f52 <_malloc_r+0x22>
 8007f4a:	230c      	movs	r3, #12
 8007f4c:	6033      	str	r3, [r6, #0]
 8007f4e:	2000      	movs	r0, #0
 8007f50:	bd70      	pop	{r4, r5, r6, pc}
 8007f52:	f000 f857 	bl	8008004 <__malloc_lock>
 8007f56:	4a21      	ldr	r2, [pc, #132]	; (8007fdc <_malloc_r+0xac>)
 8007f58:	6814      	ldr	r4, [r2, #0]
 8007f5a:	4621      	mov	r1, r4
 8007f5c:	b991      	cbnz	r1, 8007f84 <_malloc_r+0x54>
 8007f5e:	4c20      	ldr	r4, [pc, #128]	; (8007fe0 <_malloc_r+0xb0>)
 8007f60:	6823      	ldr	r3, [r4, #0]
 8007f62:	b91b      	cbnz	r3, 8007f6c <_malloc_r+0x3c>
 8007f64:	4630      	mov	r0, r6
 8007f66:	f000 f83d 	bl	8007fe4 <_sbrk_r>
 8007f6a:	6020      	str	r0, [r4, #0]
 8007f6c:	4629      	mov	r1, r5
 8007f6e:	4630      	mov	r0, r6
 8007f70:	f000 f838 	bl	8007fe4 <_sbrk_r>
 8007f74:	1c43      	adds	r3, r0, #1
 8007f76:	d124      	bne.n	8007fc2 <_malloc_r+0x92>
 8007f78:	230c      	movs	r3, #12
 8007f7a:	6033      	str	r3, [r6, #0]
 8007f7c:	4630      	mov	r0, r6
 8007f7e:	f000 f842 	bl	8008006 <__malloc_unlock>
 8007f82:	e7e4      	b.n	8007f4e <_malloc_r+0x1e>
 8007f84:	680b      	ldr	r3, [r1, #0]
 8007f86:	1b5b      	subs	r3, r3, r5
 8007f88:	d418      	bmi.n	8007fbc <_malloc_r+0x8c>
 8007f8a:	2b0b      	cmp	r3, #11
 8007f8c:	d90f      	bls.n	8007fae <_malloc_r+0x7e>
 8007f8e:	600b      	str	r3, [r1, #0]
 8007f90:	50cd      	str	r5, [r1, r3]
 8007f92:	18cc      	adds	r4, r1, r3
 8007f94:	4630      	mov	r0, r6
 8007f96:	f000 f836 	bl	8008006 <__malloc_unlock>
 8007f9a:	f104 000b 	add.w	r0, r4, #11
 8007f9e:	1d23      	adds	r3, r4, #4
 8007fa0:	f020 0007 	bic.w	r0, r0, #7
 8007fa4:	1ac3      	subs	r3, r0, r3
 8007fa6:	d0d3      	beq.n	8007f50 <_malloc_r+0x20>
 8007fa8:	425a      	negs	r2, r3
 8007faa:	50e2      	str	r2, [r4, r3]
 8007fac:	e7d0      	b.n	8007f50 <_malloc_r+0x20>
 8007fae:	428c      	cmp	r4, r1
 8007fb0:	684b      	ldr	r3, [r1, #4]
 8007fb2:	bf16      	itet	ne
 8007fb4:	6063      	strne	r3, [r4, #4]
 8007fb6:	6013      	streq	r3, [r2, #0]
 8007fb8:	460c      	movne	r4, r1
 8007fba:	e7eb      	b.n	8007f94 <_malloc_r+0x64>
 8007fbc:	460c      	mov	r4, r1
 8007fbe:	6849      	ldr	r1, [r1, #4]
 8007fc0:	e7cc      	b.n	8007f5c <_malloc_r+0x2c>
 8007fc2:	1cc4      	adds	r4, r0, #3
 8007fc4:	f024 0403 	bic.w	r4, r4, #3
 8007fc8:	42a0      	cmp	r0, r4
 8007fca:	d005      	beq.n	8007fd8 <_malloc_r+0xa8>
 8007fcc:	1a21      	subs	r1, r4, r0
 8007fce:	4630      	mov	r0, r6
 8007fd0:	f000 f808 	bl	8007fe4 <_sbrk_r>
 8007fd4:	3001      	adds	r0, #1
 8007fd6:	d0cf      	beq.n	8007f78 <_malloc_r+0x48>
 8007fd8:	6025      	str	r5, [r4, #0]
 8007fda:	e7db      	b.n	8007f94 <_malloc_r+0x64>
 8007fdc:	200000a0 	.word	0x200000a0
 8007fe0:	200000a4 	.word	0x200000a4

08007fe4 <_sbrk_r>:
 8007fe4:	b538      	push	{r3, r4, r5, lr}
 8007fe6:	4c06      	ldr	r4, [pc, #24]	; (8008000 <_sbrk_r+0x1c>)
 8007fe8:	2300      	movs	r3, #0
 8007fea:	4605      	mov	r5, r0
 8007fec:	4608      	mov	r0, r1
 8007fee:	6023      	str	r3, [r4, #0]
 8007ff0:	f7f9 feb4 	bl	8001d5c <_sbrk>
 8007ff4:	1c43      	adds	r3, r0, #1
 8007ff6:	d102      	bne.n	8007ffe <_sbrk_r+0x1a>
 8007ff8:	6823      	ldr	r3, [r4, #0]
 8007ffa:	b103      	cbz	r3, 8007ffe <_sbrk_r+0x1a>
 8007ffc:	602b      	str	r3, [r5, #0]
 8007ffe:	bd38      	pop	{r3, r4, r5, pc}
 8008000:	20000454 	.word	0x20000454

08008004 <__malloc_lock>:
 8008004:	4770      	bx	lr

08008006 <__malloc_unlock>:
 8008006:	4770      	bx	lr

08008008 <_init>:
 8008008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800800a:	bf00      	nop
 800800c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800800e:	bc08      	pop	{r3}
 8008010:	469e      	mov	lr, r3
 8008012:	4770      	bx	lr

08008014 <_fini>:
 8008014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008016:	bf00      	nop
 8008018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800801a:	bc08      	pop	{r3}
 800801c:	469e      	mov	lr, r3
 800801e:	4770      	bx	lr
