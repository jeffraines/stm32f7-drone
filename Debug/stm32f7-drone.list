
stm32f7-drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c88  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08007e68  08007e68  00017e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ecc  08007ecc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007ecc  08007ecc  00017ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ed4  08007ed4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ed4  08007ed4  00017ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ed8  08007ed8  00017ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007edc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  20000074  08007f50  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  08007f50  000203a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e93  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029c6  00000000  00000000  00033f37  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001210  00000000  00000000  00036900  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010a8  00000000  00000000  00037b10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024a5f  00000000  00000000  00038bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f1fc  00000000  00000000  0005d617  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e1998  00000000  00000000  0006c813  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014e1ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fb8  00000000  00000000  0014e228  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007e50 	.word	0x08007e50

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08007e50 	.word	0x08007e50

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b972 	b.w	8000da8 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	4688      	mov	r8, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d14b      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aea:	428a      	cmp	r2, r1
 8000aec:	4615      	mov	r5, r2
 8000aee:	d967      	bls.n	8000bc0 <__udivmoddi4+0xe4>
 8000af0:	fab2 f282 	clz	r2, r2
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0720 	rsb	r7, r2, #32
 8000afa:	fa01 f302 	lsl.w	r3, r1, r2
 8000afe:	fa20 f707 	lsr.w	r7, r0, r7
 8000b02:	4095      	lsls	r5, r2
 8000b04:	ea47 0803 	orr.w	r8, r7, r3
 8000b08:	4094      	lsls	r4, r2
 8000b0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b0e:	0c23      	lsrs	r3, r4, #16
 8000b10:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b14:	fa1f fc85 	uxth.w	ip, r5
 8000b18:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b1c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b20:	fb07 f10c 	mul.w	r1, r7, ip
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x60>
 8000b28:	18eb      	adds	r3, r5, r3
 8000b2a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b2e:	f080 811b 	bcs.w	8000d68 <__udivmoddi4+0x28c>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 8118 	bls.w	8000d68 <__udivmoddi4+0x28c>
 8000b38:	3f02      	subs	r7, #2
 8000b3a:	442b      	add	r3, r5
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b44:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b4c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b50:	45a4      	cmp	ip, r4
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x8c>
 8000b54:	192c      	adds	r4, r5, r4
 8000b56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b5a:	f080 8107 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b5e:	45a4      	cmp	ip, r4
 8000b60:	f240 8104 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b64:	3802      	subs	r0, #2
 8000b66:	442c      	add	r4, r5
 8000b68:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b6c:	eba4 040c 	sub.w	r4, r4, ip
 8000b70:	2700      	movs	r7, #0
 8000b72:	b11e      	cbz	r6, 8000b7c <__udivmoddi4+0xa0>
 8000b74:	40d4      	lsrs	r4, r2
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7c:	4639      	mov	r1, r7
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d909      	bls.n	8000b9a <__udivmoddi4+0xbe>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80eb 	beq.w	8000d62 <__udivmoddi4+0x286>
 8000b8c:	2700      	movs	r7, #0
 8000b8e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b92:	4638      	mov	r0, r7
 8000b94:	4639      	mov	r1, r7
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	fab3 f783 	clz	r7, r3
 8000b9e:	2f00      	cmp	r7, #0
 8000ba0:	d147      	bne.n	8000c32 <__udivmoddi4+0x156>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d302      	bcc.n	8000bac <__udivmoddi4+0xd0>
 8000ba6:	4282      	cmp	r2, r0
 8000ba8:	f200 80fa 	bhi.w	8000da0 <__udivmoddi4+0x2c4>
 8000bac:	1a84      	subs	r4, r0, r2
 8000bae:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	4698      	mov	r8, r3
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	d0e0      	beq.n	8000b7c <__udivmoddi4+0xa0>
 8000bba:	e9c6 4800 	strd	r4, r8, [r6]
 8000bbe:	e7dd      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000bc0:	b902      	cbnz	r2, 8000bc4 <__udivmoddi4+0xe8>
 8000bc2:	deff      	udf	#255	; 0xff
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	2a00      	cmp	r2, #0
 8000bca:	f040 808f 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bce:	1b49      	subs	r1, r1, r5
 8000bd0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bd4:	fa1f f885 	uxth.w	r8, r5
 8000bd8:	2701      	movs	r7, #1
 8000bda:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000be4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bec:	4299      	cmp	r1, r3
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bf0:	18eb      	adds	r3, r5, r3
 8000bf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4299      	cmp	r1, r3
 8000bfa:	f200 80cd 	bhi.w	8000d98 <__udivmoddi4+0x2bc>
 8000bfe:	4684      	mov	ip, r0
 8000c00:	1a59      	subs	r1, r3, r1
 8000c02:	b2a3      	uxth	r3, r4
 8000c04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c08:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c10:	fb08 f800 	mul.w	r8, r8, r0
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0x14c>
 8000c18:	192c      	adds	r4, r5, r4
 8000c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x14a>
 8000c20:	45a0      	cmp	r8, r4
 8000c22:	f200 80b6 	bhi.w	8000d92 <__udivmoddi4+0x2b6>
 8000c26:	4618      	mov	r0, r3
 8000c28:	eba4 0408 	sub.w	r4, r4, r8
 8000c2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c30:	e79f      	b.n	8000b72 <__udivmoddi4+0x96>
 8000c32:	f1c7 0c20 	rsb	ip, r7, #32
 8000c36:	40bb      	lsls	r3, r7
 8000c38:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c3c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c40:	fa01 f407 	lsl.w	r4, r1, r7
 8000c44:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c48:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c4c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c50:	4325      	orrs	r5, r4
 8000c52:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c56:	0c2c      	lsrs	r4, r5, #16
 8000c58:	fb08 3319 	mls	r3, r8, r9, r3
 8000c5c:	fa1f fa8e 	uxth.w	sl, lr
 8000c60:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c64:	fb09 f40a 	mul.w	r4, r9, sl
 8000c68:	429c      	cmp	r4, r3
 8000c6a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c6e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1e 0303 	adds.w	r3, lr, r3
 8000c78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c7c:	f080 8087 	bcs.w	8000d8e <__udivmoddi4+0x2b2>
 8000c80:	429c      	cmp	r4, r3
 8000c82:	f240 8084 	bls.w	8000d8e <__udivmoddi4+0x2b2>
 8000c86:	f1a9 0902 	sub.w	r9, r9, #2
 8000c8a:	4473      	add	r3, lr
 8000c8c:	1b1b      	subs	r3, r3, r4
 8000c8e:	b2ad      	uxth	r5, r5
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c9c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ca0:	45a2      	cmp	sl, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	d26b      	bcs.n	8000d86 <__udivmoddi4+0x2aa>
 8000cae:	45a2      	cmp	sl, r4
 8000cb0:	d969      	bls.n	8000d86 <__udivmoddi4+0x2aa>
 8000cb2:	3802      	subs	r0, #2
 8000cb4:	4474      	add	r4, lr
 8000cb6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cba:	fba0 8902 	umull	r8, r9, r0, r2
 8000cbe:	eba4 040a 	sub.w	r4, r4, sl
 8000cc2:	454c      	cmp	r4, r9
 8000cc4:	46c2      	mov	sl, r8
 8000cc6:	464b      	mov	r3, r9
 8000cc8:	d354      	bcc.n	8000d74 <__udivmoddi4+0x298>
 8000cca:	d051      	beq.n	8000d70 <__udivmoddi4+0x294>
 8000ccc:	2e00      	cmp	r6, #0
 8000cce:	d069      	beq.n	8000da4 <__udivmoddi4+0x2c8>
 8000cd0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cd4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cd8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cdc:	40fd      	lsrs	r5, r7
 8000cde:	40fc      	lsrs	r4, r7
 8000ce0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ce4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ce8:	2700      	movs	r7, #0
 8000cea:	e747      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000cec:	f1c2 0320 	rsb	r3, r2, #32
 8000cf0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cf4:	4095      	lsls	r5, r2
 8000cf6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d02:	4338      	orrs	r0, r7
 8000d04:	0c01      	lsrs	r1, r0, #16
 8000d06:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d0a:	fa1f f885 	uxth.w	r8, r5
 8000d0e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d16:	fb07 f308 	mul.w	r3, r7, r8
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d20:	d907      	bls.n	8000d32 <__udivmoddi4+0x256>
 8000d22:	1869      	adds	r1, r5, r1
 8000d24:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d28:	d22f      	bcs.n	8000d8a <__udivmoddi4+0x2ae>
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d92d      	bls.n	8000d8a <__udivmoddi4+0x2ae>
 8000d2e:	3f02      	subs	r7, #2
 8000d30:	4429      	add	r1, r5
 8000d32:	1acb      	subs	r3, r1, r3
 8000d34:	b281      	uxth	r1, r0
 8000d36:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d3a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d42:	fb00 f308 	mul.w	r3, r0, r8
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x27e>
 8000d4a:	1869      	adds	r1, r5, r1
 8000d4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d50:	d217      	bcs.n	8000d82 <__udivmoddi4+0x2a6>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d915      	bls.n	8000d82 <__udivmoddi4+0x2a6>
 8000d56:	3802      	subs	r0, #2
 8000d58:	4429      	add	r1, r5
 8000d5a:	1ac9      	subs	r1, r1, r3
 8000d5c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d60:	e73b      	b.n	8000bda <__udivmoddi4+0xfe>
 8000d62:	4637      	mov	r7, r6
 8000d64:	4630      	mov	r0, r6
 8000d66:	e709      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000d68:	4607      	mov	r7, r0
 8000d6a:	e6e7      	b.n	8000b3c <__udivmoddi4+0x60>
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	e6fb      	b.n	8000b68 <__udivmoddi4+0x8c>
 8000d70:	4541      	cmp	r1, r8
 8000d72:	d2ab      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d74:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d78:	eb69 020e 	sbc.w	r2, r9, lr
 8000d7c:	3801      	subs	r0, #1
 8000d7e:	4613      	mov	r3, r2
 8000d80:	e7a4      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d82:	4660      	mov	r0, ip
 8000d84:	e7e9      	b.n	8000d5a <__udivmoddi4+0x27e>
 8000d86:	4618      	mov	r0, r3
 8000d88:	e795      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8a:	4667      	mov	r7, ip
 8000d8c:	e7d1      	b.n	8000d32 <__udivmoddi4+0x256>
 8000d8e:	4681      	mov	r9, r0
 8000d90:	e77c      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d92:	3802      	subs	r0, #2
 8000d94:	442c      	add	r4, r5
 8000d96:	e747      	b.n	8000c28 <__udivmoddi4+0x14c>
 8000d98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d9c:	442b      	add	r3, r5
 8000d9e:	e72f      	b.n	8000c00 <__udivmoddi4+0x124>
 8000da0:	4638      	mov	r0, r7
 8000da2:	e708      	b.n	8000bb6 <__udivmoddi4+0xda>
 8000da4:	4637      	mov	r7, r6
 8000da6:	e6e9      	b.n	8000b7c <__udivmoddi4+0xa0>

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <ADC_INIT>:
/* Function Summary: The input from the ADC handler will be piped directly to the inputVar via DMA.
 * Parameters: hadc - ADC handler for particular ADC pin. inputVar - Variable you want ADC values stored into.
 */

void ADC_INIT(ADC_HandleTypeDef* hadc, uint32_t* inputVar)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc, inputVar, sizeof(*inputVar));
 8000db6:	2204      	movs	r2, #4
 8000db8:	6839      	ldr	r1, [r7, #0]
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f001 f976 	bl	80020ac <HAL_ADC_Start_DMA>
	HAL_ADC_Start(hadc);
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f001 f8b3 	bl	8001f2c <HAL_ADC_Start>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <ESC_INIT_CONTROLLER>:
#endif

#if defined(MULTISHOT) || defined(ONESHOT)

ESC_CONTROLLER* ESC_INIT_CONTROLLER(TIM_HandleTypeDef* timer, DMA_HandleTypeDef* dma)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b084      	sub	sp, #16
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	6039      	str	r1, [r7, #0]
	timer->Instance->ARR = TIMER_ARR - 1;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f241 1293 	movw	r2, #4499	; 0x1193
 8000de0:	62da      	str	r2, [r3, #44]	; 0x2c
	ESC_CONTROLLER* ESC_CONTROLLER = malloc(sizeof(ESC_CONTROLLER) * ESC_COUNT);
 8000de2:	2010      	movs	r0, #16
 8000de4:	f006 fc1e 	bl	8007624 <malloc>
 8000de8:	4603      	mov	r3, r0
 8000dea:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < ESC_COUNT; i++)
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	e060      	b.n	8000eb4 <ESC_INIT_CONTROLLER+0xe6>
	{
		ESC_CONTROLLER[i].Throttle = 0;
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	4613      	mov	r3, r2
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	4413      	add	r3, r2
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	4413      	add	r3, r2
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
		ESC_CONTROLLER[i].Channel = 4*i;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	0099      	lsls	r1, r3, #2
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	4413      	add	r3, r2
 8000e12:	00db      	lsls	r3, r3, #3
 8000e14:	461a      	mov	r2, r3
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	4413      	add	r3, r2
 8000e1a:	460a      	mov	r2, r1
 8000e1c:	605a      	str	r2, [r3, #4]
		ESC_CONTROLLER[i].Number = i;
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	4613      	mov	r3, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	4413      	add	r3, r2
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	461a      	mov	r2, r3
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	609a      	str	r2, [r3, #8]
		ESC_CONTROLLER[i].Timer = timer;
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	4613      	mov	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	4413      	add	r3, r2
 8000e3a:	00db      	lsls	r3, r3, #3
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	4413      	add	r3, r2
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	60da      	str	r2, [r3, #12]
		ESC_CONTROLLER[i].DMA = dma;
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	4413      	add	r3, r2
 8000e4e:	00db      	lsls	r3, r3, #3
 8000e50:	461a      	mov	r2, r3
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	4413      	add	r3, r2
 8000e56:	683a      	ldr	r2, [r7, #0]
 8000e58:	611a      	str	r2, [r3, #16]
		ESC_CONTROLLER[i].CCR = (uint32_t) &(timer->Instance->CCR1) + (4*i);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	3334      	adds	r3, #52	; 0x34
 8000e60:	4618      	mov	r0, r3
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	4619      	mov	r1, r3
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	4413      	add	r3, r2
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	461a      	mov	r2, r3
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	4413      	add	r3, r2
 8000e78:	1842      	adds	r2, r0, r1
 8000e7a:	615a      	str	r2, [r3, #20]
		*((uint32_t *) ESC_CONTROLLER[i].CCR) = 0;
 8000e7c:	68fa      	ldr	r2, [r7, #12]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	4413      	add	r3, r2
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	461a      	mov	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	2300      	movs	r3, #0
 8000e92:	6013      	str	r3, [r2, #0]
		HAL_TIM_PWM_Start(timer, ESC_CONTROLLER[i].Channel);
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	4613      	mov	r3, r2
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	4413      	add	r3, r2
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f005 f92f 	bl	800610c <HAL_TIM_PWM_Start>
	for (int i = 0; i < ESC_COUNT; i++)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2b03      	cmp	r3, #3
 8000eb8:	dd9b      	ble.n	8000df2 <ESC_INIT_CONTROLLER+0x24>
	}
	return ESC_CONTROLLER;
 8000eba:	68bb      	ldr	r3, [r7, #8]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <ESC_UPDATE_THROTTLE>:

void ESC_UPDATE_THROTTLE(ESC_CONTROLLER* ESC, uint32_t throttle)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
	__HAL_DMA_CLEAR_FLAG(ESC->DMA, (DMA_FLAG_TCIF0_4 | DMA_FLAG_HTIF0_4 | DMA_FLAG_FEIF0_4));
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	691b      	ldr	r3, [r3, #16]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b24      	ldr	r3, [pc, #144]	; (8000f68 <ESC_UPDATE_THROTTLE+0xa4>)
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d903      	bls.n	8000ee4 <ESC_UPDATE_THROTTLE+0x20>
 8000edc:	4b23      	ldr	r3, [pc, #140]	; (8000f6c <ESC_UPDATE_THROTTLE+0xa8>)
 8000ede:	2231      	movs	r2, #49	; 0x31
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	e018      	b.n	8000f16 <ESC_UPDATE_THROTTLE+0x52>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	691b      	ldr	r3, [r3, #16]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <ESC_UPDATE_THROTTLE+0xac>)
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d903      	bls.n	8000efa <ESC_UPDATE_THROTTLE+0x36>
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <ESC_UPDATE_THROTTLE+0xa8>)
 8000ef4:	2231      	movs	r2, #49	; 0x31
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	e00d      	b.n	8000f16 <ESC_UPDATE_THROTTLE+0x52>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <ESC_UPDATE_THROTTLE+0xb0>)
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d903      	bls.n	8000f10 <ESC_UPDATE_THROTTLE+0x4c>
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <ESC_UPDATE_THROTTLE+0xb4>)
 8000f0a:	2231      	movs	r2, #49	; 0x31
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	e002      	b.n	8000f16 <ESC_UPDATE_THROTTLE+0x52>
 8000f10:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <ESC_UPDATE_THROTTLE+0xb4>)
 8000f12:	2231      	movs	r2, #49	; 0x31
 8000f14:	609a      	str	r2, [r3, #8]
	ESC->DMA->Instance->NDTR = 1;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	691b      	ldr	r3, [r3, #16]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	605a      	str	r2, [r3, #4]
	ESC->DMA->Instance->M0AR = (uint32_t) &throttle;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	691b      	ldr	r3, [r3, #16]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	463a      	mov	r2, r7
 8000f28:	60da      	str	r2, [r3, #12]
	ESC->DMA->Instance->PAR = ESC->CCR;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	691b      	ldr	r3, [r3, #16]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	6952      	ldr	r2, [r2, #20]
 8000f34:	609a      	str	r2, [r3, #8]
	__HAL_DMA_ENABLE(ESC->DMA);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f042 0201 	orr.w	r2, r2, #1
 8000f48:	601a      	str	r2, [r3, #0]
	while(ESC->DMA->Instance->CR & 0x1);
 8000f4a:	bf00      	nop
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	691b      	ldr	r3, [r3, #16]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1f7      	bne.n	8000f4c <ESC_UPDATE_THROTTLE+0x88>
 }
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	40026458 	.word	0x40026458
 8000f6c:	40026400 	.word	0x40026400
 8000f70:	400260b8 	.word	0x400260b8
 8000f74:	40026058 	.word	0x40026058
 8000f78:	40026000 	.word	0x40026000

08000f7c <XLG_WRITE>:
  * @param writeByte	write here
  * @param writeSize	write here
  * @retval void
  */
void XLG_WRITE(I2C_HandleTypeDef* i2c, uint8_t addr, uint8_t* writeByte, uint32_t writeSize)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af02      	add	r7, sp, #8
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write_DMA(i2c, XLG_I2C_ADDR, addr, XLG_REG_SIZE, writeByte, writeSize);
 8000f8c:	7afb      	ldrb	r3, [r7, #11]
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	21d4      	movs	r1, #212	; 0xd4
 8000f9e:	68f8      	ldr	r0, [r7, #12]
 8000fa0:	f002 fb3c 	bl	800361c <HAL_I2C_Mem_Write_DMA>
	while(i2c->hdmatx->XferCpltCallback);
 8000fa4:	bf00      	nop
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1fa      	bne.n	8000fa6 <XLG_WRITE+0x2a>
	i2c->State = HAL_I2C_STATE_READY;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2220      	movs	r2, #32
 8000fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8000fb8:	bf00      	nop
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <XLG_READ>:

void XLG_READ(I2C_HandleTypeDef* i2c, uint8_t addr, uint8_t* readByte, uint32_t readSize)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af02      	add	r7, sp, #8
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	607a      	str	r2, [r7, #4]
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Read_DMA(i2c, XLG_I2C_ADDR, addr, XLG_REG_SIZE, readByte, readSize);
 8000fd0:	7afb      	ldrb	r3, [r7, #11]
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2301      	movs	r3, #1
 8000fe0:	21d4      	movs	r1, #212	; 0xd4
 8000fe2:	68f8      	ldr	r0, [r7, #12]
 8000fe4:	f002 fc10 	bl	8003808 <HAL_I2C_Mem_Read_DMA>
	while(i2c->hdmatx->XferCpltCallback);
 8000fe8:	bf00      	nop
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1fa      	bne.n	8000fea <XLG_READ+0x2a>
	i2c->State = HAL_I2C_STATE_READY;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2220      	movs	r2, #32
 8000ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8000ffc:	bf00      	nop
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <XLG_G_DATA_READ>:

void XLG_G_DATA_READ(I2C_HandleTypeDef* i2c, uint8_t readByte[])
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
	XLG_READ(i2c, OUTX_L_G, readByte[0], 1);
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	2301      	movs	r3, #1
 8001016:	2122      	movs	r1, #34	; 0x22
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ffd1 	bl	8000fc0 <XLG_READ>
	XLG_READ(i2c, OUTX_H_G, readByte[1], 1);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	3301      	adds	r3, #1
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	2301      	movs	r3, #1
 8001028:	2123      	movs	r1, #35	; 0x23
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ffc8 	bl	8000fc0 <XLG_READ>
	XLG_READ(i2c, OUTY_L_G, readByte[2], 1);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	3302      	adds	r3, #2
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	461a      	mov	r2, r3
 8001038:	2301      	movs	r3, #1
 800103a:	2124      	movs	r1, #36	; 0x24
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ffbf 	bl	8000fc0 <XLG_READ>
	XLG_READ(i2c, OUTY_H_G, readByte[3], 1);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	3303      	adds	r3, #3
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	2301      	movs	r3, #1
 800104c:	2125      	movs	r1, #37	; 0x25
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ffb6 	bl	8000fc0 <XLG_READ>
	XLG_READ(i2c, OUTZ_L_G, readByte[4], 1);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	3304      	adds	r3, #4
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	2301      	movs	r3, #1
 800105e:	2126      	movs	r1, #38	; 0x26
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ffad 	bl	8000fc0 <XLG_READ>
	XLG_READ(i2c, OUTZ_H_G, readByte[5], 1);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	3305      	adds	r3, #5
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	2301      	movs	r3, #1
 8001070:	2127      	movs	r1, #39	; 0x27
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff ffa4 	bl	8000fc0 <XLG_READ>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001086:	f000 fe8e 	bl	8001da6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800108a:	f000 f87d 	bl	8001188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108e:	f000 faaf 	bl	80015f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001092:	f000 fa6b 	bl	800156c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001096:	f000 fa31 	bl	80014fc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 800109a:	f000 fa5f 	bl	800155c <MX_USB_OTG_FS_USB_Init>
  MX_TIM4_Init();
 800109e:	f000 f99d 	bl	80013dc <MX_TIM4_Init>
  MX_ADC1_Init();
 80010a2:	f000 f909 	bl	80012b8 <MX_ADC1_Init>
  MX_I2C1_Init();
 80010a6:	f000 f959 	bl	800135c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ADC_INIT(&hadc1, &throttlePot);
 80010aa:	492b      	ldr	r1, [pc, #172]	; (8001158 <main+0xd8>)
 80010ac:	482b      	ldr	r0, [pc, #172]	; (800115c <main+0xdc>)
 80010ae:	f7ff fe7d 	bl	8000dac <ADC_INIT>
  ESC_CONTROLLER* myESCSet = ESC_INIT_CONTROLLER(&htim4, &hdma_tim4_ch1);
 80010b2:	492b      	ldr	r1, [pc, #172]	; (8001160 <main+0xe0>)
 80010b4:	482b      	ldr	r0, [pc, #172]	; (8001164 <main+0xe4>)
 80010b6:	f7ff fe8a 	bl	8000dce <ESC_INIT_CONTROLLER>
 80010ba:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  XLG_G_DATA_READ(&hi2c1, gyroData);
 80010bc:	492a      	ldr	r1, [pc, #168]	; (8001168 <main+0xe8>)
 80010be:	482b      	ldr	r0, [pc, #172]	; (800116c <main+0xec>)
 80010c0:	f7ff ffa0 	bl	8001004 <XLG_G_DATA_READ>
	  XLG_WRITE(&hi2c1, FIFO_CTRL1, &writeByte, 1);
 80010c4:	2301      	movs	r3, #1
 80010c6:	4a2a      	ldr	r2, [pc, #168]	; (8001170 <main+0xf0>)
 80010c8:	2106      	movs	r1, #6
 80010ca:	4828      	ldr	r0, [pc, #160]	; (800116c <main+0xec>)
 80010cc:	f7ff ff56 	bl	8000f7c <XLG_WRITE>
	  sprintf((char*)buf, "Value: %lu\n\r", throttlePot);
 80010d0:	4b21      	ldr	r3, [pc, #132]	; (8001158 <main+0xd8>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4927      	ldr	r1, [pc, #156]	; (8001174 <main+0xf4>)
 80010d8:	4827      	ldr	r0, [pc, #156]	; (8001178 <main+0xf8>)
 80010da:	f006 fb6b 	bl	80077b4 <siprintf>
	  HAL_UART_Transmit(&huart3, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80010de:	4826      	ldr	r0, [pc, #152]	; (8001178 <main+0xf8>)
 80010e0:	f7ff f89e 	bl	8000220 <strlen>
 80010e4:	4603      	mov	r3, r0
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ec:	4922      	ldr	r1, [pc, #136]	; (8001178 <main+0xf8>)
 80010ee:	4823      	ldr	r0, [pc, #140]	; (800117c <main+0xfc>)
 80010f0:	f005 fde6 	bl	8006cc0 <HAL_UART_Transmit>
	  ONESHOT_ADC_CONV(throttle, throttlePot);
 80010f4:	4b18      	ldr	r3, [pc, #96]	; (8001158 <main+0xd8>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fa2b 	bl	8000554 <__aeabi_ui2d>
 80010fe:	a314      	add	r3, pc, #80	; (adr r3, 8001150 <main+0xd0>)
 8001100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001104:	f7ff fbca 	bl	800089c <__aeabi_ddiv>
 8001108:	4603      	mov	r3, r0
 800110a:	460c      	mov	r4, r1
 800110c:	4618      	mov	r0, r3
 800110e:	4621      	mov	r1, r4
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <main+0x100>)
 8001116:	f7ff f8e1 	bl	80002dc <__adddf3>
 800111a:	4603      	mov	r3, r0
 800111c:	460c      	mov	r4, r1
 800111e:	4618      	mov	r0, r3
 8001120:	4621      	mov	r1, r4
 8001122:	f7ff fca3 	bl	8000a6c <__aeabi_d2uiz>
 8001126:	4602      	mov	r2, r0
 8001128:	4b16      	ldr	r3, [pc, #88]	; (8001184 <main+0x104>)
 800112a:	601a      	str	r2, [r3, #0]
	  ESC_UPDATE_THROTTLE(&myESCSet[1], throttle);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f103 0218 	add.w	r2, r3, #24
 8001132:	4b14      	ldr	r3, [pc, #80]	; (8001184 <main+0x104>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4619      	mov	r1, r3
 8001138:	4610      	mov	r0, r2
 800113a:	f7ff fec3 	bl	8000ec4 <ESC_UPDATE_THROTTLE>
	  throttle++;
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <main+0x104>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	4a0f      	ldr	r2, [pc, #60]	; (8001184 <main+0x104>)
 8001146:	6013      	str	r3, [r2, #0]
	  HAL_Delay(10);
 8001148:	200a      	movs	r0, #10
 800114a:	f000 fe89 	bl	8001e60 <HAL_Delay>
	  XLG_G_DATA_READ(&hi2c1, gyroData);
 800114e:	e7b5      	b.n	80010bc <main+0x3c>
 8001150:	147ae148 	.word	0x147ae148
 8001154:	401847ae 	.word	0x401847ae
 8001158:	20000394 	.word	0x20000394
 800115c:	20000214 	.word	0x20000214
 8001160:	20000334 	.word	0x20000334
 8001164:	200000a8 	.word	0x200000a8
 8001168:	20000094 	.word	0x20000094
 800116c:	200001c8 	.word	0x200001c8
 8001170:	20000000 	.word	0x20000000
 8001174:	08007e68 	.word	0x08007e68
 8001178:	2000031c 	.word	0x2000031c
 800117c:	200000e8 	.word	0x200000e8
 8001180:	40851800 	.word	0x40851800
 8001184:	20000090 	.word	0x20000090

08001188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b0b4      	sub	sp, #208	; 0xd0
 800118c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001192:	2230      	movs	r2, #48	; 0x30
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f006 fa4c 	bl	8007634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	2280      	movs	r2, #128	; 0x80
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f006 fa3d 	bl	8007634 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80011ba:	f003 ff03 	bl	8004fc4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	4b3b      	ldr	r3, [pc, #236]	; (80012ac <SystemClock_Config+0x124>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	4a3a      	ldr	r2, [pc, #232]	; (80012ac <SystemClock_Config+0x124>)
 80011c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ca:	4b38      	ldr	r3, [pc, #224]	; (80012ac <SystemClock_Config+0x124>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d6:	4b36      	ldr	r3, [pc, #216]	; (80012b0 <SystemClock_Config+0x128>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a35      	ldr	r2, [pc, #212]	; (80012b0 <SystemClock_Config+0x128>)
 80011dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	4b33      	ldr	r3, [pc, #204]	; (80012b0 <SystemClock_Config+0x128>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011ee:	2301      	movs	r3, #1
 80011f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011f4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80011f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fc:	2302      	movs	r3, #2
 80011fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001202:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001206:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 800120a:	2308      	movs	r3, #8
 800120c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001210:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001214:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001218:	2302      	movs	r3, #2
 800121a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800121e:	2309      	movs	r3, #9
 8001220:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001224:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001228:	4618      	mov	r0, r3
 800122a:	f003 ff2b 	bl	8005084 <HAL_RCC_OscConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001234:	f000 fab4 	bl	80017a0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001238:	f003 fed4 	bl	8004fe4 <HAL_PWREx_EnableOverDrive>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001242:	f000 faad 	bl	80017a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001246:	230f      	movs	r3, #15
 8001248:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124c:	2302      	movs	r3, #2
 800124e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001252:	2300      	movs	r3, #0
 8001254:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001258:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800125c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001260:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001264:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001268:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800126c:	2107      	movs	r1, #7
 800126e:	4618      	mov	r0, r3
 8001270:	f004 f9ac 	bl	80055cc <HAL_RCC_ClockConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800127a:	f000 fa91 	bl	80017a0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <SystemClock_Config+0x12c>)
 8001280:	60fb      	str	r3, [r7, #12]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001282:	2300      	movs	r3, #0
 8001284:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001286:	2300      	movs	r3, #0
 8001288:	66bb      	str	r3, [r7, #104]	; 0x68
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800128a:	2300      	movs	r3, #0
 800128c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	4618      	mov	r0, r3
 8001296:	f004 fb91 	bl	80059bc <HAL_RCCEx_PeriphCLKConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 80012a0:	f000 fa7e 	bl	80017a0 <Error_Handler>
  }
}
 80012a4:	bf00      	nop
 80012a6:	37d0      	adds	r7, #208	; 0xd0
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40007000 	.word	0x40007000
 80012b4:	00204100 	.word	0x00204100

080012b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012be:	463b      	mov	r3, r7
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012ca:	4b21      	ldr	r3, [pc, #132]	; (8001350 <MX_ADC1_Init+0x98>)
 80012cc:	4a21      	ldr	r2, [pc, #132]	; (8001354 <MX_ADC1_Init+0x9c>)
 80012ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80012d0:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <MX_ADC1_Init+0x98>)
 80012d2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80012d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012d8:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <MX_ADC1_Init+0x98>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012de:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <MX_ADC1_Init+0x98>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012e4:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <MX_ADC1_Init+0x98>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012ea:	4b19      	ldr	r3, [pc, #100]	; (8001350 <MX_ADC1_Init+0x98>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012f2:	4b17      	ldr	r3, [pc, #92]	; (8001350 <MX_ADC1_Init+0x98>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012f8:	4b15      	ldr	r3, [pc, #84]	; (8001350 <MX_ADC1_Init+0x98>)
 80012fa:	4a17      	ldr	r2, [pc, #92]	; (8001358 <MX_ADC1_Init+0xa0>)
 80012fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012fe:	4b14      	ldr	r3, [pc, #80]	; (8001350 <MX_ADC1_Init+0x98>)
 8001300:	2200      	movs	r2, #0
 8001302:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <MX_ADC1_Init+0x98>)
 8001306:	2201      	movs	r2, #1
 8001308:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_ADC1_Init+0x98>)
 800130c:	2201      	movs	r2, #1
 800130e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <MX_ADC1_Init+0x98>)
 8001314:	2201      	movs	r2, #1
 8001316:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001318:	480d      	ldr	r0, [pc, #52]	; (8001350 <MX_ADC1_Init+0x98>)
 800131a:	f000 fdc3 	bl	8001ea4 <HAL_ADC_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001324:	f000 fa3c 	bl	80017a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001328:	2309      	movs	r3, #9
 800132a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800132c:	2301      	movs	r3, #1
 800132e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001334:	463b      	mov	r3, r7
 8001336:	4619      	mov	r1, r3
 8001338:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_ADC1_Init+0x98>)
 800133a:	f000 ffaf 	bl	800229c <HAL_ADC_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001344:	f000 fa2c 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000214 	.word	0x20000214
 8001354:	40012000 	.word	0x40012000
 8001358:	0f000001 	.word	0x0f000001

0800135c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001362:	4a1c      	ldr	r2, [pc, #112]	; (80013d4 <MX_I2C1_Init+0x78>)
 8001364:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001368:	4a1b      	ldr	r2, [pc, #108]	; (80013d8 <MX_I2C1_Init+0x7c>)
 800136a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 212;
 800136c:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <MX_I2C1_Init+0x74>)
 800136e:	22d4      	movs	r2, #212	; 0xd4
 8001370:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001374:	2201      	movs	r2, #1
 8001376:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001378:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <MX_I2C1_Init+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800137e:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001380:	2200      	movs	r2, #0
 8001382:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001386:	2200      	movs	r2, #0
 8001388:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_I2C1_Init+0x74>)
 800138c:	2200      	movs	r2, #0
 800138e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001392:	2200      	movs	r2, #0
 8001394:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001396:	480e      	ldr	r0, [pc, #56]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001398:	f002 f8b0 	bl	80034fc <HAL_I2C_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013a2:	f000 f9fd 	bl	80017a0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013a6:	2100      	movs	r1, #0
 80013a8:	4809      	ldr	r0, [pc, #36]	; (80013d0 <MX_I2C1_Init+0x74>)
 80013aa:	f003 fd74 	bl	8004e96 <HAL_I2CEx_ConfigAnalogFilter>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013b4:	f000 f9f4 	bl	80017a0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013b8:	2100      	movs	r1, #0
 80013ba:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_I2C1_Init+0x74>)
 80013bc:	f003 fdb6 	bl	8004f2c <HAL_I2CEx_ConfigDigitalFilter>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013c6:	f000 f9eb 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200001c8 	.word	0x200001c8
 80013d4:	40005400 	.word	0x40005400
 80013d8:	20404768 	.word	0x20404768

080013dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ee:	463b      	mov	r3, r7
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	615a      	str	r2, [r3, #20]
 80013fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001400:	4b3c      	ldr	r3, [pc, #240]	; (80014f4 <MX_TIM4_Init+0x118>)
 8001402:	4a3d      	ldr	r2, [pc, #244]	; (80014f8 <MX_TIM4_Init+0x11c>)
 8001404:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001406:	4b3b      	ldr	r3, [pc, #236]	; (80014f4 <MX_TIM4_Init+0x118>)
 8001408:	2200      	movs	r2, #0
 800140a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140c:	4b39      	ldr	r3, [pc, #228]	; (80014f4 <MX_TIM4_Init+0x118>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 359;
 8001412:	4b38      	ldr	r3, [pc, #224]	; (80014f4 <MX_TIM4_Init+0x118>)
 8001414:	f240 1267 	movw	r2, #359	; 0x167
 8001418:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141a:	4b36      	ldr	r3, [pc, #216]	; (80014f4 <MX_TIM4_Init+0x118>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001420:	4b34      	ldr	r3, [pc, #208]	; (80014f4 <MX_TIM4_Init+0x118>)
 8001422:	2280      	movs	r2, #128	; 0x80
 8001424:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001426:	4833      	ldr	r0, [pc, #204]	; (80014f4 <MX_TIM4_Init+0x118>)
 8001428:	f004 fe10 	bl	800604c <HAL_TIM_OC_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001432:	f000 f9b5 	bl	80017a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001436:	482f      	ldr	r0, [pc, #188]	; (80014f4 <MX_TIM4_Init+0x118>)
 8001438:	f004 fe33 	bl	80060a2 <HAL_TIM_PWM_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8001442:	f000 f9ad 	bl	80017a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800144e:	f107 031c 	add.w	r3, r7, #28
 8001452:	4619      	mov	r1, r3
 8001454:	4827      	ldr	r0, [pc, #156]	; (80014f4 <MX_TIM4_Init+0x118>)
 8001456:	f005 fb57 	bl	8006b08 <HAL_TIMEx_MasterConfigSynchronization>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001460:	f000 f99e 	bl	80017a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001464:	2310      	movs	r3, #16
 8001466:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800146c:	2300      	movs	r3, #0
 800146e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001474:	463b      	mov	r3, r7
 8001476:	2200      	movs	r2, #0
 8001478:	4619      	mov	r1, r3
 800147a:	481e      	ldr	r0, [pc, #120]	; (80014f4 <MX_TIM4_Init+0x118>)
 800147c:	f004 fe8a 	bl	8006194 <HAL_TIM_OC_ConfigChannel>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001486:	f000 f98b 	bl	80017a0 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_1);
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <MX_TIM4_Init+0x118>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	699a      	ldr	r2, [r3, #24]
 8001490:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <MX_TIM4_Init+0x118>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f042 0208 	orr.w	r2, r2, #8
 8001498:	619a      	str	r2, [r3, #24]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800149a:	2360      	movs	r3, #96	; 0x60
 800149c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800149e:	463b      	mov	r3, r7
 80014a0:	2204      	movs	r2, #4
 80014a2:	4619      	mov	r1, r3
 80014a4:	4813      	ldr	r0, [pc, #76]	; (80014f4 <MX_TIM4_Init+0x118>)
 80014a6:	f004 fef3 	bl	8006290 <HAL_TIM_PWM_ConfigChannel>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80014b0:	f000 f976 	bl	80017a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014b4:	463b      	mov	r3, r7
 80014b6:	2208      	movs	r2, #8
 80014b8:	4619      	mov	r1, r3
 80014ba:	480e      	ldr	r0, [pc, #56]	; (80014f4 <MX_TIM4_Init+0x118>)
 80014bc:	f004 fee8 	bl	8006290 <HAL_TIM_PWM_ConfigChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80014c6:	f000 f96b 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  // Set DMA Transfers to 17 with DBL and destination to CCR1 (15) with DBA
  htim4.Instance->DCR =  TIM_DCR_DBA_1 | TIM_DCR_DBA_2 | TIM_DCR_DBA_3; // Transfer at CCR2, 1 transfer
 80014ca:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <MX_TIM4_Init+0x118>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	220e      	movs	r2, #14
 80014d0:	649a      	str	r2, [r3, #72]	; 0x48
  // Enable Update DMA Request
  htim4.Instance->DIER = TIM_DIER_UDE;
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <MX_TIM4_Init+0x118>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014da:	60da      	str	r2, [r3, #12]
  // Enable DMA requests on CH1
  htim4.Instance->DIER = TIM_DIER_CC1DE;
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <MX_TIM4_Init+0x118>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e4:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80014e6:	4803      	ldr	r0, [pc, #12]	; (80014f4 <MX_TIM4_Init+0x118>)
 80014e8:	f000 fb16 	bl	8001b18 <HAL_TIM_MspPostInit>

}
 80014ec:	bf00      	nop
 80014ee:	3728      	adds	r7, #40	; 0x28
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	200000a8 	.word	0x200000a8
 80014f8:	40000800 	.word	0x40000800

080014fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001500:	4b14      	ldr	r3, [pc, #80]	; (8001554 <MX_USART3_UART_Init+0x58>)
 8001502:	4a15      	ldr	r2, [pc, #84]	; (8001558 <MX_USART3_UART_Init+0x5c>)
 8001504:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001506:	4b13      	ldr	r3, [pc, #76]	; (8001554 <MX_USART3_UART_Init+0x58>)
 8001508:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800150c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <MX_USART3_UART_Init+0x58>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <MX_USART3_UART_Init+0x58>)
 8001516:	2200      	movs	r2, #0
 8001518:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800151a:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <MX_USART3_UART_Init+0x58>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <MX_USART3_UART_Init+0x58>)
 8001522:	220c      	movs	r2, #12
 8001524:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <MX_USART3_UART_Init+0x58>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <MX_USART3_UART_Init+0x58>)
 800152e:	2200      	movs	r2, #0
 8001530:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <MX_USART3_UART_Init+0x58>)
 8001534:	2200      	movs	r2, #0
 8001536:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <MX_USART3_UART_Init+0x58>)
 800153a:	2200      	movs	r2, #0
 800153c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <MX_USART3_UART_Init+0x58>)
 8001540:	f005 fb70 	bl	8006c24 <HAL_UART_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800154a:	f000 f929 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200000e8 	.word	0x200000e8
 8001558:	40004800 	.word	0x40004800

0800155c <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001572:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <MX_DMA_Init+0x80>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a1d      	ldr	r2, [pc, #116]	; (80015ec <MX_DMA_Init+0x80>)
 8001578:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <MX_DMA_Init+0x80>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800158a:	4b18      	ldr	r3, [pc, #96]	; (80015ec <MX_DMA_Init+0x80>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a17      	ldr	r2, [pc, #92]	; (80015ec <MX_DMA_Init+0x80>)
 8001590:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <MX_DMA_Init+0x80>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2100      	movs	r1, #0
 80015a6:	200b      	movs	r0, #11
 80015a8:	f001 fa19 	bl	80029de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80015ac:	200b      	movs	r0, #11
 80015ae:	f001 fa32 	bl	8002a16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	2010      	movs	r0, #16
 80015b8:	f001 fa11 	bl	80029de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80015bc:	2010      	movs	r0, #16
 80015be:	f001 fa2a 	bl	8002a16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	2011      	movs	r0, #17
 80015c8:	f001 fa09 	bl	80029de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80015cc:	2011      	movs	r0, #17
 80015ce:	f001 fa22 	bl	8002a16 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	203c      	movs	r0, #60	; 0x3c
 80015d8:	f001 fa01 	bl	80029de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80015dc:	203c      	movs	r0, #60	; 0x3c
 80015de:	f001 fa1a 	bl	8002a16 <HAL_NVIC_EnableIRQ>

}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800

080015f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08c      	sub	sp, #48	; 0x30
 80015f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001606:	4b55      	ldr	r3, [pc, #340]	; (800175c <MX_GPIO_Init+0x16c>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a54      	ldr	r2, [pc, #336]	; (800175c <MX_GPIO_Init+0x16c>)
 800160c:	f043 0304 	orr.w	r3, r3, #4
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b52      	ldr	r3, [pc, #328]	; (800175c <MX_GPIO_Init+0x16c>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	61bb      	str	r3, [r7, #24]
 800161c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800161e:	4b4f      	ldr	r3, [pc, #316]	; (800175c <MX_GPIO_Init+0x16c>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a4e      	ldr	r2, [pc, #312]	; (800175c <MX_GPIO_Init+0x16c>)
 8001624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b4c      	ldr	r3, [pc, #304]	; (800175c <MX_GPIO_Init+0x16c>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001636:	4b49      	ldr	r3, [pc, #292]	; (800175c <MX_GPIO_Init+0x16c>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a48      	ldr	r2, [pc, #288]	; (800175c <MX_GPIO_Init+0x16c>)
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b46      	ldr	r3, [pc, #280]	; (800175c <MX_GPIO_Init+0x16c>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800164e:	4b43      	ldr	r3, [pc, #268]	; (800175c <MX_GPIO_Init+0x16c>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a42      	ldr	r2, [pc, #264]	; (800175c <MX_GPIO_Init+0x16c>)
 8001654:	f043 0308 	orr.w	r3, r3, #8
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b40      	ldr	r3, [pc, #256]	; (800175c <MX_GPIO_Init+0x16c>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001666:	4b3d      	ldr	r3, [pc, #244]	; (800175c <MX_GPIO_Init+0x16c>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a3c      	ldr	r2, [pc, #240]	; (800175c <MX_GPIO_Init+0x16c>)
 800166c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b3a      	ldr	r3, [pc, #232]	; (800175c <MX_GPIO_Init+0x16c>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	4b37      	ldr	r3, [pc, #220]	; (800175c <MX_GPIO_Init+0x16c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a36      	ldr	r2, [pc, #216]	; (800175c <MX_GPIO_Init+0x16c>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b34      	ldr	r3, [pc, #208]	; (800175c <MX_GPIO_Init+0x16c>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800169c:	4830      	ldr	r0, [pc, #192]	; (8001760 <MX_GPIO_Init+0x170>)
 800169e:	f001 ff13 	bl	80034c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2140      	movs	r1, #64	; 0x40
 80016a6:	482f      	ldr	r0, [pc, #188]	; (8001764 <MX_GPIO_Init+0x174>)
 80016a8:	f001 ff0e 	bl	80034c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80016ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016b2:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <MX_GPIO_Init+0x178>)
 80016b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80016ba:	f107 031c 	add.w	r3, r7, #28
 80016be:	4619      	mov	r1, r3
 80016c0:	482a      	ldr	r0, [pc, #168]	; (800176c <MX_GPIO_Init+0x17c>)
 80016c2:	f001 fd67 	bl	8003194 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80016c6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80016ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016cc:	2301      	movs	r3, #1
 80016ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d4:	2300      	movs	r3, #0
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d8:	f107 031c 	add.w	r3, r7, #28
 80016dc:	4619      	mov	r1, r3
 80016de:	4820      	ldr	r0, [pc, #128]	; (8001760 <MX_GPIO_Init+0x170>)
 80016e0:	f001 fd58 	bl	8003194 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80016e4:	2340      	movs	r3, #64	; 0x40
 80016e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e8:	2301      	movs	r3, #1
 80016ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016f4:	f107 031c 	add.w	r3, r7, #28
 80016f8:	4619      	mov	r1, r3
 80016fa:	481a      	ldr	r0, [pc, #104]	; (8001764 <MX_GPIO_Init+0x174>)
 80016fc:	f001 fd4a 	bl	8003194 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800170c:	f107 031c 	add.w	r3, r7, #28
 8001710:	4619      	mov	r1, r3
 8001712:	4814      	ldr	r0, [pc, #80]	; (8001764 <MX_GPIO_Init+0x174>)
 8001714:	f001 fd3e 	bl	8003194 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin PA10 USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|GPIO_PIN_10|USB_DM_Pin|USB_DP_Pin;
 8001718:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800171c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	2302      	movs	r3, #2
 8001720:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001726:	2303      	movs	r3, #3
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800172a:	230a      	movs	r3, #10
 800172c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172e:	f107 031c 	add.w	r3, r7, #28
 8001732:	4619      	mov	r1, r3
 8001734:	480e      	ldr	r0, [pc, #56]	; (8001770 <MX_GPIO_Init+0x180>)
 8001736:	f001 fd2d 	bl	8003194 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800173a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800173e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001748:	f107 031c 	add.w	r3, r7, #28
 800174c:	4619      	mov	r1, r3
 800174e:	4808      	ldr	r0, [pc, #32]	; (8001770 <MX_GPIO_Init+0x180>)
 8001750:	f001 fd20 	bl	8003194 <HAL_GPIO_Init>

}
 8001754:	bf00      	nop
 8001756:	3730      	adds	r7, #48	; 0x30
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40023800 	.word	0x40023800
 8001760:	40020400 	.word	0x40020400
 8001764:	40021800 	.word	0x40021800
 8001768:	10110000 	.word	0x10110000
 800176c:	40020800 	.word	0x40020800
 8001770:	40020000 	.word	0x40020000

08001774 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
    void HAL_ADC_ConvHalfCpltCallback (ADC_HandleTypeDef* hadc)
    {
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	__NOP();
 800177c:	bf00      	nop
    }
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <HAL_ADC_ConvCpltCallback>:

    void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef* hadc)
    {
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
    __NOP();
 8001792:	bf00      	nop
    }
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <HAL_MspInit+0x44>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	4a0e      	ldr	r2, [pc, #56]	; (80017f4 <HAL_MspInit+0x44>)
 80017bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c0:	6413      	str	r3, [r2, #64]	; 0x40
 80017c2:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <HAL_MspInit+0x44>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <HAL_MspInit+0x44>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	4a08      	ldr	r2, [pc, #32]	; (80017f4 <HAL_MspInit+0x44>)
 80017d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d8:	6453      	str	r3, [r2, #68]	; 0x44
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_MspInit+0x44>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017e2:	603b      	str	r3, [r7, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800

080017f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	; 0x28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a31      	ldr	r2, [pc, #196]	; (80018dc <HAL_ADC_MspInit+0xe4>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d15c      	bne.n	80018d4 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800181a:	4b31      	ldr	r3, [pc, #196]	; (80018e0 <HAL_ADC_MspInit+0xe8>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	4a30      	ldr	r2, [pc, #192]	; (80018e0 <HAL_ADC_MspInit+0xe8>)
 8001820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001824:	6453      	str	r3, [r2, #68]	; 0x44
 8001826:	4b2e      	ldr	r3, [pc, #184]	; (80018e0 <HAL_ADC_MspInit+0xe8>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001832:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <HAL_ADC_MspInit+0xe8>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a2a      	ldr	r2, [pc, #168]	; (80018e0 <HAL_ADC_MspInit+0xe8>)
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <HAL_ADC_MspInit+0xe8>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_THROTTLE_CONTROL_Pin;
 800184a:	2302      	movs	r3, #2
 800184c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800184e:	2303      	movs	r3, #3
 8001850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_THROTTLE_CONTROL_GPIO_Port, &GPIO_InitStruct);
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	4619      	mov	r1, r3
 800185c:	4821      	ldr	r0, [pc, #132]	; (80018e4 <HAL_ADC_MspInit+0xec>)
 800185e:	f001 fc99 	bl	8003194 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8001862:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <HAL_ADC_MspInit+0xf0>)
 8001864:	4a21      	ldr	r2, [pc, #132]	; (80018ec <HAL_ADC_MspInit+0xf4>)
 8001866:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001868:	4b1f      	ldr	r3, [pc, #124]	; (80018e8 <HAL_ADC_MspInit+0xf0>)
 800186a:	2200      	movs	r2, #0
 800186c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800186e:	4b1e      	ldr	r3, [pc, #120]	; (80018e8 <HAL_ADC_MspInit+0xf0>)
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001874:	4b1c      	ldr	r3, [pc, #112]	; (80018e8 <HAL_ADC_MspInit+0xf0>)
 8001876:	2200      	movs	r2, #0
 8001878:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 800187a:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <HAL_ADC_MspInit+0xf0>)
 800187c:	2200      	movs	r2, #0
 800187e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001880:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <HAL_ADC_MspInit+0xf0>)
 8001882:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001886:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001888:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <HAL_ADC_MspInit+0xf0>)
 800188a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800188e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001890:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <HAL_ADC_MspInit+0xf0>)
 8001892:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001896:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001898:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <HAL_ADC_MspInit+0xf0>)
 800189a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800189e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <HAL_ADC_MspInit+0xf0>)
 80018a2:	2204      	movs	r2, #4
 80018a4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <HAL_ADC_MspInit+0xf0>)
 80018a8:	2203      	movs	r2, #3
 80018aa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 80018ac:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <HAL_ADC_MspInit+0xf0>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80018b2:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <HAL_ADC_MspInit+0xf0>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018b8:	480b      	ldr	r0, [pc, #44]	; (80018e8 <HAL_ADC_MspInit+0xf0>)
 80018ba:	f001 f8c7 	bl	8002a4c <HAL_DMA_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <HAL_ADC_MspInit+0xd0>
    {
      Error_Handler();
 80018c4:	f7ff ff6c 	bl	80017a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a07      	ldr	r2, [pc, #28]	; (80018e8 <HAL_ADC_MspInit+0xf0>)
 80018cc:	639a      	str	r2, [r3, #56]	; 0x38
 80018ce:	4a06      	ldr	r2, [pc, #24]	; (80018e8 <HAL_ADC_MspInit+0xf0>)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018d4:	bf00      	nop
 80018d6:	3728      	adds	r7, #40	; 0x28
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40012000 	.word	0x40012000
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40020400 	.word	0x40020400
 80018e8:	2000025c 	.word	0x2000025c
 80018ec:	40026470 	.word	0x40026470

080018f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	; 0x28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a52      	ldr	r2, [pc, #328]	; (8001a58 <HAL_I2C_MspInit+0x168>)
 800190e:	4293      	cmp	r3, r2
 8001910:	f040 809d 	bne.w	8001a4e <HAL_I2C_MspInit+0x15e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001914:	4b51      	ldr	r3, [pc, #324]	; (8001a5c <HAL_I2C_MspInit+0x16c>)
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001918:	4a50      	ldr	r2, [pc, #320]	; (8001a5c <HAL_I2C_MspInit+0x16c>)
 800191a:	f043 0302 	orr.w	r3, r3, #2
 800191e:	6313      	str	r3, [r2, #48]	; 0x30
 8001920:	4b4e      	ldr	r3, [pc, #312]	; (8001a5c <HAL_I2C_MspInit+0x16c>)
 8001922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800192c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001932:	2312      	movs	r3, #18
 8001934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001936:	2301      	movs	r3, #1
 8001938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193a:	2303      	movs	r3, #3
 800193c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800193e:	2304      	movs	r3, #4
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	4845      	ldr	r0, [pc, #276]	; (8001a60 <HAL_I2C_MspInit+0x170>)
 800194a:	f001 fc23 	bl	8003194 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800194e:	4b43      	ldr	r3, [pc, #268]	; (8001a5c <HAL_I2C_MspInit+0x16c>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	4a42      	ldr	r2, [pc, #264]	; (8001a5c <HAL_I2C_MspInit+0x16c>)
 8001954:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001958:	6413      	str	r3, [r2, #64]	; 0x40
 800195a:	4b40      	ldr	r3, [pc, #256]	; (8001a5c <HAL_I2C_MspInit+0x16c>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8001966:	4b3f      	ldr	r3, [pc, #252]	; (8001a64 <HAL_I2C_MspInit+0x174>)
 8001968:	4a3f      	ldr	r2, [pc, #252]	; (8001a68 <HAL_I2C_MspInit+0x178>)
 800196a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800196c:	4b3d      	ldr	r3, [pc, #244]	; (8001a64 <HAL_I2C_MspInit+0x174>)
 800196e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001972:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001974:	4b3b      	ldr	r3, [pc, #236]	; (8001a64 <HAL_I2C_MspInit+0x174>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800197a:	4b3a      	ldr	r3, [pc, #232]	; (8001a64 <HAL_I2C_MspInit+0x174>)
 800197c:	2200      	movs	r2, #0
 800197e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001980:	4b38      	ldr	r3, [pc, #224]	; (8001a64 <HAL_I2C_MspInit+0x174>)
 8001982:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001986:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001988:	4b36      	ldr	r3, [pc, #216]	; (8001a64 <HAL_I2C_MspInit+0x174>)
 800198a:	2200      	movs	r2, #0
 800198c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800198e:	4b35      	ldr	r3, [pc, #212]	; (8001a64 <HAL_I2C_MspInit+0x174>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001994:	4b33      	ldr	r3, [pc, #204]	; (8001a64 <HAL_I2C_MspInit+0x174>)
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800199a:	4b32      	ldr	r3, [pc, #200]	; (8001a64 <HAL_I2C_MspInit+0x174>)
 800199c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80019a0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80019a2:	4b30      	ldr	r3, [pc, #192]	; (8001a64 <HAL_I2C_MspInit+0x174>)
 80019a4:	2204      	movs	r2, #4
 80019a6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80019a8:	4b2e      	ldr	r3, [pc, #184]	; (8001a64 <HAL_I2C_MspInit+0x174>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80019ae:	4b2d      	ldr	r3, [pc, #180]	; (8001a64 <HAL_I2C_MspInit+0x174>)
 80019b0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80019b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80019b6:	4b2b      	ldr	r3, [pc, #172]	; (8001a64 <HAL_I2C_MspInit+0x174>)
 80019b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80019bc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80019be:	4829      	ldr	r0, [pc, #164]	; (8001a64 <HAL_I2C_MspInit+0x174>)
 80019c0:	f001 f844 	bl	8002a4c <HAL_DMA_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_I2C_MspInit+0xde>
    {
      Error_Handler();
 80019ca:	f7ff fee9 	bl	80017a0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a24      	ldr	r2, [pc, #144]	; (8001a64 <HAL_I2C_MspInit+0x174>)
 80019d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80019d4:	4a23      	ldr	r2, [pc, #140]	; (8001a64 <HAL_I2C_MspInit+0x174>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80019da:	4b24      	ldr	r3, [pc, #144]	; (8001a6c <HAL_I2C_MspInit+0x17c>)
 80019dc:	4a24      	ldr	r2, [pc, #144]	; (8001a70 <HAL_I2C_MspInit+0x180>)
 80019de:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80019e0:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <HAL_I2C_MspInit+0x17c>)
 80019e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019e6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019e8:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <HAL_I2C_MspInit+0x17c>)
 80019ea:	2240      	movs	r2, #64	; 0x40
 80019ec:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ee:	4b1f      	ldr	r3, [pc, #124]	; (8001a6c <HAL_I2C_MspInit+0x17c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019f4:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <HAL_I2C_MspInit+0x17c>)
 80019f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019fa:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <HAL_I2C_MspInit+0x17c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a02:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <HAL_I2C_MspInit+0x17c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001a08:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <HAL_I2C_MspInit+0x17c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <HAL_I2C_MspInit+0x17c>)
 8001a10:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a14:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <HAL_I2C_MspInit+0x17c>)
 8001a18:	2204      	movs	r2, #4
 8001a1a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <HAL_I2C_MspInit+0x17c>)
 8001a1e:	2203      	movs	r2, #3
 8001a20:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001a22:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_I2C_MspInit+0x17c>)
 8001a24:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001a28:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <HAL_I2C_MspInit+0x17c>)
 8001a2c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a30:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001a32:	480e      	ldr	r0, [pc, #56]	; (8001a6c <HAL_I2C_MspInit+0x17c>)
 8001a34:	f001 f80a 	bl	8002a4c <HAL_DMA_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_I2C_MspInit+0x152>
    {
      Error_Handler();
 8001a3e:	f7ff feaf 	bl	80017a0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a09      	ldr	r2, [pc, #36]	; (8001a6c <HAL_I2C_MspInit+0x17c>)
 8001a46:	639a      	str	r2, [r3, #56]	; 0x38
 8001a48:	4a08      	ldr	r2, [pc, #32]	; (8001a6c <HAL_I2C_MspInit+0x17c>)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a4e:	bf00      	nop
 8001a50:	3728      	adds	r7, #40	; 0x28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40005400 	.word	0x40005400
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40020400 	.word	0x40020400
 8001a64:	200002bc 	.word	0x200002bc
 8001a68:	40026088 	.word	0x40026088
 8001a6c:	20000168 	.word	0x20000168
 8001a70:	400260a0 	.word	0x400260a0

08001a74 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a21      	ldr	r2, [pc, #132]	; (8001b08 <HAL_TIM_OC_MspInit+0x94>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d13c      	bne.n	8001b00 <HAL_TIM_OC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a86:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <HAL_TIM_OC_MspInit+0x98>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	4a20      	ldr	r2, [pc, #128]	; (8001b0c <HAL_TIM_OC_MspInit+0x98>)
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	6413      	str	r3, [r2, #64]	; 0x40
 8001a92:	4b1e      	ldr	r3, [pc, #120]	; (8001b0c <HAL_TIM_OC_MspInit+0x98>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8001a9e:	4b1c      	ldr	r3, [pc, #112]	; (8001b10 <HAL_TIM_OC_MspInit+0x9c>)
 8001aa0:	4a1c      	ldr	r2, [pc, #112]	; (8001b14 <HAL_TIM_OC_MspInit+0xa0>)
 8001aa2:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8001aa4:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <HAL_TIM_OC_MspInit+0x9c>)
 8001aa6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001aaa:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001aac:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <HAL_TIM_OC_MspInit+0x9c>)
 8001aae:	2240      	movs	r2, #64	; 0x40
 8001ab0:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ab2:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <HAL_TIM_OC_MspInit+0x9c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001ab8:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <HAL_TIM_OC_MspInit+0x9c>)
 8001aba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001abe:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ac0:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <HAL_TIM_OC_MspInit+0x9c>)
 8001ac2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ac6:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ac8:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <HAL_TIM_OC_MspInit+0x9c>)
 8001aca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ace:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8001ad0:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <HAL_TIM_OC_MspInit+0x9c>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <HAL_TIM_OC_MspInit+0x9c>)
 8001ad8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001adc:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ade:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <HAL_TIM_OC_MspInit+0x9c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8001ae4:	480a      	ldr	r0, [pc, #40]	; (8001b10 <HAL_TIM_OC_MspInit+0x9c>)
 8001ae6:	f000 ffb1 	bl	8002a4c <HAL_DMA_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <HAL_TIM_OC_MspInit+0x80>
    {
      Error_Handler();
 8001af0:	f7ff fe56 	bl	80017a0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a06      	ldr	r2, [pc, #24]	; (8001b10 <HAL_TIM_OC_MspInit+0x9c>)
 8001af8:	625a      	str	r2, [r3, #36]	; 0x24
 8001afa:	4a05      	ldr	r2, [pc, #20]	; (8001b10 <HAL_TIM_OC_MspInit+0x9c>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b00:	bf00      	nop
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40000800 	.word	0x40000800
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	20000334 	.word	0x20000334
 8001b14:	40026010 	.word	0x40026010

08001b18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b088      	sub	sp, #32
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	f107 030c 	add.w	r3, r7, #12
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a11      	ldr	r2, [pc, #68]	; (8001b7c <HAL_TIM_MspPostInit+0x64>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d11c      	bne.n	8001b74 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <HAL_TIM_MspPostInit+0x68>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a10      	ldr	r2, [pc, #64]	; (8001b80 <HAL_TIM_MspPostInit+0x68>)
 8001b40:	f043 0308 	orr.w	r3, r3, #8
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <HAL_TIM_MspPostInit+0x68>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = TIM4_CH1_DMA_LATCH_Pin|TIM4_CH2_MOTOR_1_Pin|TIM4_CH3_MOTOR_2_Pin;
 8001b52:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001b56:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b64:	2302      	movs	r3, #2
 8001b66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b68:	f107 030c 	add.w	r3, r7, #12
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4805      	ldr	r0, [pc, #20]	; (8001b84 <HAL_TIM_MspPostInit+0x6c>)
 8001b70:	f001 fb10 	bl	8003194 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b74:	bf00      	nop
 8001b76:	3720      	adds	r7, #32
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40000800 	.word	0x40000800
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40020c00 	.word	0x40020c00

08001b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	; 0x28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a17      	ldr	r2, [pc, #92]	; (8001c04 <HAL_UART_MspInit+0x7c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d128      	bne.n	8001bfc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001baa:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <HAL_UART_MspInit+0x80>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	4a16      	ldr	r2, [pc, #88]	; (8001c08 <HAL_UART_MspInit+0x80>)
 8001bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb6:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <HAL_UART_MspInit+0x80>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <HAL_UART_MspInit+0x80>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a10      	ldr	r2, [pc, #64]	; (8001c08 <HAL_UART_MspInit+0x80>)
 8001bc8:	f043 0308 	orr.w	r3, r3, #8
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <HAL_UART_MspInit+0x80>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001bda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be8:	2303      	movs	r3, #3
 8001bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bec:	2307      	movs	r3, #7
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4805      	ldr	r0, [pc, #20]	; (8001c0c <HAL_UART_MspInit+0x84>)
 8001bf8:	f001 facc 	bl	8003194 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bfc:	bf00      	nop
 8001bfe:	3728      	adds	r7, #40	; 0x28
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40004800 	.word	0x40004800
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40020c00 	.word	0x40020c00

08001c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c22:	e7fe      	b.n	8001c22 <HardFault_Handler+0x4>

08001c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <MemManage_Handler+0x4>

08001c2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c2e:	e7fe      	b.n	8001c2e <BusFault_Handler+0x4>

08001c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c34:	e7fe      	b.n	8001c34 <UsageFault_Handler+0x4>

08001c36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c64:	f000 f8dc 	bl	8001e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8001c70:	4802      	ldr	r0, [pc, #8]	; (8001c7c <DMA1_Stream0_IRQHandler+0x10>)
 8001c72:	f001 f81b 	bl	8002cac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000334 	.word	0x20000334

08001c80 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001c84:	4802      	ldr	r0, [pc, #8]	; (8001c90 <DMA1_Stream5_IRQHandler+0x10>)
 8001c86:	f001 f811 	bl	8002cac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	200002bc 	.word	0x200002bc

08001c94 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001c98:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <DMA1_Stream6_IRQHandler+0x10>)
 8001c9a:	f001 f807 	bl	8002cac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000168 	.word	0x20000168

08001ca8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cac:	4802      	ldr	r0, [pc, #8]	; (8001cb8 <DMA2_Stream4_IRQHandler+0x10>)
 8001cae:	f000 fffd 	bl	8002cac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	2000025c 	.word	0x2000025c

08001cbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cc4:	4a14      	ldr	r2, [pc, #80]	; (8001d18 <_sbrk+0x5c>)
 8001cc6:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <_sbrk+0x60>)
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cd0:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <_sbrk+0x64>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d102      	bne.n	8001cde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <_sbrk+0x64>)
 8001cda:	4a12      	ldr	r2, [pc, #72]	; (8001d24 <_sbrk+0x68>)
 8001cdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cde:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <_sbrk+0x64>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d207      	bcs.n	8001cfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cec:	f005 fc70 	bl	80075d0 <__errno>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	230c      	movs	r3, #12
 8001cf4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfa:	e009      	b.n	8001d10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cfc:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <_sbrk+0x64>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d02:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <_sbrk+0x64>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	4a05      	ldr	r2, [pc, #20]	; (8001d20 <_sbrk+0x64>)
 8001d0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20040000 	.word	0x20040000
 8001d1c:	00000400 	.word	0x00000400
 8001d20:	2000009c 	.word	0x2000009c
 8001d24:	200003a0 	.word	0x200003a0

08001d28 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d2c:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <SystemInit+0x28>)
 8001d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d32:	4a07      	ldr	r2, [pc, #28]	; (8001d50 <SystemInit+0x28>)
 8001d34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d3c:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <SystemInit+0x28>)
 8001d3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d42:	609a      	str	r2, [r3, #8]
#endif
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d5a:	e003      	b.n	8001d64 <LoopCopyDataInit>

08001d5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d62:	3104      	adds	r1, #4

08001d64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d64:	480b      	ldr	r0, [pc, #44]	; (8001d94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d66:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d6c:	d3f6      	bcc.n	8001d5c <CopyDataInit>
  ldr  r2, =_sbss
 8001d6e:	4a0b      	ldr	r2, [pc, #44]	; (8001d9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d70:	e002      	b.n	8001d78 <LoopFillZerobss>

08001d72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d74:	f842 3b04 	str.w	r3, [r2], #4

08001d78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d78:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d7c:	d3f9      	bcc.n	8001d72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d7e:	f7ff ffd3 	bl	8001d28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d82:	f005 fc2b 	bl	80075dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d86:	f7ff f97b 	bl	8001080 <main>
  bx  lr    
 8001d8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d8c:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8001d90:	08007edc 	.word	0x08007edc
  ldr  r0, =_sdata
 8001d94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d98:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001d9c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001da0:	200003a0 	.word	0x200003a0

08001da4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001da4:	e7fe      	b.n	8001da4 <ADC_IRQHandler>

08001da6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001daa:	2003      	movs	r0, #3
 8001dac:	f000 fe0c 	bl	80029c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001db0:	2000      	movs	r0, #0
 8001db2:	f000 f805 	bl	8001dc0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001db6:	f7ff fcfb 	bl	80017b0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_InitTick+0x54>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <HAL_InitTick+0x58>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 fe27 	bl	8002a32 <HAL_SYSTICK_Config>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00e      	b.n	8001e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b0f      	cmp	r3, #15
 8001df2:	d80a      	bhi.n	8001e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df4:	2200      	movs	r2, #0
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	f000 fdef 	bl	80029de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e00:	4a06      	ldr	r2, [pc, #24]	; (8001e1c <HAL_InitTick+0x5c>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	e000      	b.n	8001e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000004 	.word	0x20000004
 8001e18:	2000000c 	.word	0x2000000c
 8001e1c:	20000008 	.word	0x20000008

08001e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <HAL_IncTick+0x20>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_IncTick+0x24>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4413      	add	r3, r2
 8001e30:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <HAL_IncTick+0x24>)
 8001e32:	6013      	str	r3, [r2, #0]
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	2000000c 	.word	0x2000000c
 8001e44:	20000398 	.word	0x20000398

08001e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e4c:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <HAL_GetTick+0x14>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	20000398 	.word	0x20000398

08001e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e68:	f7ff ffee 	bl	8001e48 <HAL_GetTick>
 8001e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e78:	d005      	beq.n	8001e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_Delay+0x40>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4413      	add	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e86:	bf00      	nop
 8001e88:	f7ff ffde 	bl	8001e48 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d8f7      	bhi.n	8001e88 <HAL_Delay+0x28>
  {
  }
}
 8001e98:	bf00      	nop
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	2000000c 	.word	0x2000000c

08001ea4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eac:	2300      	movs	r3, #0
 8001eae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e031      	b.n	8001f1e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d109      	bne.n	8001ed6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff fc98 	bl	80017f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f003 0310 	and.w	r3, r3, #16
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d116      	bne.n	8001f10 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <HAL_ADC_Init+0x84>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	f043 0202 	orr.w	r2, r3, #2
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 fb1c 	bl	8002530 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	f023 0303 	bic.w	r3, r3, #3
 8001f06:	f043 0201 	orr.w	r2, r3, #1
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	641a      	str	r2, [r3, #64]	; 0x40
 8001f0e:	e001      	b.n	8001f14 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	ffffeefd 	.word	0xffffeefd

08001f2c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d101      	bne.n	8001f46 <HAL_ADC_Start+0x1a>
 8001f42:	2302      	movs	r3, #2
 8001f44:	e0a0      	b.n	8002088 <HAL_ADC_Start+0x15c>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d018      	beq.n	8001f8e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0201 	orr.w	r2, r2, #1
 8001f6a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001f6c:	4b49      	ldr	r3, [pc, #292]	; (8002094 <HAL_ADC_Start+0x168>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a49      	ldr	r2, [pc, #292]	; (8002098 <HAL_ADC_Start+0x16c>)
 8001f72:	fba2 2303 	umull	r2, r3, r2, r3
 8001f76:	0c9a      	lsrs	r2, r3, #18
 8001f78:	4613      	mov	r3, r2
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	4413      	add	r3, r2
 8001f7e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001f80:	e002      	b.n	8001f88 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f9      	bne.n	8001f82 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d174      	bne.n	8002086 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fa0:	4b3e      	ldr	r3, [pc, #248]	; (800209c <HAL_ADC_Start+0x170>)
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d007      	beq.n	8001fca <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fc2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fd6:	d106      	bne.n	8001fe6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fdc:	f023 0206 	bic.w	r2, r3, #6
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	645a      	str	r2, [r3, #68]	; 0x44
 8001fe4:	e002      	b.n	8001fec <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ffc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001ffe:	4b28      	ldr	r3, [pc, #160]	; (80020a0 <HAL_ADC_Start+0x174>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 031f 	and.w	r3, r3, #31
 8002006:	2b00      	cmp	r3, #0
 8002008:	d10f      	bne.n	800202a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d136      	bne.n	8002086 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	e02d      	b.n	8002086 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a1d      	ldr	r2, [pc, #116]	; (80020a4 <HAL_ADC_Start+0x178>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d10e      	bne.n	8002052 <HAL_ADC_Start+0x126>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d107      	bne.n	8002052 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002050:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002052:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <HAL_ADC_Start+0x174>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0310 	and.w	r3, r3, #16
 800205a:	2b00      	cmp	r3, #0
 800205c:	d113      	bne.n	8002086 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a11      	ldr	r2, [pc, #68]	; (80020a8 <HAL_ADC_Start+0x17c>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d10e      	bne.n	8002086 <HAL_ADC_Start+0x15a>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d107      	bne.n	8002086 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002084:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	20000004 	.word	0x20000004
 8002098:	431bde83 	.word	0x431bde83
 800209c:	fffff8fe 	.word	0xfffff8fe
 80020a0:	40012300 	.word	0x40012300
 80020a4:	40012000 	.word	0x40012000
 80020a8:	40012200 	.word	0x40012200

080020ac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d101      	bne.n	80020ca <HAL_ADC_Start_DMA+0x1e>
 80020c6:	2302      	movs	r3, #2
 80020c8:	e0c7      	b.n	800225a <HAL_ADC_Start_DMA+0x1ae>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d018      	beq.n	8002112 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0201 	orr.w	r2, r2, #1
 80020ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80020f0:	4b5c      	ldr	r3, [pc, #368]	; (8002264 <HAL_ADC_Start_DMA+0x1b8>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a5c      	ldr	r2, [pc, #368]	; (8002268 <HAL_ADC_Start_DMA+0x1bc>)
 80020f6:	fba2 2303 	umull	r2, r3, r2, r3
 80020fa:	0c9a      	lsrs	r2, r3, #18
 80020fc:	4613      	mov	r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4413      	add	r3, r2
 8002102:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002104:	e002      	b.n	800210c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	3b01      	subs	r3, #1
 800210a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f9      	bne.n	8002106 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b01      	cmp	r3, #1
 800211e:	f040 809b 	bne.w	8002258 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002126:	4b51      	ldr	r3, [pc, #324]	; (800226c <HAL_ADC_Start_DMA+0x1c0>)
 8002128:	4013      	ands	r3, r2
 800212a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213c:	2b00      	cmp	r3, #0
 800213e:	d007      	beq.n	8002150 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002148:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800215c:	d106      	bne.n	800216c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	f023 0206 	bic.w	r2, r3, #6
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	645a      	str	r2, [r3, #68]	; 0x44
 800216a:	e002      	b.n	8002172 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217e:	4a3c      	ldr	r2, [pc, #240]	; (8002270 <HAL_ADC_Start_DMA+0x1c4>)
 8002180:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002186:	4a3b      	ldr	r2, [pc, #236]	; (8002274 <HAL_ADC_Start_DMA+0x1c8>)
 8002188:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218e:	4a3a      	ldr	r2, [pc, #232]	; (8002278 <HAL_ADC_Start_DMA+0x1cc>)
 8002190:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800219a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80021aa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021ba:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	334c      	adds	r3, #76	; 0x4c
 80021c6:	4619      	mov	r1, r3
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f000 fcec 	bl	8002ba8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80021d0:	4b2a      	ldr	r3, [pc, #168]	; (800227c <HAL_ADC_Start_DMA+0x1d0>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 031f 	and.w	r3, r3, #31
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10f      	bne.n	80021fc <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d136      	bne.n	8002258 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	e02d      	b.n	8002258 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a1f      	ldr	r2, [pc, #124]	; (8002280 <HAL_ADC_Start_DMA+0x1d4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d10e      	bne.n	8002224 <HAL_ADC_Start_DMA+0x178>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d107      	bne.n	8002224 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002222:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002224:	4b15      	ldr	r3, [pc, #84]	; (800227c <HAL_ADC_Start_DMA+0x1d0>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 0310 	and.w	r3, r3, #16
 800222c:	2b00      	cmp	r3, #0
 800222e:	d113      	bne.n	8002258 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a13      	ldr	r2, [pc, #76]	; (8002284 <HAL_ADC_Start_DMA+0x1d8>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d10e      	bne.n	8002258 <HAL_ADC_Start_DMA+0x1ac>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d107      	bne.n	8002258 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002256:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000004 	.word	0x20000004
 8002268:	431bde83 	.word	0x431bde83
 800226c:	fffff8fe 	.word	0xfffff8fe
 8002270:	08002725 	.word	0x08002725
 8002274:	080027df 	.word	0x080027df
 8002278:	080027fb 	.word	0x080027fb
 800227c:	40012300 	.word	0x40012300
 8002280:	40012000 	.word	0x40012000
 8002284:	40012200 	.word	0x40012200

08002288 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x1c>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e12a      	b.n	800250e <HAL_ADC_ConfigChannel+0x272>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b09      	cmp	r3, #9
 80022c6:	d93a      	bls.n	800233e <HAL_ADC_ConfigChannel+0xa2>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022d0:	d035      	beq.n	800233e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68d9      	ldr	r1, [r3, #12]
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	b29b      	uxth	r3, r3
 80022de:	461a      	mov	r2, r3
 80022e0:	4613      	mov	r3, r2
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	4413      	add	r3, r2
 80022e6:	3b1e      	subs	r3, #30
 80022e8:	2207      	movs	r2, #7
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43da      	mvns	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	400a      	ands	r2, r1
 80022f6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a87      	ldr	r2, [pc, #540]	; (800251c <HAL_ADC_ConfigChannel+0x280>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d10a      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68d9      	ldr	r1, [r3, #12]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	061a      	lsls	r2, r3, #24
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002316:	e035      	b.n	8002384 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68d9      	ldr	r1, [r3, #12]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	b29b      	uxth	r3, r3
 8002328:	4618      	mov	r0, r3
 800232a:	4603      	mov	r3, r0
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4403      	add	r3, r0
 8002330:	3b1e      	subs	r3, #30
 8002332:	409a      	lsls	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800233c:	e022      	b.n	8002384 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6919      	ldr	r1, [r3, #16]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	b29b      	uxth	r3, r3
 800234a:	461a      	mov	r2, r3
 800234c:	4613      	mov	r3, r2
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	4413      	add	r3, r2
 8002352:	2207      	movs	r2, #7
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43da      	mvns	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	400a      	ands	r2, r1
 8002360:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6919      	ldr	r1, [r3, #16]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	b29b      	uxth	r3, r3
 8002372:	4618      	mov	r0, r3
 8002374:	4603      	mov	r3, r0
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	4403      	add	r3, r0
 800237a:	409a      	lsls	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b06      	cmp	r3, #6
 800238a:	d824      	bhi.n	80023d6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	4613      	mov	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	3b05      	subs	r3, #5
 800239e:	221f      	movs	r2, #31
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43da      	mvns	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	400a      	ands	r2, r1
 80023ac:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	4618      	mov	r0, r3
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	3b05      	subs	r3, #5
 80023c8:	fa00 f203 	lsl.w	r2, r0, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	635a      	str	r2, [r3, #52]	; 0x34
 80023d4:	e04c      	b.n	8002470 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b0c      	cmp	r3, #12
 80023dc:	d824      	bhi.n	8002428 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	3b23      	subs	r3, #35	; 0x23
 80023f0:	221f      	movs	r2, #31
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43da      	mvns	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	400a      	ands	r2, r1
 80023fe:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	b29b      	uxth	r3, r3
 800240c:	4618      	mov	r0, r3
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	3b23      	subs	r3, #35	; 0x23
 800241a:	fa00 f203 	lsl.w	r2, r0, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	631a      	str	r2, [r3, #48]	; 0x30
 8002426:	e023      	b.n	8002470 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	3b41      	subs	r3, #65	; 0x41
 800243a:	221f      	movs	r2, #31
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43da      	mvns	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	400a      	ands	r2, r1
 8002448:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	b29b      	uxth	r3, r3
 8002456:	4618      	mov	r0, r3
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	3b41      	subs	r3, #65	; 0x41
 8002464:	fa00 f203 	lsl.w	r2, r0, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a2a      	ldr	r2, [pc, #168]	; (8002520 <HAL_ADC_ConfigChannel+0x284>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d10a      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x1f4>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002482:	d105      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002484:	4b27      	ldr	r3, [pc, #156]	; (8002524 <HAL_ADC_ConfigChannel+0x288>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4a26      	ldr	r2, [pc, #152]	; (8002524 <HAL_ADC_ConfigChannel+0x288>)
 800248a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800248e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a22      	ldr	r2, [pc, #136]	; (8002520 <HAL_ADC_ConfigChannel+0x284>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d109      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x212>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b12      	cmp	r3, #18
 80024a0:	d105      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80024a2:	4b20      	ldr	r3, [pc, #128]	; (8002524 <HAL_ADC_ConfigChannel+0x288>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	4a1f      	ldr	r2, [pc, #124]	; (8002524 <HAL_ADC_ConfigChannel+0x288>)
 80024a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024ac:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a1b      	ldr	r2, [pc, #108]	; (8002520 <HAL_ADC_ConfigChannel+0x284>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d125      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x268>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a17      	ldr	r2, [pc, #92]	; (800251c <HAL_ADC_ConfigChannel+0x280>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d003      	beq.n	80024ca <HAL_ADC_ConfigChannel+0x22e>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b11      	cmp	r3, #17
 80024c8:	d11c      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80024ca:	4b16      	ldr	r3, [pc, #88]	; (8002524 <HAL_ADC_ConfigChannel+0x288>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4a15      	ldr	r2, [pc, #84]	; (8002524 <HAL_ADC_ConfigChannel+0x288>)
 80024d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024d4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a10      	ldr	r2, [pc, #64]	; (800251c <HAL_ADC_ConfigChannel+0x280>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d111      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80024e0:	4b11      	ldr	r3, [pc, #68]	; (8002528 <HAL_ADC_ConfigChannel+0x28c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a11      	ldr	r2, [pc, #68]	; (800252c <HAL_ADC_ConfigChannel+0x290>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	0c9a      	lsrs	r2, r3, #18
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80024f6:	e002      	b.n	80024fe <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1f9      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	10000012 	.word	0x10000012
 8002520:	40012000 	.word	0x40012000
 8002524:	40012300 	.word	0x40012300
 8002528:	20000004 	.word	0x20000004
 800252c:	431bde83 	.word	0x431bde83

08002530 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002538:	4b78      	ldr	r3, [pc, #480]	; (800271c <ADC_Init+0x1ec>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	4a77      	ldr	r2, [pc, #476]	; (800271c <ADC_Init+0x1ec>)
 800253e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002542:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002544:	4b75      	ldr	r3, [pc, #468]	; (800271c <ADC_Init+0x1ec>)
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	4973      	ldr	r1, [pc, #460]	; (800271c <ADC_Init+0x1ec>)
 800254e:	4313      	orrs	r3, r2
 8002550:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002560:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6859      	ldr	r1, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	021a      	lsls	r2, r3, #8
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002584:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6859      	ldr	r1, [r3, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6899      	ldr	r1, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025be:	4a58      	ldr	r2, [pc, #352]	; (8002720 <ADC_Init+0x1f0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d022      	beq.n	800260a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6899      	ldr	r1, [r3, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6899      	ldr	r1, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	e00f      	b.n	800262a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002618:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002628:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0202 	bic.w	r2, r2, #2
 8002638:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6899      	ldr	r1, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	005a      	lsls	r2, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d01b      	beq.n	8002690 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002666:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002676:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6859      	ldr	r1, [r3, #4]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	3b01      	subs	r3, #1
 8002684:	035a      	lsls	r2, r3, #13
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	e007      	b.n	80026a0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800269e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80026ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	051a      	lsls	r2, r3, #20
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6899      	ldr	r1, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026e2:	025a      	lsls	r2, r3, #9
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6899      	ldr	r1, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	029a      	lsls	r2, r3, #10
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	609a      	str	r2, [r3, #8]
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	40012300 	.word	0x40012300
 8002720:	0f000001 	.word	0x0f000001

08002724 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002730:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800273a:	2b00      	cmp	r3, #0
 800273c:	d13c      	bne.n	80027b8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d12b      	bne.n	80027b0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800275c:	2b00      	cmp	r3, #0
 800275e:	d127      	bne.n	80027b0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002766:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800276a:	2b00      	cmp	r3, #0
 800276c:	d006      	beq.n	800277c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002778:	2b00      	cmp	r3, #0
 800277a:	d119      	bne.n	80027b0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0220 	bic.w	r2, r2, #32
 800278a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d105      	bne.n	80027b0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	f043 0201 	orr.w	r2, r3, #1
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f7fe ffea 	bl	800178a <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80027b6:	e00e      	b.n	80027d6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	f003 0310 	and.w	r3, r3, #16
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f7ff fd5f 	bl	8002288 <HAL_ADC_ErrorCallback>
}
 80027ca:	e004      	b.n	80027d6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	4798      	blx	r3
}
 80027d6:	bf00      	nop
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b084      	sub	sp, #16
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ea:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f7fe ffc1 	bl	8001774 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027f2:	bf00      	nop
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b084      	sub	sp, #16
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002806:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2240      	movs	r2, #64	; 0x40
 800280c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	f043 0204 	orr.w	r2, r3, #4
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f7ff fd34 	bl	8002288 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002820:	bf00      	nop
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002838:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <__NVIC_SetPriorityGrouping+0x40>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002844:	4013      	ands	r3, r2
 8002846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <__NVIC_SetPriorityGrouping+0x44>)
 8002852:	4313      	orrs	r3, r2
 8002854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002856:	4a04      	ldr	r2, [pc, #16]	; (8002868 <__NVIC_SetPriorityGrouping+0x40>)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	60d3      	str	r3, [r2, #12]
}
 800285c:	bf00      	nop
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	e000ed00 	.word	0xe000ed00
 800286c:	05fa0000 	.word	0x05fa0000

08002870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002874:	4b04      	ldr	r3, [pc, #16]	; (8002888 <__NVIC_GetPriorityGrouping+0x18>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	0a1b      	lsrs	r3, r3, #8
 800287a:	f003 0307 	and.w	r3, r3, #7
}
 800287e:	4618      	mov	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289a:	2b00      	cmp	r3, #0
 800289c:	db0b      	blt.n	80028b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	f003 021f 	and.w	r2, r3, #31
 80028a4:	4907      	ldr	r1, [pc, #28]	; (80028c4 <__NVIC_EnableIRQ+0x38>)
 80028a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028aa:	095b      	lsrs	r3, r3, #5
 80028ac:	2001      	movs	r0, #1
 80028ae:	fa00 f202 	lsl.w	r2, r0, r2
 80028b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	e000e100 	.word	0xe000e100

080028c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	6039      	str	r1, [r7, #0]
 80028d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	db0a      	blt.n	80028f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	490c      	ldr	r1, [pc, #48]	; (8002914 <__NVIC_SetPriority+0x4c>)
 80028e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e6:	0112      	lsls	r2, r2, #4
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	440b      	add	r3, r1
 80028ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028f0:	e00a      	b.n	8002908 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	4908      	ldr	r1, [pc, #32]	; (8002918 <__NVIC_SetPriority+0x50>)
 80028f8:	79fb      	ldrb	r3, [r7, #7]
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	3b04      	subs	r3, #4
 8002900:	0112      	lsls	r2, r2, #4
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	440b      	add	r3, r1
 8002906:	761a      	strb	r2, [r3, #24]
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	e000e100 	.word	0xe000e100
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800291c:	b480      	push	{r7}
 800291e:	b089      	sub	sp, #36	; 0x24
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	f1c3 0307 	rsb	r3, r3, #7
 8002936:	2b04      	cmp	r3, #4
 8002938:	bf28      	it	cs
 800293a:	2304      	movcs	r3, #4
 800293c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	3304      	adds	r3, #4
 8002942:	2b06      	cmp	r3, #6
 8002944:	d902      	bls.n	800294c <NVIC_EncodePriority+0x30>
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	3b03      	subs	r3, #3
 800294a:	e000      	b.n	800294e <NVIC_EncodePriority+0x32>
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002950:	f04f 32ff 	mov.w	r2, #4294967295
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	43da      	mvns	r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	401a      	ands	r2, r3
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002964:	f04f 31ff 	mov.w	r1, #4294967295
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	fa01 f303 	lsl.w	r3, r1, r3
 800296e:	43d9      	mvns	r1, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002974:	4313      	orrs	r3, r2
         );
}
 8002976:	4618      	mov	r0, r3
 8002978:	3724      	adds	r7, #36	; 0x24
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
	...

08002984 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3b01      	subs	r3, #1
 8002990:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002994:	d301      	bcc.n	800299a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002996:	2301      	movs	r3, #1
 8002998:	e00f      	b.n	80029ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800299a:	4a0a      	ldr	r2, [pc, #40]	; (80029c4 <SysTick_Config+0x40>)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3b01      	subs	r3, #1
 80029a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029a2:	210f      	movs	r1, #15
 80029a4:	f04f 30ff 	mov.w	r0, #4294967295
 80029a8:	f7ff ff8e 	bl	80028c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029ac:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <SysTick_Config+0x40>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029b2:	4b04      	ldr	r3, [pc, #16]	; (80029c4 <SysTick_Config+0x40>)
 80029b4:	2207      	movs	r2, #7
 80029b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	e000e010 	.word	0xe000e010

080029c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f7ff ff29 	bl	8002828 <__NVIC_SetPriorityGrouping>
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029de:	b580      	push	{r7, lr}
 80029e0:	b086      	sub	sp, #24
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	4603      	mov	r3, r0
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	607a      	str	r2, [r7, #4]
 80029ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029f0:	f7ff ff3e 	bl	8002870 <__NVIC_GetPriorityGrouping>
 80029f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	68b9      	ldr	r1, [r7, #8]
 80029fa:	6978      	ldr	r0, [r7, #20]
 80029fc:	f7ff ff8e 	bl	800291c <NVIC_EncodePriority>
 8002a00:	4602      	mov	r2, r0
 8002a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a06:	4611      	mov	r1, r2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ff5d 	bl	80028c8 <__NVIC_SetPriority>
}
 8002a0e:	bf00      	nop
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff ff31 	bl	800288c <__NVIC_EnableIRQ>
}
 8002a2a:	bf00      	nop
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff ffa2 	bl	8002984 <SysTick_Config>
 8002a40:	4603      	mov	r3, r0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a58:	f7ff f9f6 	bl	8001e48 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e099      	b.n	8002b9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0201 	bic.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a88:	e00f      	b.n	8002aaa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a8a:	f7ff f9dd 	bl	8001e48 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b05      	cmp	r3, #5
 8002a96:	d908      	bls.n	8002aaa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e078      	b.n	8002b9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1e8      	bne.n	8002a8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	4b38      	ldr	r3, [pc, #224]	; (8002ba4 <HAL_DMA_Init+0x158>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ad6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ae2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d107      	bne.n	8002b14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	f023 0307 	bic.w	r3, r3, #7
 8002b2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d117      	bne.n	8002b6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00e      	beq.n	8002b6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 faa5 	bl	80030a0 <DMA_CheckFifoParam>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d008      	beq.n	8002b6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2240      	movs	r2, #64	; 0x40
 8002b60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e016      	b.n	8002b9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 fa5c 	bl	8003034 <DMA_CalcBaseAndBitshift>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b84:	223f      	movs	r2, #63	; 0x3f
 8002b86:	409a      	lsls	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	e010803f 	.word	0xe010803f

08002ba8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_DMA_Start_IT+0x26>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e048      	b.n	8002c60 <HAL_DMA_Start_IT+0xb8>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d137      	bne.n	8002c52 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2202      	movs	r2, #2
 8002be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	68b9      	ldr	r1, [r7, #8]
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 f9ee 	bl	8002fd8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c00:	223f      	movs	r2, #63	; 0x3f
 8002c02:	409a      	lsls	r2, r3
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0216 	orr.w	r2, r2, #22
 8002c16:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695a      	ldr	r2, [r3, #20]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c26:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d007      	beq.n	8002c40 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0208 	orr.w	r2, r2, #8
 8002c3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0201 	orr.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	e005      	b.n	8002c5e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d004      	beq.n	8002c86 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2280      	movs	r2, #128	; 0x80
 8002c80:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e00c      	b.n	8002ca0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2205      	movs	r2, #5
 8002c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0201 	bic.w	r2, r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002cb8:	4b92      	ldr	r3, [pc, #584]	; (8002f04 <HAL_DMA_IRQHandler+0x258>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a92      	ldr	r2, [pc, #584]	; (8002f08 <HAL_DMA_IRQHandler+0x25c>)
 8002cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc2:	0a9b      	lsrs	r3, r3, #10
 8002cc4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd6:	2208      	movs	r2, #8
 8002cd8:	409a      	lsls	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d01a      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d013      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0204 	bic.w	r2, r2, #4
 8002cfe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d04:	2208      	movs	r2, #8
 8002d06:	409a      	lsls	r2, r3
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d10:	f043 0201 	orr.w	r2, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	409a      	lsls	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4013      	ands	r3, r2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d012      	beq.n	8002d4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00b      	beq.n	8002d4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	409a      	lsls	r2, r3
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d46:	f043 0202 	orr.w	r2, r3, #2
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d52:	2204      	movs	r2, #4
 8002d54:	409a      	lsls	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d012      	beq.n	8002d84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00b      	beq.n	8002d84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d70:	2204      	movs	r2, #4
 8002d72:	409a      	lsls	r2, r3
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7c:	f043 0204 	orr.w	r2, r3, #4
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d88:	2210      	movs	r2, #16
 8002d8a:	409a      	lsls	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d043      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d03c      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da6:	2210      	movs	r2, #16
 8002da8:	409a      	lsls	r2, r3
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d018      	beq.n	8002dee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d108      	bne.n	8002ddc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d024      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	4798      	blx	r3
 8002dda:	e01f      	b.n	8002e1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d01b      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	4798      	blx	r3
 8002dec:	e016      	b.n	8002e1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d107      	bne.n	8002e0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0208 	bic.w	r2, r2, #8
 8002e0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e20:	2220      	movs	r2, #32
 8002e22:	409a      	lsls	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 808e 	beq.w	8002f4a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0310 	and.w	r3, r3, #16
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 8086 	beq.w	8002f4a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e42:	2220      	movs	r2, #32
 8002e44:	409a      	lsls	r2, r3
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b05      	cmp	r3, #5
 8002e54:	d136      	bne.n	8002ec4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0216 	bic.w	r2, r2, #22
 8002e64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695a      	ldr	r2, [r3, #20]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d103      	bne.n	8002e86 <HAL_DMA_IRQHandler+0x1da>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d007      	beq.n	8002e96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0208 	bic.w	r2, r2, #8
 8002e94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9a:	223f      	movs	r2, #63	; 0x3f
 8002e9c:	409a      	lsls	r2, r3
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d07d      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	4798      	blx	r3
        }
        return;
 8002ec2:	e078      	b.n	8002fb6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d01c      	beq.n	8002f0c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d108      	bne.n	8002ef2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d030      	beq.n	8002f4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	4798      	blx	r3
 8002ef0:	e02b      	b.n	8002f4a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d027      	beq.n	8002f4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	4798      	blx	r3
 8002f02:	e022      	b.n	8002f4a <HAL_DMA_IRQHandler+0x29e>
 8002f04:	20000004 	.word	0x20000004
 8002f08:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10f      	bne.n	8002f3a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0210 	bic.w	r2, r2, #16
 8002f28:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d032      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d022      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2205      	movs	r2, #5
 8002f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0201 	bic.w	r2, r2, #1
 8002f74:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	60bb      	str	r3, [r7, #8]
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d307      	bcc.n	8002f92 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1f2      	bne.n	8002f76 <HAL_DMA_IRQHandler+0x2ca>
 8002f90:	e000      	b.n	8002f94 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002f92:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	4798      	blx	r3
 8002fb4:	e000      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002fb6:	bf00      	nop
    }
  }
}
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop

08002fc0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
 8002fe4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ff4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b40      	cmp	r3, #64	; 0x40
 8003004:	d108      	bne.n	8003018 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003016:	e007      	b.n	8003028 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	60da      	str	r2, [r3, #12]
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	3b10      	subs	r3, #16
 8003044:	4a13      	ldr	r2, [pc, #76]	; (8003094 <DMA_CalcBaseAndBitshift+0x60>)
 8003046:	fba2 2303 	umull	r2, r3, r2, r3
 800304a:	091b      	lsrs	r3, r3, #4
 800304c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800304e:	4a12      	ldr	r2, [pc, #72]	; (8003098 <DMA_CalcBaseAndBitshift+0x64>)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4413      	add	r3, r2
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b03      	cmp	r3, #3
 8003060:	d908      	bls.n	8003074 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	4b0c      	ldr	r3, [pc, #48]	; (800309c <DMA_CalcBaseAndBitshift+0x68>)
 800306a:	4013      	ands	r3, r2
 800306c:	1d1a      	adds	r2, r3, #4
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	659a      	str	r2, [r3, #88]	; 0x58
 8003072:	e006      	b.n	8003082 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	461a      	mov	r2, r3
 800307a:	4b08      	ldr	r3, [pc, #32]	; (800309c <DMA_CalcBaseAndBitshift+0x68>)
 800307c:	4013      	ands	r3, r2
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003086:	4618      	mov	r0, r3
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	aaaaaaab 	.word	0xaaaaaaab
 8003098:	08007e90 	.word	0x08007e90
 800309c:	fffffc00 	.word	0xfffffc00

080030a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d11f      	bne.n	80030fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2b03      	cmp	r3, #3
 80030be:	d855      	bhi.n	800316c <DMA_CheckFifoParam+0xcc>
 80030c0:	a201      	add	r2, pc, #4	; (adr r2, 80030c8 <DMA_CheckFifoParam+0x28>)
 80030c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c6:	bf00      	nop
 80030c8:	080030d9 	.word	0x080030d9
 80030cc:	080030eb 	.word	0x080030eb
 80030d0:	080030d9 	.word	0x080030d9
 80030d4:	0800316d 	.word	0x0800316d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d045      	beq.n	8003170 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030e8:	e042      	b.n	8003170 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030f2:	d13f      	bne.n	8003174 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030f8:	e03c      	b.n	8003174 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003102:	d121      	bne.n	8003148 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b03      	cmp	r3, #3
 8003108:	d836      	bhi.n	8003178 <DMA_CheckFifoParam+0xd8>
 800310a:	a201      	add	r2, pc, #4	; (adr r2, 8003110 <DMA_CheckFifoParam+0x70>)
 800310c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003110:	08003121 	.word	0x08003121
 8003114:	08003127 	.word	0x08003127
 8003118:	08003121 	.word	0x08003121
 800311c:	08003139 	.word	0x08003139
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	73fb      	strb	r3, [r7, #15]
      break;
 8003124:	e02f      	b.n	8003186 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d024      	beq.n	800317c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003136:	e021      	b.n	800317c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003140:	d11e      	bne.n	8003180 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003146:	e01b      	b.n	8003180 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2b02      	cmp	r3, #2
 800314c:	d902      	bls.n	8003154 <DMA_CheckFifoParam+0xb4>
 800314e:	2b03      	cmp	r3, #3
 8003150:	d003      	beq.n	800315a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003152:	e018      	b.n	8003186 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	73fb      	strb	r3, [r7, #15]
      break;
 8003158:	e015      	b.n	8003186 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00e      	beq.n	8003184 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	73fb      	strb	r3, [r7, #15]
      break;
 800316a:	e00b      	b.n	8003184 <DMA_CheckFifoParam+0xe4>
      break;
 800316c:	bf00      	nop
 800316e:	e00a      	b.n	8003186 <DMA_CheckFifoParam+0xe6>
      break;
 8003170:	bf00      	nop
 8003172:	e008      	b.n	8003186 <DMA_CheckFifoParam+0xe6>
      break;
 8003174:	bf00      	nop
 8003176:	e006      	b.n	8003186 <DMA_CheckFifoParam+0xe6>
      break;
 8003178:	bf00      	nop
 800317a:	e004      	b.n	8003186 <DMA_CheckFifoParam+0xe6>
      break;
 800317c:	bf00      	nop
 800317e:	e002      	b.n	8003186 <DMA_CheckFifoParam+0xe6>
      break;   
 8003180:	bf00      	nop
 8003182:	e000      	b.n	8003186 <DMA_CheckFifoParam+0xe6>
      break;
 8003184:	bf00      	nop
    }
  } 
  
  return status; 
 8003186:	7bfb      	ldrb	r3, [r7, #15]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003194:	b480      	push	{r7}
 8003196:	b089      	sub	sp, #36	; 0x24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800319e:	2300      	movs	r3, #0
 80031a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80031a6:	2300      	movs	r3, #0
 80031a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80031aa:	2300      	movs	r3, #0
 80031ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80031ae:	2300      	movs	r3, #0
 80031b0:	61fb      	str	r3, [r7, #28]
 80031b2:	e169      	b.n	8003488 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80031b4:	2201      	movs	r2, #1
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	4013      	ands	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	f040 8158 	bne.w	8003482 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d00b      	beq.n	80031f2 <HAL_GPIO_Init+0x5e>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d007      	beq.n	80031f2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031e6:	2b11      	cmp	r3, #17
 80031e8:	d003      	beq.n	80031f2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b12      	cmp	r3, #18
 80031f0:	d130      	bne.n	8003254 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	2203      	movs	r2, #3
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43db      	mvns	r3, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4013      	ands	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003228:	2201      	movs	r2, #1
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	091b      	lsrs	r3, r3, #4
 800323e:	f003 0201 	and.w	r2, r3, #1
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	2203      	movs	r2, #3
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	43db      	mvns	r3, r3
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4013      	ands	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4313      	orrs	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b02      	cmp	r3, #2
 800328a:	d003      	beq.n	8003294 <HAL_GPIO_Init+0x100>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b12      	cmp	r3, #18
 8003292:	d123      	bne.n	80032dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	08da      	lsrs	r2, r3, #3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3208      	adds	r2, #8
 800329c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	220f      	movs	r2, #15
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	43db      	mvns	r3, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4013      	ands	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	08da      	lsrs	r2, r3, #3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3208      	adds	r2, #8
 80032d6:	69b9      	ldr	r1, [r7, #24]
 80032d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	2203      	movs	r2, #3
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4013      	ands	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 0203 	and.w	r2, r3, #3
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4313      	orrs	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 80b2 	beq.w	8003482 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800331e:	4b5f      	ldr	r3, [pc, #380]	; (800349c <HAL_GPIO_Init+0x308>)
 8003320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003322:	4a5e      	ldr	r2, [pc, #376]	; (800349c <HAL_GPIO_Init+0x308>)
 8003324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003328:	6453      	str	r3, [r2, #68]	; 0x44
 800332a:	4b5c      	ldr	r3, [pc, #368]	; (800349c <HAL_GPIO_Init+0x308>)
 800332c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003336:	4a5a      	ldr	r2, [pc, #360]	; (80034a0 <HAL_GPIO_Init+0x30c>)
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	089b      	lsrs	r3, r3, #2
 800333c:	3302      	adds	r3, #2
 800333e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003342:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	220f      	movs	r2, #15
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43db      	mvns	r3, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4013      	ands	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a51      	ldr	r2, [pc, #324]	; (80034a4 <HAL_GPIO_Init+0x310>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d02b      	beq.n	80033ba <HAL_GPIO_Init+0x226>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a50      	ldr	r2, [pc, #320]	; (80034a8 <HAL_GPIO_Init+0x314>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d025      	beq.n	80033b6 <HAL_GPIO_Init+0x222>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a4f      	ldr	r2, [pc, #316]	; (80034ac <HAL_GPIO_Init+0x318>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d01f      	beq.n	80033b2 <HAL_GPIO_Init+0x21e>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a4e      	ldr	r2, [pc, #312]	; (80034b0 <HAL_GPIO_Init+0x31c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d019      	beq.n	80033ae <HAL_GPIO_Init+0x21a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a4d      	ldr	r2, [pc, #308]	; (80034b4 <HAL_GPIO_Init+0x320>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d013      	beq.n	80033aa <HAL_GPIO_Init+0x216>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a4c      	ldr	r2, [pc, #304]	; (80034b8 <HAL_GPIO_Init+0x324>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d00d      	beq.n	80033a6 <HAL_GPIO_Init+0x212>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a4b      	ldr	r2, [pc, #300]	; (80034bc <HAL_GPIO_Init+0x328>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d007      	beq.n	80033a2 <HAL_GPIO_Init+0x20e>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a4a      	ldr	r2, [pc, #296]	; (80034c0 <HAL_GPIO_Init+0x32c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d101      	bne.n	800339e <HAL_GPIO_Init+0x20a>
 800339a:	2307      	movs	r3, #7
 800339c:	e00e      	b.n	80033bc <HAL_GPIO_Init+0x228>
 800339e:	2308      	movs	r3, #8
 80033a0:	e00c      	b.n	80033bc <HAL_GPIO_Init+0x228>
 80033a2:	2306      	movs	r3, #6
 80033a4:	e00a      	b.n	80033bc <HAL_GPIO_Init+0x228>
 80033a6:	2305      	movs	r3, #5
 80033a8:	e008      	b.n	80033bc <HAL_GPIO_Init+0x228>
 80033aa:	2304      	movs	r3, #4
 80033ac:	e006      	b.n	80033bc <HAL_GPIO_Init+0x228>
 80033ae:	2303      	movs	r3, #3
 80033b0:	e004      	b.n	80033bc <HAL_GPIO_Init+0x228>
 80033b2:	2302      	movs	r3, #2
 80033b4:	e002      	b.n	80033bc <HAL_GPIO_Init+0x228>
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <HAL_GPIO_Init+0x228>
 80033ba:	2300      	movs	r3, #0
 80033bc:	69fa      	ldr	r2, [r7, #28]
 80033be:	f002 0203 	and.w	r2, r2, #3
 80033c2:	0092      	lsls	r2, r2, #2
 80033c4:	4093      	lsls	r3, r2
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80033cc:	4934      	ldr	r1, [pc, #208]	; (80034a0 <HAL_GPIO_Init+0x30c>)
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	089b      	lsrs	r3, r3, #2
 80033d2:	3302      	adds	r3, #2
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033da:	4b3a      	ldr	r3, [pc, #232]	; (80034c4 <HAL_GPIO_Init+0x330>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	43db      	mvns	r3, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4013      	ands	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033fe:	4a31      	ldr	r2, [pc, #196]	; (80034c4 <HAL_GPIO_Init+0x330>)
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003404:	4b2f      	ldr	r3, [pc, #188]	; (80034c4 <HAL_GPIO_Init+0x330>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	43db      	mvns	r3, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4013      	ands	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003428:	4a26      	ldr	r2, [pc, #152]	; (80034c4 <HAL_GPIO_Init+0x330>)
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800342e:	4b25      	ldr	r3, [pc, #148]	; (80034c4 <HAL_GPIO_Init+0x330>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	43db      	mvns	r3, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4013      	ands	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003452:	4a1c      	ldr	r2, [pc, #112]	; (80034c4 <HAL_GPIO_Init+0x330>)
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003458:	4b1a      	ldr	r3, [pc, #104]	; (80034c4 <HAL_GPIO_Init+0x330>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	43db      	mvns	r3, r3
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4013      	ands	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800347c:	4a11      	ldr	r2, [pc, #68]	; (80034c4 <HAL_GPIO_Init+0x330>)
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	3301      	adds	r3, #1
 8003486:	61fb      	str	r3, [r7, #28]
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	2b0f      	cmp	r3, #15
 800348c:	f67f ae92 	bls.w	80031b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003490:	bf00      	nop
 8003492:	3724      	adds	r7, #36	; 0x24
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	40023800 	.word	0x40023800
 80034a0:	40013800 	.word	0x40013800
 80034a4:	40020000 	.word	0x40020000
 80034a8:	40020400 	.word	0x40020400
 80034ac:	40020800 	.word	0x40020800
 80034b0:	40020c00 	.word	0x40020c00
 80034b4:	40021000 	.word	0x40021000
 80034b8:	40021400 	.word	0x40021400
 80034bc:	40021800 	.word	0x40021800
 80034c0:	40021c00 	.word	0x40021c00
 80034c4:	40013c00 	.word	0x40013c00

080034c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	807b      	strh	r3, [r7, #2]
 80034d4:	4613      	mov	r3, r2
 80034d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034d8:	787b      	ldrb	r3, [r7, #1]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034de:	887a      	ldrh	r2, [r7, #2]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80034e4:	e003      	b.n	80034ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80034e6:	887b      	ldrh	r3, [r7, #2]
 80034e8:	041a      	lsls	r2, r3, #16
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	619a      	str	r2, [r3, #24]
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
	...

080034fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e07f      	b.n	800360e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d106      	bne.n	8003528 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7fe f9e4 	bl	80018f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2224      	movs	r2, #36	; 0x24
 800352c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0201 	bic.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800354c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800355c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d107      	bne.n	8003576 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	e006      	b.n	8003584 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003582:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	2b02      	cmp	r3, #2
 800358a:	d104      	bne.n	8003596 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003594:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6859      	ldr	r1, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <HAL_I2C_Init+0x11c>)
 80035a2:	430b      	orrs	r3, r1
 80035a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68da      	ldr	r2, [r3, #12]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691a      	ldr	r2, [r3, #16]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	ea42 0103 	orr.w	r1, r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	021a      	lsls	r2, r3, #8
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	69d9      	ldr	r1, [r3, #28]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a1a      	ldr	r2, [r3, #32]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0201 	orr.w	r2, r2, #1
 80035ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	02008000 	.word	0x02008000

0800361c <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	; 0x28
 8003620:	af02      	add	r7, sp, #8
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	4608      	mov	r0, r1
 8003626:	4611      	mov	r1, r2
 8003628:	461a      	mov	r2, r3
 800362a:	4603      	mov	r3, r0
 800362c:	817b      	strh	r3, [r7, #10]
 800362e:	460b      	mov	r3, r1
 8003630:	813b      	strh	r3, [r7, #8]
 8003632:	4613      	mov	r3, r2
 8003634:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b20      	cmp	r3, #32
 8003640:	f040 80d5 	bne.w	80037ee <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <HAL_I2C_Mem_Write_DMA+0x34>
 800364a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800364c:	2b00      	cmp	r3, #0
 800364e:	d105      	bne.n	800365c <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003656:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e0c9      	b.n	80037f0 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800366a:	d101      	bne.n	8003670 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 800366c:	2302      	movs	r3, #2
 800366e:	e0bf      	b.n	80037f0 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003676:	2b01      	cmp	r3, #1
 8003678:	d101      	bne.n	800367e <HAL_I2C_Mem_Write_DMA+0x62>
 800367a:	2302      	movs	r3, #2
 800367c:	e0b8      	b.n	80037f0 <HAL_I2C_Mem_Write_DMA+0x1d4>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003686:	f7fe fbdf 	bl	8001e48 <HAL_GetTick>
 800368a:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2221      	movs	r2, #33	; 0x21
 8003690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2240      	movs	r2, #64	; 0x40
 8003698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80036ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4a51      	ldr	r2, [pc, #324]	; (80037f8 <HAL_I2C_Mem_Write_DMA+0x1dc>)
 80036b2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4a51      	ldr	r2, [pc, #324]	; (80037fc <HAL_I2C_Mem_Write_DMA+0x1e0>)
 80036b8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036be:	b29b      	uxth	r3, r3
 80036c0:	2bff      	cmp	r3, #255	; 0xff
 80036c2:	d906      	bls.n	80036d2 <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	22ff      	movs	r2, #255	; 0xff
 80036c8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80036ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036ce:	61fb      	str	r3, [r7, #28]
 80036d0:	e007      	b.n	80036e2 <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80036dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036e0:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80036e2:	88f8      	ldrh	r0, [r7, #6]
 80036e4:	893a      	ldrh	r2, [r7, #8]
 80036e6:	8979      	ldrh	r1, [r7, #10]
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	9301      	str	r3, [sp, #4]
 80036ec:	2319      	movs	r3, #25
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	4603      	mov	r3, r0
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 fca6 	bl	8004044 <I2C_RequestMemoryWrite>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d005      	beq.n	800370a <HAL_I2C_Mem_Write_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e072      	b.n	80037f0 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370e:	2b00      	cmp	r3, #0
 8003710:	d020      	beq.n	8003754 <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003716:	4a3a      	ldr	r2, [pc, #232]	; (8003800 <HAL_I2C_Mem_Write_DMA+0x1e4>)
 8003718:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371e:	4a39      	ldr	r2, [pc, #228]	; (8003804 <HAL_I2C_Mem_Write_DMA+0x1e8>)
 8003720:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003726:	2200      	movs	r2, #0
 8003728:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372e:	2200      	movs	r2, #0
 8003730:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003736:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3328      	adds	r3, #40	; 0x28
 800373e:	461a      	mov	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003744:	f7ff fa30 	bl	8002ba8 <HAL_DMA_Start_IT>
 8003748:	4603      	mov	r3, r0
 800374a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800374c:	7dfb      	ldrb	r3, [r7, #23]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d139      	bne.n	80037c6 <HAL_I2C_Mem_Write_DMA+0x1aa>
 8003752:	e013      	b.n	800377c <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2220      	movs	r2, #32
 8003758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003768:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e039      	b.n	80037f0 <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003780:	b2da      	uxtb	r2, r3
 8003782:	8979      	ldrh	r1, [r7, #10]
 8003784:	2300      	movs	r3, #0
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f001 fa82 	bl	8004c94 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003794:	b29a      	uxth	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80037aa:	2111      	movs	r1, #17
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f001 fa9f 	bl	8004cf0 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037c0:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	e014      	b.n	80037f0 <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2220      	movs	r2, #32
 80037ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037da:	f043 0210 	orr.w	r2, r3, #16
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e000      	b.n	80037f0 <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 80037ee:	2302      	movs	r3, #2
  }
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3720      	adds	r7, #32
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	ffff0000 	.word	0xffff0000
 80037fc:	08003ccf 	.word	0x08003ccf
 8003800:	080048e1 	.word	0x080048e1
 8003804:	08004a0d 	.word	0x08004a0d

08003808 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b08a      	sub	sp, #40	; 0x28
 800380c:	af02      	add	r7, sp, #8
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	4608      	mov	r0, r1
 8003812:	4611      	mov	r1, r2
 8003814:	461a      	mov	r2, r3
 8003816:	4603      	mov	r3, r0
 8003818:	817b      	strh	r3, [r7, #10]
 800381a:	460b      	mov	r3, r1
 800381c:	813b      	strh	r3, [r7, #8]
 800381e:	4613      	mov	r3, r2
 8003820:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b20      	cmp	r3, #32
 800382c:	f040 80d5 	bne.w	80039da <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <HAL_I2C_Mem_Read_DMA+0x34>
 8003836:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003838:	2b00      	cmp	r3, #0
 800383a:	d105      	bne.n	8003848 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003842:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0c9      	b.n	80039dc <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003856:	d101      	bne.n	800385c <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8003858:	2302      	movs	r3, #2
 800385a:	e0bf      	b.n	80039dc <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_I2C_Mem_Read_DMA+0x62>
 8003866:	2302      	movs	r3, #2
 8003868:	e0b8      	b.n	80039dc <HAL_I2C_Mem_Read_DMA+0x1d4>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003872:	f7fe fae9 	bl	8001e48 <HAL_GetTick>
 8003876:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2222      	movs	r2, #34	; 0x22
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2240      	movs	r2, #64	; 0x40
 8003884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003892:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003898:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4a51      	ldr	r2, [pc, #324]	; (80039e4 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 800389e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4a51      	ldr	r2, [pc, #324]	; (80039e8 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 80038a4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	2bff      	cmp	r3, #255	; 0xff
 80038ae:	d906      	bls.n	80038be <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	22ff      	movs	r2, #255	; 0xff
 80038b4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80038b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038ba:	61fb      	str	r3, [r7, #28]
 80038bc:	e007      	b.n	80038ce <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80038c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038cc:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80038ce:	88f8      	ldrh	r0, [r7, #6]
 80038d0:	893a      	ldrh	r2, [r7, #8]
 80038d2:	8979      	ldrh	r1, [r7, #10]
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	9301      	str	r3, [sp, #4]
 80038d8:	2319      	movs	r3, #25
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	4603      	mov	r3, r0
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 fc04 	bl	80040ec <I2C_RequestMemoryRead>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d005      	beq.n	80038f6 <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e072      	b.n	80039dc <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d020      	beq.n	8003940 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003902:	4a3a      	ldr	r2, [pc, #232]	; (80039ec <HAL_I2C_Mem_Read_DMA+0x1e4>)
 8003904:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390a:	4a39      	ldr	r2, [pc, #228]	; (80039f0 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 800390c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003912:	2200      	movs	r2, #0
 8003914:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391a:	2200      	movs	r2, #0
 800391c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	3324      	adds	r3, #36	; 0x24
 8003928:	4619      	mov	r1, r3
 800392a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003930:	f7ff f93a 	bl	8002ba8 <HAL_DMA_Start_IT>
 8003934:	4603      	mov	r3, r0
 8003936:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8003938:	7dfb      	ldrb	r3, [r7, #23]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d139      	bne.n	80039b2 <HAL_I2C_Mem_Read_DMA+0x1aa>
 800393e:	e013      	b.n	8003968 <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003954:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e039      	b.n	80039dc <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396c:	b2da      	uxtb	r2, r3
 800396e:	8979      	ldrh	r1, [r7, #10]
 8003970:	4b20      	ldr	r3, [pc, #128]	; (80039f4 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f001 f98c 	bl	8004c94 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	b29a      	uxth	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003996:	2111      	movs	r1, #17
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f001 f9a9 	bl	8004cf0 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039ac:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	e014      	b.n	80039dc <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	f043 0210 	orr.w	r2, r3, #16
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 80039da:	2302      	movs	r3, #2
  }
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3720      	adds	r7, #32
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	ffff0000 	.word	0xffff0000
 80039e8:	08003ccf 	.word	0x08003ccf
 80039ec:	08004977 	.word	0x08004977
 80039f0:	08004a0d 	.word	0x08004a0d
 80039f4:	80002400 	.word	0x80002400

080039f8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	70fb      	strb	r3, [r7, #3]
 8003a54:	4613      	mov	r3, r2
 8003a56:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d101      	bne.n	8003aec <I2C_Slave_ISR_IT+0x24>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e0ec      	b.n	8003cc6 <I2C_Slave_ISR_IT+0x1fe>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	095b      	lsrs	r3, r3, #5
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d009      	beq.n	8003b14 <I2C_Slave_ISR_IT+0x4c>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	095b      	lsrs	r3, r3, #5
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003b0c:	6939      	ldr	r1, [r7, #16]
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 fcd8 	bl	80044c4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	091b      	lsrs	r3, r3, #4
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d04d      	beq.n	8003bbc <I2C_Slave_ISR_IT+0xf4>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	091b      	lsrs	r3, r3, #4
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d047      	beq.n	8003bbc <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d128      	bne.n	8003b88 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b28      	cmp	r3, #40	; 0x28
 8003b40:	d108      	bne.n	8003b54 <I2C_Slave_ISR_IT+0x8c>
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b48:	d104      	bne.n	8003b54 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003b4a:	6939      	ldr	r1, [r7, #16]
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 fd8f 	bl	8004670 <I2C_ITListenCplt>
 8003b52:	e032      	b.n	8003bba <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b29      	cmp	r3, #41	; 0x29
 8003b5e:	d10e      	bne.n	8003b7e <I2C_Slave_ISR_IT+0xb6>
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b66:	d00a      	beq.n	8003b7e <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2210      	movs	r2, #16
 8003b6e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 fe91 	bl	8004898 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 fbcb 	bl	8004312 <I2C_ITSlaveSeqCplt>
 8003b7c:	e01d      	b.n	8003bba <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2210      	movs	r2, #16
 8003b84:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003b86:	e096      	b.n	8003cb6 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2210      	movs	r2, #16
 8003b8e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b94:	f043 0204 	orr.w	r2, r3, #4
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d004      	beq.n	8003bac <I2C_Slave_ISR_IT+0xe4>
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ba8:	f040 8085 	bne.w	8003cb6 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 fdb0 	bl	8004718 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003bb8:	e07d      	b.n	8003cb6 <I2C_Slave_ISR_IT+0x1ee>
 8003bba:	e07c      	b.n	8003cb6 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	089b      	lsrs	r3, r3, #2
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d030      	beq.n	8003c2a <I2C_Slave_ISR_IT+0x162>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	089b      	lsrs	r3, r3, #2
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d02a      	beq.n	8003c2a <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d018      	beq.n	8003c10 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d14f      	bne.n	8003cba <I2C_Slave_ISR_IT+0x1f2>
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c20:	d04b      	beq.n	8003cba <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 fb75 	bl	8004312 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003c28:	e047      	b.n	8003cba <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	08db      	lsrs	r3, r3, #3
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <I2C_Slave_ISR_IT+0x184>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	08db      	lsrs	r3, r3, #3
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d004      	beq.n	8003c4c <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003c42:	6939      	ldr	r1, [r7, #16]
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 faa5 	bl	8004194 <I2C_ITAddrCplt>
 8003c4a:	e037      	b.n	8003cbc <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	085b      	lsrs	r3, r3, #1
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d031      	beq.n	8003cbc <I2C_Slave_ISR_IT+0x1f4>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	085b      	lsrs	r3, r3, #1
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d02b      	beq.n	8003cbc <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d018      	beq.n	8003ca0 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	781a      	ldrb	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	851a      	strh	r2, [r3, #40]	; 0x28
 8003c9e:	e00d      	b.n	8003cbc <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ca6:	d002      	beq.n	8003cae <I2C_Slave_ISR_IT+0x1e6>
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d106      	bne.n	8003cbc <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 fb2f 	bl	8004312 <I2C_ITSlaveSeqCplt>
 8003cb4:	e002      	b.n	8003cbc <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003cb6:	bf00      	nop
 8003cb8:	e000      	b.n	8003cbc <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003cba:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b088      	sub	sp, #32
 8003cd2:	af02      	add	r7, sp, #8
 8003cd4:	60f8      	str	r0, [r7, #12]
 8003cd6:	60b9      	str	r1, [r7, #8]
 8003cd8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <I2C_Master_ISR_DMA+0x1a>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e0e1      	b.n	8003eac <I2C_Master_ISR_DMA+0x1de>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	091b      	lsrs	r3, r3, #4
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d017      	beq.n	8003d2c <I2C_Master_ISR_DMA+0x5e>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	091b      	lsrs	r3, r3, #4
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d011      	beq.n	8003d2c <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2210      	movs	r2, #16
 8003d0e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d14:	f043 0204 	orr.w	r2, r3, #4
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003d1c:	2112      	movs	r1, #18
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f000 ffe6 	bl	8004cf0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 fdb7 	bl	8004898 <I2C_Flush_TXDR>
 8003d2a:	e0ba      	b.n	8003ea2 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	09db      	lsrs	r3, r3, #7
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d072      	beq.n	8003e1e <I2C_Master_ISR_DMA+0x150>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	099b      	lsrs	r3, r3, #6
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d06c      	beq.n	8003e1e <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d52:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d04e      	beq.n	8003dfc <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d6a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2bff      	cmp	r3, #255	; 0xff
 8003d74:	d906      	bls.n	8003d84 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	22ff      	movs	r2, #255	; 0xff
 8003d7a:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003d7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	e010      	b.n	8003da6 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d96:	d003      	beq.n	8003da0 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	e002      	b.n	8003da6 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003da0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003da4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	8a79      	ldrh	r1, [r7, #18]
 8003dae:	2300      	movs	r3, #0
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 ff6d 	bl	8004c94 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b22      	cmp	r3, #34	; 0x22
 8003dd6:	d108      	bne.n	8003dea <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003de6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003de8:	e05b      	b.n	8003ea2 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003df8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003dfa:	e052      	b.n	8003ea2 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e0a:	d003      	beq.n	8003e14 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 fa43 	bl	8004298 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003e12:	e046      	b.n	8003ea2 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003e14:	2140      	movs	r1, #64	; 0x40
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 fc7e 	bl	8004718 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003e1c:	e041      	b.n	8003ea2 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	099b      	lsrs	r3, r3, #6
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d029      	beq.n	8003e7e <I2C_Master_ISR_DMA+0x1b0>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	099b      	lsrs	r3, r3, #6
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d023      	beq.n	8003e7e <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d119      	bne.n	8003e74 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e4e:	d027      	beq.n	8003ea0 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e58:	d108      	bne.n	8003e6c <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e68:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003e6a:	e019      	b.n	8003ea0 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 fa13 	bl	8004298 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003e72:	e015      	b.n	8003ea0 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003e74:	2140      	movs	r1, #64	; 0x40
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 fc4e 	bl	8004718 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003e7c:	e010      	b.n	8003ea0 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	095b      	lsrs	r3, r3, #5
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00b      	beq.n	8003ea2 <I2C_Master_ISR_DMA+0x1d4>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	095b      	lsrs	r3, r3, #5
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d005      	beq.n	8003ea2 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003e96:	68b9      	ldr	r1, [r7, #8]
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 fa77 	bl	800438c <I2C_ITMasterCplt>
 8003e9e:	e000      	b.n	8003ea2 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003ea0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	613b      	str	r3, [r7, #16]
  uint32_t treatdmanack = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <I2C_Slave_ISR_DMA+0x24>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e0b1      	b.n	800403c <I2C_Slave_ISR_DMA+0x188>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	095b      	lsrs	r3, r3, #5
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d009      	beq.n	8003f00 <I2C_Slave_ISR_DMA+0x4c>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d003      	beq.n	8003f00 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003ef8:	68b9      	ldr	r1, [r7, #8]
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 fae2 	bl	80044c4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	091b      	lsrs	r3, r3, #4
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 8082 	beq.w	8004012 <I2C_Slave_ISR_DMA+0x15e>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	091b      	lsrs	r3, r3, #4
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d07b      	beq.n	8004012 <I2C_Slave_ISR_DMA+0x15e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	0b9b      	lsrs	r3, r3, #14
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d105      	bne.n	8003f32 <I2C_Slave_ISR_DMA+0x7e>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	0bdb      	lsrs	r3, r3, #15
 8003f2a:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d068      	beq.n	8004004 <I2C_Slave_ISR_DMA+0x150>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00d      	beq.n	8003f56 <I2C_Slave_ISR_DMA+0xa2>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	0bdb      	lsrs	r3, r3, #15
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d007      	beq.n	8003f56 <I2C_Slave_ISR_DMA+0xa2>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <I2C_Slave_ISR_DMA+0xa2>
          {
            treatdmanack = 1U;
 8003f52:	2301      	movs	r3, #1
 8003f54:	617b      	str	r3, [r7, #20]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00d      	beq.n	8003f7a <I2C_Slave_ISR_DMA+0xc6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	0b9b      	lsrs	r3, r3, #14
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d007      	beq.n	8003f7a <I2C_Slave_ISR_DMA+0xc6>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <I2C_Slave_ISR_DMA+0xc6>
          {
            treatdmanack = 1U;
 8003f76:	2301      	movs	r3, #1
 8003f78:	617b      	str	r3, [r7, #20]
          }
        }
      }

      if (treatdmanack == 1U)
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d128      	bne.n	8003fd2 <I2C_Slave_ISR_DMA+0x11e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b28      	cmp	r3, #40	; 0x28
 8003f8a:	d108      	bne.n	8003f9e <I2C_Slave_ISR_DMA+0xea>
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f92:	d104      	bne.n	8003f9e <I2C_Slave_ISR_DMA+0xea>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003f94:	68b9      	ldr	r1, [r7, #8]
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 fb6a 	bl	8004670 <I2C_ITListenCplt>
 8003f9c:	e031      	b.n	8004002 <I2C_Slave_ISR_DMA+0x14e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b29      	cmp	r3, #41	; 0x29
 8003fa8:	d10e      	bne.n	8003fc8 <I2C_Slave_ISR_DMA+0x114>
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fb0:	d00a      	beq.n	8003fc8 <I2C_Slave_ISR_DMA+0x114>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2210      	movs	r2, #16
 8003fb8:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 fc6c 	bl	8004898 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 f9a6 	bl	8004312 <I2C_ITSlaveSeqCplt>
 8003fc6:	e01c      	b.n	8004002 <I2C_Slave_ISR_DMA+0x14e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2210      	movs	r2, #16
 8003fce:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003fd0:	e01d      	b.n	800400e <I2C_Slave_ISR_DMA+0x15a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2210      	movs	r2, #16
 8003fd8:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fde:	f043 0204 	orr.w	r2, r3, #4
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	645a      	str	r2, [r3, #68]	; 0x44

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <I2C_Slave_ISR_DMA+0x140>
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ff2:	d10c      	bne.n	800400e <I2C_Slave_ISR_DMA+0x15a>
        {
          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 fb8c 	bl	8004718 <I2C_ITError>
      if (treatdmanack == 1U)
 8004000:	e005      	b.n	800400e <I2C_Slave_ISR_DMA+0x15a>
 8004002:	e004      	b.n	800400e <I2C_Slave_ISR_DMA+0x15a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2210      	movs	r2, #16
 800400a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800400c:	e011      	b.n	8004032 <I2C_Slave_ISR_DMA+0x17e>
      if (treatdmanack == 1U)
 800400e:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004010:	e00f      	b.n	8004032 <I2C_Slave_ISR_DMA+0x17e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	08db      	lsrs	r3, r3, #3
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d009      	beq.n	8004032 <I2C_Slave_ISR_DMA+0x17e>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	08db      	lsrs	r3, r3, #3
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <I2C_Slave_ISR_DMA+0x17e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800402a:	68b9      	ldr	r1, [r7, #8]
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 f8b1 	bl	8004194 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af02      	add	r7, sp, #8
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	4608      	mov	r0, r1
 800404e:	4611      	mov	r1, r2
 8004050:	461a      	mov	r2, r3
 8004052:	4603      	mov	r3, r0
 8004054:	817b      	strh	r3, [r7, #10]
 8004056:	460b      	mov	r3, r1
 8004058:	813b      	strh	r3, [r7, #8]
 800405a:	4613      	mov	r3, r2
 800405c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800405e:	88fb      	ldrh	r3, [r7, #6]
 8004060:	b2da      	uxtb	r2, r3
 8004062:	8979      	ldrh	r1, [r7, #10]
 8004064:	4b20      	ldr	r3, [pc, #128]	; (80040e8 <I2C_RequestMemoryWrite+0xa4>)
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 fe11 	bl	8004c94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004072:	69fa      	ldr	r2, [r7, #28]
 8004074:	69b9      	ldr	r1, [r7, #24]
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 fd66 	bl	8004b48 <I2C_WaitOnTXISFlagUntilTimeout>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e02c      	b.n	80040e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004086:	88fb      	ldrh	r3, [r7, #6]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d105      	bne.n	8004098 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800408c:	893b      	ldrh	r3, [r7, #8]
 800408e:	b2da      	uxtb	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	629a      	str	r2, [r3, #40]	; 0x28
 8004096:	e015      	b.n	80040c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004098:	893b      	ldrh	r3, [r7, #8]
 800409a:	0a1b      	lsrs	r3, r3, #8
 800409c:	b29b      	uxth	r3, r3
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040a6:	69fa      	ldr	r2, [r7, #28]
 80040a8:	69b9      	ldr	r1, [r7, #24]
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 fd4c 	bl	8004b48 <I2C_WaitOnTXISFlagUntilTimeout>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e012      	b.n	80040e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040ba:	893b      	ldrh	r3, [r7, #8]
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	2200      	movs	r2, #0
 80040cc:	2180      	movs	r1, #128	; 0x80
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 fcfa 	bl	8004ac8 <I2C_WaitOnFlagUntilTimeout>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e000      	b.n	80040e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	80002000 	.word	0x80002000

080040ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af02      	add	r7, sp, #8
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	4608      	mov	r0, r1
 80040f6:	4611      	mov	r1, r2
 80040f8:	461a      	mov	r2, r3
 80040fa:	4603      	mov	r3, r0
 80040fc:	817b      	strh	r3, [r7, #10]
 80040fe:	460b      	mov	r3, r1
 8004100:	813b      	strh	r3, [r7, #8]
 8004102:	4613      	mov	r3, r2
 8004104:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004106:	88fb      	ldrh	r3, [r7, #6]
 8004108:	b2da      	uxtb	r2, r3
 800410a:	8979      	ldrh	r1, [r7, #10]
 800410c:	4b20      	ldr	r3, [pc, #128]	; (8004190 <I2C_RequestMemoryRead+0xa4>)
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	2300      	movs	r3, #0
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 fdbe 	bl	8004c94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004118:	69fa      	ldr	r2, [r7, #28]
 800411a:	69b9      	ldr	r1, [r7, #24]
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 fd13 	bl	8004b48 <I2C_WaitOnTXISFlagUntilTimeout>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e02c      	b.n	8004186 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800412c:	88fb      	ldrh	r3, [r7, #6]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d105      	bne.n	800413e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004132:	893b      	ldrh	r3, [r7, #8]
 8004134:	b2da      	uxtb	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	629a      	str	r2, [r3, #40]	; 0x28
 800413c:	e015      	b.n	800416a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800413e:	893b      	ldrh	r3, [r7, #8]
 8004140:	0a1b      	lsrs	r3, r3, #8
 8004142:	b29b      	uxth	r3, r3
 8004144:	b2da      	uxtb	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800414c:	69fa      	ldr	r2, [r7, #28]
 800414e:	69b9      	ldr	r1, [r7, #24]
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 fcf9 	bl	8004b48 <I2C_WaitOnTXISFlagUntilTimeout>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e012      	b.n	8004186 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004160:	893b      	ldrh	r3, [r7, #8]
 8004162:	b2da      	uxtb	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	2200      	movs	r2, #0
 8004172:	2140      	movs	r1, #64	; 0x40
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 fca7 	bl	8004ac8 <I2C_WaitOnFlagUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e000      	b.n	8004186 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	80002000 	.word	0x80002000

08004194 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041aa:	2b28      	cmp	r3, #40	; 0x28
 80041ac:	d168      	bne.n	8004280 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	0c1b      	lsrs	r3, r3, #16
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	0c1b      	lsrs	r3, r3, #16
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80041cc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041da:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80041e8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d137      	bne.n	8004262 <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80041f2:	897b      	ldrh	r3, [r7, #10]
 80041f4:	09db      	lsrs	r3, r3, #7
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	89bb      	ldrh	r3, [r7, #12]
 80041fa:	4053      	eors	r3, r2
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	f003 0306 	and.w	r3, r3, #6
 8004202:	2b00      	cmp	r3, #0
 8004204:	d11c      	bne.n	8004240 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004206:	897b      	ldrh	r3, [r7, #10]
 8004208:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004218:	2b02      	cmp	r3, #2
 800421a:	d139      	bne.n	8004290 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2208      	movs	r2, #8
 8004228:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004232:	89ba      	ldrh	r2, [r7, #12]
 8004234:	7bfb      	ldrb	r3, [r7, #15]
 8004236:	4619      	mov	r1, r3
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff fc05 	bl	8003a48 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800423e:	e027      	b.n	8004290 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 8004240:	893b      	ldrh	r3, [r7, #8]
 8004242:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004244:	2104      	movs	r1, #4
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 fdc0 	bl	8004dcc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004254:	89ba      	ldrh	r2, [r7, #12]
 8004256:	7bfb      	ldrb	r3, [r7, #15]
 8004258:	4619      	mov	r1, r3
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7ff fbf4 	bl	8003a48 <HAL_I2C_AddrCallback>
}
 8004260:	e016      	b.n	8004290 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004262:	2104      	movs	r1, #4
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 fdb1 	bl	8004dcc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004272:	89ba      	ldrh	r2, [r7, #12]
 8004274:	7bfb      	ldrb	r3, [r7, #15]
 8004276:	4619      	mov	r1, r3
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f7ff fbe5 	bl	8003a48 <HAL_I2C_AddrCallback>
}
 800427e:	e007      	b.n	8004290 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2208      	movs	r2, #8
 8004286:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004290:	bf00      	nop
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b21      	cmp	r3, #33	; 0x21
 80042b2:	d115      	bne.n	80042e0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2211      	movs	r2, #17
 80042c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80042c8:	2101      	movs	r1, #1
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 fd7e 	bl	8004dcc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff fb8d 	bl	80039f8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80042de:	e014      	b.n	800430a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2220      	movs	r2, #32
 80042e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2212      	movs	r2, #18
 80042ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80042f4:	2102      	movs	r1, #2
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 fd68 	bl	8004dcc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7ff fb81 	bl	8003a0c <HAL_I2C_MasterRxCpltCallback>
}
 800430a:	bf00      	nop
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b082      	sub	sp, #8
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b29      	cmp	r3, #41	; 0x29
 800432c:	d112      	bne.n	8004354 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2228      	movs	r2, #40	; 0x28
 8004332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2221      	movs	r2, #33	; 0x21
 800433a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800433c:	2101      	movs	r1, #1
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 fd44 	bl	8004dcc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7ff fb67 	bl	8003a20 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004352:	e017      	b.n	8004384 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b2a      	cmp	r3, #42	; 0x2a
 800435e:	d111      	bne.n	8004384 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2228      	movs	r2, #40	; 0x28
 8004364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2222      	movs	r2, #34	; 0x22
 800436c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800436e:	2102      	movs	r1, #2
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 fd2b 	bl	8004dcc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7ff fb58 	bl	8003a34 <HAL_I2C_SlaveRxCpltCallback>
}
 8004384:	bf00      	nop
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2220      	movs	r2, #32
 800439c:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6859      	ldr	r1, [r3, #4]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	4b44      	ldr	r3, [pc, #272]	; (80044bc <I2C_ITMasterCplt+0x130>)
 80043aa:	400b      	ands	r3, r1
 80043ac:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a40      	ldr	r2, [pc, #256]	; (80044c0 <I2C_ITMasterCplt+0x134>)
 80043be:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	091b      	lsrs	r3, r3, #4
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d009      	beq.n	80043e0 <I2C_ITMasterCplt+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2210      	movs	r2, #16
 80043d2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d8:	f043 0204 	orr.w	r2, r3, #4
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 fa59 	bl	8004898 <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80043e6:	2103      	movs	r1, #3
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 fcef 	bl	8004dcc <I2C_Disable_IRQ>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b60      	cmp	r3, #96	; 0x60
 80043fe:	d002      	beq.n	8004406 <I2C_ITMasterCplt+0x7a>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d006      	beq.n	8004414 <I2C_ITMasterCplt+0x88>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440a:	4619      	mov	r1, r3
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 f983 	bl	8004718 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004412:	e04e      	b.n	80044b2 <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b21      	cmp	r3, #33	; 0x21
 800441e:	d121      	bne.n	8004464 <I2C_ITMasterCplt+0xd8>
    hi2c->State = HAL_I2C_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2220      	movs	r2, #32
 8004424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b40      	cmp	r3, #64	; 0x40
 8004432:	d10b      	bne.n	800444c <I2C_ITMasterCplt+0xc0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff fb17 	bl	8003a78 <HAL_I2C_MemTxCpltCallback>
}
 800444a:	e032      	b.n	80044b2 <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7ff facb 	bl	80039f8 <HAL_I2C_MasterTxCpltCallback>
}
 8004462:	e026      	b.n	80044b2 <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800446a:	b2db      	uxtb	r3, r3
 800446c:	2b22      	cmp	r3, #34	; 0x22
 800446e:	d120      	bne.n	80044b2 <I2C_ITMasterCplt+0x126>
    hi2c->State = HAL_I2C_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2220      	movs	r2, #32
 8004474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b40      	cmp	r3, #64	; 0x40
 8004482:	d10b      	bne.n	800449c <I2C_ITMasterCplt+0x110>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7ff faf9 	bl	8003a8c <HAL_I2C_MemRxCpltCallback>
}
 800449a:	e00a      	b.n	80044b2 <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7ff faad 	bl	8003a0c <HAL_I2C_MasterRxCpltCallback>
}
 80044b2:	bf00      	nop
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	fe00e800 	.word	0xfe00e800
 80044c0:	ffff0000 	.word	0xffff0000

080044c4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2220      	movs	r2, #32
 80044e0:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80044e2:	2107      	movs	r1, #7
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 fc71 	bl	8004dcc <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044f8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6859      	ldr	r1, [r3, #4]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	4b58      	ldr	r3, [pc, #352]	; (8004668 <I2C_ITSlaveCplt+0x1a4>)
 8004506:	400b      	ands	r3, r1
 8004508:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f9c4 	bl	8004898 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	0b9b      	lsrs	r3, r3, #14
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00b      	beq.n	8004534 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004520:	2b00      	cmp	r3, #0
 8004522:	d018      	beq.n	8004556 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	b29a      	uxth	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004532:	e010      	b.n	8004556 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	0bdb      	lsrs	r3, r3, #15
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00a      	beq.n	8004556 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004544:	2b00      	cmp	r3, #0
 8004546:	d006      	beq.n	8004556 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	b29a      	uxth	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	089b      	lsrs	r3, r3, #2
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d020      	beq.n	80045a4 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f023 0304 	bic.w	r3, r3, #4
 8004568:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00c      	beq.n	80045a4 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458e:	3b01      	subs	r3, #1
 8004590:	b29a      	uxth	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459a:	b29b      	uxth	r3, r3
 800459c:	3b01      	subs	r3, #1
 800459e:	b29a      	uxth	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d005      	beq.n	80045ba <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b2:	f043 0204 	orr.w	r2, r3, #4
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d010      	beq.n	80045f8 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045da:	4619      	mov	r1, r3
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f89b 	bl	8004718 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b28      	cmp	r3, #40	; 0x28
 80045ec:	d138      	bne.n	8004660 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80045ee:	68f9      	ldr	r1, [r7, #12]
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f83d 	bl	8004670 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80045f6:	e033      	b.n	8004660 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004600:	d011      	beq.n	8004626 <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7ff fe85 	bl	8004312 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a18      	ldr	r2, [pc, #96]	; (800466c <I2C_ITSlaveCplt+0x1a8>)
 800460c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2220      	movs	r2, #32
 8004612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7ff fa20 	bl	8003a64 <HAL_I2C_ListenCpltCallback>
}
 8004624:	e01c      	b.n	8004660 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b22      	cmp	r3, #34	; 0x22
 8004630:	d10b      	bne.n	800464a <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2220      	movs	r2, #32
 8004636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7ff f9f6 	bl	8003a34 <HAL_I2C_SlaveRxCpltCallback>
}
 8004648:	e00a      	b.n	8004660 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2220      	movs	r2, #32
 800464e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7ff f9e0 	bl	8003a20 <HAL_I2C_SlaveTxCpltCallback>
}
 8004660:	bf00      	nop
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	fe00e800 	.word	0xfe00e800
 800466c:	ffff0000 	.word	0xffff0000

08004670 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a25      	ldr	r2, [pc, #148]	; (8004714 <I2C_ITListenCplt+0xa4>)
 800467e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2220      	movs	r2, #32
 800468a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	089b      	lsrs	r3, r3, #2
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d022      	beq.n	80046ee <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d012      	beq.n	80046ee <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d8:	b29b      	uxth	r3, r3
 80046da:	3b01      	subs	r3, #1
 80046dc:	b29a      	uxth	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e6:	f043 0204 	orr.w	r2, r3, #4
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80046ee:	2107      	movs	r1, #7
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 fb6b 	bl	8004dcc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2210      	movs	r2, #16
 80046fc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7ff f9ac 	bl	8003a64 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800470c:	bf00      	nop
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	ffff0000 	.word	0xffff0000

08004718 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004728:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a55      	ldr	r2, [pc, #340]	; (800488c <I2C_ITError+0x174>)
 8004736:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	431a      	orrs	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800474a:	7bfb      	ldrb	r3, [r7, #15]
 800474c:	2b28      	cmp	r3, #40	; 0x28
 800474e:	d005      	beq.n	800475c <I2C_ITError+0x44>
 8004750:	7bfb      	ldrb	r3, [r7, #15]
 8004752:	2b29      	cmp	r3, #41	; 0x29
 8004754:	d002      	beq.n	800475c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004756:	7bfb      	ldrb	r3, [r7, #15]
 8004758:	2b2a      	cmp	r3, #42	; 0x2a
 800475a:	d10e      	bne.n	800477a <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800475c:	2103      	movs	r1, #3
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 fb34 	bl	8004dcc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2228      	movs	r2, #40	; 0x28
 8004768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a46      	ldr	r2, [pc, #280]	; (8004890 <I2C_ITError+0x178>)
 8004776:	635a      	str	r2, [r3, #52]	; 0x34
 8004778:	e013      	b.n	80047a2 <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800477a:	2107      	movs	r1, #7
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 fb25 	bl	8004dcc <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b60      	cmp	r3, #96	; 0x60
 800478c:	d003      	beq.n	8004796 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2220      	movs	r2, #32
 8004792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047b0:	d123      	bne.n	80047fa <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047c0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d05c      	beq.n	8004884 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ce:	4a31      	ldr	r2, [pc, #196]	; (8004894 <I2C_ITError+0x17c>)
 80047d0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fe fa42 	bl	8002c68 <HAL_DMA_Abort_IT>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d04c      	beq.n	8004884 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047f4:	4610      	mov	r0, r2
 80047f6:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047f8:	e044      	b.n	8004884 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004804:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004808:	d123      	bne.n	8004852 <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004818:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481e:	2b00      	cmp	r3, #0
 8004820:	d030      	beq.n	8004884 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004826:	4a1b      	ldr	r2, [pc, #108]	; (8004894 <I2C_ITError+0x17c>)
 8004828:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004836:	4618      	mov	r0, r3
 8004838:	f7fe fa16 	bl	8002c68 <HAL_DMA_Abort_IT>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d020      	beq.n	8004884 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800484c:	4610      	mov	r0, r2
 800484e:	4798      	blx	r3
}
 8004850:	e018      	b.n	8004884 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b60      	cmp	r3, #96	; 0x60
 800485c:	d10b      	bne.n	8004876 <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2220      	movs	r2, #32
 8004862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7ff f920 	bl	8003ab4 <HAL_I2C_AbortCpltCallback>
}
 8004874:	e006      	b.n	8004884 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7ff f90e 	bl	8003aa0 <HAL_I2C_ErrorCallback>
}
 8004884:	bf00      	nop
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	ffff0000 	.word	0xffff0000
 8004890:	08003ac9 	.word	0x08003ac9
 8004894:	08004a81 	.word	0x08004a81

08004898 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d103      	bne.n	80048b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2200      	movs	r2, #0
 80048b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d007      	beq.n	80048d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699a      	ldr	r2, [r3, #24]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0201 	orr.w	r2, r2, #1
 80048d2:	619a      	str	r2, [r3, #24]
  }
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ec:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048fc:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004902:	b29b      	uxth	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d104      	bne.n	8004912 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004908:	2112      	movs	r1, #18
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 f9f0 	bl	8004cf0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004910:	e02d      	b.n	800496e <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800491a:	441a      	add	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004924:	b29b      	uxth	r3, r3
 8004926:	2bff      	cmp	r3, #255	; 0xff
 8004928:	d903      	bls.n	8004932 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	22ff      	movs	r2, #255	; 0xff
 800492e:	851a      	strh	r2, [r3, #40]	; 0x28
 8004930:	e004      	b.n	800493c <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004936:	b29a      	uxth	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	4619      	mov	r1, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	3328      	adds	r3, #40	; 0x28
 800494c:	461a      	mov	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004952:	f7fe f929 	bl	8002ba8 <HAL_DMA_Start_IT>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d004      	beq.n	8004966 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800495c:	2110      	movs	r1, #16
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f7ff feda 	bl	8004718 <I2C_ITError>
}
 8004964:	e003      	b.n	800496e <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004966:	2112      	movs	r1, #18
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 f9c1 	bl	8004cf0 <I2C_Enable_IRQ>
}
 800496e:	bf00      	nop
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b084      	sub	sp, #16
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004982:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004992:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004998:	b29b      	uxth	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d104      	bne.n	80049a8 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800499e:	2112      	movs	r1, #18
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 f9a5 	bl	8004cf0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80049a6:	e02d      	b.n	8004a04 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80049b0:	441a      	add	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	2bff      	cmp	r3, #255	; 0xff
 80049be:	d903      	bls.n	80049c8 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	22ff      	movs	r2, #255	; 0xff
 80049c4:	851a      	strh	r2, [r3, #40]	; 0x28
 80049c6:	e004      	b.n	80049d2 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3324      	adds	r3, #36	; 0x24
 80049dc:	4619      	mov	r1, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e2:	461a      	mov	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e8:	f7fe f8de 	bl	8002ba8 <HAL_DMA_Start_IT>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d004      	beq.n	80049fc <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80049f2:	2110      	movs	r1, #16
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f7ff fe8f 	bl	8004718 <I2C_ITError>
}
 80049fa:	e003      	b.n	8004a04 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80049fc:	2112      	movs	r1, #18
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 f976 	bl	8004cf0 <I2C_Enable_IRQ>
}
 8004a04:	bf00      	nop
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1c:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d007      	beq.n	8004a36 <I2C_DMAError+0x2a>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 8004a32:	2301      	movs	r3, #1
 8004a34:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d007      	beq.n	8004a4e <I2C_DMAError+0x42>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7fe fab6 	bl	8002fc0 <HAL_DMA_GetError>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d00e      	beq.n	8004a78 <I2C_DMAError+0x6c>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00b      	beq.n	8004a78 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a6e:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004a70:	2110      	movs	r1, #16
 8004a72:	68b8      	ldr	r0, [r7, #8]
 8004a74:	f7ff fe50 	bl	8004718 <I2C_ITError>
  }
}
 8004a78:	bf00      	nop
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a92:	2200      	movs	r2, #0
 8004a94:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b60      	cmp	r3, #96	; 0x60
 8004aa8:	d107      	bne.n	8004aba <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2220      	movs	r2, #32
 8004aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f7fe fffe 	bl	8003ab4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ab8:	e002      	b.n	8004ac0 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f7fe fff0 	bl	8003aa0 <HAL_I2C_ErrorCallback>
}
 8004ac0:	bf00      	nop
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	603b      	str	r3, [r7, #0]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ad8:	e022      	b.n	8004b20 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae0:	d01e      	beq.n	8004b20 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ae2:	f7fd f9b1 	bl	8001e48 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d302      	bcc.n	8004af8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d113      	bne.n	8004b20 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afc:	f043 0220 	orr.w	r2, r3, #32
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e00f      	b.n	8004b40 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699a      	ldr	r2, [r3, #24]
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	bf0c      	ite	eq
 8004b30:	2301      	moveq	r3, #1
 8004b32:	2300      	movne	r3, #0
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	461a      	mov	r2, r3
 8004b38:	79fb      	ldrb	r3, [r7, #7]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d0cd      	beq.n	8004ada <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b54:	e02c      	b.n	8004bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	68b9      	ldr	r1, [r7, #8]
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 f834 	bl	8004bc8 <I2C_IsAcknowledgeFailed>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e02a      	b.n	8004bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b70:	d01e      	beq.n	8004bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b72:	f7fd f969 	bl	8001e48 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d302      	bcc.n	8004b88 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d113      	bne.n	8004bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8c:	f043 0220 	orr.w	r2, r3, #32
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e007      	b.n	8004bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d1cb      	bne.n	8004b56 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	f003 0310 	and.w	r3, r3, #16
 8004bde:	2b10      	cmp	r3, #16
 8004be0:	d151      	bne.n	8004c86 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004be2:	e022      	b.n	8004c2a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bea:	d01e      	beq.n	8004c2a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bec:	f7fd f92c 	bl	8001e48 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d302      	bcc.n	8004c02 <I2C_IsAcknowledgeFailed+0x3a>
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d113      	bne.n	8004c2a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c06:	f043 0220 	orr.w	r2, r3, #32
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e02e      	b.n	8004c88 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	f003 0320 	and.w	r3, r3, #32
 8004c34:	2b20      	cmp	r3, #32
 8004c36:	d1d5      	bne.n	8004be4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2210      	movs	r2, #16
 8004c3e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2220      	movs	r2, #32
 8004c46:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f7ff fe25 	bl	8004898 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	6859      	ldr	r1, [r3, #4]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	4b0d      	ldr	r3, [pc, #52]	; (8004c90 <I2C_IsAcknowledgeFailed+0xc8>)
 8004c5a:	400b      	ands	r3, r1
 8004c5c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c62:	f043 0204 	orr.w	r2, r3, #4
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e000      	b.n	8004c88 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	fe00e800 	.word	0xfe00e800

08004c94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	607b      	str	r3, [r7, #4]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	817b      	strh	r3, [r7, #10]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	0d5b      	lsrs	r3, r3, #21
 8004cb0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004cb4:	4b0d      	ldr	r3, [pc, #52]	; (8004cec <I2C_TransferConfig+0x58>)
 8004cb6:	430b      	orrs	r3, r1
 8004cb8:	43db      	mvns	r3, r3
 8004cba:	ea02 0103 	and.w	r1, r2, r3
 8004cbe:	897b      	ldrh	r3, [r7, #10]
 8004cc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004cc4:	7a7b      	ldrb	r3, [r7, #9]
 8004cc6:	041b      	lsls	r3, r3, #16
 8004cc8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004cde:	bf00      	nop
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	03ff63ff 	.word	0x03ff63ff

08004cf0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d04:	4a2f      	ldr	r2, [pc, #188]	; (8004dc4 <I2C_Enable_IRQ+0xd4>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d004      	beq.n	8004d14 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004d0e:	4a2e      	ldr	r2, [pc, #184]	; (8004dc8 <I2C_Enable_IRQ+0xd8>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d124      	bne.n	8004d5e <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004d14:	887b      	ldrh	r3, [r7, #2]
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004d24:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8004d26:	887b      	ldrh	r3, [r7, #2]
 8004d28:	f003 0311 	and.w	r3, r3, #17
 8004d2c:	2b11      	cmp	r3, #17
 8004d2e:	d103      	bne.n	8004d38 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004d36:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8004d38:	887b      	ldrh	r3, [r7, #2]
 8004d3a:	f003 0312 	and.w	r3, r3, #18
 8004d3e:	2b12      	cmp	r3, #18
 8004d40:	d103      	bne.n	8004d4a <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f043 0320 	orr.w	r3, r3, #32
 8004d48:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8004d4a:	887b      	ldrh	r3, [r7, #2]
 8004d4c:	f003 0312 	and.w	r3, r3, #18
 8004d50:	2b12      	cmp	r3, #18
 8004d52:	d128      	bne.n	8004da6 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d5a:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8004d5c:	e023      	b.n	8004da6 <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004d5e:	887b      	ldrh	r3, [r7, #2]
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004d6e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004d70:	887b      	ldrh	r3, [r7, #2]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004d80:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004d82:	887b      	ldrh	r3, [r7, #2]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d003      	beq.n	8004d94 <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8004d92:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8004d94:	887b      	ldrh	r3, [r7, #2]
 8004d96:	f003 0312 	and.w	r3, r3, #18
 8004d9a:	2b12      	cmp	r3, #18
 8004d9c:	d103      	bne.n	8004da6 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f043 0320 	orr.w	r3, r3, #32
 8004da4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6819      	ldr	r1, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	601a      	str	r2, [r3, #0]
}
 8004db6:	bf00      	nop
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	08003ccf 	.word	0x08003ccf
 8004dc8:	08003eb5 	.word	0x08003eb5

08004dcc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004ddc:	887b      	ldrh	r3, [r7, #2]
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00f      	beq.n	8004e06 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004dec:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004dfa:	2b28      	cmp	r3, #40	; 0x28
 8004dfc:	d003      	beq.n	8004e06 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004e04:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004e06:	887b      	ldrh	r3, [r7, #2]
 8004e08:	f003 0302 	and.w	r3, r3, #2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00f      	beq.n	8004e30 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004e16:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e24:	2b28      	cmp	r3, #40	; 0x28
 8004e26:	d003      	beq.n	8004e30 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004e2e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004e30:	887b      	ldrh	r3, [r7, #2]
 8004e32:	f003 0304 	and.w	r3, r3, #4
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004e40:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8004e42:	887b      	ldrh	r3, [r7, #2]
 8004e44:	f003 0311 	and.w	r3, r3, #17
 8004e48:	2b11      	cmp	r3, #17
 8004e4a:	d103      	bne.n	8004e54 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004e52:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8004e54:	887b      	ldrh	r3, [r7, #2]
 8004e56:	f003 0312 	and.w	r3, r3, #18
 8004e5a:	2b12      	cmp	r3, #18
 8004e5c:	d103      	bne.n	8004e66 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f043 0320 	orr.w	r3, r3, #32
 8004e64:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8004e66:	887b      	ldrh	r3, [r7, #2]
 8004e68:	f003 0312 	and.w	r3, r3, #18
 8004e6c:	2b12      	cmp	r3, #18
 8004e6e:	d103      	bne.n	8004e78 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e76:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6819      	ldr	r1, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	43da      	mvns	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	400a      	ands	r2, r1
 8004e88:	601a      	str	r2, [r3, #0]
}
 8004e8a:	bf00      	nop
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b20      	cmp	r3, #32
 8004eaa:	d138      	bne.n	8004f1e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d101      	bne.n	8004eba <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	e032      	b.n	8004f20 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2224      	movs	r2, #36	; 0x24
 8004ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0201 	bic.w	r2, r2, #1
 8004ed8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ee8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6819      	ldr	r1, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f042 0201 	orr.w	r2, r2, #1
 8004f08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	e000      	b.n	8004f20 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f1e:	2302      	movs	r3, #2
  }
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b20      	cmp	r3, #32
 8004f40:	d139      	bne.n	8004fb6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d101      	bne.n	8004f50 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e033      	b.n	8004fb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2224      	movs	r2, #36	; 0x24
 8004f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 0201 	bic.w	r2, r2, #1
 8004f6e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f7e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	021b      	lsls	r3, r3, #8
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f042 0201 	orr.w	r2, r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	e000      	b.n	8004fb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004fb6:	2302      	movs	r3, #2
  }
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fc8:	4b05      	ldr	r3, [pc, #20]	; (8004fe0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a04      	ldr	r2, [pc, #16]	; (8004fe0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fd2:	6013      	str	r3, [r2, #0]
}
 8004fd4:	bf00      	nop
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	40007000 	.word	0x40007000

08004fe4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004fea:	2300      	movs	r3, #0
 8004fec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004fee:	4b23      	ldr	r3, [pc, #140]	; (800507c <HAL_PWREx_EnableOverDrive+0x98>)
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	4a22      	ldr	r2, [pc, #136]	; (800507c <HAL_PWREx_EnableOverDrive+0x98>)
 8004ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8004ffa:	4b20      	ldr	r3, [pc, #128]	; (800507c <HAL_PWREx_EnableOverDrive+0x98>)
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005002:	603b      	str	r3, [r7, #0]
 8005004:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005006:	4b1e      	ldr	r3, [pc, #120]	; (8005080 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a1d      	ldr	r2, [pc, #116]	; (8005080 <HAL_PWREx_EnableOverDrive+0x9c>)
 800500c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005010:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005012:	f7fc ff19 	bl	8001e48 <HAL_GetTick>
 8005016:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005018:	e009      	b.n	800502e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800501a:	f7fc ff15 	bl	8001e48 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005028:	d901      	bls.n	800502e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e022      	b.n	8005074 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800502e:	4b14      	ldr	r3, [pc, #80]	; (8005080 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800503a:	d1ee      	bne.n	800501a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800503c:	4b10      	ldr	r3, [pc, #64]	; (8005080 <HAL_PWREx_EnableOverDrive+0x9c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a0f      	ldr	r2, [pc, #60]	; (8005080 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005046:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005048:	f7fc fefe 	bl	8001e48 <HAL_GetTick>
 800504c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800504e:	e009      	b.n	8005064 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005050:	f7fc fefa 	bl	8001e48 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800505e:	d901      	bls.n	8005064 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e007      	b.n	8005074 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005064:	4b06      	ldr	r3, [pc, #24]	; (8005080 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800506c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005070:	d1ee      	bne.n	8005050 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3708      	adds	r7, #8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40023800 	.word	0x40023800
 8005080:	40007000 	.word	0x40007000

08005084 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800508c:	2300      	movs	r3, #0
 800508e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e291      	b.n	80055be <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 8087 	beq.w	80051b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80050a8:	4b96      	ldr	r3, [pc, #600]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f003 030c 	and.w	r3, r3, #12
 80050b0:	2b04      	cmp	r3, #4
 80050b2:	d00c      	beq.n	80050ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050b4:	4b93      	ldr	r3, [pc, #588]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f003 030c 	and.w	r3, r3, #12
 80050bc:	2b08      	cmp	r3, #8
 80050be:	d112      	bne.n	80050e6 <HAL_RCC_OscConfig+0x62>
 80050c0:	4b90      	ldr	r3, [pc, #576]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050cc:	d10b      	bne.n	80050e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050ce:	4b8d      	ldr	r3, [pc, #564]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d06c      	beq.n	80051b4 <HAL_RCC_OscConfig+0x130>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d168      	bne.n	80051b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e26b      	b.n	80055be <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ee:	d106      	bne.n	80050fe <HAL_RCC_OscConfig+0x7a>
 80050f0:	4b84      	ldr	r3, [pc, #528]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a83      	ldr	r2, [pc, #524]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 80050f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050fa:	6013      	str	r3, [r2, #0]
 80050fc:	e02e      	b.n	800515c <HAL_RCC_OscConfig+0xd8>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10c      	bne.n	8005120 <HAL_RCC_OscConfig+0x9c>
 8005106:	4b7f      	ldr	r3, [pc, #508]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a7e      	ldr	r2, [pc, #504]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 800510c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005110:	6013      	str	r3, [r2, #0]
 8005112:	4b7c      	ldr	r3, [pc, #496]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a7b      	ldr	r2, [pc, #492]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 8005118:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800511c:	6013      	str	r3, [r2, #0]
 800511e:	e01d      	b.n	800515c <HAL_RCC_OscConfig+0xd8>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005128:	d10c      	bne.n	8005144 <HAL_RCC_OscConfig+0xc0>
 800512a:	4b76      	ldr	r3, [pc, #472]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a75      	ldr	r2, [pc, #468]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 8005130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005134:	6013      	str	r3, [r2, #0]
 8005136:	4b73      	ldr	r3, [pc, #460]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a72      	ldr	r2, [pc, #456]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 800513c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005140:	6013      	str	r3, [r2, #0]
 8005142:	e00b      	b.n	800515c <HAL_RCC_OscConfig+0xd8>
 8005144:	4b6f      	ldr	r3, [pc, #444]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a6e      	ldr	r2, [pc, #440]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 800514a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800514e:	6013      	str	r3, [r2, #0]
 8005150:	4b6c      	ldr	r3, [pc, #432]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a6b      	ldr	r2, [pc, #428]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 8005156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800515a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d013      	beq.n	800518c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005164:	f7fc fe70 	bl	8001e48 <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800516c:	f7fc fe6c 	bl	8001e48 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b64      	cmp	r3, #100	; 0x64
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e21f      	b.n	80055be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800517e:	4b61      	ldr	r3, [pc, #388]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0f0      	beq.n	800516c <HAL_RCC_OscConfig+0xe8>
 800518a:	e014      	b.n	80051b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800518c:	f7fc fe5c 	bl	8001e48 <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005192:	e008      	b.n	80051a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005194:	f7fc fe58 	bl	8001e48 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b64      	cmp	r3, #100	; 0x64
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e20b      	b.n	80055be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051a6:	4b57      	ldr	r3, [pc, #348]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1f0      	bne.n	8005194 <HAL_RCC_OscConfig+0x110>
 80051b2:	e000      	b.n	80051b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d069      	beq.n	8005296 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051c2:	4b50      	ldr	r3, [pc, #320]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f003 030c 	and.w	r3, r3, #12
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00b      	beq.n	80051e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051ce:	4b4d      	ldr	r3, [pc, #308]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f003 030c 	and.w	r3, r3, #12
 80051d6:	2b08      	cmp	r3, #8
 80051d8:	d11c      	bne.n	8005214 <HAL_RCC_OscConfig+0x190>
 80051da:	4b4a      	ldr	r3, [pc, #296]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d116      	bne.n	8005214 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051e6:	4b47      	ldr	r3, [pc, #284]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d005      	beq.n	80051fe <HAL_RCC_OscConfig+0x17a>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d001      	beq.n	80051fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e1df      	b.n	80055be <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051fe:	4b41      	ldr	r3, [pc, #260]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	493d      	ldr	r1, [pc, #244]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 800520e:	4313      	orrs	r3, r2
 8005210:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005212:	e040      	b.n	8005296 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d023      	beq.n	8005264 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800521c:	4b39      	ldr	r3, [pc, #228]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a38      	ldr	r2, [pc, #224]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 8005222:	f043 0301 	orr.w	r3, r3, #1
 8005226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005228:	f7fc fe0e 	bl	8001e48 <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005230:	f7fc fe0a 	bl	8001e48 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e1bd      	b.n	80055be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005242:	4b30      	ldr	r3, [pc, #192]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0f0      	beq.n	8005230 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800524e:	4b2d      	ldr	r3, [pc, #180]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	4929      	ldr	r1, [pc, #164]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 800525e:	4313      	orrs	r3, r2
 8005260:	600b      	str	r3, [r1, #0]
 8005262:	e018      	b.n	8005296 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005264:	4b27      	ldr	r3, [pc, #156]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a26      	ldr	r2, [pc, #152]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 800526a:	f023 0301 	bic.w	r3, r3, #1
 800526e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005270:	f7fc fdea 	bl	8001e48 <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005278:	f7fc fde6 	bl	8001e48 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e199      	b.n	80055be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800528a:	4b1e      	ldr	r3, [pc, #120]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1f0      	bne.n	8005278 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0308 	and.w	r3, r3, #8
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d038      	beq.n	8005314 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d019      	beq.n	80052de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052aa:	4b16      	ldr	r3, [pc, #88]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 80052ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ae:	4a15      	ldr	r2, [pc, #84]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 80052b0:	f043 0301 	orr.w	r3, r3, #1
 80052b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b6:	f7fc fdc7 	bl	8001e48 <HAL_GetTick>
 80052ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052bc:	e008      	b.n	80052d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052be:	f7fc fdc3 	bl	8001e48 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d901      	bls.n	80052d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e176      	b.n	80055be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052d0:	4b0c      	ldr	r3, [pc, #48]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 80052d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d0f0      	beq.n	80052be <HAL_RCC_OscConfig+0x23a>
 80052dc:	e01a      	b.n	8005314 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052de:	4b09      	ldr	r3, [pc, #36]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 80052e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052e2:	4a08      	ldr	r2, [pc, #32]	; (8005304 <HAL_RCC_OscConfig+0x280>)
 80052e4:	f023 0301 	bic.w	r3, r3, #1
 80052e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ea:	f7fc fdad 	bl	8001e48 <HAL_GetTick>
 80052ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052f0:	e00a      	b.n	8005308 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052f2:	f7fc fda9 	bl	8001e48 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d903      	bls.n	8005308 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e15c      	b.n	80055be <HAL_RCC_OscConfig+0x53a>
 8005304:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005308:	4b91      	ldr	r3, [pc, #580]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 800530a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1ee      	bne.n	80052f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0304 	and.w	r3, r3, #4
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 80a4 	beq.w	800546a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005322:	4b8b      	ldr	r3, [pc, #556]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10d      	bne.n	800534a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800532e:	4b88      	ldr	r3, [pc, #544]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	4a87      	ldr	r2, [pc, #540]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 8005334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005338:	6413      	str	r3, [r2, #64]	; 0x40
 800533a:	4b85      	ldr	r3, [pc, #532]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005342:	60bb      	str	r3, [r7, #8]
 8005344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005346:	2301      	movs	r3, #1
 8005348:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800534a:	4b82      	ldr	r3, [pc, #520]	; (8005554 <HAL_RCC_OscConfig+0x4d0>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005352:	2b00      	cmp	r3, #0
 8005354:	d118      	bne.n	8005388 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005356:	4b7f      	ldr	r3, [pc, #508]	; (8005554 <HAL_RCC_OscConfig+0x4d0>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a7e      	ldr	r2, [pc, #504]	; (8005554 <HAL_RCC_OscConfig+0x4d0>)
 800535c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005362:	f7fc fd71 	bl	8001e48 <HAL_GetTick>
 8005366:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005368:	e008      	b.n	800537c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800536a:	f7fc fd6d 	bl	8001e48 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b64      	cmp	r3, #100	; 0x64
 8005376:	d901      	bls.n	800537c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e120      	b.n	80055be <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800537c:	4b75      	ldr	r3, [pc, #468]	; (8005554 <HAL_RCC_OscConfig+0x4d0>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0f0      	beq.n	800536a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d106      	bne.n	800539e <HAL_RCC_OscConfig+0x31a>
 8005390:	4b6f      	ldr	r3, [pc, #444]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 8005392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005394:	4a6e      	ldr	r2, [pc, #440]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 8005396:	f043 0301 	orr.w	r3, r3, #1
 800539a:	6713      	str	r3, [r2, #112]	; 0x70
 800539c:	e02d      	b.n	80053fa <HAL_RCC_OscConfig+0x376>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10c      	bne.n	80053c0 <HAL_RCC_OscConfig+0x33c>
 80053a6:	4b6a      	ldr	r3, [pc, #424]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 80053a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053aa:	4a69      	ldr	r2, [pc, #420]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 80053ac:	f023 0301 	bic.w	r3, r3, #1
 80053b0:	6713      	str	r3, [r2, #112]	; 0x70
 80053b2:	4b67      	ldr	r3, [pc, #412]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 80053b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b6:	4a66      	ldr	r2, [pc, #408]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 80053b8:	f023 0304 	bic.w	r3, r3, #4
 80053bc:	6713      	str	r3, [r2, #112]	; 0x70
 80053be:	e01c      	b.n	80053fa <HAL_RCC_OscConfig+0x376>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	2b05      	cmp	r3, #5
 80053c6:	d10c      	bne.n	80053e2 <HAL_RCC_OscConfig+0x35e>
 80053c8:	4b61      	ldr	r3, [pc, #388]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 80053ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053cc:	4a60      	ldr	r2, [pc, #384]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 80053ce:	f043 0304 	orr.w	r3, r3, #4
 80053d2:	6713      	str	r3, [r2, #112]	; 0x70
 80053d4:	4b5e      	ldr	r3, [pc, #376]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 80053d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d8:	4a5d      	ldr	r2, [pc, #372]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 80053da:	f043 0301 	orr.w	r3, r3, #1
 80053de:	6713      	str	r3, [r2, #112]	; 0x70
 80053e0:	e00b      	b.n	80053fa <HAL_RCC_OscConfig+0x376>
 80053e2:	4b5b      	ldr	r3, [pc, #364]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 80053e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e6:	4a5a      	ldr	r2, [pc, #360]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 80053e8:	f023 0301 	bic.w	r3, r3, #1
 80053ec:	6713      	str	r3, [r2, #112]	; 0x70
 80053ee:	4b58      	ldr	r3, [pc, #352]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 80053f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f2:	4a57      	ldr	r2, [pc, #348]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 80053f4:	f023 0304 	bic.w	r3, r3, #4
 80053f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d015      	beq.n	800542e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005402:	f7fc fd21 	bl	8001e48 <HAL_GetTick>
 8005406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005408:	e00a      	b.n	8005420 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800540a:	f7fc fd1d 	bl	8001e48 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	f241 3288 	movw	r2, #5000	; 0x1388
 8005418:	4293      	cmp	r3, r2
 800541a:	d901      	bls.n	8005420 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e0ce      	b.n	80055be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005420:	4b4b      	ldr	r3, [pc, #300]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 8005422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d0ee      	beq.n	800540a <HAL_RCC_OscConfig+0x386>
 800542c:	e014      	b.n	8005458 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800542e:	f7fc fd0b 	bl	8001e48 <HAL_GetTick>
 8005432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005434:	e00a      	b.n	800544c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005436:	f7fc fd07 	bl	8001e48 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	f241 3288 	movw	r2, #5000	; 0x1388
 8005444:	4293      	cmp	r3, r2
 8005446:	d901      	bls.n	800544c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e0b8      	b.n	80055be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800544c:	4b40      	ldr	r3, [pc, #256]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 800544e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1ee      	bne.n	8005436 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005458:	7dfb      	ldrb	r3, [r7, #23]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d105      	bne.n	800546a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800545e:	4b3c      	ldr	r3, [pc, #240]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	4a3b      	ldr	r2, [pc, #236]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 8005464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005468:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 80a4 	beq.w	80055bc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005474:	4b36      	ldr	r3, [pc, #216]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f003 030c 	and.w	r3, r3, #12
 800547c:	2b08      	cmp	r3, #8
 800547e:	d06b      	beq.n	8005558 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	2b02      	cmp	r3, #2
 8005486:	d149      	bne.n	800551c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005488:	4b31      	ldr	r3, [pc, #196]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a30      	ldr	r2, [pc, #192]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 800548e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005494:	f7fc fcd8 	bl	8001e48 <HAL_GetTick>
 8005498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800549a:	e008      	b.n	80054ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800549c:	f7fc fcd4 	bl	8001e48 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e087      	b.n	80055be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ae:	4b28      	ldr	r3, [pc, #160]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1f0      	bne.n	800549c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	69da      	ldr	r2, [r3, #28]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	431a      	orrs	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	019b      	lsls	r3, r3, #6
 80054ca:	431a      	orrs	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d0:	085b      	lsrs	r3, r3, #1
 80054d2:	3b01      	subs	r3, #1
 80054d4:	041b      	lsls	r3, r3, #16
 80054d6:	431a      	orrs	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054dc:	061b      	lsls	r3, r3, #24
 80054de:	4313      	orrs	r3, r2
 80054e0:	4a1b      	ldr	r2, [pc, #108]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 80054e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054e6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054e8:	4b19      	ldr	r3, [pc, #100]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a18      	ldr	r2, [pc, #96]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 80054ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f4:	f7fc fca8 	bl	8001e48 <HAL_GetTick>
 80054f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054fa:	e008      	b.n	800550e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054fc:	f7fc fca4 	bl	8001e48 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b02      	cmp	r3, #2
 8005508:	d901      	bls.n	800550e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e057      	b.n	80055be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800550e:	4b10      	ldr	r3, [pc, #64]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d0f0      	beq.n	80054fc <HAL_RCC_OscConfig+0x478>
 800551a:	e04f      	b.n	80055bc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800551c:	4b0c      	ldr	r3, [pc, #48]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a0b      	ldr	r2, [pc, #44]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 8005522:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005528:	f7fc fc8e 	bl	8001e48 <HAL_GetTick>
 800552c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800552e:	e008      	b.n	8005542 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005530:	f7fc fc8a 	bl	8001e48 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b02      	cmp	r3, #2
 800553c:	d901      	bls.n	8005542 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e03d      	b.n	80055be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005542:	4b03      	ldr	r3, [pc, #12]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1f0      	bne.n	8005530 <HAL_RCC_OscConfig+0x4ac>
 800554e:	e035      	b.n	80055bc <HAL_RCC_OscConfig+0x538>
 8005550:	40023800 	.word	0x40023800
 8005554:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005558:	4b1b      	ldr	r3, [pc, #108]	; (80055c8 <HAL_RCC_OscConfig+0x544>)
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d028      	beq.n	80055b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005570:	429a      	cmp	r2, r3
 8005572:	d121      	bne.n	80055b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800557e:	429a      	cmp	r2, r3
 8005580:	d11a      	bne.n	80055b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005588:	4013      	ands	r3, r2
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800558e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005590:	4293      	cmp	r3, r2
 8005592:	d111      	bne.n	80055b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559e:	085b      	lsrs	r3, r3, #1
 80055a0:	3b01      	subs	r3, #1
 80055a2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d107      	bne.n	80055b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d001      	beq.n	80055bc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e000      	b.n	80055be <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3718      	adds	r7, #24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	40023800 	.word	0x40023800

080055cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80055d6:	2300      	movs	r3, #0
 80055d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e0d0      	b.n	8005786 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055e4:	4b6a      	ldr	r3, [pc, #424]	; (8005790 <HAL_RCC_ClockConfig+0x1c4>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 030f 	and.w	r3, r3, #15
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d910      	bls.n	8005614 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055f2:	4b67      	ldr	r3, [pc, #412]	; (8005790 <HAL_RCC_ClockConfig+0x1c4>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f023 020f 	bic.w	r2, r3, #15
 80055fa:	4965      	ldr	r1, [pc, #404]	; (8005790 <HAL_RCC_ClockConfig+0x1c4>)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	4313      	orrs	r3, r2
 8005600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005602:	4b63      	ldr	r3, [pc, #396]	; (8005790 <HAL_RCC_ClockConfig+0x1c4>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 030f 	and.w	r3, r3, #15
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	429a      	cmp	r2, r3
 800560e:	d001      	beq.n	8005614 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e0b8      	b.n	8005786 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0302 	and.w	r3, r3, #2
 800561c:	2b00      	cmp	r3, #0
 800561e:	d020      	beq.n	8005662 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b00      	cmp	r3, #0
 800562a:	d005      	beq.n	8005638 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800562c:	4b59      	ldr	r3, [pc, #356]	; (8005794 <HAL_RCC_ClockConfig+0x1c8>)
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	4a58      	ldr	r2, [pc, #352]	; (8005794 <HAL_RCC_ClockConfig+0x1c8>)
 8005632:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005636:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0308 	and.w	r3, r3, #8
 8005640:	2b00      	cmp	r3, #0
 8005642:	d005      	beq.n	8005650 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005644:	4b53      	ldr	r3, [pc, #332]	; (8005794 <HAL_RCC_ClockConfig+0x1c8>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	4a52      	ldr	r2, [pc, #328]	; (8005794 <HAL_RCC_ClockConfig+0x1c8>)
 800564a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800564e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005650:	4b50      	ldr	r3, [pc, #320]	; (8005794 <HAL_RCC_ClockConfig+0x1c8>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	494d      	ldr	r1, [pc, #308]	; (8005794 <HAL_RCC_ClockConfig+0x1c8>)
 800565e:	4313      	orrs	r3, r2
 8005660:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d040      	beq.n	80056f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d107      	bne.n	8005686 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005676:	4b47      	ldr	r3, [pc, #284]	; (8005794 <HAL_RCC_ClockConfig+0x1c8>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d115      	bne.n	80056ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e07f      	b.n	8005786 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	2b02      	cmp	r3, #2
 800568c:	d107      	bne.n	800569e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800568e:	4b41      	ldr	r3, [pc, #260]	; (8005794 <HAL_RCC_ClockConfig+0x1c8>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d109      	bne.n	80056ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e073      	b.n	8005786 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800569e:	4b3d      	ldr	r3, [pc, #244]	; (8005794 <HAL_RCC_ClockConfig+0x1c8>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e06b      	b.n	8005786 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056ae:	4b39      	ldr	r3, [pc, #228]	; (8005794 <HAL_RCC_ClockConfig+0x1c8>)
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f023 0203 	bic.w	r2, r3, #3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	4936      	ldr	r1, [pc, #216]	; (8005794 <HAL_RCC_ClockConfig+0x1c8>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056c0:	f7fc fbc2 	bl	8001e48 <HAL_GetTick>
 80056c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056c6:	e00a      	b.n	80056de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056c8:	f7fc fbbe 	bl	8001e48 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e053      	b.n	8005786 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056de:	4b2d      	ldr	r3, [pc, #180]	; (8005794 <HAL_RCC_ClockConfig+0x1c8>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 020c 	and.w	r2, r3, #12
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d1eb      	bne.n	80056c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056f0:	4b27      	ldr	r3, [pc, #156]	; (8005790 <HAL_RCC_ClockConfig+0x1c4>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 030f 	and.w	r3, r3, #15
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d210      	bcs.n	8005720 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056fe:	4b24      	ldr	r3, [pc, #144]	; (8005790 <HAL_RCC_ClockConfig+0x1c4>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f023 020f 	bic.w	r2, r3, #15
 8005706:	4922      	ldr	r1, [pc, #136]	; (8005790 <HAL_RCC_ClockConfig+0x1c4>)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	4313      	orrs	r3, r2
 800570c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800570e:	4b20      	ldr	r3, [pc, #128]	; (8005790 <HAL_RCC_ClockConfig+0x1c4>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 030f 	and.w	r3, r3, #15
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	429a      	cmp	r2, r3
 800571a:	d001      	beq.n	8005720 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e032      	b.n	8005786 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0304 	and.w	r3, r3, #4
 8005728:	2b00      	cmp	r3, #0
 800572a:	d008      	beq.n	800573e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800572c:	4b19      	ldr	r3, [pc, #100]	; (8005794 <HAL_RCC_ClockConfig+0x1c8>)
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	4916      	ldr	r1, [pc, #88]	; (8005794 <HAL_RCC_ClockConfig+0x1c8>)
 800573a:	4313      	orrs	r3, r2
 800573c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0308 	and.w	r3, r3, #8
 8005746:	2b00      	cmp	r3, #0
 8005748:	d009      	beq.n	800575e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800574a:	4b12      	ldr	r3, [pc, #72]	; (8005794 <HAL_RCC_ClockConfig+0x1c8>)
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	490e      	ldr	r1, [pc, #56]	; (8005794 <HAL_RCC_ClockConfig+0x1c8>)
 800575a:	4313      	orrs	r3, r2
 800575c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800575e:	f000 f821 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 8005762:	4601      	mov	r1, r0
 8005764:	4b0b      	ldr	r3, [pc, #44]	; (8005794 <HAL_RCC_ClockConfig+0x1c8>)
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	091b      	lsrs	r3, r3, #4
 800576a:	f003 030f 	and.w	r3, r3, #15
 800576e:	4a0a      	ldr	r2, [pc, #40]	; (8005798 <HAL_RCC_ClockConfig+0x1cc>)
 8005770:	5cd3      	ldrb	r3, [r2, r3]
 8005772:	fa21 f303 	lsr.w	r3, r1, r3
 8005776:	4a09      	ldr	r2, [pc, #36]	; (800579c <HAL_RCC_ClockConfig+0x1d0>)
 8005778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800577a:	4b09      	ldr	r3, [pc, #36]	; (80057a0 <HAL_RCC_ClockConfig+0x1d4>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4618      	mov	r0, r3
 8005780:	f7fc fb1e 	bl	8001dc0 <HAL_InitTick>

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	40023c00 	.word	0x40023c00
 8005794:	40023800 	.word	0x40023800
 8005798:	08007e78 	.word	0x08007e78
 800579c:	20000004 	.word	0x20000004
 80057a0:	20000008 	.word	0x20000008

080057a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80057aa:	2300      	movs	r3, #0
 80057ac:	607b      	str	r3, [r7, #4]
 80057ae:	2300      	movs	r3, #0
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	2300      	movs	r3, #0
 80057b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80057b6:	2300      	movs	r3, #0
 80057b8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057ba:	4b63      	ldr	r3, [pc, #396]	; (8005948 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f003 030c 	and.w	r3, r3, #12
 80057c2:	2b04      	cmp	r3, #4
 80057c4:	d007      	beq.n	80057d6 <HAL_RCC_GetSysClockFreq+0x32>
 80057c6:	2b08      	cmp	r3, #8
 80057c8:	d008      	beq.n	80057dc <HAL_RCC_GetSysClockFreq+0x38>
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f040 80b4 	bne.w	8005938 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057d0:	4b5e      	ldr	r3, [pc, #376]	; (800594c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80057d2:	60bb      	str	r3, [r7, #8]
      break;
 80057d4:	e0b3      	b.n	800593e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057d6:	4b5e      	ldr	r3, [pc, #376]	; (8005950 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80057d8:	60bb      	str	r3, [r7, #8]
      break;
 80057da:	e0b0      	b.n	800593e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057dc:	4b5a      	ldr	r3, [pc, #360]	; (8005948 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057e4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80057e6:	4b58      	ldr	r3, [pc, #352]	; (8005948 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d04a      	beq.n	8005888 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057f2:	4b55      	ldr	r3, [pc, #340]	; (8005948 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	099b      	lsrs	r3, r3, #6
 80057f8:	f04f 0400 	mov.w	r4, #0
 80057fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005800:	f04f 0200 	mov.w	r2, #0
 8005804:	ea03 0501 	and.w	r5, r3, r1
 8005808:	ea04 0602 	and.w	r6, r4, r2
 800580c:	4629      	mov	r1, r5
 800580e:	4632      	mov	r2, r6
 8005810:	f04f 0300 	mov.w	r3, #0
 8005814:	f04f 0400 	mov.w	r4, #0
 8005818:	0154      	lsls	r4, r2, #5
 800581a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800581e:	014b      	lsls	r3, r1, #5
 8005820:	4619      	mov	r1, r3
 8005822:	4622      	mov	r2, r4
 8005824:	1b49      	subs	r1, r1, r5
 8005826:	eb62 0206 	sbc.w	r2, r2, r6
 800582a:	f04f 0300 	mov.w	r3, #0
 800582e:	f04f 0400 	mov.w	r4, #0
 8005832:	0194      	lsls	r4, r2, #6
 8005834:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005838:	018b      	lsls	r3, r1, #6
 800583a:	1a5b      	subs	r3, r3, r1
 800583c:	eb64 0402 	sbc.w	r4, r4, r2
 8005840:	f04f 0100 	mov.w	r1, #0
 8005844:	f04f 0200 	mov.w	r2, #0
 8005848:	00e2      	lsls	r2, r4, #3
 800584a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800584e:	00d9      	lsls	r1, r3, #3
 8005850:	460b      	mov	r3, r1
 8005852:	4614      	mov	r4, r2
 8005854:	195b      	adds	r3, r3, r5
 8005856:	eb44 0406 	adc.w	r4, r4, r6
 800585a:	f04f 0100 	mov.w	r1, #0
 800585e:	f04f 0200 	mov.w	r2, #0
 8005862:	0262      	lsls	r2, r4, #9
 8005864:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005868:	0259      	lsls	r1, r3, #9
 800586a:	460b      	mov	r3, r1
 800586c:	4614      	mov	r4, r2
 800586e:	4618      	mov	r0, r3
 8005870:	4621      	mov	r1, r4
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f04f 0400 	mov.w	r4, #0
 8005878:	461a      	mov	r2, r3
 800587a:	4623      	mov	r3, r4
 800587c:	f7fb f916 	bl	8000aac <__aeabi_uldivmod>
 8005880:	4603      	mov	r3, r0
 8005882:	460c      	mov	r4, r1
 8005884:	60fb      	str	r3, [r7, #12]
 8005886:	e049      	b.n	800591c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005888:	4b2f      	ldr	r3, [pc, #188]	; (8005948 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	099b      	lsrs	r3, r3, #6
 800588e:	f04f 0400 	mov.w	r4, #0
 8005892:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005896:	f04f 0200 	mov.w	r2, #0
 800589a:	ea03 0501 	and.w	r5, r3, r1
 800589e:	ea04 0602 	and.w	r6, r4, r2
 80058a2:	4629      	mov	r1, r5
 80058a4:	4632      	mov	r2, r6
 80058a6:	f04f 0300 	mov.w	r3, #0
 80058aa:	f04f 0400 	mov.w	r4, #0
 80058ae:	0154      	lsls	r4, r2, #5
 80058b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80058b4:	014b      	lsls	r3, r1, #5
 80058b6:	4619      	mov	r1, r3
 80058b8:	4622      	mov	r2, r4
 80058ba:	1b49      	subs	r1, r1, r5
 80058bc:	eb62 0206 	sbc.w	r2, r2, r6
 80058c0:	f04f 0300 	mov.w	r3, #0
 80058c4:	f04f 0400 	mov.w	r4, #0
 80058c8:	0194      	lsls	r4, r2, #6
 80058ca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80058ce:	018b      	lsls	r3, r1, #6
 80058d0:	1a5b      	subs	r3, r3, r1
 80058d2:	eb64 0402 	sbc.w	r4, r4, r2
 80058d6:	f04f 0100 	mov.w	r1, #0
 80058da:	f04f 0200 	mov.w	r2, #0
 80058de:	00e2      	lsls	r2, r4, #3
 80058e0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80058e4:	00d9      	lsls	r1, r3, #3
 80058e6:	460b      	mov	r3, r1
 80058e8:	4614      	mov	r4, r2
 80058ea:	195b      	adds	r3, r3, r5
 80058ec:	eb44 0406 	adc.w	r4, r4, r6
 80058f0:	f04f 0100 	mov.w	r1, #0
 80058f4:	f04f 0200 	mov.w	r2, #0
 80058f8:	02a2      	lsls	r2, r4, #10
 80058fa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80058fe:	0299      	lsls	r1, r3, #10
 8005900:	460b      	mov	r3, r1
 8005902:	4614      	mov	r4, r2
 8005904:	4618      	mov	r0, r3
 8005906:	4621      	mov	r1, r4
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f04f 0400 	mov.w	r4, #0
 800590e:	461a      	mov	r2, r3
 8005910:	4623      	mov	r3, r4
 8005912:	f7fb f8cb 	bl	8000aac <__aeabi_uldivmod>
 8005916:	4603      	mov	r3, r0
 8005918:	460c      	mov	r4, r1
 800591a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800591c:	4b0a      	ldr	r3, [pc, #40]	; (8005948 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	0c1b      	lsrs	r3, r3, #16
 8005922:	f003 0303 	and.w	r3, r3, #3
 8005926:	3301      	adds	r3, #1
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	fbb2 f3f3 	udiv	r3, r2, r3
 8005934:	60bb      	str	r3, [r7, #8]
      break;
 8005936:	e002      	b.n	800593e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005938:	4b04      	ldr	r3, [pc, #16]	; (800594c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800593a:	60bb      	str	r3, [r7, #8]
      break;
 800593c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800593e:	68bb      	ldr	r3, [r7, #8]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005948:	40023800 	.word	0x40023800
 800594c:	00f42400 	.word	0x00f42400
 8005950:	007a1200 	.word	0x007a1200

08005954 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005954:	b480      	push	{r7}
 8005956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005958:	4b03      	ldr	r3, [pc, #12]	; (8005968 <HAL_RCC_GetHCLKFreq+0x14>)
 800595a:	681b      	ldr	r3, [r3, #0]
}
 800595c:	4618      	mov	r0, r3
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	20000004 	.word	0x20000004

0800596c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005970:	f7ff fff0 	bl	8005954 <HAL_RCC_GetHCLKFreq>
 8005974:	4601      	mov	r1, r0
 8005976:	4b05      	ldr	r3, [pc, #20]	; (800598c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	0a9b      	lsrs	r3, r3, #10
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	4a03      	ldr	r2, [pc, #12]	; (8005990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005982:	5cd3      	ldrb	r3, [r2, r3]
 8005984:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005988:	4618      	mov	r0, r3
 800598a:	bd80      	pop	{r7, pc}
 800598c:	40023800 	.word	0x40023800
 8005990:	08007e88 	.word	0x08007e88

08005994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005998:	f7ff ffdc 	bl	8005954 <HAL_RCC_GetHCLKFreq>
 800599c:	4601      	mov	r1, r0
 800599e:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	0b5b      	lsrs	r3, r3, #13
 80059a4:	f003 0307 	and.w	r3, r3, #7
 80059a8:	4a03      	ldr	r2, [pc, #12]	; (80059b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059aa:	5cd3      	ldrb	r3, [r2, r3]
 80059ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	40023800 	.word	0x40023800
 80059b8:	08007e88 	.word	0x08007e88

080059bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b088      	sub	sp, #32
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80059c4:	2300      	movs	r3, #0
 80059c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80059c8:	2300      	movs	r3, #0
 80059ca:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80059cc:	2300      	movs	r3, #0
 80059ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80059d0:	2300      	movs	r3, #0
 80059d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d012      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80059e0:	4b65      	ldr	r3, [pc, #404]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	4a64      	ldr	r2, [pc, #400]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80059e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80059ea:	6093      	str	r3, [r2, #8]
 80059ec:	4b62      	ldr	r3, [pc, #392]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80059ee:	689a      	ldr	r2, [r3, #8]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f4:	4960      	ldr	r1, [pc, #384]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8005a02:	2301      	movs	r3, #1
 8005a04:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d017      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a12:	4b59      	ldr	r3, [pc, #356]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a20:	4955      	ldr	r1, [pc, #340]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a30:	d101      	bne.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8005a32:	2301      	movs	r3, #1
 8005a34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d017      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005a4e:	4b4a      	ldr	r3, [pc, #296]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5c:	4946      	ldr	r1, [pc, #280]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a6c:	d101      	bne.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0320 	and.w	r3, r3, #32
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f000 808b 	beq.w	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a8c:	4b3a      	ldr	r3, [pc, #232]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a90:	4a39      	ldr	r2, [pc, #228]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a96:	6413      	str	r3, [r2, #64]	; 0x40
 8005a98:	4b37      	ldr	r3, [pc, #220]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aa0:	60fb      	str	r3, [r7, #12]
 8005aa2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005aa4:	4b35      	ldr	r3, [pc, #212]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a34      	ldr	r2, [pc, #208]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ab0:	f7fc f9ca 	bl	8001e48 <HAL_GetTick>
 8005ab4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005ab6:	e008      	b.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ab8:	f7fc f9c6 	bl	8001e48 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	2b64      	cmp	r3, #100	; 0x64
 8005ac4:	d901      	bls.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e2ba      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005aca:	4b2c      	ldr	r3, [pc, #176]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d0f0      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ad6:	4b28      	ldr	r3, [pc, #160]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ade:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d035      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d02e      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005af4:	4b20      	ldr	r3, [pc, #128]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005afc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005afe:	4b1e      	ldr	r3, [pc, #120]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b02:	4a1d      	ldr	r2, [pc, #116]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b08:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b0a:	4b1b      	ldr	r3, [pc, #108]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0e:	4a1a      	ldr	r2, [pc, #104]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b14:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005b16:	4a18      	ldr	r2, [pc, #96]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b1c:	4b16      	ldr	r3, [pc, #88]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d114      	bne.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b28:	f7fc f98e 	bl	8001e48 <HAL_GetTick>
 8005b2c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b2e:	e00a      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b30:	f7fc f98a 	bl	8001e48 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d901      	bls.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e27c      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b46:	4b0c      	ldr	r3, [pc, #48]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d0ee      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b5e:	d111      	bne.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8005b60:	4b05      	ldr	r3, [pc, #20]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005b6c:	4b04      	ldr	r3, [pc, #16]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005b6e:	400b      	ands	r3, r1
 8005b70:	4901      	ldr	r1, [pc, #4]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	608b      	str	r3, [r1, #8]
 8005b76:	e00b      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005b78:	40023800 	.word	0x40023800
 8005b7c:	40007000 	.word	0x40007000
 8005b80:	0ffffcff 	.word	0x0ffffcff
 8005b84:	4ba3      	ldr	r3, [pc, #652]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	4aa2      	ldr	r2, [pc, #648]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005b8a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005b8e:	6093      	str	r3, [r2, #8]
 8005b90:	4ba0      	ldr	r3, [pc, #640]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005b92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b9c:	499d      	ldr	r1, [pc, #628]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0310 	and.w	r3, r3, #16
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d010      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005bae:	4b99      	ldr	r3, [pc, #612]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bb4:	4a97      	ldr	r2, [pc, #604]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005bb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005bbe:	4b95      	ldr	r3, [pc, #596]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005bc0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc8:	4992      	ldr	r1, [pc, #584]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00a      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005bdc:	4b8d      	ldr	r3, [pc, #564]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bea:	498a      	ldr	r1, [pc, #552]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00a      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005bfe:	4b85      	ldr	r3, [pc, #532]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c0c:	4981      	ldr	r1, [pc, #516]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00a      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c20:	4b7c      	ldr	r3, [pc, #496]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c2e:	4979      	ldr	r1, [pc, #484]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00a      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c42:	4b74      	ldr	r3, [pc, #464]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c48:	f023 0203 	bic.w	r2, r3, #3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c50:	4970      	ldr	r1, [pc, #448]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00a      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c64:	4b6b      	ldr	r3, [pc, #428]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c6a:	f023 020c 	bic.w	r2, r3, #12
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c72:	4968      	ldr	r1, [pc, #416]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005c74:	4313      	orrs	r3, r2
 8005c76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00a      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c86:	4b63      	ldr	r3, [pc, #396]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c94:	495f      	ldr	r1, [pc, #380]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00a      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ca8:	4b5a      	ldr	r3, [pc, #360]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cb6:	4957      	ldr	r1, [pc, #348]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00a      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005cca:	4b52      	ldr	r3, [pc, #328]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cd8:	494e      	ldr	r1, [pc, #312]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00a      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005cec:	4b49      	ldr	r3, [pc, #292]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cfa:	4946      	ldr	r1, [pc, #280]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005d0e:	4b41      	ldr	r3, [pc, #260]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d1c:	493d      	ldr	r1, [pc, #244]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00a      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005d30:	4b38      	ldr	r3, [pc, #224]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d3e:	4935      	ldr	r1, [pc, #212]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d011      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005d52:	4b30      	ldr	r3, [pc, #192]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d58:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d60:	492c      	ldr	r1, [pc, #176]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d70:	d101      	bne.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8005d72:	2301      	movs	r3, #1
 8005d74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00a      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d82:	4b24      	ldr	r3, [pc, #144]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d88:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d90:	4920      	ldr	r1, [pc, #128]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00a      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005da4:	4b1b      	ldr	r3, [pc, #108]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005daa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005db2:	4918      	ldr	r1, [pc, #96]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00a      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005dc6:	4b13      	ldr	r3, [pc, #76]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dcc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dd4:	490f      	ldr	r1, [pc, #60]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d005      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x432>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005dea:	f040 809c 	bne.w	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005dee:	4b09      	ldr	r3, [pc, #36]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a08      	ldr	r2, [pc, #32]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005df4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005df8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dfa:	f7fc f825 	bl	8001e48 <HAL_GetTick>
 8005dfe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e00:	e00a      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e02:	f7fc f821 	bl	8001e48 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	2b64      	cmp	r3, #100	; 0x64
 8005e0e:	d903      	bls.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e115      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005e14:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e18:	4b8b      	ldr	r3, [pc, #556]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1ee      	bne.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d017      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d113      	bne.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005e38:	4b83      	ldr	r3, [pc, #524]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e3e:	0e1b      	lsrs	r3, r3, #24
 8005e40:	f003 030f 	and.w	r3, r3, #15
 8005e44:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	019a      	lsls	r2, r3, #6
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	061b      	lsls	r3, r3, #24
 8005e50:	431a      	orrs	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	071b      	lsls	r3, r3, #28
 8005e58:	497b      	ldr	r1, [pc, #492]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d004      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e74:	d00a      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d024      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e8a:	d11f      	bne.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e8c:	4b6e      	ldr	r3, [pc, #440]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e92:	0f1b      	lsrs	r3, r3, #28
 8005e94:	f003 0307 	and.w	r3, r3, #7
 8005e98:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	019a      	lsls	r2, r3, #6
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	061b      	lsls	r3, r3, #24
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	071b      	lsls	r3, r3, #28
 8005eac:	4966      	ldr	r1, [pc, #408]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005eb4:	4b64      	ldr	r3, [pc, #400]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005eba:	f023 021f 	bic.w	r2, r3, #31
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	69db      	ldr	r3, [r3, #28]
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	4960      	ldr	r1, [pc, #384]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00d      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	019a      	lsls	r2, r3, #6
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	061b      	lsls	r3, r3, #24
 8005ee4:	431a      	orrs	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	071b      	lsls	r3, r3, #28
 8005eec:	4956      	ldr	r1, [pc, #344]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ef4:	4b54      	ldr	r3, [pc, #336]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a53      	ldr	r2, [pc, #332]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005efa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005efe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f00:	f7fb ffa2 	bl	8001e48 <HAL_GetTick>
 8005f04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f06:	e008      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005f08:	f7fb ff9e 	bl	8001e48 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b64      	cmp	r3, #100	; 0x64
 8005f14:	d901      	bls.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e092      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f1a:	4b4b      	ldr	r3, [pc, #300]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d0f0      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	f040 8088 	bne.w	800603e <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005f2e:	4b46      	ldr	r3, [pc, #280]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a45      	ldr	r2, [pc, #276]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f3a:	f7fb ff85 	bl	8001e48 <HAL_GetTick>
 8005f3e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005f40:	e008      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005f42:	f7fb ff81 	bl	8001e48 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b64      	cmp	r3, #100	; 0x64
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e075      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005f54:	4b3c      	ldr	r3, [pc, #240]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f60:	d0ef      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d009      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d024      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d120      	bne.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005f8a:	4b2f      	ldr	r3, [pc, #188]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f90:	0c1b      	lsrs	r3, r3, #16
 8005f92:	f003 0303 	and.w	r3, r3, #3
 8005f96:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	019a      	lsls	r2, r3, #6
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	041b      	lsls	r3, r3, #16
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	061b      	lsls	r3, r3, #24
 8005faa:	4927      	ldr	r1, [pc, #156]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005fb2:	4b25      	ldr	r3, [pc, #148]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fb8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a1b      	ldr	r3, [r3, #32]
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	021b      	lsls	r3, r3, #8
 8005fc4:	4920      	ldr	r1, [pc, #128]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d018      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fe0:	d113      	bne.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005fe2:	4b19      	ldr	r3, [pc, #100]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe8:	0e1b      	lsrs	r3, r3, #24
 8005fea:	f003 030f 	and.w	r3, r3, #15
 8005fee:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	019a      	lsls	r2, r3, #6
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	041b      	lsls	r3, r3, #16
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	061b      	lsls	r3, r3, #24
 8006002:	4911      	ldr	r1, [pc, #68]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006004:	4313      	orrs	r3, r2
 8006006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800600a:	4b0f      	ldr	r3, [pc, #60]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a0e      	ldr	r2, [pc, #56]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006014:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006016:	f7fb ff17 	bl	8001e48 <HAL_GetTick>
 800601a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800601c:	e008      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800601e:	f7fb ff13 	bl	8001e48 <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	2b64      	cmp	r3, #100	; 0x64
 800602a:	d901      	bls.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e007      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006030:	4b05      	ldr	r3, [pc, #20]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800603c:	d1ef      	bne.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3720      	adds	r7, #32
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	40023800 	.word	0x40023800

0800604c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e01d      	b.n	800609a <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d106      	bne.n	8006078 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7fb fcfe 	bl	8001a74 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2202      	movs	r2, #2
 800607c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	3304      	adds	r3, #4
 8006088:	4619      	mov	r1, r3
 800608a:	4610      	mov	r0, r2
 800608c:	f000 fa18 	bl	80064c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3708      	adds	r7, #8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b082      	sub	sp, #8
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d101      	bne.n	80060b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e01d      	b.n	80060f0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d106      	bne.n	80060ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f815 	bl	80060f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2202      	movs	r2, #2
 80060d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	3304      	adds	r3, #4
 80060de:	4619      	mov	r1, r3
 80060e0:	4610      	mov	r0, r2
 80060e2:	f000 f9ed 	bl	80064c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2201      	movs	r2, #1
 800611c:	6839      	ldr	r1, [r7, #0]
 800611e:	4618      	mov	r0, r3
 8006120:	f000 fccc 	bl	8006abc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a17      	ldr	r2, [pc, #92]	; (8006188 <HAL_TIM_PWM_Start+0x7c>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d004      	beq.n	8006138 <HAL_TIM_PWM_Start+0x2c>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a16      	ldr	r2, [pc, #88]	; (800618c <HAL_TIM_PWM_Start+0x80>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d101      	bne.n	800613c <HAL_TIM_PWM_Start+0x30>
 8006138:	2301      	movs	r3, #1
 800613a:	e000      	b.n	800613e <HAL_TIM_PWM_Start+0x32>
 800613c:	2300      	movs	r3, #0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d007      	beq.n	8006152 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006150:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689a      	ldr	r2, [r3, #8]
 8006158:	4b0d      	ldr	r3, [pc, #52]	; (8006190 <HAL_TIM_PWM_Start+0x84>)
 800615a:	4013      	ands	r3, r2
 800615c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2b06      	cmp	r3, #6
 8006162:	d00b      	beq.n	800617c <HAL_TIM_PWM_Start+0x70>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800616a:	d007      	beq.n	800617c <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f042 0201 	orr.w	r2, r2, #1
 800617a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	40010000 	.word	0x40010000
 800618c:	40010400 	.word	0x40010400
 8006190:	00010007 	.word	0x00010007

08006194 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d101      	bne.n	80061ae <HAL_TIM_OC_ConfigChannel+0x1a>
 80061aa:	2302      	movs	r3, #2
 80061ac:	e06c      	b.n	8006288 <HAL_TIM_OC_ConfigChannel+0xf4>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2202      	movs	r2, #2
 80061ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b14      	cmp	r3, #20
 80061c2:	d857      	bhi.n	8006274 <HAL_TIM_OC_ConfigChannel+0xe0>
 80061c4:	a201      	add	r2, pc, #4	; (adr r2, 80061cc <HAL_TIM_OC_ConfigChannel+0x38>)
 80061c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ca:	bf00      	nop
 80061cc:	08006221 	.word	0x08006221
 80061d0:	08006275 	.word	0x08006275
 80061d4:	08006275 	.word	0x08006275
 80061d8:	08006275 	.word	0x08006275
 80061dc:	0800622f 	.word	0x0800622f
 80061e0:	08006275 	.word	0x08006275
 80061e4:	08006275 	.word	0x08006275
 80061e8:	08006275 	.word	0x08006275
 80061ec:	0800623d 	.word	0x0800623d
 80061f0:	08006275 	.word	0x08006275
 80061f4:	08006275 	.word	0x08006275
 80061f8:	08006275 	.word	0x08006275
 80061fc:	0800624b 	.word	0x0800624b
 8006200:	08006275 	.word	0x08006275
 8006204:	08006275 	.word	0x08006275
 8006208:	08006275 	.word	0x08006275
 800620c:	08006259 	.word	0x08006259
 8006210:	08006275 	.word	0x08006275
 8006214:	08006275 	.word	0x08006275
 8006218:	08006275 	.word	0x08006275
 800621c:	08006267 	.word	0x08006267
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68b9      	ldr	r1, [r7, #8]
 8006226:	4618      	mov	r0, r3
 8006228:	f000 f9ea 	bl	8006600 <TIM_OC1_SetConfig>
      break;
 800622c:	e023      	b.n	8006276 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68b9      	ldr	r1, [r7, #8]
 8006234:	4618      	mov	r0, r3
 8006236:	f000 fa55 	bl	80066e4 <TIM_OC2_SetConfig>
      break;
 800623a:	e01c      	b.n	8006276 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68b9      	ldr	r1, [r7, #8]
 8006242:	4618      	mov	r0, r3
 8006244:	f000 fac6 	bl	80067d4 <TIM_OC3_SetConfig>
      break;
 8006248:	e015      	b.n	8006276 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68b9      	ldr	r1, [r7, #8]
 8006250:	4618      	mov	r0, r3
 8006252:	f000 fb35 	bl	80068c0 <TIM_OC4_SetConfig>
      break;
 8006256:	e00e      	b.n	8006276 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68b9      	ldr	r1, [r7, #8]
 800625e:	4618      	mov	r0, r3
 8006260:	f000 fb86 	bl	8006970 <TIM_OC5_SetConfig>
      break;
 8006264:	e007      	b.n	8006276 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68b9      	ldr	r1, [r7, #8]
 800626c:	4618      	mov	r0, r3
 800626e:	f000 fbd1 	bl	8006a14 <TIM_OC6_SetConfig>
      break;
 8006272:	e000      	b.n	8006276 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 8006274:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d101      	bne.n	80062aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80062a6:	2302      	movs	r3, #2
 80062a8:	e105      	b.n	80064b6 <HAL_TIM_PWM_ConfigChannel+0x226>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2202      	movs	r2, #2
 80062b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b14      	cmp	r3, #20
 80062be:	f200 80f0 	bhi.w	80064a2 <HAL_TIM_PWM_ConfigChannel+0x212>
 80062c2:	a201      	add	r2, pc, #4	; (adr r2, 80062c8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80062c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c8:	0800631d 	.word	0x0800631d
 80062cc:	080064a3 	.word	0x080064a3
 80062d0:	080064a3 	.word	0x080064a3
 80062d4:	080064a3 	.word	0x080064a3
 80062d8:	0800635d 	.word	0x0800635d
 80062dc:	080064a3 	.word	0x080064a3
 80062e0:	080064a3 	.word	0x080064a3
 80062e4:	080064a3 	.word	0x080064a3
 80062e8:	0800639f 	.word	0x0800639f
 80062ec:	080064a3 	.word	0x080064a3
 80062f0:	080064a3 	.word	0x080064a3
 80062f4:	080064a3 	.word	0x080064a3
 80062f8:	080063df 	.word	0x080063df
 80062fc:	080064a3 	.word	0x080064a3
 8006300:	080064a3 	.word	0x080064a3
 8006304:	080064a3 	.word	0x080064a3
 8006308:	08006421 	.word	0x08006421
 800630c:	080064a3 	.word	0x080064a3
 8006310:	080064a3 	.word	0x080064a3
 8006314:	080064a3 	.word	0x080064a3
 8006318:	08006461 	.word	0x08006461
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68b9      	ldr	r1, [r7, #8]
 8006322:	4618      	mov	r0, r3
 8006324:	f000 f96c 	bl	8006600 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	699a      	ldr	r2, [r3, #24]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f042 0208 	orr.w	r2, r2, #8
 8006336:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	699a      	ldr	r2, [r3, #24]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 0204 	bic.w	r2, r2, #4
 8006346:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6999      	ldr	r1, [r3, #24]
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	691a      	ldr	r2, [r3, #16]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	619a      	str	r2, [r3, #24]
      break;
 800635a:	e0a3      	b.n	80064a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68b9      	ldr	r1, [r7, #8]
 8006362:	4618      	mov	r0, r3
 8006364:	f000 f9be 	bl	80066e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	699a      	ldr	r2, [r3, #24]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006376:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	699a      	ldr	r2, [r3, #24]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006386:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6999      	ldr	r1, [r3, #24]
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	021a      	lsls	r2, r3, #8
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	430a      	orrs	r2, r1
 800639a:	619a      	str	r2, [r3, #24]
      break;
 800639c:	e082      	b.n	80064a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68b9      	ldr	r1, [r7, #8]
 80063a4:	4618      	mov	r0, r3
 80063a6:	f000 fa15 	bl	80067d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	69da      	ldr	r2, [r3, #28]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f042 0208 	orr.w	r2, r2, #8
 80063b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	69da      	ldr	r2, [r3, #28]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f022 0204 	bic.w	r2, r2, #4
 80063c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	69d9      	ldr	r1, [r3, #28]
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	691a      	ldr	r2, [r3, #16]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	430a      	orrs	r2, r1
 80063da:	61da      	str	r2, [r3, #28]
      break;
 80063dc:	e062      	b.n	80064a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68b9      	ldr	r1, [r7, #8]
 80063e4:	4618      	mov	r0, r3
 80063e6:	f000 fa6b 	bl	80068c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	69da      	ldr	r2, [r3, #28]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	69da      	ldr	r2, [r3, #28]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	69d9      	ldr	r1, [r3, #28]
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	021a      	lsls	r2, r3, #8
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	61da      	str	r2, [r3, #28]
      break;
 800641e:	e041      	b.n	80064a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68b9      	ldr	r1, [r7, #8]
 8006426:	4618      	mov	r0, r3
 8006428:	f000 faa2 	bl	8006970 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f042 0208 	orr.w	r2, r2, #8
 800643a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f022 0204 	bic.w	r2, r2, #4
 800644a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	691a      	ldr	r2, [r3, #16]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	430a      	orrs	r2, r1
 800645c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800645e:	e021      	b.n	80064a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68b9      	ldr	r1, [r7, #8]
 8006466:	4618      	mov	r0, r3
 8006468:	f000 fad4 	bl	8006a14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800647a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800648a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	021a      	lsls	r2, r3, #8
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	430a      	orrs	r2, r1
 800649e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80064a0:	e000      	b.n	80064a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80064a2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop

080064c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a40      	ldr	r2, [pc, #256]	; (80065d4 <TIM_Base_SetConfig+0x114>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d013      	beq.n	8006500 <TIM_Base_SetConfig+0x40>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064de:	d00f      	beq.n	8006500 <TIM_Base_SetConfig+0x40>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a3d      	ldr	r2, [pc, #244]	; (80065d8 <TIM_Base_SetConfig+0x118>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d00b      	beq.n	8006500 <TIM_Base_SetConfig+0x40>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a3c      	ldr	r2, [pc, #240]	; (80065dc <TIM_Base_SetConfig+0x11c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d007      	beq.n	8006500 <TIM_Base_SetConfig+0x40>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a3b      	ldr	r2, [pc, #236]	; (80065e0 <TIM_Base_SetConfig+0x120>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d003      	beq.n	8006500 <TIM_Base_SetConfig+0x40>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a3a      	ldr	r2, [pc, #232]	; (80065e4 <TIM_Base_SetConfig+0x124>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d108      	bne.n	8006512 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006506:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	4313      	orrs	r3, r2
 8006510:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a2f      	ldr	r2, [pc, #188]	; (80065d4 <TIM_Base_SetConfig+0x114>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d02b      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006520:	d027      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a2c      	ldr	r2, [pc, #176]	; (80065d8 <TIM_Base_SetConfig+0x118>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d023      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a2b      	ldr	r2, [pc, #172]	; (80065dc <TIM_Base_SetConfig+0x11c>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d01f      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a2a      	ldr	r2, [pc, #168]	; (80065e0 <TIM_Base_SetConfig+0x120>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d01b      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a29      	ldr	r2, [pc, #164]	; (80065e4 <TIM_Base_SetConfig+0x124>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d017      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a28      	ldr	r2, [pc, #160]	; (80065e8 <TIM_Base_SetConfig+0x128>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d013      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a27      	ldr	r2, [pc, #156]	; (80065ec <TIM_Base_SetConfig+0x12c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d00f      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a26      	ldr	r2, [pc, #152]	; (80065f0 <TIM_Base_SetConfig+0x130>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d00b      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a25      	ldr	r2, [pc, #148]	; (80065f4 <TIM_Base_SetConfig+0x134>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d007      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a24      	ldr	r2, [pc, #144]	; (80065f8 <TIM_Base_SetConfig+0x138>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d003      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a23      	ldr	r2, [pc, #140]	; (80065fc <TIM_Base_SetConfig+0x13c>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d108      	bne.n	8006584 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	4313      	orrs	r3, r2
 8006582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	4313      	orrs	r3, r2
 8006590:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	689a      	ldr	r2, [r3, #8]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a0a      	ldr	r2, [pc, #40]	; (80065d4 <TIM_Base_SetConfig+0x114>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d003      	beq.n	80065b8 <TIM_Base_SetConfig+0xf8>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a0c      	ldr	r2, [pc, #48]	; (80065e4 <TIM_Base_SetConfig+0x124>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d103      	bne.n	80065c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	691a      	ldr	r2, [r3, #16]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	615a      	str	r2, [r3, #20]
}
 80065c6:	bf00      	nop
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	40010000 	.word	0x40010000
 80065d8:	40000400 	.word	0x40000400
 80065dc:	40000800 	.word	0x40000800
 80065e0:	40000c00 	.word	0x40000c00
 80065e4:	40010400 	.word	0x40010400
 80065e8:	40014000 	.word	0x40014000
 80065ec:	40014400 	.word	0x40014400
 80065f0:	40014800 	.word	0x40014800
 80065f4:	40001800 	.word	0x40001800
 80065f8:	40001c00 	.word	0x40001c00
 80065fc:	40002000 	.word	0x40002000

08006600 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	f023 0201 	bic.w	r2, r3, #1
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	4b2b      	ldr	r3, [pc, #172]	; (80066d8 <TIM_OC1_SetConfig+0xd8>)
 800662c:	4013      	ands	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f023 0303 	bic.w	r3, r3, #3
 8006636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	4313      	orrs	r3, r2
 8006640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f023 0302 	bic.w	r3, r3, #2
 8006648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	4313      	orrs	r3, r2
 8006652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a21      	ldr	r2, [pc, #132]	; (80066dc <TIM_OC1_SetConfig+0xdc>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d003      	beq.n	8006664 <TIM_OC1_SetConfig+0x64>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a20      	ldr	r2, [pc, #128]	; (80066e0 <TIM_OC1_SetConfig+0xe0>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d10c      	bne.n	800667e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	f023 0308 	bic.w	r3, r3, #8
 800666a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	4313      	orrs	r3, r2
 8006674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f023 0304 	bic.w	r3, r3, #4
 800667c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a16      	ldr	r2, [pc, #88]	; (80066dc <TIM_OC1_SetConfig+0xdc>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d003      	beq.n	800668e <TIM_OC1_SetConfig+0x8e>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a15      	ldr	r2, [pc, #84]	; (80066e0 <TIM_OC1_SetConfig+0xe0>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d111      	bne.n	80066b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006694:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800669c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	621a      	str	r2, [r3, #32]
}
 80066cc:	bf00      	nop
 80066ce:	371c      	adds	r7, #28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	fffeff8f 	.word	0xfffeff8f
 80066dc:	40010000 	.word	0x40010000
 80066e0:	40010400 	.word	0x40010400

080066e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	f023 0210 	bic.w	r2, r3, #16
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	4b2e      	ldr	r3, [pc, #184]	; (80067c8 <TIM_OC2_SetConfig+0xe4>)
 8006710:	4013      	ands	r3, r2
 8006712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800671a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	021b      	lsls	r3, r3, #8
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	4313      	orrs	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	f023 0320 	bic.w	r3, r3, #32
 800672e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	011b      	lsls	r3, r3, #4
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	4313      	orrs	r3, r2
 800673a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a23      	ldr	r2, [pc, #140]	; (80067cc <TIM_OC2_SetConfig+0xe8>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d003      	beq.n	800674c <TIM_OC2_SetConfig+0x68>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a22      	ldr	r2, [pc, #136]	; (80067d0 <TIM_OC2_SetConfig+0xec>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d10d      	bne.n	8006768 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006752:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	011b      	lsls	r3, r3, #4
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	4313      	orrs	r3, r2
 800675e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006766:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a18      	ldr	r2, [pc, #96]	; (80067cc <TIM_OC2_SetConfig+0xe8>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d003      	beq.n	8006778 <TIM_OC2_SetConfig+0x94>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a17      	ldr	r2, [pc, #92]	; (80067d0 <TIM_OC2_SetConfig+0xec>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d113      	bne.n	80067a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800677e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006786:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	4313      	orrs	r3, r2
 8006792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	4313      	orrs	r3, r2
 800679e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	621a      	str	r2, [r3, #32]
}
 80067ba:	bf00      	nop
 80067bc:	371c      	adds	r7, #28
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	feff8fff 	.word	0xfeff8fff
 80067cc:	40010000 	.word	0x40010000
 80067d0:	40010400 	.word	0x40010400

080067d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	69db      	ldr	r3, [r3, #28]
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	4b2d      	ldr	r3, [pc, #180]	; (80068b4 <TIM_OC3_SetConfig+0xe0>)
 8006800:	4013      	ands	r3, r2
 8006802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f023 0303 	bic.w	r3, r3, #3
 800680a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	4313      	orrs	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800681c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	021b      	lsls	r3, r3, #8
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	4313      	orrs	r3, r2
 8006828:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a22      	ldr	r2, [pc, #136]	; (80068b8 <TIM_OC3_SetConfig+0xe4>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d003      	beq.n	800683a <TIM_OC3_SetConfig+0x66>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a21      	ldr	r2, [pc, #132]	; (80068bc <TIM_OC3_SetConfig+0xe8>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d10d      	bne.n	8006856 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006840:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	021b      	lsls	r3, r3, #8
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	4313      	orrs	r3, r2
 800684c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006854:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a17      	ldr	r2, [pc, #92]	; (80068b8 <TIM_OC3_SetConfig+0xe4>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d003      	beq.n	8006866 <TIM_OC3_SetConfig+0x92>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a16      	ldr	r2, [pc, #88]	; (80068bc <TIM_OC3_SetConfig+0xe8>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d113      	bne.n	800688e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800686c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006874:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	011b      	lsls	r3, r3, #4
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	4313      	orrs	r3, r2
 8006880:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	011b      	lsls	r3, r3, #4
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	4313      	orrs	r3, r2
 800688c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	685a      	ldr	r2, [r3, #4]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	621a      	str	r2, [r3, #32]
}
 80068a8:	bf00      	nop
 80068aa:	371c      	adds	r7, #28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	fffeff8f 	.word	0xfffeff8f
 80068b8:	40010000 	.word	0x40010000
 80068bc:	40010400 	.word	0x40010400

080068c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b087      	sub	sp, #28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	4b1e      	ldr	r3, [pc, #120]	; (8006964 <TIM_OC4_SetConfig+0xa4>)
 80068ec:	4013      	ands	r3, r2
 80068ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	021b      	lsls	r3, r3, #8
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	4313      	orrs	r3, r2
 8006902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800690a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	031b      	lsls	r3, r3, #12
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	4313      	orrs	r3, r2
 8006916:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a13      	ldr	r2, [pc, #76]	; (8006968 <TIM_OC4_SetConfig+0xa8>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d003      	beq.n	8006928 <TIM_OC4_SetConfig+0x68>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a12      	ldr	r2, [pc, #72]	; (800696c <TIM_OC4_SetConfig+0xac>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d109      	bne.n	800693c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800692e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	019b      	lsls	r3, r3, #6
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	4313      	orrs	r3, r2
 800693a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	621a      	str	r2, [r3, #32]
}
 8006956:	bf00      	nop
 8006958:	371c      	adds	r7, #28
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	feff8fff 	.word	0xfeff8fff
 8006968:	40010000 	.word	0x40010000
 800696c:	40010400 	.word	0x40010400

08006970 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	4b1b      	ldr	r3, [pc, #108]	; (8006a08 <TIM_OC5_SetConfig+0x98>)
 800699c:	4013      	ands	r3, r2
 800699e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80069b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	041b      	lsls	r3, r3, #16
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a12      	ldr	r2, [pc, #72]	; (8006a0c <TIM_OC5_SetConfig+0x9c>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d003      	beq.n	80069ce <TIM_OC5_SetConfig+0x5e>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a11      	ldr	r2, [pc, #68]	; (8006a10 <TIM_OC5_SetConfig+0xa0>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d109      	bne.n	80069e2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	021b      	lsls	r3, r3, #8
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	4313      	orrs	r3, r2
 80069e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	621a      	str	r2, [r3, #32]
}
 80069fc:	bf00      	nop
 80069fe:	371c      	adds	r7, #28
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr
 8006a08:	fffeff8f 	.word	0xfffeff8f
 8006a0c:	40010000 	.word	0x40010000
 8006a10:	40010400 	.word	0x40010400

08006a14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b087      	sub	sp, #28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	4b1c      	ldr	r3, [pc, #112]	; (8006ab0 <TIM_OC6_SetConfig+0x9c>)
 8006a40:	4013      	ands	r3, r2
 8006a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	021b      	lsls	r3, r3, #8
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	051b      	lsls	r3, r3, #20
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a13      	ldr	r2, [pc, #76]	; (8006ab4 <TIM_OC6_SetConfig+0xa0>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d003      	beq.n	8006a74 <TIM_OC6_SetConfig+0x60>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a12      	ldr	r2, [pc, #72]	; (8006ab8 <TIM_OC6_SetConfig+0xa4>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d109      	bne.n	8006a88 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	029b      	lsls	r3, r3, #10
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685a      	ldr	r2, [r3, #4]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	621a      	str	r2, [r3, #32]
}
 8006aa2:	bf00      	nop
 8006aa4:	371c      	adds	r7, #28
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	feff8fff 	.word	0xfeff8fff
 8006ab4:	40010000 	.word	0x40010000
 8006ab8:	40010400 	.word	0x40010400

08006abc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f003 031f 	and.w	r3, r3, #31
 8006ace:	2201      	movs	r2, #1
 8006ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6a1a      	ldr	r2, [r3, #32]
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	43db      	mvns	r3, r3
 8006ade:	401a      	ands	r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6a1a      	ldr	r2, [r3, #32]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	f003 031f 	and.w	r3, r3, #31
 8006aee:	6879      	ldr	r1, [r7, #4]
 8006af0:	fa01 f303 	lsl.w	r3, r1, r3
 8006af4:	431a      	orrs	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	621a      	str	r2, [r3, #32]
}
 8006afa:	bf00      	nop
 8006afc:	371c      	adds	r7, #28
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
	...

08006b08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d101      	bne.n	8006b20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	e06d      	b.n	8006bfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a30      	ldr	r2, [pc, #192]	; (8006c08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d004      	beq.n	8006b54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a2f      	ldr	r2, [pc, #188]	; (8006c0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d108      	bne.n	8006b66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a20      	ldr	r2, [pc, #128]	; (8006c08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d022      	beq.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b92:	d01d      	beq.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a1d      	ldr	r2, [pc, #116]	; (8006c10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d018      	beq.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a1c      	ldr	r2, [pc, #112]	; (8006c14 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d013      	beq.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a1a      	ldr	r2, [pc, #104]	; (8006c18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d00e      	beq.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a15      	ldr	r2, [pc, #84]	; (8006c0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d009      	beq.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a16      	ldr	r2, [pc, #88]	; (8006c1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d004      	beq.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a15      	ldr	r2, [pc, #84]	; (8006c20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d10c      	bne.n	8006bea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3714      	adds	r7, #20
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr
 8006c08:	40010000 	.word	0x40010000
 8006c0c:	40010400 	.word	0x40010400
 8006c10:	40000400 	.word	0x40000400
 8006c14:	40000800 	.word	0x40000800
 8006c18:	40000c00 	.word	0x40000c00
 8006c1c:	40014000 	.word	0x40014000
 8006c20:	40001800 	.word	0x40001800

08006c24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e040      	b.n	8006cb8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d106      	bne.n	8006c4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7fa ff9e 	bl	8001b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2224      	movs	r2, #36	; 0x24
 8006c50:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f022 0201 	bic.w	r2, r2, #1
 8006c60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f8be 	bl	8006de4 <UART_SetConfig>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d101      	bne.n	8006c72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e022      	b.n	8006cb8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d002      	beq.n	8006c80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 fb5c 	bl	8007338 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	689a      	ldr	r2, [r3, #8]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f042 0201 	orr.w	r2, r2, #1
 8006cae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 fbe3 	bl	800747c <UART_CheckIdleState>
 8006cb6:	4603      	mov	r3, r0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3708      	adds	r7, #8
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b08a      	sub	sp, #40	; 0x28
 8006cc4:	af02      	add	r7, sp, #8
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	603b      	str	r3, [r7, #0]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cd4:	2b20      	cmp	r3, #32
 8006cd6:	d17f      	bne.n	8006dd8 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d002      	beq.n	8006ce4 <HAL_UART_Transmit+0x24>
 8006cde:	88fb      	ldrh	r3, [r7, #6]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d101      	bne.n	8006ce8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e078      	b.n	8006dda <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d101      	bne.n	8006cf6 <HAL_UART_Transmit+0x36>
 8006cf2:	2302      	movs	r3, #2
 8006cf4:	e071      	b.n	8006dda <HAL_UART_Transmit+0x11a>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2221      	movs	r2, #33	; 0x21
 8006d08:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006d0a:	f7fb f89d 	bl	8001e48 <HAL_GetTick>
 8006d0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	88fa      	ldrh	r2, [r7, #6]
 8006d14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	88fa      	ldrh	r2, [r7, #6]
 8006d1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d28:	d108      	bne.n	8006d3c <HAL_UART_Transmit+0x7c>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d104      	bne.n	8006d3c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8006d32:	2300      	movs	r3, #0
 8006d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	61bb      	str	r3, [r7, #24]
 8006d3a:	e003      	b.n	8006d44 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d40:	2300      	movs	r3, #0
 8006d42:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006d4c:	e02c      	b.n	8006da8 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	2200      	movs	r2, #0
 8006d56:	2180      	movs	r1, #128	; 0x80
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f000 fbbe 	bl	80074da <UART_WaitOnFlagUntilTimeout>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d001      	beq.n	8006d68 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e038      	b.n	8006dda <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10b      	bne.n	8006d86 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	881b      	ldrh	r3, [r3, #0]
 8006d72:	461a      	mov	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d7c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	3302      	adds	r3, #2
 8006d82:	61bb      	str	r3, [r7, #24]
 8006d84:	e007      	b.n	8006d96 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	781a      	ldrb	r2, [r3, #0]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	3301      	adds	r3, #1
 8006d94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1cc      	bne.n	8006d4e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	2140      	movs	r1, #64	; 0x40
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f000 fb8b 	bl	80074da <UART_WaitOnFlagUntilTimeout>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e005      	b.n	8006dda <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	e000      	b.n	8006dda <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8006dd8:	2302      	movs	r3, #2
  }
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3720      	adds	r7, #32
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
	...

08006de4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b088      	sub	sp, #32
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006dec:	2300      	movs	r3, #0
 8006dee:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006df0:	2300      	movs	r3, #0
 8006df2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	689a      	ldr	r2, [r3, #8]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	431a      	orrs	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	431a      	orrs	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	69db      	ldr	r3, [r3, #28]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	4bb1      	ldr	r3, [pc, #708]	; (80070d8 <UART_SetConfig+0x2f4>)
 8006e14:	4013      	ands	r3, r2
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	6812      	ldr	r2, [r2, #0]
 8006e1a:	6939      	ldr	r1, [r7, #16]
 8006e1c:	430b      	orrs	r3, r1
 8006e1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68da      	ldr	r2, [r3, #12]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	430a      	orrs	r2, r1
 8006e34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a1b      	ldr	r3, [r3, #32]
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	430a      	orrs	r2, r1
 8006e58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a9f      	ldr	r2, [pc, #636]	; (80070dc <UART_SetConfig+0x2f8>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d121      	bne.n	8006ea8 <UART_SetConfig+0xc4>
 8006e64:	4b9e      	ldr	r3, [pc, #632]	; (80070e0 <UART_SetConfig+0x2fc>)
 8006e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e6a:	f003 0303 	and.w	r3, r3, #3
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	d816      	bhi.n	8006ea0 <UART_SetConfig+0xbc>
 8006e72:	a201      	add	r2, pc, #4	; (adr r2, 8006e78 <UART_SetConfig+0x94>)
 8006e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e78:	08006e89 	.word	0x08006e89
 8006e7c:	08006e95 	.word	0x08006e95
 8006e80:	08006e8f 	.word	0x08006e8f
 8006e84:	08006e9b 	.word	0x08006e9b
 8006e88:	2301      	movs	r3, #1
 8006e8a:	77fb      	strb	r3, [r7, #31]
 8006e8c:	e151      	b.n	8007132 <UART_SetConfig+0x34e>
 8006e8e:	2302      	movs	r3, #2
 8006e90:	77fb      	strb	r3, [r7, #31]
 8006e92:	e14e      	b.n	8007132 <UART_SetConfig+0x34e>
 8006e94:	2304      	movs	r3, #4
 8006e96:	77fb      	strb	r3, [r7, #31]
 8006e98:	e14b      	b.n	8007132 <UART_SetConfig+0x34e>
 8006e9a:	2308      	movs	r3, #8
 8006e9c:	77fb      	strb	r3, [r7, #31]
 8006e9e:	e148      	b.n	8007132 <UART_SetConfig+0x34e>
 8006ea0:	2310      	movs	r3, #16
 8006ea2:	77fb      	strb	r3, [r7, #31]
 8006ea4:	bf00      	nop
 8006ea6:	e144      	b.n	8007132 <UART_SetConfig+0x34e>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a8d      	ldr	r2, [pc, #564]	; (80070e4 <UART_SetConfig+0x300>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d134      	bne.n	8006f1c <UART_SetConfig+0x138>
 8006eb2:	4b8b      	ldr	r3, [pc, #556]	; (80070e0 <UART_SetConfig+0x2fc>)
 8006eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eb8:	f003 030c 	and.w	r3, r3, #12
 8006ebc:	2b0c      	cmp	r3, #12
 8006ebe:	d829      	bhi.n	8006f14 <UART_SetConfig+0x130>
 8006ec0:	a201      	add	r2, pc, #4	; (adr r2, 8006ec8 <UART_SetConfig+0xe4>)
 8006ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec6:	bf00      	nop
 8006ec8:	08006efd 	.word	0x08006efd
 8006ecc:	08006f15 	.word	0x08006f15
 8006ed0:	08006f15 	.word	0x08006f15
 8006ed4:	08006f15 	.word	0x08006f15
 8006ed8:	08006f09 	.word	0x08006f09
 8006edc:	08006f15 	.word	0x08006f15
 8006ee0:	08006f15 	.word	0x08006f15
 8006ee4:	08006f15 	.word	0x08006f15
 8006ee8:	08006f03 	.word	0x08006f03
 8006eec:	08006f15 	.word	0x08006f15
 8006ef0:	08006f15 	.word	0x08006f15
 8006ef4:	08006f15 	.word	0x08006f15
 8006ef8:	08006f0f 	.word	0x08006f0f
 8006efc:	2300      	movs	r3, #0
 8006efe:	77fb      	strb	r3, [r7, #31]
 8006f00:	e117      	b.n	8007132 <UART_SetConfig+0x34e>
 8006f02:	2302      	movs	r3, #2
 8006f04:	77fb      	strb	r3, [r7, #31]
 8006f06:	e114      	b.n	8007132 <UART_SetConfig+0x34e>
 8006f08:	2304      	movs	r3, #4
 8006f0a:	77fb      	strb	r3, [r7, #31]
 8006f0c:	e111      	b.n	8007132 <UART_SetConfig+0x34e>
 8006f0e:	2308      	movs	r3, #8
 8006f10:	77fb      	strb	r3, [r7, #31]
 8006f12:	e10e      	b.n	8007132 <UART_SetConfig+0x34e>
 8006f14:	2310      	movs	r3, #16
 8006f16:	77fb      	strb	r3, [r7, #31]
 8006f18:	bf00      	nop
 8006f1a:	e10a      	b.n	8007132 <UART_SetConfig+0x34e>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a71      	ldr	r2, [pc, #452]	; (80070e8 <UART_SetConfig+0x304>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d120      	bne.n	8006f68 <UART_SetConfig+0x184>
 8006f26:	4b6e      	ldr	r3, [pc, #440]	; (80070e0 <UART_SetConfig+0x2fc>)
 8006f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f30:	2b10      	cmp	r3, #16
 8006f32:	d00f      	beq.n	8006f54 <UART_SetConfig+0x170>
 8006f34:	2b10      	cmp	r3, #16
 8006f36:	d802      	bhi.n	8006f3e <UART_SetConfig+0x15a>
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d005      	beq.n	8006f48 <UART_SetConfig+0x164>
 8006f3c:	e010      	b.n	8006f60 <UART_SetConfig+0x17c>
 8006f3e:	2b20      	cmp	r3, #32
 8006f40:	d005      	beq.n	8006f4e <UART_SetConfig+0x16a>
 8006f42:	2b30      	cmp	r3, #48	; 0x30
 8006f44:	d009      	beq.n	8006f5a <UART_SetConfig+0x176>
 8006f46:	e00b      	b.n	8006f60 <UART_SetConfig+0x17c>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	77fb      	strb	r3, [r7, #31]
 8006f4c:	e0f1      	b.n	8007132 <UART_SetConfig+0x34e>
 8006f4e:	2302      	movs	r3, #2
 8006f50:	77fb      	strb	r3, [r7, #31]
 8006f52:	e0ee      	b.n	8007132 <UART_SetConfig+0x34e>
 8006f54:	2304      	movs	r3, #4
 8006f56:	77fb      	strb	r3, [r7, #31]
 8006f58:	e0eb      	b.n	8007132 <UART_SetConfig+0x34e>
 8006f5a:	2308      	movs	r3, #8
 8006f5c:	77fb      	strb	r3, [r7, #31]
 8006f5e:	e0e8      	b.n	8007132 <UART_SetConfig+0x34e>
 8006f60:	2310      	movs	r3, #16
 8006f62:	77fb      	strb	r3, [r7, #31]
 8006f64:	bf00      	nop
 8006f66:	e0e4      	b.n	8007132 <UART_SetConfig+0x34e>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a5f      	ldr	r2, [pc, #380]	; (80070ec <UART_SetConfig+0x308>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d120      	bne.n	8006fb4 <UART_SetConfig+0x1d0>
 8006f72:	4b5b      	ldr	r3, [pc, #364]	; (80070e0 <UART_SetConfig+0x2fc>)
 8006f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f78:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f7c:	2b40      	cmp	r3, #64	; 0x40
 8006f7e:	d00f      	beq.n	8006fa0 <UART_SetConfig+0x1bc>
 8006f80:	2b40      	cmp	r3, #64	; 0x40
 8006f82:	d802      	bhi.n	8006f8a <UART_SetConfig+0x1a6>
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d005      	beq.n	8006f94 <UART_SetConfig+0x1b0>
 8006f88:	e010      	b.n	8006fac <UART_SetConfig+0x1c8>
 8006f8a:	2b80      	cmp	r3, #128	; 0x80
 8006f8c:	d005      	beq.n	8006f9a <UART_SetConfig+0x1b6>
 8006f8e:	2bc0      	cmp	r3, #192	; 0xc0
 8006f90:	d009      	beq.n	8006fa6 <UART_SetConfig+0x1c2>
 8006f92:	e00b      	b.n	8006fac <UART_SetConfig+0x1c8>
 8006f94:	2300      	movs	r3, #0
 8006f96:	77fb      	strb	r3, [r7, #31]
 8006f98:	e0cb      	b.n	8007132 <UART_SetConfig+0x34e>
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	77fb      	strb	r3, [r7, #31]
 8006f9e:	e0c8      	b.n	8007132 <UART_SetConfig+0x34e>
 8006fa0:	2304      	movs	r3, #4
 8006fa2:	77fb      	strb	r3, [r7, #31]
 8006fa4:	e0c5      	b.n	8007132 <UART_SetConfig+0x34e>
 8006fa6:	2308      	movs	r3, #8
 8006fa8:	77fb      	strb	r3, [r7, #31]
 8006faa:	e0c2      	b.n	8007132 <UART_SetConfig+0x34e>
 8006fac:	2310      	movs	r3, #16
 8006fae:	77fb      	strb	r3, [r7, #31]
 8006fb0:	bf00      	nop
 8006fb2:	e0be      	b.n	8007132 <UART_SetConfig+0x34e>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a4d      	ldr	r2, [pc, #308]	; (80070f0 <UART_SetConfig+0x30c>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d124      	bne.n	8007008 <UART_SetConfig+0x224>
 8006fbe:	4b48      	ldr	r3, [pc, #288]	; (80070e0 <UART_SetConfig+0x2fc>)
 8006fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fcc:	d012      	beq.n	8006ff4 <UART_SetConfig+0x210>
 8006fce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fd2:	d802      	bhi.n	8006fda <UART_SetConfig+0x1f6>
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d007      	beq.n	8006fe8 <UART_SetConfig+0x204>
 8006fd8:	e012      	b.n	8007000 <UART_SetConfig+0x21c>
 8006fda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fde:	d006      	beq.n	8006fee <UART_SetConfig+0x20a>
 8006fe0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fe4:	d009      	beq.n	8006ffa <UART_SetConfig+0x216>
 8006fe6:	e00b      	b.n	8007000 <UART_SetConfig+0x21c>
 8006fe8:	2300      	movs	r3, #0
 8006fea:	77fb      	strb	r3, [r7, #31]
 8006fec:	e0a1      	b.n	8007132 <UART_SetConfig+0x34e>
 8006fee:	2302      	movs	r3, #2
 8006ff0:	77fb      	strb	r3, [r7, #31]
 8006ff2:	e09e      	b.n	8007132 <UART_SetConfig+0x34e>
 8006ff4:	2304      	movs	r3, #4
 8006ff6:	77fb      	strb	r3, [r7, #31]
 8006ff8:	e09b      	b.n	8007132 <UART_SetConfig+0x34e>
 8006ffa:	2308      	movs	r3, #8
 8006ffc:	77fb      	strb	r3, [r7, #31]
 8006ffe:	e098      	b.n	8007132 <UART_SetConfig+0x34e>
 8007000:	2310      	movs	r3, #16
 8007002:	77fb      	strb	r3, [r7, #31]
 8007004:	bf00      	nop
 8007006:	e094      	b.n	8007132 <UART_SetConfig+0x34e>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a39      	ldr	r2, [pc, #228]	; (80070f4 <UART_SetConfig+0x310>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d124      	bne.n	800705c <UART_SetConfig+0x278>
 8007012:	4b33      	ldr	r3, [pc, #204]	; (80070e0 <UART_SetConfig+0x2fc>)
 8007014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007018:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800701c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007020:	d012      	beq.n	8007048 <UART_SetConfig+0x264>
 8007022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007026:	d802      	bhi.n	800702e <UART_SetConfig+0x24a>
 8007028:	2b00      	cmp	r3, #0
 800702a:	d007      	beq.n	800703c <UART_SetConfig+0x258>
 800702c:	e012      	b.n	8007054 <UART_SetConfig+0x270>
 800702e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007032:	d006      	beq.n	8007042 <UART_SetConfig+0x25e>
 8007034:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007038:	d009      	beq.n	800704e <UART_SetConfig+0x26a>
 800703a:	e00b      	b.n	8007054 <UART_SetConfig+0x270>
 800703c:	2301      	movs	r3, #1
 800703e:	77fb      	strb	r3, [r7, #31]
 8007040:	e077      	b.n	8007132 <UART_SetConfig+0x34e>
 8007042:	2302      	movs	r3, #2
 8007044:	77fb      	strb	r3, [r7, #31]
 8007046:	e074      	b.n	8007132 <UART_SetConfig+0x34e>
 8007048:	2304      	movs	r3, #4
 800704a:	77fb      	strb	r3, [r7, #31]
 800704c:	e071      	b.n	8007132 <UART_SetConfig+0x34e>
 800704e:	2308      	movs	r3, #8
 8007050:	77fb      	strb	r3, [r7, #31]
 8007052:	e06e      	b.n	8007132 <UART_SetConfig+0x34e>
 8007054:	2310      	movs	r3, #16
 8007056:	77fb      	strb	r3, [r7, #31]
 8007058:	bf00      	nop
 800705a:	e06a      	b.n	8007132 <UART_SetConfig+0x34e>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a25      	ldr	r2, [pc, #148]	; (80070f8 <UART_SetConfig+0x314>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d124      	bne.n	80070b0 <UART_SetConfig+0x2cc>
 8007066:	4b1e      	ldr	r3, [pc, #120]	; (80070e0 <UART_SetConfig+0x2fc>)
 8007068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800706c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007074:	d012      	beq.n	800709c <UART_SetConfig+0x2b8>
 8007076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800707a:	d802      	bhi.n	8007082 <UART_SetConfig+0x29e>
 800707c:	2b00      	cmp	r3, #0
 800707e:	d007      	beq.n	8007090 <UART_SetConfig+0x2ac>
 8007080:	e012      	b.n	80070a8 <UART_SetConfig+0x2c4>
 8007082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007086:	d006      	beq.n	8007096 <UART_SetConfig+0x2b2>
 8007088:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800708c:	d009      	beq.n	80070a2 <UART_SetConfig+0x2be>
 800708e:	e00b      	b.n	80070a8 <UART_SetConfig+0x2c4>
 8007090:	2300      	movs	r3, #0
 8007092:	77fb      	strb	r3, [r7, #31]
 8007094:	e04d      	b.n	8007132 <UART_SetConfig+0x34e>
 8007096:	2302      	movs	r3, #2
 8007098:	77fb      	strb	r3, [r7, #31]
 800709a:	e04a      	b.n	8007132 <UART_SetConfig+0x34e>
 800709c:	2304      	movs	r3, #4
 800709e:	77fb      	strb	r3, [r7, #31]
 80070a0:	e047      	b.n	8007132 <UART_SetConfig+0x34e>
 80070a2:	2308      	movs	r3, #8
 80070a4:	77fb      	strb	r3, [r7, #31]
 80070a6:	e044      	b.n	8007132 <UART_SetConfig+0x34e>
 80070a8:	2310      	movs	r3, #16
 80070aa:	77fb      	strb	r3, [r7, #31]
 80070ac:	bf00      	nop
 80070ae:	e040      	b.n	8007132 <UART_SetConfig+0x34e>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a11      	ldr	r2, [pc, #68]	; (80070fc <UART_SetConfig+0x318>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d139      	bne.n	800712e <UART_SetConfig+0x34a>
 80070ba:	4b09      	ldr	r3, [pc, #36]	; (80070e0 <UART_SetConfig+0x2fc>)
 80070bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80070c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070c8:	d027      	beq.n	800711a <UART_SetConfig+0x336>
 80070ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070ce:	d817      	bhi.n	8007100 <UART_SetConfig+0x31c>
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d01c      	beq.n	800710e <UART_SetConfig+0x32a>
 80070d4:	e027      	b.n	8007126 <UART_SetConfig+0x342>
 80070d6:	bf00      	nop
 80070d8:	efff69f3 	.word	0xefff69f3
 80070dc:	40011000 	.word	0x40011000
 80070e0:	40023800 	.word	0x40023800
 80070e4:	40004400 	.word	0x40004400
 80070e8:	40004800 	.word	0x40004800
 80070ec:	40004c00 	.word	0x40004c00
 80070f0:	40005000 	.word	0x40005000
 80070f4:	40011400 	.word	0x40011400
 80070f8:	40007800 	.word	0x40007800
 80070fc:	40007c00 	.word	0x40007c00
 8007100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007104:	d006      	beq.n	8007114 <UART_SetConfig+0x330>
 8007106:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800710a:	d009      	beq.n	8007120 <UART_SetConfig+0x33c>
 800710c:	e00b      	b.n	8007126 <UART_SetConfig+0x342>
 800710e:	2300      	movs	r3, #0
 8007110:	77fb      	strb	r3, [r7, #31]
 8007112:	e00e      	b.n	8007132 <UART_SetConfig+0x34e>
 8007114:	2302      	movs	r3, #2
 8007116:	77fb      	strb	r3, [r7, #31]
 8007118:	e00b      	b.n	8007132 <UART_SetConfig+0x34e>
 800711a:	2304      	movs	r3, #4
 800711c:	77fb      	strb	r3, [r7, #31]
 800711e:	e008      	b.n	8007132 <UART_SetConfig+0x34e>
 8007120:	2308      	movs	r3, #8
 8007122:	77fb      	strb	r3, [r7, #31]
 8007124:	e005      	b.n	8007132 <UART_SetConfig+0x34e>
 8007126:	2310      	movs	r3, #16
 8007128:	77fb      	strb	r3, [r7, #31]
 800712a:	bf00      	nop
 800712c:	e001      	b.n	8007132 <UART_SetConfig+0x34e>
 800712e:	2310      	movs	r3, #16
 8007130:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	69db      	ldr	r3, [r3, #28]
 8007136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800713a:	d17f      	bne.n	800723c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800713c:	7ffb      	ldrb	r3, [r7, #31]
 800713e:	2b08      	cmp	r3, #8
 8007140:	d85c      	bhi.n	80071fc <UART_SetConfig+0x418>
 8007142:	a201      	add	r2, pc, #4	; (adr r2, 8007148 <UART_SetConfig+0x364>)
 8007144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007148:	0800716d 	.word	0x0800716d
 800714c:	0800718d 	.word	0x0800718d
 8007150:	080071ad 	.word	0x080071ad
 8007154:	080071fd 	.word	0x080071fd
 8007158:	080071c5 	.word	0x080071c5
 800715c:	080071fd 	.word	0x080071fd
 8007160:	080071fd 	.word	0x080071fd
 8007164:	080071fd 	.word	0x080071fd
 8007168:	080071e5 	.word	0x080071e5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800716c:	f7fe fbfe 	bl	800596c <HAL_RCC_GetPCLK1Freq>
 8007170:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	005a      	lsls	r2, r3, #1
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	085b      	lsrs	r3, r3, #1
 800717c:	441a      	add	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	fbb2 f3f3 	udiv	r3, r2, r3
 8007186:	b29b      	uxth	r3, r3
 8007188:	61bb      	str	r3, [r7, #24]
        break;
 800718a:	e03a      	b.n	8007202 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800718c:	f7fe fc02 	bl	8005994 <HAL_RCC_GetPCLK2Freq>
 8007190:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	005a      	lsls	r2, r3, #1
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	085b      	lsrs	r3, r3, #1
 800719c:	441a      	add	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	61bb      	str	r3, [r7, #24]
        break;
 80071aa:	e02a      	b.n	8007202 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	085a      	lsrs	r2, r3, #1
 80071b2:	4b5f      	ldr	r3, [pc, #380]	; (8007330 <UART_SetConfig+0x54c>)
 80071b4:	4413      	add	r3, r2
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	6852      	ldr	r2, [r2, #4]
 80071ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80071be:	b29b      	uxth	r3, r3
 80071c0:	61bb      	str	r3, [r7, #24]
        break;
 80071c2:	e01e      	b.n	8007202 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071c4:	f7fe faee 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 80071c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	005a      	lsls	r2, r3, #1
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	085b      	lsrs	r3, r3, #1
 80071d4:	441a      	add	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	fbb2 f3f3 	udiv	r3, r2, r3
 80071de:	b29b      	uxth	r3, r3
 80071e0:	61bb      	str	r3, [r7, #24]
        break;
 80071e2:	e00e      	b.n	8007202 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	085b      	lsrs	r3, r3, #1
 80071ea:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	61bb      	str	r3, [r7, #24]
        break;
 80071fa:	e002      	b.n	8007202 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	75fb      	strb	r3, [r7, #23]
        break;
 8007200:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	2b0f      	cmp	r3, #15
 8007206:	d916      	bls.n	8007236 <UART_SetConfig+0x452>
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800720e:	d212      	bcs.n	8007236 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	b29b      	uxth	r3, r3
 8007214:	f023 030f 	bic.w	r3, r3, #15
 8007218:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	085b      	lsrs	r3, r3, #1
 800721e:	b29b      	uxth	r3, r3
 8007220:	f003 0307 	and.w	r3, r3, #7
 8007224:	b29a      	uxth	r2, r3
 8007226:	897b      	ldrh	r3, [r7, #10]
 8007228:	4313      	orrs	r3, r2
 800722a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	897a      	ldrh	r2, [r7, #10]
 8007232:	60da      	str	r2, [r3, #12]
 8007234:	e070      	b.n	8007318 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	75fb      	strb	r3, [r7, #23]
 800723a:	e06d      	b.n	8007318 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800723c:	7ffb      	ldrb	r3, [r7, #31]
 800723e:	2b08      	cmp	r3, #8
 8007240:	d859      	bhi.n	80072f6 <UART_SetConfig+0x512>
 8007242:	a201      	add	r2, pc, #4	; (adr r2, 8007248 <UART_SetConfig+0x464>)
 8007244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007248:	0800726d 	.word	0x0800726d
 800724c:	0800728b 	.word	0x0800728b
 8007250:	080072a9 	.word	0x080072a9
 8007254:	080072f7 	.word	0x080072f7
 8007258:	080072c1 	.word	0x080072c1
 800725c:	080072f7 	.word	0x080072f7
 8007260:	080072f7 	.word	0x080072f7
 8007264:	080072f7 	.word	0x080072f7
 8007268:	080072df 	.word	0x080072df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800726c:	f7fe fb7e 	bl	800596c <HAL_RCC_GetPCLK1Freq>
 8007270:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	085a      	lsrs	r2, r3, #1
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	441a      	add	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	fbb2 f3f3 	udiv	r3, r2, r3
 8007284:	b29b      	uxth	r3, r3
 8007286:	61bb      	str	r3, [r7, #24]
        break;
 8007288:	e038      	b.n	80072fc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800728a:	f7fe fb83 	bl	8005994 <HAL_RCC_GetPCLK2Freq>
 800728e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	085a      	lsrs	r2, r3, #1
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	441a      	add	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	fbb2 f3f3 	udiv	r3, r2, r3
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	61bb      	str	r3, [r7, #24]
        break;
 80072a6:	e029      	b.n	80072fc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	085a      	lsrs	r2, r3, #1
 80072ae:	4b21      	ldr	r3, [pc, #132]	; (8007334 <UART_SetConfig+0x550>)
 80072b0:	4413      	add	r3, r2
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	6852      	ldr	r2, [r2, #4]
 80072b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	61bb      	str	r3, [r7, #24]
        break;
 80072be:	e01d      	b.n	80072fc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072c0:	f7fe fa70 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 80072c4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	085a      	lsrs	r2, r3, #1
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	441a      	add	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d8:	b29b      	uxth	r3, r3
 80072da:	61bb      	str	r3, [r7, #24]
        break;
 80072dc:	e00e      	b.n	80072fc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	085b      	lsrs	r3, r3, #1
 80072e4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	61bb      	str	r3, [r7, #24]
        break;
 80072f4:	e002      	b.n	80072fc <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	75fb      	strb	r3, [r7, #23]
        break;
 80072fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	2b0f      	cmp	r3, #15
 8007300:	d908      	bls.n	8007314 <UART_SetConfig+0x530>
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007308:	d204      	bcs.n	8007314 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	69ba      	ldr	r2, [r7, #24]
 8007310:	60da      	str	r2, [r3, #12]
 8007312:	e001      	b.n	8007318 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007324:	7dfb      	ldrb	r3, [r7, #23]
}
 8007326:	4618      	mov	r0, r3
 8007328:	3720      	adds	r7, #32
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	01e84800 	.word	0x01e84800
 8007334:	00f42400 	.word	0x00f42400

08007338 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007344:	f003 0301 	and.w	r3, r3, #1
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00a      	beq.n	8007362 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	430a      	orrs	r2, r1
 8007360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007366:	f003 0302 	and.w	r3, r3, #2
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00a      	beq.n	8007384 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	430a      	orrs	r2, r1
 8007382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007388:	f003 0304 	and.w	r3, r3, #4
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00a      	beq.n	80073a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073aa:	f003 0308 	and.w	r3, r3, #8
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00a      	beq.n	80073c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	430a      	orrs	r2, r1
 80073c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	f003 0310 	and.w	r3, r3, #16
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00a      	beq.n	80073ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ee:	f003 0320 	and.w	r3, r3, #32
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00a      	beq.n	800740c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	430a      	orrs	r2, r1
 800740a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007414:	2b00      	cmp	r3, #0
 8007416:	d01a      	beq.n	800744e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	430a      	orrs	r2, r1
 800742c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007432:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007436:	d10a      	bne.n	800744e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	430a      	orrs	r2, r1
 800744c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00a      	beq.n	8007470 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	430a      	orrs	r2, r1
 800746e:	605a      	str	r2, [r3, #4]
  }
}
 8007470:	bf00      	nop
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af02      	add	r7, sp, #8
 8007482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800748a:	f7fa fcdd 	bl	8001e48 <HAL_GetTick>
 800748e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0308 	and.w	r3, r3, #8
 800749a:	2b08      	cmp	r3, #8
 800749c:	d10e      	bne.n	80074bc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800749e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074a2:	9300      	str	r3, [sp, #0]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f814 	bl	80074da <UART_WaitOnFlagUntilTimeout>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d001      	beq.n	80074bc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074b8:	2303      	movs	r3, #3
 80074ba:	e00a      	b.n	80074d2 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2220      	movs	r2, #32
 80074c0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2220      	movs	r2, #32
 80074c6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b084      	sub	sp, #16
 80074de:	af00      	add	r7, sp, #0
 80074e0:	60f8      	str	r0, [r7, #12]
 80074e2:	60b9      	str	r1, [r7, #8]
 80074e4:	603b      	str	r3, [r7, #0]
 80074e6:	4613      	mov	r3, r2
 80074e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074ea:	e05d      	b.n	80075a8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f2:	d059      	beq.n	80075a8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074f4:	f7fa fca8 	bl	8001e48 <HAL_GetTick>
 80074f8:	4602      	mov	r2, r0
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	69ba      	ldr	r2, [r7, #24]
 8007500:	429a      	cmp	r2, r3
 8007502:	d302      	bcc.n	800750a <UART_WaitOnFlagUntilTimeout+0x30>
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d11b      	bne.n	8007542 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007518:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	689a      	ldr	r2, [r3, #8]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f022 0201 	bic.w	r2, r2, #1
 8007528:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2220      	movs	r2, #32
 800752e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2220      	movs	r2, #32
 8007534:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e042      	b.n	80075c8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0304 	and.w	r3, r3, #4
 800754c:	2b00      	cmp	r3, #0
 800754e:	d02b      	beq.n	80075a8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	69db      	ldr	r3, [r3, #28]
 8007556:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800755a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800755e:	d123      	bne.n	80075a8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007568:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007578:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	689a      	ldr	r2, [r3, #8]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f022 0201 	bic.w	r2, r2, #1
 8007588:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2220      	movs	r2, #32
 800758e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2220      	movs	r2, #32
 8007594:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2220      	movs	r2, #32
 800759a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80075a4:	2303      	movs	r3, #3
 80075a6:	e00f      	b.n	80075c8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	69da      	ldr	r2, [r3, #28]
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	4013      	ands	r3, r2
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	bf0c      	ite	eq
 80075b8:	2301      	moveq	r3, #1
 80075ba:	2300      	movne	r3, #0
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	461a      	mov	r2, r3
 80075c0:	79fb      	ldrb	r3, [r7, #7]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d092      	beq.n	80074ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <__errno>:
 80075d0:	4b01      	ldr	r3, [pc, #4]	; (80075d8 <__errno+0x8>)
 80075d2:	6818      	ldr	r0, [r3, #0]
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	20000010 	.word	0x20000010

080075dc <__libc_init_array>:
 80075dc:	b570      	push	{r4, r5, r6, lr}
 80075de:	4e0d      	ldr	r6, [pc, #52]	; (8007614 <__libc_init_array+0x38>)
 80075e0:	4c0d      	ldr	r4, [pc, #52]	; (8007618 <__libc_init_array+0x3c>)
 80075e2:	1ba4      	subs	r4, r4, r6
 80075e4:	10a4      	asrs	r4, r4, #2
 80075e6:	2500      	movs	r5, #0
 80075e8:	42a5      	cmp	r5, r4
 80075ea:	d109      	bne.n	8007600 <__libc_init_array+0x24>
 80075ec:	4e0b      	ldr	r6, [pc, #44]	; (800761c <__libc_init_array+0x40>)
 80075ee:	4c0c      	ldr	r4, [pc, #48]	; (8007620 <__libc_init_array+0x44>)
 80075f0:	f000 fc2e 	bl	8007e50 <_init>
 80075f4:	1ba4      	subs	r4, r4, r6
 80075f6:	10a4      	asrs	r4, r4, #2
 80075f8:	2500      	movs	r5, #0
 80075fa:	42a5      	cmp	r5, r4
 80075fc:	d105      	bne.n	800760a <__libc_init_array+0x2e>
 80075fe:	bd70      	pop	{r4, r5, r6, pc}
 8007600:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007604:	4798      	blx	r3
 8007606:	3501      	adds	r5, #1
 8007608:	e7ee      	b.n	80075e8 <__libc_init_array+0xc>
 800760a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800760e:	4798      	blx	r3
 8007610:	3501      	adds	r5, #1
 8007612:	e7f2      	b.n	80075fa <__libc_init_array+0x1e>
 8007614:	08007ed4 	.word	0x08007ed4
 8007618:	08007ed4 	.word	0x08007ed4
 800761c:	08007ed4 	.word	0x08007ed4
 8007620:	08007ed8 	.word	0x08007ed8

08007624 <malloc>:
 8007624:	4b02      	ldr	r3, [pc, #8]	; (8007630 <malloc+0xc>)
 8007626:	4601      	mov	r1, r0
 8007628:	6818      	ldr	r0, [r3, #0]
 800762a:	f000 b859 	b.w	80076e0 <_malloc_r>
 800762e:	bf00      	nop
 8007630:	20000010 	.word	0x20000010

08007634 <memset>:
 8007634:	4402      	add	r2, r0
 8007636:	4603      	mov	r3, r0
 8007638:	4293      	cmp	r3, r2
 800763a:	d100      	bne.n	800763e <memset+0xa>
 800763c:	4770      	bx	lr
 800763e:	f803 1b01 	strb.w	r1, [r3], #1
 8007642:	e7f9      	b.n	8007638 <memset+0x4>

08007644 <_free_r>:
 8007644:	b538      	push	{r3, r4, r5, lr}
 8007646:	4605      	mov	r5, r0
 8007648:	2900      	cmp	r1, #0
 800764a:	d045      	beq.n	80076d8 <_free_r+0x94>
 800764c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007650:	1f0c      	subs	r4, r1, #4
 8007652:	2b00      	cmp	r3, #0
 8007654:	bfb8      	it	lt
 8007656:	18e4      	addlt	r4, r4, r3
 8007658:	f000 f8cc 	bl	80077f4 <__malloc_lock>
 800765c:	4a1f      	ldr	r2, [pc, #124]	; (80076dc <_free_r+0x98>)
 800765e:	6813      	ldr	r3, [r2, #0]
 8007660:	4610      	mov	r0, r2
 8007662:	b933      	cbnz	r3, 8007672 <_free_r+0x2e>
 8007664:	6063      	str	r3, [r4, #4]
 8007666:	6014      	str	r4, [r2, #0]
 8007668:	4628      	mov	r0, r5
 800766a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800766e:	f000 b8c2 	b.w	80077f6 <__malloc_unlock>
 8007672:	42a3      	cmp	r3, r4
 8007674:	d90c      	bls.n	8007690 <_free_r+0x4c>
 8007676:	6821      	ldr	r1, [r4, #0]
 8007678:	1862      	adds	r2, r4, r1
 800767a:	4293      	cmp	r3, r2
 800767c:	bf04      	itt	eq
 800767e:	681a      	ldreq	r2, [r3, #0]
 8007680:	685b      	ldreq	r3, [r3, #4]
 8007682:	6063      	str	r3, [r4, #4]
 8007684:	bf04      	itt	eq
 8007686:	1852      	addeq	r2, r2, r1
 8007688:	6022      	streq	r2, [r4, #0]
 800768a:	6004      	str	r4, [r0, #0]
 800768c:	e7ec      	b.n	8007668 <_free_r+0x24>
 800768e:	4613      	mov	r3, r2
 8007690:	685a      	ldr	r2, [r3, #4]
 8007692:	b10a      	cbz	r2, 8007698 <_free_r+0x54>
 8007694:	42a2      	cmp	r2, r4
 8007696:	d9fa      	bls.n	800768e <_free_r+0x4a>
 8007698:	6819      	ldr	r1, [r3, #0]
 800769a:	1858      	adds	r0, r3, r1
 800769c:	42a0      	cmp	r0, r4
 800769e:	d10b      	bne.n	80076b8 <_free_r+0x74>
 80076a0:	6820      	ldr	r0, [r4, #0]
 80076a2:	4401      	add	r1, r0
 80076a4:	1858      	adds	r0, r3, r1
 80076a6:	4282      	cmp	r2, r0
 80076a8:	6019      	str	r1, [r3, #0]
 80076aa:	d1dd      	bne.n	8007668 <_free_r+0x24>
 80076ac:	6810      	ldr	r0, [r2, #0]
 80076ae:	6852      	ldr	r2, [r2, #4]
 80076b0:	605a      	str	r2, [r3, #4]
 80076b2:	4401      	add	r1, r0
 80076b4:	6019      	str	r1, [r3, #0]
 80076b6:	e7d7      	b.n	8007668 <_free_r+0x24>
 80076b8:	d902      	bls.n	80076c0 <_free_r+0x7c>
 80076ba:	230c      	movs	r3, #12
 80076bc:	602b      	str	r3, [r5, #0]
 80076be:	e7d3      	b.n	8007668 <_free_r+0x24>
 80076c0:	6820      	ldr	r0, [r4, #0]
 80076c2:	1821      	adds	r1, r4, r0
 80076c4:	428a      	cmp	r2, r1
 80076c6:	bf04      	itt	eq
 80076c8:	6811      	ldreq	r1, [r2, #0]
 80076ca:	6852      	ldreq	r2, [r2, #4]
 80076cc:	6062      	str	r2, [r4, #4]
 80076ce:	bf04      	itt	eq
 80076d0:	1809      	addeq	r1, r1, r0
 80076d2:	6021      	streq	r1, [r4, #0]
 80076d4:	605c      	str	r4, [r3, #4]
 80076d6:	e7c7      	b.n	8007668 <_free_r+0x24>
 80076d8:	bd38      	pop	{r3, r4, r5, pc}
 80076da:	bf00      	nop
 80076dc:	200000a0 	.word	0x200000a0

080076e0 <_malloc_r>:
 80076e0:	b570      	push	{r4, r5, r6, lr}
 80076e2:	1ccd      	adds	r5, r1, #3
 80076e4:	f025 0503 	bic.w	r5, r5, #3
 80076e8:	3508      	adds	r5, #8
 80076ea:	2d0c      	cmp	r5, #12
 80076ec:	bf38      	it	cc
 80076ee:	250c      	movcc	r5, #12
 80076f0:	2d00      	cmp	r5, #0
 80076f2:	4606      	mov	r6, r0
 80076f4:	db01      	blt.n	80076fa <_malloc_r+0x1a>
 80076f6:	42a9      	cmp	r1, r5
 80076f8:	d903      	bls.n	8007702 <_malloc_r+0x22>
 80076fa:	230c      	movs	r3, #12
 80076fc:	6033      	str	r3, [r6, #0]
 80076fe:	2000      	movs	r0, #0
 8007700:	bd70      	pop	{r4, r5, r6, pc}
 8007702:	f000 f877 	bl	80077f4 <__malloc_lock>
 8007706:	4a21      	ldr	r2, [pc, #132]	; (800778c <_malloc_r+0xac>)
 8007708:	6814      	ldr	r4, [r2, #0]
 800770a:	4621      	mov	r1, r4
 800770c:	b991      	cbnz	r1, 8007734 <_malloc_r+0x54>
 800770e:	4c20      	ldr	r4, [pc, #128]	; (8007790 <_malloc_r+0xb0>)
 8007710:	6823      	ldr	r3, [r4, #0]
 8007712:	b91b      	cbnz	r3, 800771c <_malloc_r+0x3c>
 8007714:	4630      	mov	r0, r6
 8007716:	f000 f83d 	bl	8007794 <_sbrk_r>
 800771a:	6020      	str	r0, [r4, #0]
 800771c:	4629      	mov	r1, r5
 800771e:	4630      	mov	r0, r6
 8007720:	f000 f838 	bl	8007794 <_sbrk_r>
 8007724:	1c43      	adds	r3, r0, #1
 8007726:	d124      	bne.n	8007772 <_malloc_r+0x92>
 8007728:	230c      	movs	r3, #12
 800772a:	6033      	str	r3, [r6, #0]
 800772c:	4630      	mov	r0, r6
 800772e:	f000 f862 	bl	80077f6 <__malloc_unlock>
 8007732:	e7e4      	b.n	80076fe <_malloc_r+0x1e>
 8007734:	680b      	ldr	r3, [r1, #0]
 8007736:	1b5b      	subs	r3, r3, r5
 8007738:	d418      	bmi.n	800776c <_malloc_r+0x8c>
 800773a:	2b0b      	cmp	r3, #11
 800773c:	d90f      	bls.n	800775e <_malloc_r+0x7e>
 800773e:	600b      	str	r3, [r1, #0]
 8007740:	50cd      	str	r5, [r1, r3]
 8007742:	18cc      	adds	r4, r1, r3
 8007744:	4630      	mov	r0, r6
 8007746:	f000 f856 	bl	80077f6 <__malloc_unlock>
 800774a:	f104 000b 	add.w	r0, r4, #11
 800774e:	1d23      	adds	r3, r4, #4
 8007750:	f020 0007 	bic.w	r0, r0, #7
 8007754:	1ac3      	subs	r3, r0, r3
 8007756:	d0d3      	beq.n	8007700 <_malloc_r+0x20>
 8007758:	425a      	negs	r2, r3
 800775a:	50e2      	str	r2, [r4, r3]
 800775c:	e7d0      	b.n	8007700 <_malloc_r+0x20>
 800775e:	428c      	cmp	r4, r1
 8007760:	684b      	ldr	r3, [r1, #4]
 8007762:	bf16      	itet	ne
 8007764:	6063      	strne	r3, [r4, #4]
 8007766:	6013      	streq	r3, [r2, #0]
 8007768:	460c      	movne	r4, r1
 800776a:	e7eb      	b.n	8007744 <_malloc_r+0x64>
 800776c:	460c      	mov	r4, r1
 800776e:	6849      	ldr	r1, [r1, #4]
 8007770:	e7cc      	b.n	800770c <_malloc_r+0x2c>
 8007772:	1cc4      	adds	r4, r0, #3
 8007774:	f024 0403 	bic.w	r4, r4, #3
 8007778:	42a0      	cmp	r0, r4
 800777a:	d005      	beq.n	8007788 <_malloc_r+0xa8>
 800777c:	1a21      	subs	r1, r4, r0
 800777e:	4630      	mov	r0, r6
 8007780:	f000 f808 	bl	8007794 <_sbrk_r>
 8007784:	3001      	adds	r0, #1
 8007786:	d0cf      	beq.n	8007728 <_malloc_r+0x48>
 8007788:	6025      	str	r5, [r4, #0]
 800778a:	e7db      	b.n	8007744 <_malloc_r+0x64>
 800778c:	200000a0 	.word	0x200000a0
 8007790:	200000a4 	.word	0x200000a4

08007794 <_sbrk_r>:
 8007794:	b538      	push	{r3, r4, r5, lr}
 8007796:	4c06      	ldr	r4, [pc, #24]	; (80077b0 <_sbrk_r+0x1c>)
 8007798:	2300      	movs	r3, #0
 800779a:	4605      	mov	r5, r0
 800779c:	4608      	mov	r0, r1
 800779e:	6023      	str	r3, [r4, #0]
 80077a0:	f7fa fa8c 	bl	8001cbc <_sbrk>
 80077a4:	1c43      	adds	r3, r0, #1
 80077a6:	d102      	bne.n	80077ae <_sbrk_r+0x1a>
 80077a8:	6823      	ldr	r3, [r4, #0]
 80077aa:	b103      	cbz	r3, 80077ae <_sbrk_r+0x1a>
 80077ac:	602b      	str	r3, [r5, #0]
 80077ae:	bd38      	pop	{r3, r4, r5, pc}
 80077b0:	2000039c 	.word	0x2000039c

080077b4 <siprintf>:
 80077b4:	b40e      	push	{r1, r2, r3}
 80077b6:	b500      	push	{lr}
 80077b8:	b09c      	sub	sp, #112	; 0x70
 80077ba:	ab1d      	add	r3, sp, #116	; 0x74
 80077bc:	9002      	str	r0, [sp, #8]
 80077be:	9006      	str	r0, [sp, #24]
 80077c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80077c4:	4809      	ldr	r0, [pc, #36]	; (80077ec <siprintf+0x38>)
 80077c6:	9107      	str	r1, [sp, #28]
 80077c8:	9104      	str	r1, [sp, #16]
 80077ca:	4909      	ldr	r1, [pc, #36]	; (80077f0 <siprintf+0x3c>)
 80077cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80077d0:	9105      	str	r1, [sp, #20]
 80077d2:	6800      	ldr	r0, [r0, #0]
 80077d4:	9301      	str	r3, [sp, #4]
 80077d6:	a902      	add	r1, sp, #8
 80077d8:	f000 f868 	bl	80078ac <_svfiprintf_r>
 80077dc:	9b02      	ldr	r3, [sp, #8]
 80077de:	2200      	movs	r2, #0
 80077e0:	701a      	strb	r2, [r3, #0]
 80077e2:	b01c      	add	sp, #112	; 0x70
 80077e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80077e8:	b003      	add	sp, #12
 80077ea:	4770      	bx	lr
 80077ec:	20000010 	.word	0x20000010
 80077f0:	ffff0208 	.word	0xffff0208

080077f4 <__malloc_lock>:
 80077f4:	4770      	bx	lr

080077f6 <__malloc_unlock>:
 80077f6:	4770      	bx	lr

080077f8 <__ssputs_r>:
 80077f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077fc:	688e      	ldr	r6, [r1, #8]
 80077fe:	429e      	cmp	r6, r3
 8007800:	4682      	mov	sl, r0
 8007802:	460c      	mov	r4, r1
 8007804:	4690      	mov	r8, r2
 8007806:	4699      	mov	r9, r3
 8007808:	d837      	bhi.n	800787a <__ssputs_r+0x82>
 800780a:	898a      	ldrh	r2, [r1, #12]
 800780c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007810:	d031      	beq.n	8007876 <__ssputs_r+0x7e>
 8007812:	6825      	ldr	r5, [r4, #0]
 8007814:	6909      	ldr	r1, [r1, #16]
 8007816:	1a6f      	subs	r7, r5, r1
 8007818:	6965      	ldr	r5, [r4, #20]
 800781a:	2302      	movs	r3, #2
 800781c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007820:	fb95 f5f3 	sdiv	r5, r5, r3
 8007824:	f109 0301 	add.w	r3, r9, #1
 8007828:	443b      	add	r3, r7
 800782a:	429d      	cmp	r5, r3
 800782c:	bf38      	it	cc
 800782e:	461d      	movcc	r5, r3
 8007830:	0553      	lsls	r3, r2, #21
 8007832:	d530      	bpl.n	8007896 <__ssputs_r+0x9e>
 8007834:	4629      	mov	r1, r5
 8007836:	f7ff ff53 	bl	80076e0 <_malloc_r>
 800783a:	4606      	mov	r6, r0
 800783c:	b950      	cbnz	r0, 8007854 <__ssputs_r+0x5c>
 800783e:	230c      	movs	r3, #12
 8007840:	f8ca 3000 	str.w	r3, [sl]
 8007844:	89a3      	ldrh	r3, [r4, #12]
 8007846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800784a:	81a3      	strh	r3, [r4, #12]
 800784c:	f04f 30ff 	mov.w	r0, #4294967295
 8007850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007854:	463a      	mov	r2, r7
 8007856:	6921      	ldr	r1, [r4, #16]
 8007858:	f000 faa8 	bl	8007dac <memcpy>
 800785c:	89a3      	ldrh	r3, [r4, #12]
 800785e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007866:	81a3      	strh	r3, [r4, #12]
 8007868:	6126      	str	r6, [r4, #16]
 800786a:	6165      	str	r5, [r4, #20]
 800786c:	443e      	add	r6, r7
 800786e:	1bed      	subs	r5, r5, r7
 8007870:	6026      	str	r6, [r4, #0]
 8007872:	60a5      	str	r5, [r4, #8]
 8007874:	464e      	mov	r6, r9
 8007876:	454e      	cmp	r6, r9
 8007878:	d900      	bls.n	800787c <__ssputs_r+0x84>
 800787a:	464e      	mov	r6, r9
 800787c:	4632      	mov	r2, r6
 800787e:	4641      	mov	r1, r8
 8007880:	6820      	ldr	r0, [r4, #0]
 8007882:	f000 fa9e 	bl	8007dc2 <memmove>
 8007886:	68a3      	ldr	r3, [r4, #8]
 8007888:	1b9b      	subs	r3, r3, r6
 800788a:	60a3      	str	r3, [r4, #8]
 800788c:	6823      	ldr	r3, [r4, #0]
 800788e:	441e      	add	r6, r3
 8007890:	6026      	str	r6, [r4, #0]
 8007892:	2000      	movs	r0, #0
 8007894:	e7dc      	b.n	8007850 <__ssputs_r+0x58>
 8007896:	462a      	mov	r2, r5
 8007898:	f000 faac 	bl	8007df4 <_realloc_r>
 800789c:	4606      	mov	r6, r0
 800789e:	2800      	cmp	r0, #0
 80078a0:	d1e2      	bne.n	8007868 <__ssputs_r+0x70>
 80078a2:	6921      	ldr	r1, [r4, #16]
 80078a4:	4650      	mov	r0, sl
 80078a6:	f7ff fecd 	bl	8007644 <_free_r>
 80078aa:	e7c8      	b.n	800783e <__ssputs_r+0x46>

080078ac <_svfiprintf_r>:
 80078ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b0:	461d      	mov	r5, r3
 80078b2:	898b      	ldrh	r3, [r1, #12]
 80078b4:	061f      	lsls	r7, r3, #24
 80078b6:	b09d      	sub	sp, #116	; 0x74
 80078b8:	4680      	mov	r8, r0
 80078ba:	460c      	mov	r4, r1
 80078bc:	4616      	mov	r6, r2
 80078be:	d50f      	bpl.n	80078e0 <_svfiprintf_r+0x34>
 80078c0:	690b      	ldr	r3, [r1, #16]
 80078c2:	b96b      	cbnz	r3, 80078e0 <_svfiprintf_r+0x34>
 80078c4:	2140      	movs	r1, #64	; 0x40
 80078c6:	f7ff ff0b 	bl	80076e0 <_malloc_r>
 80078ca:	6020      	str	r0, [r4, #0]
 80078cc:	6120      	str	r0, [r4, #16]
 80078ce:	b928      	cbnz	r0, 80078dc <_svfiprintf_r+0x30>
 80078d0:	230c      	movs	r3, #12
 80078d2:	f8c8 3000 	str.w	r3, [r8]
 80078d6:	f04f 30ff 	mov.w	r0, #4294967295
 80078da:	e0c8      	b.n	8007a6e <_svfiprintf_r+0x1c2>
 80078dc:	2340      	movs	r3, #64	; 0x40
 80078de:	6163      	str	r3, [r4, #20]
 80078e0:	2300      	movs	r3, #0
 80078e2:	9309      	str	r3, [sp, #36]	; 0x24
 80078e4:	2320      	movs	r3, #32
 80078e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078ea:	2330      	movs	r3, #48	; 0x30
 80078ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078f0:	9503      	str	r5, [sp, #12]
 80078f2:	f04f 0b01 	mov.w	fp, #1
 80078f6:	4637      	mov	r7, r6
 80078f8:	463d      	mov	r5, r7
 80078fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80078fe:	b10b      	cbz	r3, 8007904 <_svfiprintf_r+0x58>
 8007900:	2b25      	cmp	r3, #37	; 0x25
 8007902:	d13e      	bne.n	8007982 <_svfiprintf_r+0xd6>
 8007904:	ebb7 0a06 	subs.w	sl, r7, r6
 8007908:	d00b      	beq.n	8007922 <_svfiprintf_r+0x76>
 800790a:	4653      	mov	r3, sl
 800790c:	4632      	mov	r2, r6
 800790e:	4621      	mov	r1, r4
 8007910:	4640      	mov	r0, r8
 8007912:	f7ff ff71 	bl	80077f8 <__ssputs_r>
 8007916:	3001      	adds	r0, #1
 8007918:	f000 80a4 	beq.w	8007a64 <_svfiprintf_r+0x1b8>
 800791c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800791e:	4453      	add	r3, sl
 8007920:	9309      	str	r3, [sp, #36]	; 0x24
 8007922:	783b      	ldrb	r3, [r7, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	f000 809d 	beq.w	8007a64 <_svfiprintf_r+0x1b8>
 800792a:	2300      	movs	r3, #0
 800792c:	f04f 32ff 	mov.w	r2, #4294967295
 8007930:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007934:	9304      	str	r3, [sp, #16]
 8007936:	9307      	str	r3, [sp, #28]
 8007938:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800793c:	931a      	str	r3, [sp, #104]	; 0x68
 800793e:	462f      	mov	r7, r5
 8007940:	2205      	movs	r2, #5
 8007942:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007946:	4850      	ldr	r0, [pc, #320]	; (8007a88 <_svfiprintf_r+0x1dc>)
 8007948:	f7f8 fc72 	bl	8000230 <memchr>
 800794c:	9b04      	ldr	r3, [sp, #16]
 800794e:	b9d0      	cbnz	r0, 8007986 <_svfiprintf_r+0xda>
 8007950:	06d9      	lsls	r1, r3, #27
 8007952:	bf44      	itt	mi
 8007954:	2220      	movmi	r2, #32
 8007956:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800795a:	071a      	lsls	r2, r3, #28
 800795c:	bf44      	itt	mi
 800795e:	222b      	movmi	r2, #43	; 0x2b
 8007960:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007964:	782a      	ldrb	r2, [r5, #0]
 8007966:	2a2a      	cmp	r2, #42	; 0x2a
 8007968:	d015      	beq.n	8007996 <_svfiprintf_r+0xea>
 800796a:	9a07      	ldr	r2, [sp, #28]
 800796c:	462f      	mov	r7, r5
 800796e:	2000      	movs	r0, #0
 8007970:	250a      	movs	r5, #10
 8007972:	4639      	mov	r1, r7
 8007974:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007978:	3b30      	subs	r3, #48	; 0x30
 800797a:	2b09      	cmp	r3, #9
 800797c:	d94d      	bls.n	8007a1a <_svfiprintf_r+0x16e>
 800797e:	b1b8      	cbz	r0, 80079b0 <_svfiprintf_r+0x104>
 8007980:	e00f      	b.n	80079a2 <_svfiprintf_r+0xf6>
 8007982:	462f      	mov	r7, r5
 8007984:	e7b8      	b.n	80078f8 <_svfiprintf_r+0x4c>
 8007986:	4a40      	ldr	r2, [pc, #256]	; (8007a88 <_svfiprintf_r+0x1dc>)
 8007988:	1a80      	subs	r0, r0, r2
 800798a:	fa0b f000 	lsl.w	r0, fp, r0
 800798e:	4318      	orrs	r0, r3
 8007990:	9004      	str	r0, [sp, #16]
 8007992:	463d      	mov	r5, r7
 8007994:	e7d3      	b.n	800793e <_svfiprintf_r+0x92>
 8007996:	9a03      	ldr	r2, [sp, #12]
 8007998:	1d11      	adds	r1, r2, #4
 800799a:	6812      	ldr	r2, [r2, #0]
 800799c:	9103      	str	r1, [sp, #12]
 800799e:	2a00      	cmp	r2, #0
 80079a0:	db01      	blt.n	80079a6 <_svfiprintf_r+0xfa>
 80079a2:	9207      	str	r2, [sp, #28]
 80079a4:	e004      	b.n	80079b0 <_svfiprintf_r+0x104>
 80079a6:	4252      	negs	r2, r2
 80079a8:	f043 0302 	orr.w	r3, r3, #2
 80079ac:	9207      	str	r2, [sp, #28]
 80079ae:	9304      	str	r3, [sp, #16]
 80079b0:	783b      	ldrb	r3, [r7, #0]
 80079b2:	2b2e      	cmp	r3, #46	; 0x2e
 80079b4:	d10c      	bne.n	80079d0 <_svfiprintf_r+0x124>
 80079b6:	787b      	ldrb	r3, [r7, #1]
 80079b8:	2b2a      	cmp	r3, #42	; 0x2a
 80079ba:	d133      	bne.n	8007a24 <_svfiprintf_r+0x178>
 80079bc:	9b03      	ldr	r3, [sp, #12]
 80079be:	1d1a      	adds	r2, r3, #4
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	9203      	str	r2, [sp, #12]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	bfb8      	it	lt
 80079c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80079cc:	3702      	adds	r7, #2
 80079ce:	9305      	str	r3, [sp, #20]
 80079d0:	4d2e      	ldr	r5, [pc, #184]	; (8007a8c <_svfiprintf_r+0x1e0>)
 80079d2:	7839      	ldrb	r1, [r7, #0]
 80079d4:	2203      	movs	r2, #3
 80079d6:	4628      	mov	r0, r5
 80079d8:	f7f8 fc2a 	bl	8000230 <memchr>
 80079dc:	b138      	cbz	r0, 80079ee <_svfiprintf_r+0x142>
 80079de:	2340      	movs	r3, #64	; 0x40
 80079e0:	1b40      	subs	r0, r0, r5
 80079e2:	fa03 f000 	lsl.w	r0, r3, r0
 80079e6:	9b04      	ldr	r3, [sp, #16]
 80079e8:	4303      	orrs	r3, r0
 80079ea:	3701      	adds	r7, #1
 80079ec:	9304      	str	r3, [sp, #16]
 80079ee:	7839      	ldrb	r1, [r7, #0]
 80079f0:	4827      	ldr	r0, [pc, #156]	; (8007a90 <_svfiprintf_r+0x1e4>)
 80079f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079f6:	2206      	movs	r2, #6
 80079f8:	1c7e      	adds	r6, r7, #1
 80079fa:	f7f8 fc19 	bl	8000230 <memchr>
 80079fe:	2800      	cmp	r0, #0
 8007a00:	d038      	beq.n	8007a74 <_svfiprintf_r+0x1c8>
 8007a02:	4b24      	ldr	r3, [pc, #144]	; (8007a94 <_svfiprintf_r+0x1e8>)
 8007a04:	bb13      	cbnz	r3, 8007a4c <_svfiprintf_r+0x1a0>
 8007a06:	9b03      	ldr	r3, [sp, #12]
 8007a08:	3307      	adds	r3, #7
 8007a0a:	f023 0307 	bic.w	r3, r3, #7
 8007a0e:	3308      	adds	r3, #8
 8007a10:	9303      	str	r3, [sp, #12]
 8007a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a14:	444b      	add	r3, r9
 8007a16:	9309      	str	r3, [sp, #36]	; 0x24
 8007a18:	e76d      	b.n	80078f6 <_svfiprintf_r+0x4a>
 8007a1a:	fb05 3202 	mla	r2, r5, r2, r3
 8007a1e:	2001      	movs	r0, #1
 8007a20:	460f      	mov	r7, r1
 8007a22:	e7a6      	b.n	8007972 <_svfiprintf_r+0xc6>
 8007a24:	2300      	movs	r3, #0
 8007a26:	3701      	adds	r7, #1
 8007a28:	9305      	str	r3, [sp, #20]
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	250a      	movs	r5, #10
 8007a2e:	4638      	mov	r0, r7
 8007a30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a34:	3a30      	subs	r2, #48	; 0x30
 8007a36:	2a09      	cmp	r2, #9
 8007a38:	d903      	bls.n	8007a42 <_svfiprintf_r+0x196>
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d0c8      	beq.n	80079d0 <_svfiprintf_r+0x124>
 8007a3e:	9105      	str	r1, [sp, #20]
 8007a40:	e7c6      	b.n	80079d0 <_svfiprintf_r+0x124>
 8007a42:	fb05 2101 	mla	r1, r5, r1, r2
 8007a46:	2301      	movs	r3, #1
 8007a48:	4607      	mov	r7, r0
 8007a4a:	e7f0      	b.n	8007a2e <_svfiprintf_r+0x182>
 8007a4c:	ab03      	add	r3, sp, #12
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	4622      	mov	r2, r4
 8007a52:	4b11      	ldr	r3, [pc, #68]	; (8007a98 <_svfiprintf_r+0x1ec>)
 8007a54:	a904      	add	r1, sp, #16
 8007a56:	4640      	mov	r0, r8
 8007a58:	f3af 8000 	nop.w
 8007a5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007a60:	4681      	mov	r9, r0
 8007a62:	d1d6      	bne.n	8007a12 <_svfiprintf_r+0x166>
 8007a64:	89a3      	ldrh	r3, [r4, #12]
 8007a66:	065b      	lsls	r3, r3, #25
 8007a68:	f53f af35 	bmi.w	80078d6 <_svfiprintf_r+0x2a>
 8007a6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a6e:	b01d      	add	sp, #116	; 0x74
 8007a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a74:	ab03      	add	r3, sp, #12
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	4622      	mov	r2, r4
 8007a7a:	4b07      	ldr	r3, [pc, #28]	; (8007a98 <_svfiprintf_r+0x1ec>)
 8007a7c:	a904      	add	r1, sp, #16
 8007a7e:	4640      	mov	r0, r8
 8007a80:	f000 f882 	bl	8007b88 <_printf_i>
 8007a84:	e7ea      	b.n	8007a5c <_svfiprintf_r+0x1b0>
 8007a86:	bf00      	nop
 8007a88:	08007e98 	.word	0x08007e98
 8007a8c:	08007e9e 	.word	0x08007e9e
 8007a90:	08007ea2 	.word	0x08007ea2
 8007a94:	00000000 	.word	0x00000000
 8007a98:	080077f9 	.word	0x080077f9

08007a9c <_printf_common>:
 8007a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa0:	4691      	mov	r9, r2
 8007aa2:	461f      	mov	r7, r3
 8007aa4:	688a      	ldr	r2, [r1, #8]
 8007aa6:	690b      	ldr	r3, [r1, #16]
 8007aa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007aac:	4293      	cmp	r3, r2
 8007aae:	bfb8      	it	lt
 8007ab0:	4613      	movlt	r3, r2
 8007ab2:	f8c9 3000 	str.w	r3, [r9]
 8007ab6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007aba:	4606      	mov	r6, r0
 8007abc:	460c      	mov	r4, r1
 8007abe:	b112      	cbz	r2, 8007ac6 <_printf_common+0x2a>
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	f8c9 3000 	str.w	r3, [r9]
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	0699      	lsls	r1, r3, #26
 8007aca:	bf42      	ittt	mi
 8007acc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007ad0:	3302      	addmi	r3, #2
 8007ad2:	f8c9 3000 	strmi.w	r3, [r9]
 8007ad6:	6825      	ldr	r5, [r4, #0]
 8007ad8:	f015 0506 	ands.w	r5, r5, #6
 8007adc:	d107      	bne.n	8007aee <_printf_common+0x52>
 8007ade:	f104 0a19 	add.w	sl, r4, #25
 8007ae2:	68e3      	ldr	r3, [r4, #12]
 8007ae4:	f8d9 2000 	ldr.w	r2, [r9]
 8007ae8:	1a9b      	subs	r3, r3, r2
 8007aea:	42ab      	cmp	r3, r5
 8007aec:	dc28      	bgt.n	8007b40 <_printf_common+0xa4>
 8007aee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007af2:	6822      	ldr	r2, [r4, #0]
 8007af4:	3300      	adds	r3, #0
 8007af6:	bf18      	it	ne
 8007af8:	2301      	movne	r3, #1
 8007afa:	0692      	lsls	r2, r2, #26
 8007afc:	d42d      	bmi.n	8007b5a <_printf_common+0xbe>
 8007afe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b02:	4639      	mov	r1, r7
 8007b04:	4630      	mov	r0, r6
 8007b06:	47c0      	blx	r8
 8007b08:	3001      	adds	r0, #1
 8007b0a:	d020      	beq.n	8007b4e <_printf_common+0xb2>
 8007b0c:	6823      	ldr	r3, [r4, #0]
 8007b0e:	68e5      	ldr	r5, [r4, #12]
 8007b10:	f8d9 2000 	ldr.w	r2, [r9]
 8007b14:	f003 0306 	and.w	r3, r3, #6
 8007b18:	2b04      	cmp	r3, #4
 8007b1a:	bf08      	it	eq
 8007b1c:	1aad      	subeq	r5, r5, r2
 8007b1e:	68a3      	ldr	r3, [r4, #8]
 8007b20:	6922      	ldr	r2, [r4, #16]
 8007b22:	bf0c      	ite	eq
 8007b24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b28:	2500      	movne	r5, #0
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	bfc4      	itt	gt
 8007b2e:	1a9b      	subgt	r3, r3, r2
 8007b30:	18ed      	addgt	r5, r5, r3
 8007b32:	f04f 0900 	mov.w	r9, #0
 8007b36:	341a      	adds	r4, #26
 8007b38:	454d      	cmp	r5, r9
 8007b3a:	d11a      	bne.n	8007b72 <_printf_common+0xd6>
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	e008      	b.n	8007b52 <_printf_common+0xb6>
 8007b40:	2301      	movs	r3, #1
 8007b42:	4652      	mov	r2, sl
 8007b44:	4639      	mov	r1, r7
 8007b46:	4630      	mov	r0, r6
 8007b48:	47c0      	blx	r8
 8007b4a:	3001      	adds	r0, #1
 8007b4c:	d103      	bne.n	8007b56 <_printf_common+0xba>
 8007b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b56:	3501      	adds	r5, #1
 8007b58:	e7c3      	b.n	8007ae2 <_printf_common+0x46>
 8007b5a:	18e1      	adds	r1, r4, r3
 8007b5c:	1c5a      	adds	r2, r3, #1
 8007b5e:	2030      	movs	r0, #48	; 0x30
 8007b60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b64:	4422      	add	r2, r4
 8007b66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b6e:	3302      	adds	r3, #2
 8007b70:	e7c5      	b.n	8007afe <_printf_common+0x62>
 8007b72:	2301      	movs	r3, #1
 8007b74:	4622      	mov	r2, r4
 8007b76:	4639      	mov	r1, r7
 8007b78:	4630      	mov	r0, r6
 8007b7a:	47c0      	blx	r8
 8007b7c:	3001      	adds	r0, #1
 8007b7e:	d0e6      	beq.n	8007b4e <_printf_common+0xb2>
 8007b80:	f109 0901 	add.w	r9, r9, #1
 8007b84:	e7d8      	b.n	8007b38 <_printf_common+0x9c>
	...

08007b88 <_printf_i>:
 8007b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b8c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007b90:	460c      	mov	r4, r1
 8007b92:	7e09      	ldrb	r1, [r1, #24]
 8007b94:	b085      	sub	sp, #20
 8007b96:	296e      	cmp	r1, #110	; 0x6e
 8007b98:	4617      	mov	r7, r2
 8007b9a:	4606      	mov	r6, r0
 8007b9c:	4698      	mov	r8, r3
 8007b9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ba0:	f000 80b3 	beq.w	8007d0a <_printf_i+0x182>
 8007ba4:	d822      	bhi.n	8007bec <_printf_i+0x64>
 8007ba6:	2963      	cmp	r1, #99	; 0x63
 8007ba8:	d036      	beq.n	8007c18 <_printf_i+0x90>
 8007baa:	d80a      	bhi.n	8007bc2 <_printf_i+0x3a>
 8007bac:	2900      	cmp	r1, #0
 8007bae:	f000 80b9 	beq.w	8007d24 <_printf_i+0x19c>
 8007bb2:	2958      	cmp	r1, #88	; 0x58
 8007bb4:	f000 8083 	beq.w	8007cbe <_printf_i+0x136>
 8007bb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bbc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007bc0:	e032      	b.n	8007c28 <_printf_i+0xa0>
 8007bc2:	2964      	cmp	r1, #100	; 0x64
 8007bc4:	d001      	beq.n	8007bca <_printf_i+0x42>
 8007bc6:	2969      	cmp	r1, #105	; 0x69
 8007bc8:	d1f6      	bne.n	8007bb8 <_printf_i+0x30>
 8007bca:	6820      	ldr	r0, [r4, #0]
 8007bcc:	6813      	ldr	r3, [r2, #0]
 8007bce:	0605      	lsls	r5, r0, #24
 8007bd0:	f103 0104 	add.w	r1, r3, #4
 8007bd4:	d52a      	bpl.n	8007c2c <_printf_i+0xa4>
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6011      	str	r1, [r2, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	da03      	bge.n	8007be6 <_printf_i+0x5e>
 8007bde:	222d      	movs	r2, #45	; 0x2d
 8007be0:	425b      	negs	r3, r3
 8007be2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007be6:	486f      	ldr	r0, [pc, #444]	; (8007da4 <_printf_i+0x21c>)
 8007be8:	220a      	movs	r2, #10
 8007bea:	e039      	b.n	8007c60 <_printf_i+0xd8>
 8007bec:	2973      	cmp	r1, #115	; 0x73
 8007bee:	f000 809d 	beq.w	8007d2c <_printf_i+0x1a4>
 8007bf2:	d808      	bhi.n	8007c06 <_printf_i+0x7e>
 8007bf4:	296f      	cmp	r1, #111	; 0x6f
 8007bf6:	d020      	beq.n	8007c3a <_printf_i+0xb2>
 8007bf8:	2970      	cmp	r1, #112	; 0x70
 8007bfa:	d1dd      	bne.n	8007bb8 <_printf_i+0x30>
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	f043 0320 	orr.w	r3, r3, #32
 8007c02:	6023      	str	r3, [r4, #0]
 8007c04:	e003      	b.n	8007c0e <_printf_i+0x86>
 8007c06:	2975      	cmp	r1, #117	; 0x75
 8007c08:	d017      	beq.n	8007c3a <_printf_i+0xb2>
 8007c0a:	2978      	cmp	r1, #120	; 0x78
 8007c0c:	d1d4      	bne.n	8007bb8 <_printf_i+0x30>
 8007c0e:	2378      	movs	r3, #120	; 0x78
 8007c10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c14:	4864      	ldr	r0, [pc, #400]	; (8007da8 <_printf_i+0x220>)
 8007c16:	e055      	b.n	8007cc4 <_printf_i+0x13c>
 8007c18:	6813      	ldr	r3, [r2, #0]
 8007c1a:	1d19      	adds	r1, r3, #4
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	6011      	str	r1, [r2, #0]
 8007c20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e08c      	b.n	8007d46 <_printf_i+0x1be>
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	6011      	str	r1, [r2, #0]
 8007c30:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c34:	bf18      	it	ne
 8007c36:	b21b      	sxthne	r3, r3
 8007c38:	e7cf      	b.n	8007bda <_printf_i+0x52>
 8007c3a:	6813      	ldr	r3, [r2, #0]
 8007c3c:	6825      	ldr	r5, [r4, #0]
 8007c3e:	1d18      	adds	r0, r3, #4
 8007c40:	6010      	str	r0, [r2, #0]
 8007c42:	0628      	lsls	r0, r5, #24
 8007c44:	d501      	bpl.n	8007c4a <_printf_i+0xc2>
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	e002      	b.n	8007c50 <_printf_i+0xc8>
 8007c4a:	0668      	lsls	r0, r5, #25
 8007c4c:	d5fb      	bpl.n	8007c46 <_printf_i+0xbe>
 8007c4e:	881b      	ldrh	r3, [r3, #0]
 8007c50:	4854      	ldr	r0, [pc, #336]	; (8007da4 <_printf_i+0x21c>)
 8007c52:	296f      	cmp	r1, #111	; 0x6f
 8007c54:	bf14      	ite	ne
 8007c56:	220a      	movne	r2, #10
 8007c58:	2208      	moveq	r2, #8
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c60:	6865      	ldr	r5, [r4, #4]
 8007c62:	60a5      	str	r5, [r4, #8]
 8007c64:	2d00      	cmp	r5, #0
 8007c66:	f2c0 8095 	blt.w	8007d94 <_printf_i+0x20c>
 8007c6a:	6821      	ldr	r1, [r4, #0]
 8007c6c:	f021 0104 	bic.w	r1, r1, #4
 8007c70:	6021      	str	r1, [r4, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d13d      	bne.n	8007cf2 <_printf_i+0x16a>
 8007c76:	2d00      	cmp	r5, #0
 8007c78:	f040 808e 	bne.w	8007d98 <_printf_i+0x210>
 8007c7c:	4665      	mov	r5, ip
 8007c7e:	2a08      	cmp	r2, #8
 8007c80:	d10b      	bne.n	8007c9a <_printf_i+0x112>
 8007c82:	6823      	ldr	r3, [r4, #0]
 8007c84:	07db      	lsls	r3, r3, #31
 8007c86:	d508      	bpl.n	8007c9a <_printf_i+0x112>
 8007c88:	6923      	ldr	r3, [r4, #16]
 8007c8a:	6862      	ldr	r2, [r4, #4]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	bfde      	ittt	le
 8007c90:	2330      	movle	r3, #48	; 0x30
 8007c92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c96:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c9a:	ebac 0305 	sub.w	r3, ip, r5
 8007c9e:	6123      	str	r3, [r4, #16]
 8007ca0:	f8cd 8000 	str.w	r8, [sp]
 8007ca4:	463b      	mov	r3, r7
 8007ca6:	aa03      	add	r2, sp, #12
 8007ca8:	4621      	mov	r1, r4
 8007caa:	4630      	mov	r0, r6
 8007cac:	f7ff fef6 	bl	8007a9c <_printf_common>
 8007cb0:	3001      	adds	r0, #1
 8007cb2:	d14d      	bne.n	8007d50 <_printf_i+0x1c8>
 8007cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb8:	b005      	add	sp, #20
 8007cba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cbe:	4839      	ldr	r0, [pc, #228]	; (8007da4 <_printf_i+0x21c>)
 8007cc0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007cc4:	6813      	ldr	r3, [r2, #0]
 8007cc6:	6821      	ldr	r1, [r4, #0]
 8007cc8:	1d1d      	adds	r5, r3, #4
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	6015      	str	r5, [r2, #0]
 8007cce:	060a      	lsls	r2, r1, #24
 8007cd0:	d50b      	bpl.n	8007cea <_printf_i+0x162>
 8007cd2:	07ca      	lsls	r2, r1, #31
 8007cd4:	bf44      	itt	mi
 8007cd6:	f041 0120 	orrmi.w	r1, r1, #32
 8007cda:	6021      	strmi	r1, [r4, #0]
 8007cdc:	b91b      	cbnz	r3, 8007ce6 <_printf_i+0x15e>
 8007cde:	6822      	ldr	r2, [r4, #0]
 8007ce0:	f022 0220 	bic.w	r2, r2, #32
 8007ce4:	6022      	str	r2, [r4, #0]
 8007ce6:	2210      	movs	r2, #16
 8007ce8:	e7b7      	b.n	8007c5a <_printf_i+0xd2>
 8007cea:	064d      	lsls	r5, r1, #25
 8007cec:	bf48      	it	mi
 8007cee:	b29b      	uxthmi	r3, r3
 8007cf0:	e7ef      	b.n	8007cd2 <_printf_i+0x14a>
 8007cf2:	4665      	mov	r5, ip
 8007cf4:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cf8:	fb02 3311 	mls	r3, r2, r1, r3
 8007cfc:	5cc3      	ldrb	r3, [r0, r3]
 8007cfe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007d02:	460b      	mov	r3, r1
 8007d04:	2900      	cmp	r1, #0
 8007d06:	d1f5      	bne.n	8007cf4 <_printf_i+0x16c>
 8007d08:	e7b9      	b.n	8007c7e <_printf_i+0xf6>
 8007d0a:	6813      	ldr	r3, [r2, #0]
 8007d0c:	6825      	ldr	r5, [r4, #0]
 8007d0e:	6961      	ldr	r1, [r4, #20]
 8007d10:	1d18      	adds	r0, r3, #4
 8007d12:	6010      	str	r0, [r2, #0]
 8007d14:	0628      	lsls	r0, r5, #24
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	d501      	bpl.n	8007d1e <_printf_i+0x196>
 8007d1a:	6019      	str	r1, [r3, #0]
 8007d1c:	e002      	b.n	8007d24 <_printf_i+0x19c>
 8007d1e:	066a      	lsls	r2, r5, #25
 8007d20:	d5fb      	bpl.n	8007d1a <_printf_i+0x192>
 8007d22:	8019      	strh	r1, [r3, #0]
 8007d24:	2300      	movs	r3, #0
 8007d26:	6123      	str	r3, [r4, #16]
 8007d28:	4665      	mov	r5, ip
 8007d2a:	e7b9      	b.n	8007ca0 <_printf_i+0x118>
 8007d2c:	6813      	ldr	r3, [r2, #0]
 8007d2e:	1d19      	adds	r1, r3, #4
 8007d30:	6011      	str	r1, [r2, #0]
 8007d32:	681d      	ldr	r5, [r3, #0]
 8007d34:	6862      	ldr	r2, [r4, #4]
 8007d36:	2100      	movs	r1, #0
 8007d38:	4628      	mov	r0, r5
 8007d3a:	f7f8 fa79 	bl	8000230 <memchr>
 8007d3e:	b108      	cbz	r0, 8007d44 <_printf_i+0x1bc>
 8007d40:	1b40      	subs	r0, r0, r5
 8007d42:	6060      	str	r0, [r4, #4]
 8007d44:	6863      	ldr	r3, [r4, #4]
 8007d46:	6123      	str	r3, [r4, #16]
 8007d48:	2300      	movs	r3, #0
 8007d4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d4e:	e7a7      	b.n	8007ca0 <_printf_i+0x118>
 8007d50:	6923      	ldr	r3, [r4, #16]
 8007d52:	462a      	mov	r2, r5
 8007d54:	4639      	mov	r1, r7
 8007d56:	4630      	mov	r0, r6
 8007d58:	47c0      	blx	r8
 8007d5a:	3001      	adds	r0, #1
 8007d5c:	d0aa      	beq.n	8007cb4 <_printf_i+0x12c>
 8007d5e:	6823      	ldr	r3, [r4, #0]
 8007d60:	079b      	lsls	r3, r3, #30
 8007d62:	d413      	bmi.n	8007d8c <_printf_i+0x204>
 8007d64:	68e0      	ldr	r0, [r4, #12]
 8007d66:	9b03      	ldr	r3, [sp, #12]
 8007d68:	4298      	cmp	r0, r3
 8007d6a:	bfb8      	it	lt
 8007d6c:	4618      	movlt	r0, r3
 8007d6e:	e7a3      	b.n	8007cb8 <_printf_i+0x130>
 8007d70:	2301      	movs	r3, #1
 8007d72:	464a      	mov	r2, r9
 8007d74:	4639      	mov	r1, r7
 8007d76:	4630      	mov	r0, r6
 8007d78:	47c0      	blx	r8
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	d09a      	beq.n	8007cb4 <_printf_i+0x12c>
 8007d7e:	3501      	adds	r5, #1
 8007d80:	68e3      	ldr	r3, [r4, #12]
 8007d82:	9a03      	ldr	r2, [sp, #12]
 8007d84:	1a9b      	subs	r3, r3, r2
 8007d86:	42ab      	cmp	r3, r5
 8007d88:	dcf2      	bgt.n	8007d70 <_printf_i+0x1e8>
 8007d8a:	e7eb      	b.n	8007d64 <_printf_i+0x1dc>
 8007d8c:	2500      	movs	r5, #0
 8007d8e:	f104 0919 	add.w	r9, r4, #25
 8007d92:	e7f5      	b.n	8007d80 <_printf_i+0x1f8>
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d1ac      	bne.n	8007cf2 <_printf_i+0x16a>
 8007d98:	7803      	ldrb	r3, [r0, #0]
 8007d9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d9e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007da2:	e76c      	b.n	8007c7e <_printf_i+0xf6>
 8007da4:	08007ea9 	.word	0x08007ea9
 8007da8:	08007eba 	.word	0x08007eba

08007dac <memcpy>:
 8007dac:	b510      	push	{r4, lr}
 8007dae:	1e43      	subs	r3, r0, #1
 8007db0:	440a      	add	r2, r1
 8007db2:	4291      	cmp	r1, r2
 8007db4:	d100      	bne.n	8007db8 <memcpy+0xc>
 8007db6:	bd10      	pop	{r4, pc}
 8007db8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dc0:	e7f7      	b.n	8007db2 <memcpy+0x6>

08007dc2 <memmove>:
 8007dc2:	4288      	cmp	r0, r1
 8007dc4:	b510      	push	{r4, lr}
 8007dc6:	eb01 0302 	add.w	r3, r1, r2
 8007dca:	d807      	bhi.n	8007ddc <memmove+0x1a>
 8007dcc:	1e42      	subs	r2, r0, #1
 8007dce:	4299      	cmp	r1, r3
 8007dd0:	d00a      	beq.n	8007de8 <memmove+0x26>
 8007dd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dd6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007dda:	e7f8      	b.n	8007dce <memmove+0xc>
 8007ddc:	4283      	cmp	r3, r0
 8007dde:	d9f5      	bls.n	8007dcc <memmove+0xa>
 8007de0:	1881      	adds	r1, r0, r2
 8007de2:	1ad2      	subs	r2, r2, r3
 8007de4:	42d3      	cmn	r3, r2
 8007de6:	d100      	bne.n	8007dea <memmove+0x28>
 8007de8:	bd10      	pop	{r4, pc}
 8007dea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007dee:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007df2:	e7f7      	b.n	8007de4 <memmove+0x22>

08007df4 <_realloc_r>:
 8007df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007df6:	4607      	mov	r7, r0
 8007df8:	4614      	mov	r4, r2
 8007dfa:	460e      	mov	r6, r1
 8007dfc:	b921      	cbnz	r1, 8007e08 <_realloc_r+0x14>
 8007dfe:	4611      	mov	r1, r2
 8007e00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007e04:	f7ff bc6c 	b.w	80076e0 <_malloc_r>
 8007e08:	b922      	cbnz	r2, 8007e14 <_realloc_r+0x20>
 8007e0a:	f7ff fc1b 	bl	8007644 <_free_r>
 8007e0e:	4625      	mov	r5, r4
 8007e10:	4628      	mov	r0, r5
 8007e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e14:	f000 f814 	bl	8007e40 <_malloc_usable_size_r>
 8007e18:	42a0      	cmp	r0, r4
 8007e1a:	d20f      	bcs.n	8007e3c <_realloc_r+0x48>
 8007e1c:	4621      	mov	r1, r4
 8007e1e:	4638      	mov	r0, r7
 8007e20:	f7ff fc5e 	bl	80076e0 <_malloc_r>
 8007e24:	4605      	mov	r5, r0
 8007e26:	2800      	cmp	r0, #0
 8007e28:	d0f2      	beq.n	8007e10 <_realloc_r+0x1c>
 8007e2a:	4631      	mov	r1, r6
 8007e2c:	4622      	mov	r2, r4
 8007e2e:	f7ff ffbd 	bl	8007dac <memcpy>
 8007e32:	4631      	mov	r1, r6
 8007e34:	4638      	mov	r0, r7
 8007e36:	f7ff fc05 	bl	8007644 <_free_r>
 8007e3a:	e7e9      	b.n	8007e10 <_realloc_r+0x1c>
 8007e3c:	4635      	mov	r5, r6
 8007e3e:	e7e7      	b.n	8007e10 <_realloc_r+0x1c>

08007e40 <_malloc_usable_size_r>:
 8007e40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e44:	1f18      	subs	r0, r3, #4
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	bfbc      	itt	lt
 8007e4a:	580b      	ldrlt	r3, [r1, r0]
 8007e4c:	18c0      	addlt	r0, r0, r3
 8007e4e:	4770      	bx	lr

08007e50 <_init>:
 8007e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e52:	bf00      	nop
 8007e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e56:	bc08      	pop	{r3}
 8007e58:	469e      	mov	lr, r3
 8007e5a:	4770      	bx	lr

08007e5c <_fini>:
 8007e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5e:	bf00      	nop
 8007e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e62:	bc08      	pop	{r3}
 8007e64:	469e      	mov	lr, r3
 8007e66:	4770      	bx	lr
