
stm32f7-drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055a0  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08005780  08005780  00015780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057b0  080057b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080057b0  080057b0  000157b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057b8  080057b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057b8  080057b8  000157b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057bc  080057bc  000157bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080057c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000072c  20000070  08005830  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000079c  08005830  0002079c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c9e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a1e  00000000  00000000  00033d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011f8  00000000  00000000  00036760  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010a0  00000000  00000000  00037958  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002451a  00000000  00000000  000389f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e7ee  00000000  00000000  0005cf12  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e161b  00000000  00000000  0006b700  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014cd1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cc4  00000000  00000000  0014cd98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005768 	.word	0x08005768

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08005768 	.word	0x08005768

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <ESC_INIT_CONTROLLER>:
#include <stdlib.h>
#include "main.h"
#include "ESC.h"

ESC_CONTROLLER* ESC_INIT_CONTROLLER(TIM_HandleTypeDef* timer, DMA_HandleTypeDef* hdmaArray[])
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	6039      	str	r1, [r7, #0]
	ESC_CONTROLLER* ESC_CONTROLLER = malloc(sizeof(ESC_CONTROLLER) * ESC_COUNT);
 800052a:	2010      	movs	r0, #16
 800052c:	f005 f8a0 	bl	8005670 <malloc>
 8000530:	4603      	mov	r3, r0
 8000532:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < ESC_COUNT; i++)
 8000534:	2300      	movs	r3, #0
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	e05f      	b.n	80005fa <ESC_INIT_CONTROLLER+0xda>
	{
		ESC_CONTROLLER[i].Throttle = 0;
 800053a:	68fa      	ldr	r2, [r7, #12]
 800053c:	4613      	mov	r3, r2
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	4413      	add	r3, r2
 8000542:	009b      	lsls	r3, r3, #2
 8000544:	461a      	mov	r2, r3
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	4413      	add	r3, r2
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
		ESC_CONTROLLER[i].Channel = 4*i;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	0099      	lsls	r1, r3, #2
 8000552:	68fa      	ldr	r2, [r7, #12]
 8000554:	4613      	mov	r3, r2
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	4413      	add	r3, r2
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	461a      	mov	r2, r3
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	4413      	add	r3, r2
 8000562:	460a      	mov	r2, r1
 8000564:	605a      	str	r2, [r3, #4]
		ESC_CONTROLLER[i].Index = i;
 8000566:	68fa      	ldr	r2, [r7, #12]
 8000568:	4613      	mov	r3, r2
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	4413      	add	r3, r2
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	461a      	mov	r2, r3
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	4413      	add	r3, r2
 8000576:	68fa      	ldr	r2, [r7, #12]
 8000578:	609a      	str	r2, [r3, #8]
		ESC_CONTROLLER[i].Timer = timer;
 800057a:	68fa      	ldr	r2, [r7, #12]
 800057c:	4613      	mov	r3, r2
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	4413      	add	r3, r2
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	461a      	mov	r2, r3
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	4413      	add	r3, r2
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	60da      	str	r2, [r3, #12]
		ESC_CONTROLLER[i].Dma = hdmaArray[i];
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	683a      	ldr	r2, [r7, #0]
 8000594:	18d1      	adds	r1, r2, r3
 8000596:	68fa      	ldr	r2, [r7, #12]
 8000598:	4613      	mov	r3, r2
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	4413      	add	r3, r2
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	461a      	mov	r2, r3
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	4413      	add	r3, r2
 80005a6:	680a      	ldr	r2, [r1, #0]
 80005a8:	611a      	str	r2, [r3, #16]
		HAL_DMA_Start(hdmaArray[i], (uint32_t) &ESC_CONTROLLER[i].Throttle, (uint32_t) &timer->Instance->CCR1 + (4*i), sizeof(ESC_CONTROLLER[i].Throttle));
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	683a      	ldr	r2, [r7, #0]
 80005b0:	4413      	add	r3, r2
 80005b2:	6818      	ldr	r0, [r3, #0]
 80005b4:	68fa      	ldr	r2, [r7, #12]
 80005b6:	4613      	mov	r3, r2
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	4413      	add	r3, r2
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	461a      	mov	r2, r3
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	4413      	add	r3, r2
 80005c4:	4619      	mov	r1, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	3334      	adds	r3, #52	; 0x34
 80005cc:	461a      	mov	r2, r3
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	441a      	add	r2, r3
 80005d4:	2304      	movs	r3, #4
 80005d6:	f001 fda9 	bl	800212c <HAL_DMA_Start>
		HAL_TIM_PWM_Start(timer, ESC_CONTROLLER[i].Channel);
 80005da:	68fa      	ldr	r2, [r7, #12]
 80005dc:	4613      	mov	r3, r2
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	4413      	add	r3, r2
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	461a      	mov	r2, r3
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	4413      	add	r3, r2
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	4619      	mov	r1, r3
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f003 fc0c 	bl	8003e0c <HAL_TIM_PWM_Start>
	for (int i = 0; i < ESC_COUNT; i++)
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	3301      	adds	r3, #1
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	2b03      	cmp	r3, #3
 80005fe:	dd9c      	ble.n	800053a <ESC_INIT_CONTROLLER+0x1a>
	}
	return ESC_CONTROLLER;
 8000600:	68bb      	ldr	r3, [r7, #8]
}
 8000602:	4618      	mov	r0, r3
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <ESC_UPDATE_THROTTLE>:

void ESC_UPDATE_THROTTLE(ESC_CONTROLLER* ESC)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	// May want to handle error checking for DMA_FLAG_(TEIFx, DMEIFx, FEIFx) flags
	__HAL_DMA_CLEAR_FLAG(ESC->Dma, DMA_FLAG_TCIF0_4 | DMA_FLAG_HTIF0_4 |
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	691b      	ldr	r3, [r3, #16]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	461a      	mov	r2, r3
 800061c:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <ESC_UPDATE_THROTTLE+0x88>)
 800061e:	429a      	cmp	r2, r3
 8000620:	d903      	bls.n	800062a <ESC_UPDATE_THROTTLE+0x1e>
 8000622:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <ESC_UPDATE_THROTTLE+0x8c>)
 8000624:	4a1d      	ldr	r2, [pc, #116]	; (800069c <ESC_UPDATE_THROTTLE+0x90>)
 8000626:	60da      	str	r2, [r3, #12]
 8000628:	e018      	b.n	800065c <ESC_UPDATE_THROTTLE+0x50>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	691b      	ldr	r3, [r3, #16]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	461a      	mov	r2, r3
 8000632:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <ESC_UPDATE_THROTTLE+0x94>)
 8000634:	429a      	cmp	r2, r3
 8000636:	d903      	bls.n	8000640 <ESC_UPDATE_THROTTLE+0x34>
 8000638:	4b17      	ldr	r3, [pc, #92]	; (8000698 <ESC_UPDATE_THROTTLE+0x8c>)
 800063a:	4a18      	ldr	r2, [pc, #96]	; (800069c <ESC_UPDATE_THROTTLE+0x90>)
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	e00d      	b.n	800065c <ESC_UPDATE_THROTTLE+0x50>
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	691b      	ldr	r3, [r3, #16]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	461a      	mov	r2, r3
 8000648:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <ESC_UPDATE_THROTTLE+0x98>)
 800064a:	429a      	cmp	r2, r3
 800064c:	d903      	bls.n	8000656 <ESC_UPDATE_THROTTLE+0x4a>
 800064e:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <ESC_UPDATE_THROTTLE+0x9c>)
 8000650:	4a12      	ldr	r2, [pc, #72]	; (800069c <ESC_UPDATE_THROTTLE+0x90>)
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	e002      	b.n	800065c <ESC_UPDATE_THROTTLE+0x50>
 8000656:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <ESC_UPDATE_THROTTLE+0x9c>)
 8000658:	4a10      	ldr	r2, [pc, #64]	; (800069c <ESC_UPDATE_THROTTLE+0x90>)
 800065a:	609a      	str	r2, [r3, #8]
						 	   DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 |
							   DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 |
							   DMA_FLAG_TCIF3_7 | DMA_FLAG_HTIF3_7);	// Clear transfer and half transfer complete flags
	__HAL_DMA_SET_COUNTER(ESC->Dma, sizeof(ESC[ESC->Index].Throttle));
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	691b      	ldr	r3, [r3, #16]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2204      	movs	r2, #4
 8000664:	605a      	str	r2, [r3, #4]
	__HAL_DMA_ENABLE(ESC->Dma);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	691b      	ldr	r3, [r3, #16]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	691b      	ldr	r3, [r3, #16]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f042 0201 	orr.w	r2, r2, #1
 8000678:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(ESC->Timer, ESC->Channel);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	68da      	ldr	r2, [r3, #12]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	4619      	mov	r1, r3
 8000684:	4610      	mov	r0, r2
 8000686:	f003 fbc1 	bl	8003e0c <HAL_TIM_PWM_Start>
 }
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40026458 	.word	0x40026458
 8000698:	40026400 	.word	0x40026400
 800069c:	0c300c30 	.word	0x0c300c30
 80006a0:	400260b8 	.word	0x400260b8
 80006a4:	40026058 	.word	0x40026058
 80006a8:	40026000 	.word	0x40026000

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b087      	sub	sp, #28
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b2:	f000 fe3a 	bl	800132a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b6:	f000 f871 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ba:	f000 fb2f 	bl	8000d1c <MX_GPIO_Init>
  MX_DMA_Init();
 80006be:	f000 fa2f 	bl	8000b20 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80006c2:	f000 f9cf 	bl	8000a64 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006c6:	f000 f9fd 	bl	8000ac4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 80006ca:	f000 f94f 	bl	800096c <MX_TIM4_Init>
  MX_ADC1_Init();
 80006ce:	f000 f8fb 	bl	80008c8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &potValue, sizeof(potValue));
 80006d2:	2202      	movs	r2, #2
 80006d4:	492d      	ldr	r1, [pc, #180]	; (800078c <main+0xe0>)
 80006d6:	482e      	ldr	r0, [pc, #184]	; (8000790 <main+0xe4>)
 80006d8:	f000 ffaa 	bl	8001630 <HAL_ADC_Start_DMA>
  DMA_HandleTypeDef* hdmaArray[] = {&hdma_memtomem_dma2_stream0, &hdma_memtomem_dma2_stream1,
 80006dc:	4b2d      	ldr	r3, [pc, #180]	; (8000794 <main+0xe8>)
 80006de:	463c      	mov	r4, r7
 80006e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  	  	  	  	  	  	  	&hdma_memtomem_dma2_stream2, &hdma_memtomem_dma2_stream3};
  ESC_CONTROLLER* myESCSet = ESC_INIT_CONTROLLER(&htim4, hdmaArray);
 80006e6:	463b      	mov	r3, r7
 80006e8:	4619      	mov	r1, r3
 80006ea:	482b      	ldr	r0, [pc, #172]	; (8000798 <main+0xec>)
 80006ec:	f7ff ff18 	bl	8000520 <ESC_INIT_CONTROLLER>
 80006f0:	6138      	str	r0, [r7, #16]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      HAL_ADC_Start(&hadc1);
 80006f2:	4827      	ldr	r0, [pc, #156]	; (8000790 <main+0xe4>)
 80006f4:	f000 fedc 	bl	80014b0 <HAL_ADC_Start>
      for (int i = 0; i < ESC_COUNT; i++)
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	e03f      	b.n	800077e <main+0xd2>
      {
    	  if (myESCSet[i].Throttle < 10000) myESCSet[i].Throttle += 10 + (20 * i);
 80006fe:	697a      	ldr	r2, [r7, #20]
 8000700:	4613      	mov	r3, r2
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	4413      	add	r3, r2
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	461a      	mov	r2, r3
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	4413      	add	r3, r2
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f242 720f 	movw	r2, #9999	; 0x270f
 8000714:	4293      	cmp	r3, r2
 8000716:	d81a      	bhi.n	800074e <main+0xa2>
 8000718:	697a      	ldr	r2, [r7, #20]
 800071a:	4613      	mov	r3, r2
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	4413      	add	r3, r2
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	461a      	mov	r2, r3
 8000724:	693b      	ldr	r3, [r7, #16]
 8000726:	4413      	add	r3, r2
 8000728:	6819      	ldr	r1, [r3, #0]
 800072a:	697a      	ldr	r2, [r7, #20]
 800072c:	4613      	mov	r3, r2
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	4413      	add	r3, r2
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	4419      	add	r1, r3
 8000736:	697a      	ldr	r2, [r7, #20]
 8000738:	4613      	mov	r3, r2
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	4413      	add	r3, r2
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	461a      	mov	r2, r3
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	4413      	add	r3, r2
 8000746:	f101 020a 	add.w	r2, r1, #10
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	e009      	b.n	8000762 <main+0xb6>
    	  else myESCSet[i].Throttle = 0;
 800074e:	697a      	ldr	r2, [r7, #20]
 8000750:	4613      	mov	r3, r2
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	4413      	add	r3, r2
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	461a      	mov	r2, r3
 800075a:	693b      	ldr	r3, [r7, #16]
 800075c:	4413      	add	r3, r2
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
    	  ESC_UPDATE_THROTTLE(&myESCSet[i]);
 8000762:	697a      	ldr	r2, [r7, #20]
 8000764:	4613      	mov	r3, r2
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	4413      	add	r3, r2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	461a      	mov	r2, r3
 800076e:	693b      	ldr	r3, [r7, #16]
 8000770:	4413      	add	r3, r2
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ff4a 	bl	800060c <ESC_UPDATE_THROTTLE>
      for (int i = 0; i < ESC_COUNT; i++)
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	3301      	adds	r3, #1
 800077c:	617b      	str	r3, [r7, #20]
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	2b03      	cmp	r3, #3
 8000782:	ddbc      	ble.n	80006fe <main+0x52>
      }
      HAL_Delay(10);
 8000784:	200a      	movs	r0, #10
 8000786:	f000 fe2d 	bl	80013e4 <HAL_Delay>
      HAL_ADC_Start(&hadc1);
 800078a:	e7b2      	b.n	80006f2 <main+0x46>
 800078c:	20000664 	.word	0x20000664
 8000790:	2000061c 	.word	0x2000061c
 8000794:	08005780 	.word	0x08005780
 8000798:	200000f8 	.word	0x200000f8

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0b4      	sub	sp, #208	; 0xd0
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007a6:	2230      	movs	r2, #48	; 0x30
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f004 ff68 	bl	8005680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	2280      	movs	r2, #128	; 0x80
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f004 ff59 	bl	8005680 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007ce:	f002 faad 	bl	8002d2c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	4b3a      	ldr	r3, [pc, #232]	; (80008bc <SystemClock_Config+0x120>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	4a39      	ldr	r2, [pc, #228]	; (80008bc <SystemClock_Config+0x120>)
 80007d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007dc:	6413      	str	r3, [r2, #64]	; 0x40
 80007de:	4b37      	ldr	r3, [pc, #220]	; (80008bc <SystemClock_Config+0x120>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ea:	4b35      	ldr	r3, [pc, #212]	; (80008c0 <SystemClock_Config+0x124>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a34      	ldr	r2, [pc, #208]	; (80008c0 <SystemClock_Config+0x124>)
 80007f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007f4:	6013      	str	r3, [r2, #0]
 80007f6:	4b32      	ldr	r3, [pc, #200]	; (80008c0 <SystemClock_Config+0x124>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000802:	2301      	movs	r3, #1
 8000804:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000808:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800080c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000810:	2302      	movs	r3, #2
 8000812:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000816:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800081a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 800081e:	2308      	movs	r3, #8
 8000820:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000824:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000828:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082c:	2302      	movs	r3, #2
 800082e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000832:	2309      	movs	r3, #9
 8000834:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000838:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800083c:	4618      	mov	r0, r3
 800083e:	f002 fad5 	bl	8002dec <HAL_RCC_OscConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000848:	f000 fb20 	bl	8000e8c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800084c:	f002 fa7e 	bl	8002d4c <HAL_PWREx_EnableOverDrive>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000856:	f000 fb19 	bl	8000e8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085a:	230f      	movs	r3, #15
 800085c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000860:	2302      	movs	r3, #2
 8000862:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800086c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000870:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000878:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800087c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000880:	2107      	movs	r1, #7
 8000882:	4618      	mov	r0, r3
 8000884:	f002 fd56 	bl	8003334 <HAL_RCC_ClockConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800088e:	f000 fafd 	bl	8000e8c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <SystemClock_Config+0x128>)
 8000894:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000896:	2300      	movs	r3, #0
 8000898:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800089a:	2300      	movs	r3, #0
 800089c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	4618      	mov	r0, r3
 80008a6:	f002 ff3d 	bl	8003724 <HAL_RCCEx_PeriphCLKConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0x118>
  {
    Error_Handler();
 80008b0:	f000 faec 	bl	8000e8c <Error_Handler>
  }
}
 80008b4:	bf00      	nop
 80008b6:	37d0      	adds	r7, #208	; 0xd0
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40007000 	.word	0x40007000
 80008c4:	00200100 	.word	0x00200100

080008c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ce:	463b      	mov	r3, r7
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008da:	4b21      	ldr	r3, [pc, #132]	; (8000960 <MX_ADC1_Init+0x98>)
 80008dc:	4a21      	ldr	r2, [pc, #132]	; (8000964 <MX_ADC1_Init+0x9c>)
 80008de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80008e0:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <MX_ADC1_Init+0x98>)
 80008e2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008e8:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <MX_ADC1_Init+0x98>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008ee:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <MX_ADC1_Init+0x98>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <MX_ADC1_Init+0x98>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <MX_ADC1_Init+0x98>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000902:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MX_ADC1_Init+0x98>)
 8000904:	2200      	movs	r2, #0
 8000906:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MX_ADC1_Init+0x98>)
 800090a:	4a17      	ldr	r2, [pc, #92]	; (8000968 <MX_ADC1_Init+0xa0>)
 800090c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_ADC1_Init+0x98>)
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_ADC1_Init+0x98>)
 8000916:	2201      	movs	r2, #1
 8000918:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_ADC1_Init+0x98>)
 800091c:	2201      	movs	r2, #1
 800091e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_ADC1_Init+0x98>)
 8000924:	2200      	movs	r2, #0
 8000926:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000928:	480d      	ldr	r0, [pc, #52]	; (8000960 <MX_ADC1_Init+0x98>)
 800092a:	f000 fd7d 	bl	8001428 <HAL_ADC_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000934:	f000 faaa 	bl	8000e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000938:	2309      	movs	r3, #9
 800093a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800093c:	2301      	movs	r3, #1
 800093e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000940:	2300      	movs	r3, #0
 8000942:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000944:	463b      	mov	r3, r7
 8000946:	4619      	mov	r1, r3
 8000948:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_ADC1_Init+0x98>)
 800094a:	f000 ff69 	bl	8001820 <HAL_ADC_ConfigChannel>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000954:	f000 fa9a 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	3710      	adds	r7, #16
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	2000061c 	.word	0x2000061c
 8000964:	40012000 	.word	0x40012000
 8000968:	0f000001 	.word	0x0f000001

0800096c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800097e:	463b      	mov	r3, r7
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
 800098c:	615a      	str	r2, [r3, #20]
 800098e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000990:	4b32      	ldr	r3, [pc, #200]	; (8000a5c <MX_TIM4_Init+0xf0>)
 8000992:	4a33      	ldr	r2, [pc, #204]	; (8000a60 <MX_TIM4_Init+0xf4>)
 8000994:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9;
 8000996:	4b31      	ldr	r3, [pc, #196]	; (8000a5c <MX_TIM4_Init+0xf0>)
 8000998:	2209      	movs	r2, #9
 800099a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099c:	4b2f      	ldr	r3, [pc, #188]	; (8000a5c <MX_TIM4_Init+0xf0>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10799;
 80009a2:	4b2e      	ldr	r3, [pc, #184]	; (8000a5c <MX_TIM4_Init+0xf0>)
 80009a4:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80009a8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009aa:	4b2c      	ldr	r3, [pc, #176]	; (8000a5c <MX_TIM4_Init+0xf0>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b0:	4b2a      	ldr	r3, [pc, #168]	; (8000a5c <MX_TIM4_Init+0xf0>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009b6:	4829      	ldr	r0, [pc, #164]	; (8000a5c <MX_TIM4_Init+0xf0>)
 80009b8:	f003 f9fc 	bl	8003db4 <HAL_TIM_PWM_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80009c2:	f000 fa63 	bl	8000e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	4821      	ldr	r0, [pc, #132]	; (8000a5c <MX_TIM4_Init+0xf0>)
 80009d6:	f003 fe99 	bl	800470c <HAL_TIMEx_MasterConfigSynchronization>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80009e0:	f000 fa54 	bl	8000e8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e4:	2360      	movs	r3, #96	; 0x60
 80009e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009f4:	463b      	mov	r3, r7
 80009f6:	2200      	movs	r2, #0
 80009f8:	4619      	mov	r1, r3
 80009fa:	4818      	ldr	r0, [pc, #96]	; (8000a5c <MX_TIM4_Init+0xf0>)
 80009fc:	f003 fa4a 	bl	8003e94 <HAL_TIM_PWM_ConfigChannel>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000a06:	f000 fa41 	bl	8000e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	2204      	movs	r2, #4
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4812      	ldr	r0, [pc, #72]	; (8000a5c <MX_TIM4_Init+0xf0>)
 8000a12:	f003 fa3f 	bl	8003e94 <HAL_TIM_PWM_ConfigChannel>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000a1c:	f000 fa36 	bl	8000e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a20:	463b      	mov	r3, r7
 8000a22:	2208      	movs	r2, #8
 8000a24:	4619      	mov	r1, r3
 8000a26:	480d      	ldr	r0, [pc, #52]	; (8000a5c <MX_TIM4_Init+0xf0>)
 8000a28:	f003 fa34 	bl	8003e94 <HAL_TIM_PWM_ConfigChannel>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8000a32:	f000 fa2b 	bl	8000e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a36:	463b      	mov	r3, r7
 8000a38:	220c      	movs	r2, #12
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4807      	ldr	r0, [pc, #28]	; (8000a5c <MX_TIM4_Init+0xf0>)
 8000a3e:	f003 fa29 	bl	8003e94 <HAL_TIM_PWM_ConfigChannel>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8000a48:	f000 fa20 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a4c:	4803      	ldr	r0, [pc, #12]	; (8000a5c <MX_TIM4_Init+0xf0>)
 8000a4e:	f000 fadd 	bl	800100c <HAL_TIM_MspPostInit>

}
 8000a52:	bf00      	nop
 8000a54:	3728      	adds	r7, #40	; 0x28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200000f8 	.word	0x200000f8
 8000a60:	40000800 	.word	0x40000800

08000a64 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a68:	4b14      	ldr	r3, [pc, #80]	; (8000abc <MX_USART3_UART_Init+0x58>)
 8000a6a:	4a15      	ldr	r2, [pc, #84]	; (8000ac0 <MX_USART3_UART_Init+0x5c>)
 8000a6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a6e:	4b13      	ldr	r3, [pc, #76]	; (8000abc <MX_USART3_UART_Init+0x58>)
 8000a70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a76:	4b11      	ldr	r3, [pc, #68]	; (8000abc <MX_USART3_UART_Init+0x58>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <MX_USART3_UART_Init+0x58>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <MX_USART3_UART_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <MX_USART3_UART_Init+0x58>)
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <MX_USART3_UART_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_USART3_UART_Init+0x58>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <MX_USART3_UART_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <MX_USART3_UART_Init+0x58>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <MX_USART3_UART_Init+0x58>)
 8000aa8:	f003 febe 	bl	8004828 <HAL_UART_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ab2:	f000 f9eb 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000138 	.word	0x20000138
 8000ac0:	40004800 	.word	0x40004800

08000ac4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ace:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad2:	2206      	movs	r2, #6
 8000ad4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ade:	2202      	movs	r2, #2
 8000ae0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b08:	f001 ffc7 	bl	8002a9a <HAL_PCD_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b12:	f000 f9bb 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200001b8 	.word	0x200001b8

08000b20 <MX_DMA_Init>:
  *   hdma_memtomem_dma2_stream1
  *   hdma_memtomem_dma2_stream2
  *   hdma_memtomem_dma2_stream3
  */
static void MX_DMA_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b26:	4b74      	ldr	r3, [pc, #464]	; (8000cf8 <MX_DMA_Init+0x1d8>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a73      	ldr	r2, [pc, #460]	; (8000cf8 <MX_DMA_Init+0x1d8>)
 8000b2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b71      	ldr	r3, [pc, #452]	; (8000cf8 <MX_DMA_Init+0x1d8>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000b3e:	4b6f      	ldr	r3, [pc, #444]	; (8000cfc <MX_DMA_Init+0x1dc>)
 8000b40:	4a6f      	ldr	r2, [pc, #444]	; (8000d00 <MX_DMA_Init+0x1e0>)
 8000b42:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000b44:	4b6d      	ldr	r3, [pc, #436]	; (8000cfc <MX_DMA_Init+0x1dc>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000b4a:	4b6c      	ldr	r3, [pc, #432]	; (8000cfc <MX_DMA_Init+0x1dc>)
 8000b4c:	2280      	movs	r2, #128	; 0x80
 8000b4e:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b50:	4b6a      	ldr	r3, [pc, #424]	; (8000cfc <MX_DMA_Init+0x1dc>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_DISABLE;
 8000b56:	4b69      	ldr	r3, [pc, #420]	; (8000cfc <MX_DMA_Init+0x1dc>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b5c:	4b67      	ldr	r3, [pc, #412]	; (8000cfc <MX_DMA_Init+0x1dc>)
 8000b5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b62:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b64:	4b65      	ldr	r3, [pc, #404]	; (8000cfc <MX_DMA_Init+0x1dc>)
 8000b66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b6a:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000b6c:	4b63      	ldr	r3, [pc, #396]	; (8000cfc <MX_DMA_Init+0x1dc>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000b72:	4b62      	ldr	r3, [pc, #392]	; (8000cfc <MX_DMA_Init+0x1dc>)
 8000b74:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b78:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000b7a:	4b60      	ldr	r3, [pc, #384]	; (8000cfc <MX_DMA_Init+0x1dc>)
 8000b7c:	2204      	movs	r2, #4
 8000b7e:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000b80:	4b5e      	ldr	r3, [pc, #376]	; (8000cfc <MX_DMA_Init+0x1dc>)
 8000b82:	2203      	movs	r2, #3
 8000b84:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000b86:	4b5d      	ldr	r3, [pc, #372]	; (8000cfc <MX_DMA_Init+0x1dc>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000b8c:	4b5b      	ldr	r3, [pc, #364]	; (8000cfc <MX_DMA_Init+0x1dc>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000b92:	485a      	ldr	r0, [pc, #360]	; (8000cfc <MX_DMA_Init+0x1dc>)
 8000b94:	f001 fa1c 	bl	8001fd0 <HAL_DMA_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_DMA_Init+0x82>
  {
    Error_Handler( );
 8000b9e:	f000 f975 	bl	8000e8c <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream1 on DMA2_Stream1 */
  hdma_memtomem_dma2_stream1.Instance = DMA2_Stream1;
 8000ba2:	4b58      	ldr	r3, [pc, #352]	; (8000d04 <MX_DMA_Init+0x1e4>)
 8000ba4:	4a58      	ldr	r2, [pc, #352]	; (8000d08 <MX_DMA_Init+0x1e8>)
 8000ba6:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream1.Init.Channel = DMA_CHANNEL_0;
 8000ba8:	4b56      	ldr	r3, [pc, #344]	; (8000d04 <MX_DMA_Init+0x1e4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000bae:	4b55      	ldr	r3, [pc, #340]	; (8000d04 <MX_DMA_Init+0x1e4>)
 8000bb0:	2280      	movs	r2, #128	; 0x80
 8000bb2:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb4:	4b53      	ldr	r3, [pc, #332]	; (8000d04 <MX_DMA_Init+0x1e4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream1.Init.MemInc = DMA_MINC_DISABLE;
 8000bba:	4b52      	ldr	r3, [pc, #328]	; (8000d04 <MX_DMA_Init+0x1e4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bc0:	4b50      	ldr	r3, [pc, #320]	; (8000d04 <MX_DMA_Init+0x1e4>)
 8000bc2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bc6:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bc8:	4b4e      	ldr	r3, [pc, #312]	; (8000d04 <MX_DMA_Init+0x1e4>)
 8000bca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bce:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream1.Init.Mode = DMA_NORMAL;
 8000bd0:	4b4c      	ldr	r3, [pc, #304]	; (8000d04 <MX_DMA_Init+0x1e4>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000bd6:	4b4b      	ldr	r3, [pc, #300]	; (8000d04 <MX_DMA_Init+0x1e4>)
 8000bd8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000bdc:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000bde:	4b49      	ldr	r3, [pc, #292]	; (8000d04 <MX_DMA_Init+0x1e4>)
 8000be0:	2204      	movs	r2, #4
 8000be2:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000be4:	4b47      	ldr	r3, [pc, #284]	; (8000d04 <MX_DMA_Init+0x1e4>)
 8000be6:	2203      	movs	r2, #3
 8000be8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000bea:	4b46      	ldr	r3, [pc, #280]	; (8000d04 <MX_DMA_Init+0x1e4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000bf0:	4b44      	ldr	r3, [pc, #272]	; (8000d04 <MX_DMA_Init+0x1e4>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream1) != HAL_OK)
 8000bf6:	4843      	ldr	r0, [pc, #268]	; (8000d04 <MX_DMA_Init+0x1e4>)
 8000bf8:	f001 f9ea 	bl	8001fd0 <HAL_DMA_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_DMA_Init+0xe6>
  {
    Error_Handler( );
 8000c02:	f000 f943 	bl	8000e8c <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream2 on DMA2_Stream2 */
  hdma_memtomem_dma2_stream2.Instance = DMA2_Stream2;
 8000c06:	4b41      	ldr	r3, [pc, #260]	; (8000d0c <MX_DMA_Init+0x1ec>)
 8000c08:	4a41      	ldr	r2, [pc, #260]	; (8000d10 <MX_DMA_Init+0x1f0>)
 8000c0a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream2.Init.Channel = DMA_CHANNEL_0;
 8000c0c:	4b3f      	ldr	r3, [pc, #252]	; (8000d0c <MX_DMA_Init+0x1ec>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000c12:	4b3e      	ldr	r3, [pc, #248]	; (8000d0c <MX_DMA_Init+0x1ec>)
 8000c14:	2280      	movs	r2, #128	; 0x80
 8000c16:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c18:	4b3c      	ldr	r3, [pc, #240]	; (8000d0c <MX_DMA_Init+0x1ec>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream2.Init.MemInc = DMA_MINC_DISABLE;
 8000c1e:	4b3b      	ldr	r3, [pc, #236]	; (8000d0c <MX_DMA_Init+0x1ec>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c24:	4b39      	ldr	r3, [pc, #228]	; (8000d0c <MX_DMA_Init+0x1ec>)
 8000c26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c2a:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c2c:	4b37      	ldr	r3, [pc, #220]	; (8000d0c <MX_DMA_Init+0x1ec>)
 8000c2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c32:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream2.Init.Mode = DMA_NORMAL;
 8000c34:	4b35      	ldr	r3, [pc, #212]	; (8000d0c <MX_DMA_Init+0x1ec>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c3a:	4b34      	ldr	r3, [pc, #208]	; (8000d0c <MX_DMA_Init+0x1ec>)
 8000c3c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c40:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c42:	4b32      	ldr	r3, [pc, #200]	; (8000d0c <MX_DMA_Init+0x1ec>)
 8000c44:	2204      	movs	r2, #4
 8000c46:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c48:	4b30      	ldr	r3, [pc, #192]	; (8000d0c <MX_DMA_Init+0x1ec>)
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream2.Init.MemBurst = DMA_MBURST_SINGLE;
 8000c4e:	4b2f      	ldr	r3, [pc, #188]	; (8000d0c <MX_DMA_Init+0x1ec>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000c54:	4b2d      	ldr	r3, [pc, #180]	; (8000d0c <MX_DMA_Init+0x1ec>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream2) != HAL_OK)
 8000c5a:	482c      	ldr	r0, [pc, #176]	; (8000d0c <MX_DMA_Init+0x1ec>)
 8000c5c:	f001 f9b8 	bl	8001fd0 <HAL_DMA_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_DMA_Init+0x14a>
  {
    Error_Handler( );
 8000c66:	f000 f911 	bl	8000e8c <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream3 on DMA2_Stream3 */
  hdma_memtomem_dma2_stream3.Instance = DMA2_Stream3;
 8000c6a:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <MX_DMA_Init+0x1f4>)
 8000c6c:	4a2a      	ldr	r2, [pc, #168]	; (8000d18 <MX_DMA_Init+0x1f8>)
 8000c6e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream3.Init.Channel = DMA_CHANNEL_0;
 8000c70:	4b28      	ldr	r3, [pc, #160]	; (8000d14 <MX_DMA_Init+0x1f4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream3.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000c76:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <MX_DMA_Init+0x1f4>)
 8000c78:	2280      	movs	r2, #128	; 0x80
 8000c7a:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c7c:	4b25      	ldr	r3, [pc, #148]	; (8000d14 <MX_DMA_Init+0x1f4>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream3.Init.MemInc = DMA_MINC_DISABLE;
 8000c82:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <MX_DMA_Init+0x1f4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c88:	4b22      	ldr	r3, [pc, #136]	; (8000d14 <MX_DMA_Init+0x1f4>)
 8000c8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c8e:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c90:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <MX_DMA_Init+0x1f4>)
 8000c92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c96:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream3.Init.Mode = DMA_NORMAL;
 8000c98:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <MX_DMA_Init+0x1f4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <MX_DMA_Init+0x1f4>)
 8000ca0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ca4:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000ca6:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <MX_DMA_Init+0x1f4>)
 8000ca8:	2204      	movs	r2, #4
 8000caa:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000cac:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <MX_DMA_Init+0x1f4>)
 8000cae:	2203      	movs	r2, #3
 8000cb0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream3.Init.MemBurst = DMA_MBURST_SINGLE;
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <MX_DMA_Init+0x1f4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000cb8:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <MX_DMA_Init+0x1f4>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream3) != HAL_OK)
 8000cbe:	4815      	ldr	r0, [pc, #84]	; (8000d14 <MX_DMA_Init+0x1f4>)
 8000cc0:	f001 f986 	bl	8001fd0 <HAL_DMA_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_DMA_Init+0x1ae>
  {
    Error_Handler( );
 8000cca:	f000 f8df 	bl	8000e8c <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2038      	movs	r0, #56	; 0x38
 8000cd4:	f001 f945 	bl	8001f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000cd8:	2038      	movs	r0, #56	; 0x38
 8000cda:	f001 f95e 	bl	8001f9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	203c      	movs	r0, #60	; 0x3c
 8000ce4:	f001 f93d 	bl	8001f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000ce8:	203c      	movs	r0, #60	; 0x3c
 8000cea:	f001 f956 	bl	8001f9a <HAL_NVIC_EnableIRQ>

}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	20000098 	.word	0x20000098
 8000d00:	40026410 	.word	0x40026410
 8000d04:	20000668 	.word	0x20000668
 8000d08:	40026428 	.word	0x40026428
 8000d0c:	20000734 	.word	0x20000734
 8000d10:	40026440 	.word	0x40026440
 8000d14:	200005bc 	.word	0x200005bc
 8000d18:	40026458 	.word	0x40026458

08000d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08c      	sub	sp, #48	; 0x30
 8000d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	f107 031c 	add.w	r3, r7, #28
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d32:	4b46      	ldr	r3, [pc, #280]	; (8000e4c <MX_GPIO_Init+0x130>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a45      	ldr	r2, [pc, #276]	; (8000e4c <MX_GPIO_Init+0x130>)
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b43      	ldr	r3, [pc, #268]	; (8000e4c <MX_GPIO_Init+0x130>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	61bb      	str	r3, [r7, #24]
 8000d48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d4a:	4b40      	ldr	r3, [pc, #256]	; (8000e4c <MX_GPIO_Init+0x130>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a3f      	ldr	r2, [pc, #252]	; (8000e4c <MX_GPIO_Init+0x130>)
 8000d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b3d      	ldr	r3, [pc, #244]	; (8000e4c <MX_GPIO_Init+0x130>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d62:	4b3a      	ldr	r3, [pc, #232]	; (8000e4c <MX_GPIO_Init+0x130>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a39      	ldr	r2, [pc, #228]	; (8000e4c <MX_GPIO_Init+0x130>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b37      	ldr	r3, [pc, #220]	; (8000e4c <MX_GPIO_Init+0x130>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7a:	4b34      	ldr	r3, [pc, #208]	; (8000e4c <MX_GPIO_Init+0x130>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a33      	ldr	r2, [pc, #204]	; (8000e4c <MX_GPIO_Init+0x130>)
 8000d80:	f043 0308 	orr.w	r3, r3, #8
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b31      	ldr	r3, [pc, #196]	; (8000e4c <MX_GPIO_Init+0x130>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0308 	and.w	r3, r3, #8
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d92:	4b2e      	ldr	r3, [pc, #184]	; (8000e4c <MX_GPIO_Init+0x130>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a2d      	ldr	r2, [pc, #180]	; (8000e4c <MX_GPIO_Init+0x130>)
 8000d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b2b      	ldr	r3, [pc, #172]	; (8000e4c <MX_GPIO_Init+0x130>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	4b28      	ldr	r3, [pc, #160]	; (8000e4c <MX_GPIO_Init+0x130>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a27      	ldr	r2, [pc, #156]	; (8000e4c <MX_GPIO_Init+0x130>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b25      	ldr	r3, [pc, #148]	; (8000e4c <MX_GPIO_Init+0x130>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000dc8:	4821      	ldr	r0, [pc, #132]	; (8000e50 <MX_GPIO_Init+0x134>)
 8000dca:	f001 fe4d 	bl	8002a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2140      	movs	r1, #64	; 0x40
 8000dd2:	4820      	ldr	r0, [pc, #128]	; (8000e54 <MX_GPIO_Init+0x138>)
 8000dd4:	f001 fe48 	bl	8002a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000dd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dde:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <MX_GPIO_Init+0x13c>)
 8000de0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	4619      	mov	r1, r3
 8000dec:	481b      	ldr	r0, [pc, #108]	; (8000e5c <MX_GPIO_Init+0x140>)
 8000dee:	f001 fca1 	bl	8002734 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000df2:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000df6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4811      	ldr	r0, [pc, #68]	; (8000e50 <MX_GPIO_Init+0x134>)
 8000e0c:	f001 fc92 	bl	8002734 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e10:	2340      	movs	r3, #64	; 0x40
 8000e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e14:	2301      	movs	r3, #1
 8000e16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	4619      	mov	r1, r3
 8000e26:	480b      	ldr	r0, [pc, #44]	; (8000e54 <MX_GPIO_Init+0x138>)
 8000e28:	f001 fc84 	bl	8002734 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_GPIO_Init+0x138>)
 8000e40:	f001 fc78 	bl	8002734 <HAL_GPIO_Init>

}
 8000e44:	bf00      	nop
 8000e46:	3730      	adds	r7, #48	; 0x30
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020400 	.word	0x40020400
 8000e54:	40021800 	.word	0x40021800
 8000e58:	10110000 	.word	0x10110000
 8000e5c:	40020800 	.word	0x40020800

08000e60 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
    void HAL_ADC_ConvHalfCpltCallback (ADC_HandleTypeDef* hadc)
    {
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	__NOP();
 8000e68:	bf00      	nop
    }
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <HAL_ADC_ConvCpltCallback>:

    void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef* hadc)
    {
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
    __NOP();
 8000e7e:	bf00      	nop
    }
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
	...

08000e9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <HAL_MspInit+0x44>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <HAL_MspInit+0x44>)
 8000ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eac:	6413      	str	r3, [r2, #64]	; 0x40
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <HAL_MspInit+0x44>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <HAL_MspInit+0x44>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	4a08      	ldr	r2, [pc, #32]	; (8000ee0 <HAL_MspInit+0x44>)
 8000ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_MspInit+0x44>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800

08000ee4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	; 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a2d      	ldr	r2, [pc, #180]	; (8000fb8 <HAL_ADC_MspInit+0xd4>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d154      	bne.n	8000fb0 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f06:	4b2d      	ldr	r3, [pc, #180]	; (8000fbc <HAL_ADC_MspInit+0xd8>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	4a2c      	ldr	r2, [pc, #176]	; (8000fbc <HAL_ADC_MspInit+0xd8>)
 8000f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f10:	6453      	str	r3, [r2, #68]	; 0x44
 8000f12:	4b2a      	ldr	r3, [pc, #168]	; (8000fbc <HAL_ADC_MspInit+0xd8>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	4b27      	ldr	r3, [pc, #156]	; (8000fbc <HAL_ADC_MspInit+0xd8>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a26      	ldr	r2, [pc, #152]	; (8000fbc <HAL_ADC_MspInit+0xd8>)
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b24      	ldr	r3, [pc, #144]	; (8000fbc <HAL_ADC_MspInit+0xd8>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_Throttle_Control_Pin;
 8000f36:	2302      	movs	r3, #2
 8000f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_Throttle_Control_GPIO_Port, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	481d      	ldr	r0, [pc, #116]	; (8000fc0 <HAL_ADC_MspInit+0xdc>)
 8000f4a:	f001 fbf3 	bl	8002734 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8000f4e:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <HAL_ADC_MspInit+0xe0>)
 8000f50:	4a1d      	ldr	r2, [pc, #116]	; (8000fc8 <HAL_ADC_MspInit+0xe4>)
 8000f52:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <HAL_ADC_MspInit+0xe0>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <HAL_ADC_MspInit+0xe0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f60:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <HAL_ADC_MspInit+0xe0>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <HAL_ADC_MspInit+0xe0>)
 8000f68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f6c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <HAL_ADC_MspInit+0xe0>)
 8000f70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f74:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f76:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <HAL_ADC_MspInit+0xe0>)
 8000f78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f7c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_ADC_MspInit+0xe0>)
 8000f80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f84:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <HAL_ADC_MspInit+0xe0>)
 8000f88:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f8c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <HAL_ADC_MspInit+0xe0>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f94:	480b      	ldr	r0, [pc, #44]	; (8000fc4 <HAL_ADC_MspInit+0xe0>)
 8000f96:	f001 f81b 	bl	8001fd0 <HAL_DMA_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000fa0:	f7ff ff74 	bl	8000e8c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <HAL_ADC_MspInit+0xe0>)
 8000fa8:	639a      	str	r2, [r3, #56]	; 0x38
 8000faa:	4a06      	ldr	r2, [pc, #24]	; (8000fc4 <HAL_ADC_MspInit+0xe0>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fb0:	bf00      	nop
 8000fb2:	3728      	adds	r7, #40	; 0x28
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40012000 	.word	0x40012000
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40020400 	.word	0x40020400
 8000fc4:	200006d4 	.word	0x200006d4
 8000fc8:	40026470 	.word	0x40026470

08000fcc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <HAL_TIM_PWM_MspInit+0x38>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d10b      	bne.n	8000ff6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <HAL_TIM_PWM_MspInit+0x3c>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	4a09      	ldr	r2, [pc, #36]	; (8001008 <HAL_TIM_PWM_MspInit+0x3c>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fea:	4b07      	ldr	r3, [pc, #28]	; (8001008 <HAL_TIM_PWM_MspInit+0x3c>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40000800 	.word	0x40000800
 8001008:	40023800 	.word	0x40023800

0800100c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a11      	ldr	r2, [pc, #68]	; (8001070 <HAL_TIM_MspPostInit+0x64>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d11c      	bne.n	8001068 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <HAL_TIM_MspPostInit+0x68>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a10      	ldr	r2, [pc, #64]	; (8001074 <HAL_TIM_MspPostInit+0x68>)
 8001034:	f043 0308 	orr.w	r3, r3, #8
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <HAL_TIM_MspPostInit+0x68>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0308 	and.w	r3, r3, #8
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = Timer4_CH1_ESC1_Pin|Timer4_CH2_ESC2_Pin|Timer4_CH3_ESC3_Pin|Timer4_CH4_ESC4_Pin;
 8001046:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800104a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001058:	2302      	movs	r3, #2
 800105a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	4619      	mov	r1, r3
 8001062:	4805      	ldr	r0, [pc, #20]	; (8001078 <HAL_TIM_MspPostInit+0x6c>)
 8001064:	f001 fb66 	bl	8002734 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001068:	bf00      	nop
 800106a:	3720      	adds	r7, #32
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40000800 	.word	0x40000800
 8001074:	40023800 	.word	0x40023800
 8001078:	40020c00 	.word	0x40020c00

0800107c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a17      	ldr	r2, [pc, #92]	; (80010f8 <HAL_UART_MspInit+0x7c>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d128      	bne.n	80010f0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800109e:	4b17      	ldr	r3, [pc, #92]	; (80010fc <HAL_UART_MspInit+0x80>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	4a16      	ldr	r2, [pc, #88]	; (80010fc <HAL_UART_MspInit+0x80>)
 80010a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a8:	6413      	str	r3, [r2, #64]	; 0x40
 80010aa:	4b14      	ldr	r3, [pc, #80]	; (80010fc <HAL_UART_MspInit+0x80>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <HAL_UART_MspInit+0x80>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a10      	ldr	r2, [pc, #64]	; (80010fc <HAL_UART_MspInit+0x80>)
 80010bc:	f043 0308 	orr.w	r3, r3, #8
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <HAL_UART_MspInit+0x80>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010dc:	2303      	movs	r3, #3
 80010de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010e0:	2307      	movs	r3, #7
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	4619      	mov	r1, r3
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <HAL_UART_MspInit+0x84>)
 80010ec:	f001 fb22 	bl	8002734 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010f0:	bf00      	nop
 80010f2:	3728      	adds	r7, #40	; 0x28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40004800 	.word	0x40004800
 80010fc:	40023800 	.word	0x40023800
 8001100:	40020c00 	.word	0x40020c00

08001104 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001124:	d141      	bne.n	80011aa <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <HAL_PCD_MspInit+0xb0>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a22      	ldr	r2, [pc, #136]	; (80011b4 <HAL_PCD_MspInit+0xb0>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b20      	ldr	r3, [pc, #128]	; (80011b4 <HAL_PCD_MspInit+0xb0>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800113e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114c:	2303      	movs	r3, #3
 800114e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001150:	230a      	movs	r3, #10
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	4817      	ldr	r0, [pc, #92]	; (80011b8 <HAL_PCD_MspInit+0xb4>)
 800115c:	f001 faea 	bl	8002734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001160:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001166:	2300      	movs	r3, #0
 8001168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	4810      	ldr	r0, [pc, #64]	; (80011b8 <HAL_PCD_MspInit+0xb4>)
 8001176:	f001 fadd 	bl	8002734 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <HAL_PCD_MspInit+0xb0>)
 800117c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800117e:	4a0d      	ldr	r2, [pc, #52]	; (80011b4 <HAL_PCD_MspInit+0xb0>)
 8001180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001184:	6353      	str	r3, [r2, #52]	; 0x34
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_PCD_MspInit+0xb0>)
 8001188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800118a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <HAL_PCD_MspInit+0xb0>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <HAL_PCD_MspInit+0xb0>)
 8001198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119c:	6453      	str	r3, [r2, #68]	; 0x44
 800119e:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <HAL_PCD_MspInit+0xb0>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	; 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020000 	.word	0x40020000

080011bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <HardFault_Handler+0x4>

080011d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <MemManage_Handler+0x4>

080011d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011da:	e7fe      	b.n	80011da <BusFault_Handler+0x4>

080011dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <UsageFault_Handler+0x4>

080011e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001210:	f000 f8c8 	bl	80013a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}

08001218 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 800121c:	4802      	ldr	r0, [pc, #8]	; (8001228 <DMA2_Stream0_IRQHandler+0x10>)
 800121e:	f001 f821 	bl	8002264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000098 	.word	0x20000098

0800122c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001230:	4802      	ldr	r0, [pc, #8]	; (800123c <DMA2_Stream4_IRQHandler+0x10>)
 8001232:	f001 f817 	bl	8002264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200006d4 	.word	0x200006d4

08001240 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001248:	4a14      	ldr	r2, [pc, #80]	; (800129c <_sbrk+0x5c>)
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <_sbrk+0x60>)
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001254:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <_sbrk+0x64>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d102      	bne.n	8001262 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <_sbrk+0x64>)
 800125e:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <_sbrk+0x68>)
 8001260:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <_sbrk+0x64>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	429a      	cmp	r2, r3
 800126e:	d207      	bcs.n	8001280 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001270:	f004 f9d4 	bl	800561c <__errno>
 8001274:	4602      	mov	r2, r0
 8001276:	230c      	movs	r3, #12
 8001278:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	e009      	b.n	8001294 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <_sbrk+0x64>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001286:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <_sbrk+0x64>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	4a05      	ldr	r2, [pc, #20]	; (80012a4 <_sbrk+0x64>)
 8001290:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001292:	68fb      	ldr	r3, [r7, #12]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20040000 	.word	0x20040000
 80012a0:	00000400 	.word	0x00000400
 80012a4:	2000008c 	.word	0x2000008c
 80012a8:	200007a0 	.word	0x200007a0

080012ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <SystemInit+0x28>)
 80012b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012b6:	4a07      	ldr	r2, [pc, #28]	; (80012d4 <SystemInit+0x28>)
 80012b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <SystemInit+0x28>)
 80012c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012c6:	609a      	str	r2, [r3, #8]
#endif
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001310 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012de:	e003      	b.n	80012e8 <LoopCopyDataInit>

080012e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012e6:	3104      	adds	r1, #4

080012e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012e8:	480b      	ldr	r0, [pc, #44]	; (8001318 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012ea:	4b0c      	ldr	r3, [pc, #48]	; (800131c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012f0:	d3f6      	bcc.n	80012e0 <CopyDataInit>
  ldr  r2, =_sbss
 80012f2:	4a0b      	ldr	r2, [pc, #44]	; (8001320 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012f4:	e002      	b.n	80012fc <LoopFillZerobss>

080012f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012f8:	f842 3b04 	str.w	r3, [r2], #4

080012fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001300:	d3f9      	bcc.n	80012f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001302:	f7ff ffd3 	bl	80012ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001306:	f004 f98f 	bl	8005628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800130a:	f7ff f9cf 	bl	80006ac <main>
  bx  lr    
 800130e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001310:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8001314:	080057c0 	.word	0x080057c0
  ldr  r0, =_sdata
 8001318:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800131c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001320:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001324:	2000079c 	.word	0x2000079c

08001328 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001328:	e7fe      	b.n	8001328 <ADC_IRQHandler>

0800132a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800132e:	2003      	movs	r0, #3
 8001330:	f000 fe0c 	bl	8001f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001334:	2000      	movs	r0, #0
 8001336:	f000 f805 	bl	8001344 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800133a:	f7ff fdaf 	bl	8000e9c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_InitTick+0x54>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_InitTick+0x58>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4619      	mov	r1, r3
 8001356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135a:	fbb3 f3f1 	udiv	r3, r3, r1
 800135e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001362:	4618      	mov	r0, r3
 8001364:	f000 fe27 	bl	8001fb6 <HAL_SYSTICK_Config>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e00e      	b.n	8001390 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b0f      	cmp	r3, #15
 8001376:	d80a      	bhi.n	800138e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001378:	2200      	movs	r2, #0
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	f04f 30ff 	mov.w	r0, #4294967295
 8001380:	f000 fdef 	bl	8001f62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001384:	4a06      	ldr	r2, [pc, #24]	; (80013a0 <HAL_InitTick+0x5c>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800138a:	2300      	movs	r3, #0
 800138c:	e000      	b.n	8001390 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000000 	.word	0x20000000
 800139c:	20000008 	.word	0x20000008
 80013a0:	20000004 	.word	0x20000004

080013a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_IncTick+0x20>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_IncTick+0x24>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <HAL_IncTick+0x24>)
 80013b6:	6013      	str	r3, [r2, #0]
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000008 	.word	0x20000008
 80013c8:	20000794 	.word	0x20000794

080013cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return uwTick;
 80013d0:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <HAL_GetTick+0x14>)
 80013d2:	681b      	ldr	r3, [r3, #0]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20000794 	.word	0x20000794

080013e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013ec:	f7ff ffee 	bl	80013cc <HAL_GetTick>
 80013f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013fc:	d005      	beq.n	800140a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <HAL_Delay+0x40>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4413      	add	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800140a:	bf00      	nop
 800140c:	f7ff ffde 	bl	80013cc <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	429a      	cmp	r2, r3
 800141a:	d8f7      	bhi.n	800140c <HAL_Delay+0x28>
  {
  }
}
 800141c:	bf00      	nop
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000008 	.word	0x20000008

08001428 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001430:	2300      	movs	r3, #0
 8001432:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e031      	b.n	80014a2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	2b00      	cmp	r3, #0
 8001444:	d109      	bne.n	800145a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff fd4c 	bl	8000ee4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f003 0310 	and.w	r3, r3, #16
 8001462:	2b00      	cmp	r3, #0
 8001464:	d116      	bne.n	8001494 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <HAL_ADC_Init+0x84>)
 800146c:	4013      	ands	r3, r2
 800146e:	f043 0202 	orr.w	r2, r3, #2
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 fb1c 	bl	8001ab4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f023 0303 	bic.w	r3, r3, #3
 800148a:	f043 0201 	orr.w	r2, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	641a      	str	r2, [r3, #64]	; 0x40
 8001492:	e001      	b.n	8001498 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	ffffeefd 	.word	0xffffeefd

080014b0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d101      	bne.n	80014ca <HAL_ADC_Start+0x1a>
 80014c6:	2302      	movs	r3, #2
 80014c8:	e0a0      	b.n	800160c <HAL_ADC_Start+0x15c>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2201      	movs	r2, #1
 80014ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d018      	beq.n	8001512 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f042 0201 	orr.w	r2, r2, #1
 80014ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80014f0:	4b49      	ldr	r3, [pc, #292]	; (8001618 <HAL_ADC_Start+0x168>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a49      	ldr	r2, [pc, #292]	; (800161c <HAL_ADC_Start+0x16c>)
 80014f6:	fba2 2303 	umull	r2, r3, r2, r3
 80014fa:	0c9a      	lsrs	r2, r3, #18
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001504:	e002      	b.n	800150c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	3b01      	subs	r3, #1
 800150a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f9      	bne.n	8001506 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	2b01      	cmp	r3, #1
 800151e:	d174      	bne.n	800160a <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001524:	4b3e      	ldr	r3, [pc, #248]	; (8001620 <HAL_ADC_Start+0x170>)
 8001526:	4013      	ands	r3, r2
 8001528:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800153a:	2b00      	cmp	r3, #0
 800153c:	d007      	beq.n	800154e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001546:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800155a:	d106      	bne.n	800156a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001560:	f023 0206 	bic.w	r2, r3, #6
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	645a      	str	r2, [r3, #68]	; 0x44
 8001568:	e002      	b.n	8001570 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001580:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001582:	4b28      	ldr	r3, [pc, #160]	; (8001624 <HAL_ADC_Start+0x174>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 031f 	and.w	r3, r3, #31
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10f      	bne.n	80015ae <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d136      	bne.n	800160a <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	e02d      	b.n	800160a <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a1d      	ldr	r2, [pc, #116]	; (8001628 <HAL_ADC_Start+0x178>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d10e      	bne.n	80015d6 <HAL_ADC_Start+0x126>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d107      	bne.n	80015d6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015d4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <HAL_ADC_Start+0x174>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 0310 	and.w	r3, r3, #16
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d113      	bne.n	800160a <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a11      	ldr	r2, [pc, #68]	; (800162c <HAL_ADC_Start+0x17c>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d10e      	bne.n	800160a <HAL_ADC_Start+0x15a>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d107      	bne.n	800160a <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001608:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	20000000 	.word	0x20000000
 800161c:	431bde83 	.word	0x431bde83
 8001620:	fffff8fe 	.word	0xfffff8fe
 8001624:	40012300 	.word	0x40012300
 8001628:	40012000 	.word	0x40012000
 800162c:	40012200 	.word	0x40012200

08001630 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001646:	2b01      	cmp	r3, #1
 8001648:	d101      	bne.n	800164e <HAL_ADC_Start_DMA+0x1e>
 800164a:	2302      	movs	r3, #2
 800164c:	e0c7      	b.n	80017de <HAL_ADC_Start_DMA+0x1ae>
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2201      	movs	r2, #1
 8001652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b01      	cmp	r3, #1
 8001662:	d018      	beq.n	8001696 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0201 	orr.w	r2, r2, #1
 8001672:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001674:	4b5c      	ldr	r3, [pc, #368]	; (80017e8 <HAL_ADC_Start_DMA+0x1b8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a5c      	ldr	r2, [pc, #368]	; (80017ec <HAL_ADC_Start_DMA+0x1bc>)
 800167a:	fba2 2303 	umull	r2, r3, r2, r3
 800167e:	0c9a      	lsrs	r2, r3, #18
 8001680:	4613      	mov	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4413      	add	r3, r2
 8001686:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001688:	e002      	b.n	8001690 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	3b01      	subs	r3, #1
 800168e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f9      	bne.n	800168a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	f040 809b 	bne.w	80017dc <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016aa:	4b51      	ldr	r3, [pc, #324]	; (80017f0 <HAL_ADC_Start_DMA+0x1c0>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d007      	beq.n	80016d4 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016e0:	d106      	bne.n	80016f0 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	f023 0206 	bic.w	r2, r3, #6
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	645a      	str	r2, [r3, #68]	; 0x44
 80016ee:	e002      	b.n	80016f6 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2200      	movs	r2, #0
 80016f4:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001702:	4a3c      	ldr	r2, [pc, #240]	; (80017f4 <HAL_ADC_Start_DMA+0x1c4>)
 8001704:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800170a:	4a3b      	ldr	r2, [pc, #236]	; (80017f8 <HAL_ADC_Start_DMA+0x1c8>)
 800170c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001712:	4a3a      	ldr	r2, [pc, #232]	; (80017fc <HAL_ADC_Start_DMA+0x1cc>)
 8001714:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800171e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800172e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800173e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	334c      	adds	r3, #76	; 0x4c
 800174a:	4619      	mov	r1, r3
 800174c:	68ba      	ldr	r2, [r7, #8]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f000 fd27 	bl	80021a2 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001754:	4b2a      	ldr	r3, [pc, #168]	; (8001800 <HAL_ADC_Start_DMA+0x1d0>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 031f 	and.w	r3, r3, #31
 800175c:	2b00      	cmp	r3, #0
 800175e:	d10f      	bne.n	8001780 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d136      	bne.n	80017dc <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	e02d      	b.n	80017dc <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a1f      	ldr	r2, [pc, #124]	; (8001804 <HAL_ADC_Start_DMA+0x1d4>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d10e      	bne.n	80017a8 <HAL_ADC_Start_DMA+0x178>
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d107      	bne.n	80017a8 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017a6:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80017a8:	4b15      	ldr	r3, [pc, #84]	; (8001800 <HAL_ADC_Start_DMA+0x1d0>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 0310 	and.w	r3, r3, #16
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d113      	bne.n	80017dc <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a13      	ldr	r2, [pc, #76]	; (8001808 <HAL_ADC_Start_DMA+0x1d8>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d10e      	bne.n	80017dc <HAL_ADC_Start_DMA+0x1ac>
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d107      	bne.n	80017dc <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017da:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000000 	.word	0x20000000
 80017ec:	431bde83 	.word	0x431bde83
 80017f0:	fffff8fe 	.word	0xfffff8fe
 80017f4:	08001ca9 	.word	0x08001ca9
 80017f8:	08001d63 	.word	0x08001d63
 80017fc:	08001d7f 	.word	0x08001d7f
 8001800:	40012300 	.word	0x40012300
 8001804:	40012000 	.word	0x40012000
 8001808:	40012200 	.word	0x40012200

0800180c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001834:	2b01      	cmp	r3, #1
 8001836:	d101      	bne.n	800183c <HAL_ADC_ConfigChannel+0x1c>
 8001838:	2302      	movs	r3, #2
 800183a:	e12a      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x272>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b09      	cmp	r3, #9
 800184a:	d93a      	bls.n	80018c2 <HAL_ADC_ConfigChannel+0xa2>
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001854:	d035      	beq.n	80018c2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68d9      	ldr	r1, [r3, #12]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	b29b      	uxth	r3, r3
 8001862:	461a      	mov	r2, r3
 8001864:	4613      	mov	r3, r2
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	4413      	add	r3, r2
 800186a:	3b1e      	subs	r3, #30
 800186c:	2207      	movs	r2, #7
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43da      	mvns	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	400a      	ands	r2, r1
 800187a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a87      	ldr	r2, [pc, #540]	; (8001aa0 <HAL_ADC_ConfigChannel+0x280>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d10a      	bne.n	800189c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68d9      	ldr	r1, [r3, #12]
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	061a      	lsls	r2, r3, #24
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800189a:	e035      	b.n	8001908 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68d9      	ldr	r1, [r3, #12]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	4618      	mov	r0, r3
 80018ae:	4603      	mov	r3, r0
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	4403      	add	r3, r0
 80018b4:	3b1e      	subs	r3, #30
 80018b6:	409a      	lsls	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	430a      	orrs	r2, r1
 80018be:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018c0:	e022      	b.n	8001908 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6919      	ldr	r1, [r3, #16]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	461a      	mov	r2, r3
 80018d0:	4613      	mov	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4413      	add	r3, r2
 80018d6:	2207      	movs	r2, #7
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43da      	mvns	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	400a      	ands	r2, r1
 80018e4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6919      	ldr	r1, [r3, #16]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	4603      	mov	r3, r0
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4403      	add	r3, r0
 80018fe:	409a      	lsls	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b06      	cmp	r3, #6
 800190e:	d824      	bhi.n	800195a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	4613      	mov	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	3b05      	subs	r3, #5
 8001922:	221f      	movs	r2, #31
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43da      	mvns	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	400a      	ands	r2, r1
 8001930:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	b29b      	uxth	r3, r3
 800193e:	4618      	mov	r0, r3
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	3b05      	subs	r3, #5
 800194c:	fa00 f203 	lsl.w	r2, r0, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	430a      	orrs	r2, r1
 8001956:	635a      	str	r2, [r3, #52]	; 0x34
 8001958:	e04c      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b0c      	cmp	r3, #12
 8001960:	d824      	bhi.n	80019ac <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	3b23      	subs	r3, #35	; 0x23
 8001974:	221f      	movs	r2, #31
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43da      	mvns	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	400a      	ands	r2, r1
 8001982:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	b29b      	uxth	r3, r3
 8001990:	4618      	mov	r0, r3
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	3b23      	subs	r3, #35	; 0x23
 800199e:	fa00 f203 	lsl.w	r2, r0, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	631a      	str	r2, [r3, #48]	; 0x30
 80019aa:	e023      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	3b41      	subs	r3, #65	; 0x41
 80019be:	221f      	movs	r2, #31
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43da      	mvns	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	400a      	ands	r2, r1
 80019cc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	3b41      	subs	r3, #65	; 0x41
 80019e8:	fa00 f203 	lsl.w	r2, r0, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a2a      	ldr	r2, [pc, #168]	; (8001aa4 <HAL_ADC_ConfigChannel+0x284>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d10a      	bne.n	8001a14 <HAL_ADC_ConfigChannel+0x1f4>
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a06:	d105      	bne.n	8001a14 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001a08:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <HAL_ADC_ConfigChannel+0x288>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	4a26      	ldr	r2, [pc, #152]	; (8001aa8 <HAL_ADC_ConfigChannel+0x288>)
 8001a0e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001a12:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a22      	ldr	r2, [pc, #136]	; (8001aa4 <HAL_ADC_ConfigChannel+0x284>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d109      	bne.n	8001a32 <HAL_ADC_ConfigChannel+0x212>
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2b12      	cmp	r3, #18
 8001a24:	d105      	bne.n	8001a32 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001a26:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <HAL_ADC_ConfigChannel+0x288>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	4a1f      	ldr	r2, [pc, #124]	; (8001aa8 <HAL_ADC_ConfigChannel+0x288>)
 8001a2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a30:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a1b      	ldr	r2, [pc, #108]	; (8001aa4 <HAL_ADC_ConfigChannel+0x284>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d125      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x268>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a17      	ldr	r2, [pc, #92]	; (8001aa0 <HAL_ADC_ConfigChannel+0x280>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d003      	beq.n	8001a4e <HAL_ADC_ConfigChannel+0x22e>
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b11      	cmp	r3, #17
 8001a4c:	d11c      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001a4e:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <HAL_ADC_ConfigChannel+0x288>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	4a15      	ldr	r2, [pc, #84]	; (8001aa8 <HAL_ADC_ConfigChannel+0x288>)
 8001a54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a58:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a10      	ldr	r2, [pc, #64]	; (8001aa0 <HAL_ADC_ConfigChannel+0x280>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d111      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <HAL_ADC_ConfigChannel+0x28c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a11      	ldr	r2, [pc, #68]	; (8001ab0 <HAL_ADC_ConfigChannel+0x290>)
 8001a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6e:	0c9a      	lsrs	r2, r3, #18
 8001a70:	4613      	mov	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a7a:	e002      	b.n	8001a82 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1f9      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	10000012 	.word	0x10000012
 8001aa4:	40012000 	.word	0x40012000
 8001aa8:	40012300 	.word	0x40012300
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	431bde83 	.word	0x431bde83

08001ab4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001abc:	4b78      	ldr	r3, [pc, #480]	; (8001ca0 <ADC_Init+0x1ec>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	4a77      	ldr	r2, [pc, #476]	; (8001ca0 <ADC_Init+0x1ec>)
 8001ac2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001ac6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001ac8:	4b75      	ldr	r3, [pc, #468]	; (8001ca0 <ADC_Init+0x1ec>)
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	4973      	ldr	r1, [pc, #460]	; (8001ca0 <ADC_Init+0x1ec>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ae4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6859      	ldr	r1, [r3, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	021a      	lsls	r2, r3, #8
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6859      	ldr	r1, [r3, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6899      	ldr	r1, [r3, #8]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b42:	4a58      	ldr	r2, [pc, #352]	; (8001ca4 <ADC_Init+0x1f0>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d022      	beq.n	8001b8e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6899      	ldr	r1, [r3, #8]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6899      	ldr	r1, [r3, #8]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	e00f      	b.n	8001bae <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0202 	bic.w	r2, r2, #2
 8001bbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6899      	ldr	r1, [r3, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	005a      	lsls	r2, r3, #1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d01b      	beq.n	8001c14 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001bfa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6859      	ldr	r1, [r3, #4]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	3b01      	subs	r3, #1
 8001c08:	035a      	lsls	r2, r3, #13
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	e007      	b.n	8001c24 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c22:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	051a      	lsls	r2, r3, #20
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6899      	ldr	r1, [r3, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c66:	025a      	lsls	r2, r3, #9
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6899      	ldr	r1, [r3, #8]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	029a      	lsls	r2, r3, #10
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	609a      	str	r2, [r3, #8]
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	40012300 	.word	0x40012300
 8001ca4:	0f000001 	.word	0x0f000001

08001ca8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d13c      	bne.n	8001d3c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d12b      	bne.n	8001d34 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d127      	bne.n	8001d34 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d006      	beq.n	8001d00 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d119      	bne.n	8001d34 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0220 	bic.w	r2, r2, #32
 8001d0e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d105      	bne.n	8001d34 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	f043 0201 	orr.w	r2, r3, #1
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f7ff f89e 	bl	8000e76 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d3a:	e00e      	b.n	8001d5a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	f003 0310 	and.w	r3, r3, #16
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f7ff fd5f 	bl	800180c <HAL_ADC_ErrorCallback>
}
 8001d4e:	e004      	b.n	8001d5a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	4798      	blx	r3
}
 8001d5a:	bf00      	nop
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b084      	sub	sp, #16
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d6e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f7ff f875 	bl	8000e60 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b084      	sub	sp, #16
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2240      	movs	r2, #64	; 0x40
 8001d90:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	f043 0204 	orr.w	r2, r3, #4
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f7ff fd34 	bl	800180c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001da4:	bf00      	nop
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <__NVIC_SetPriorityGrouping+0x40>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dda:	4a04      	ldr	r2, [pc, #16]	; (8001dec <__NVIC_SetPriorityGrouping+0x40>)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	60d3      	str	r3, [r2, #12]
}
 8001de0:	bf00      	nop
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000ed00 	.word	0xe000ed00
 8001df0:	05fa0000 	.word	0x05fa0000

08001df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df8:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <__NVIC_GetPriorityGrouping+0x18>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	0a1b      	lsrs	r3, r3, #8
 8001dfe:	f003 0307 	and.w	r3, r3, #7
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	db0b      	blt.n	8001e3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	f003 021f 	and.w	r2, r3, #31
 8001e28:	4907      	ldr	r1, [pc, #28]	; (8001e48 <__NVIC_EnableIRQ+0x38>)
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	095b      	lsrs	r3, r3, #5
 8001e30:	2001      	movs	r0, #1
 8001e32:	fa00 f202 	lsl.w	r2, r0, r2
 8001e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000e100 	.word	0xe000e100

08001e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	6039      	str	r1, [r7, #0]
 8001e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	db0a      	blt.n	8001e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	490c      	ldr	r1, [pc, #48]	; (8001e98 <__NVIC_SetPriority+0x4c>)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	0112      	lsls	r2, r2, #4
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	440b      	add	r3, r1
 8001e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e74:	e00a      	b.n	8001e8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	4908      	ldr	r1, [pc, #32]	; (8001e9c <__NVIC_SetPriority+0x50>)
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	3b04      	subs	r3, #4
 8001e84:	0112      	lsls	r2, r2, #4
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	440b      	add	r3, r1
 8001e8a:	761a      	strb	r2, [r3, #24]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000e100 	.word	0xe000e100
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	; 0x24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f1c3 0307 	rsb	r3, r3, #7
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	bf28      	it	cs
 8001ebe:	2304      	movcs	r3, #4
 8001ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d902      	bls.n	8001ed0 <NVIC_EncodePriority+0x30>
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3b03      	subs	r3, #3
 8001ece:	e000      	b.n	8001ed2 <NVIC_EncodePriority+0x32>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef2:	43d9      	mvns	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	4313      	orrs	r3, r2
         );
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3724      	adds	r7, #36	; 0x24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
	...

08001f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f18:	d301      	bcc.n	8001f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e00f      	b.n	8001f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f1e:	4a0a      	ldr	r2, [pc, #40]	; (8001f48 <SysTick_Config+0x40>)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f26:	210f      	movs	r1, #15
 8001f28:	f04f 30ff 	mov.w	r0, #4294967295
 8001f2c:	f7ff ff8e 	bl	8001e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f30:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <SysTick_Config+0x40>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f36:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <SysTick_Config+0x40>)
 8001f38:	2207      	movs	r2, #7
 8001f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	e000e010 	.word	0xe000e010

08001f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff ff29 	bl	8001dac <__NVIC_SetPriorityGrouping>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b086      	sub	sp, #24
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	4603      	mov	r3, r0
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f74:	f7ff ff3e 	bl	8001df4 <__NVIC_GetPriorityGrouping>
 8001f78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	6978      	ldr	r0, [r7, #20]
 8001f80:	f7ff ff8e 	bl	8001ea0 <NVIC_EncodePriority>
 8001f84:	4602      	mov	r2, r0
 8001f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff5d 	bl	8001e4c <__NVIC_SetPriority>
}
 8001f92:	bf00      	nop
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff ff31 	bl	8001e10 <__NVIC_EnableIRQ>
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff ffa2 	bl	8001f08 <SysTick_Config>
 8001fc4:	4603      	mov	r3, r0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fdc:	f7ff f9f6 	bl	80013cc <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e099      	b.n	8002120 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0201 	bic.w	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800200c:	e00f      	b.n	800202e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800200e:	f7ff f9dd 	bl	80013cc <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b05      	cmp	r3, #5
 800201a:	d908      	bls.n	800202e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2220      	movs	r2, #32
 8002020:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2203      	movs	r2, #3
 8002026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e078      	b.n	8002120 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1e8      	bne.n	800200e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	4b38      	ldr	r3, [pc, #224]	; (8002128 <HAL_DMA_Init+0x158>)
 8002048:	4013      	ands	r3, r2
 800204a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800205a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002066:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002072:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	4313      	orrs	r3, r2
 800207e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	2b04      	cmp	r3, #4
 8002086:	d107      	bne.n	8002098 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	4313      	orrs	r3, r2
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	4313      	orrs	r3, r2
 8002096:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f023 0307 	bic.w	r3, r3, #7
 80020ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d117      	bne.n	80020f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00e      	beq.n	80020f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 fab3 	bl	8002640 <DMA_CheckFifoParam>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d008      	beq.n	80020f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2240      	movs	r2, #64	; 0x40
 80020e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80020ee:	2301      	movs	r3, #1
 80020f0:	e016      	b.n	8002120 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 fa6a 	bl	80025d4 <DMA_CalcBaseAndBitshift>
 8002100:	4603      	mov	r3, r0
 8002102:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002108:	223f      	movs	r2, #63	; 0x3f
 800210a:	409a      	lsls	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	e010803f 	.word	0xe010803f

0800212c <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <HAL_DMA_Start+0x20>
 8002148:	2302      	movs	r3, #2
 800214a:	e026      	b.n	800219a <HAL_DMA_Start+0x6e>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b01      	cmp	r3, #1
 800215e:	d115      	bne.n	800218c <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2202      	movs	r2, #2
 8002164:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	68b9      	ldr	r1, [r7, #8]
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 f9ff 	bl	8002578 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f042 0201 	orr.w	r2, r2, #1
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	e005      	b.n	8002198 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002194:	2302      	movs	r3, #2
 8002196:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8002198:	7dfb      	ldrb	r3, [r7, #23]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b086      	sub	sp, #24
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	60f8      	str	r0, [r7, #12]
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
 80021ae:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b8:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <HAL_DMA_Start_IT+0x26>
 80021c4:	2302      	movs	r3, #2
 80021c6:	e048      	b.n	800225a <HAL_DMA_Start_IT+0xb8>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d137      	bne.n	800224c <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2202      	movs	r2, #2
 80021e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	68b9      	ldr	r1, [r7, #8]
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f000 f9c1 	bl	8002578 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fa:	223f      	movs	r2, #63	; 0x3f
 80021fc:	409a      	lsls	r2, r3
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f042 0216 	orr.w	r2, r2, #22
 8002210:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695a      	ldr	r2, [r3, #20]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002220:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	2b00      	cmp	r3, #0
 8002228:	d007      	beq.n	800223a <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 0208 	orr.w	r2, r2, #8
 8002238:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 0201 	orr.w	r2, r2, #1
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	e005      	b.n	8002258 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002254:	2302      	movs	r3, #2
 8002256:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002258:	7dfb      	ldrb	r3, [r7, #23]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002270:	4b92      	ldr	r3, [pc, #584]	; (80024bc <HAL_DMA_IRQHandler+0x258>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a92      	ldr	r2, [pc, #584]	; (80024c0 <HAL_DMA_IRQHandler+0x25c>)
 8002276:	fba2 2303 	umull	r2, r3, r2, r3
 800227a:	0a9b      	lsrs	r3, r3, #10
 800227c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002282:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228e:	2208      	movs	r2, #8
 8002290:	409a      	lsls	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	4013      	ands	r3, r2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d01a      	beq.n	80022d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d013      	beq.n	80022d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0204 	bic.w	r2, r2, #4
 80022b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022bc:	2208      	movs	r2, #8
 80022be:	409a      	lsls	r2, r3
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c8:	f043 0201 	orr.w	r2, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d4:	2201      	movs	r2, #1
 80022d6:	409a      	lsls	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4013      	ands	r3, r2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d012      	beq.n	8002306 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00b      	beq.n	8002306 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f2:	2201      	movs	r2, #1
 80022f4:	409a      	lsls	r2, r3
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fe:	f043 0202 	orr.w	r2, r3, #2
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230a:	2204      	movs	r2, #4
 800230c:	409a      	lsls	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4013      	ands	r3, r2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d012      	beq.n	800233c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00b      	beq.n	800233c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002328:	2204      	movs	r2, #4
 800232a:	409a      	lsls	r2, r3
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002334:	f043 0204 	orr.w	r2, r3, #4
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002340:	2210      	movs	r2, #16
 8002342:	409a      	lsls	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4013      	ands	r3, r2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d043      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d03c      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235e:	2210      	movs	r2, #16
 8002360:	409a      	lsls	r2, r3
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d018      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d108      	bne.n	8002394 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	2b00      	cmp	r3, #0
 8002388:	d024      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	4798      	blx	r3
 8002392:	e01f      	b.n	80023d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002398:	2b00      	cmp	r3, #0
 800239a:	d01b      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	4798      	blx	r3
 80023a4:	e016      	b.n	80023d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d107      	bne.n	80023c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0208 	bic.w	r2, r2, #8
 80023c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d8:	2220      	movs	r2, #32
 80023da:	409a      	lsls	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4013      	ands	r3, r2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 808e 	beq.w	8002502 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0310 	and.w	r3, r3, #16
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 8086 	beq.w	8002502 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fa:	2220      	movs	r2, #32
 80023fc:	409a      	lsls	r2, r3
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b05      	cmp	r3, #5
 800240c:	d136      	bne.n	800247c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 0216 	bic.w	r2, r2, #22
 800241c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800242c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	2b00      	cmp	r3, #0
 8002434:	d103      	bne.n	800243e <HAL_DMA_IRQHandler+0x1da>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800243a:	2b00      	cmp	r3, #0
 800243c:	d007      	beq.n	800244e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0208 	bic.w	r2, r2, #8
 800244c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002452:	223f      	movs	r2, #63	; 0x3f
 8002454:	409a      	lsls	r2, r3
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800246e:	2b00      	cmp	r3, #0
 8002470:	d07d      	beq.n	800256e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	4798      	blx	r3
        }
        return;
 800247a:	e078      	b.n	800256e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d01c      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d108      	bne.n	80024aa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249c:	2b00      	cmp	r3, #0
 800249e:	d030      	beq.n	8002502 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	4798      	blx	r3
 80024a8:	e02b      	b.n	8002502 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d027      	beq.n	8002502 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	4798      	blx	r3
 80024ba:	e022      	b.n	8002502 <HAL_DMA_IRQHandler+0x29e>
 80024bc:	20000000 	.word	0x20000000
 80024c0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10f      	bne.n	80024f2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0210 	bic.w	r2, r2, #16
 80024e0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002506:	2b00      	cmp	r3, #0
 8002508:	d032      	beq.n	8002570 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d022      	beq.n	800255c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2205      	movs	r2, #5
 800251a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0201 	bic.w	r2, r2, #1
 800252c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	3301      	adds	r3, #1
 8002532:	60bb      	str	r3, [r7, #8]
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	429a      	cmp	r2, r3
 8002538:	d307      	bcc.n	800254a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1f2      	bne.n	800252e <HAL_DMA_IRQHandler+0x2ca>
 8002548:	e000      	b.n	800254c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800254a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	4798      	blx	r3
 800256c:	e000      	b.n	8002570 <HAL_DMA_IRQHandler+0x30c>
        return;
 800256e:	bf00      	nop
    }
  }
}
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop

08002578 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002594:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	2b40      	cmp	r3, #64	; 0x40
 80025a4:	d108      	bne.n	80025b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025b6:	e007      	b.n	80025c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	60da      	str	r2, [r3, #12]
}
 80025c8:	bf00      	nop
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	3b10      	subs	r3, #16
 80025e4:	4a13      	ldr	r2, [pc, #76]	; (8002634 <DMA_CalcBaseAndBitshift+0x60>)
 80025e6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ea:	091b      	lsrs	r3, r3, #4
 80025ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025ee:	4a12      	ldr	r2, [pc, #72]	; (8002638 <DMA_CalcBaseAndBitshift+0x64>)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4413      	add	r3, r2
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d908      	bls.n	8002614 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	4b0c      	ldr	r3, [pc, #48]	; (800263c <DMA_CalcBaseAndBitshift+0x68>)
 800260a:	4013      	ands	r3, r2
 800260c:	1d1a      	adds	r2, r3, #4
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	659a      	str	r2, [r3, #88]	; 0x58
 8002612:	e006      	b.n	8002622 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	461a      	mov	r2, r3
 800261a:	4b08      	ldr	r3, [pc, #32]	; (800263c <DMA_CalcBaseAndBitshift+0x68>)
 800261c:	4013      	ands	r3, r2
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002626:	4618      	mov	r0, r3
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	aaaaaaab 	.word	0xaaaaaaab
 8002638:	080057a8 	.word	0x080057a8
 800263c:	fffffc00 	.word	0xfffffc00

08002640 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002648:	2300      	movs	r3, #0
 800264a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002650:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d11f      	bne.n	800269a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2b03      	cmp	r3, #3
 800265e:	d855      	bhi.n	800270c <DMA_CheckFifoParam+0xcc>
 8002660:	a201      	add	r2, pc, #4	; (adr r2, 8002668 <DMA_CheckFifoParam+0x28>)
 8002662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002666:	bf00      	nop
 8002668:	08002679 	.word	0x08002679
 800266c:	0800268b 	.word	0x0800268b
 8002670:	08002679 	.word	0x08002679
 8002674:	0800270d 	.word	0x0800270d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d045      	beq.n	8002710 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002688:	e042      	b.n	8002710 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002692:	d13f      	bne.n	8002714 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002698:	e03c      	b.n	8002714 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026a2:	d121      	bne.n	80026e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2b03      	cmp	r3, #3
 80026a8:	d836      	bhi.n	8002718 <DMA_CheckFifoParam+0xd8>
 80026aa:	a201      	add	r2, pc, #4	; (adr r2, 80026b0 <DMA_CheckFifoParam+0x70>)
 80026ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b0:	080026c1 	.word	0x080026c1
 80026b4:	080026c7 	.word	0x080026c7
 80026b8:	080026c1 	.word	0x080026c1
 80026bc:	080026d9 	.word	0x080026d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	73fb      	strb	r3, [r7, #15]
      break;
 80026c4:	e02f      	b.n	8002726 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d024      	beq.n	800271c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026d6:	e021      	b.n	800271c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026e0:	d11e      	bne.n	8002720 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026e6:	e01b      	b.n	8002720 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d902      	bls.n	80026f4 <DMA_CheckFifoParam+0xb4>
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	d003      	beq.n	80026fa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026f2:	e018      	b.n	8002726 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
      break;
 80026f8:	e015      	b.n	8002726 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00e      	beq.n	8002724 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
      break;
 800270a:	e00b      	b.n	8002724 <DMA_CheckFifoParam+0xe4>
      break;
 800270c:	bf00      	nop
 800270e:	e00a      	b.n	8002726 <DMA_CheckFifoParam+0xe6>
      break;
 8002710:	bf00      	nop
 8002712:	e008      	b.n	8002726 <DMA_CheckFifoParam+0xe6>
      break;
 8002714:	bf00      	nop
 8002716:	e006      	b.n	8002726 <DMA_CheckFifoParam+0xe6>
      break;
 8002718:	bf00      	nop
 800271a:	e004      	b.n	8002726 <DMA_CheckFifoParam+0xe6>
      break;
 800271c:	bf00      	nop
 800271e:	e002      	b.n	8002726 <DMA_CheckFifoParam+0xe6>
      break;   
 8002720:	bf00      	nop
 8002722:	e000      	b.n	8002726 <DMA_CheckFifoParam+0xe6>
      break;
 8002724:	bf00      	nop
    }
  } 
  
  return status; 
 8002726:	7bfb      	ldrb	r3, [r7, #15]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002734:	b480      	push	{r7}
 8002736:	b089      	sub	sp, #36	; 0x24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800273e:	2300      	movs	r3, #0
 8002740:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002746:	2300      	movs	r3, #0
 8002748:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800274a:	2300      	movs	r3, #0
 800274c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]
 8002752:	e169      	b.n	8002a28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002754:	2201      	movs	r2, #1
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	4013      	ands	r3, r2
 8002766:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	429a      	cmp	r2, r3
 800276e:	f040 8158 	bne.w	8002a22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d00b      	beq.n	8002792 <HAL_GPIO_Init+0x5e>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d007      	beq.n	8002792 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002786:	2b11      	cmp	r3, #17
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b12      	cmp	r3, #18
 8002790:	d130      	bne.n	80027f4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	2203      	movs	r2, #3
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027c8:	2201      	movs	r2, #1
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	091b      	lsrs	r3, r3, #4
 80027de:	f003 0201 	and.w	r2, r3, #1
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	2203      	movs	r2, #3
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d003      	beq.n	8002834 <HAL_GPIO_Init+0x100>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b12      	cmp	r3, #18
 8002832:	d123      	bne.n	800287c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	08da      	lsrs	r2, r3, #3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3208      	adds	r2, #8
 800283c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	220f      	movs	r2, #15
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	691a      	ldr	r2, [r3, #16]
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	08da      	lsrs	r2, r3, #3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3208      	adds	r2, #8
 8002876:	69b9      	ldr	r1, [r7, #24]
 8002878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	2203      	movs	r2, #3
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 0203 	and.w	r2, r3, #3
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 80b2 	beq.w	8002a22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028be:	4b5f      	ldr	r3, [pc, #380]	; (8002a3c <HAL_GPIO_Init+0x308>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	4a5e      	ldr	r2, [pc, #376]	; (8002a3c <HAL_GPIO_Init+0x308>)
 80028c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028c8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ca:	4b5c      	ldr	r3, [pc, #368]	; (8002a3c <HAL_GPIO_Init+0x308>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028d6:	4a5a      	ldr	r2, [pc, #360]	; (8002a40 <HAL_GPIO_Init+0x30c>)
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	089b      	lsrs	r3, r3, #2
 80028dc:	3302      	adds	r3, #2
 80028de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	220f      	movs	r2, #15
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43db      	mvns	r3, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4013      	ands	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a51      	ldr	r2, [pc, #324]	; (8002a44 <HAL_GPIO_Init+0x310>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d02b      	beq.n	800295a <HAL_GPIO_Init+0x226>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a50      	ldr	r2, [pc, #320]	; (8002a48 <HAL_GPIO_Init+0x314>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d025      	beq.n	8002956 <HAL_GPIO_Init+0x222>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a4f      	ldr	r2, [pc, #316]	; (8002a4c <HAL_GPIO_Init+0x318>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d01f      	beq.n	8002952 <HAL_GPIO_Init+0x21e>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a4e      	ldr	r2, [pc, #312]	; (8002a50 <HAL_GPIO_Init+0x31c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d019      	beq.n	800294e <HAL_GPIO_Init+0x21a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a4d      	ldr	r2, [pc, #308]	; (8002a54 <HAL_GPIO_Init+0x320>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d013      	beq.n	800294a <HAL_GPIO_Init+0x216>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a4c      	ldr	r2, [pc, #304]	; (8002a58 <HAL_GPIO_Init+0x324>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d00d      	beq.n	8002946 <HAL_GPIO_Init+0x212>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a4b      	ldr	r2, [pc, #300]	; (8002a5c <HAL_GPIO_Init+0x328>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d007      	beq.n	8002942 <HAL_GPIO_Init+0x20e>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a4a      	ldr	r2, [pc, #296]	; (8002a60 <HAL_GPIO_Init+0x32c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d101      	bne.n	800293e <HAL_GPIO_Init+0x20a>
 800293a:	2307      	movs	r3, #7
 800293c:	e00e      	b.n	800295c <HAL_GPIO_Init+0x228>
 800293e:	2308      	movs	r3, #8
 8002940:	e00c      	b.n	800295c <HAL_GPIO_Init+0x228>
 8002942:	2306      	movs	r3, #6
 8002944:	e00a      	b.n	800295c <HAL_GPIO_Init+0x228>
 8002946:	2305      	movs	r3, #5
 8002948:	e008      	b.n	800295c <HAL_GPIO_Init+0x228>
 800294a:	2304      	movs	r3, #4
 800294c:	e006      	b.n	800295c <HAL_GPIO_Init+0x228>
 800294e:	2303      	movs	r3, #3
 8002950:	e004      	b.n	800295c <HAL_GPIO_Init+0x228>
 8002952:	2302      	movs	r3, #2
 8002954:	e002      	b.n	800295c <HAL_GPIO_Init+0x228>
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <HAL_GPIO_Init+0x228>
 800295a:	2300      	movs	r3, #0
 800295c:	69fa      	ldr	r2, [r7, #28]
 800295e:	f002 0203 	and.w	r2, r2, #3
 8002962:	0092      	lsls	r2, r2, #2
 8002964:	4093      	lsls	r3, r2
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4313      	orrs	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800296c:	4934      	ldr	r1, [pc, #208]	; (8002a40 <HAL_GPIO_Init+0x30c>)
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	089b      	lsrs	r3, r3, #2
 8002972:	3302      	adds	r3, #2
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800297a:	4b3a      	ldr	r3, [pc, #232]	; (8002a64 <HAL_GPIO_Init+0x330>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	43db      	mvns	r3, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4013      	ands	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800299e:	4a31      	ldr	r2, [pc, #196]	; (8002a64 <HAL_GPIO_Init+0x330>)
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029a4:	4b2f      	ldr	r3, [pc, #188]	; (8002a64 <HAL_GPIO_Init+0x330>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029c8:	4a26      	ldr	r2, [pc, #152]	; (8002a64 <HAL_GPIO_Init+0x330>)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ce:	4b25      	ldr	r3, [pc, #148]	; (8002a64 <HAL_GPIO_Init+0x330>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	43db      	mvns	r3, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4013      	ands	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029f2:	4a1c      	ldr	r2, [pc, #112]	; (8002a64 <HAL_GPIO_Init+0x330>)
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029f8:	4b1a      	ldr	r3, [pc, #104]	; (8002a64 <HAL_GPIO_Init+0x330>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d003      	beq.n	8002a1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a1c:	4a11      	ldr	r2, [pc, #68]	; (8002a64 <HAL_GPIO_Init+0x330>)
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3301      	adds	r3, #1
 8002a26:	61fb      	str	r3, [r7, #28]
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	2b0f      	cmp	r3, #15
 8002a2c:	f67f ae92 	bls.w	8002754 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a30:	bf00      	nop
 8002a32:	3724      	adds	r7, #36	; 0x24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40013800 	.word	0x40013800
 8002a44:	40020000 	.word	0x40020000
 8002a48:	40020400 	.word	0x40020400
 8002a4c:	40020800 	.word	0x40020800
 8002a50:	40020c00 	.word	0x40020c00
 8002a54:	40021000 	.word	0x40021000
 8002a58:	40021400 	.word	0x40021400
 8002a5c:	40021800 	.word	0x40021800
 8002a60:	40021c00 	.word	0x40021c00
 8002a64:	40013c00 	.word	0x40013c00

08002a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	807b      	strh	r3, [r7, #2]
 8002a74:	4613      	mov	r3, r2
 8002a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a78:	787b      	ldrb	r3, [r7, #1]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a7e:	887a      	ldrh	r2, [r7, #2]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a84:	e003      	b.n	8002a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a86:	887b      	ldrh	r3, [r7, #2]
 8002a88:	041a      	lsls	r2, r3, #16
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	619a      	str	r2, [r3, #24]
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a9c:	b08f      	sub	sp, #60	; 0x3c
 8002a9e:	af0a      	add	r7, sp, #40	; 0x28
 8002aa0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e116      	b.n	8002cda <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d106      	bne.n	8002acc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7fe fb1c 	bl	8001104 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2203      	movs	r2, #3
 8002ad0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d102      	bne.n	8002ae6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f002 fb3e 	bl	800516c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	603b      	str	r3, [r7, #0]
 8002af6:	687e      	ldr	r6, [r7, #4]
 8002af8:	466d      	mov	r5, sp
 8002afa:	f106 0410 	add.w	r4, r6, #16
 8002afe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b06:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b0a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b0e:	1d33      	adds	r3, r6, #4
 8002b10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b12:	6838      	ldr	r0, [r7, #0]
 8002b14:	f002 facc 	bl	80050b0 <USB_CoreInit>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d005      	beq.n	8002b2a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2202      	movs	r2, #2
 8002b22:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e0d7      	b.n	8002cda <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2100      	movs	r1, #0
 8002b30:	4618      	mov	r0, r3
 8002b32:	f002 fb2c 	bl	800518e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b36:	2300      	movs	r3, #0
 8002b38:	73fb      	strb	r3, [r7, #15]
 8002b3a:	e04a      	b.n	8002bd2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b3c:	7bfa      	ldrb	r2, [r7, #15]
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	1a9b      	subs	r3, r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	333d      	adds	r3, #61	; 0x3d
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b50:	7bfa      	ldrb	r2, [r7, #15]
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	1a9b      	subs	r3, r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	333c      	adds	r3, #60	; 0x3c
 8002b60:	7bfa      	ldrb	r2, [r7, #15]
 8002b62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b64:	7bfa      	ldrb	r2, [r7, #15]
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	b298      	uxth	r0, r3
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	1a9b      	subs	r3, r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	3342      	adds	r3, #66	; 0x42
 8002b78:	4602      	mov	r2, r0
 8002b7a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b7c:	7bfa      	ldrb	r2, [r7, #15]
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	4613      	mov	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	1a9b      	subs	r3, r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	333f      	adds	r3, #63	; 0x3f
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b90:	7bfa      	ldrb	r2, [r7, #15]
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	1a9b      	subs	r3, r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	3344      	adds	r3, #68	; 0x44
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ba4:	7bfa      	ldrb	r2, [r7, #15]
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	1a9b      	subs	r3, r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	3348      	adds	r3, #72	; 0x48
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bb8:	7bfa      	ldrb	r2, [r7, #15]
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	1a9b      	subs	r3, r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	3350      	adds	r3, #80	; 0x50
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	73fb      	strb	r3, [r7, #15]
 8002bd2:	7bfa      	ldrb	r2, [r7, #15]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d3af      	bcc.n	8002b3c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bdc:	2300      	movs	r3, #0
 8002bde:	73fb      	strb	r3, [r7, #15]
 8002be0:	e044      	b.n	8002c6c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002be2:	7bfa      	ldrb	r2, [r7, #15]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	1a9b      	subs	r3, r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	440b      	add	r3, r1
 8002bf0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bf8:	7bfa      	ldrb	r2, [r7, #15]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002c0a:	7bfa      	ldrb	r2, [r7, #15]
 8002c0c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c0e:	7bfa      	ldrb	r2, [r7, #15]
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	1a9b      	subs	r3, r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c24:	7bfa      	ldrb	r2, [r7, #15]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	1a9b      	subs	r3, r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c3a:	7bfa      	ldrb	r2, [r7, #15]
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	1a9b      	subs	r3, r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	440b      	add	r3, r1
 8002c48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c50:	7bfa      	ldrb	r2, [r7, #15]
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	1a9b      	subs	r3, r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	73fb      	strb	r3, [r7, #15]
 8002c6c:	7bfa      	ldrb	r2, [r7, #15]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d3b5      	bcc.n	8002be2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	687e      	ldr	r6, [r7, #4]
 8002c7e:	466d      	mov	r5, sp
 8002c80:	f106 0410 	add.w	r4, r6, #16
 8002c84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c90:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c94:	1d33      	adds	r3, r6, #4
 8002c96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c98:	6838      	ldr	r0, [r7, #0]
 8002c9a:	f002 faa3 	bl	80051e4 <USB_DevInit>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d005      	beq.n	8002cb0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e014      	b.n	8002cda <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d102      	bne.n	8002cce <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f80b 	bl	8002ce4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f002 fc55 	bl	8005582 <USB_DevDisconnect>

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002ce4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d12:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <HAL_PCDEx_ActivateLPM+0x44>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	10000003 	.word	0x10000003

08002d2c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d30:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a04      	ldr	r2, [pc, #16]	; (8002d48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d3a:	6013      	str	r3, [r2, #0]
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40007000 	.word	0x40007000

08002d4c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002d52:	2300      	movs	r3, #0
 8002d54:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d56:	4b23      	ldr	r3, [pc, #140]	; (8002de4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	4a22      	ldr	r2, [pc, #136]	; (8002de4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d60:	6413      	str	r3, [r2, #64]	; 0x40
 8002d62:	4b20      	ldr	r3, [pc, #128]	; (8002de4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6a:	603b      	str	r3, [r7, #0]
 8002d6c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002d6e:	4b1e      	ldr	r3, [pc, #120]	; (8002de8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a1d      	ldr	r2, [pc, #116]	; (8002de8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d78:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d7a:	f7fe fb27 	bl	80013cc <HAL_GetTick>
 8002d7e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d80:	e009      	b.n	8002d96 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d82:	f7fe fb23 	bl	80013cc <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d90:	d901      	bls.n	8002d96 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e022      	b.n	8002ddc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d96:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da2:	d1ee      	bne.n	8002d82 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002da4:	4b10      	ldr	r3, [pc, #64]	; (8002de8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a0f      	ldr	r2, [pc, #60]	; (8002de8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002db0:	f7fe fb0c 	bl	80013cc <HAL_GetTick>
 8002db4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002db6:	e009      	b.n	8002dcc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002db8:	f7fe fb08 	bl	80013cc <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dc6:	d901      	bls.n	8002dcc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e007      	b.n	8002ddc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002dcc:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dd8:	d1ee      	bne.n	8002db8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40023800 	.word	0x40023800
 8002de8:	40007000 	.word	0x40007000

08002dec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002df4:	2300      	movs	r3, #0
 8002df6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e291      	b.n	8003326 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 8087 	beq.w	8002f1e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e10:	4b96      	ldr	r3, [pc, #600]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 030c 	and.w	r3, r3, #12
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d00c      	beq.n	8002e36 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e1c:	4b93      	ldr	r3, [pc, #588]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 030c 	and.w	r3, r3, #12
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d112      	bne.n	8002e4e <HAL_RCC_OscConfig+0x62>
 8002e28:	4b90      	ldr	r3, [pc, #576]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e34:	d10b      	bne.n	8002e4e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e36:	4b8d      	ldr	r3, [pc, #564]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d06c      	beq.n	8002f1c <HAL_RCC_OscConfig+0x130>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d168      	bne.n	8002f1c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e26b      	b.n	8003326 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e56:	d106      	bne.n	8002e66 <HAL_RCC_OscConfig+0x7a>
 8002e58:	4b84      	ldr	r3, [pc, #528]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a83      	ldr	r2, [pc, #524]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e62:	6013      	str	r3, [r2, #0]
 8002e64:	e02e      	b.n	8002ec4 <HAL_RCC_OscConfig+0xd8>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10c      	bne.n	8002e88 <HAL_RCC_OscConfig+0x9c>
 8002e6e:	4b7f      	ldr	r3, [pc, #508]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a7e      	ldr	r2, [pc, #504]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	4b7c      	ldr	r3, [pc, #496]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a7b      	ldr	r2, [pc, #492]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002e80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	e01d      	b.n	8002ec4 <HAL_RCC_OscConfig+0xd8>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e90:	d10c      	bne.n	8002eac <HAL_RCC_OscConfig+0xc0>
 8002e92:	4b76      	ldr	r3, [pc, #472]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a75      	ldr	r2, [pc, #468]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e9c:	6013      	str	r3, [r2, #0]
 8002e9e:	4b73      	ldr	r3, [pc, #460]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a72      	ldr	r2, [pc, #456]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	e00b      	b.n	8002ec4 <HAL_RCC_OscConfig+0xd8>
 8002eac:	4b6f      	ldr	r3, [pc, #444]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a6e      	ldr	r2, [pc, #440]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb6:	6013      	str	r3, [r2, #0]
 8002eb8:	4b6c      	ldr	r3, [pc, #432]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a6b      	ldr	r2, [pc, #428]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ec2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d013      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ecc:	f7fe fa7e 	bl	80013cc <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed4:	f7fe fa7a 	bl	80013cc <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b64      	cmp	r3, #100	; 0x64
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e21f      	b.n	8003326 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee6:	4b61      	ldr	r3, [pc, #388]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0xe8>
 8002ef2:	e014      	b.n	8002f1e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef4:	f7fe fa6a 	bl	80013cc <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002efc:	f7fe fa66 	bl	80013cc <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b64      	cmp	r3, #100	; 0x64
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e20b      	b.n	8003326 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0e:	4b57      	ldr	r3, [pc, #348]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f0      	bne.n	8002efc <HAL_RCC_OscConfig+0x110>
 8002f1a:	e000      	b.n	8002f1e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d069      	beq.n	8002ffe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f2a:	4b50      	ldr	r3, [pc, #320]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00b      	beq.n	8002f4e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f36:	4b4d      	ldr	r3, [pc, #308]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d11c      	bne.n	8002f7c <HAL_RCC_OscConfig+0x190>
 8002f42:	4b4a      	ldr	r3, [pc, #296]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d116      	bne.n	8002f7c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4e:	4b47      	ldr	r3, [pc, #284]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d005      	beq.n	8002f66 <HAL_RCC_OscConfig+0x17a>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d001      	beq.n	8002f66 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e1df      	b.n	8003326 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f66:	4b41      	ldr	r3, [pc, #260]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	493d      	ldr	r1, [pc, #244]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f7a:	e040      	b.n	8002ffe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d023      	beq.n	8002fcc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f84:	4b39      	ldr	r3, [pc, #228]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a38      	ldr	r2, [pc, #224]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f90:	f7fe fa1c 	bl	80013cc <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f98:	f7fe fa18 	bl	80013cc <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e1bd      	b.n	8003326 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002faa:	4b30      	ldr	r3, [pc, #192]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0f0      	beq.n	8002f98 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb6:	4b2d      	ldr	r3, [pc, #180]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	4929      	ldr	r1, [pc, #164]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	600b      	str	r3, [r1, #0]
 8002fca:	e018      	b.n	8002ffe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fcc:	4b27      	ldr	r3, [pc, #156]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a26      	ldr	r2, [pc, #152]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002fd2:	f023 0301 	bic.w	r3, r3, #1
 8002fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd8:	f7fe f9f8 	bl	80013cc <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fe0:	f7fe f9f4 	bl	80013cc <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e199      	b.n	8003326 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff2:	4b1e      	ldr	r3, [pc, #120]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d038      	beq.n	800307c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d019      	beq.n	8003046 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003012:	4b16      	ldr	r3, [pc, #88]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8003014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003016:	4a15      	ldr	r2, [pc, #84]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8003018:	f043 0301 	orr.w	r3, r3, #1
 800301c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301e:	f7fe f9d5 	bl	80013cc <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003026:	f7fe f9d1 	bl	80013cc <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e176      	b.n	8003326 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003038:	4b0c      	ldr	r3, [pc, #48]	; (800306c <HAL_RCC_OscConfig+0x280>)
 800303a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0f0      	beq.n	8003026 <HAL_RCC_OscConfig+0x23a>
 8003044:	e01a      	b.n	800307c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003046:	4b09      	ldr	r3, [pc, #36]	; (800306c <HAL_RCC_OscConfig+0x280>)
 8003048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800304a:	4a08      	ldr	r2, [pc, #32]	; (800306c <HAL_RCC_OscConfig+0x280>)
 800304c:	f023 0301 	bic.w	r3, r3, #1
 8003050:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003052:	f7fe f9bb 	bl	80013cc <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003058:	e00a      	b.n	8003070 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800305a:	f7fe f9b7 	bl	80013cc <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d903      	bls.n	8003070 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e15c      	b.n	8003326 <HAL_RCC_OscConfig+0x53a>
 800306c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003070:	4b91      	ldr	r3, [pc, #580]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 8003072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1ee      	bne.n	800305a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 80a4 	beq.w	80031d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800308a:	4b8b      	ldr	r3, [pc, #556]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10d      	bne.n	80030b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003096:	4b88      	ldr	r3, [pc, #544]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	4a87      	ldr	r2, [pc, #540]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 800309c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a0:	6413      	str	r3, [r2, #64]	; 0x40
 80030a2:	4b85      	ldr	r3, [pc, #532]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030aa:	60bb      	str	r3, [r7, #8]
 80030ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ae:	2301      	movs	r3, #1
 80030b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030b2:	4b82      	ldr	r3, [pc, #520]	; (80032bc <HAL_RCC_OscConfig+0x4d0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d118      	bne.n	80030f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80030be:	4b7f      	ldr	r3, [pc, #508]	; (80032bc <HAL_RCC_OscConfig+0x4d0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a7e      	ldr	r2, [pc, #504]	; (80032bc <HAL_RCC_OscConfig+0x4d0>)
 80030c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ca:	f7fe f97f 	bl	80013cc <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d2:	f7fe f97b 	bl	80013cc <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b64      	cmp	r3, #100	; 0x64
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e120      	b.n	8003326 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030e4:	4b75      	ldr	r3, [pc, #468]	; (80032bc <HAL_RCC_OscConfig+0x4d0>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0f0      	beq.n	80030d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d106      	bne.n	8003106 <HAL_RCC_OscConfig+0x31a>
 80030f8:	4b6f      	ldr	r3, [pc, #444]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 80030fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fc:	4a6e      	ldr	r2, [pc, #440]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	6713      	str	r3, [r2, #112]	; 0x70
 8003104:	e02d      	b.n	8003162 <HAL_RCC_OscConfig+0x376>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10c      	bne.n	8003128 <HAL_RCC_OscConfig+0x33c>
 800310e:	4b6a      	ldr	r3, [pc, #424]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 8003110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003112:	4a69      	ldr	r2, [pc, #420]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 8003114:	f023 0301 	bic.w	r3, r3, #1
 8003118:	6713      	str	r3, [r2, #112]	; 0x70
 800311a:	4b67      	ldr	r3, [pc, #412]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311e:	4a66      	ldr	r2, [pc, #408]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 8003120:	f023 0304 	bic.w	r3, r3, #4
 8003124:	6713      	str	r3, [r2, #112]	; 0x70
 8003126:	e01c      	b.n	8003162 <HAL_RCC_OscConfig+0x376>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	2b05      	cmp	r3, #5
 800312e:	d10c      	bne.n	800314a <HAL_RCC_OscConfig+0x35e>
 8003130:	4b61      	ldr	r3, [pc, #388]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 8003132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003134:	4a60      	ldr	r2, [pc, #384]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 8003136:	f043 0304 	orr.w	r3, r3, #4
 800313a:	6713      	str	r3, [r2, #112]	; 0x70
 800313c:	4b5e      	ldr	r3, [pc, #376]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 800313e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003140:	4a5d      	ldr	r2, [pc, #372]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 8003142:	f043 0301 	orr.w	r3, r3, #1
 8003146:	6713      	str	r3, [r2, #112]	; 0x70
 8003148:	e00b      	b.n	8003162 <HAL_RCC_OscConfig+0x376>
 800314a:	4b5b      	ldr	r3, [pc, #364]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 800314c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314e:	4a5a      	ldr	r2, [pc, #360]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 8003150:	f023 0301 	bic.w	r3, r3, #1
 8003154:	6713      	str	r3, [r2, #112]	; 0x70
 8003156:	4b58      	ldr	r3, [pc, #352]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 8003158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315a:	4a57      	ldr	r2, [pc, #348]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 800315c:	f023 0304 	bic.w	r3, r3, #4
 8003160:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d015      	beq.n	8003196 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316a:	f7fe f92f 	bl	80013cc <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003170:	e00a      	b.n	8003188 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003172:	f7fe f92b 	bl	80013cc <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003180:	4293      	cmp	r3, r2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e0ce      	b.n	8003326 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003188:	4b4b      	ldr	r3, [pc, #300]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0ee      	beq.n	8003172 <HAL_RCC_OscConfig+0x386>
 8003194:	e014      	b.n	80031c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003196:	f7fe f919 	bl	80013cc <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800319c:	e00a      	b.n	80031b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800319e:	f7fe f915 	bl	80013cc <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e0b8      	b.n	8003326 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b4:	4b40      	ldr	r3, [pc, #256]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 80031b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1ee      	bne.n	800319e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031c0:	7dfb      	ldrb	r3, [r7, #23]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d105      	bne.n	80031d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c6:	4b3c      	ldr	r3, [pc, #240]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	4a3b      	ldr	r2, [pc, #236]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 80031cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 80a4 	beq.w	8003324 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031dc:	4b36      	ldr	r3, [pc, #216]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 030c 	and.w	r3, r3, #12
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d06b      	beq.n	80032c0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d149      	bne.n	8003284 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f0:	4b31      	ldr	r3, [pc, #196]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a30      	ldr	r2, [pc, #192]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 80031f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fc:	f7fe f8e6 	bl	80013cc <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003204:	f7fe f8e2 	bl	80013cc <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e087      	b.n	8003326 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003216:	4b28      	ldr	r3, [pc, #160]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f0      	bne.n	8003204 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69da      	ldr	r2, [r3, #28]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	431a      	orrs	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	019b      	lsls	r3, r3, #6
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003238:	085b      	lsrs	r3, r3, #1
 800323a:	3b01      	subs	r3, #1
 800323c:	041b      	lsls	r3, r3, #16
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003244:	061b      	lsls	r3, r3, #24
 8003246:	4313      	orrs	r3, r2
 8003248:	4a1b      	ldr	r2, [pc, #108]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 800324a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800324e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003250:	4b19      	ldr	r3, [pc, #100]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a18      	ldr	r2, [pc, #96]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 8003256:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800325a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325c:	f7fe f8b6 	bl	80013cc <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003264:	f7fe f8b2 	bl	80013cc <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e057      	b.n	8003326 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003276:	4b10      	ldr	r3, [pc, #64]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f0      	beq.n	8003264 <HAL_RCC_OscConfig+0x478>
 8003282:	e04f      	b.n	8003324 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003284:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a0b      	ldr	r2, [pc, #44]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 800328a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800328e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003290:	f7fe f89c 	bl	80013cc <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003298:	f7fe f898 	bl	80013cc <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e03d      	b.n	8003326 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032aa:	4b03      	ldr	r3, [pc, #12]	; (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0x4ac>
 80032b6:	e035      	b.n	8003324 <HAL_RCC_OscConfig+0x538>
 80032b8:	40023800 	.word	0x40023800
 80032bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80032c0:	4b1b      	ldr	r3, [pc, #108]	; (8003330 <HAL_RCC_OscConfig+0x544>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d028      	beq.n	8003320 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032d8:	429a      	cmp	r2, r3
 80032da:	d121      	bne.n	8003320 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d11a      	bne.n	8003320 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032f0:	4013      	ands	r3, r2
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d111      	bne.n	8003320 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003306:	085b      	lsrs	r3, r3, #1
 8003308:	3b01      	subs	r3, #1
 800330a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800330c:	429a      	cmp	r2, r3
 800330e:	d107      	bne.n	8003320 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800331c:	429a      	cmp	r2, r3
 800331e:	d001      	beq.n	8003324 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e000      	b.n	8003326 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40023800 	.word	0x40023800

08003334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800333e:	2300      	movs	r3, #0
 8003340:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0d0      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800334c:	4b6a      	ldr	r3, [pc, #424]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 030f 	and.w	r3, r3, #15
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d910      	bls.n	800337c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335a:	4b67      	ldr	r3, [pc, #412]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f023 020f 	bic.w	r2, r3, #15
 8003362:	4965      	ldr	r1, [pc, #404]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	4313      	orrs	r3, r2
 8003368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800336a:	4b63      	ldr	r3, [pc, #396]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	429a      	cmp	r2, r3
 8003376:	d001      	beq.n	800337c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e0b8      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d020      	beq.n	80033ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003394:	4b59      	ldr	r3, [pc, #356]	; (80034fc <HAL_RCC_ClockConfig+0x1c8>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	4a58      	ldr	r2, [pc, #352]	; (80034fc <HAL_RCC_ClockConfig+0x1c8>)
 800339a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800339e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d005      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033ac:	4b53      	ldr	r3, [pc, #332]	; (80034fc <HAL_RCC_ClockConfig+0x1c8>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	4a52      	ldr	r2, [pc, #328]	; (80034fc <HAL_RCC_ClockConfig+0x1c8>)
 80033b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033b8:	4b50      	ldr	r3, [pc, #320]	; (80034fc <HAL_RCC_ClockConfig+0x1c8>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	494d      	ldr	r1, [pc, #308]	; (80034fc <HAL_RCC_ClockConfig+0x1c8>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d040      	beq.n	8003458 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d107      	bne.n	80033ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033de:	4b47      	ldr	r3, [pc, #284]	; (80034fc <HAL_RCC_ClockConfig+0x1c8>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d115      	bne.n	8003416 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e07f      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d107      	bne.n	8003406 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f6:	4b41      	ldr	r3, [pc, #260]	; (80034fc <HAL_RCC_ClockConfig+0x1c8>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d109      	bne.n	8003416 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e073      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003406:	4b3d      	ldr	r3, [pc, #244]	; (80034fc <HAL_RCC_ClockConfig+0x1c8>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e06b      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003416:	4b39      	ldr	r3, [pc, #228]	; (80034fc <HAL_RCC_ClockConfig+0x1c8>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f023 0203 	bic.w	r2, r3, #3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	4936      	ldr	r1, [pc, #216]	; (80034fc <HAL_RCC_ClockConfig+0x1c8>)
 8003424:	4313      	orrs	r3, r2
 8003426:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003428:	f7fd ffd0 	bl	80013cc <HAL_GetTick>
 800342c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342e:	e00a      	b.n	8003446 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003430:	f7fd ffcc 	bl	80013cc <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	f241 3288 	movw	r2, #5000	; 0x1388
 800343e:	4293      	cmp	r3, r2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e053      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003446:	4b2d      	ldr	r3, [pc, #180]	; (80034fc <HAL_RCC_ClockConfig+0x1c8>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 020c 	and.w	r2, r3, #12
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	429a      	cmp	r2, r3
 8003456:	d1eb      	bne.n	8003430 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003458:	4b27      	ldr	r3, [pc, #156]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 030f 	and.w	r3, r3, #15
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d210      	bcs.n	8003488 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003466:	4b24      	ldr	r3, [pc, #144]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f023 020f 	bic.w	r2, r3, #15
 800346e:	4922      	ldr	r1, [pc, #136]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	4313      	orrs	r3, r2
 8003474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003476:	4b20      	ldr	r3, [pc, #128]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	429a      	cmp	r2, r3
 8003482:	d001      	beq.n	8003488 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e032      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003494:	4b19      	ldr	r3, [pc, #100]	; (80034fc <HAL_RCC_ClockConfig+0x1c8>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	4916      	ldr	r1, [pc, #88]	; (80034fc <HAL_RCC_ClockConfig+0x1c8>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d009      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034b2:	4b12      	ldr	r3, [pc, #72]	; (80034fc <HAL_RCC_ClockConfig+0x1c8>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	490e      	ldr	r1, [pc, #56]	; (80034fc <HAL_RCC_ClockConfig+0x1c8>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034c6:	f000 f821 	bl	800350c <HAL_RCC_GetSysClockFreq>
 80034ca:	4601      	mov	r1, r0
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_RCC_ClockConfig+0x1c8>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	091b      	lsrs	r3, r3, #4
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	4a0a      	ldr	r2, [pc, #40]	; (8003500 <HAL_RCC_ClockConfig+0x1cc>)
 80034d8:	5cd3      	ldrb	r3, [r2, r3]
 80034da:	fa21 f303 	lsr.w	r3, r1, r3
 80034de:	4a09      	ldr	r2, [pc, #36]	; (8003504 <HAL_RCC_ClockConfig+0x1d0>)
 80034e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034e2:	4b09      	ldr	r3, [pc, #36]	; (8003508 <HAL_RCC_ClockConfig+0x1d4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fd ff2c 	bl	8001344 <HAL_InitTick>

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40023c00 	.word	0x40023c00
 80034fc:	40023800 	.word	0x40023800
 8003500:	08005790 	.word	0x08005790
 8003504:	20000000 	.word	0x20000000
 8003508:	20000004 	.word	0x20000004

0800350c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800350c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003512:	2300      	movs	r3, #0
 8003514:	607b      	str	r3, [r7, #4]
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	2300      	movs	r3, #0
 800351c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800351e:	2300      	movs	r3, #0
 8003520:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003522:	4b63      	ldr	r3, [pc, #396]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 030c 	and.w	r3, r3, #12
 800352a:	2b04      	cmp	r3, #4
 800352c:	d007      	beq.n	800353e <HAL_RCC_GetSysClockFreq+0x32>
 800352e:	2b08      	cmp	r3, #8
 8003530:	d008      	beq.n	8003544 <HAL_RCC_GetSysClockFreq+0x38>
 8003532:	2b00      	cmp	r3, #0
 8003534:	f040 80b4 	bne.w	80036a0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003538:	4b5e      	ldr	r3, [pc, #376]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800353a:	60bb      	str	r3, [r7, #8]
      break;
 800353c:	e0b3      	b.n	80036a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800353e:	4b5e      	ldr	r3, [pc, #376]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003540:	60bb      	str	r3, [r7, #8]
      break;
 8003542:	e0b0      	b.n	80036a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003544:	4b5a      	ldr	r3, [pc, #360]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800354c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800354e:	4b58      	ldr	r3, [pc, #352]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d04a      	beq.n	80035f0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800355a:	4b55      	ldr	r3, [pc, #340]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	099b      	lsrs	r3, r3, #6
 8003560:	f04f 0400 	mov.w	r4, #0
 8003564:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	ea03 0501 	and.w	r5, r3, r1
 8003570:	ea04 0602 	and.w	r6, r4, r2
 8003574:	4629      	mov	r1, r5
 8003576:	4632      	mov	r2, r6
 8003578:	f04f 0300 	mov.w	r3, #0
 800357c:	f04f 0400 	mov.w	r4, #0
 8003580:	0154      	lsls	r4, r2, #5
 8003582:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003586:	014b      	lsls	r3, r1, #5
 8003588:	4619      	mov	r1, r3
 800358a:	4622      	mov	r2, r4
 800358c:	1b49      	subs	r1, r1, r5
 800358e:	eb62 0206 	sbc.w	r2, r2, r6
 8003592:	f04f 0300 	mov.w	r3, #0
 8003596:	f04f 0400 	mov.w	r4, #0
 800359a:	0194      	lsls	r4, r2, #6
 800359c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80035a0:	018b      	lsls	r3, r1, #6
 80035a2:	1a5b      	subs	r3, r3, r1
 80035a4:	eb64 0402 	sbc.w	r4, r4, r2
 80035a8:	f04f 0100 	mov.w	r1, #0
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	00e2      	lsls	r2, r4, #3
 80035b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80035b6:	00d9      	lsls	r1, r3, #3
 80035b8:	460b      	mov	r3, r1
 80035ba:	4614      	mov	r4, r2
 80035bc:	195b      	adds	r3, r3, r5
 80035be:	eb44 0406 	adc.w	r4, r4, r6
 80035c2:	f04f 0100 	mov.w	r1, #0
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	0262      	lsls	r2, r4, #9
 80035cc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80035d0:	0259      	lsls	r1, r3, #9
 80035d2:	460b      	mov	r3, r1
 80035d4:	4614      	mov	r4, r2
 80035d6:	4618      	mov	r0, r3
 80035d8:	4621      	mov	r1, r4
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f04f 0400 	mov.w	r4, #0
 80035e0:	461a      	mov	r2, r3
 80035e2:	4623      	mov	r3, r4
 80035e4:	f7fc fe1c 	bl	8000220 <__aeabi_uldivmod>
 80035e8:	4603      	mov	r3, r0
 80035ea:	460c      	mov	r4, r1
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	e049      	b.n	8003684 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035f0:	4b2f      	ldr	r3, [pc, #188]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	099b      	lsrs	r3, r3, #6
 80035f6:	f04f 0400 	mov.w	r4, #0
 80035fa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	ea03 0501 	and.w	r5, r3, r1
 8003606:	ea04 0602 	and.w	r6, r4, r2
 800360a:	4629      	mov	r1, r5
 800360c:	4632      	mov	r2, r6
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	f04f 0400 	mov.w	r4, #0
 8003616:	0154      	lsls	r4, r2, #5
 8003618:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800361c:	014b      	lsls	r3, r1, #5
 800361e:	4619      	mov	r1, r3
 8003620:	4622      	mov	r2, r4
 8003622:	1b49      	subs	r1, r1, r5
 8003624:	eb62 0206 	sbc.w	r2, r2, r6
 8003628:	f04f 0300 	mov.w	r3, #0
 800362c:	f04f 0400 	mov.w	r4, #0
 8003630:	0194      	lsls	r4, r2, #6
 8003632:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003636:	018b      	lsls	r3, r1, #6
 8003638:	1a5b      	subs	r3, r3, r1
 800363a:	eb64 0402 	sbc.w	r4, r4, r2
 800363e:	f04f 0100 	mov.w	r1, #0
 8003642:	f04f 0200 	mov.w	r2, #0
 8003646:	00e2      	lsls	r2, r4, #3
 8003648:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800364c:	00d9      	lsls	r1, r3, #3
 800364e:	460b      	mov	r3, r1
 8003650:	4614      	mov	r4, r2
 8003652:	195b      	adds	r3, r3, r5
 8003654:	eb44 0406 	adc.w	r4, r4, r6
 8003658:	f04f 0100 	mov.w	r1, #0
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	02a2      	lsls	r2, r4, #10
 8003662:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003666:	0299      	lsls	r1, r3, #10
 8003668:	460b      	mov	r3, r1
 800366a:	4614      	mov	r4, r2
 800366c:	4618      	mov	r0, r3
 800366e:	4621      	mov	r1, r4
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f04f 0400 	mov.w	r4, #0
 8003676:	461a      	mov	r2, r3
 8003678:	4623      	mov	r3, r4
 800367a:	f7fc fdd1 	bl	8000220 <__aeabi_uldivmod>
 800367e:	4603      	mov	r3, r0
 8003680:	460c      	mov	r4, r1
 8003682:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003684:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	0c1b      	lsrs	r3, r3, #16
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	3301      	adds	r3, #1
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	fbb2 f3f3 	udiv	r3, r2, r3
 800369c:	60bb      	str	r3, [r7, #8]
      break;
 800369e:	e002      	b.n	80036a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036a0:	4b04      	ldr	r3, [pc, #16]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80036a2:	60bb      	str	r3, [r7, #8]
      break;
 80036a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036a6:	68bb      	ldr	r3, [r7, #8]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036b0:	40023800 	.word	0x40023800
 80036b4:	00f42400 	.word	0x00f42400
 80036b8:	007a1200 	.word	0x007a1200

080036bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036c0:	4b03      	ldr	r3, [pc, #12]	; (80036d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80036c2:	681b      	ldr	r3, [r3, #0]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	20000000 	.word	0x20000000

080036d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036d8:	f7ff fff0 	bl	80036bc <HAL_RCC_GetHCLKFreq>
 80036dc:	4601      	mov	r1, r0
 80036de:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	0a9b      	lsrs	r3, r3, #10
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	4a03      	ldr	r2, [pc, #12]	; (80036f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ea:	5cd3      	ldrb	r3, [r2, r3]
 80036ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40023800 	.word	0x40023800
 80036f8:	080057a0 	.word	0x080057a0

080036fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003700:	f7ff ffdc 	bl	80036bc <HAL_RCC_GetHCLKFreq>
 8003704:	4601      	mov	r1, r0
 8003706:	4b05      	ldr	r3, [pc, #20]	; (800371c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	0b5b      	lsrs	r3, r3, #13
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	4a03      	ldr	r2, [pc, #12]	; (8003720 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003712:	5cd3      	ldrb	r3, [r2, r3]
 8003714:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003718:	4618      	mov	r0, r3
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40023800 	.word	0x40023800
 8003720:	080057a0 	.word	0x080057a0

08003724 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b088      	sub	sp, #32
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800372c:	2300      	movs	r3, #0
 800372e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003730:	2300      	movs	r3, #0
 8003732:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8003734:	2300      	movs	r3, #0
 8003736:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003738:	2300      	movs	r3, #0
 800373a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d012      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003748:	4b65      	ldr	r3, [pc, #404]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	4a64      	ldr	r2, [pc, #400]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800374e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003752:	6093      	str	r3, [r2, #8]
 8003754:	4b62      	ldr	r3, [pc, #392]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	4960      	ldr	r1, [pc, #384]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800375e:	4313      	orrs	r3, r2
 8003760:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800376a:	2301      	movs	r3, #1
 800376c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d017      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800377a:	4b59      	ldr	r3, [pc, #356]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800377c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003780:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003788:	4955      	ldr	r1, [pc, #340]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800378a:	4313      	orrs	r3, r2
 800378c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003794:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003798:	d101      	bne.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800379a:	2301      	movs	r3, #1
 800379c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80037a6:	2301      	movs	r3, #1
 80037a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d017      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037b6:	4b4a      	ldr	r3, [pc, #296]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80037b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c4:	4946      	ldr	r1, [pc, #280]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037d4:	d101      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80037d6:	2301      	movs	r3, #1
 80037d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80037e2:	2301      	movs	r3, #1
 80037e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 808b 	beq.w	800390a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80037f4:	4b3a      	ldr	r3, [pc, #232]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	4a39      	ldr	r2, [pc, #228]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80037fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003800:	4b37      	ldr	r3, [pc, #220]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800380c:	4b35      	ldr	r3, [pc, #212]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a34      	ldr	r2, [pc, #208]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003816:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003818:	f7fd fdd8 	bl	80013cc <HAL_GetTick>
 800381c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800381e:	e008      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003820:	f7fd fdd4 	bl	80013cc <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b64      	cmp	r3, #100	; 0x64
 800382c:	d901      	bls.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e2ba      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003832:	4b2c      	ldr	r3, [pc, #176]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0f0      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800383e:	4b28      	ldr	r3, [pc, #160]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003846:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d035      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x196>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	429a      	cmp	r2, r3
 800385a:	d02e      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800385c:	4b20      	ldr	r3, [pc, #128]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800385e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003864:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003866:	4b1e      	ldr	r3, [pc, #120]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386a:	4a1d      	ldr	r2, [pc, #116]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800386c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003870:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003872:	4b1b      	ldr	r3, [pc, #108]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003876:	4a1a      	ldr	r2, [pc, #104]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800387c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800387e:	4a18      	ldr	r2, [pc, #96]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003884:	4b16      	ldr	r3, [pc, #88]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b01      	cmp	r3, #1
 800388e:	d114      	bne.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003890:	f7fd fd9c 	bl	80013cc <HAL_GetTick>
 8003894:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003896:	e00a      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003898:	f7fd fd98 	bl	80013cc <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d901      	bls.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e27c      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ae:	4b0c      	ldr	r3, [pc, #48]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80038b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0ee      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038c6:	d111      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80038c8:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80038d4:	4b04      	ldr	r3, [pc, #16]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80038d6:	400b      	ands	r3, r1
 80038d8:	4901      	ldr	r1, [pc, #4]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	608b      	str	r3, [r1, #8]
 80038de:	e00b      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80038e0:	40023800 	.word	0x40023800
 80038e4:	40007000 	.word	0x40007000
 80038e8:	0ffffcff 	.word	0x0ffffcff
 80038ec:	4ba3      	ldr	r3, [pc, #652]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	4aa2      	ldr	r2, [pc, #648]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80038f2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80038f6:	6093      	str	r3, [r2, #8]
 80038f8:	4ba0      	ldr	r3, [pc, #640]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80038fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003904:	499d      	ldr	r1, [pc, #628]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003906:	4313      	orrs	r3, r2
 8003908:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0310 	and.w	r3, r3, #16
 8003912:	2b00      	cmp	r3, #0
 8003914:	d010      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003916:	4b99      	ldr	r3, [pc, #612]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800391c:	4a97      	ldr	r2, [pc, #604]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800391e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003922:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003926:	4b95      	ldr	r3, [pc, #596]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003928:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003930:	4992      	ldr	r1, [pc, #584]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00a      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003944:	4b8d      	ldr	r3, [pc, #564]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003952:	498a      	ldr	r1, [pc, #552]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003954:	4313      	orrs	r3, r2
 8003956:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003966:	4b85      	ldr	r3, [pc, #532]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003974:	4981      	ldr	r1, [pc, #516]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00a      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003988:	4b7c      	ldr	r3, [pc, #496]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800398a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003996:	4979      	ldr	r1, [pc, #484]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039aa:	4b74      	ldr	r3, [pc, #464]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80039ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b0:	f023 0203 	bic.w	r2, r3, #3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b8:	4970      	ldr	r1, [pc, #448]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00a      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039cc:	4b6b      	ldr	r3, [pc, #428]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80039ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d2:	f023 020c 	bic.w	r2, r3, #12
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	4968      	ldr	r1, [pc, #416]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039ee:	4b63      	ldr	r3, [pc, #396]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80039f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fc:	495f      	ldr	r1, [pc, #380]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00a      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a10:	4b5a      	ldr	r3, [pc, #360]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a1e:	4957      	ldr	r1, [pc, #348]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00a      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a32:	4b52      	ldr	r3, [pc, #328]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a40:	494e      	ldr	r1, [pc, #312]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00a      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003a54:	4b49      	ldr	r3, [pc, #292]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a62:	4946      	ldr	r1, [pc, #280]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003a76:	4b41      	ldr	r3, [pc, #260]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a84:	493d      	ldr	r1, [pc, #244]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00a      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003a98:	4b38      	ldr	r3, [pc, #224]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa6:	4935      	ldr	r1, [pc, #212]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d011      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003aba:	4b30      	ldr	r3, [pc, #192]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac8:	492c      	ldr	r1, [pc, #176]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ad8:	d101      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8003ada:	2301      	movs	r3, #1
 8003adc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003aea:	4b24      	ldr	r3, [pc, #144]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003af8:	4920      	ldr	r1, [pc, #128]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00a      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b0c:	4b1b      	ldr	r3, [pc, #108]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b1a:	4918      	ldr	r1, [pc, #96]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003b2e:	4b13      	ldr	r3, [pc, #76]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b34:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b3c:	490f      	ldr	r1, [pc, #60]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d005      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b52:	f040 809c 	bne.w	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b56:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a08      	ldr	r2, [pc, #32]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b62:	f7fd fc33 	bl	80013cc <HAL_GetTick>
 8003b66:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b68:	e00a      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b6a:	f7fd fc2f 	bl	80013cc <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b64      	cmp	r3, #100	; 0x64
 8003b76:	d903      	bls.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e115      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8003b7c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b80:	4b8b      	ldr	r3, [pc, #556]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1ee      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d017      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d113      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ba0:	4b83      	ldr	r3, [pc, #524]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ba6:	0e1b      	lsrs	r3, r3, #24
 8003ba8:	f003 030f 	and.w	r3, r3, #15
 8003bac:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	019a      	lsls	r2, r3, #6
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	061b      	lsls	r3, r3, #24
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	071b      	lsls	r3, r3, #28
 8003bc0:	497b      	ldr	r1, [pc, #492]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d004      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bdc:	d00a      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d024      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bf2:	d11f      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bf4:	4b6e      	ldr	r3, [pc, #440]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bfa:	0f1b      	lsrs	r3, r3, #28
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	019a      	lsls	r2, r3, #6
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	061b      	lsls	r3, r3, #24
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	071b      	lsls	r3, r3, #28
 8003c14:	4966      	ldr	r1, [pc, #408]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c1c:	4b64      	ldr	r3, [pc, #400]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003c1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c22:	f023 021f 	bic.w	r2, r3, #31
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	4960      	ldr	r1, [pc, #384]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00d      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	019a      	lsls	r2, r3, #6
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	061b      	lsls	r3, r3, #24
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	071b      	lsls	r3, r3, #28
 8003c54:	4956      	ldr	r1, [pc, #344]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c5c:	4b54      	ldr	r3, [pc, #336]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a53      	ldr	r2, [pc, #332]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003c62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c68:	f7fd fbb0 	bl	80013cc <HAL_GetTick>
 8003c6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c70:	f7fd fbac 	bl	80013cc <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b64      	cmp	r3, #100	; 0x64
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e092      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c82:	4b4b      	ldr	r3, [pc, #300]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0f0      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	f040 8088 	bne.w	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c96:	4b46      	ldr	r3, [pc, #280]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a45      	ldr	r2, [pc, #276]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003c9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ca0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ca2:	f7fd fb93 	bl	80013cc <HAL_GetTick>
 8003ca6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003caa:	f7fd fb8f 	bl	80013cc <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b64      	cmp	r3, #100	; 0x64
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e075      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cbc:	4b3c      	ldr	r3, [pc, #240]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cc8:	d0ef      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d009      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d024      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d120      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003cf2:	4b2f      	ldr	r3, [pc, #188]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf8:	0c1b      	lsrs	r3, r3, #16
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	019a      	lsls	r2, r3, #6
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	041b      	lsls	r3, r3, #16
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	061b      	lsls	r3, r3, #24
 8003d12:	4927      	ldr	r1, [pc, #156]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d1a:	4b25      	ldr	r3, [pc, #148]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d20:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	021b      	lsls	r3, r3, #8
 8003d2c:	4920      	ldr	r1, [pc, #128]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d018      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d48:	d113      	bne.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d4a:	4b19      	ldr	r3, [pc, #100]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d50:	0e1b      	lsrs	r3, r3, #24
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	019a      	lsls	r2, r3, #6
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	041b      	lsls	r3, r3, #16
 8003d64:	431a      	orrs	r2, r3
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	061b      	lsls	r3, r3, #24
 8003d6a:	4911      	ldr	r1, [pc, #68]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d72:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a0e      	ldr	r2, [pc, #56]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d7e:	f7fd fb25 	bl	80013cc <HAL_GetTick>
 8003d82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d84:	e008      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d86:	f7fd fb21 	bl	80013cc <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b64      	cmp	r3, #100	; 0x64
 8003d92:	d901      	bls.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e007      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d98:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003da0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003da4:	d1ef      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3720      	adds	r7, #32
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40023800 	.word	0x40023800

08003db4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e01d      	b.n	8003e02 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d106      	bne.n	8003de0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7fd f8f6 	bl	8000fcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3304      	adds	r3, #4
 8003df0:	4619      	mov	r1, r3
 8003df2:	4610      	mov	r0, r2
 8003df4:	f000 f966 	bl	80040c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
	...

08003e0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	6839      	ldr	r1, [r7, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fc4e 	bl	80046c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a17      	ldr	r2, [pc, #92]	; (8003e88 <HAL_TIM_PWM_Start+0x7c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d004      	beq.n	8003e38 <HAL_TIM_PWM_Start+0x2c>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a16      	ldr	r2, [pc, #88]	; (8003e8c <HAL_TIM_PWM_Start+0x80>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d101      	bne.n	8003e3c <HAL_TIM_PWM_Start+0x30>
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e000      	b.n	8003e3e <HAL_TIM_PWM_Start+0x32>
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d007      	beq.n	8003e52 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	4b0d      	ldr	r3, [pc, #52]	; (8003e90 <HAL_TIM_PWM_Start+0x84>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2b06      	cmp	r3, #6
 8003e62:	d00b      	beq.n	8003e7c <HAL_TIM_PWM_Start+0x70>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e6a:	d007      	beq.n	8003e7c <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40010000 	.word	0x40010000
 8003e8c:	40010400 	.word	0x40010400
 8003e90:	00010007 	.word	0x00010007

08003e94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d101      	bne.n	8003eae <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	e105      	b.n	80040ba <HAL_TIM_PWM_ConfigChannel+0x226>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2202      	movs	r2, #2
 8003eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b14      	cmp	r3, #20
 8003ec2:	f200 80f0 	bhi.w	80040a6 <HAL_TIM_PWM_ConfigChannel+0x212>
 8003ec6:	a201      	add	r2, pc, #4	; (adr r2, 8003ecc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ecc:	08003f21 	.word	0x08003f21
 8003ed0:	080040a7 	.word	0x080040a7
 8003ed4:	080040a7 	.word	0x080040a7
 8003ed8:	080040a7 	.word	0x080040a7
 8003edc:	08003f61 	.word	0x08003f61
 8003ee0:	080040a7 	.word	0x080040a7
 8003ee4:	080040a7 	.word	0x080040a7
 8003ee8:	080040a7 	.word	0x080040a7
 8003eec:	08003fa3 	.word	0x08003fa3
 8003ef0:	080040a7 	.word	0x080040a7
 8003ef4:	080040a7 	.word	0x080040a7
 8003ef8:	080040a7 	.word	0x080040a7
 8003efc:	08003fe3 	.word	0x08003fe3
 8003f00:	080040a7 	.word	0x080040a7
 8003f04:	080040a7 	.word	0x080040a7
 8003f08:	080040a7 	.word	0x080040a7
 8003f0c:	08004025 	.word	0x08004025
 8003f10:	080040a7 	.word	0x080040a7
 8003f14:	080040a7 	.word	0x080040a7
 8003f18:	080040a7 	.word	0x080040a7
 8003f1c:	08004065 	.word	0x08004065
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68b9      	ldr	r1, [r7, #8]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 f96c 	bl	8004204 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	699a      	ldr	r2, [r3, #24]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 0208 	orr.w	r2, r2, #8
 8003f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	699a      	ldr	r2, [r3, #24]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0204 	bic.w	r2, r2, #4
 8003f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6999      	ldr	r1, [r3, #24]
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	691a      	ldr	r2, [r3, #16]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	619a      	str	r2, [r3, #24]
      break;
 8003f5e:	e0a3      	b.n	80040a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68b9      	ldr	r1, [r7, #8]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 f9be 	bl	80042e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	699a      	ldr	r2, [r3, #24]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699a      	ldr	r2, [r3, #24]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6999      	ldr	r1, [r3, #24]
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	021a      	lsls	r2, r3, #8
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	619a      	str	r2, [r3, #24]
      break;
 8003fa0:	e082      	b.n	80040a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68b9      	ldr	r1, [r7, #8]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 fa15 	bl	80043d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	69da      	ldr	r2, [r3, #28]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f042 0208 	orr.w	r2, r2, #8
 8003fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	69da      	ldr	r2, [r3, #28]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0204 	bic.w	r2, r2, #4
 8003fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	69d9      	ldr	r1, [r3, #28]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	61da      	str	r2, [r3, #28]
      break;
 8003fe0:	e062      	b.n	80040a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68b9      	ldr	r1, [r7, #8]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 fa6b 	bl	80044c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	69da      	ldr	r2, [r3, #28]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	69da      	ldr	r2, [r3, #28]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800400c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	69d9      	ldr	r1, [r3, #28]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	021a      	lsls	r2, r3, #8
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	61da      	str	r2, [r3, #28]
      break;
 8004022:	e041      	b.n	80040a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68b9      	ldr	r1, [r7, #8]
 800402a:	4618      	mov	r0, r3
 800402c:	f000 faa2 	bl	8004574 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0208 	orr.w	r2, r2, #8
 800403e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0204 	bic.w	r2, r2, #4
 800404e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	691a      	ldr	r2, [r3, #16]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004062:	e021      	b.n	80040a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68b9      	ldr	r1, [r7, #8]
 800406a:	4618      	mov	r0, r3
 800406c:	f000 fad4 	bl	8004618 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800407e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800408e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	021a      	lsls	r2, r3, #8
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040a4:	e000      	b.n	80040a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80040a6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop

080040c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a40      	ldr	r2, [pc, #256]	; (80041d8 <TIM_Base_SetConfig+0x114>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d013      	beq.n	8004104 <TIM_Base_SetConfig+0x40>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e2:	d00f      	beq.n	8004104 <TIM_Base_SetConfig+0x40>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a3d      	ldr	r2, [pc, #244]	; (80041dc <TIM_Base_SetConfig+0x118>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d00b      	beq.n	8004104 <TIM_Base_SetConfig+0x40>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a3c      	ldr	r2, [pc, #240]	; (80041e0 <TIM_Base_SetConfig+0x11c>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d007      	beq.n	8004104 <TIM_Base_SetConfig+0x40>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a3b      	ldr	r2, [pc, #236]	; (80041e4 <TIM_Base_SetConfig+0x120>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d003      	beq.n	8004104 <TIM_Base_SetConfig+0x40>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a3a      	ldr	r2, [pc, #232]	; (80041e8 <TIM_Base_SetConfig+0x124>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d108      	bne.n	8004116 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	4313      	orrs	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a2f      	ldr	r2, [pc, #188]	; (80041d8 <TIM_Base_SetConfig+0x114>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d02b      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004124:	d027      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a2c      	ldr	r2, [pc, #176]	; (80041dc <TIM_Base_SetConfig+0x118>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d023      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a2b      	ldr	r2, [pc, #172]	; (80041e0 <TIM_Base_SetConfig+0x11c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d01f      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a2a      	ldr	r2, [pc, #168]	; (80041e4 <TIM_Base_SetConfig+0x120>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d01b      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a29      	ldr	r2, [pc, #164]	; (80041e8 <TIM_Base_SetConfig+0x124>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d017      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a28      	ldr	r2, [pc, #160]	; (80041ec <TIM_Base_SetConfig+0x128>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d013      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a27      	ldr	r2, [pc, #156]	; (80041f0 <TIM_Base_SetConfig+0x12c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00f      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a26      	ldr	r2, [pc, #152]	; (80041f4 <TIM_Base_SetConfig+0x130>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d00b      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a25      	ldr	r2, [pc, #148]	; (80041f8 <TIM_Base_SetConfig+0x134>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d007      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a24      	ldr	r2, [pc, #144]	; (80041fc <TIM_Base_SetConfig+0x138>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d003      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a23      	ldr	r2, [pc, #140]	; (8004200 <TIM_Base_SetConfig+0x13c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d108      	bne.n	8004188 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800417c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	4313      	orrs	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a0a      	ldr	r2, [pc, #40]	; (80041d8 <TIM_Base_SetConfig+0x114>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d003      	beq.n	80041bc <TIM_Base_SetConfig+0xf8>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a0c      	ldr	r2, [pc, #48]	; (80041e8 <TIM_Base_SetConfig+0x124>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d103      	bne.n	80041c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	615a      	str	r2, [r3, #20]
}
 80041ca:	bf00      	nop
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40010000 	.word	0x40010000
 80041dc:	40000400 	.word	0x40000400
 80041e0:	40000800 	.word	0x40000800
 80041e4:	40000c00 	.word	0x40000c00
 80041e8:	40010400 	.word	0x40010400
 80041ec:	40014000 	.word	0x40014000
 80041f0:	40014400 	.word	0x40014400
 80041f4:	40014800 	.word	0x40014800
 80041f8:	40001800 	.word	0x40001800
 80041fc:	40001c00 	.word	0x40001c00
 8004200:	40002000 	.word	0x40002000

08004204 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004204:	b480      	push	{r7}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	f023 0201 	bic.w	r2, r3, #1
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	4b2b      	ldr	r3, [pc, #172]	; (80042dc <TIM_OC1_SetConfig+0xd8>)
 8004230:	4013      	ands	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 0303 	bic.w	r3, r3, #3
 800423a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	4313      	orrs	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f023 0302 	bic.w	r3, r3, #2
 800424c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	4313      	orrs	r3, r2
 8004256:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a21      	ldr	r2, [pc, #132]	; (80042e0 <TIM_OC1_SetConfig+0xdc>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d003      	beq.n	8004268 <TIM_OC1_SetConfig+0x64>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a20      	ldr	r2, [pc, #128]	; (80042e4 <TIM_OC1_SetConfig+0xe0>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d10c      	bne.n	8004282 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f023 0308 	bic.w	r3, r3, #8
 800426e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f023 0304 	bic.w	r3, r3, #4
 8004280:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a16      	ldr	r2, [pc, #88]	; (80042e0 <TIM_OC1_SetConfig+0xdc>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d003      	beq.n	8004292 <TIM_OC1_SetConfig+0x8e>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a15      	ldr	r2, [pc, #84]	; (80042e4 <TIM_OC1_SetConfig+0xe0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d111      	bne.n	80042b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004298:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	621a      	str	r2, [r3, #32]
}
 80042d0:	bf00      	nop
 80042d2:	371c      	adds	r7, #28
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	fffeff8f 	.word	0xfffeff8f
 80042e0:	40010000 	.word	0x40010000
 80042e4:	40010400 	.word	0x40010400

080042e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	f023 0210 	bic.w	r2, r3, #16
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4b2e      	ldr	r3, [pc, #184]	; (80043cc <TIM_OC2_SetConfig+0xe4>)
 8004314:	4013      	ands	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800431e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	021b      	lsls	r3, r3, #8
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	4313      	orrs	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f023 0320 	bic.w	r3, r3, #32
 8004332:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	4313      	orrs	r3, r2
 800433e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a23      	ldr	r2, [pc, #140]	; (80043d0 <TIM_OC2_SetConfig+0xe8>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d003      	beq.n	8004350 <TIM_OC2_SetConfig+0x68>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a22      	ldr	r2, [pc, #136]	; (80043d4 <TIM_OC2_SetConfig+0xec>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d10d      	bne.n	800436c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004356:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	4313      	orrs	r3, r2
 8004362:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800436a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a18      	ldr	r2, [pc, #96]	; (80043d0 <TIM_OC2_SetConfig+0xe8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d003      	beq.n	800437c <TIM_OC2_SetConfig+0x94>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a17      	ldr	r2, [pc, #92]	; (80043d4 <TIM_OC2_SetConfig+0xec>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d113      	bne.n	80043a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004382:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800438a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	4313      	orrs	r3, r2
 8004396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	621a      	str	r2, [r3, #32]
}
 80043be:	bf00      	nop
 80043c0:	371c      	adds	r7, #28
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	feff8fff 	.word	0xfeff8fff
 80043d0:	40010000 	.word	0x40010000
 80043d4:	40010400 	.word	0x40010400

080043d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043d8:	b480      	push	{r7}
 80043da:	b087      	sub	sp, #28
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	4b2d      	ldr	r3, [pc, #180]	; (80044b8 <TIM_OC3_SetConfig+0xe0>)
 8004404:	4013      	ands	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f023 0303 	bic.w	r3, r3, #3
 800440e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	4313      	orrs	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	021b      	lsls	r3, r3, #8
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	4313      	orrs	r3, r2
 800442c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a22      	ldr	r2, [pc, #136]	; (80044bc <TIM_OC3_SetConfig+0xe4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d003      	beq.n	800443e <TIM_OC3_SetConfig+0x66>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a21      	ldr	r2, [pc, #132]	; (80044c0 <TIM_OC3_SetConfig+0xe8>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d10d      	bne.n	800445a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004444:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	021b      	lsls	r3, r3, #8
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	4313      	orrs	r3, r2
 8004450:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004458:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a17      	ldr	r2, [pc, #92]	; (80044bc <TIM_OC3_SetConfig+0xe4>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d003      	beq.n	800446a <TIM_OC3_SetConfig+0x92>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a16      	ldr	r2, [pc, #88]	; (80044c0 <TIM_OC3_SetConfig+0xe8>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d113      	bne.n	8004492 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004470:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004478:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	4313      	orrs	r3, r2
 8004484:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	621a      	str	r2, [r3, #32]
}
 80044ac:	bf00      	nop
 80044ae:	371c      	adds	r7, #28
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	fffeff8f 	.word	0xfffeff8f
 80044bc:	40010000 	.word	0x40010000
 80044c0:	40010400 	.word	0x40010400

080044c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	4b1e      	ldr	r3, [pc, #120]	; (8004568 <TIM_OC4_SetConfig+0xa4>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	021b      	lsls	r3, r3, #8
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	4313      	orrs	r3, r2
 8004506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800450e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	031b      	lsls	r3, r3, #12
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	4313      	orrs	r3, r2
 800451a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a13      	ldr	r2, [pc, #76]	; (800456c <TIM_OC4_SetConfig+0xa8>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d003      	beq.n	800452c <TIM_OC4_SetConfig+0x68>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a12      	ldr	r2, [pc, #72]	; (8004570 <TIM_OC4_SetConfig+0xac>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d109      	bne.n	8004540 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004532:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	019b      	lsls	r3, r3, #6
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	4313      	orrs	r3, r2
 800453e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	621a      	str	r2, [r3, #32]
}
 800455a:	bf00      	nop
 800455c:	371c      	adds	r7, #28
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	feff8fff 	.word	0xfeff8fff
 800456c:	40010000 	.word	0x40010000
 8004570:	40010400 	.word	0x40010400

08004574 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	4b1b      	ldr	r3, [pc, #108]	; (800460c <TIM_OC5_SetConfig+0x98>)
 80045a0:	4013      	ands	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80045b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	041b      	lsls	r3, r3, #16
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	4313      	orrs	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a12      	ldr	r2, [pc, #72]	; (8004610 <TIM_OC5_SetConfig+0x9c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d003      	beq.n	80045d2 <TIM_OC5_SetConfig+0x5e>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a11      	ldr	r2, [pc, #68]	; (8004614 <TIM_OC5_SetConfig+0xa0>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d109      	bne.n	80045e6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	021b      	lsls	r3, r3, #8
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	621a      	str	r2, [r3, #32]
}
 8004600:	bf00      	nop
 8004602:	371c      	adds	r7, #28
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	fffeff8f 	.word	0xfffeff8f
 8004610:	40010000 	.word	0x40010000
 8004614:	40010400 	.word	0x40010400

08004618 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	4b1c      	ldr	r3, [pc, #112]	; (80046b4 <TIM_OC6_SetConfig+0x9c>)
 8004644:	4013      	ands	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	021b      	lsls	r3, r3, #8
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	4313      	orrs	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800465a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	051b      	lsls	r3, r3, #20
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	4313      	orrs	r3, r2
 8004666:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a13      	ldr	r2, [pc, #76]	; (80046b8 <TIM_OC6_SetConfig+0xa0>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d003      	beq.n	8004678 <TIM_OC6_SetConfig+0x60>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a12      	ldr	r2, [pc, #72]	; (80046bc <TIM_OC6_SetConfig+0xa4>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d109      	bne.n	800468c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800467e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	029b      	lsls	r3, r3, #10
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	4313      	orrs	r3, r2
 800468a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	621a      	str	r2, [r3, #32]
}
 80046a6:	bf00      	nop
 80046a8:	371c      	adds	r7, #28
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	feff8fff 	.word	0xfeff8fff
 80046b8:	40010000 	.word	0x40010000
 80046bc:	40010400 	.word	0x40010400

080046c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f003 031f 	and.w	r3, r3, #31
 80046d2:	2201      	movs	r2, #1
 80046d4:	fa02 f303 	lsl.w	r3, r2, r3
 80046d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6a1a      	ldr	r2, [r3, #32]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	43db      	mvns	r3, r3
 80046e2:	401a      	ands	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6a1a      	ldr	r2, [r3, #32]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f003 031f 	and.w	r3, r3, #31
 80046f2:	6879      	ldr	r1, [r7, #4]
 80046f4:	fa01 f303 	lsl.w	r3, r1, r3
 80046f8:	431a      	orrs	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	621a      	str	r2, [r3, #32]
}
 80046fe:	bf00      	nop
 8004700:	371c      	adds	r7, #28
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
	...

0800470c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004720:	2302      	movs	r3, #2
 8004722:	e06d      	b.n	8004800 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a30      	ldr	r2, [pc, #192]	; (800480c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d004      	beq.n	8004758 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a2f      	ldr	r2, [pc, #188]	; (8004810 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d108      	bne.n	800476a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800475e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	4313      	orrs	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004770:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	4313      	orrs	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a20      	ldr	r2, [pc, #128]	; (800480c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d022      	beq.n	80047d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004796:	d01d      	beq.n	80047d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a1d      	ldr	r2, [pc, #116]	; (8004814 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d018      	beq.n	80047d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a1c      	ldr	r2, [pc, #112]	; (8004818 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d013      	beq.n	80047d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a1a      	ldr	r2, [pc, #104]	; (800481c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d00e      	beq.n	80047d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a15      	ldr	r2, [pc, #84]	; (8004810 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d009      	beq.n	80047d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a16      	ldr	r2, [pc, #88]	; (8004820 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d004      	beq.n	80047d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a15      	ldr	r2, [pc, #84]	; (8004824 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d10c      	bne.n	80047ee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3714      	adds	r7, #20
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr
 800480c:	40010000 	.word	0x40010000
 8004810:	40010400 	.word	0x40010400
 8004814:	40000400 	.word	0x40000400
 8004818:	40000800 	.word	0x40000800
 800481c:	40000c00 	.word	0x40000c00
 8004820:	40014000 	.word	0x40014000
 8004824:	40001800 	.word	0x40001800

08004828 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e040      	b.n	80048bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800483e:	2b00      	cmp	r3, #0
 8004840:	d106      	bne.n	8004850 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fc fc16 	bl	800107c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2224      	movs	r2, #36	; 0x24
 8004854:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0201 	bic.w	r2, r2, #1
 8004864:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f82c 	bl	80048c4 <UART_SetConfig>
 800486c:	4603      	mov	r3, r0
 800486e:	2b01      	cmp	r3, #1
 8004870:	d101      	bne.n	8004876 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e022      	b.n	80048bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	2b00      	cmp	r3, #0
 800487c:	d002      	beq.n	8004884 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 faca 	bl	8004e18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004892:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689a      	ldr	r2, [r3, #8]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fb51 	bl	8004f5c <UART_CheckIdleState>
 80048ba:	4603      	mov	r3, r0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b088      	sub	sp, #32
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80048d0:	2300      	movs	r3, #0
 80048d2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	431a      	orrs	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	4bb1      	ldr	r3, [pc, #708]	; (8004bb8 <UART_SetConfig+0x2f4>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	6812      	ldr	r2, [r2, #0]
 80048fa:	6939      	ldr	r1, [r7, #16]
 80048fc:	430b      	orrs	r3, r1
 80048fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	4313      	orrs	r3, r2
 8004924:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	430a      	orrs	r2, r1
 8004938:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a9f      	ldr	r2, [pc, #636]	; (8004bbc <UART_SetConfig+0x2f8>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d121      	bne.n	8004988 <UART_SetConfig+0xc4>
 8004944:	4b9e      	ldr	r3, [pc, #632]	; (8004bc0 <UART_SetConfig+0x2fc>)
 8004946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	2b03      	cmp	r3, #3
 8004950:	d816      	bhi.n	8004980 <UART_SetConfig+0xbc>
 8004952:	a201      	add	r2, pc, #4	; (adr r2, 8004958 <UART_SetConfig+0x94>)
 8004954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004958:	08004969 	.word	0x08004969
 800495c:	08004975 	.word	0x08004975
 8004960:	0800496f 	.word	0x0800496f
 8004964:	0800497b 	.word	0x0800497b
 8004968:	2301      	movs	r3, #1
 800496a:	77fb      	strb	r3, [r7, #31]
 800496c:	e151      	b.n	8004c12 <UART_SetConfig+0x34e>
 800496e:	2302      	movs	r3, #2
 8004970:	77fb      	strb	r3, [r7, #31]
 8004972:	e14e      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004974:	2304      	movs	r3, #4
 8004976:	77fb      	strb	r3, [r7, #31]
 8004978:	e14b      	b.n	8004c12 <UART_SetConfig+0x34e>
 800497a:	2308      	movs	r3, #8
 800497c:	77fb      	strb	r3, [r7, #31]
 800497e:	e148      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004980:	2310      	movs	r3, #16
 8004982:	77fb      	strb	r3, [r7, #31]
 8004984:	bf00      	nop
 8004986:	e144      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a8d      	ldr	r2, [pc, #564]	; (8004bc4 <UART_SetConfig+0x300>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d134      	bne.n	80049fc <UART_SetConfig+0x138>
 8004992:	4b8b      	ldr	r3, [pc, #556]	; (8004bc0 <UART_SetConfig+0x2fc>)
 8004994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004998:	f003 030c 	and.w	r3, r3, #12
 800499c:	2b0c      	cmp	r3, #12
 800499e:	d829      	bhi.n	80049f4 <UART_SetConfig+0x130>
 80049a0:	a201      	add	r2, pc, #4	; (adr r2, 80049a8 <UART_SetConfig+0xe4>)
 80049a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a6:	bf00      	nop
 80049a8:	080049dd 	.word	0x080049dd
 80049ac:	080049f5 	.word	0x080049f5
 80049b0:	080049f5 	.word	0x080049f5
 80049b4:	080049f5 	.word	0x080049f5
 80049b8:	080049e9 	.word	0x080049e9
 80049bc:	080049f5 	.word	0x080049f5
 80049c0:	080049f5 	.word	0x080049f5
 80049c4:	080049f5 	.word	0x080049f5
 80049c8:	080049e3 	.word	0x080049e3
 80049cc:	080049f5 	.word	0x080049f5
 80049d0:	080049f5 	.word	0x080049f5
 80049d4:	080049f5 	.word	0x080049f5
 80049d8:	080049ef 	.word	0x080049ef
 80049dc:	2300      	movs	r3, #0
 80049de:	77fb      	strb	r3, [r7, #31]
 80049e0:	e117      	b.n	8004c12 <UART_SetConfig+0x34e>
 80049e2:	2302      	movs	r3, #2
 80049e4:	77fb      	strb	r3, [r7, #31]
 80049e6:	e114      	b.n	8004c12 <UART_SetConfig+0x34e>
 80049e8:	2304      	movs	r3, #4
 80049ea:	77fb      	strb	r3, [r7, #31]
 80049ec:	e111      	b.n	8004c12 <UART_SetConfig+0x34e>
 80049ee:	2308      	movs	r3, #8
 80049f0:	77fb      	strb	r3, [r7, #31]
 80049f2:	e10e      	b.n	8004c12 <UART_SetConfig+0x34e>
 80049f4:	2310      	movs	r3, #16
 80049f6:	77fb      	strb	r3, [r7, #31]
 80049f8:	bf00      	nop
 80049fa:	e10a      	b.n	8004c12 <UART_SetConfig+0x34e>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a71      	ldr	r2, [pc, #452]	; (8004bc8 <UART_SetConfig+0x304>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d120      	bne.n	8004a48 <UART_SetConfig+0x184>
 8004a06:	4b6e      	ldr	r3, [pc, #440]	; (8004bc0 <UART_SetConfig+0x2fc>)
 8004a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a10:	2b10      	cmp	r3, #16
 8004a12:	d00f      	beq.n	8004a34 <UART_SetConfig+0x170>
 8004a14:	2b10      	cmp	r3, #16
 8004a16:	d802      	bhi.n	8004a1e <UART_SetConfig+0x15a>
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <UART_SetConfig+0x164>
 8004a1c:	e010      	b.n	8004a40 <UART_SetConfig+0x17c>
 8004a1e:	2b20      	cmp	r3, #32
 8004a20:	d005      	beq.n	8004a2e <UART_SetConfig+0x16a>
 8004a22:	2b30      	cmp	r3, #48	; 0x30
 8004a24:	d009      	beq.n	8004a3a <UART_SetConfig+0x176>
 8004a26:	e00b      	b.n	8004a40 <UART_SetConfig+0x17c>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	77fb      	strb	r3, [r7, #31]
 8004a2c:	e0f1      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	77fb      	strb	r3, [r7, #31]
 8004a32:	e0ee      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004a34:	2304      	movs	r3, #4
 8004a36:	77fb      	strb	r3, [r7, #31]
 8004a38:	e0eb      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004a3a:	2308      	movs	r3, #8
 8004a3c:	77fb      	strb	r3, [r7, #31]
 8004a3e:	e0e8      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004a40:	2310      	movs	r3, #16
 8004a42:	77fb      	strb	r3, [r7, #31]
 8004a44:	bf00      	nop
 8004a46:	e0e4      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a5f      	ldr	r2, [pc, #380]	; (8004bcc <UART_SetConfig+0x308>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d120      	bne.n	8004a94 <UART_SetConfig+0x1d0>
 8004a52:	4b5b      	ldr	r3, [pc, #364]	; (8004bc0 <UART_SetConfig+0x2fc>)
 8004a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a58:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a5c:	2b40      	cmp	r3, #64	; 0x40
 8004a5e:	d00f      	beq.n	8004a80 <UART_SetConfig+0x1bc>
 8004a60:	2b40      	cmp	r3, #64	; 0x40
 8004a62:	d802      	bhi.n	8004a6a <UART_SetConfig+0x1a6>
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d005      	beq.n	8004a74 <UART_SetConfig+0x1b0>
 8004a68:	e010      	b.n	8004a8c <UART_SetConfig+0x1c8>
 8004a6a:	2b80      	cmp	r3, #128	; 0x80
 8004a6c:	d005      	beq.n	8004a7a <UART_SetConfig+0x1b6>
 8004a6e:	2bc0      	cmp	r3, #192	; 0xc0
 8004a70:	d009      	beq.n	8004a86 <UART_SetConfig+0x1c2>
 8004a72:	e00b      	b.n	8004a8c <UART_SetConfig+0x1c8>
 8004a74:	2300      	movs	r3, #0
 8004a76:	77fb      	strb	r3, [r7, #31]
 8004a78:	e0cb      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	77fb      	strb	r3, [r7, #31]
 8004a7e:	e0c8      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004a80:	2304      	movs	r3, #4
 8004a82:	77fb      	strb	r3, [r7, #31]
 8004a84:	e0c5      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004a86:	2308      	movs	r3, #8
 8004a88:	77fb      	strb	r3, [r7, #31]
 8004a8a:	e0c2      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004a8c:	2310      	movs	r3, #16
 8004a8e:	77fb      	strb	r3, [r7, #31]
 8004a90:	bf00      	nop
 8004a92:	e0be      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a4d      	ldr	r2, [pc, #308]	; (8004bd0 <UART_SetConfig+0x30c>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d124      	bne.n	8004ae8 <UART_SetConfig+0x224>
 8004a9e:	4b48      	ldr	r3, [pc, #288]	; (8004bc0 <UART_SetConfig+0x2fc>)
 8004aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aac:	d012      	beq.n	8004ad4 <UART_SetConfig+0x210>
 8004aae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ab2:	d802      	bhi.n	8004aba <UART_SetConfig+0x1f6>
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d007      	beq.n	8004ac8 <UART_SetConfig+0x204>
 8004ab8:	e012      	b.n	8004ae0 <UART_SetConfig+0x21c>
 8004aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004abe:	d006      	beq.n	8004ace <UART_SetConfig+0x20a>
 8004ac0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ac4:	d009      	beq.n	8004ada <UART_SetConfig+0x216>
 8004ac6:	e00b      	b.n	8004ae0 <UART_SetConfig+0x21c>
 8004ac8:	2300      	movs	r3, #0
 8004aca:	77fb      	strb	r3, [r7, #31]
 8004acc:	e0a1      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	77fb      	strb	r3, [r7, #31]
 8004ad2:	e09e      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004ad4:	2304      	movs	r3, #4
 8004ad6:	77fb      	strb	r3, [r7, #31]
 8004ad8:	e09b      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004ada:	2308      	movs	r3, #8
 8004adc:	77fb      	strb	r3, [r7, #31]
 8004ade:	e098      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004ae0:	2310      	movs	r3, #16
 8004ae2:	77fb      	strb	r3, [r7, #31]
 8004ae4:	bf00      	nop
 8004ae6:	e094      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a39      	ldr	r2, [pc, #228]	; (8004bd4 <UART_SetConfig+0x310>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d124      	bne.n	8004b3c <UART_SetConfig+0x278>
 8004af2:	4b33      	ldr	r3, [pc, #204]	; (8004bc0 <UART_SetConfig+0x2fc>)
 8004af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b00:	d012      	beq.n	8004b28 <UART_SetConfig+0x264>
 8004b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b06:	d802      	bhi.n	8004b0e <UART_SetConfig+0x24a>
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d007      	beq.n	8004b1c <UART_SetConfig+0x258>
 8004b0c:	e012      	b.n	8004b34 <UART_SetConfig+0x270>
 8004b0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b12:	d006      	beq.n	8004b22 <UART_SetConfig+0x25e>
 8004b14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b18:	d009      	beq.n	8004b2e <UART_SetConfig+0x26a>
 8004b1a:	e00b      	b.n	8004b34 <UART_SetConfig+0x270>
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	77fb      	strb	r3, [r7, #31]
 8004b20:	e077      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004b22:	2302      	movs	r3, #2
 8004b24:	77fb      	strb	r3, [r7, #31]
 8004b26:	e074      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004b28:	2304      	movs	r3, #4
 8004b2a:	77fb      	strb	r3, [r7, #31]
 8004b2c:	e071      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004b2e:	2308      	movs	r3, #8
 8004b30:	77fb      	strb	r3, [r7, #31]
 8004b32:	e06e      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004b34:	2310      	movs	r3, #16
 8004b36:	77fb      	strb	r3, [r7, #31]
 8004b38:	bf00      	nop
 8004b3a:	e06a      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a25      	ldr	r2, [pc, #148]	; (8004bd8 <UART_SetConfig+0x314>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d124      	bne.n	8004b90 <UART_SetConfig+0x2cc>
 8004b46:	4b1e      	ldr	r3, [pc, #120]	; (8004bc0 <UART_SetConfig+0x2fc>)
 8004b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b4c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b54:	d012      	beq.n	8004b7c <UART_SetConfig+0x2b8>
 8004b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b5a:	d802      	bhi.n	8004b62 <UART_SetConfig+0x29e>
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d007      	beq.n	8004b70 <UART_SetConfig+0x2ac>
 8004b60:	e012      	b.n	8004b88 <UART_SetConfig+0x2c4>
 8004b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b66:	d006      	beq.n	8004b76 <UART_SetConfig+0x2b2>
 8004b68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b6c:	d009      	beq.n	8004b82 <UART_SetConfig+0x2be>
 8004b6e:	e00b      	b.n	8004b88 <UART_SetConfig+0x2c4>
 8004b70:	2300      	movs	r3, #0
 8004b72:	77fb      	strb	r3, [r7, #31]
 8004b74:	e04d      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004b76:	2302      	movs	r3, #2
 8004b78:	77fb      	strb	r3, [r7, #31]
 8004b7a:	e04a      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004b7c:	2304      	movs	r3, #4
 8004b7e:	77fb      	strb	r3, [r7, #31]
 8004b80:	e047      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004b82:	2308      	movs	r3, #8
 8004b84:	77fb      	strb	r3, [r7, #31]
 8004b86:	e044      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004b88:	2310      	movs	r3, #16
 8004b8a:	77fb      	strb	r3, [r7, #31]
 8004b8c:	bf00      	nop
 8004b8e:	e040      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a11      	ldr	r2, [pc, #68]	; (8004bdc <UART_SetConfig+0x318>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d139      	bne.n	8004c0e <UART_SetConfig+0x34a>
 8004b9a:	4b09      	ldr	r3, [pc, #36]	; (8004bc0 <UART_SetConfig+0x2fc>)
 8004b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ba4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ba8:	d027      	beq.n	8004bfa <UART_SetConfig+0x336>
 8004baa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bae:	d817      	bhi.n	8004be0 <UART_SetConfig+0x31c>
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d01c      	beq.n	8004bee <UART_SetConfig+0x32a>
 8004bb4:	e027      	b.n	8004c06 <UART_SetConfig+0x342>
 8004bb6:	bf00      	nop
 8004bb8:	efff69f3 	.word	0xefff69f3
 8004bbc:	40011000 	.word	0x40011000
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	40004400 	.word	0x40004400
 8004bc8:	40004800 	.word	0x40004800
 8004bcc:	40004c00 	.word	0x40004c00
 8004bd0:	40005000 	.word	0x40005000
 8004bd4:	40011400 	.word	0x40011400
 8004bd8:	40007800 	.word	0x40007800
 8004bdc:	40007c00 	.word	0x40007c00
 8004be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004be4:	d006      	beq.n	8004bf4 <UART_SetConfig+0x330>
 8004be6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004bea:	d009      	beq.n	8004c00 <UART_SetConfig+0x33c>
 8004bec:	e00b      	b.n	8004c06 <UART_SetConfig+0x342>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	77fb      	strb	r3, [r7, #31]
 8004bf2:	e00e      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	77fb      	strb	r3, [r7, #31]
 8004bf8:	e00b      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004bfa:	2304      	movs	r3, #4
 8004bfc:	77fb      	strb	r3, [r7, #31]
 8004bfe:	e008      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004c00:	2308      	movs	r3, #8
 8004c02:	77fb      	strb	r3, [r7, #31]
 8004c04:	e005      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004c06:	2310      	movs	r3, #16
 8004c08:	77fb      	strb	r3, [r7, #31]
 8004c0a:	bf00      	nop
 8004c0c:	e001      	b.n	8004c12 <UART_SetConfig+0x34e>
 8004c0e:	2310      	movs	r3, #16
 8004c10:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c1a:	d17f      	bne.n	8004d1c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8004c1c:	7ffb      	ldrb	r3, [r7, #31]
 8004c1e:	2b08      	cmp	r3, #8
 8004c20:	d85c      	bhi.n	8004cdc <UART_SetConfig+0x418>
 8004c22:	a201      	add	r2, pc, #4	; (adr r2, 8004c28 <UART_SetConfig+0x364>)
 8004c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c28:	08004c4d 	.word	0x08004c4d
 8004c2c:	08004c6d 	.word	0x08004c6d
 8004c30:	08004c8d 	.word	0x08004c8d
 8004c34:	08004cdd 	.word	0x08004cdd
 8004c38:	08004ca5 	.word	0x08004ca5
 8004c3c:	08004cdd 	.word	0x08004cdd
 8004c40:	08004cdd 	.word	0x08004cdd
 8004c44:	08004cdd 	.word	0x08004cdd
 8004c48:	08004cc5 	.word	0x08004cc5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c4c:	f7fe fd42 	bl	80036d4 <HAL_RCC_GetPCLK1Freq>
 8004c50:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	005a      	lsls	r2, r3, #1
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	085b      	lsrs	r3, r3, #1
 8004c5c:	441a      	add	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	61bb      	str	r3, [r7, #24]
        break;
 8004c6a:	e03a      	b.n	8004ce2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c6c:	f7fe fd46 	bl	80036fc <HAL_RCC_GetPCLK2Freq>
 8004c70:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	005a      	lsls	r2, r3, #1
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	085b      	lsrs	r3, r3, #1
 8004c7c:	441a      	add	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	61bb      	str	r3, [r7, #24]
        break;
 8004c8a:	e02a      	b.n	8004ce2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	085a      	lsrs	r2, r3, #1
 8004c92:	4b5f      	ldr	r3, [pc, #380]	; (8004e10 <UART_SetConfig+0x54c>)
 8004c94:	4413      	add	r3, r2
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	6852      	ldr	r2, [r2, #4]
 8004c9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	61bb      	str	r3, [r7, #24]
        break;
 8004ca2:	e01e      	b.n	8004ce2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ca4:	f7fe fc32 	bl	800350c <HAL_RCC_GetSysClockFreq>
 8004ca8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	005a      	lsls	r2, r3, #1
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	085b      	lsrs	r3, r3, #1
 8004cb4:	441a      	add	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	61bb      	str	r3, [r7, #24]
        break;
 8004cc2:	e00e      	b.n	8004ce2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	085b      	lsrs	r3, r3, #1
 8004cca:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	61bb      	str	r3, [r7, #24]
        break;
 8004cda:	e002      	b.n	8004ce2 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	75fb      	strb	r3, [r7, #23]
        break;
 8004ce0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	2b0f      	cmp	r3, #15
 8004ce6:	d916      	bls.n	8004d16 <UART_SetConfig+0x452>
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cee:	d212      	bcs.n	8004d16 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	f023 030f 	bic.w	r3, r3, #15
 8004cf8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	085b      	lsrs	r3, r3, #1
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	897b      	ldrh	r3, [r7, #10]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	897a      	ldrh	r2, [r7, #10]
 8004d12:	60da      	str	r2, [r3, #12]
 8004d14:	e070      	b.n	8004df8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	75fb      	strb	r3, [r7, #23]
 8004d1a:	e06d      	b.n	8004df8 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8004d1c:	7ffb      	ldrb	r3, [r7, #31]
 8004d1e:	2b08      	cmp	r3, #8
 8004d20:	d859      	bhi.n	8004dd6 <UART_SetConfig+0x512>
 8004d22:	a201      	add	r2, pc, #4	; (adr r2, 8004d28 <UART_SetConfig+0x464>)
 8004d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d28:	08004d4d 	.word	0x08004d4d
 8004d2c:	08004d6b 	.word	0x08004d6b
 8004d30:	08004d89 	.word	0x08004d89
 8004d34:	08004dd7 	.word	0x08004dd7
 8004d38:	08004da1 	.word	0x08004da1
 8004d3c:	08004dd7 	.word	0x08004dd7
 8004d40:	08004dd7 	.word	0x08004dd7
 8004d44:	08004dd7 	.word	0x08004dd7
 8004d48:	08004dbf 	.word	0x08004dbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d4c:	f7fe fcc2 	bl	80036d4 <HAL_RCC_GetPCLK1Freq>
 8004d50:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	085a      	lsrs	r2, r3, #1
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	441a      	add	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	61bb      	str	r3, [r7, #24]
        break;
 8004d68:	e038      	b.n	8004ddc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d6a:	f7fe fcc7 	bl	80036fc <HAL_RCC_GetPCLK2Freq>
 8004d6e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	085a      	lsrs	r2, r3, #1
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	441a      	add	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	61bb      	str	r3, [r7, #24]
        break;
 8004d86:	e029      	b.n	8004ddc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	085a      	lsrs	r2, r3, #1
 8004d8e:	4b21      	ldr	r3, [pc, #132]	; (8004e14 <UART_SetConfig+0x550>)
 8004d90:	4413      	add	r3, r2
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6852      	ldr	r2, [r2, #4]
 8004d96:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	61bb      	str	r3, [r7, #24]
        break;
 8004d9e:	e01d      	b.n	8004ddc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004da0:	f7fe fbb4 	bl	800350c <HAL_RCC_GetSysClockFreq>
 8004da4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	085a      	lsrs	r2, r3, #1
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	441a      	add	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	61bb      	str	r3, [r7, #24]
        break;
 8004dbc:	e00e      	b.n	8004ddc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	085b      	lsrs	r3, r3, #1
 8004dc4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	61bb      	str	r3, [r7, #24]
        break;
 8004dd4:	e002      	b.n	8004ddc <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	75fb      	strb	r3, [r7, #23]
        break;
 8004dda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	2b0f      	cmp	r3, #15
 8004de0:	d908      	bls.n	8004df4 <UART_SetConfig+0x530>
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de8:	d204      	bcs.n	8004df4 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	60da      	str	r2, [r3, #12]
 8004df2:	e001      	b.n	8004df8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3720      	adds	r7, #32
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	01e84800 	.word	0x01e84800
 8004e14:	00f42400 	.word	0x00f42400

08004e18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	f003 0301 	and.w	r3, r3, #1
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00a      	beq.n	8004e42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00a      	beq.n	8004e64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	430a      	orrs	r2, r1
 8004e62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00a      	beq.n	8004e86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00a      	beq.n	8004ea8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	f003 0310 	and.w	r3, r3, #16
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00a      	beq.n	8004eca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00a      	beq.n	8004eec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d01a      	beq.n	8004f2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f16:	d10a      	bne.n	8004f2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	605a      	str	r2, [r3, #4]
  }
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af02      	add	r7, sp, #8
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004f6a:	f7fc fa2f 	bl	80013cc <HAL_GetTick>
 8004f6e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0308 	and.w	r3, r3, #8
 8004f7a:	2b08      	cmp	r3, #8
 8004f7c:	d10e      	bne.n	8004f9c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f7e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f814 	bl	8004fba <UART_WaitOnFlagUntilTimeout>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e00a      	b.n	8004fb2 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b084      	sub	sp, #16
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	60f8      	str	r0, [r7, #12]
 8004fc2:	60b9      	str	r1, [r7, #8]
 8004fc4:	603b      	str	r3, [r7, #0]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fca:	e05d      	b.n	8005088 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd2:	d059      	beq.n	8005088 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fd4:	f7fc f9fa 	bl	80013cc <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d302      	bcc.n	8004fea <UART_WaitOnFlagUntilTimeout+0x30>
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d11b      	bne.n	8005022 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ff8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 0201 	bic.w	r2, r2, #1
 8005008:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2220      	movs	r2, #32
 800500e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2220      	movs	r2, #32
 8005014:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e042      	b.n	80050a8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	d02b      	beq.n	8005088 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800503a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800503e:	d123      	bne.n	8005088 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005048:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005058:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 0201 	bic.w	r2, r2, #1
 8005068:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2220      	movs	r2, #32
 800506e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2220      	movs	r2, #32
 8005074:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2220      	movs	r2, #32
 800507a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e00f      	b.n	80050a8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	69da      	ldr	r2, [r3, #28]
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	4013      	ands	r3, r2
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	429a      	cmp	r2, r3
 8005096:	bf0c      	ite	eq
 8005098:	2301      	moveq	r3, #1
 800509a:	2300      	movne	r3, #0
 800509c:	b2db      	uxtb	r3, r3
 800509e:	461a      	mov	r2, r3
 80050a0:	79fb      	ldrb	r3, [r7, #7]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d092      	beq.n	8004fcc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050b0:	b084      	sub	sp, #16
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b084      	sub	sp, #16
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
 80050ba:	f107 001c 	add.w	r0, r7, #28
 80050be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d126      	bne.n	8005116 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68da      	ldr	r2, [r3, #12]
 80050d8:	4b23      	ldr	r3, [pc, #140]	; (8005168 <USB_CoreInit+0xb8>)
 80050da:	4013      	ands	r3, r2
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f043 0210 	orr.w	r2, r3, #16
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80050f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d105      	bne.n	800510a <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fa52 	bl	80055b4 <USB_CoreReset>
 8005110:	4603      	mov	r3, r0
 8005112:	73fb      	strb	r3, [r7, #15]
 8005114:	e010      	b.n	8005138 <USB_CoreInit+0x88>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fa46 	bl	80055b4 <USB_CoreReset>
 8005128:	4603      	mov	r3, r0
 800512a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005130:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513a:	2b01      	cmp	r3, #1
 800513c:	d10b      	bne.n	8005156 <USB_CoreInit+0xa6>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f043 0206 	orr.w	r2, r3, #6
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f043 0220 	orr.w	r2, r3, #32
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005156:	7bfb      	ldrb	r3, [r7, #15]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005162:	b004      	add	sp, #16
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	ffbdffbf 	.word	0xffbdffbf

0800516c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f023 0201 	bic.w	r2, r3, #1
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b082      	sub	sp, #8
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
 8005196:	460b      	mov	r3, r1
 8005198:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80051a6:	78fb      	ldrb	r3, [r7, #3]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d106      	bne.n	80051ba <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	60da      	str	r2, [r3, #12]
 80051b8:	e00b      	b.n	80051d2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80051ba:	78fb      	ldrb	r3, [r7, #3]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d106      	bne.n	80051ce <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	60da      	str	r2, [r3, #12]
 80051cc:	e001      	b.n	80051d2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e003      	b.n	80051da <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80051d2:	2032      	movs	r0, #50	; 0x32
 80051d4:	f7fc f906 	bl	80013e4 <HAL_Delay>

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
	...

080051e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051e4:	b084      	sub	sp, #16
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b086      	sub	sp, #24
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
 80051ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80051f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80051fe:	2300      	movs	r3, #0
 8005200:	613b      	str	r3, [r7, #16]
 8005202:	e009      	b.n	8005218 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	3340      	adds	r3, #64	; 0x40
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	2200      	movs	r2, #0
 8005210:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	3301      	adds	r3, #1
 8005216:	613b      	str	r3, [r7, #16]
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	2b0e      	cmp	r3, #14
 800521c:	d9f2      	bls.n	8005204 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800521e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005220:	2b00      	cmp	r3, #0
 8005222:	d11c      	bne.n	800525e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005232:	f043 0302 	orr.w	r3, r3, #2
 8005236:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	601a      	str	r2, [r3, #0]
 800525c:	e005      	b.n	800526a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005262:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005270:	461a      	mov	r2, r3
 8005272:	2300      	movs	r3, #0
 8005274:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800527c:	4619      	mov	r1, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005284:	461a      	mov	r2, r3
 8005286:	680b      	ldr	r3, [r1, #0]
 8005288:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800528a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528c:	2b01      	cmp	r3, #1
 800528e:	d10c      	bne.n	80052aa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005292:	2b00      	cmp	r3, #0
 8005294:	d104      	bne.n	80052a0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005296:	2100      	movs	r1, #0
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 f959 	bl	8005550 <USB_SetDevSpeed>
 800529e:	e018      	b.n	80052d2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80052a0:	2101      	movs	r1, #1
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f954 	bl	8005550 <USB_SetDevSpeed>
 80052a8:	e013      	b.n	80052d2 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80052aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ac:	2b03      	cmp	r3, #3
 80052ae:	d10c      	bne.n	80052ca <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80052b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d104      	bne.n	80052c0 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80052b6:	2100      	movs	r1, #0
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 f949 	bl	8005550 <USB_SetDevSpeed>
 80052be:	e008      	b.n	80052d2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80052c0:	2101      	movs	r1, #1
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f944 	bl	8005550 <USB_SetDevSpeed>
 80052c8:	e003      	b.n	80052d2 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80052ca:	2103      	movs	r1, #3
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f93f 	bl	8005550 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052d2:	2110      	movs	r1, #16
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 f8f3 	bl	80054c0 <USB_FlushTxFifo>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f911 	bl	800550c <USB_FlushRxFifo>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052fa:	461a      	mov	r2, r3
 80052fc:	2300      	movs	r3, #0
 80052fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005306:	461a      	mov	r2, r3
 8005308:	2300      	movs	r3, #0
 800530a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005312:	461a      	mov	r2, r3
 8005314:	2300      	movs	r3, #0
 8005316:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005318:	2300      	movs	r3, #0
 800531a:	613b      	str	r3, [r7, #16]
 800531c:	e043      	b.n	80053a6 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4413      	add	r3, r2
 8005326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005330:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005334:	d118      	bne.n	8005368 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10a      	bne.n	8005352 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4413      	add	r3, r2
 8005344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005348:	461a      	mov	r2, r3
 800534a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800534e:	6013      	str	r3, [r2, #0]
 8005350:	e013      	b.n	800537a <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	4413      	add	r3, r2
 800535a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535e:	461a      	mov	r2, r3
 8005360:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	e008      	b.n	800537a <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4413      	add	r3, r2
 8005370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005374:	461a      	mov	r2, r3
 8005376:	2300      	movs	r3, #0
 8005378:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005386:	461a      	mov	r2, r3
 8005388:	2300      	movs	r3, #0
 800538a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4413      	add	r3, r2
 8005394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005398:	461a      	mov	r2, r3
 800539a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800539e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	3301      	adds	r3, #1
 80053a4:	613b      	str	r3, [r7, #16]
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d3b7      	bcc.n	800531e <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053ae:	2300      	movs	r3, #0
 80053b0:	613b      	str	r3, [r7, #16]
 80053b2:	e043      	b.n	800543c <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053ca:	d118      	bne.n	80053fe <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10a      	bne.n	80053e8 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053de:	461a      	mov	r2, r3
 80053e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	e013      	b.n	8005410 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f4:	461a      	mov	r2, r3
 80053f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80053fa:	6013      	str	r3, [r2, #0]
 80053fc:	e008      	b.n	8005410 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	015a      	lsls	r2, r3, #5
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	4413      	add	r3, r2
 8005406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540a:	461a      	mov	r2, r3
 800540c:	2300      	movs	r3, #0
 800540e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541c:	461a      	mov	r2, r3
 800541e:	2300      	movs	r3, #0
 8005420:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	015a      	lsls	r2, r3, #5
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	4413      	add	r3, r2
 800542a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800542e:	461a      	mov	r2, r3
 8005430:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005434:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	3301      	adds	r3, #1
 800543a:	613b      	str	r3, [r7, #16]
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	429a      	cmp	r2, r3
 8005442:	d3b7      	bcc.n	80053b4 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005452:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005456:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005464:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005468:	2b00      	cmp	r3, #0
 800546a:	d105      	bne.n	8005478 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	f043 0210 	orr.w	r2, r3, #16
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	699a      	ldr	r2, [r3, #24]
 800547c:	4b0e      	ldr	r3, [pc, #56]	; (80054b8 <USB_DevInit+0x2d4>)
 800547e:	4313      	orrs	r3, r2
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005486:	2b00      	cmp	r3, #0
 8005488:	d005      	beq.n	8005496 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	f043 0208 	orr.w	r2, r3, #8
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005498:	2b01      	cmp	r3, #1
 800549a:	d105      	bne.n	80054a8 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	699a      	ldr	r2, [r3, #24]
 80054a0:	4b06      	ldr	r3, [pc, #24]	; (80054bc <USB_DevInit+0x2d8>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80054a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3718      	adds	r7, #24
 80054ae:	46bd      	mov	sp, r7
 80054b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054b4:	b004      	add	sp, #16
 80054b6:	4770      	bx	lr
 80054b8:	803c3800 	.word	0x803c3800
 80054bc:	40000004 	.word	0x40000004

080054c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	019b      	lsls	r3, r3, #6
 80054d2:	f043 0220 	orr.w	r2, r3, #32
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	3301      	adds	r3, #1
 80054de:	60fb      	str	r3, [r7, #12]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4a09      	ldr	r2, [pc, #36]	; (8005508 <USB_FlushTxFifo+0x48>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d901      	bls.n	80054ec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e006      	b.n	80054fa <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	f003 0320 	and.w	r3, r3, #32
 80054f4:	2b20      	cmp	r3, #32
 80054f6:	d0f0      	beq.n	80054da <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	00030d40 	.word	0x00030d40

0800550c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005514:	2300      	movs	r3, #0
 8005516:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2210      	movs	r2, #16
 800551c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	3301      	adds	r3, #1
 8005522:	60fb      	str	r3, [r7, #12]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4a09      	ldr	r2, [pc, #36]	; (800554c <USB_FlushRxFifo+0x40>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d901      	bls.n	8005530 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e006      	b.n	800553e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	f003 0310 	and.w	r3, r3, #16
 8005538:	2b10      	cmp	r3, #16
 800553a:	d0f0      	beq.n	800551e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	00030d40 	.word	0x00030d40

08005550 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	460b      	mov	r3, r1
 800555a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	78fb      	ldrb	r3, [r7, #3]
 800556a:	68f9      	ldr	r1, [r7, #12]
 800556c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005570:	4313      	orrs	r3, r2
 8005572:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b084      	sub	sp, #16
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800559c:	f043 0302 	orr.w	r3, r3, #2
 80055a0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80055a2:	2003      	movs	r0, #3
 80055a4:	f7fb ff1e 	bl	80013e4 <HAL_Delay>

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
	...

080055b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80055bc:	2300      	movs	r3, #0
 80055be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	3301      	adds	r3, #1
 80055c4:	60fb      	str	r3, [r7, #12]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	4a13      	ldr	r2, [pc, #76]	; (8005618 <USB_CoreReset+0x64>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d901      	bls.n	80055d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e01b      	b.n	800560a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	daf2      	bge.n	80055c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80055da:	2300      	movs	r3, #0
 80055dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	f043 0201 	orr.w	r2, r3, #1
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	3301      	adds	r3, #1
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4a09      	ldr	r2, [pc, #36]	; (8005618 <USB_CoreReset+0x64>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d901      	bls.n	80055fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e006      	b.n	800560a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b01      	cmp	r3, #1
 8005606:	d0f0      	beq.n	80055ea <USB_CoreReset+0x36>

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	00030d40 	.word	0x00030d40

0800561c <__errno>:
 800561c:	4b01      	ldr	r3, [pc, #4]	; (8005624 <__errno+0x8>)
 800561e:	6818      	ldr	r0, [r3, #0]
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	2000000c 	.word	0x2000000c

08005628 <__libc_init_array>:
 8005628:	b570      	push	{r4, r5, r6, lr}
 800562a:	4e0d      	ldr	r6, [pc, #52]	; (8005660 <__libc_init_array+0x38>)
 800562c:	4c0d      	ldr	r4, [pc, #52]	; (8005664 <__libc_init_array+0x3c>)
 800562e:	1ba4      	subs	r4, r4, r6
 8005630:	10a4      	asrs	r4, r4, #2
 8005632:	2500      	movs	r5, #0
 8005634:	42a5      	cmp	r5, r4
 8005636:	d109      	bne.n	800564c <__libc_init_array+0x24>
 8005638:	4e0b      	ldr	r6, [pc, #44]	; (8005668 <__libc_init_array+0x40>)
 800563a:	4c0c      	ldr	r4, [pc, #48]	; (800566c <__libc_init_array+0x44>)
 800563c:	f000 f894 	bl	8005768 <_init>
 8005640:	1ba4      	subs	r4, r4, r6
 8005642:	10a4      	asrs	r4, r4, #2
 8005644:	2500      	movs	r5, #0
 8005646:	42a5      	cmp	r5, r4
 8005648:	d105      	bne.n	8005656 <__libc_init_array+0x2e>
 800564a:	bd70      	pop	{r4, r5, r6, pc}
 800564c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005650:	4798      	blx	r3
 8005652:	3501      	adds	r5, #1
 8005654:	e7ee      	b.n	8005634 <__libc_init_array+0xc>
 8005656:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800565a:	4798      	blx	r3
 800565c:	3501      	adds	r5, #1
 800565e:	e7f2      	b.n	8005646 <__libc_init_array+0x1e>
 8005660:	080057b8 	.word	0x080057b8
 8005664:	080057b8 	.word	0x080057b8
 8005668:	080057b8 	.word	0x080057b8
 800566c:	080057bc 	.word	0x080057bc

08005670 <malloc>:
 8005670:	4b02      	ldr	r3, [pc, #8]	; (800567c <malloc+0xc>)
 8005672:	4601      	mov	r1, r0
 8005674:	6818      	ldr	r0, [r3, #0]
 8005676:	f000 b80b 	b.w	8005690 <_malloc_r>
 800567a:	bf00      	nop
 800567c:	2000000c 	.word	0x2000000c

08005680 <memset>:
 8005680:	4402      	add	r2, r0
 8005682:	4603      	mov	r3, r0
 8005684:	4293      	cmp	r3, r2
 8005686:	d100      	bne.n	800568a <memset+0xa>
 8005688:	4770      	bx	lr
 800568a:	f803 1b01 	strb.w	r1, [r3], #1
 800568e:	e7f9      	b.n	8005684 <memset+0x4>

08005690 <_malloc_r>:
 8005690:	b570      	push	{r4, r5, r6, lr}
 8005692:	1ccd      	adds	r5, r1, #3
 8005694:	f025 0503 	bic.w	r5, r5, #3
 8005698:	3508      	adds	r5, #8
 800569a:	2d0c      	cmp	r5, #12
 800569c:	bf38      	it	cc
 800569e:	250c      	movcc	r5, #12
 80056a0:	2d00      	cmp	r5, #0
 80056a2:	4606      	mov	r6, r0
 80056a4:	db01      	blt.n	80056aa <_malloc_r+0x1a>
 80056a6:	42a9      	cmp	r1, r5
 80056a8:	d903      	bls.n	80056b2 <_malloc_r+0x22>
 80056aa:	230c      	movs	r3, #12
 80056ac:	6033      	str	r3, [r6, #0]
 80056ae:	2000      	movs	r0, #0
 80056b0:	bd70      	pop	{r4, r5, r6, pc}
 80056b2:	f000 f857 	bl	8005764 <__malloc_lock>
 80056b6:	4a21      	ldr	r2, [pc, #132]	; (800573c <_malloc_r+0xac>)
 80056b8:	6814      	ldr	r4, [r2, #0]
 80056ba:	4621      	mov	r1, r4
 80056bc:	b991      	cbnz	r1, 80056e4 <_malloc_r+0x54>
 80056be:	4c20      	ldr	r4, [pc, #128]	; (8005740 <_malloc_r+0xb0>)
 80056c0:	6823      	ldr	r3, [r4, #0]
 80056c2:	b91b      	cbnz	r3, 80056cc <_malloc_r+0x3c>
 80056c4:	4630      	mov	r0, r6
 80056c6:	f000 f83d 	bl	8005744 <_sbrk_r>
 80056ca:	6020      	str	r0, [r4, #0]
 80056cc:	4629      	mov	r1, r5
 80056ce:	4630      	mov	r0, r6
 80056d0:	f000 f838 	bl	8005744 <_sbrk_r>
 80056d4:	1c43      	adds	r3, r0, #1
 80056d6:	d124      	bne.n	8005722 <_malloc_r+0x92>
 80056d8:	230c      	movs	r3, #12
 80056da:	6033      	str	r3, [r6, #0]
 80056dc:	4630      	mov	r0, r6
 80056de:	f000 f842 	bl	8005766 <__malloc_unlock>
 80056e2:	e7e4      	b.n	80056ae <_malloc_r+0x1e>
 80056e4:	680b      	ldr	r3, [r1, #0]
 80056e6:	1b5b      	subs	r3, r3, r5
 80056e8:	d418      	bmi.n	800571c <_malloc_r+0x8c>
 80056ea:	2b0b      	cmp	r3, #11
 80056ec:	d90f      	bls.n	800570e <_malloc_r+0x7e>
 80056ee:	600b      	str	r3, [r1, #0]
 80056f0:	50cd      	str	r5, [r1, r3]
 80056f2:	18cc      	adds	r4, r1, r3
 80056f4:	4630      	mov	r0, r6
 80056f6:	f000 f836 	bl	8005766 <__malloc_unlock>
 80056fa:	f104 000b 	add.w	r0, r4, #11
 80056fe:	1d23      	adds	r3, r4, #4
 8005700:	f020 0007 	bic.w	r0, r0, #7
 8005704:	1ac3      	subs	r3, r0, r3
 8005706:	d0d3      	beq.n	80056b0 <_malloc_r+0x20>
 8005708:	425a      	negs	r2, r3
 800570a:	50e2      	str	r2, [r4, r3]
 800570c:	e7d0      	b.n	80056b0 <_malloc_r+0x20>
 800570e:	428c      	cmp	r4, r1
 8005710:	684b      	ldr	r3, [r1, #4]
 8005712:	bf16      	itet	ne
 8005714:	6063      	strne	r3, [r4, #4]
 8005716:	6013      	streq	r3, [r2, #0]
 8005718:	460c      	movne	r4, r1
 800571a:	e7eb      	b.n	80056f4 <_malloc_r+0x64>
 800571c:	460c      	mov	r4, r1
 800571e:	6849      	ldr	r1, [r1, #4]
 8005720:	e7cc      	b.n	80056bc <_malloc_r+0x2c>
 8005722:	1cc4      	adds	r4, r0, #3
 8005724:	f024 0403 	bic.w	r4, r4, #3
 8005728:	42a0      	cmp	r0, r4
 800572a:	d005      	beq.n	8005738 <_malloc_r+0xa8>
 800572c:	1a21      	subs	r1, r4, r0
 800572e:	4630      	mov	r0, r6
 8005730:	f000 f808 	bl	8005744 <_sbrk_r>
 8005734:	3001      	adds	r0, #1
 8005736:	d0cf      	beq.n	80056d8 <_malloc_r+0x48>
 8005738:	6025      	str	r5, [r4, #0]
 800573a:	e7db      	b.n	80056f4 <_malloc_r+0x64>
 800573c:	20000090 	.word	0x20000090
 8005740:	20000094 	.word	0x20000094

08005744 <_sbrk_r>:
 8005744:	b538      	push	{r3, r4, r5, lr}
 8005746:	4c06      	ldr	r4, [pc, #24]	; (8005760 <_sbrk_r+0x1c>)
 8005748:	2300      	movs	r3, #0
 800574a:	4605      	mov	r5, r0
 800574c:	4608      	mov	r0, r1
 800574e:	6023      	str	r3, [r4, #0]
 8005750:	f7fb fd76 	bl	8001240 <_sbrk>
 8005754:	1c43      	adds	r3, r0, #1
 8005756:	d102      	bne.n	800575e <_sbrk_r+0x1a>
 8005758:	6823      	ldr	r3, [r4, #0]
 800575a:	b103      	cbz	r3, 800575e <_sbrk_r+0x1a>
 800575c:	602b      	str	r3, [r5, #0]
 800575e:	bd38      	pop	{r3, r4, r5, pc}
 8005760:	20000798 	.word	0x20000798

08005764 <__malloc_lock>:
 8005764:	4770      	bx	lr

08005766 <__malloc_unlock>:
 8005766:	4770      	bx	lr

08005768 <_init>:
 8005768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800576a:	bf00      	nop
 800576c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800576e:	bc08      	pop	{r3}
 8005770:	469e      	mov	lr, r3
 8005772:	4770      	bx	lr

08005774 <_fini>:
 8005774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005776:	bf00      	nop
 8005778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800577a:	bc08      	pop	{r3}
 800577c:	469e      	mov	lr, r3
 800577e:	4770      	bx	lr
