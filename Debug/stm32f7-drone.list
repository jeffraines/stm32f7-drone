
stm32f7-drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000567c  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800585c  0800585c  0001585c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800587c  0800587c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800587c  0800587c  0001587c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005884  08005884  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005884  08005884  00015884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005888  08005888  00015888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800588c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000072c  20000070  080058fc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000079c  080058fc  0002079c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c87  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a1c  00000000  00000000  00033d27  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011f8  00000000  00000000  00036748  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010a0  00000000  00000000  00037940  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002451a  00000000  00000000  000389e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e7e6  00000000  00000000  0005cefa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e1623  00000000  00000000  0006b6e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014cd03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cc4  00000000  00000000  0014cd80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005844 	.word	0x08005844

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08005844 	.word	0x08005844

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <ESC_INIT_CONTROLLER>:
#include <stdlib.h>
#include "main.h"
#include "ESC.h"

ESC_CONTROLLER* ESC_INIT_CONTROLLER(TIM_HandleTypeDef* timer, DMA_HandleTypeDef* hdma1, DMA_HandleTypeDef* hdma2, DMA_HandleTypeDef* hdma3, DMA_HandleTypeDef* hdma4)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af00      	add	r7, sp, #0
 8000526:	60f8      	str	r0, [r7, #12]
 8000528:	60b9      	str	r1, [r7, #8]
 800052a:	607a      	str	r2, [r7, #4]
 800052c:	603b      	str	r3, [r7, #0]
	ESC_CONTROLLER* ESC_CONTROLLER = malloc(sizeof(ESC_CONTROLLER) * ESC_COUNT);
 800052e:	2010      	movs	r0, #16
 8000530:	f005 f90c 	bl	800574c <malloc>
 8000534:	4603      	mov	r3, r0
 8000536:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < ESC_COUNT; i++)
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	e096      	b.n	800066c <ESC_INIT_CONTROLLER+0x14c>
	{
		ESC_CONTROLLER[i].Throttle = 1000*i;
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000544:	fb02 f103 	mul.w	r1, r2, r3
 8000548:	697a      	ldr	r2, [r7, #20]
 800054a:	4613      	mov	r3, r2
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	4413      	add	r3, r2
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	461a      	mov	r2, r3
 8000554:	693b      	ldr	r3, [r7, #16]
 8000556:	4413      	add	r3, r2
 8000558:	460a      	mov	r2, r1
 800055a:	601a      	str	r2, [r3, #0]
		ESC_CONTROLLER[i].Channel = 4*i;
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	0099      	lsls	r1, r3, #2
 8000560:	697a      	ldr	r2, [r7, #20]
 8000562:	4613      	mov	r3, r2
 8000564:	005b      	lsls	r3, r3, #1
 8000566:	4413      	add	r3, r2
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	461a      	mov	r2, r3
 800056c:	693b      	ldr	r3, [r7, #16]
 800056e:	4413      	add	r3, r2
 8000570:	460a      	mov	r2, r1
 8000572:	605a      	str	r2, [r3, #4]
		ESC_CONTROLLER[i].Index = i;
 8000574:	697a      	ldr	r2, [r7, #20]
 8000576:	4613      	mov	r3, r2
 8000578:	005b      	lsls	r3, r3, #1
 800057a:	4413      	add	r3, r2
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	461a      	mov	r2, r3
 8000580:	693b      	ldr	r3, [r7, #16]
 8000582:	4413      	add	r3, r2
 8000584:	697a      	ldr	r2, [r7, #20]
 8000586:	609a      	str	r2, [r3, #8]
		switch (i)
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	2b03      	cmp	r3, #3
 800058c:	d85e      	bhi.n	800064c <ESC_INIT_CONTROLLER+0x12c>
 800058e:	a201      	add	r2, pc, #4	; (adr r2, 8000594 <ESC_INIT_CONTROLLER+0x74>)
 8000590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000594:	080005a5 	.word	0x080005a5
 8000598:	080005cf 	.word	0x080005cf
 800059c:	080005f9 	.word	0x080005f9
 80005a0:	08000623 	.word	0x08000623
		{
			case 0:
				HAL_DMA_Start(hdma1, (uint32_t) &ESC_CONTROLLER[i].Throttle, (uint32_t) &timer->Instance->CCR1 + (4*i), sizeof(ESC_CONTROLLER[i].Throttle));
 80005a4:	697a      	ldr	r2, [r7, #20]
 80005a6:	4613      	mov	r3, r2
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	4413      	add	r3, r2
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	461a      	mov	r2, r3
 80005b0:	693b      	ldr	r3, [r7, #16]
 80005b2:	4413      	add	r3, r2
 80005b4:	4619      	mov	r1, r3
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	3334      	adds	r3, #52	; 0x34
 80005bc:	461a      	mov	r2, r3
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	441a      	add	r2, r3
 80005c4:	2304      	movs	r3, #4
 80005c6:	68b8      	ldr	r0, [r7, #8]
 80005c8:	f001 fe1e 	bl	8002208 <HAL_DMA_Start>
				break;
 80005cc:	e03e      	b.n	800064c <ESC_INIT_CONTROLLER+0x12c>
			case 1:
				HAL_DMA_Start(hdma2, (uint32_t) &ESC_CONTROLLER[i].Throttle, (uint32_t) &timer->Instance->CCR1 + (4*i), sizeof(ESC_CONTROLLER[i].Throttle));
 80005ce:	697a      	ldr	r2, [r7, #20]
 80005d0:	4613      	mov	r3, r2
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	4413      	add	r3, r2
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	461a      	mov	r2, r3
 80005da:	693b      	ldr	r3, [r7, #16]
 80005dc:	4413      	add	r3, r2
 80005de:	4619      	mov	r1, r3
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	3334      	adds	r3, #52	; 0x34
 80005e6:	461a      	mov	r2, r3
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	441a      	add	r2, r3
 80005ee:	2304      	movs	r3, #4
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f001 fe09 	bl	8002208 <HAL_DMA_Start>
				break;
 80005f6:	e029      	b.n	800064c <ESC_INIT_CONTROLLER+0x12c>
			case 2:
				HAL_DMA_Start(hdma3, (uint32_t) &ESC_CONTROLLER[i].Throttle, (uint32_t) &timer->Instance->CCR1 + (4*i), sizeof(ESC_CONTROLLER[i].Throttle));
 80005f8:	697a      	ldr	r2, [r7, #20]
 80005fa:	4613      	mov	r3, r2
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	4413      	add	r3, r2
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	461a      	mov	r2, r3
 8000604:	693b      	ldr	r3, [r7, #16]
 8000606:	4413      	add	r3, r2
 8000608:	4619      	mov	r1, r3
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	3334      	adds	r3, #52	; 0x34
 8000610:	461a      	mov	r2, r3
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	441a      	add	r2, r3
 8000618:	2304      	movs	r3, #4
 800061a:	6838      	ldr	r0, [r7, #0]
 800061c:	f001 fdf4 	bl	8002208 <HAL_DMA_Start>
				break;
 8000620:	e014      	b.n	800064c <ESC_INIT_CONTROLLER+0x12c>
			case 3:
				HAL_DMA_Start(hdma4, (uint32_t) &ESC_CONTROLLER[i].Throttle, (uint32_t) &timer->Instance->CCR1 + (4*i), sizeof(ESC_CONTROLLER[i].Throttle));
 8000622:	697a      	ldr	r2, [r7, #20]
 8000624:	4613      	mov	r3, r2
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	4413      	add	r3, r2
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	461a      	mov	r2, r3
 800062e:	693b      	ldr	r3, [r7, #16]
 8000630:	4413      	add	r3, r2
 8000632:	4619      	mov	r1, r3
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	3334      	adds	r3, #52	; 0x34
 800063a:	461a      	mov	r2, r3
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	441a      	add	r2, r3
 8000642:	2304      	movs	r3, #4
 8000644:	6a38      	ldr	r0, [r7, #32]
 8000646:	f001 fddf 	bl	8002208 <HAL_DMA_Start>
				break;
 800064a:	bf00      	nop
		}
		HAL_TIM_PWM_Start(timer, ESC_CONTROLLER[i].Channel);
 800064c:	697a      	ldr	r2, [r7, #20]
 800064e:	4613      	mov	r3, r2
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	4413      	add	r3, r2
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	461a      	mov	r2, r3
 8000658:	693b      	ldr	r3, [r7, #16]
 800065a:	4413      	add	r3, r2
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	4619      	mov	r1, r3
 8000660:	68f8      	ldr	r0, [r7, #12]
 8000662:	f003 fc41 	bl	8003ee8 <HAL_TIM_PWM_Start>
	for (int i = 0; i < ESC_COUNT; i++)
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	3301      	adds	r3, #1
 800066a:	617b      	str	r3, [r7, #20]
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	2b03      	cmp	r3, #3
 8000670:	f77f af65 	ble.w	800053e <ESC_INIT_CONTROLLER+0x1e>
	}
	return ESC_CONTROLLER;
 8000674:	693b      	ldr	r3, [r7, #16]
}
 8000676:	4618      	mov	r0, r3
 8000678:	3718      	adds	r7, #24
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop

08000680 <ESC_UPDATE_THROTTLE>:

void ESC_UPDATE_THROTTLE(TIM_HandleTypeDef* timer, DMA_HandleTypeDef* hdma, ESC_CONTROLLER* ESC)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
	// May want to handle error checking for DMA_FLAG_(TEIFx, DMEIFx, FEIFx) flags
	__HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TCIF0_4 | DMA_FLAG_HTIF0_4 |
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	461a      	mov	r2, r3
 8000692:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <ESC_UPDATE_THROTTLE+0x7c>)
 8000694:	429a      	cmp	r2, r3
 8000696:	d903      	bls.n	80006a0 <ESC_UPDATE_THROTTLE+0x20>
 8000698:	4b19      	ldr	r3, [pc, #100]	; (8000700 <ESC_UPDATE_THROTTLE+0x80>)
 800069a:	4a1a      	ldr	r2, [pc, #104]	; (8000704 <ESC_UPDATE_THROTTLE+0x84>)
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	e016      	b.n	80006ce <ESC_UPDATE_THROTTLE+0x4e>
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	461a      	mov	r2, r3
 80006a6:	4b18      	ldr	r3, [pc, #96]	; (8000708 <ESC_UPDATE_THROTTLE+0x88>)
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d903      	bls.n	80006b4 <ESC_UPDATE_THROTTLE+0x34>
 80006ac:	4b14      	ldr	r3, [pc, #80]	; (8000700 <ESC_UPDATE_THROTTLE+0x80>)
 80006ae:	4a15      	ldr	r2, [pc, #84]	; (8000704 <ESC_UPDATE_THROTTLE+0x84>)
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	e00c      	b.n	80006ce <ESC_UPDATE_THROTTLE+0x4e>
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <ESC_UPDATE_THROTTLE+0x8c>)
 80006bc:	429a      	cmp	r2, r3
 80006be:	d903      	bls.n	80006c8 <ESC_UPDATE_THROTTLE+0x48>
 80006c0:	4b13      	ldr	r3, [pc, #76]	; (8000710 <ESC_UPDATE_THROTTLE+0x90>)
 80006c2:	4a10      	ldr	r2, [pc, #64]	; (8000704 <ESC_UPDATE_THROTTLE+0x84>)
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	e002      	b.n	80006ce <ESC_UPDATE_THROTTLE+0x4e>
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <ESC_UPDATE_THROTTLE+0x90>)
 80006ca:	4a0e      	ldr	r2, [pc, #56]	; (8000704 <ESC_UPDATE_THROTTLE+0x84>)
 80006cc:	609a      	str	r2, [r3, #8]
						 	   DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 |
							   DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 |
							   DMA_FLAG_TCIF3_7 | DMA_FLAG_HTIF3_7);	// Clear transfer and half transfer complete flags
	__HAL_DMA_SET_COUNTER(hdma, sizeof(ESC[ESC->Channel].Throttle));
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2204      	movs	r2, #4
 80006d4:	605a      	str	r2, [r3, #4]
	__HAL_DMA_ENABLE(hdma);
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f042 0201 	orr.w	r2, r2, #1
 80006e4:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(timer, ESC->Channel);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	4619      	mov	r1, r3
 80006ec:	68f8      	ldr	r0, [r7, #12]
 80006ee:	f003 fbfb 	bl	8003ee8 <HAL_TIM_PWM_Start>
 }
 80006f2:	bf00      	nop
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40026458 	.word	0x40026458
 8000700:	40026400 	.word	0x40026400
 8000704:	0c300c30 	.word	0x0c300c30
 8000708:	400260b8 	.word	0x400260b8
 800070c:	40026058 	.word	0x40026058
 8000710:	40026000 	.word	0x40026000

08000714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071a:	f000 fe74 	bl	8001406 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071e:	f000 f8ab 	bl	8000878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000722:	f000 fb69 	bl	8000df8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000726:	f000 fa69 	bl	8000bfc <MX_DMA_Init>
  MX_USART3_UART_Init();
 800072a:	f000 fa09 	bl	8000b40 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800072e:	f000 fa37 	bl	8000ba0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 8000732:	f000 f989 	bl	8000a48 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000736:	f000 f935 	bl	80009a4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &potValue, sizeof(potValue));
 800073a:	2202      	movs	r2, #2
 800073c:	4947      	ldr	r1, [pc, #284]	; (800085c <main+0x148>)
 800073e:	4848      	ldr	r0, [pc, #288]	; (8000860 <main+0x14c>)
 8000740:	f000 ffe4 	bl	800170c <HAL_ADC_Start_DMA>
  ESC_CONTROLLER* myESCSet = ESC_INIT_CONTROLLER(&htim4, &hdma_memtomem_dma2_stream0, &hdma_memtomem_dma2_stream1, &hdma_memtomem_dma2_stream2, &hdma_memtomem_dma2_stream3);
 8000744:	4b47      	ldr	r3, [pc, #284]	; (8000864 <main+0x150>)
 8000746:	9300      	str	r3, [sp, #0]
 8000748:	4b47      	ldr	r3, [pc, #284]	; (8000868 <main+0x154>)
 800074a:	4a48      	ldr	r2, [pc, #288]	; (800086c <main+0x158>)
 800074c:	4948      	ldr	r1, [pc, #288]	; (8000870 <main+0x15c>)
 800074e:	4849      	ldr	r0, [pc, #292]	; (8000874 <main+0x160>)
 8000750:	f7ff fee6 	bl	8000520 <ESC_INIT_CONTROLLER>
 8000754:	6038      	str	r0, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      HAL_ADC_Start(&hadc1);
 8000756:	4842      	ldr	r0, [pc, #264]	; (8000860 <main+0x14c>)
 8000758:	f000 ff18 	bl	800158c <HAL_ADC_Start>
      for (int i = 0; i < ESC_COUNT; i++)
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	e075      	b.n	800084e <main+0x13a>
      {
    	  if (myESCSet[i].Throttle < 10000) myESCSet[i].Throttle += 10;
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	4613      	mov	r3, r2
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	4413      	add	r3, r2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	461a      	mov	r2, r3
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	4413      	add	r3, r2
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f242 720f 	movw	r2, #9999	; 0x270f
 8000778:	4293      	cmp	r3, r2
 800077a:	d814      	bhi.n	80007a6 <main+0x92>
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	4613      	mov	r3, r2
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	4413      	add	r3, r2
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	461a      	mov	r2, r3
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	4413      	add	r3, r2
 800078c:	6819      	ldr	r1, [r3, #0]
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	4613      	mov	r3, r2
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	4413      	add	r3, r2
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	461a      	mov	r2, r3
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	4413      	add	r3, r2
 800079e:	f101 020a 	add.w	r2, r1, #10
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	e009      	b.n	80007ba <main+0xa6>
    	  else myESCSet[i].Throttle = 0;
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	4613      	mov	r3, r2
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	4413      	add	r3, r2
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	461a      	mov	r2, r3
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	4413      	add	r3, r2
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
    	  switch (i)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2b03      	cmp	r3, #3
 80007be:	d843      	bhi.n	8000848 <main+0x134>
 80007c0:	a201      	add	r2, pc, #4	; (adr r2, 80007c8 <main+0xb4>)
 80007c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007c6:	bf00      	nop
 80007c8:	080007d9 	.word	0x080007d9
 80007cc:	080007f5 	.word	0x080007f5
 80007d0:	08000811 	.word	0x08000811
 80007d4:	0800082d 	.word	0x0800082d
    	  {
    	  	  case 0: ESC_UPDATE_THROTTLE(&htim4, &hdma_memtomem_dma2_stream0, &myESCSet[i]);
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	4613      	mov	r3, r2
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	4413      	add	r3, r2
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	461a      	mov	r2, r3
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	4413      	add	r3, r2
 80007e8:	461a      	mov	r2, r3
 80007ea:	4921      	ldr	r1, [pc, #132]	; (8000870 <main+0x15c>)
 80007ec:	4821      	ldr	r0, [pc, #132]	; (8000874 <main+0x160>)
 80007ee:	f7ff ff47 	bl	8000680 <ESC_UPDATE_THROTTLE>
    	  	  break;
 80007f2:	e029      	b.n	8000848 <main+0x134>
    	  	  case 1: ESC_UPDATE_THROTTLE(&htim4, &hdma_memtomem_dma2_stream1, &myESCSet[i]);
 80007f4:	687a      	ldr	r2, [r7, #4]
 80007f6:	4613      	mov	r3, r2
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	4413      	add	r3, r2
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	461a      	mov	r2, r3
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	4413      	add	r3, r2
 8000804:	461a      	mov	r2, r3
 8000806:	4919      	ldr	r1, [pc, #100]	; (800086c <main+0x158>)
 8000808:	481a      	ldr	r0, [pc, #104]	; (8000874 <main+0x160>)
 800080a:	f7ff ff39 	bl	8000680 <ESC_UPDATE_THROTTLE>
    	  	  break;
 800080e:	e01b      	b.n	8000848 <main+0x134>
    	  	  case 2: ESC_UPDATE_THROTTLE(&htim4, &hdma_memtomem_dma2_stream2, &myESCSet[i]);
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	4613      	mov	r3, r2
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	4413      	add	r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	461a      	mov	r2, r3
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	4413      	add	r3, r2
 8000820:	461a      	mov	r2, r3
 8000822:	4911      	ldr	r1, [pc, #68]	; (8000868 <main+0x154>)
 8000824:	4813      	ldr	r0, [pc, #76]	; (8000874 <main+0x160>)
 8000826:	f7ff ff2b 	bl	8000680 <ESC_UPDATE_THROTTLE>
    	  	  break;
 800082a:	e00d      	b.n	8000848 <main+0x134>
    	  	  case 3: ESC_UPDATE_THROTTLE(&htim4, &hdma_memtomem_dma2_stream3, &myESCSet[i]);
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	4613      	mov	r3, r2
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	4413      	add	r3, r2
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	461a      	mov	r2, r3
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	4413      	add	r3, r2
 800083c:	461a      	mov	r2, r3
 800083e:	4909      	ldr	r1, [pc, #36]	; (8000864 <main+0x150>)
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <main+0x160>)
 8000842:	f7ff ff1d 	bl	8000680 <ESC_UPDATE_THROTTLE>
    	  	  break;
 8000846:	bf00      	nop
      for (int i = 0; i < ESC_COUNT; i++)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3301      	adds	r3, #1
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2b03      	cmp	r3, #3
 8000852:	dd86      	ble.n	8000762 <main+0x4e>
    	  }
      }
      HAL_Delay(10);
 8000854:	200a      	movs	r0, #10
 8000856:	f000 fe33 	bl	80014c0 <HAL_Delay>
      HAL_ADC_Start(&hadc1);
 800085a:	e77c      	b.n	8000756 <main+0x42>
 800085c:	20000664 	.word	0x20000664
 8000860:	2000061c 	.word	0x2000061c
 8000864:	200005bc 	.word	0x200005bc
 8000868:	20000734 	.word	0x20000734
 800086c:	20000668 	.word	0x20000668
 8000870:	20000098 	.word	0x20000098
 8000874:	200000f8 	.word	0x200000f8

08000878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b0b4      	sub	sp, #208	; 0xd0
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000882:	2230      	movs	r2, #48	; 0x30
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f004 ff68 	bl	800575c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	2280      	movs	r2, #128	; 0x80
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f004 ff59 	bl	800575c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008aa:	f002 faad 	bl	8002e08 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	4b3a      	ldr	r3, [pc, #232]	; (8000998 <SystemClock_Config+0x120>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	4a39      	ldr	r2, [pc, #228]	; (8000998 <SystemClock_Config+0x120>)
 80008b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ba:	4b37      	ldr	r3, [pc, #220]	; (8000998 <SystemClock_Config+0x120>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c6:	4b35      	ldr	r3, [pc, #212]	; (800099c <SystemClock_Config+0x124>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a34      	ldr	r2, [pc, #208]	; (800099c <SystemClock_Config+0x124>)
 80008cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008d0:	6013      	str	r3, [r2, #0]
 80008d2:	4b32      	ldr	r3, [pc, #200]	; (800099c <SystemClock_Config+0x124>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008de:	2301      	movs	r3, #1
 80008e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ec:	2302      	movs	r3, #2
 80008ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008fa:	2308      	movs	r3, #8
 80008fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000900:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000904:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000908:	2302      	movs	r3, #2
 800090a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800090e:	2309      	movs	r3, #9
 8000910:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000914:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000918:	4618      	mov	r0, r3
 800091a:	f002 fad5 	bl	8002ec8 <HAL_RCC_OscConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000924:	f000 fb20 	bl	8000f68 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000928:	f002 fa7e 	bl	8002e28 <HAL_PWREx_EnableOverDrive>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000932:	f000 fb19 	bl	8000f68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000936:	230f      	movs	r3, #15
 8000938:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093c:	2302      	movs	r3, #2
 800093e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000948:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800094c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000954:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000958:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800095c:	2107      	movs	r1, #7
 800095e:	4618      	mov	r0, r3
 8000960:	f002 fd56 	bl	8003410 <HAL_RCC_ClockConfig>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800096a:	f000 fafd 	bl	8000f68 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <SystemClock_Config+0x128>)
 8000970:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000972:	2300      	movs	r3, #0
 8000974:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000976:	2300      	movs	r3, #0
 8000978:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	4618      	mov	r0, r3
 8000982:	f002 ff3d 	bl	8003800 <HAL_RCCEx_PeriphCLKConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <SystemClock_Config+0x118>
  {
    Error_Handler();
 800098c:	f000 faec 	bl	8000f68 <Error_Handler>
  }
}
 8000990:	bf00      	nop
 8000992:	37d0      	adds	r7, #208	; 0xd0
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40023800 	.word	0x40023800
 800099c:	40007000 	.word	0x40007000
 80009a0:	00200100 	.word	0x00200100

080009a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009aa:	463b      	mov	r3, r7
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009b6:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <MX_ADC1_Init+0x98>)
 80009b8:	4a21      	ldr	r2, [pc, #132]	; (8000a40 <MX_ADC1_Init+0x9c>)
 80009ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80009bc:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <MX_ADC1_Init+0x98>)
 80009be:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009c4:	4b1d      	ldr	r3, [pc, #116]	; (8000a3c <MX_ADC1_Init+0x98>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009ca:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <MX_ADC1_Init+0x98>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009d0:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <MX_ADC1_Init+0x98>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009d6:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <MX_ADC1_Init+0x98>)
 80009d8:	2200      	movs	r2, #0
 80009da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <MX_ADC1_Init+0x98>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009e4:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <MX_ADC1_Init+0x98>)
 80009e6:	4a17      	ldr	r2, [pc, #92]	; (8000a44 <MX_ADC1_Init+0xa0>)
 80009e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009ea:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <MX_ADC1_Init+0x98>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <MX_ADC1_Init+0x98>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_ADC1_Init+0x98>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80009fe:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_ADC1_Init+0x98>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a04:	480d      	ldr	r0, [pc, #52]	; (8000a3c <MX_ADC1_Init+0x98>)
 8000a06:	f000 fd7d 	bl	8001504 <HAL_ADC_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a10:	f000 faaa 	bl	8000f68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000a14:	2309      	movs	r3, #9
 8000a16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a20:	463b      	mov	r3, r7
 8000a22:	4619      	mov	r1, r3
 8000a24:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_ADC1_Init+0x98>)
 8000a26:	f000 ff69 	bl	80018fc <HAL_ADC_ConfigChannel>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a30:	f000 fa9a 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	2000061c 	.word	0x2000061c
 8000a40:	40012000 	.word	0x40012000
 8000a44:	0f000001 	.word	0x0f000001

08000a48 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
 8000a68:	615a      	str	r2, [r3, #20]
 8000a6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a6c:	4b32      	ldr	r3, [pc, #200]	; (8000b38 <MX_TIM4_Init+0xf0>)
 8000a6e:	4a33      	ldr	r2, [pc, #204]	; (8000b3c <MX_TIM4_Init+0xf4>)
 8000a70:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 8000a72:	4b31      	ldr	r3, [pc, #196]	; (8000b38 <MX_TIM4_Init+0xf0>)
 8000a74:	220a      	movs	r2, #10
 8000a76:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a78:	4b2f      	ldr	r3, [pc, #188]	; (8000b38 <MX_TIM4_Init+0xf0>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10800;
 8000a7e:	4b2e      	ldr	r3, [pc, #184]	; (8000b38 <MX_TIM4_Init+0xf0>)
 8000a80:	f642 2230 	movw	r2, #10800	; 0x2a30
 8000a84:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a86:	4b2c      	ldr	r3, [pc, #176]	; (8000b38 <MX_TIM4_Init+0xf0>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8c:	4b2a      	ldr	r3, [pc, #168]	; (8000b38 <MX_TIM4_Init+0xf0>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a92:	4829      	ldr	r0, [pc, #164]	; (8000b38 <MX_TIM4_Init+0xf0>)
 8000a94:	f003 f9fc 	bl	8003e90 <HAL_TIM_PWM_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000a9e:	f000 fa63 	bl	8000f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4821      	ldr	r0, [pc, #132]	; (8000b38 <MX_TIM4_Init+0xf0>)
 8000ab2:	f003 fe99 	bl	80047e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000abc:	f000 fa54 	bl	8000f68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac0:	2360      	movs	r3, #96	; 0x60
 8000ac2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000acc:	2300      	movs	r3, #0
 8000ace:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4818      	ldr	r0, [pc, #96]	; (8000b38 <MX_TIM4_Init+0xf0>)
 8000ad8:	f003 fa4a 	bl	8003f70 <HAL_TIM_PWM_ConfigChannel>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000ae2:	f000 fa41 	bl	8000f68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	2204      	movs	r2, #4
 8000aea:	4619      	mov	r1, r3
 8000aec:	4812      	ldr	r0, [pc, #72]	; (8000b38 <MX_TIM4_Init+0xf0>)
 8000aee:	f003 fa3f 	bl	8003f70 <HAL_TIM_PWM_ConfigChannel>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000af8:	f000 fa36 	bl	8000f68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000afc:	463b      	mov	r3, r7
 8000afe:	2208      	movs	r2, #8
 8000b00:	4619      	mov	r1, r3
 8000b02:	480d      	ldr	r0, [pc, #52]	; (8000b38 <MX_TIM4_Init+0xf0>)
 8000b04:	f003 fa34 	bl	8003f70 <HAL_TIM_PWM_ConfigChannel>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8000b0e:	f000 fa2b 	bl	8000f68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b12:	463b      	mov	r3, r7
 8000b14:	220c      	movs	r2, #12
 8000b16:	4619      	mov	r1, r3
 8000b18:	4807      	ldr	r0, [pc, #28]	; (8000b38 <MX_TIM4_Init+0xf0>)
 8000b1a:	f003 fa29 	bl	8003f70 <HAL_TIM_PWM_ConfigChannel>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8000b24:	f000 fa20 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b28:	4803      	ldr	r0, [pc, #12]	; (8000b38 <MX_TIM4_Init+0xf0>)
 8000b2a:	f000 fadd 	bl	80010e8 <HAL_TIM_MspPostInit>

}
 8000b2e:	bf00      	nop
 8000b30:	3728      	adds	r7, #40	; 0x28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200000f8 	.word	0x200000f8
 8000b3c:	40000800 	.word	0x40000800

08000b40 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b46:	4a15      	ldr	r2, [pc, #84]	; (8000b9c <MX_USART3_UART_Init+0x5c>)
 8000b48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b4a:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b66:	220c      	movs	r2, #12
 8000b68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b84:	f003 febe 	bl	8004904 <HAL_UART_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b8e:	f000 f9eb 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000138 	.word	0x20000138
 8000b9c:	40004800 	.word	0x40004800

08000ba0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000baa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bae:	2206      	movs	r2, #6
 8000bb0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bba:	2202      	movs	r2, #2
 8000bbc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000be2:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000be4:	f001 ffc7 	bl	8002b76 <HAL_PCD_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000bee:	f000 f9bb 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200001b8 	.word	0x200001b8

08000bfc <MX_DMA_Init>:
  *   hdma_memtomem_dma2_stream1
  *   hdma_memtomem_dma2_stream2
  *   hdma_memtomem_dma2_stream3
  */
static void MX_DMA_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c02:	4b74      	ldr	r3, [pc, #464]	; (8000dd4 <MX_DMA_Init+0x1d8>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a73      	ldr	r2, [pc, #460]	; (8000dd4 <MX_DMA_Init+0x1d8>)
 8000c08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b71      	ldr	r3, [pc, #452]	; (8000dd4 <MX_DMA_Init+0x1d8>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000c1a:	4b6f      	ldr	r3, [pc, #444]	; (8000dd8 <MX_DMA_Init+0x1dc>)
 8000c1c:	4a6f      	ldr	r2, [pc, #444]	; (8000ddc <MX_DMA_Init+0x1e0>)
 8000c1e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000c20:	4b6d      	ldr	r3, [pc, #436]	; (8000dd8 <MX_DMA_Init+0x1dc>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000c26:	4b6c      	ldr	r3, [pc, #432]	; (8000dd8 <MX_DMA_Init+0x1dc>)
 8000c28:	2280      	movs	r2, #128	; 0x80
 8000c2a:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c2c:	4b6a      	ldr	r3, [pc, #424]	; (8000dd8 <MX_DMA_Init+0x1dc>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_DISABLE;
 8000c32:	4b69      	ldr	r3, [pc, #420]	; (8000dd8 <MX_DMA_Init+0x1dc>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c38:	4b67      	ldr	r3, [pc, #412]	; (8000dd8 <MX_DMA_Init+0x1dc>)
 8000c3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c3e:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c40:	4b65      	ldr	r3, [pc, #404]	; (8000dd8 <MX_DMA_Init+0x1dc>)
 8000c42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c46:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000c48:	4b63      	ldr	r3, [pc, #396]	; (8000dd8 <MX_DMA_Init+0x1dc>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c4e:	4b62      	ldr	r3, [pc, #392]	; (8000dd8 <MX_DMA_Init+0x1dc>)
 8000c50:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c54:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c56:	4b60      	ldr	r3, [pc, #384]	; (8000dd8 <MX_DMA_Init+0x1dc>)
 8000c58:	2204      	movs	r2, #4
 8000c5a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c5c:	4b5e      	ldr	r3, [pc, #376]	; (8000dd8 <MX_DMA_Init+0x1dc>)
 8000c5e:	2203      	movs	r2, #3
 8000c60:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000c62:	4b5d      	ldr	r3, [pc, #372]	; (8000dd8 <MX_DMA_Init+0x1dc>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000c68:	4b5b      	ldr	r3, [pc, #364]	; (8000dd8 <MX_DMA_Init+0x1dc>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000c6e:	485a      	ldr	r0, [pc, #360]	; (8000dd8 <MX_DMA_Init+0x1dc>)
 8000c70:	f001 fa1c 	bl	80020ac <HAL_DMA_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_DMA_Init+0x82>
  {
    Error_Handler( );
 8000c7a:	f000 f975 	bl	8000f68 <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream1 on DMA2_Stream1 */
  hdma_memtomem_dma2_stream1.Instance = DMA2_Stream1;
 8000c7e:	4b58      	ldr	r3, [pc, #352]	; (8000de0 <MX_DMA_Init+0x1e4>)
 8000c80:	4a58      	ldr	r2, [pc, #352]	; (8000de4 <MX_DMA_Init+0x1e8>)
 8000c82:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream1.Init.Channel = DMA_CHANNEL_0;
 8000c84:	4b56      	ldr	r3, [pc, #344]	; (8000de0 <MX_DMA_Init+0x1e4>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000c8a:	4b55      	ldr	r3, [pc, #340]	; (8000de0 <MX_DMA_Init+0x1e4>)
 8000c8c:	2280      	movs	r2, #128	; 0x80
 8000c8e:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c90:	4b53      	ldr	r3, [pc, #332]	; (8000de0 <MX_DMA_Init+0x1e4>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream1.Init.MemInc = DMA_MINC_DISABLE;
 8000c96:	4b52      	ldr	r3, [pc, #328]	; (8000de0 <MX_DMA_Init+0x1e4>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c9c:	4b50      	ldr	r3, [pc, #320]	; (8000de0 <MX_DMA_Init+0x1e4>)
 8000c9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ca2:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ca4:	4b4e      	ldr	r3, [pc, #312]	; (8000de0 <MX_DMA_Init+0x1e4>)
 8000ca6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000caa:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream1.Init.Mode = DMA_NORMAL;
 8000cac:	4b4c      	ldr	r3, [pc, #304]	; (8000de0 <MX_DMA_Init+0x1e4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000cb2:	4b4b      	ldr	r3, [pc, #300]	; (8000de0 <MX_DMA_Init+0x1e4>)
 8000cb4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000cb8:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000cba:	4b49      	ldr	r3, [pc, #292]	; (8000de0 <MX_DMA_Init+0x1e4>)
 8000cbc:	2204      	movs	r2, #4
 8000cbe:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000cc0:	4b47      	ldr	r3, [pc, #284]	; (8000de0 <MX_DMA_Init+0x1e4>)
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000cc6:	4b46      	ldr	r3, [pc, #280]	; (8000de0 <MX_DMA_Init+0x1e4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000ccc:	4b44      	ldr	r3, [pc, #272]	; (8000de0 <MX_DMA_Init+0x1e4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream1) != HAL_OK)
 8000cd2:	4843      	ldr	r0, [pc, #268]	; (8000de0 <MX_DMA_Init+0x1e4>)
 8000cd4:	f001 f9ea 	bl	80020ac <HAL_DMA_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_DMA_Init+0xe6>
  {
    Error_Handler( );
 8000cde:	f000 f943 	bl	8000f68 <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream2 on DMA2_Stream2 */
  hdma_memtomem_dma2_stream2.Instance = DMA2_Stream2;
 8000ce2:	4b41      	ldr	r3, [pc, #260]	; (8000de8 <MX_DMA_Init+0x1ec>)
 8000ce4:	4a41      	ldr	r2, [pc, #260]	; (8000dec <MX_DMA_Init+0x1f0>)
 8000ce6:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream2.Init.Channel = DMA_CHANNEL_0;
 8000ce8:	4b3f      	ldr	r3, [pc, #252]	; (8000de8 <MX_DMA_Init+0x1ec>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000cee:	4b3e      	ldr	r3, [pc, #248]	; (8000de8 <MX_DMA_Init+0x1ec>)
 8000cf0:	2280      	movs	r2, #128	; 0x80
 8000cf2:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cf4:	4b3c      	ldr	r3, [pc, #240]	; (8000de8 <MX_DMA_Init+0x1ec>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream2.Init.MemInc = DMA_MINC_DISABLE;
 8000cfa:	4b3b      	ldr	r3, [pc, #236]	; (8000de8 <MX_DMA_Init+0x1ec>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d00:	4b39      	ldr	r3, [pc, #228]	; (8000de8 <MX_DMA_Init+0x1ec>)
 8000d02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d06:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d08:	4b37      	ldr	r3, [pc, #220]	; (8000de8 <MX_DMA_Init+0x1ec>)
 8000d0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d0e:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream2.Init.Mode = DMA_NORMAL;
 8000d10:	4b35      	ldr	r3, [pc, #212]	; (8000de8 <MX_DMA_Init+0x1ec>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d16:	4b34      	ldr	r3, [pc, #208]	; (8000de8 <MX_DMA_Init+0x1ec>)
 8000d18:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d1c:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d1e:	4b32      	ldr	r3, [pc, #200]	; (8000de8 <MX_DMA_Init+0x1ec>)
 8000d20:	2204      	movs	r2, #4
 8000d22:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d24:	4b30      	ldr	r3, [pc, #192]	; (8000de8 <MX_DMA_Init+0x1ec>)
 8000d26:	2203      	movs	r2, #3
 8000d28:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream2.Init.MemBurst = DMA_MBURST_SINGLE;
 8000d2a:	4b2f      	ldr	r3, [pc, #188]	; (8000de8 <MX_DMA_Init+0x1ec>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000d30:	4b2d      	ldr	r3, [pc, #180]	; (8000de8 <MX_DMA_Init+0x1ec>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream2) != HAL_OK)
 8000d36:	482c      	ldr	r0, [pc, #176]	; (8000de8 <MX_DMA_Init+0x1ec>)
 8000d38:	f001 f9b8 	bl	80020ac <HAL_DMA_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_DMA_Init+0x14a>
  {
    Error_Handler( );
 8000d42:	f000 f911 	bl	8000f68 <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream3 on DMA2_Stream3 */
  hdma_memtomem_dma2_stream3.Instance = DMA2_Stream3;
 8000d46:	4b2a      	ldr	r3, [pc, #168]	; (8000df0 <MX_DMA_Init+0x1f4>)
 8000d48:	4a2a      	ldr	r2, [pc, #168]	; (8000df4 <MX_DMA_Init+0x1f8>)
 8000d4a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream3.Init.Channel = DMA_CHANNEL_0;
 8000d4c:	4b28      	ldr	r3, [pc, #160]	; (8000df0 <MX_DMA_Init+0x1f4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream3.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000d52:	4b27      	ldr	r3, [pc, #156]	; (8000df0 <MX_DMA_Init+0x1f4>)
 8000d54:	2280      	movs	r2, #128	; 0x80
 8000d56:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d58:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <MX_DMA_Init+0x1f4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream3.Init.MemInc = DMA_MINC_DISABLE;
 8000d5e:	4b24      	ldr	r3, [pc, #144]	; (8000df0 <MX_DMA_Init+0x1f4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d64:	4b22      	ldr	r3, [pc, #136]	; (8000df0 <MX_DMA_Init+0x1f4>)
 8000d66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d6a:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d6c:	4b20      	ldr	r3, [pc, #128]	; (8000df0 <MX_DMA_Init+0x1f4>)
 8000d6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d72:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream3.Init.Mode = DMA_NORMAL;
 8000d74:	4b1e      	ldr	r3, [pc, #120]	; (8000df0 <MX_DMA_Init+0x1f4>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d7a:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <MX_DMA_Init+0x1f4>)
 8000d7c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d80:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d82:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <MX_DMA_Init+0x1f4>)
 8000d84:	2204      	movs	r2, #4
 8000d86:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d88:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <MX_DMA_Init+0x1f4>)
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream3.Init.MemBurst = DMA_MBURST_SINGLE;
 8000d8e:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <MX_DMA_Init+0x1f4>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000d94:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <MX_DMA_Init+0x1f4>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream3) != HAL_OK)
 8000d9a:	4815      	ldr	r0, [pc, #84]	; (8000df0 <MX_DMA_Init+0x1f4>)
 8000d9c:	f001 f986 	bl	80020ac <HAL_DMA_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_DMA_Init+0x1ae>
  {
    Error_Handler( );
 8000da6:	f000 f8df 	bl	8000f68 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2100      	movs	r1, #0
 8000dae:	2038      	movs	r0, #56	; 0x38
 8000db0:	f001 f945 	bl	800203e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000db4:	2038      	movs	r0, #56	; 0x38
 8000db6:	f001 f95e 	bl	8002076 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	203c      	movs	r0, #60	; 0x3c
 8000dc0:	f001 f93d 	bl	800203e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000dc4:	203c      	movs	r0, #60	; 0x3c
 8000dc6:	f001 f956 	bl	8002076 <HAL_NVIC_EnableIRQ>

}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	20000098 	.word	0x20000098
 8000ddc:	40026410 	.word	0x40026410
 8000de0:	20000668 	.word	0x20000668
 8000de4:	40026428 	.word	0x40026428
 8000de8:	20000734 	.word	0x20000734
 8000dec:	40026440 	.word	0x40026440
 8000df0:	200005bc 	.word	0x200005bc
 8000df4:	40026458 	.word	0x40026458

08000df8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08c      	sub	sp, #48	; 0x30
 8000dfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0e:	4b46      	ldr	r3, [pc, #280]	; (8000f28 <MX_GPIO_Init+0x130>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a45      	ldr	r2, [pc, #276]	; (8000f28 <MX_GPIO_Init+0x130>)
 8000e14:	f043 0304 	orr.w	r3, r3, #4
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b43      	ldr	r3, [pc, #268]	; (8000f28 <MX_GPIO_Init+0x130>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0304 	and.w	r3, r3, #4
 8000e22:	61bb      	str	r3, [r7, #24]
 8000e24:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e26:	4b40      	ldr	r3, [pc, #256]	; (8000f28 <MX_GPIO_Init+0x130>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a3f      	ldr	r2, [pc, #252]	; (8000f28 <MX_GPIO_Init+0x130>)
 8000e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b3d      	ldr	r3, [pc, #244]	; (8000f28 <MX_GPIO_Init+0x130>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3e:	4b3a      	ldr	r3, [pc, #232]	; (8000f28 <MX_GPIO_Init+0x130>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a39      	ldr	r2, [pc, #228]	; (8000f28 <MX_GPIO_Init+0x130>)
 8000e44:	f043 0302 	orr.w	r3, r3, #2
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b37      	ldr	r3, [pc, #220]	; (8000f28 <MX_GPIO_Init+0x130>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e56:	4b34      	ldr	r3, [pc, #208]	; (8000f28 <MX_GPIO_Init+0x130>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a33      	ldr	r2, [pc, #204]	; (8000f28 <MX_GPIO_Init+0x130>)
 8000e5c:	f043 0308 	orr.w	r3, r3, #8
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b31      	ldr	r3, [pc, #196]	; (8000f28 <MX_GPIO_Init+0x130>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0308 	and.w	r3, r3, #8
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e6e:	4b2e      	ldr	r3, [pc, #184]	; (8000f28 <MX_GPIO_Init+0x130>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a2d      	ldr	r2, [pc, #180]	; (8000f28 <MX_GPIO_Init+0x130>)
 8000e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b2b      	ldr	r3, [pc, #172]	; (8000f28 <MX_GPIO_Init+0x130>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	4b28      	ldr	r3, [pc, #160]	; (8000f28 <MX_GPIO_Init+0x130>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a27      	ldr	r2, [pc, #156]	; (8000f28 <MX_GPIO_Init+0x130>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b25      	ldr	r3, [pc, #148]	; (8000f28 <MX_GPIO_Init+0x130>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000ea4:	4821      	ldr	r0, [pc, #132]	; (8000f2c <MX_GPIO_Init+0x134>)
 8000ea6:	f001 fe4d 	bl	8002b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2140      	movs	r1, #64	; 0x40
 8000eae:	4820      	ldr	r0, [pc, #128]	; (8000f30 <MX_GPIO_Init+0x138>)
 8000eb0:	f001 fe48 	bl	8002b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000eb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eba:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <MX_GPIO_Init+0x13c>)
 8000ebc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	f107 031c 	add.w	r3, r7, #28
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	481b      	ldr	r0, [pc, #108]	; (8000f38 <MX_GPIO_Init+0x140>)
 8000eca:	f001 fca1 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000ece:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000ed2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4811      	ldr	r0, [pc, #68]	; (8000f2c <MX_GPIO_Init+0x134>)
 8000ee8:	f001 fc92 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000eec:	2340      	movs	r3, #64	; 0x40
 8000eee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000efc:	f107 031c 	add.w	r3, r7, #28
 8000f00:	4619      	mov	r1, r3
 8000f02:	480b      	ldr	r0, [pc, #44]	; (8000f30 <MX_GPIO_Init+0x138>)
 8000f04:	f001 fc84 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f08:	2380      	movs	r3, #128	; 0x80
 8000f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_GPIO_Init+0x138>)
 8000f1c:	f001 fc78 	bl	8002810 <HAL_GPIO_Init>

}
 8000f20:	bf00      	nop
 8000f22:	3730      	adds	r7, #48	; 0x30
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40020400 	.word	0x40020400
 8000f30:	40021800 	.word	0x40021800
 8000f34:	10110000 	.word	0x10110000
 8000f38:	40020800 	.word	0x40020800

08000f3c <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
    void HAL_ADC_ConvHalfCpltCallback (ADC_HandleTypeDef* hadc)
    {
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	__NOP();
 8000f44:	bf00      	nop
    }
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <HAL_ADC_ConvCpltCallback>:

    void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef* hadc)
    {
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
    __NOP();
 8000f5a:	bf00      	nop
    }
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <HAL_MspInit+0x44>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	4a0e      	ldr	r2, [pc, #56]	; (8000fbc <HAL_MspInit+0x44>)
 8000f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f88:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <HAL_MspInit+0x44>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <HAL_MspInit+0x44>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	4a08      	ldr	r2, [pc, #32]	; (8000fbc <HAL_MspInit+0x44>)
 8000f9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_MspInit+0x44>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40023800 	.word	0x40023800

08000fc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a2d      	ldr	r2, [pc, #180]	; (8001094 <HAL_ADC_MspInit+0xd4>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d154      	bne.n	800108c <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fe2:	4b2d      	ldr	r3, [pc, #180]	; (8001098 <HAL_ADC_MspInit+0xd8>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	4a2c      	ldr	r2, [pc, #176]	; (8001098 <HAL_ADC_MspInit+0xd8>)
 8000fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fec:	6453      	str	r3, [r2, #68]	; 0x44
 8000fee:	4b2a      	ldr	r3, [pc, #168]	; (8001098 <HAL_ADC_MspInit+0xd8>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	4b27      	ldr	r3, [pc, #156]	; (8001098 <HAL_ADC_MspInit+0xd8>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a26      	ldr	r2, [pc, #152]	; (8001098 <HAL_ADC_MspInit+0xd8>)
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b24      	ldr	r3, [pc, #144]	; (8001098 <HAL_ADC_MspInit+0xd8>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_Throttle_Control_Pin;
 8001012:	2302      	movs	r3, #2
 8001014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001016:	2303      	movs	r3, #3
 8001018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_Throttle_Control_GPIO_Port, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	481d      	ldr	r0, [pc, #116]	; (800109c <HAL_ADC_MspInit+0xdc>)
 8001026:	f001 fbf3 	bl	8002810 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <HAL_ADC_MspInit+0xe0>)
 800102c:	4a1d      	ldr	r2, [pc, #116]	; (80010a4 <HAL_ADC_MspInit+0xe4>)
 800102e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001030:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <HAL_ADC_MspInit+0xe0>)
 8001032:	2200      	movs	r2, #0
 8001034:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001036:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <HAL_ADC_MspInit+0xe0>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800103c:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <HAL_ADC_MspInit+0xe0>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001042:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <HAL_ADC_MspInit+0xe0>)
 8001044:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001048:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_ADC_MspInit+0xe0>)
 800104c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001050:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <HAL_ADC_MspInit+0xe0>)
 8001054:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001058:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800105a:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <HAL_ADC_MspInit+0xe0>)
 800105c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001060:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <HAL_ADC_MspInit+0xe0>)
 8001064:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001068:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800106a:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <HAL_ADC_MspInit+0xe0>)
 800106c:	2200      	movs	r2, #0
 800106e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001070:	480b      	ldr	r0, [pc, #44]	; (80010a0 <HAL_ADC_MspInit+0xe0>)
 8001072:	f001 f81b 	bl	80020ac <HAL_DMA_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 800107c:	f7ff ff74 	bl	8000f68 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a07      	ldr	r2, [pc, #28]	; (80010a0 <HAL_ADC_MspInit+0xe0>)
 8001084:	639a      	str	r2, [r3, #56]	; 0x38
 8001086:	4a06      	ldr	r2, [pc, #24]	; (80010a0 <HAL_ADC_MspInit+0xe0>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800108c:	bf00      	nop
 800108e:	3728      	adds	r7, #40	; 0x28
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40012000 	.word	0x40012000
 8001098:	40023800 	.word	0x40023800
 800109c:	40020400 	.word	0x40020400
 80010a0:	200006d4 	.word	0x200006d4
 80010a4:	40026470 	.word	0x40026470

080010a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <HAL_TIM_PWM_MspInit+0x38>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d10b      	bne.n	80010d2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	4a09      	ldr	r2, [pc, #36]	; (80010e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	6413      	str	r3, [r2, #64]	; 0x40
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80010d2:	bf00      	nop
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40000800 	.word	0x40000800
 80010e4:	40023800 	.word	0x40023800

080010e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a11      	ldr	r2, [pc, #68]	; (800114c <HAL_TIM_MspPostInit+0x64>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d11c      	bne.n	8001144 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <HAL_TIM_MspPostInit+0x68>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a10      	ldr	r2, [pc, #64]	; (8001150 <HAL_TIM_MspPostInit+0x68>)
 8001110:	f043 0308 	orr.w	r3, r3, #8
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <HAL_TIM_MspPostInit+0x68>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0308 	and.w	r3, r3, #8
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = Timer4_CH1_ESC1_Pin|Timer4_CH2_ESC2_Pin|Timer4_CH3_ESC3_Pin|Timer4_CH4_ESC4_Pin;
 8001122:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001126:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001134:	2302      	movs	r3, #2
 8001136:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	4619      	mov	r1, r3
 800113e:	4805      	ldr	r0, [pc, #20]	; (8001154 <HAL_TIM_MspPostInit+0x6c>)
 8001140:	f001 fb66 	bl	8002810 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001144:	bf00      	nop
 8001146:	3720      	adds	r7, #32
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40000800 	.word	0x40000800
 8001150:	40023800 	.word	0x40023800
 8001154:	40020c00 	.word	0x40020c00

08001158 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	; 0x28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a17      	ldr	r2, [pc, #92]	; (80011d4 <HAL_UART_MspInit+0x7c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d128      	bne.n	80011cc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <HAL_UART_MspInit+0x80>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	4a16      	ldr	r2, [pc, #88]	; (80011d8 <HAL_UART_MspInit+0x80>)
 8001180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001184:	6413      	str	r3, [r2, #64]	; 0x40
 8001186:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <HAL_UART_MspInit+0x80>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_UART_MspInit+0x80>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <HAL_UART_MspInit+0x80>)
 8001198:	f043 0308 	orr.w	r3, r3, #8
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_UART_MspInit+0x80>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0308 	and.w	r3, r3, #8
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b8:	2303      	movs	r3, #3
 80011ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011bc:	2307      	movs	r3, #7
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	4619      	mov	r1, r3
 80011c6:	4805      	ldr	r0, [pc, #20]	; (80011dc <HAL_UART_MspInit+0x84>)
 80011c8:	f001 fb22 	bl	8002810 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011cc:	bf00      	nop
 80011ce:	3728      	adds	r7, #40	; 0x28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40004800 	.word	0x40004800
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020c00 	.word	0x40020c00

080011e0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001200:	d141      	bne.n	8001286 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	4b23      	ldr	r3, [pc, #140]	; (8001290 <HAL_PCD_MspInit+0xb0>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a22      	ldr	r2, [pc, #136]	; (8001290 <HAL_PCD_MspInit+0xb0>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b20      	ldr	r3, [pc, #128]	; (8001290 <HAL_PCD_MspInit+0xb0>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800121a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800121e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001228:	2303      	movs	r3, #3
 800122a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800122c:	230a      	movs	r3, #10
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4619      	mov	r1, r3
 8001236:	4817      	ldr	r0, [pc, #92]	; (8001294 <HAL_PCD_MspInit+0xb4>)
 8001238:	f001 faea 	bl	8002810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800123c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4619      	mov	r1, r3
 8001250:	4810      	ldr	r0, [pc, #64]	; (8001294 <HAL_PCD_MspInit+0xb4>)
 8001252:	f001 fadd 	bl	8002810 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <HAL_PCD_MspInit+0xb0>)
 8001258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800125a:	4a0d      	ldr	r2, [pc, #52]	; (8001290 <HAL_PCD_MspInit+0xb0>)
 800125c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001260:	6353      	str	r3, [r2, #52]	; 0x34
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <HAL_PCD_MspInit+0xb0>)
 8001264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <HAL_PCD_MspInit+0xb0>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	4a07      	ldr	r2, [pc, #28]	; (8001290 <HAL_PCD_MspInit+0xb0>)
 8001274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001278:	6453      	str	r3, [r2, #68]	; 0x44
 800127a:	4b05      	ldr	r3, [pc, #20]	; (8001290 <HAL_PCD_MspInit+0xb0>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001286:	bf00      	nop
 8001288:	3728      	adds	r7, #40	; 0x28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800
 8001294:	40020000 	.word	0x40020000

08001298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <HardFault_Handler+0x4>

080012ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <MemManage_Handler+0x4>

080012b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <BusFault_Handler+0x4>

080012b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <UsageFault_Handler+0x4>

080012be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ec:	f000 f8c8 	bl	8001480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 80012f8:	4802      	ldr	r0, [pc, #8]	; (8001304 <DMA2_Stream0_IRQHandler+0x10>)
 80012fa:	f001 f821 	bl	8002340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000098 	.word	0x20000098

08001308 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800130c:	4802      	ldr	r0, [pc, #8]	; (8001318 <DMA2_Stream4_IRQHandler+0x10>)
 800130e:	f001 f817 	bl	8002340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200006d4 	.word	0x200006d4

0800131c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001324:	4a14      	ldr	r2, [pc, #80]	; (8001378 <_sbrk+0x5c>)
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <_sbrk+0x60>)
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001330:	4b13      	ldr	r3, [pc, #76]	; (8001380 <_sbrk+0x64>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d102      	bne.n	800133e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <_sbrk+0x64>)
 800133a:	4a12      	ldr	r2, [pc, #72]	; (8001384 <_sbrk+0x68>)
 800133c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <_sbrk+0x64>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4413      	add	r3, r2
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	429a      	cmp	r2, r3
 800134a:	d207      	bcs.n	800135c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800134c:	f004 f9d4 	bl	80056f8 <__errno>
 8001350:	4602      	mov	r2, r0
 8001352:	230c      	movs	r3, #12
 8001354:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
 800135a:	e009      	b.n	8001370 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <_sbrk+0x64>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001362:	4b07      	ldr	r3, [pc, #28]	; (8001380 <_sbrk+0x64>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	4a05      	ldr	r2, [pc, #20]	; (8001380 <_sbrk+0x64>)
 800136c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800136e:	68fb      	ldr	r3, [r7, #12]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20040000 	.word	0x20040000
 800137c:	00000400 	.word	0x00000400
 8001380:	2000008c 	.word	0x2000008c
 8001384:	200007a0 	.word	0x200007a0

08001388 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <SystemInit+0x28>)
 800138e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001392:	4a07      	ldr	r2, [pc, #28]	; (80013b0 <SystemInit+0x28>)
 8001394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001398:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <SystemInit+0x28>)
 800139e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013a2:	609a      	str	r2, [r3, #8]
#endif
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80013b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80013ba:	e003      	b.n	80013c4 <LoopCopyDataInit>

080013bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80013be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80013c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80013c2:	3104      	adds	r1, #4

080013c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80013c4:	480b      	ldr	r0, [pc, #44]	; (80013f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80013c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80013ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80013cc:	d3f6      	bcc.n	80013bc <CopyDataInit>
  ldr  r2, =_sbss
 80013ce:	4a0b      	ldr	r2, [pc, #44]	; (80013fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80013d0:	e002      	b.n	80013d8 <LoopFillZerobss>

080013d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80013d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80013d4:	f842 3b04 	str.w	r3, [r2], #4

080013d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80013da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80013dc:	d3f9      	bcc.n	80013d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013de:	f7ff ffd3 	bl	8001388 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013e2:	f004 f98f 	bl	8005704 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013e6:	f7ff f995 	bl	8000714 <main>
  bx  lr    
 80013ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013ec:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 80013f0:	0800588c 	.word	0x0800588c
  ldr  r0, =_sdata
 80013f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80013f8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80013fc:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001400:	2000079c 	.word	0x2000079c

08001404 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001404:	e7fe      	b.n	8001404 <ADC_IRQHandler>

08001406 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800140a:	2003      	movs	r0, #3
 800140c:	f000 fe0c 	bl	8002028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001410:	2000      	movs	r0, #0
 8001412:	f000 f805 	bl	8001420 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001416:	f7ff fdaf 	bl	8000f78 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	bd80      	pop	{r7, pc}

08001420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_InitTick+0x54>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_InitTick+0x58>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	4619      	mov	r1, r3
 8001432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001436:	fbb3 f3f1 	udiv	r3, r3, r1
 800143a:	fbb2 f3f3 	udiv	r3, r2, r3
 800143e:	4618      	mov	r0, r3
 8001440:	f000 fe27 	bl	8002092 <HAL_SYSTICK_Config>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e00e      	b.n	800146c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2b0f      	cmp	r3, #15
 8001452:	d80a      	bhi.n	800146a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001454:	2200      	movs	r2, #0
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	f04f 30ff 	mov.w	r0, #4294967295
 800145c:	f000 fdef 	bl	800203e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001460:	4a06      	ldr	r2, [pc, #24]	; (800147c <HAL_InitTick+0x5c>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001466:	2300      	movs	r3, #0
 8001468:	e000      	b.n	800146c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
}
 800146c:	4618      	mov	r0, r3
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000000 	.word	0x20000000
 8001478:	20000008 	.word	0x20000008
 800147c:	20000004 	.word	0x20000004

08001480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_IncTick+0x20>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_IncTick+0x24>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4413      	add	r3, r2
 8001490:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <HAL_IncTick+0x24>)
 8001492:	6013      	str	r3, [r2, #0]
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	20000008 	.word	0x20000008
 80014a4:	20000794 	.word	0x20000794

080014a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return uwTick;
 80014ac:	4b03      	ldr	r3, [pc, #12]	; (80014bc <HAL_GetTick+0x14>)
 80014ae:	681b      	ldr	r3, [r3, #0]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20000794 	.word	0x20000794

080014c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c8:	f7ff ffee 	bl	80014a8 <HAL_GetTick>
 80014cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d8:	d005      	beq.n	80014e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <HAL_Delay+0x40>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4413      	add	r3, r2
 80014e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014e6:	bf00      	nop
 80014e8:	f7ff ffde 	bl	80014a8 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d8f7      	bhi.n	80014e8 <HAL_Delay+0x28>
  {
  }
}
 80014f8:	bf00      	nop
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000008 	.word	0x20000008

08001504 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800150c:	2300      	movs	r3, #0
 800150e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e031      	b.n	800157e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	2b00      	cmp	r3, #0
 8001520:	d109      	bne.n	8001536 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff fd4c 	bl	8000fc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f003 0310 	and.w	r3, r3, #16
 800153e:	2b00      	cmp	r3, #0
 8001540:	d116      	bne.n	8001570 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <HAL_ADC_Init+0x84>)
 8001548:	4013      	ands	r3, r2
 800154a:	f043 0202 	orr.w	r2, r3, #2
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 fb1c 	bl	8001b90 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f023 0303 	bic.w	r3, r3, #3
 8001566:	f043 0201 	orr.w	r2, r3, #1
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	641a      	str	r2, [r3, #64]	; 0x40
 800156e:	e001      	b.n	8001574 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800157c:	7bfb      	ldrb	r3, [r7, #15]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	ffffeefd 	.word	0xffffeefd

0800158c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d101      	bne.n	80015a6 <HAL_ADC_Start+0x1a>
 80015a2:	2302      	movs	r3, #2
 80015a4:	e0a0      	b.n	80016e8 <HAL_ADC_Start+0x15c>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d018      	beq.n	80015ee <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f042 0201 	orr.w	r2, r2, #1
 80015ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80015cc:	4b49      	ldr	r3, [pc, #292]	; (80016f4 <HAL_ADC_Start+0x168>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a49      	ldr	r2, [pc, #292]	; (80016f8 <HAL_ADC_Start+0x16c>)
 80015d2:	fba2 2303 	umull	r2, r3, r2, r3
 80015d6:	0c9a      	lsrs	r2, r3, #18
 80015d8:	4613      	mov	r3, r2
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	4413      	add	r3, r2
 80015de:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80015e0:	e002      	b.n	80015e8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	3b01      	subs	r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1f9      	bne.n	80015e2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d174      	bne.n	80016e6 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001600:	4b3e      	ldr	r3, [pc, #248]	; (80016fc <HAL_ADC_Start+0x170>)
 8001602:	4013      	ands	r3, r2
 8001604:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001616:	2b00      	cmp	r3, #0
 8001618:	d007      	beq.n	800162a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001622:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001636:	d106      	bne.n	8001646 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163c:	f023 0206 	bic.w	r2, r3, #6
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	645a      	str	r2, [r3, #68]	; 0x44
 8001644:	e002      	b.n	800164c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800165c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800165e:	4b28      	ldr	r3, [pc, #160]	; (8001700 <HAL_ADC_Start+0x174>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 031f 	and.w	r3, r3, #31
 8001666:	2b00      	cmp	r3, #0
 8001668:	d10f      	bne.n	800168a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d136      	bne.n	80016e6 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	e02d      	b.n	80016e6 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a1d      	ldr	r2, [pc, #116]	; (8001704 <HAL_ADC_Start+0x178>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d10e      	bne.n	80016b2 <HAL_ADC_Start+0x126>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d107      	bne.n	80016b2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016b0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80016b2:	4b13      	ldr	r3, [pc, #76]	; (8001700 <HAL_ADC_Start+0x174>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 0310 	and.w	r3, r3, #16
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d113      	bne.n	80016e6 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a11      	ldr	r2, [pc, #68]	; (8001708 <HAL_ADC_Start+0x17c>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d10e      	bne.n	80016e6 <HAL_ADC_Start+0x15a>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d107      	bne.n	80016e6 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016e4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	20000000 	.word	0x20000000
 80016f8:	431bde83 	.word	0x431bde83
 80016fc:	fffff8fe 	.word	0xfffff8fe
 8001700:	40012300 	.word	0x40012300
 8001704:	40012000 	.word	0x40012000
 8001708:	40012200 	.word	0x40012200

0800170c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001722:	2b01      	cmp	r3, #1
 8001724:	d101      	bne.n	800172a <HAL_ADC_Start_DMA+0x1e>
 8001726:	2302      	movs	r3, #2
 8001728:	e0c7      	b.n	80018ba <HAL_ADC_Start_DMA+0x1ae>
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b01      	cmp	r3, #1
 800173e:	d018      	beq.n	8001772 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f042 0201 	orr.w	r2, r2, #1
 800174e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001750:	4b5c      	ldr	r3, [pc, #368]	; (80018c4 <HAL_ADC_Start_DMA+0x1b8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a5c      	ldr	r2, [pc, #368]	; (80018c8 <HAL_ADC_Start_DMA+0x1bc>)
 8001756:	fba2 2303 	umull	r2, r3, r2, r3
 800175a:	0c9a      	lsrs	r2, r3, #18
 800175c:	4613      	mov	r3, r2
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	4413      	add	r3, r2
 8001762:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001764:	e002      	b.n	800176c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	3b01      	subs	r3, #1
 800176a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f9      	bne.n	8001766 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b01      	cmp	r3, #1
 800177e:	f040 809b 	bne.w	80018b8 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001786:	4b51      	ldr	r3, [pc, #324]	; (80018cc <HAL_ADC_Start_DMA+0x1c0>)
 8001788:	4013      	ands	r3, r2
 800178a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800179c:	2b00      	cmp	r3, #0
 800179e:	d007      	beq.n	80017b0 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017bc:	d106      	bne.n	80017cc <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	f023 0206 	bic.w	r2, r3, #6
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	645a      	str	r2, [r3, #68]	; 0x44
 80017ca:	e002      	b.n	80017d2 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2200      	movs	r2, #0
 80017d0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017de:	4a3c      	ldr	r2, [pc, #240]	; (80018d0 <HAL_ADC_Start_DMA+0x1c4>)
 80017e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e6:	4a3b      	ldr	r2, [pc, #236]	; (80018d4 <HAL_ADC_Start_DMA+0x1c8>)
 80017e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ee:	4a3a      	ldr	r2, [pc, #232]	; (80018d8 <HAL_ADC_Start_DMA+0x1cc>)
 80017f0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80017fa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800180a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800181a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	334c      	adds	r3, #76	; 0x4c
 8001826:	4619      	mov	r1, r3
 8001828:	68ba      	ldr	r2, [r7, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f000 fd27 	bl	800227e <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001830:	4b2a      	ldr	r3, [pc, #168]	; (80018dc <HAL_ADC_Start_DMA+0x1d0>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 031f 	and.w	r3, r3, #31
 8001838:	2b00      	cmp	r3, #0
 800183a:	d10f      	bne.n	800185c <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d136      	bne.n	80018b8 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	e02d      	b.n	80018b8 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a1f      	ldr	r2, [pc, #124]	; (80018e0 <HAL_ADC_Start_DMA+0x1d4>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d10e      	bne.n	8001884 <HAL_ADC_Start_DMA+0x178>
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d107      	bne.n	8001884 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001882:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001884:	4b15      	ldr	r3, [pc, #84]	; (80018dc <HAL_ADC_Start_DMA+0x1d0>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 0310 	and.w	r3, r3, #16
 800188c:	2b00      	cmp	r3, #0
 800188e:	d113      	bne.n	80018b8 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a13      	ldr	r2, [pc, #76]	; (80018e4 <HAL_ADC_Start_DMA+0x1d8>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d10e      	bne.n	80018b8 <HAL_ADC_Start_DMA+0x1ac>
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d107      	bne.n	80018b8 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018b6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000000 	.word	0x20000000
 80018c8:	431bde83 	.word	0x431bde83
 80018cc:	fffff8fe 	.word	0xfffff8fe
 80018d0:	08001d85 	.word	0x08001d85
 80018d4:	08001e3f 	.word	0x08001e3f
 80018d8:	08001e5b 	.word	0x08001e5b
 80018dc:	40012300 	.word	0x40012300
 80018e0:	40012000 	.word	0x40012000
 80018e4:	40012200 	.word	0x40012200

080018e8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001910:	2b01      	cmp	r3, #1
 8001912:	d101      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x1c>
 8001914:	2302      	movs	r3, #2
 8001916:	e12a      	b.n	8001b6e <HAL_ADC_ConfigChannel+0x272>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b09      	cmp	r3, #9
 8001926:	d93a      	bls.n	800199e <HAL_ADC_ConfigChannel+0xa2>
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001930:	d035      	beq.n	800199e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68d9      	ldr	r1, [r3, #12]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	b29b      	uxth	r3, r3
 800193e:	461a      	mov	r2, r3
 8001940:	4613      	mov	r3, r2
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	4413      	add	r3, r2
 8001946:	3b1e      	subs	r3, #30
 8001948:	2207      	movs	r2, #7
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43da      	mvns	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	400a      	ands	r2, r1
 8001956:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a87      	ldr	r2, [pc, #540]	; (8001b7c <HAL_ADC_ConfigChannel+0x280>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d10a      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68d9      	ldr	r1, [r3, #12]
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	061a      	lsls	r2, r3, #24
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001976:	e035      	b.n	80019e4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68d9      	ldr	r1, [r3, #12]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	b29b      	uxth	r3, r3
 8001988:	4618      	mov	r0, r3
 800198a:	4603      	mov	r3, r0
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4403      	add	r3, r0
 8001990:	3b1e      	subs	r3, #30
 8001992:	409a      	lsls	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800199c:	e022      	b.n	80019e4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6919      	ldr	r1, [r3, #16]
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	461a      	mov	r2, r3
 80019ac:	4613      	mov	r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	4413      	add	r3, r2
 80019b2:	2207      	movs	r2, #7
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43da      	mvns	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	400a      	ands	r2, r1
 80019c0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6919      	ldr	r1, [r3, #16]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	4618      	mov	r0, r3
 80019d4:	4603      	mov	r3, r0
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4403      	add	r3, r0
 80019da:	409a      	lsls	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b06      	cmp	r3, #6
 80019ea:	d824      	bhi.n	8001a36 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	3b05      	subs	r3, #5
 80019fe:	221f      	movs	r2, #31
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43da      	mvns	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	400a      	ands	r2, r1
 8001a0c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	3b05      	subs	r3, #5
 8001a28:	fa00 f203 	lsl.w	r2, r0, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	635a      	str	r2, [r3, #52]	; 0x34
 8001a34:	e04c      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b0c      	cmp	r3, #12
 8001a3c:	d824      	bhi.n	8001a88 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	3b23      	subs	r3, #35	; 0x23
 8001a50:	221f      	movs	r2, #31
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43da      	mvns	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	400a      	ands	r2, r1
 8001a5e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	3b23      	subs	r3, #35	; 0x23
 8001a7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	631a      	str	r2, [r3, #48]	; 0x30
 8001a86:	e023      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	3b41      	subs	r3, #65	; 0x41
 8001a9a:	221f      	movs	r2, #31
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43da      	mvns	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	400a      	ands	r2, r1
 8001aa8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	4613      	mov	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3b41      	subs	r3, #65	; 0x41
 8001ac4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a2a      	ldr	r2, [pc, #168]	; (8001b80 <HAL_ADC_ConfigChannel+0x284>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d10a      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x1f4>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ae2:	d105      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001ae4:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <HAL_ADC_ConfigChannel+0x288>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	4a26      	ldr	r2, [pc, #152]	; (8001b84 <HAL_ADC_ConfigChannel+0x288>)
 8001aea:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001aee:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a22      	ldr	r2, [pc, #136]	; (8001b80 <HAL_ADC_ConfigChannel+0x284>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d109      	bne.n	8001b0e <HAL_ADC_ConfigChannel+0x212>
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2b12      	cmp	r3, #18
 8001b00:	d105      	bne.n	8001b0e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001b02:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <HAL_ADC_ConfigChannel+0x288>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	4a1f      	ldr	r2, [pc, #124]	; (8001b84 <HAL_ADC_ConfigChannel+0x288>)
 8001b08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b0c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a1b      	ldr	r2, [pc, #108]	; (8001b80 <HAL_ADC_ConfigChannel+0x284>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d125      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x268>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a17      	ldr	r2, [pc, #92]	; (8001b7c <HAL_ADC_ConfigChannel+0x280>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d003      	beq.n	8001b2a <HAL_ADC_ConfigChannel+0x22e>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b11      	cmp	r3, #17
 8001b28:	d11c      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001b2a:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <HAL_ADC_ConfigChannel+0x288>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4a15      	ldr	r2, [pc, #84]	; (8001b84 <HAL_ADC_ConfigChannel+0x288>)
 8001b30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b34:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a10      	ldr	r2, [pc, #64]	; (8001b7c <HAL_ADC_ConfigChannel+0x280>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d111      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001b40:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <HAL_ADC_ConfigChannel+0x28c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a11      	ldr	r2, [pc, #68]	; (8001b8c <HAL_ADC_ConfigChannel+0x290>)
 8001b46:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4a:	0c9a      	lsrs	r2, r3, #18
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001b56:	e002      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1f9      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	10000012 	.word	0x10000012
 8001b80:	40012000 	.word	0x40012000
 8001b84:	40012300 	.word	0x40012300
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	431bde83 	.word	0x431bde83

08001b90 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001b98:	4b78      	ldr	r3, [pc, #480]	; (8001d7c <ADC_Init+0x1ec>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	4a77      	ldr	r2, [pc, #476]	; (8001d7c <ADC_Init+0x1ec>)
 8001b9e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001ba2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001ba4:	4b75      	ldr	r3, [pc, #468]	; (8001d7c <ADC_Init+0x1ec>)
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	4973      	ldr	r1, [pc, #460]	; (8001d7c <ADC_Init+0x1ec>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6859      	ldr	r1, [r3, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	021a      	lsls	r2, r3, #8
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001be4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6859      	ldr	r1, [r3, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6899      	ldr	r1, [r3, #8]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1e:	4a58      	ldr	r2, [pc, #352]	; (8001d80 <ADC_Init+0x1f0>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d022      	beq.n	8001c6a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6899      	ldr	r1, [r3, #8]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6899      	ldr	r1, [r3, #8]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	e00f      	b.n	8001c8a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c88:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 0202 	bic.w	r2, r2, #2
 8001c98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6899      	ldr	r1, [r3, #8]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	005a      	lsls	r2, r3, #1
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d01b      	beq.n	8001cf0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cc6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001cd6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6859      	ldr	r1, [r3, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	035a      	lsls	r2, r3, #13
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	e007      	b.n	8001d00 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cfe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	051a      	lsls	r2, r3, #20
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6899      	ldr	r1, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d42:	025a      	lsls	r2, r3, #9
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6899      	ldr	r1, [r3, #8]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	029a      	lsls	r2, r3, #10
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	609a      	str	r2, [r3, #8]
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	40012300 	.word	0x40012300
 8001d80:	0f000001 	.word	0x0f000001

08001d84 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d90:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d13c      	bne.n	8001e18 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d12b      	bne.n	8001e10 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d127      	bne.n	8001e10 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d006      	beq.n	8001ddc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d119      	bne.n	8001e10 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0220 	bic.w	r2, r2, #32
 8001dea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d105      	bne.n	8001e10 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	f043 0201 	orr.w	r2, r3, #1
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f7ff f89e 	bl	8000f52 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001e16:	e00e      	b.n	8001e36 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	f003 0310 	and.w	r3, r3, #16
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f7ff fd5f 	bl	80018e8 <HAL_ADC_ErrorCallback>
}
 8001e2a:	e004      	b.n	8001e36 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	4798      	blx	r3
}
 8001e36:	bf00      	nop
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b084      	sub	sp, #16
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	f7ff f875 	bl	8000f3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b084      	sub	sp, #16
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e66:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2240      	movs	r2, #64	; 0x40
 8001e6c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	f043 0204 	orr.w	r2, r3, #4
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f7ff fd34 	bl	80018e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e80:	bf00      	nop
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <__NVIC_SetPriorityGrouping+0x40>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <__NVIC_SetPriorityGrouping+0x44>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eb6:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <__NVIC_SetPriorityGrouping+0x40>)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	60d3      	str	r3, [r2, #12]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000ed00 	.word	0xe000ed00
 8001ecc:	05fa0000 	.word	0x05fa0000

08001ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed4:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	0a1b      	lsrs	r3, r3, #8
 8001eda:	f003 0307 	and.w	r3, r3, #7
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	db0b      	blt.n	8001f16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	f003 021f 	and.w	r2, r3, #31
 8001f04:	4907      	ldr	r1, [pc, #28]	; (8001f24 <__NVIC_EnableIRQ+0x38>)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	095b      	lsrs	r3, r3, #5
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	e000e100 	.word	0xe000e100

08001f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	6039      	str	r1, [r7, #0]
 8001f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	db0a      	blt.n	8001f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	490c      	ldr	r1, [pc, #48]	; (8001f74 <__NVIC_SetPriority+0x4c>)
 8001f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f46:	0112      	lsls	r2, r2, #4
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f50:	e00a      	b.n	8001f68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	4908      	ldr	r1, [pc, #32]	; (8001f78 <__NVIC_SetPriority+0x50>)
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	3b04      	subs	r3, #4
 8001f60:	0112      	lsls	r2, r2, #4
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	440b      	add	r3, r1
 8001f66:	761a      	strb	r2, [r3, #24]
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000e100 	.word	0xe000e100
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b089      	sub	sp, #36	; 0x24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f1c3 0307 	rsb	r3, r3, #7
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	bf28      	it	cs
 8001f9a:	2304      	movcs	r3, #4
 8001f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	2b06      	cmp	r3, #6
 8001fa4:	d902      	bls.n	8001fac <NVIC_EncodePriority+0x30>
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3b03      	subs	r3, #3
 8001faa:	e000      	b.n	8001fae <NVIC_EncodePriority+0x32>
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43da      	mvns	r2, r3
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	fa01 f303 	lsl.w	r3, r1, r3
 8001fce:	43d9      	mvns	r1, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd4:	4313      	orrs	r3, r2
         );
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3724      	adds	r7, #36	; 0x24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff4:	d301      	bcc.n	8001ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e00f      	b.n	800201a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <SysTick_Config+0x40>)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002002:	210f      	movs	r1, #15
 8002004:	f04f 30ff 	mov.w	r0, #4294967295
 8002008:	f7ff ff8e 	bl	8001f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <SysTick_Config+0x40>)
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002012:	4b04      	ldr	r3, [pc, #16]	; (8002024 <SysTick_Config+0x40>)
 8002014:	2207      	movs	r2, #7
 8002016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	e000e010 	.word	0xe000e010

08002028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff ff29 	bl	8001e88 <__NVIC_SetPriorityGrouping>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800203e:	b580      	push	{r7, lr}
 8002040:	b086      	sub	sp, #24
 8002042:	af00      	add	r7, sp, #0
 8002044:	4603      	mov	r3, r0
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
 800204a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002050:	f7ff ff3e 	bl	8001ed0 <__NVIC_GetPriorityGrouping>
 8002054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	68b9      	ldr	r1, [r7, #8]
 800205a:	6978      	ldr	r0, [r7, #20]
 800205c:	f7ff ff8e 	bl	8001f7c <NVIC_EncodePriority>
 8002060:	4602      	mov	r2, r0
 8002062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff5d 	bl	8001f28 <__NVIC_SetPriority>
}
 800206e:	bf00      	nop
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	4603      	mov	r3, r0
 800207e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff ff31 	bl	8001eec <__NVIC_EnableIRQ>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff ffa2 	bl	8001fe4 <SysTick_Config>
 80020a0:	4603      	mov	r3, r0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020b8:	f7ff f9f6 	bl	80014a8 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e099      	b.n	80021fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2202      	movs	r2, #2
 80020d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0201 	bic.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020e8:	e00f      	b.n	800210a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020ea:	f7ff f9dd 	bl	80014a8 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b05      	cmp	r3, #5
 80020f6:	d908      	bls.n	800210a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2220      	movs	r2, #32
 80020fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2203      	movs	r2, #3
 8002102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e078      	b.n	80021fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1e8      	bne.n	80020ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	4b38      	ldr	r3, [pc, #224]	; (8002204 <HAL_DMA_Init+0x158>)
 8002124:	4013      	ands	r3, r2
 8002126:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002136:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002142:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800214e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	4313      	orrs	r3, r2
 800215a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	2b04      	cmp	r3, #4
 8002162:	d107      	bne.n	8002174 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	4313      	orrs	r3, r2
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	4313      	orrs	r3, r2
 8002172:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f023 0307 	bic.w	r3, r3, #7
 800218a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	4313      	orrs	r3, r2
 8002194:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	2b04      	cmp	r3, #4
 800219c:	d117      	bne.n	80021ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00e      	beq.n	80021ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 fab3 	bl	800271c <DMA_CheckFifoParam>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d008      	beq.n	80021ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2240      	movs	r2, #64	; 0x40
 80021c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80021ca:	2301      	movs	r3, #1
 80021cc:	e016      	b.n	80021fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 fa6a 	bl	80026b0 <DMA_CalcBaseAndBitshift>
 80021dc:	4603      	mov	r3, r0
 80021de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e4:	223f      	movs	r2, #63	; 0x3f
 80021e6:	409a      	lsls	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	e010803f 	.word	0xe010803f

08002208 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
 8002214:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_DMA_Start+0x20>
 8002224:	2302      	movs	r3, #2
 8002226:	e026      	b.n	8002276 <HAL_DMA_Start+0x6e>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b01      	cmp	r3, #1
 800223a:	d115      	bne.n	8002268 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	68b9      	ldr	r1, [r7, #8]
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 f9ff 	bl	8002654 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0201 	orr.w	r2, r2, #1
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	e005      	b.n	8002274 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002270:	2302      	movs	r3, #2
 8002272:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8002274:	7dfb      	ldrb	r3, [r7, #23]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b086      	sub	sp, #24
 8002282:	af00      	add	r7, sp, #0
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
 800228a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800228c:	2300      	movs	r3, #0
 800228e:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002294:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800229c:	2b01      	cmp	r3, #1
 800229e:	d101      	bne.n	80022a4 <HAL_DMA_Start_IT+0x26>
 80022a0:	2302      	movs	r3, #2
 80022a2:	e048      	b.n	8002336 <HAL_DMA_Start_IT+0xb8>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d137      	bne.n	8002328 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	68b9      	ldr	r1, [r7, #8]
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 f9c1 	bl	8002654 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d6:	223f      	movs	r2, #63	; 0x3f
 80022d8:	409a      	lsls	r2, r3
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 0216 	orr.w	r2, r2, #22
 80022ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695a      	ldr	r2, [r3, #20]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022fc:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	2b00      	cmp	r3, #0
 8002304:	d007      	beq.n	8002316 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f042 0208 	orr.w	r2, r2, #8
 8002314:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f042 0201 	orr.w	r2, r2, #1
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	e005      	b.n	8002334 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002330:	2302      	movs	r3, #2
 8002332:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002334:	7dfb      	ldrb	r3, [r7, #23]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800234c:	4b92      	ldr	r3, [pc, #584]	; (8002598 <HAL_DMA_IRQHandler+0x258>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a92      	ldr	r2, [pc, #584]	; (800259c <HAL_DMA_IRQHandler+0x25c>)
 8002352:	fba2 2303 	umull	r2, r3, r2, r3
 8002356:	0a9b      	lsrs	r3, r3, #10
 8002358:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236a:	2208      	movs	r2, #8
 800236c:	409a      	lsls	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	4013      	ands	r3, r2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d01a      	beq.n	80023ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	d013      	beq.n	80023ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0204 	bic.w	r2, r2, #4
 8002392:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002398:	2208      	movs	r2, #8
 800239a:	409a      	lsls	r2, r3
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a4:	f043 0201 	orr.w	r2, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b0:	2201      	movs	r2, #1
 80023b2:	409a      	lsls	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4013      	ands	r3, r2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d012      	beq.n	80023e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00b      	beq.n	80023e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ce:	2201      	movs	r2, #1
 80023d0:	409a      	lsls	r2, r3
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023da:	f043 0202 	orr.w	r2, r3, #2
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e6:	2204      	movs	r2, #4
 80023e8:	409a      	lsls	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4013      	ands	r3, r2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d012      	beq.n	8002418 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00b      	beq.n	8002418 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002404:	2204      	movs	r2, #4
 8002406:	409a      	lsls	r2, r3
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002410:	f043 0204 	orr.w	r2, r3, #4
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241c:	2210      	movs	r2, #16
 800241e:	409a      	lsls	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4013      	ands	r3, r2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d043      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	2b00      	cmp	r3, #0
 8002434:	d03c      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243a:	2210      	movs	r2, #16
 800243c:	409a      	lsls	r2, r3
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d018      	beq.n	8002482 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d108      	bne.n	8002470 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	2b00      	cmp	r3, #0
 8002464:	d024      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	4798      	blx	r3
 800246e:	e01f      	b.n	80024b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002474:	2b00      	cmp	r3, #0
 8002476:	d01b      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	4798      	blx	r3
 8002480:	e016      	b.n	80024b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248c:	2b00      	cmp	r3, #0
 800248e:	d107      	bne.n	80024a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0208 	bic.w	r2, r2, #8
 800249e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b4:	2220      	movs	r2, #32
 80024b6:	409a      	lsls	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4013      	ands	r3, r2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 808e 	beq.w	80025de <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0310 	and.w	r3, r3, #16
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 8086 	beq.w	80025de <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d6:	2220      	movs	r2, #32
 80024d8:	409a      	lsls	r2, r3
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b05      	cmp	r3, #5
 80024e8:	d136      	bne.n	8002558 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0216 	bic.w	r2, r2, #22
 80024f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	695a      	ldr	r2, [r3, #20]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002508:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	2b00      	cmp	r3, #0
 8002510:	d103      	bne.n	800251a <HAL_DMA_IRQHandler+0x1da>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002516:	2b00      	cmp	r3, #0
 8002518:	d007      	beq.n	800252a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0208 	bic.w	r2, r2, #8
 8002528:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252e:	223f      	movs	r2, #63	; 0x3f
 8002530:	409a      	lsls	r2, r3
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800254a:	2b00      	cmp	r3, #0
 800254c:	d07d      	beq.n	800264a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	4798      	blx	r3
        }
        return;
 8002556:	e078      	b.n	800264a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d01c      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d108      	bne.n	8002586 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002578:	2b00      	cmp	r3, #0
 800257a:	d030      	beq.n	80025de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	4798      	blx	r3
 8002584:	e02b      	b.n	80025de <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258a:	2b00      	cmp	r3, #0
 800258c:	d027      	beq.n	80025de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	4798      	blx	r3
 8002596:	e022      	b.n	80025de <HAL_DMA_IRQHandler+0x29e>
 8002598:	20000000 	.word	0x20000000
 800259c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10f      	bne.n	80025ce <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0210 	bic.w	r2, r2, #16
 80025bc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d032      	beq.n	800264c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d022      	beq.n	8002638 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2205      	movs	r2, #5
 80025f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0201 	bic.w	r2, r2, #1
 8002608:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	3301      	adds	r3, #1
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	429a      	cmp	r2, r3
 8002614:	d307      	bcc.n	8002626 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1f2      	bne.n	800260a <HAL_DMA_IRQHandler+0x2ca>
 8002624:	e000      	b.n	8002628 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002626:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	4798      	blx	r3
 8002648:	e000      	b.n	800264c <HAL_DMA_IRQHandler+0x30c>
        return;
 800264a:	bf00      	nop
    }
  }
}
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop

08002654 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
 8002660:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002670:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b40      	cmp	r3, #64	; 0x40
 8002680:	d108      	bne.n	8002694 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002692:	e007      	b.n	80026a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	60da      	str	r2, [r3, #12]
}
 80026a4:	bf00      	nop
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	3b10      	subs	r3, #16
 80026c0:	4a13      	ldr	r2, [pc, #76]	; (8002710 <DMA_CalcBaseAndBitshift+0x60>)
 80026c2:	fba2 2303 	umull	r2, r3, r2, r3
 80026c6:	091b      	lsrs	r3, r3, #4
 80026c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026ca:	4a12      	ldr	r2, [pc, #72]	; (8002714 <DMA_CalcBaseAndBitshift+0x64>)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4413      	add	r3, r2
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	461a      	mov	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d908      	bls.n	80026f0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	461a      	mov	r2, r3
 80026e4:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <DMA_CalcBaseAndBitshift+0x68>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	1d1a      	adds	r2, r3, #4
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	659a      	str	r2, [r3, #88]	; 0x58
 80026ee:	e006      	b.n	80026fe <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	4b08      	ldr	r3, [pc, #32]	; (8002718 <DMA_CalcBaseAndBitshift+0x68>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002702:	4618      	mov	r0, r3
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	aaaaaaab 	.word	0xaaaaaaab
 8002714:	08005874 	.word	0x08005874
 8002718:	fffffc00 	.word	0xfffffc00

0800271c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002724:	2300      	movs	r3, #0
 8002726:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d11f      	bne.n	8002776 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2b03      	cmp	r3, #3
 800273a:	d855      	bhi.n	80027e8 <DMA_CheckFifoParam+0xcc>
 800273c:	a201      	add	r2, pc, #4	; (adr r2, 8002744 <DMA_CheckFifoParam+0x28>)
 800273e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002742:	bf00      	nop
 8002744:	08002755 	.word	0x08002755
 8002748:	08002767 	.word	0x08002767
 800274c:	08002755 	.word	0x08002755
 8002750:	080027e9 	.word	0x080027e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002758:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d045      	beq.n	80027ec <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002764:	e042      	b.n	80027ec <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800276e:	d13f      	bne.n	80027f0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002774:	e03c      	b.n	80027f0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800277e:	d121      	bne.n	80027c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	2b03      	cmp	r3, #3
 8002784:	d836      	bhi.n	80027f4 <DMA_CheckFifoParam+0xd8>
 8002786:	a201      	add	r2, pc, #4	; (adr r2, 800278c <DMA_CheckFifoParam+0x70>)
 8002788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800278c:	0800279d 	.word	0x0800279d
 8002790:	080027a3 	.word	0x080027a3
 8002794:	0800279d 	.word	0x0800279d
 8002798:	080027b5 	.word	0x080027b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	73fb      	strb	r3, [r7, #15]
      break;
 80027a0:	e02f      	b.n	8002802 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d024      	beq.n	80027f8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027b2:	e021      	b.n	80027f8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027bc:	d11e      	bne.n	80027fc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027c2:	e01b      	b.n	80027fc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d902      	bls.n	80027d0 <DMA_CheckFifoParam+0xb4>
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	d003      	beq.n	80027d6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027ce:	e018      	b.n	8002802 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	73fb      	strb	r3, [r7, #15]
      break;
 80027d4:	e015      	b.n	8002802 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00e      	beq.n	8002800 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	73fb      	strb	r3, [r7, #15]
      break;
 80027e6:	e00b      	b.n	8002800 <DMA_CheckFifoParam+0xe4>
      break;
 80027e8:	bf00      	nop
 80027ea:	e00a      	b.n	8002802 <DMA_CheckFifoParam+0xe6>
      break;
 80027ec:	bf00      	nop
 80027ee:	e008      	b.n	8002802 <DMA_CheckFifoParam+0xe6>
      break;
 80027f0:	bf00      	nop
 80027f2:	e006      	b.n	8002802 <DMA_CheckFifoParam+0xe6>
      break;
 80027f4:	bf00      	nop
 80027f6:	e004      	b.n	8002802 <DMA_CheckFifoParam+0xe6>
      break;
 80027f8:	bf00      	nop
 80027fa:	e002      	b.n	8002802 <DMA_CheckFifoParam+0xe6>
      break;   
 80027fc:	bf00      	nop
 80027fe:	e000      	b.n	8002802 <DMA_CheckFifoParam+0xe6>
      break;
 8002800:	bf00      	nop
    }
  } 
  
  return status; 
 8002802:	7bfb      	ldrb	r3, [r7, #15]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002810:	b480      	push	{r7}
 8002812:	b089      	sub	sp, #36	; 0x24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002822:	2300      	movs	r3, #0
 8002824:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002826:	2300      	movs	r3, #0
 8002828:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800282a:	2300      	movs	r3, #0
 800282c:	61fb      	str	r3, [r7, #28]
 800282e:	e169      	b.n	8002b04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002830:	2201      	movs	r2, #1
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	4013      	ands	r3, r2
 8002842:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	429a      	cmp	r2, r3
 800284a:	f040 8158 	bne.w	8002afe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d00b      	beq.n	800286e <HAL_GPIO_Init+0x5e>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b02      	cmp	r3, #2
 800285c:	d007      	beq.n	800286e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002862:	2b11      	cmp	r3, #17
 8002864:	d003      	beq.n	800286e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b12      	cmp	r3, #18
 800286c:	d130      	bne.n	80028d0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	2203      	movs	r2, #3
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43db      	mvns	r3, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4013      	ands	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4313      	orrs	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028a4:	2201      	movs	r2, #1
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	f003 0201 	and.w	r2, r3, #1
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	2203      	movs	r2, #3
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b02      	cmp	r3, #2
 8002906:	d003      	beq.n	8002910 <HAL_GPIO_Init+0x100>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b12      	cmp	r3, #18
 800290e:	d123      	bne.n	8002958 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	08da      	lsrs	r2, r3, #3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3208      	adds	r2, #8
 8002918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800291c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	220f      	movs	r2, #15
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4013      	ands	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	691a      	ldr	r2, [r3, #16]
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	08da      	lsrs	r2, r3, #3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3208      	adds	r2, #8
 8002952:	69b9      	ldr	r1, [r7, #24]
 8002954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	2203      	movs	r2, #3
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	43db      	mvns	r3, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f003 0203 	and.w	r2, r3, #3
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4313      	orrs	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 80b2 	beq.w	8002afe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800299a:	4b5f      	ldr	r3, [pc, #380]	; (8002b18 <HAL_GPIO_Init+0x308>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	4a5e      	ldr	r2, [pc, #376]	; (8002b18 <HAL_GPIO_Init+0x308>)
 80029a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029a4:	6453      	str	r3, [r2, #68]	; 0x44
 80029a6:	4b5c      	ldr	r3, [pc, #368]	; (8002b18 <HAL_GPIO_Init+0x308>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80029b2:	4a5a      	ldr	r2, [pc, #360]	; (8002b1c <HAL_GPIO_Init+0x30c>)
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	089b      	lsrs	r3, r3, #2
 80029b8:	3302      	adds	r3, #2
 80029ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	220f      	movs	r2, #15
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4013      	ands	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a51      	ldr	r2, [pc, #324]	; (8002b20 <HAL_GPIO_Init+0x310>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d02b      	beq.n	8002a36 <HAL_GPIO_Init+0x226>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a50      	ldr	r2, [pc, #320]	; (8002b24 <HAL_GPIO_Init+0x314>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d025      	beq.n	8002a32 <HAL_GPIO_Init+0x222>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a4f      	ldr	r2, [pc, #316]	; (8002b28 <HAL_GPIO_Init+0x318>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d01f      	beq.n	8002a2e <HAL_GPIO_Init+0x21e>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a4e      	ldr	r2, [pc, #312]	; (8002b2c <HAL_GPIO_Init+0x31c>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d019      	beq.n	8002a2a <HAL_GPIO_Init+0x21a>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a4d      	ldr	r2, [pc, #308]	; (8002b30 <HAL_GPIO_Init+0x320>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d013      	beq.n	8002a26 <HAL_GPIO_Init+0x216>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a4c      	ldr	r2, [pc, #304]	; (8002b34 <HAL_GPIO_Init+0x324>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d00d      	beq.n	8002a22 <HAL_GPIO_Init+0x212>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a4b      	ldr	r2, [pc, #300]	; (8002b38 <HAL_GPIO_Init+0x328>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d007      	beq.n	8002a1e <HAL_GPIO_Init+0x20e>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a4a      	ldr	r2, [pc, #296]	; (8002b3c <HAL_GPIO_Init+0x32c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d101      	bne.n	8002a1a <HAL_GPIO_Init+0x20a>
 8002a16:	2307      	movs	r3, #7
 8002a18:	e00e      	b.n	8002a38 <HAL_GPIO_Init+0x228>
 8002a1a:	2308      	movs	r3, #8
 8002a1c:	e00c      	b.n	8002a38 <HAL_GPIO_Init+0x228>
 8002a1e:	2306      	movs	r3, #6
 8002a20:	e00a      	b.n	8002a38 <HAL_GPIO_Init+0x228>
 8002a22:	2305      	movs	r3, #5
 8002a24:	e008      	b.n	8002a38 <HAL_GPIO_Init+0x228>
 8002a26:	2304      	movs	r3, #4
 8002a28:	e006      	b.n	8002a38 <HAL_GPIO_Init+0x228>
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e004      	b.n	8002a38 <HAL_GPIO_Init+0x228>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e002      	b.n	8002a38 <HAL_GPIO_Init+0x228>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <HAL_GPIO_Init+0x228>
 8002a36:	2300      	movs	r3, #0
 8002a38:	69fa      	ldr	r2, [r7, #28]
 8002a3a:	f002 0203 	and.w	r2, r2, #3
 8002a3e:	0092      	lsls	r2, r2, #2
 8002a40:	4093      	lsls	r3, r2
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a48:	4934      	ldr	r1, [pc, #208]	; (8002b1c <HAL_GPIO_Init+0x30c>)
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	089b      	lsrs	r3, r3, #2
 8002a4e:	3302      	adds	r3, #2
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a56:	4b3a      	ldr	r3, [pc, #232]	; (8002b40 <HAL_GPIO_Init+0x330>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4013      	ands	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a7a:	4a31      	ldr	r2, [pc, #196]	; (8002b40 <HAL_GPIO_Init+0x330>)
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a80:	4b2f      	ldr	r3, [pc, #188]	; (8002b40 <HAL_GPIO_Init+0x330>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aa4:	4a26      	ldr	r2, [pc, #152]	; (8002b40 <HAL_GPIO_Init+0x330>)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aaa:	4b25      	ldr	r3, [pc, #148]	; (8002b40 <HAL_GPIO_Init+0x330>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ace:	4a1c      	ldr	r2, [pc, #112]	; (8002b40 <HAL_GPIO_Init+0x330>)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ad4:	4b1a      	ldr	r3, [pc, #104]	; (8002b40 <HAL_GPIO_Init+0x330>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	43db      	mvns	r3, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002af8:	4a11      	ldr	r2, [pc, #68]	; (8002b40 <HAL_GPIO_Init+0x330>)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	3301      	adds	r3, #1
 8002b02:	61fb      	str	r3, [r7, #28]
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	2b0f      	cmp	r3, #15
 8002b08:	f67f ae92 	bls.w	8002830 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002b0c:	bf00      	nop
 8002b0e:	3724      	adds	r7, #36	; 0x24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40013800 	.word	0x40013800
 8002b20:	40020000 	.word	0x40020000
 8002b24:	40020400 	.word	0x40020400
 8002b28:	40020800 	.word	0x40020800
 8002b2c:	40020c00 	.word	0x40020c00
 8002b30:	40021000 	.word	0x40021000
 8002b34:	40021400 	.word	0x40021400
 8002b38:	40021800 	.word	0x40021800
 8002b3c:	40021c00 	.word	0x40021c00
 8002b40:	40013c00 	.word	0x40013c00

08002b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	807b      	strh	r3, [r7, #2]
 8002b50:	4613      	mov	r3, r2
 8002b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b54:	787b      	ldrb	r3, [r7, #1]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b5a:	887a      	ldrh	r2, [r7, #2]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b60:	e003      	b.n	8002b6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b62:	887b      	ldrh	r3, [r7, #2]
 8002b64:	041a      	lsls	r2, r3, #16
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	619a      	str	r2, [r3, #24]
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b78:	b08f      	sub	sp, #60	; 0x3c
 8002b7a:	af0a      	add	r7, sp, #40	; 0x28
 8002b7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e116      	b.n	8002db6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d106      	bne.n	8002ba8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7fe fb1c 	bl	80011e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2203      	movs	r2, #3
 8002bac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d102      	bne.n	8002bc2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f002 fb3e 	bl	8005248 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	603b      	str	r3, [r7, #0]
 8002bd2:	687e      	ldr	r6, [r7, #4]
 8002bd4:	466d      	mov	r5, sp
 8002bd6:	f106 0410 	add.w	r4, r6, #16
 8002bda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002be0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002be2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002be6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bea:	1d33      	adds	r3, r6, #4
 8002bec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bee:	6838      	ldr	r0, [r7, #0]
 8002bf0:	f002 facc 	bl	800518c <USB_CoreInit>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d005      	beq.n	8002c06 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e0d7      	b.n	8002db6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f002 fb2c 	bl	800526a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c12:	2300      	movs	r3, #0
 8002c14:	73fb      	strb	r3, [r7, #15]
 8002c16:	e04a      	b.n	8002cae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	1a9b      	subs	r3, r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	333d      	adds	r3, #61	; 0x3d
 8002c28:	2201      	movs	r2, #1
 8002c2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	1a9b      	subs	r3, r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	333c      	adds	r3, #60	; 0x3c
 8002c3c:	7bfa      	ldrb	r2, [r7, #15]
 8002c3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
 8002c44:	b298      	uxth	r0, r3
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	1a9b      	subs	r3, r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	3342      	adds	r3, #66	; 0x42
 8002c54:	4602      	mov	r2, r0
 8002c56:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c58:	7bfa      	ldrb	r2, [r7, #15]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	1a9b      	subs	r3, r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	333f      	adds	r3, #63	; 0x3f
 8002c68:	2200      	movs	r2, #0
 8002c6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c6c:	7bfa      	ldrb	r2, [r7, #15]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	1a9b      	subs	r3, r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	3344      	adds	r3, #68	; 0x44
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c80:	7bfa      	ldrb	r2, [r7, #15]
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	1a9b      	subs	r3, r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	3348      	adds	r3, #72	; 0x48
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c94:	7bfa      	ldrb	r2, [r7, #15]
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	1a9b      	subs	r3, r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	3350      	adds	r3, #80	; 0x50
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
 8002caa:	3301      	adds	r3, #1
 8002cac:	73fb      	strb	r3, [r7, #15]
 8002cae:	7bfa      	ldrb	r2, [r7, #15]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d3af      	bcc.n	8002c18 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cb8:	2300      	movs	r3, #0
 8002cba:	73fb      	strb	r3, [r7, #15]
 8002cbc:	e044      	b.n	8002d48 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cbe:	7bfa      	ldrb	r2, [r7, #15]
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	1a9b      	subs	r3, r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cd4:	7bfa      	ldrb	r2, [r7, #15]
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	1a9b      	subs	r3, r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002ce6:	7bfa      	ldrb	r2, [r7, #15]
 8002ce8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cea:	7bfa      	ldrb	r2, [r7, #15]
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	1a9b      	subs	r3, r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d00:	7bfa      	ldrb	r2, [r7, #15]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	1a9b      	subs	r3, r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d16:	7bfa      	ldrb	r2, [r7, #15]
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	1a9b      	subs	r3, r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	440b      	add	r3, r1
 8002d24:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d2c:	7bfa      	ldrb	r2, [r7, #15]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	1a9b      	subs	r3, r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	3301      	adds	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
 8002d48:	7bfa      	ldrb	r2, [r7, #15]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d3b5      	bcc.n	8002cbe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	603b      	str	r3, [r7, #0]
 8002d58:	687e      	ldr	r6, [r7, #4]
 8002d5a:	466d      	mov	r5, sp
 8002d5c:	f106 0410 	add.w	r4, r6, #16
 8002d60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d70:	1d33      	adds	r3, r6, #4
 8002d72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d74:	6838      	ldr	r0, [r7, #0]
 8002d76:	f002 faa3 	bl	80052c0 <USB_DevInit>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e014      	b.n	8002db6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d102      	bne.n	8002daa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f80b 	bl	8002dc0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f002 fc55 	bl	800565e <USB_DevDisconnect>

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002dc0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002dee:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <HAL_PCDEx_ActivateLPM+0x44>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	10000003 	.word	0x10000003

08002e08 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e0c:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a04      	ldr	r2, [pc, #16]	; (8002e24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e16:	6013      	str	r3, [r2, #0]
}
 8002e18:	bf00      	nop
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	40007000 	.word	0x40007000

08002e28 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e32:	4b23      	ldr	r3, [pc, #140]	; (8002ec0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	4a22      	ldr	r2, [pc, #136]	; (8002ec0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3e:	4b20      	ldr	r3, [pc, #128]	; (8002ec0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e4a:	4b1e      	ldr	r3, [pc, #120]	; (8002ec4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a1d      	ldr	r2, [pc, #116]	; (8002ec4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e54:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e56:	f7fe fb27 	bl	80014a8 <HAL_GetTick>
 8002e5a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e5c:	e009      	b.n	8002e72 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e5e:	f7fe fb23 	bl	80014a8 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e6c:	d901      	bls.n	8002e72 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e022      	b.n	8002eb8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e72:	4b14      	ldr	r3, [pc, #80]	; (8002ec4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e7e:	d1ee      	bne.n	8002e5e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e80:	4b10      	ldr	r3, [pc, #64]	; (8002ec4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a0f      	ldr	r2, [pc, #60]	; (8002ec4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e8a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e8c:	f7fe fb0c 	bl	80014a8 <HAL_GetTick>
 8002e90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e92:	e009      	b.n	8002ea8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e94:	f7fe fb08 	bl	80014a8 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ea2:	d901      	bls.n	8002ea8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e007      	b.n	8002eb8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ea8:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002eb4:	d1ee      	bne.n	8002e94 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	40007000 	.word	0x40007000

08002ec8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e291      	b.n	8003402 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 8087 	beq.w	8002ffa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002eec:	4b96      	ldr	r3, [pc, #600]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 030c 	and.w	r3, r3, #12
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d00c      	beq.n	8002f12 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ef8:	4b93      	ldr	r3, [pc, #588]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 030c 	and.w	r3, r3, #12
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d112      	bne.n	8002f2a <HAL_RCC_OscConfig+0x62>
 8002f04:	4b90      	ldr	r3, [pc, #576]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f10:	d10b      	bne.n	8002f2a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f12:	4b8d      	ldr	r3, [pc, #564]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d06c      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x130>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d168      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e26b      	b.n	8003402 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f32:	d106      	bne.n	8002f42 <HAL_RCC_OscConfig+0x7a>
 8002f34:	4b84      	ldr	r3, [pc, #528]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a83      	ldr	r2, [pc, #524]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8002f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	e02e      	b.n	8002fa0 <HAL_RCC_OscConfig+0xd8>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10c      	bne.n	8002f64 <HAL_RCC_OscConfig+0x9c>
 8002f4a:	4b7f      	ldr	r3, [pc, #508]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a7e      	ldr	r2, [pc, #504]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8002f50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	4b7c      	ldr	r3, [pc, #496]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a7b      	ldr	r2, [pc, #492]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8002f5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	e01d      	b.n	8002fa0 <HAL_RCC_OscConfig+0xd8>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f6c:	d10c      	bne.n	8002f88 <HAL_RCC_OscConfig+0xc0>
 8002f6e:	4b76      	ldr	r3, [pc, #472]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a75      	ldr	r2, [pc, #468]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8002f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	4b73      	ldr	r3, [pc, #460]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a72      	ldr	r2, [pc, #456]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8002f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	e00b      	b.n	8002fa0 <HAL_RCC_OscConfig+0xd8>
 8002f88:	4b6f      	ldr	r3, [pc, #444]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a6e      	ldr	r2, [pc, #440]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8002f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	4b6c      	ldr	r3, [pc, #432]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a6b      	ldr	r2, [pc, #428]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8002f9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d013      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa8:	f7fe fa7e 	bl	80014a8 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb0:	f7fe fa7a 	bl	80014a8 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b64      	cmp	r3, #100	; 0x64
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e21f      	b.n	8003402 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc2:	4b61      	ldr	r3, [pc, #388]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0xe8>
 8002fce:	e014      	b.n	8002ffa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd0:	f7fe fa6a 	bl	80014a8 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd8:	f7fe fa66 	bl	80014a8 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b64      	cmp	r3, #100	; 0x64
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e20b      	b.n	8003402 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fea:	4b57      	ldr	r3, [pc, #348]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x110>
 8002ff6:	e000      	b.n	8002ffa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d069      	beq.n	80030da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003006:	4b50      	ldr	r3, [pc, #320]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 030c 	and.w	r3, r3, #12
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00b      	beq.n	800302a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003012:	4b4d      	ldr	r3, [pc, #308]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b08      	cmp	r3, #8
 800301c:	d11c      	bne.n	8003058 <HAL_RCC_OscConfig+0x190>
 800301e:	4b4a      	ldr	r3, [pc, #296]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d116      	bne.n	8003058 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800302a:	4b47      	ldr	r3, [pc, #284]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d005      	beq.n	8003042 <HAL_RCC_OscConfig+0x17a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d001      	beq.n	8003042 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e1df      	b.n	8003402 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003042:	4b41      	ldr	r3, [pc, #260]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	493d      	ldr	r1, [pc, #244]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8003052:	4313      	orrs	r3, r2
 8003054:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003056:	e040      	b.n	80030da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d023      	beq.n	80030a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003060:	4b39      	ldr	r3, [pc, #228]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a38      	ldr	r2, [pc, #224]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8003066:	f043 0301 	orr.w	r3, r3, #1
 800306a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7fe fa1c 	bl	80014a8 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003074:	f7fe fa18 	bl	80014a8 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e1bd      	b.n	8003402 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003086:	4b30      	ldr	r3, [pc, #192]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f0      	beq.n	8003074 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003092:	4b2d      	ldr	r3, [pc, #180]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	4929      	ldr	r1, [pc, #164]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	600b      	str	r3, [r1, #0]
 80030a6:	e018      	b.n	80030da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030a8:	4b27      	ldr	r3, [pc, #156]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a26      	ldr	r2, [pc, #152]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 80030ae:	f023 0301 	bic.w	r3, r3, #1
 80030b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b4:	f7fe f9f8 	bl	80014a8 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030bc:	f7fe f9f4 	bl	80014a8 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e199      	b.n	8003402 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ce:	4b1e      	ldr	r3, [pc, #120]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f0      	bne.n	80030bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d038      	beq.n	8003158 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d019      	beq.n	8003122 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ee:	4b16      	ldr	r3, [pc, #88]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 80030f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f2:	4a15      	ldr	r2, [pc, #84]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fa:	f7fe f9d5 	bl	80014a8 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003102:	f7fe f9d1 	bl	80014a8 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e176      	b.n	8003402 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003114:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8003116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0f0      	beq.n	8003102 <HAL_RCC_OscConfig+0x23a>
 8003120:	e01a      	b.n	8003158 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003122:	4b09      	ldr	r3, [pc, #36]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8003124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003126:	4a08      	ldr	r2, [pc, #32]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8003128:	f023 0301 	bic.w	r3, r3, #1
 800312c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312e:	f7fe f9bb 	bl	80014a8 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003134:	e00a      	b.n	800314c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003136:	f7fe f9b7 	bl	80014a8 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d903      	bls.n	800314c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e15c      	b.n	8003402 <HAL_RCC_OscConfig+0x53a>
 8003148:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800314c:	4b91      	ldr	r3, [pc, #580]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 800314e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1ee      	bne.n	8003136 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 80a4 	beq.w	80032ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003166:	4b8b      	ldr	r3, [pc, #556]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10d      	bne.n	800318e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003172:	4b88      	ldr	r3, [pc, #544]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	4a87      	ldr	r2, [pc, #540]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 8003178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800317c:	6413      	str	r3, [r2, #64]	; 0x40
 800317e:	4b85      	ldr	r3, [pc, #532]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003186:	60bb      	str	r3, [r7, #8]
 8003188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800318a:	2301      	movs	r3, #1
 800318c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800318e:	4b82      	ldr	r3, [pc, #520]	; (8003398 <HAL_RCC_OscConfig+0x4d0>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003196:	2b00      	cmp	r3, #0
 8003198:	d118      	bne.n	80031cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800319a:	4b7f      	ldr	r3, [pc, #508]	; (8003398 <HAL_RCC_OscConfig+0x4d0>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a7e      	ldr	r2, [pc, #504]	; (8003398 <HAL_RCC_OscConfig+0x4d0>)
 80031a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031a6:	f7fe f97f 	bl	80014a8 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ae:	f7fe f97b 	bl	80014a8 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b64      	cmp	r3, #100	; 0x64
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e120      	b.n	8003402 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031c0:	4b75      	ldr	r3, [pc, #468]	; (8003398 <HAL_RCC_OscConfig+0x4d0>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0f0      	beq.n	80031ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d106      	bne.n	80031e2 <HAL_RCC_OscConfig+0x31a>
 80031d4:	4b6f      	ldr	r3, [pc, #444]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 80031d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d8:	4a6e      	ldr	r2, [pc, #440]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	6713      	str	r3, [r2, #112]	; 0x70
 80031e0:	e02d      	b.n	800323e <HAL_RCC_OscConfig+0x376>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10c      	bne.n	8003204 <HAL_RCC_OscConfig+0x33c>
 80031ea:	4b6a      	ldr	r3, [pc, #424]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 80031ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ee:	4a69      	ldr	r2, [pc, #420]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 80031f0:	f023 0301 	bic.w	r3, r3, #1
 80031f4:	6713      	str	r3, [r2, #112]	; 0x70
 80031f6:	4b67      	ldr	r3, [pc, #412]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 80031f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fa:	4a66      	ldr	r2, [pc, #408]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 80031fc:	f023 0304 	bic.w	r3, r3, #4
 8003200:	6713      	str	r3, [r2, #112]	; 0x70
 8003202:	e01c      	b.n	800323e <HAL_RCC_OscConfig+0x376>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	2b05      	cmp	r3, #5
 800320a:	d10c      	bne.n	8003226 <HAL_RCC_OscConfig+0x35e>
 800320c:	4b61      	ldr	r3, [pc, #388]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 800320e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003210:	4a60      	ldr	r2, [pc, #384]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 8003212:	f043 0304 	orr.w	r3, r3, #4
 8003216:	6713      	str	r3, [r2, #112]	; 0x70
 8003218:	4b5e      	ldr	r3, [pc, #376]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 800321a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321c:	4a5d      	ldr	r2, [pc, #372]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	6713      	str	r3, [r2, #112]	; 0x70
 8003224:	e00b      	b.n	800323e <HAL_RCC_OscConfig+0x376>
 8003226:	4b5b      	ldr	r3, [pc, #364]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 8003228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322a:	4a5a      	ldr	r2, [pc, #360]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 800322c:	f023 0301 	bic.w	r3, r3, #1
 8003230:	6713      	str	r3, [r2, #112]	; 0x70
 8003232:	4b58      	ldr	r3, [pc, #352]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 8003234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003236:	4a57      	ldr	r2, [pc, #348]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 8003238:	f023 0304 	bic.w	r3, r3, #4
 800323c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d015      	beq.n	8003272 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003246:	f7fe f92f 	bl	80014a8 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800324c:	e00a      	b.n	8003264 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324e:	f7fe f92b 	bl	80014a8 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	f241 3288 	movw	r2, #5000	; 0x1388
 800325c:	4293      	cmp	r3, r2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e0ce      	b.n	8003402 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003264:	4b4b      	ldr	r3, [pc, #300]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 8003266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0ee      	beq.n	800324e <HAL_RCC_OscConfig+0x386>
 8003270:	e014      	b.n	800329c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003272:	f7fe f919 	bl	80014a8 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003278:	e00a      	b.n	8003290 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327a:	f7fe f915 	bl	80014a8 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	f241 3288 	movw	r2, #5000	; 0x1388
 8003288:	4293      	cmp	r3, r2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e0b8      	b.n	8003402 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003290:	4b40      	ldr	r3, [pc, #256]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 8003292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1ee      	bne.n	800327a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800329c:	7dfb      	ldrb	r3, [r7, #23]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d105      	bne.n	80032ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a2:	4b3c      	ldr	r3, [pc, #240]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	4a3b      	ldr	r2, [pc, #236]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 80032a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 80a4 	beq.w	8003400 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032b8:	4b36      	ldr	r3, [pc, #216]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 030c 	and.w	r3, r3, #12
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d06b      	beq.n	800339c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d149      	bne.n	8003360 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032cc:	4b31      	ldr	r3, [pc, #196]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a30      	ldr	r2, [pc, #192]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 80032d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d8:	f7fe f8e6 	bl	80014a8 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e0:	f7fe f8e2 	bl	80014a8 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e087      	b.n	8003402 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f2:	4b28      	ldr	r3, [pc, #160]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1f0      	bne.n	80032e0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69da      	ldr	r2, [r3, #28]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	019b      	lsls	r3, r3, #6
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003314:	085b      	lsrs	r3, r3, #1
 8003316:	3b01      	subs	r3, #1
 8003318:	041b      	lsls	r3, r3, #16
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	061b      	lsls	r3, r3, #24
 8003322:	4313      	orrs	r3, r2
 8003324:	4a1b      	ldr	r2, [pc, #108]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 8003326:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800332a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800332c:	4b19      	ldr	r3, [pc, #100]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a18      	ldr	r2, [pc, #96]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 8003332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003338:	f7fe f8b6 	bl	80014a8 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003340:	f7fe f8b2 	bl	80014a8 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e057      	b.n	8003402 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003352:	4b10      	ldr	r3, [pc, #64]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0x478>
 800335e:	e04f      	b.n	8003400 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003360:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a0b      	ldr	r2, [pc, #44]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 8003366:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800336a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336c:	f7fe f89c 	bl	80014a8 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003374:	f7fe f898 	bl	80014a8 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e03d      	b.n	8003402 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003386:	4b03      	ldr	r3, [pc, #12]	; (8003394 <HAL_RCC_OscConfig+0x4cc>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x4ac>
 8003392:	e035      	b.n	8003400 <HAL_RCC_OscConfig+0x538>
 8003394:	40023800 	.word	0x40023800
 8003398:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800339c:	4b1b      	ldr	r3, [pc, #108]	; (800340c <HAL_RCC_OscConfig+0x544>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d028      	beq.n	80033fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d121      	bne.n	80033fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d11a      	bne.n	80033fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033cc:	4013      	ands	r3, r2
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d111      	bne.n	80033fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e2:	085b      	lsrs	r3, r3, #1
 80033e4:	3b01      	subs	r3, #1
 80033e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d107      	bne.n	80033fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d001      	beq.n	8003400 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e000      	b.n	8003402 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40023800 	.word	0x40023800

08003410 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800341a:	2300      	movs	r3, #0
 800341c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0d0      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003428:	4b6a      	ldr	r3, [pc, #424]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 030f 	and.w	r3, r3, #15
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d910      	bls.n	8003458 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003436:	4b67      	ldr	r3, [pc, #412]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 020f 	bic.w	r2, r3, #15
 800343e:	4965      	ldr	r1, [pc, #404]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	4313      	orrs	r3, r2
 8003444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003446:	4b63      	ldr	r3, [pc, #396]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d001      	beq.n	8003458 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e0b8      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d020      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003470:	4b59      	ldr	r3, [pc, #356]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	4a58      	ldr	r2, [pc, #352]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003476:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800347a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0308 	and.w	r3, r3, #8
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003488:	4b53      	ldr	r3, [pc, #332]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	4a52      	ldr	r2, [pc, #328]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 800348e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003492:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003494:	4b50      	ldr	r3, [pc, #320]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	494d      	ldr	r1, [pc, #308]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d040      	beq.n	8003534 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d107      	bne.n	80034ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ba:	4b47      	ldr	r3, [pc, #284]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d115      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e07f      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d107      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d2:	4b41      	ldr	r3, [pc, #260]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d109      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e073      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e2:	4b3d      	ldr	r3, [pc, #244]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e06b      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034f2:	4b39      	ldr	r3, [pc, #228]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f023 0203 	bic.w	r2, r3, #3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	4936      	ldr	r1, [pc, #216]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003500:	4313      	orrs	r3, r2
 8003502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003504:	f7fd ffd0 	bl	80014a8 <HAL_GetTick>
 8003508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350a:	e00a      	b.n	8003522 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800350c:	f7fd ffcc 	bl	80014a8 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	f241 3288 	movw	r2, #5000	; 0x1388
 800351a:	4293      	cmp	r3, r2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e053      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003522:	4b2d      	ldr	r3, [pc, #180]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 020c 	and.w	r2, r3, #12
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	429a      	cmp	r2, r3
 8003532:	d1eb      	bne.n	800350c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003534:	4b27      	ldr	r3, [pc, #156]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 030f 	and.w	r3, r3, #15
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d210      	bcs.n	8003564 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003542:	4b24      	ldr	r3, [pc, #144]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f023 020f 	bic.w	r2, r3, #15
 800354a:	4922      	ldr	r1, [pc, #136]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	4313      	orrs	r3, r2
 8003550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003552:	4b20      	ldr	r3, [pc, #128]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	d001      	beq.n	8003564 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e032      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003570:	4b19      	ldr	r3, [pc, #100]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4916      	ldr	r1, [pc, #88]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 800357e:	4313      	orrs	r3, r2
 8003580:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b00      	cmp	r3, #0
 800358c:	d009      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800358e:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	490e      	ldr	r1, [pc, #56]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035a2:	f000 f821 	bl	80035e8 <HAL_RCC_GetSysClockFreq>
 80035a6:	4601      	mov	r1, r0
 80035a8:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	091b      	lsrs	r3, r3, #4
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	4a0a      	ldr	r2, [pc, #40]	; (80035dc <HAL_RCC_ClockConfig+0x1cc>)
 80035b4:	5cd3      	ldrb	r3, [r2, r3]
 80035b6:	fa21 f303 	lsr.w	r3, r1, r3
 80035ba:	4a09      	ldr	r2, [pc, #36]	; (80035e0 <HAL_RCC_ClockConfig+0x1d0>)
 80035bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035be:	4b09      	ldr	r3, [pc, #36]	; (80035e4 <HAL_RCC_ClockConfig+0x1d4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fd ff2c 	bl	8001420 <HAL_InitTick>

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40023c00 	.word	0x40023c00
 80035d8:	40023800 	.word	0x40023800
 80035dc:	0800585c 	.word	0x0800585c
 80035e0:	20000000 	.word	0x20000000
 80035e4:	20000004 	.word	0x20000004

080035e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80035ee:	2300      	movs	r3, #0
 80035f0:	607b      	str	r3, [r7, #4]
 80035f2:	2300      	movs	r3, #0
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	2300      	movs	r3, #0
 80035f8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80035fa:	2300      	movs	r3, #0
 80035fc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035fe:	4b63      	ldr	r3, [pc, #396]	; (800378c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 030c 	and.w	r3, r3, #12
 8003606:	2b04      	cmp	r3, #4
 8003608:	d007      	beq.n	800361a <HAL_RCC_GetSysClockFreq+0x32>
 800360a:	2b08      	cmp	r3, #8
 800360c:	d008      	beq.n	8003620 <HAL_RCC_GetSysClockFreq+0x38>
 800360e:	2b00      	cmp	r3, #0
 8003610:	f040 80b4 	bne.w	800377c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003614:	4b5e      	ldr	r3, [pc, #376]	; (8003790 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003616:	60bb      	str	r3, [r7, #8]
      break;
 8003618:	e0b3      	b.n	8003782 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800361a:	4b5e      	ldr	r3, [pc, #376]	; (8003794 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800361c:	60bb      	str	r3, [r7, #8]
      break;
 800361e:	e0b0      	b.n	8003782 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003620:	4b5a      	ldr	r3, [pc, #360]	; (800378c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003628:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800362a:	4b58      	ldr	r3, [pc, #352]	; (800378c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d04a      	beq.n	80036cc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003636:	4b55      	ldr	r3, [pc, #340]	; (800378c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	099b      	lsrs	r3, r3, #6
 800363c:	f04f 0400 	mov.w	r4, #0
 8003640:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	ea03 0501 	and.w	r5, r3, r1
 800364c:	ea04 0602 	and.w	r6, r4, r2
 8003650:	4629      	mov	r1, r5
 8003652:	4632      	mov	r2, r6
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	f04f 0400 	mov.w	r4, #0
 800365c:	0154      	lsls	r4, r2, #5
 800365e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003662:	014b      	lsls	r3, r1, #5
 8003664:	4619      	mov	r1, r3
 8003666:	4622      	mov	r2, r4
 8003668:	1b49      	subs	r1, r1, r5
 800366a:	eb62 0206 	sbc.w	r2, r2, r6
 800366e:	f04f 0300 	mov.w	r3, #0
 8003672:	f04f 0400 	mov.w	r4, #0
 8003676:	0194      	lsls	r4, r2, #6
 8003678:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800367c:	018b      	lsls	r3, r1, #6
 800367e:	1a5b      	subs	r3, r3, r1
 8003680:	eb64 0402 	sbc.w	r4, r4, r2
 8003684:	f04f 0100 	mov.w	r1, #0
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	00e2      	lsls	r2, r4, #3
 800368e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003692:	00d9      	lsls	r1, r3, #3
 8003694:	460b      	mov	r3, r1
 8003696:	4614      	mov	r4, r2
 8003698:	195b      	adds	r3, r3, r5
 800369a:	eb44 0406 	adc.w	r4, r4, r6
 800369e:	f04f 0100 	mov.w	r1, #0
 80036a2:	f04f 0200 	mov.w	r2, #0
 80036a6:	0262      	lsls	r2, r4, #9
 80036a8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80036ac:	0259      	lsls	r1, r3, #9
 80036ae:	460b      	mov	r3, r1
 80036b0:	4614      	mov	r4, r2
 80036b2:	4618      	mov	r0, r3
 80036b4:	4621      	mov	r1, r4
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f04f 0400 	mov.w	r4, #0
 80036bc:	461a      	mov	r2, r3
 80036be:	4623      	mov	r3, r4
 80036c0:	f7fc fdae 	bl	8000220 <__aeabi_uldivmod>
 80036c4:	4603      	mov	r3, r0
 80036c6:	460c      	mov	r4, r1
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	e049      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036cc:	4b2f      	ldr	r3, [pc, #188]	; (800378c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	099b      	lsrs	r3, r3, #6
 80036d2:	f04f 0400 	mov.w	r4, #0
 80036d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036da:	f04f 0200 	mov.w	r2, #0
 80036de:	ea03 0501 	and.w	r5, r3, r1
 80036e2:	ea04 0602 	and.w	r6, r4, r2
 80036e6:	4629      	mov	r1, r5
 80036e8:	4632      	mov	r2, r6
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	f04f 0400 	mov.w	r4, #0
 80036f2:	0154      	lsls	r4, r2, #5
 80036f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80036f8:	014b      	lsls	r3, r1, #5
 80036fa:	4619      	mov	r1, r3
 80036fc:	4622      	mov	r2, r4
 80036fe:	1b49      	subs	r1, r1, r5
 8003700:	eb62 0206 	sbc.w	r2, r2, r6
 8003704:	f04f 0300 	mov.w	r3, #0
 8003708:	f04f 0400 	mov.w	r4, #0
 800370c:	0194      	lsls	r4, r2, #6
 800370e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003712:	018b      	lsls	r3, r1, #6
 8003714:	1a5b      	subs	r3, r3, r1
 8003716:	eb64 0402 	sbc.w	r4, r4, r2
 800371a:	f04f 0100 	mov.w	r1, #0
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	00e2      	lsls	r2, r4, #3
 8003724:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003728:	00d9      	lsls	r1, r3, #3
 800372a:	460b      	mov	r3, r1
 800372c:	4614      	mov	r4, r2
 800372e:	195b      	adds	r3, r3, r5
 8003730:	eb44 0406 	adc.w	r4, r4, r6
 8003734:	f04f 0100 	mov.w	r1, #0
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	02a2      	lsls	r2, r4, #10
 800373e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003742:	0299      	lsls	r1, r3, #10
 8003744:	460b      	mov	r3, r1
 8003746:	4614      	mov	r4, r2
 8003748:	4618      	mov	r0, r3
 800374a:	4621      	mov	r1, r4
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f04f 0400 	mov.w	r4, #0
 8003752:	461a      	mov	r2, r3
 8003754:	4623      	mov	r3, r4
 8003756:	f7fc fd63 	bl	8000220 <__aeabi_uldivmod>
 800375a:	4603      	mov	r3, r0
 800375c:	460c      	mov	r4, r1
 800375e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003760:	4b0a      	ldr	r3, [pc, #40]	; (800378c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	0c1b      	lsrs	r3, r3, #16
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	3301      	adds	r3, #1
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	fbb2 f3f3 	udiv	r3, r2, r3
 8003778:	60bb      	str	r3, [r7, #8]
      break;
 800377a:	e002      	b.n	8003782 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800377c:	4b04      	ldr	r3, [pc, #16]	; (8003790 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800377e:	60bb      	str	r3, [r7, #8]
      break;
 8003780:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003782:	68bb      	ldr	r3, [r7, #8]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800378c:	40023800 	.word	0x40023800
 8003790:	00f42400 	.word	0x00f42400
 8003794:	007a1200 	.word	0x007a1200

08003798 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800379c:	4b03      	ldr	r3, [pc, #12]	; (80037ac <HAL_RCC_GetHCLKFreq+0x14>)
 800379e:	681b      	ldr	r3, [r3, #0]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	20000000 	.word	0x20000000

080037b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037b4:	f7ff fff0 	bl	8003798 <HAL_RCC_GetHCLKFreq>
 80037b8:	4601      	mov	r1, r0
 80037ba:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	0a9b      	lsrs	r3, r3, #10
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	4a03      	ldr	r2, [pc, #12]	; (80037d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037c6:	5cd3      	ldrb	r3, [r2, r3]
 80037c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40023800 	.word	0x40023800
 80037d4:	0800586c 	.word	0x0800586c

080037d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037dc:	f7ff ffdc 	bl	8003798 <HAL_RCC_GetHCLKFreq>
 80037e0:	4601      	mov	r1, r0
 80037e2:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	0b5b      	lsrs	r3, r3, #13
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	4a03      	ldr	r2, [pc, #12]	; (80037fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80037ee:	5cd3      	ldrb	r3, [r2, r3]
 80037f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40023800 	.word	0x40023800
 80037fc:	0800586c 	.word	0x0800586c

08003800 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800380c:	2300      	movs	r3, #0
 800380e:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8003810:	2300      	movs	r3, #0
 8003812:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003814:	2300      	movs	r3, #0
 8003816:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d012      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003824:	4b65      	ldr	r3, [pc, #404]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	4a64      	ldr	r2, [pc, #400]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800382a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800382e:	6093      	str	r3, [r2, #8]
 8003830:	4b62      	ldr	r3, [pc, #392]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	4960      	ldr	r1, [pc, #384]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800383a:	4313      	orrs	r3, r2
 800383c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8003846:	2301      	movs	r3, #1
 8003848:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d017      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003856:	4b59      	ldr	r3, [pc, #356]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800385c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003864:	4955      	ldr	r1, [pc, #340]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003870:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003874:	d101      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8003876:	2301      	movs	r3, #1
 8003878:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8003882:	2301      	movs	r3, #1
 8003884:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d017      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003892:	4b4a      	ldr	r3, [pc, #296]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003898:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a0:	4946      	ldr	r1, [pc, #280]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038b0:	d101      	bne.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80038b2:	2301      	movs	r3, #1
 80038b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80038be:	2301      	movs	r3, #1
 80038c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 808b 	beq.w	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038d0:	4b3a      	ldr	r3, [pc, #232]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	4a39      	ldr	r2, [pc, #228]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80038d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038da:	6413      	str	r3, [r2, #64]	; 0x40
 80038dc:	4b37      	ldr	r3, [pc, #220]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80038e8:	4b35      	ldr	r3, [pc, #212]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a34      	ldr	r2, [pc, #208]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80038ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f4:	f7fd fdd8 	bl	80014a8 <HAL_GetTick>
 80038f8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038fc:	f7fd fdd4 	bl	80014a8 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b64      	cmp	r3, #100	; 0x64
 8003908:	d901      	bls.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e2ba      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800390e:	4b2c      	ldr	r3, [pc, #176]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0f0      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800391a:	4b28      	ldr	r3, [pc, #160]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800391c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003922:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d035      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	429a      	cmp	r2, r3
 8003936:	d02e      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003938:	4b20      	ldr	r3, [pc, #128]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800393a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003940:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003942:	4b1e      	ldr	r3, [pc, #120]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003946:	4a1d      	ldr	r2, [pc, #116]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800394c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800394e:	4b1b      	ldr	r3, [pc, #108]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003952:	4a1a      	ldr	r2, [pc, #104]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003958:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800395a:	4a18      	ldr	r2, [pc, #96]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003960:	4b16      	ldr	r3, [pc, #88]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b01      	cmp	r3, #1
 800396a:	d114      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396c:	f7fd fd9c 	bl	80014a8 <HAL_GetTick>
 8003970:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003972:	e00a      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003974:	f7fd fd98 	bl	80014a8 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003982:	4293      	cmp	r3, r2
 8003984:	d901      	bls.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e27c      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398a:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800398c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0ee      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800399e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039a2:	d111      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80039a4:	4b05      	ldr	r3, [pc, #20]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80039b0:	4b04      	ldr	r3, [pc, #16]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80039b2:	400b      	ands	r3, r1
 80039b4:	4901      	ldr	r1, [pc, #4]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	608b      	str	r3, [r1, #8]
 80039ba:	e00b      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80039bc:	40023800 	.word	0x40023800
 80039c0:	40007000 	.word	0x40007000
 80039c4:	0ffffcff 	.word	0x0ffffcff
 80039c8:	4ba3      	ldr	r3, [pc, #652]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	4aa2      	ldr	r2, [pc, #648]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80039ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80039d2:	6093      	str	r3, [r2, #8]
 80039d4:	4ba0      	ldr	r3, [pc, #640]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80039d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e0:	499d      	ldr	r1, [pc, #628]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0310 	and.w	r3, r3, #16
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d010      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039f2:	4b99      	ldr	r3, [pc, #612]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80039f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039f8:	4a97      	ldr	r2, [pc, #604]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80039fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a02:	4b95      	ldr	r3, [pc, #596]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a04:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0c:	4992      	ldr	r1, [pc, #584]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00a      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a20:	4b8d      	ldr	r3, [pc, #564]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2e:	498a      	ldr	r1, [pc, #552]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00a      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a42:	4b85      	ldr	r3, [pc, #532]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a50:	4981      	ldr	r1, [pc, #516]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00a      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a64:	4b7c      	ldr	r3, [pc, #496]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a72:	4979      	ldr	r1, [pc, #484]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a86:	4b74      	ldr	r3, [pc, #464]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8c:	f023 0203 	bic.w	r2, r3, #3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a94:	4970      	ldr	r1, [pc, #448]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00a      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003aa8:	4b6b      	ldr	r3, [pc, #428]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aae:	f023 020c 	bic.w	r2, r3, #12
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	4968      	ldr	r1, [pc, #416]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003aca:	4b63      	ldr	r3, [pc, #396]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad8:	495f      	ldr	r1, [pc, #380]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00a      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003aec:	4b5a      	ldr	r3, [pc, #360]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003afa:	4957      	ldr	r1, [pc, #348]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b0e:	4b52      	ldr	r3, [pc, #328]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1c:	494e      	ldr	r1, [pc, #312]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00a      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003b30:	4b49      	ldr	r3, [pc, #292]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b3e:	4946      	ldr	r1, [pc, #280]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003b52:	4b41      	ldr	r3, [pc, #260]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b60:	493d      	ldr	r1, [pc, #244]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00a      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003b74:	4b38      	ldr	r3, [pc, #224]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b82:	4935      	ldr	r1, [pc, #212]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d011      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003b96:	4b30      	ldr	r3, [pc, #192]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba4:	492c      	ldr	r1, [pc, #176]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bb4:	d101      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bc6:	4b24      	ldr	r3, [pc, #144]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bcc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bd4:	4920      	ldr	r1, [pc, #128]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00a      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003be8:	4b1b      	ldr	r3, [pc, #108]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bf6:	4918      	ldr	r1, [pc, #96]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003c0a:	4b13      	ldr	r3, [pc, #76]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c10:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c18:	490f      	ldr	r1, [pc, #60]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d005      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c2e:	f040 809c 	bne.w	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c32:	4b09      	ldr	r3, [pc, #36]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a08      	ldr	r2, [pc, #32]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003c38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c3e:	f7fd fc33 	bl	80014a8 <HAL_GetTick>
 8003c42:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c44:	e00a      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c46:	f7fd fc2f 	bl	80014a8 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b64      	cmp	r3, #100	; 0x64
 8003c52:	d903      	bls.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e115      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8003c58:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c5c:	4b8b      	ldr	r3, [pc, #556]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1ee      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d017      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d113      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c7c:	4b83      	ldr	r3, [pc, #524]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c82:	0e1b      	lsrs	r3, r3, #24
 8003c84:	f003 030f 	and.w	r3, r3, #15
 8003c88:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	019a      	lsls	r2, r3, #6
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	061b      	lsls	r3, r3, #24
 8003c94:	431a      	orrs	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	071b      	lsls	r3, r3, #28
 8003c9c:	497b      	ldr	r1, [pc, #492]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d004      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cb8:	d00a      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d024      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cce:	d11f      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003cd0:	4b6e      	ldr	r3, [pc, #440]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cd6:	0f1b      	lsrs	r3, r3, #28
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	019a      	lsls	r2, r3, #6
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	061b      	lsls	r3, r3, #24
 8003cea:	431a      	orrs	r2, r3
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	071b      	lsls	r3, r3, #28
 8003cf0:	4966      	ldr	r1, [pc, #408]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003cf8:	4b64      	ldr	r3, [pc, #400]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003cfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cfe:	f023 021f 	bic.w	r2, r3, #31
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	4960      	ldr	r1, [pc, #384]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00d      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	019a      	lsls	r2, r3, #6
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	061b      	lsls	r3, r3, #24
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	071b      	lsls	r3, r3, #28
 8003d30:	4956      	ldr	r1, [pc, #344]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d38:	4b54      	ldr	r3, [pc, #336]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a53      	ldr	r2, [pc, #332]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003d3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d44:	f7fd fbb0 	bl	80014a8 <HAL_GetTick>
 8003d48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d4c:	f7fd fbac 	bl	80014a8 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b64      	cmp	r3, #100	; 0x64
 8003d58:	d901      	bls.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e092      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d5e:	4b4b      	ldr	r3, [pc, #300]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d0f0      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	f040 8088 	bne.w	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d72:	4b46      	ldr	r3, [pc, #280]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a45      	ldr	r2, [pc, #276]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003d78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d7e:	f7fd fb93 	bl	80014a8 <HAL_GetTick>
 8003d82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d84:	e008      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d86:	f7fd fb8f 	bl	80014a8 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b64      	cmp	r3, #100	; 0x64
 8003d92:	d901      	bls.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e075      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d98:	4b3c      	ldr	r3, [pc, #240]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003da0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003da4:	d0ef      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d009      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d024      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d120      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003dce:	4b2f      	ldr	r3, [pc, #188]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd4:	0c1b      	lsrs	r3, r3, #16
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	019a      	lsls	r2, r3, #6
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	041b      	lsls	r3, r3, #16
 8003de6:	431a      	orrs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	061b      	lsls	r3, r3, #24
 8003dee:	4927      	ldr	r1, [pc, #156]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003df6:	4b25      	ldr	r3, [pc, #148]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dfc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	3b01      	subs	r3, #1
 8003e06:	021b      	lsls	r3, r3, #8
 8003e08:	4920      	ldr	r1, [pc, #128]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d018      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e24:	d113      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e26:	4b19      	ldr	r3, [pc, #100]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2c:	0e1b      	lsrs	r3, r3, #24
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	019a      	lsls	r2, r3, #6
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	041b      	lsls	r3, r3, #16
 8003e40:	431a      	orrs	r2, r3
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	061b      	lsls	r3, r3, #24
 8003e46:	4911      	ldr	r1, [pc, #68]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e4e:	4b0f      	ldr	r3, [pc, #60]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a0e      	ldr	r2, [pc, #56]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e5a:	f7fd fb25 	bl	80014a8 <HAL_GetTick>
 8003e5e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e60:	e008      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e62:	f7fd fb21 	bl	80014a8 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b64      	cmp	r3, #100	; 0x64
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e007      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e74:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e80:	d1ef      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3720      	adds	r7, #32
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40023800 	.word	0x40023800

08003e90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e01d      	b.n	8003ede <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d106      	bne.n	8003ebc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7fd f8f6 	bl	80010a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3304      	adds	r3, #4
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4610      	mov	r0, r2
 8003ed0:	f000 f966 	bl	80041a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
	...

08003ee8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	6839      	ldr	r1, [r7, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 fc4e 	bl	800479c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a17      	ldr	r2, [pc, #92]	; (8003f64 <HAL_TIM_PWM_Start+0x7c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d004      	beq.n	8003f14 <HAL_TIM_PWM_Start+0x2c>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a16      	ldr	r2, [pc, #88]	; (8003f68 <HAL_TIM_PWM_Start+0x80>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d101      	bne.n	8003f18 <HAL_TIM_PWM_Start+0x30>
 8003f14:	2301      	movs	r3, #1
 8003f16:	e000      	b.n	8003f1a <HAL_TIM_PWM_Start+0x32>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d007      	beq.n	8003f2e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	4b0d      	ldr	r3, [pc, #52]	; (8003f6c <HAL_TIM_PWM_Start+0x84>)
 8003f36:	4013      	ands	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2b06      	cmp	r3, #6
 8003f3e:	d00b      	beq.n	8003f58 <HAL_TIM_PWM_Start+0x70>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f46:	d007      	beq.n	8003f58 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0201 	orr.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	40010000 	.word	0x40010000
 8003f68:	40010400 	.word	0x40010400
 8003f6c:	00010007 	.word	0x00010007

08003f70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d101      	bne.n	8003f8a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003f86:	2302      	movs	r3, #2
 8003f88:	e105      	b.n	8004196 <HAL_TIM_PWM_ConfigChannel+0x226>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2202      	movs	r2, #2
 8003f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b14      	cmp	r3, #20
 8003f9e:	f200 80f0 	bhi.w	8004182 <HAL_TIM_PWM_ConfigChannel+0x212>
 8003fa2:	a201      	add	r2, pc, #4	; (adr r2, 8003fa8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa8:	08003ffd 	.word	0x08003ffd
 8003fac:	08004183 	.word	0x08004183
 8003fb0:	08004183 	.word	0x08004183
 8003fb4:	08004183 	.word	0x08004183
 8003fb8:	0800403d 	.word	0x0800403d
 8003fbc:	08004183 	.word	0x08004183
 8003fc0:	08004183 	.word	0x08004183
 8003fc4:	08004183 	.word	0x08004183
 8003fc8:	0800407f 	.word	0x0800407f
 8003fcc:	08004183 	.word	0x08004183
 8003fd0:	08004183 	.word	0x08004183
 8003fd4:	08004183 	.word	0x08004183
 8003fd8:	080040bf 	.word	0x080040bf
 8003fdc:	08004183 	.word	0x08004183
 8003fe0:	08004183 	.word	0x08004183
 8003fe4:	08004183 	.word	0x08004183
 8003fe8:	08004101 	.word	0x08004101
 8003fec:	08004183 	.word	0x08004183
 8003ff0:	08004183 	.word	0x08004183
 8003ff4:	08004183 	.word	0x08004183
 8003ff8:	08004141 	.word	0x08004141
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68b9      	ldr	r1, [r7, #8]
 8004002:	4618      	mov	r0, r3
 8004004:	f000 f96c 	bl	80042e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699a      	ldr	r2, [r3, #24]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0208 	orr.w	r2, r2, #8
 8004016:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	699a      	ldr	r2, [r3, #24]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0204 	bic.w	r2, r2, #4
 8004026:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6999      	ldr	r1, [r3, #24]
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	691a      	ldr	r2, [r3, #16]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	619a      	str	r2, [r3, #24]
      break;
 800403a:	e0a3      	b.n	8004184 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68b9      	ldr	r1, [r7, #8]
 8004042:	4618      	mov	r0, r3
 8004044:	f000 f9be 	bl	80043c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699a      	ldr	r2, [r3, #24]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004056:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699a      	ldr	r2, [r3, #24]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004066:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6999      	ldr	r1, [r3, #24]
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	021a      	lsls	r2, r3, #8
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	619a      	str	r2, [r3, #24]
      break;
 800407c:	e082      	b.n	8004184 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68b9      	ldr	r1, [r7, #8]
 8004084:	4618      	mov	r0, r3
 8004086:	f000 fa15 	bl	80044b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69da      	ldr	r2, [r3, #28]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0208 	orr.w	r2, r2, #8
 8004098:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69da      	ldr	r2, [r3, #28]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0204 	bic.w	r2, r2, #4
 80040a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	69d9      	ldr	r1, [r3, #28]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	61da      	str	r2, [r3, #28]
      break;
 80040bc:	e062      	b.n	8004184 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68b9      	ldr	r1, [r7, #8]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 fa6b 	bl	80045a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	69da      	ldr	r2, [r3, #28]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69da      	ldr	r2, [r3, #28]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	69d9      	ldr	r1, [r3, #28]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	021a      	lsls	r2, r3, #8
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	61da      	str	r2, [r3, #28]
      break;
 80040fe:	e041      	b.n	8004184 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68b9      	ldr	r1, [r7, #8]
 8004106:	4618      	mov	r0, r3
 8004108:	f000 faa2 	bl	8004650 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0208 	orr.w	r2, r2, #8
 800411a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0204 	bic.w	r2, r2, #4
 800412a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	691a      	ldr	r2, [r3, #16]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800413e:	e021      	b.n	8004184 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68b9      	ldr	r1, [r7, #8]
 8004146:	4618      	mov	r0, r3
 8004148:	f000 fad4 	bl	80046f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800415a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800416a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	021a      	lsls	r2, r3, #8
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004180:	e000      	b.n	8004184 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8004182:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop

080041a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a40      	ldr	r2, [pc, #256]	; (80042b4 <TIM_Base_SetConfig+0x114>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d013      	beq.n	80041e0 <TIM_Base_SetConfig+0x40>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041be:	d00f      	beq.n	80041e0 <TIM_Base_SetConfig+0x40>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a3d      	ldr	r2, [pc, #244]	; (80042b8 <TIM_Base_SetConfig+0x118>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d00b      	beq.n	80041e0 <TIM_Base_SetConfig+0x40>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a3c      	ldr	r2, [pc, #240]	; (80042bc <TIM_Base_SetConfig+0x11c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d007      	beq.n	80041e0 <TIM_Base_SetConfig+0x40>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a3b      	ldr	r2, [pc, #236]	; (80042c0 <TIM_Base_SetConfig+0x120>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d003      	beq.n	80041e0 <TIM_Base_SetConfig+0x40>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a3a      	ldr	r2, [pc, #232]	; (80042c4 <TIM_Base_SetConfig+0x124>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d108      	bne.n	80041f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a2f      	ldr	r2, [pc, #188]	; (80042b4 <TIM_Base_SetConfig+0x114>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d02b      	beq.n	8004252 <TIM_Base_SetConfig+0xb2>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004200:	d027      	beq.n	8004252 <TIM_Base_SetConfig+0xb2>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a2c      	ldr	r2, [pc, #176]	; (80042b8 <TIM_Base_SetConfig+0x118>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d023      	beq.n	8004252 <TIM_Base_SetConfig+0xb2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a2b      	ldr	r2, [pc, #172]	; (80042bc <TIM_Base_SetConfig+0x11c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d01f      	beq.n	8004252 <TIM_Base_SetConfig+0xb2>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a2a      	ldr	r2, [pc, #168]	; (80042c0 <TIM_Base_SetConfig+0x120>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d01b      	beq.n	8004252 <TIM_Base_SetConfig+0xb2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a29      	ldr	r2, [pc, #164]	; (80042c4 <TIM_Base_SetConfig+0x124>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d017      	beq.n	8004252 <TIM_Base_SetConfig+0xb2>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a28      	ldr	r2, [pc, #160]	; (80042c8 <TIM_Base_SetConfig+0x128>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d013      	beq.n	8004252 <TIM_Base_SetConfig+0xb2>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a27      	ldr	r2, [pc, #156]	; (80042cc <TIM_Base_SetConfig+0x12c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d00f      	beq.n	8004252 <TIM_Base_SetConfig+0xb2>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a26      	ldr	r2, [pc, #152]	; (80042d0 <TIM_Base_SetConfig+0x130>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d00b      	beq.n	8004252 <TIM_Base_SetConfig+0xb2>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a25      	ldr	r2, [pc, #148]	; (80042d4 <TIM_Base_SetConfig+0x134>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d007      	beq.n	8004252 <TIM_Base_SetConfig+0xb2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a24      	ldr	r2, [pc, #144]	; (80042d8 <TIM_Base_SetConfig+0x138>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d003      	beq.n	8004252 <TIM_Base_SetConfig+0xb2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a23      	ldr	r2, [pc, #140]	; (80042dc <TIM_Base_SetConfig+0x13c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d108      	bne.n	8004264 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4313      	orrs	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a0a      	ldr	r2, [pc, #40]	; (80042b4 <TIM_Base_SetConfig+0x114>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d003      	beq.n	8004298 <TIM_Base_SetConfig+0xf8>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a0c      	ldr	r2, [pc, #48]	; (80042c4 <TIM_Base_SetConfig+0x124>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d103      	bne.n	80042a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	691a      	ldr	r2, [r3, #16]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	615a      	str	r2, [r3, #20]
}
 80042a6:	bf00      	nop
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	40010000 	.word	0x40010000
 80042b8:	40000400 	.word	0x40000400
 80042bc:	40000800 	.word	0x40000800
 80042c0:	40000c00 	.word	0x40000c00
 80042c4:	40010400 	.word	0x40010400
 80042c8:	40014000 	.word	0x40014000
 80042cc:	40014400 	.word	0x40014400
 80042d0:	40014800 	.word	0x40014800
 80042d4:	40001800 	.word	0x40001800
 80042d8:	40001c00 	.word	0x40001c00
 80042dc:	40002000 	.word	0x40002000

080042e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	f023 0201 	bic.w	r2, r3, #1
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	4b2b      	ldr	r3, [pc, #172]	; (80043b8 <TIM_OC1_SetConfig+0xd8>)
 800430c:	4013      	ands	r3, r2
 800430e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f023 0303 	bic.w	r3, r3, #3
 8004316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f023 0302 	bic.w	r3, r3, #2
 8004328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	4313      	orrs	r3, r2
 8004332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a21      	ldr	r2, [pc, #132]	; (80043bc <TIM_OC1_SetConfig+0xdc>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d003      	beq.n	8004344 <TIM_OC1_SetConfig+0x64>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a20      	ldr	r2, [pc, #128]	; (80043c0 <TIM_OC1_SetConfig+0xe0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d10c      	bne.n	800435e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f023 0308 	bic.w	r3, r3, #8
 800434a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	4313      	orrs	r3, r2
 8004354:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f023 0304 	bic.w	r3, r3, #4
 800435c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a16      	ldr	r2, [pc, #88]	; (80043bc <TIM_OC1_SetConfig+0xdc>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d003      	beq.n	800436e <TIM_OC1_SetConfig+0x8e>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a15      	ldr	r2, [pc, #84]	; (80043c0 <TIM_OC1_SetConfig+0xe0>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d111      	bne.n	8004392 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800437c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	4313      	orrs	r3, r2
 8004386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	4313      	orrs	r3, r2
 8004390:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	621a      	str	r2, [r3, #32]
}
 80043ac:	bf00      	nop
 80043ae:	371c      	adds	r7, #28
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	fffeff8f 	.word	0xfffeff8f
 80043bc:	40010000 	.word	0x40010000
 80043c0:	40010400 	.word	0x40010400

080043c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	f023 0210 	bic.w	r2, r3, #16
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	4b2e      	ldr	r3, [pc, #184]	; (80044a8 <TIM_OC2_SetConfig+0xe4>)
 80043f0:	4013      	ands	r3, r2
 80043f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	021b      	lsls	r3, r3, #8
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	4313      	orrs	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f023 0320 	bic.w	r3, r3, #32
 800440e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	011b      	lsls	r3, r3, #4
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	4313      	orrs	r3, r2
 800441a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a23      	ldr	r2, [pc, #140]	; (80044ac <TIM_OC2_SetConfig+0xe8>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d003      	beq.n	800442c <TIM_OC2_SetConfig+0x68>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a22      	ldr	r2, [pc, #136]	; (80044b0 <TIM_OC2_SetConfig+0xec>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d10d      	bne.n	8004448 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	4313      	orrs	r3, r2
 800443e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004446:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a18      	ldr	r2, [pc, #96]	; (80044ac <TIM_OC2_SetConfig+0xe8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d003      	beq.n	8004458 <TIM_OC2_SetConfig+0x94>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a17      	ldr	r2, [pc, #92]	; (80044b0 <TIM_OC2_SetConfig+0xec>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d113      	bne.n	8004480 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800445e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004466:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	4313      	orrs	r3, r2
 8004472:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	4313      	orrs	r3, r2
 800447e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	621a      	str	r2, [r3, #32]
}
 800449a:	bf00      	nop
 800449c:	371c      	adds	r7, #28
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	feff8fff 	.word	0xfeff8fff
 80044ac:	40010000 	.word	0x40010000
 80044b0:	40010400 	.word	0x40010400

080044b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	4b2d      	ldr	r3, [pc, #180]	; (8004594 <TIM_OC3_SetConfig+0xe0>)
 80044e0:	4013      	ands	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f023 0303 	bic.w	r3, r3, #3
 80044ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	021b      	lsls	r3, r3, #8
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	4313      	orrs	r3, r2
 8004508:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a22      	ldr	r2, [pc, #136]	; (8004598 <TIM_OC3_SetConfig+0xe4>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d003      	beq.n	800451a <TIM_OC3_SetConfig+0x66>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a21      	ldr	r2, [pc, #132]	; (800459c <TIM_OC3_SetConfig+0xe8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d10d      	bne.n	8004536 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004520:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	021b      	lsls	r3, r3, #8
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	4313      	orrs	r3, r2
 800452c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004534:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a17      	ldr	r2, [pc, #92]	; (8004598 <TIM_OC3_SetConfig+0xe4>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d003      	beq.n	8004546 <TIM_OC3_SetConfig+0x92>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a16      	ldr	r2, [pc, #88]	; (800459c <TIM_OC3_SetConfig+0xe8>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d113      	bne.n	800456e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800454c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	4313      	orrs	r3, r2
 8004560:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4313      	orrs	r3, r2
 800456c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	621a      	str	r2, [r3, #32]
}
 8004588:	bf00      	nop
 800458a:	371c      	adds	r7, #28
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	fffeff8f 	.word	0xfffeff8f
 8004598:	40010000 	.word	0x40010000
 800459c:	40010400 	.word	0x40010400

080045a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	4b1e      	ldr	r3, [pc, #120]	; (8004644 <TIM_OC4_SetConfig+0xa4>)
 80045cc:	4013      	ands	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	021b      	lsls	r3, r3, #8
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	031b      	lsls	r3, r3, #12
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a13      	ldr	r2, [pc, #76]	; (8004648 <TIM_OC4_SetConfig+0xa8>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d003      	beq.n	8004608 <TIM_OC4_SetConfig+0x68>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a12      	ldr	r2, [pc, #72]	; (800464c <TIM_OC4_SetConfig+0xac>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d109      	bne.n	800461c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800460e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	019b      	lsls	r3, r3, #6
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	4313      	orrs	r3, r2
 800461a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	621a      	str	r2, [r3, #32]
}
 8004636:	bf00      	nop
 8004638:	371c      	adds	r7, #28
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	feff8fff 	.word	0xfeff8fff
 8004648:	40010000 	.word	0x40010000
 800464c:	40010400 	.word	0x40010400

08004650 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004650:	b480      	push	{r7}
 8004652:	b087      	sub	sp, #28
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	4b1b      	ldr	r3, [pc, #108]	; (80046e8 <TIM_OC5_SetConfig+0x98>)
 800467c:	4013      	ands	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	4313      	orrs	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004690:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	041b      	lsls	r3, r3, #16
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	4313      	orrs	r3, r2
 800469c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a12      	ldr	r2, [pc, #72]	; (80046ec <TIM_OC5_SetConfig+0x9c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d003      	beq.n	80046ae <TIM_OC5_SetConfig+0x5e>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a11      	ldr	r2, [pc, #68]	; (80046f0 <TIM_OC5_SetConfig+0xa0>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d109      	bne.n	80046c2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	021b      	lsls	r3, r3, #8
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	4313      	orrs	r3, r2
 80046c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	621a      	str	r2, [r3, #32]
}
 80046dc:	bf00      	nop
 80046de:	371c      	adds	r7, #28
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	fffeff8f 	.word	0xfffeff8f
 80046ec:	40010000 	.word	0x40010000
 80046f0:	40010400 	.word	0x40010400

080046f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b087      	sub	sp, #28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	4b1c      	ldr	r3, [pc, #112]	; (8004790 <TIM_OC6_SetConfig+0x9c>)
 8004720:	4013      	ands	r3, r2
 8004722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	021b      	lsls	r3, r3, #8
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	4313      	orrs	r3, r2
 800472e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004736:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	051b      	lsls	r3, r3, #20
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	4313      	orrs	r3, r2
 8004742:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a13      	ldr	r2, [pc, #76]	; (8004794 <TIM_OC6_SetConfig+0xa0>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d003      	beq.n	8004754 <TIM_OC6_SetConfig+0x60>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a12      	ldr	r2, [pc, #72]	; (8004798 <TIM_OC6_SetConfig+0xa4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d109      	bne.n	8004768 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800475a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	029b      	lsls	r3, r3, #10
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	4313      	orrs	r3, r2
 8004766:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	621a      	str	r2, [r3, #32]
}
 8004782:	bf00      	nop
 8004784:	371c      	adds	r7, #28
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	feff8fff 	.word	0xfeff8fff
 8004794:	40010000 	.word	0x40010000
 8004798:	40010400 	.word	0x40010400

0800479c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800479c:	b480      	push	{r7}
 800479e:	b087      	sub	sp, #28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f003 031f 	and.w	r3, r3, #31
 80047ae:	2201      	movs	r2, #1
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6a1a      	ldr	r2, [r3, #32]
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	43db      	mvns	r3, r3
 80047be:	401a      	ands	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a1a      	ldr	r2, [r3, #32]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f003 031f 	and.w	r3, r3, #31
 80047ce:	6879      	ldr	r1, [r7, #4]
 80047d0:	fa01 f303 	lsl.w	r3, r1, r3
 80047d4:	431a      	orrs	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	621a      	str	r2, [r3, #32]
}
 80047da:	bf00      	nop
 80047dc:	371c      	adds	r7, #28
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
	...

080047e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d101      	bne.n	8004800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047fc:	2302      	movs	r3, #2
 80047fe:	e06d      	b.n	80048dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a30      	ldr	r2, [pc, #192]	; (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d004      	beq.n	8004834 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a2f      	ldr	r2, [pc, #188]	; (80048ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d108      	bne.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800483a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	4313      	orrs	r3, r2
 8004844:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800484c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	4313      	orrs	r3, r2
 8004856:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a20      	ldr	r2, [pc, #128]	; (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d022      	beq.n	80048b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004872:	d01d      	beq.n	80048b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a1d      	ldr	r2, [pc, #116]	; (80048f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d018      	beq.n	80048b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a1c      	ldr	r2, [pc, #112]	; (80048f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d013      	beq.n	80048b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a1a      	ldr	r2, [pc, #104]	; (80048f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d00e      	beq.n	80048b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a15      	ldr	r2, [pc, #84]	; (80048ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d009      	beq.n	80048b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a16      	ldr	r2, [pc, #88]	; (80048fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d004      	beq.n	80048b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a15      	ldr	r2, [pc, #84]	; (8004900 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d10c      	bne.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	40010000 	.word	0x40010000
 80048ec:	40010400 	.word	0x40010400
 80048f0:	40000400 	.word	0x40000400
 80048f4:	40000800 	.word	0x40000800
 80048f8:	40000c00 	.word	0x40000c00
 80048fc:	40014000 	.word	0x40014000
 8004900:	40001800 	.word	0x40001800

08004904 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e040      	b.n	8004998 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800491a:	2b00      	cmp	r3, #0
 800491c:	d106      	bne.n	800492c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7fc fc16 	bl	8001158 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2224      	movs	r2, #36	; 0x24
 8004930:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0201 	bic.w	r2, r2, #1
 8004940:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f82c 	bl	80049a0 <UART_SetConfig>
 8004948:	4603      	mov	r3, r0
 800494a:	2b01      	cmp	r3, #1
 800494c:	d101      	bne.n	8004952 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e022      	b.n	8004998 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 faca 	bl	8004ef4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800496e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689a      	ldr	r2, [r3, #8]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800497e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0201 	orr.w	r2, r2, #1
 800498e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 fb51 	bl	8005038 <UART_CheckIdleState>
 8004996:	4603      	mov	r3, r0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b088      	sub	sp, #32
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80049a8:	2300      	movs	r3, #0
 80049aa:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80049ac:	2300      	movs	r3, #0
 80049ae:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	431a      	orrs	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	431a      	orrs	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	4bb1      	ldr	r3, [pc, #708]	; (8004c94 <UART_SetConfig+0x2f4>)
 80049d0:	4013      	ands	r3, r2
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6812      	ldr	r2, [r2, #0]
 80049d6:	6939      	ldr	r1, [r7, #16]
 80049d8:	430b      	orrs	r3, r1
 80049da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a9f      	ldr	r2, [pc, #636]	; (8004c98 <UART_SetConfig+0x2f8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d121      	bne.n	8004a64 <UART_SetConfig+0xc4>
 8004a20:	4b9e      	ldr	r3, [pc, #632]	; (8004c9c <UART_SetConfig+0x2fc>)
 8004a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	2b03      	cmp	r3, #3
 8004a2c:	d816      	bhi.n	8004a5c <UART_SetConfig+0xbc>
 8004a2e:	a201      	add	r2, pc, #4	; (adr r2, 8004a34 <UART_SetConfig+0x94>)
 8004a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a34:	08004a45 	.word	0x08004a45
 8004a38:	08004a51 	.word	0x08004a51
 8004a3c:	08004a4b 	.word	0x08004a4b
 8004a40:	08004a57 	.word	0x08004a57
 8004a44:	2301      	movs	r3, #1
 8004a46:	77fb      	strb	r3, [r7, #31]
 8004a48:	e151      	b.n	8004cee <UART_SetConfig+0x34e>
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	77fb      	strb	r3, [r7, #31]
 8004a4e:	e14e      	b.n	8004cee <UART_SetConfig+0x34e>
 8004a50:	2304      	movs	r3, #4
 8004a52:	77fb      	strb	r3, [r7, #31]
 8004a54:	e14b      	b.n	8004cee <UART_SetConfig+0x34e>
 8004a56:	2308      	movs	r3, #8
 8004a58:	77fb      	strb	r3, [r7, #31]
 8004a5a:	e148      	b.n	8004cee <UART_SetConfig+0x34e>
 8004a5c:	2310      	movs	r3, #16
 8004a5e:	77fb      	strb	r3, [r7, #31]
 8004a60:	bf00      	nop
 8004a62:	e144      	b.n	8004cee <UART_SetConfig+0x34e>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a8d      	ldr	r2, [pc, #564]	; (8004ca0 <UART_SetConfig+0x300>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d134      	bne.n	8004ad8 <UART_SetConfig+0x138>
 8004a6e:	4b8b      	ldr	r3, [pc, #556]	; (8004c9c <UART_SetConfig+0x2fc>)
 8004a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a74:	f003 030c 	and.w	r3, r3, #12
 8004a78:	2b0c      	cmp	r3, #12
 8004a7a:	d829      	bhi.n	8004ad0 <UART_SetConfig+0x130>
 8004a7c:	a201      	add	r2, pc, #4	; (adr r2, 8004a84 <UART_SetConfig+0xe4>)
 8004a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a82:	bf00      	nop
 8004a84:	08004ab9 	.word	0x08004ab9
 8004a88:	08004ad1 	.word	0x08004ad1
 8004a8c:	08004ad1 	.word	0x08004ad1
 8004a90:	08004ad1 	.word	0x08004ad1
 8004a94:	08004ac5 	.word	0x08004ac5
 8004a98:	08004ad1 	.word	0x08004ad1
 8004a9c:	08004ad1 	.word	0x08004ad1
 8004aa0:	08004ad1 	.word	0x08004ad1
 8004aa4:	08004abf 	.word	0x08004abf
 8004aa8:	08004ad1 	.word	0x08004ad1
 8004aac:	08004ad1 	.word	0x08004ad1
 8004ab0:	08004ad1 	.word	0x08004ad1
 8004ab4:	08004acb 	.word	0x08004acb
 8004ab8:	2300      	movs	r3, #0
 8004aba:	77fb      	strb	r3, [r7, #31]
 8004abc:	e117      	b.n	8004cee <UART_SetConfig+0x34e>
 8004abe:	2302      	movs	r3, #2
 8004ac0:	77fb      	strb	r3, [r7, #31]
 8004ac2:	e114      	b.n	8004cee <UART_SetConfig+0x34e>
 8004ac4:	2304      	movs	r3, #4
 8004ac6:	77fb      	strb	r3, [r7, #31]
 8004ac8:	e111      	b.n	8004cee <UART_SetConfig+0x34e>
 8004aca:	2308      	movs	r3, #8
 8004acc:	77fb      	strb	r3, [r7, #31]
 8004ace:	e10e      	b.n	8004cee <UART_SetConfig+0x34e>
 8004ad0:	2310      	movs	r3, #16
 8004ad2:	77fb      	strb	r3, [r7, #31]
 8004ad4:	bf00      	nop
 8004ad6:	e10a      	b.n	8004cee <UART_SetConfig+0x34e>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a71      	ldr	r2, [pc, #452]	; (8004ca4 <UART_SetConfig+0x304>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d120      	bne.n	8004b24 <UART_SetConfig+0x184>
 8004ae2:	4b6e      	ldr	r3, [pc, #440]	; (8004c9c <UART_SetConfig+0x2fc>)
 8004ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004aec:	2b10      	cmp	r3, #16
 8004aee:	d00f      	beq.n	8004b10 <UART_SetConfig+0x170>
 8004af0:	2b10      	cmp	r3, #16
 8004af2:	d802      	bhi.n	8004afa <UART_SetConfig+0x15a>
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d005      	beq.n	8004b04 <UART_SetConfig+0x164>
 8004af8:	e010      	b.n	8004b1c <UART_SetConfig+0x17c>
 8004afa:	2b20      	cmp	r3, #32
 8004afc:	d005      	beq.n	8004b0a <UART_SetConfig+0x16a>
 8004afe:	2b30      	cmp	r3, #48	; 0x30
 8004b00:	d009      	beq.n	8004b16 <UART_SetConfig+0x176>
 8004b02:	e00b      	b.n	8004b1c <UART_SetConfig+0x17c>
 8004b04:	2300      	movs	r3, #0
 8004b06:	77fb      	strb	r3, [r7, #31]
 8004b08:	e0f1      	b.n	8004cee <UART_SetConfig+0x34e>
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	77fb      	strb	r3, [r7, #31]
 8004b0e:	e0ee      	b.n	8004cee <UART_SetConfig+0x34e>
 8004b10:	2304      	movs	r3, #4
 8004b12:	77fb      	strb	r3, [r7, #31]
 8004b14:	e0eb      	b.n	8004cee <UART_SetConfig+0x34e>
 8004b16:	2308      	movs	r3, #8
 8004b18:	77fb      	strb	r3, [r7, #31]
 8004b1a:	e0e8      	b.n	8004cee <UART_SetConfig+0x34e>
 8004b1c:	2310      	movs	r3, #16
 8004b1e:	77fb      	strb	r3, [r7, #31]
 8004b20:	bf00      	nop
 8004b22:	e0e4      	b.n	8004cee <UART_SetConfig+0x34e>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a5f      	ldr	r2, [pc, #380]	; (8004ca8 <UART_SetConfig+0x308>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d120      	bne.n	8004b70 <UART_SetConfig+0x1d0>
 8004b2e:	4b5b      	ldr	r3, [pc, #364]	; (8004c9c <UART_SetConfig+0x2fc>)
 8004b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b34:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b38:	2b40      	cmp	r3, #64	; 0x40
 8004b3a:	d00f      	beq.n	8004b5c <UART_SetConfig+0x1bc>
 8004b3c:	2b40      	cmp	r3, #64	; 0x40
 8004b3e:	d802      	bhi.n	8004b46 <UART_SetConfig+0x1a6>
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d005      	beq.n	8004b50 <UART_SetConfig+0x1b0>
 8004b44:	e010      	b.n	8004b68 <UART_SetConfig+0x1c8>
 8004b46:	2b80      	cmp	r3, #128	; 0x80
 8004b48:	d005      	beq.n	8004b56 <UART_SetConfig+0x1b6>
 8004b4a:	2bc0      	cmp	r3, #192	; 0xc0
 8004b4c:	d009      	beq.n	8004b62 <UART_SetConfig+0x1c2>
 8004b4e:	e00b      	b.n	8004b68 <UART_SetConfig+0x1c8>
 8004b50:	2300      	movs	r3, #0
 8004b52:	77fb      	strb	r3, [r7, #31]
 8004b54:	e0cb      	b.n	8004cee <UART_SetConfig+0x34e>
 8004b56:	2302      	movs	r3, #2
 8004b58:	77fb      	strb	r3, [r7, #31]
 8004b5a:	e0c8      	b.n	8004cee <UART_SetConfig+0x34e>
 8004b5c:	2304      	movs	r3, #4
 8004b5e:	77fb      	strb	r3, [r7, #31]
 8004b60:	e0c5      	b.n	8004cee <UART_SetConfig+0x34e>
 8004b62:	2308      	movs	r3, #8
 8004b64:	77fb      	strb	r3, [r7, #31]
 8004b66:	e0c2      	b.n	8004cee <UART_SetConfig+0x34e>
 8004b68:	2310      	movs	r3, #16
 8004b6a:	77fb      	strb	r3, [r7, #31]
 8004b6c:	bf00      	nop
 8004b6e:	e0be      	b.n	8004cee <UART_SetConfig+0x34e>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a4d      	ldr	r2, [pc, #308]	; (8004cac <UART_SetConfig+0x30c>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d124      	bne.n	8004bc4 <UART_SetConfig+0x224>
 8004b7a:	4b48      	ldr	r3, [pc, #288]	; (8004c9c <UART_SetConfig+0x2fc>)
 8004b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b88:	d012      	beq.n	8004bb0 <UART_SetConfig+0x210>
 8004b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b8e:	d802      	bhi.n	8004b96 <UART_SetConfig+0x1f6>
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d007      	beq.n	8004ba4 <UART_SetConfig+0x204>
 8004b94:	e012      	b.n	8004bbc <UART_SetConfig+0x21c>
 8004b96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b9a:	d006      	beq.n	8004baa <UART_SetConfig+0x20a>
 8004b9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ba0:	d009      	beq.n	8004bb6 <UART_SetConfig+0x216>
 8004ba2:	e00b      	b.n	8004bbc <UART_SetConfig+0x21c>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	77fb      	strb	r3, [r7, #31]
 8004ba8:	e0a1      	b.n	8004cee <UART_SetConfig+0x34e>
 8004baa:	2302      	movs	r3, #2
 8004bac:	77fb      	strb	r3, [r7, #31]
 8004bae:	e09e      	b.n	8004cee <UART_SetConfig+0x34e>
 8004bb0:	2304      	movs	r3, #4
 8004bb2:	77fb      	strb	r3, [r7, #31]
 8004bb4:	e09b      	b.n	8004cee <UART_SetConfig+0x34e>
 8004bb6:	2308      	movs	r3, #8
 8004bb8:	77fb      	strb	r3, [r7, #31]
 8004bba:	e098      	b.n	8004cee <UART_SetConfig+0x34e>
 8004bbc:	2310      	movs	r3, #16
 8004bbe:	77fb      	strb	r3, [r7, #31]
 8004bc0:	bf00      	nop
 8004bc2:	e094      	b.n	8004cee <UART_SetConfig+0x34e>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a39      	ldr	r2, [pc, #228]	; (8004cb0 <UART_SetConfig+0x310>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d124      	bne.n	8004c18 <UART_SetConfig+0x278>
 8004bce:	4b33      	ldr	r3, [pc, #204]	; (8004c9c <UART_SetConfig+0x2fc>)
 8004bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bdc:	d012      	beq.n	8004c04 <UART_SetConfig+0x264>
 8004bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004be2:	d802      	bhi.n	8004bea <UART_SetConfig+0x24a>
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d007      	beq.n	8004bf8 <UART_SetConfig+0x258>
 8004be8:	e012      	b.n	8004c10 <UART_SetConfig+0x270>
 8004bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bee:	d006      	beq.n	8004bfe <UART_SetConfig+0x25e>
 8004bf0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bf4:	d009      	beq.n	8004c0a <UART_SetConfig+0x26a>
 8004bf6:	e00b      	b.n	8004c10 <UART_SetConfig+0x270>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	77fb      	strb	r3, [r7, #31]
 8004bfc:	e077      	b.n	8004cee <UART_SetConfig+0x34e>
 8004bfe:	2302      	movs	r3, #2
 8004c00:	77fb      	strb	r3, [r7, #31]
 8004c02:	e074      	b.n	8004cee <UART_SetConfig+0x34e>
 8004c04:	2304      	movs	r3, #4
 8004c06:	77fb      	strb	r3, [r7, #31]
 8004c08:	e071      	b.n	8004cee <UART_SetConfig+0x34e>
 8004c0a:	2308      	movs	r3, #8
 8004c0c:	77fb      	strb	r3, [r7, #31]
 8004c0e:	e06e      	b.n	8004cee <UART_SetConfig+0x34e>
 8004c10:	2310      	movs	r3, #16
 8004c12:	77fb      	strb	r3, [r7, #31]
 8004c14:	bf00      	nop
 8004c16:	e06a      	b.n	8004cee <UART_SetConfig+0x34e>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a25      	ldr	r2, [pc, #148]	; (8004cb4 <UART_SetConfig+0x314>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d124      	bne.n	8004c6c <UART_SetConfig+0x2cc>
 8004c22:	4b1e      	ldr	r3, [pc, #120]	; (8004c9c <UART_SetConfig+0x2fc>)
 8004c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c28:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c30:	d012      	beq.n	8004c58 <UART_SetConfig+0x2b8>
 8004c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c36:	d802      	bhi.n	8004c3e <UART_SetConfig+0x29e>
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d007      	beq.n	8004c4c <UART_SetConfig+0x2ac>
 8004c3c:	e012      	b.n	8004c64 <UART_SetConfig+0x2c4>
 8004c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c42:	d006      	beq.n	8004c52 <UART_SetConfig+0x2b2>
 8004c44:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c48:	d009      	beq.n	8004c5e <UART_SetConfig+0x2be>
 8004c4a:	e00b      	b.n	8004c64 <UART_SetConfig+0x2c4>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	77fb      	strb	r3, [r7, #31]
 8004c50:	e04d      	b.n	8004cee <UART_SetConfig+0x34e>
 8004c52:	2302      	movs	r3, #2
 8004c54:	77fb      	strb	r3, [r7, #31]
 8004c56:	e04a      	b.n	8004cee <UART_SetConfig+0x34e>
 8004c58:	2304      	movs	r3, #4
 8004c5a:	77fb      	strb	r3, [r7, #31]
 8004c5c:	e047      	b.n	8004cee <UART_SetConfig+0x34e>
 8004c5e:	2308      	movs	r3, #8
 8004c60:	77fb      	strb	r3, [r7, #31]
 8004c62:	e044      	b.n	8004cee <UART_SetConfig+0x34e>
 8004c64:	2310      	movs	r3, #16
 8004c66:	77fb      	strb	r3, [r7, #31]
 8004c68:	bf00      	nop
 8004c6a:	e040      	b.n	8004cee <UART_SetConfig+0x34e>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a11      	ldr	r2, [pc, #68]	; (8004cb8 <UART_SetConfig+0x318>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d139      	bne.n	8004cea <UART_SetConfig+0x34a>
 8004c76:	4b09      	ldr	r3, [pc, #36]	; (8004c9c <UART_SetConfig+0x2fc>)
 8004c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c84:	d027      	beq.n	8004cd6 <UART_SetConfig+0x336>
 8004c86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c8a:	d817      	bhi.n	8004cbc <UART_SetConfig+0x31c>
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d01c      	beq.n	8004cca <UART_SetConfig+0x32a>
 8004c90:	e027      	b.n	8004ce2 <UART_SetConfig+0x342>
 8004c92:	bf00      	nop
 8004c94:	efff69f3 	.word	0xefff69f3
 8004c98:	40011000 	.word	0x40011000
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	40004400 	.word	0x40004400
 8004ca4:	40004800 	.word	0x40004800
 8004ca8:	40004c00 	.word	0x40004c00
 8004cac:	40005000 	.word	0x40005000
 8004cb0:	40011400 	.word	0x40011400
 8004cb4:	40007800 	.word	0x40007800
 8004cb8:	40007c00 	.word	0x40007c00
 8004cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cc0:	d006      	beq.n	8004cd0 <UART_SetConfig+0x330>
 8004cc2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004cc6:	d009      	beq.n	8004cdc <UART_SetConfig+0x33c>
 8004cc8:	e00b      	b.n	8004ce2 <UART_SetConfig+0x342>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	77fb      	strb	r3, [r7, #31]
 8004cce:	e00e      	b.n	8004cee <UART_SetConfig+0x34e>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	77fb      	strb	r3, [r7, #31]
 8004cd4:	e00b      	b.n	8004cee <UART_SetConfig+0x34e>
 8004cd6:	2304      	movs	r3, #4
 8004cd8:	77fb      	strb	r3, [r7, #31]
 8004cda:	e008      	b.n	8004cee <UART_SetConfig+0x34e>
 8004cdc:	2308      	movs	r3, #8
 8004cde:	77fb      	strb	r3, [r7, #31]
 8004ce0:	e005      	b.n	8004cee <UART_SetConfig+0x34e>
 8004ce2:	2310      	movs	r3, #16
 8004ce4:	77fb      	strb	r3, [r7, #31]
 8004ce6:	bf00      	nop
 8004ce8:	e001      	b.n	8004cee <UART_SetConfig+0x34e>
 8004cea:	2310      	movs	r3, #16
 8004cec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cf6:	d17f      	bne.n	8004df8 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8004cf8:	7ffb      	ldrb	r3, [r7, #31]
 8004cfa:	2b08      	cmp	r3, #8
 8004cfc:	d85c      	bhi.n	8004db8 <UART_SetConfig+0x418>
 8004cfe:	a201      	add	r2, pc, #4	; (adr r2, 8004d04 <UART_SetConfig+0x364>)
 8004d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d04:	08004d29 	.word	0x08004d29
 8004d08:	08004d49 	.word	0x08004d49
 8004d0c:	08004d69 	.word	0x08004d69
 8004d10:	08004db9 	.word	0x08004db9
 8004d14:	08004d81 	.word	0x08004d81
 8004d18:	08004db9 	.word	0x08004db9
 8004d1c:	08004db9 	.word	0x08004db9
 8004d20:	08004db9 	.word	0x08004db9
 8004d24:	08004da1 	.word	0x08004da1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d28:	f7fe fd42 	bl	80037b0 <HAL_RCC_GetPCLK1Freq>
 8004d2c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	005a      	lsls	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	085b      	lsrs	r3, r3, #1
 8004d38:	441a      	add	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	61bb      	str	r3, [r7, #24]
        break;
 8004d46:	e03a      	b.n	8004dbe <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d48:	f7fe fd46 	bl	80037d8 <HAL_RCC_GetPCLK2Freq>
 8004d4c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	005a      	lsls	r2, r3, #1
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	085b      	lsrs	r3, r3, #1
 8004d58:	441a      	add	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	61bb      	str	r3, [r7, #24]
        break;
 8004d66:	e02a      	b.n	8004dbe <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	085a      	lsrs	r2, r3, #1
 8004d6e:	4b5f      	ldr	r3, [pc, #380]	; (8004eec <UART_SetConfig+0x54c>)
 8004d70:	4413      	add	r3, r2
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6852      	ldr	r2, [r2, #4]
 8004d76:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	61bb      	str	r3, [r7, #24]
        break;
 8004d7e:	e01e      	b.n	8004dbe <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d80:	f7fe fc32 	bl	80035e8 <HAL_RCC_GetSysClockFreq>
 8004d84:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	005a      	lsls	r2, r3, #1
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	085b      	lsrs	r3, r3, #1
 8004d90:	441a      	add	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	61bb      	str	r3, [r7, #24]
        break;
 8004d9e:	e00e      	b.n	8004dbe <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	085b      	lsrs	r3, r3, #1
 8004da6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	61bb      	str	r3, [r7, #24]
        break;
 8004db6:	e002      	b.n	8004dbe <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	75fb      	strb	r3, [r7, #23]
        break;
 8004dbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	2b0f      	cmp	r3, #15
 8004dc2:	d916      	bls.n	8004df2 <UART_SetConfig+0x452>
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dca:	d212      	bcs.n	8004df2 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	f023 030f 	bic.w	r3, r3, #15
 8004dd4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	085b      	lsrs	r3, r3, #1
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	897b      	ldrh	r3, [r7, #10]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	897a      	ldrh	r2, [r7, #10]
 8004dee:	60da      	str	r2, [r3, #12]
 8004df0:	e070      	b.n	8004ed4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	75fb      	strb	r3, [r7, #23]
 8004df6:	e06d      	b.n	8004ed4 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8004df8:	7ffb      	ldrb	r3, [r7, #31]
 8004dfa:	2b08      	cmp	r3, #8
 8004dfc:	d859      	bhi.n	8004eb2 <UART_SetConfig+0x512>
 8004dfe:	a201      	add	r2, pc, #4	; (adr r2, 8004e04 <UART_SetConfig+0x464>)
 8004e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e04:	08004e29 	.word	0x08004e29
 8004e08:	08004e47 	.word	0x08004e47
 8004e0c:	08004e65 	.word	0x08004e65
 8004e10:	08004eb3 	.word	0x08004eb3
 8004e14:	08004e7d 	.word	0x08004e7d
 8004e18:	08004eb3 	.word	0x08004eb3
 8004e1c:	08004eb3 	.word	0x08004eb3
 8004e20:	08004eb3 	.word	0x08004eb3
 8004e24:	08004e9b 	.word	0x08004e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e28:	f7fe fcc2 	bl	80037b0 <HAL_RCC_GetPCLK1Freq>
 8004e2c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	085a      	lsrs	r2, r3, #1
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	441a      	add	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	61bb      	str	r3, [r7, #24]
        break;
 8004e44:	e038      	b.n	8004eb8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e46:	f7fe fcc7 	bl	80037d8 <HAL_RCC_GetPCLK2Freq>
 8004e4a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	085a      	lsrs	r2, r3, #1
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	441a      	add	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	61bb      	str	r3, [r7, #24]
        break;
 8004e62:	e029      	b.n	8004eb8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	085a      	lsrs	r2, r3, #1
 8004e6a:	4b21      	ldr	r3, [pc, #132]	; (8004ef0 <UART_SetConfig+0x550>)
 8004e6c:	4413      	add	r3, r2
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	6852      	ldr	r2, [r2, #4]
 8004e72:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	61bb      	str	r3, [r7, #24]
        break;
 8004e7a:	e01d      	b.n	8004eb8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e7c:	f7fe fbb4 	bl	80035e8 <HAL_RCC_GetSysClockFreq>
 8004e80:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	085a      	lsrs	r2, r3, #1
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	441a      	add	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	61bb      	str	r3, [r7, #24]
        break;
 8004e98:	e00e      	b.n	8004eb8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	085b      	lsrs	r3, r3, #1
 8004ea0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	61bb      	str	r3, [r7, #24]
        break;
 8004eb0:	e002      	b.n	8004eb8 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	75fb      	strb	r3, [r7, #23]
        break;
 8004eb6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	2b0f      	cmp	r3, #15
 8004ebc:	d908      	bls.n	8004ed0 <UART_SetConfig+0x530>
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec4:	d204      	bcs.n	8004ed0 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	60da      	str	r2, [r3, #12]
 8004ece:	e001      	b.n	8004ed4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3720      	adds	r7, #32
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	01e84800 	.word	0x01e84800
 8004ef0:	00f42400 	.word	0x00f42400

08004ef4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00a      	beq.n	8004f1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00a      	beq.n	8004f62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	f003 0308 	and.w	r3, r3, #8
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00a      	beq.n	8004f84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	f003 0310 	and.w	r3, r3, #16
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00a      	beq.n	8004fa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	f003 0320 	and.w	r3, r3, #32
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d01a      	beq.n	800500a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ff2:	d10a      	bne.n	800500a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	430a      	orrs	r2, r1
 800502a:	605a      	str	r2, [r3, #4]
  }
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af02      	add	r7, sp, #8
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005046:	f7fc fa2f 	bl	80014a8 <HAL_GetTick>
 800504a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0308 	and.w	r3, r3, #8
 8005056:	2b08      	cmp	r3, #8
 8005058:	d10e      	bne.n	8005078 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800505a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 f814 	bl	8005096 <UART_WaitOnFlagUntilTimeout>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e00a      	b.n	800508e <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2220      	movs	r2, #32
 800507c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2220      	movs	r2, #32
 8005082:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b084      	sub	sp, #16
 800509a:	af00      	add	r7, sp, #0
 800509c:	60f8      	str	r0, [r7, #12]
 800509e:	60b9      	str	r1, [r7, #8]
 80050a0:	603b      	str	r3, [r7, #0]
 80050a2:	4613      	mov	r3, r2
 80050a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050a6:	e05d      	b.n	8005164 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ae:	d059      	beq.n	8005164 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050b0:	f7fc f9fa 	bl	80014a8 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d302      	bcc.n	80050c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d11b      	bne.n	80050fe <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050d4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0201 	bic.w	r2, r2, #1
 80050e4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2220      	movs	r2, #32
 80050ea:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2220      	movs	r2, #32
 80050f0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e042      	b.n	8005184 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	d02b      	beq.n	8005164 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005116:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800511a:	d123      	bne.n	8005164 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005124:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005134:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 0201 	bic.w	r2, r2, #1
 8005144:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2220      	movs	r2, #32
 800514a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2220      	movs	r2, #32
 8005150:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2220      	movs	r2, #32
 8005156:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e00f      	b.n	8005184 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	69da      	ldr	r2, [r3, #28]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	4013      	ands	r3, r2
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	429a      	cmp	r2, r3
 8005172:	bf0c      	ite	eq
 8005174:	2301      	moveq	r3, #1
 8005176:	2300      	movne	r3, #0
 8005178:	b2db      	uxtb	r3, r3
 800517a:	461a      	mov	r2, r3
 800517c:	79fb      	ldrb	r3, [r7, #7]
 800517e:	429a      	cmp	r2, r3
 8005180:	d092      	beq.n	80050a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800518c:	b084      	sub	sp, #16
 800518e:	b580      	push	{r7, lr}
 8005190:	b084      	sub	sp, #16
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
 8005196:	f107 001c 	add.w	r0, r7, #28
 800519a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800519e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d126      	bne.n	80051f2 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68da      	ldr	r2, [r3, #12]
 80051b4:	4b23      	ldr	r3, [pc, #140]	; (8005244 <USB_CoreInit+0xb8>)
 80051b6:	4013      	ands	r3, r2
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f043 0210 	orr.w	r2, r3, #16
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80051d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d105      	bne.n	80051e6 <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fa52 	bl	8005690 <USB_CoreReset>
 80051ec:	4603      	mov	r3, r0
 80051ee:	73fb      	strb	r3, [r7, #15]
 80051f0:	e010      	b.n	8005214 <USB_CoreInit+0x88>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fa46 	bl	8005690 <USB_CoreReset>
 8005204:	4603      	mov	r3, r0
 8005206:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005216:	2b01      	cmp	r3, #1
 8005218:	d10b      	bne.n	8005232 <USB_CoreInit+0xa6>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f043 0206 	orr.w	r2, r3, #6
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f043 0220 	orr.w	r2, r3, #32
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005232:	7bfb      	ldrb	r3, [r7, #15]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800523e:	b004      	add	sp, #16
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	ffbdffbf 	.word	0xffbdffbf

08005248 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f023 0201 	bic.w	r2, r3, #1
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b082      	sub	sp, #8
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	460b      	mov	r3, r1
 8005274:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005282:	78fb      	ldrb	r3, [r7, #3]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d106      	bne.n	8005296 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	60da      	str	r2, [r3, #12]
 8005294:	e00b      	b.n	80052ae <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005296:	78fb      	ldrb	r3, [r7, #3]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d106      	bne.n	80052aa <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	60da      	str	r2, [r3, #12]
 80052a8:	e001      	b.n	80052ae <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e003      	b.n	80052b6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80052ae:	2032      	movs	r0, #50	; 0x32
 80052b0:	f7fc f906 	bl	80014c0 <HAL_Delay>

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
	...

080052c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052c0:	b084      	sub	sp, #16
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b086      	sub	sp, #24
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80052ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80052da:	2300      	movs	r3, #0
 80052dc:	613b      	str	r3, [r7, #16]
 80052de:	e009      	b.n	80052f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	3340      	adds	r3, #64	; 0x40
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	2200      	movs	r2, #0
 80052ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	3301      	adds	r3, #1
 80052f2:	613b      	str	r3, [r7, #16]
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	2b0e      	cmp	r3, #14
 80052f8:	d9f2      	bls.n	80052e0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80052fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d11c      	bne.n	800533a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800530e:	f043 0302 	orr.w	r3, r3, #2
 8005312:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005318:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	e005      	b.n	8005346 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800534c:	461a      	mov	r2, r3
 800534e:	2300      	movs	r3, #0
 8005350:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005358:	4619      	mov	r1, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005360:	461a      	mov	r2, r3
 8005362:	680b      	ldr	r3, [r1, #0]
 8005364:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005368:	2b01      	cmp	r3, #1
 800536a:	d10c      	bne.n	8005386 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800536c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536e:	2b00      	cmp	r3, #0
 8005370:	d104      	bne.n	800537c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005372:	2100      	movs	r1, #0
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f959 	bl	800562c <USB_SetDevSpeed>
 800537a:	e018      	b.n	80053ae <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800537c:	2101      	movs	r1, #1
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f954 	bl	800562c <USB_SetDevSpeed>
 8005384:	e013      	b.n	80053ae <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005388:	2b03      	cmp	r3, #3
 800538a:	d10c      	bne.n	80053a6 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800538c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538e:	2b00      	cmp	r3, #0
 8005390:	d104      	bne.n	800539c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005392:	2100      	movs	r1, #0
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 f949 	bl	800562c <USB_SetDevSpeed>
 800539a:	e008      	b.n	80053ae <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800539c:	2101      	movs	r1, #1
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f944 	bl	800562c <USB_SetDevSpeed>
 80053a4:	e003      	b.n	80053ae <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80053a6:	2103      	movs	r1, #3
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f93f 	bl	800562c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053ae:	2110      	movs	r1, #16
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f8f3 	bl	800559c <USB_FlushTxFifo>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 f911 	bl	80055e8 <USB_FlushRxFifo>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d001      	beq.n	80053d0 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d6:	461a      	mov	r2, r3
 80053d8:	2300      	movs	r3, #0
 80053da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e2:	461a      	mov	r2, r3
 80053e4:	2300      	movs	r3, #0
 80053e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ee:	461a      	mov	r2, r3
 80053f0:	2300      	movs	r3, #0
 80053f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053f4:	2300      	movs	r3, #0
 80053f6:	613b      	str	r3, [r7, #16]
 80053f8:	e043      	b.n	8005482 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	015a      	lsls	r2, r3, #5
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	4413      	add	r3, r2
 8005402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800540c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005410:	d118      	bne.n	8005444 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10a      	bne.n	800542e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4413      	add	r3, r2
 8005420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005424:	461a      	mov	r2, r3
 8005426:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800542a:	6013      	str	r3, [r2, #0]
 800542c:	e013      	b.n	8005456 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4413      	add	r3, r2
 8005436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543a:	461a      	mov	r2, r3
 800543c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	e008      	b.n	8005456 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4413      	add	r3, r2
 800544c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005450:	461a      	mov	r2, r3
 8005452:	2300      	movs	r3, #0
 8005454:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	4413      	add	r3, r2
 800545e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005462:	461a      	mov	r2, r3
 8005464:	2300      	movs	r3, #0
 8005466:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	015a      	lsls	r2, r3, #5
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	4413      	add	r3, r2
 8005470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005474:	461a      	mov	r2, r3
 8005476:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800547a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	3301      	adds	r3, #1
 8005480:	613b      	str	r3, [r7, #16]
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	429a      	cmp	r2, r3
 8005488:	d3b7      	bcc.n	80053fa <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800548a:	2300      	movs	r3, #0
 800548c:	613b      	str	r3, [r7, #16]
 800548e:	e043      	b.n	8005518 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4413      	add	r3, r2
 8005498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054a6:	d118      	bne.n	80054da <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10a      	bne.n	80054c4 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ba:	461a      	mov	r2, r3
 80054bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	e013      	b.n	80054ec <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	015a      	lsls	r2, r3, #5
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4413      	add	r3, r2
 80054cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d0:	461a      	mov	r2, r3
 80054d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054d6:	6013      	str	r3, [r2, #0]
 80054d8:	e008      	b.n	80054ec <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e6:	461a      	mov	r2, r3
 80054e8:	2300      	movs	r3, #0
 80054ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f8:	461a      	mov	r2, r3
 80054fa:	2300      	movs	r3, #0
 80054fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	015a      	lsls	r2, r3, #5
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	4413      	add	r3, r2
 8005506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550a:	461a      	mov	r2, r3
 800550c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005510:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	3301      	adds	r3, #1
 8005516:	613b      	str	r3, [r7, #16]
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	429a      	cmp	r2, r3
 800551e:	d3b7      	bcc.n	8005490 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800552e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005532:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005540:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005544:	2b00      	cmp	r3, #0
 8005546:	d105      	bne.n	8005554 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	f043 0210 	orr.w	r2, r3, #16
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	699a      	ldr	r2, [r3, #24]
 8005558:	4b0e      	ldr	r3, [pc, #56]	; (8005594 <USB_DevInit+0x2d4>)
 800555a:	4313      	orrs	r3, r2
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005562:	2b00      	cmp	r3, #0
 8005564:	d005      	beq.n	8005572 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	f043 0208 	orr.w	r2, r3, #8
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005574:	2b01      	cmp	r3, #1
 8005576:	d105      	bne.n	8005584 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	699a      	ldr	r2, [r3, #24]
 800557c:	4b06      	ldr	r3, [pc, #24]	; (8005598 <USB_DevInit+0x2d8>)
 800557e:	4313      	orrs	r3, r2
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005584:	7dfb      	ldrb	r3, [r7, #23]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3718      	adds	r7, #24
 800558a:	46bd      	mov	sp, r7
 800558c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005590:	b004      	add	sp, #16
 8005592:	4770      	bx	lr
 8005594:	803c3800 	.word	0x803c3800
 8005598:	40000004 	.word	0x40000004

0800559c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80055a6:	2300      	movs	r3, #0
 80055a8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	019b      	lsls	r3, r3, #6
 80055ae:	f043 0220 	orr.w	r2, r3, #32
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	3301      	adds	r3, #1
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4a09      	ldr	r2, [pc, #36]	; (80055e4 <USB_FlushTxFifo+0x48>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d901      	bls.n	80055c8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e006      	b.n	80055d6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	f003 0320 	and.w	r3, r3, #32
 80055d0:	2b20      	cmp	r3, #32
 80055d2:	d0f0      	beq.n	80055b6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	00030d40 	.word	0x00030d40

080055e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80055f0:	2300      	movs	r3, #0
 80055f2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2210      	movs	r2, #16
 80055f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	3301      	adds	r3, #1
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4a09      	ldr	r2, [pc, #36]	; (8005628 <USB_FlushRxFifo+0x40>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d901      	bls.n	800560c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e006      	b.n	800561a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	f003 0310 	and.w	r3, r3, #16
 8005614:	2b10      	cmp	r3, #16
 8005616:	d0f0      	beq.n	80055fa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	00030d40 	.word	0x00030d40

0800562c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	460b      	mov	r3, r1
 8005636:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	78fb      	ldrb	r3, [r7, #3]
 8005646:	68f9      	ldr	r1, [r7, #12]
 8005648:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800564c:	4313      	orrs	r3, r2
 800564e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b084      	sub	sp, #16
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005678:	f043 0302 	orr.w	r3, r3, #2
 800567c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800567e:	2003      	movs	r0, #3
 8005680:	f7fb ff1e 	bl	80014c0 <HAL_Delay>

  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
	...

08005690 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005698:	2300      	movs	r3, #0
 800569a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	3301      	adds	r3, #1
 80056a0:	60fb      	str	r3, [r7, #12]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	4a13      	ldr	r2, [pc, #76]	; (80056f4 <USB_CoreReset+0x64>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d901      	bls.n	80056ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e01b      	b.n	80056e6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	daf2      	bge.n	800569c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80056b6:	2300      	movs	r3, #0
 80056b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	f043 0201 	orr.w	r2, r3, #1
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	3301      	adds	r3, #1
 80056ca:	60fb      	str	r3, [r7, #12]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	4a09      	ldr	r2, [pc, #36]	; (80056f4 <USB_CoreReset+0x64>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d901      	bls.n	80056d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e006      	b.n	80056e6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	f003 0301 	and.w	r3, r3, #1
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d0f0      	beq.n	80056c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	00030d40 	.word	0x00030d40

080056f8 <__errno>:
 80056f8:	4b01      	ldr	r3, [pc, #4]	; (8005700 <__errno+0x8>)
 80056fa:	6818      	ldr	r0, [r3, #0]
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	2000000c 	.word	0x2000000c

08005704 <__libc_init_array>:
 8005704:	b570      	push	{r4, r5, r6, lr}
 8005706:	4e0d      	ldr	r6, [pc, #52]	; (800573c <__libc_init_array+0x38>)
 8005708:	4c0d      	ldr	r4, [pc, #52]	; (8005740 <__libc_init_array+0x3c>)
 800570a:	1ba4      	subs	r4, r4, r6
 800570c:	10a4      	asrs	r4, r4, #2
 800570e:	2500      	movs	r5, #0
 8005710:	42a5      	cmp	r5, r4
 8005712:	d109      	bne.n	8005728 <__libc_init_array+0x24>
 8005714:	4e0b      	ldr	r6, [pc, #44]	; (8005744 <__libc_init_array+0x40>)
 8005716:	4c0c      	ldr	r4, [pc, #48]	; (8005748 <__libc_init_array+0x44>)
 8005718:	f000 f894 	bl	8005844 <_init>
 800571c:	1ba4      	subs	r4, r4, r6
 800571e:	10a4      	asrs	r4, r4, #2
 8005720:	2500      	movs	r5, #0
 8005722:	42a5      	cmp	r5, r4
 8005724:	d105      	bne.n	8005732 <__libc_init_array+0x2e>
 8005726:	bd70      	pop	{r4, r5, r6, pc}
 8005728:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800572c:	4798      	blx	r3
 800572e:	3501      	adds	r5, #1
 8005730:	e7ee      	b.n	8005710 <__libc_init_array+0xc>
 8005732:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005736:	4798      	blx	r3
 8005738:	3501      	adds	r5, #1
 800573a:	e7f2      	b.n	8005722 <__libc_init_array+0x1e>
 800573c:	08005884 	.word	0x08005884
 8005740:	08005884 	.word	0x08005884
 8005744:	08005884 	.word	0x08005884
 8005748:	08005888 	.word	0x08005888

0800574c <malloc>:
 800574c:	4b02      	ldr	r3, [pc, #8]	; (8005758 <malloc+0xc>)
 800574e:	4601      	mov	r1, r0
 8005750:	6818      	ldr	r0, [r3, #0]
 8005752:	f000 b80b 	b.w	800576c <_malloc_r>
 8005756:	bf00      	nop
 8005758:	2000000c 	.word	0x2000000c

0800575c <memset>:
 800575c:	4402      	add	r2, r0
 800575e:	4603      	mov	r3, r0
 8005760:	4293      	cmp	r3, r2
 8005762:	d100      	bne.n	8005766 <memset+0xa>
 8005764:	4770      	bx	lr
 8005766:	f803 1b01 	strb.w	r1, [r3], #1
 800576a:	e7f9      	b.n	8005760 <memset+0x4>

0800576c <_malloc_r>:
 800576c:	b570      	push	{r4, r5, r6, lr}
 800576e:	1ccd      	adds	r5, r1, #3
 8005770:	f025 0503 	bic.w	r5, r5, #3
 8005774:	3508      	adds	r5, #8
 8005776:	2d0c      	cmp	r5, #12
 8005778:	bf38      	it	cc
 800577a:	250c      	movcc	r5, #12
 800577c:	2d00      	cmp	r5, #0
 800577e:	4606      	mov	r6, r0
 8005780:	db01      	blt.n	8005786 <_malloc_r+0x1a>
 8005782:	42a9      	cmp	r1, r5
 8005784:	d903      	bls.n	800578e <_malloc_r+0x22>
 8005786:	230c      	movs	r3, #12
 8005788:	6033      	str	r3, [r6, #0]
 800578a:	2000      	movs	r0, #0
 800578c:	bd70      	pop	{r4, r5, r6, pc}
 800578e:	f000 f857 	bl	8005840 <__malloc_lock>
 8005792:	4a21      	ldr	r2, [pc, #132]	; (8005818 <_malloc_r+0xac>)
 8005794:	6814      	ldr	r4, [r2, #0]
 8005796:	4621      	mov	r1, r4
 8005798:	b991      	cbnz	r1, 80057c0 <_malloc_r+0x54>
 800579a:	4c20      	ldr	r4, [pc, #128]	; (800581c <_malloc_r+0xb0>)
 800579c:	6823      	ldr	r3, [r4, #0]
 800579e:	b91b      	cbnz	r3, 80057a8 <_malloc_r+0x3c>
 80057a0:	4630      	mov	r0, r6
 80057a2:	f000 f83d 	bl	8005820 <_sbrk_r>
 80057a6:	6020      	str	r0, [r4, #0]
 80057a8:	4629      	mov	r1, r5
 80057aa:	4630      	mov	r0, r6
 80057ac:	f000 f838 	bl	8005820 <_sbrk_r>
 80057b0:	1c43      	adds	r3, r0, #1
 80057b2:	d124      	bne.n	80057fe <_malloc_r+0x92>
 80057b4:	230c      	movs	r3, #12
 80057b6:	6033      	str	r3, [r6, #0]
 80057b8:	4630      	mov	r0, r6
 80057ba:	f000 f842 	bl	8005842 <__malloc_unlock>
 80057be:	e7e4      	b.n	800578a <_malloc_r+0x1e>
 80057c0:	680b      	ldr	r3, [r1, #0]
 80057c2:	1b5b      	subs	r3, r3, r5
 80057c4:	d418      	bmi.n	80057f8 <_malloc_r+0x8c>
 80057c6:	2b0b      	cmp	r3, #11
 80057c8:	d90f      	bls.n	80057ea <_malloc_r+0x7e>
 80057ca:	600b      	str	r3, [r1, #0]
 80057cc:	50cd      	str	r5, [r1, r3]
 80057ce:	18cc      	adds	r4, r1, r3
 80057d0:	4630      	mov	r0, r6
 80057d2:	f000 f836 	bl	8005842 <__malloc_unlock>
 80057d6:	f104 000b 	add.w	r0, r4, #11
 80057da:	1d23      	adds	r3, r4, #4
 80057dc:	f020 0007 	bic.w	r0, r0, #7
 80057e0:	1ac3      	subs	r3, r0, r3
 80057e2:	d0d3      	beq.n	800578c <_malloc_r+0x20>
 80057e4:	425a      	negs	r2, r3
 80057e6:	50e2      	str	r2, [r4, r3]
 80057e8:	e7d0      	b.n	800578c <_malloc_r+0x20>
 80057ea:	428c      	cmp	r4, r1
 80057ec:	684b      	ldr	r3, [r1, #4]
 80057ee:	bf16      	itet	ne
 80057f0:	6063      	strne	r3, [r4, #4]
 80057f2:	6013      	streq	r3, [r2, #0]
 80057f4:	460c      	movne	r4, r1
 80057f6:	e7eb      	b.n	80057d0 <_malloc_r+0x64>
 80057f8:	460c      	mov	r4, r1
 80057fa:	6849      	ldr	r1, [r1, #4]
 80057fc:	e7cc      	b.n	8005798 <_malloc_r+0x2c>
 80057fe:	1cc4      	adds	r4, r0, #3
 8005800:	f024 0403 	bic.w	r4, r4, #3
 8005804:	42a0      	cmp	r0, r4
 8005806:	d005      	beq.n	8005814 <_malloc_r+0xa8>
 8005808:	1a21      	subs	r1, r4, r0
 800580a:	4630      	mov	r0, r6
 800580c:	f000 f808 	bl	8005820 <_sbrk_r>
 8005810:	3001      	adds	r0, #1
 8005812:	d0cf      	beq.n	80057b4 <_malloc_r+0x48>
 8005814:	6025      	str	r5, [r4, #0]
 8005816:	e7db      	b.n	80057d0 <_malloc_r+0x64>
 8005818:	20000090 	.word	0x20000090
 800581c:	20000094 	.word	0x20000094

08005820 <_sbrk_r>:
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	4c06      	ldr	r4, [pc, #24]	; (800583c <_sbrk_r+0x1c>)
 8005824:	2300      	movs	r3, #0
 8005826:	4605      	mov	r5, r0
 8005828:	4608      	mov	r0, r1
 800582a:	6023      	str	r3, [r4, #0]
 800582c:	f7fb fd76 	bl	800131c <_sbrk>
 8005830:	1c43      	adds	r3, r0, #1
 8005832:	d102      	bne.n	800583a <_sbrk_r+0x1a>
 8005834:	6823      	ldr	r3, [r4, #0]
 8005836:	b103      	cbz	r3, 800583a <_sbrk_r+0x1a>
 8005838:	602b      	str	r3, [r5, #0]
 800583a:	bd38      	pop	{r3, r4, r5, pc}
 800583c:	20000798 	.word	0x20000798

08005840 <__malloc_lock>:
 8005840:	4770      	bx	lr

08005842 <__malloc_unlock>:
 8005842:	4770      	bx	lr

08005844 <_init>:
 8005844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005846:	bf00      	nop
 8005848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800584a:	bc08      	pop	{r3}
 800584c:	469e      	mov	lr, r3
 800584e:	4770      	bx	lr

08005850 <_fini>:
 8005850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005852:	bf00      	nop
 8005854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005856:	bc08      	pop	{r3}
 8005858:	469e      	mov	lr, r3
 800585a:	4770      	bx	lr
