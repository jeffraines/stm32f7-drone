
stm32f7-drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000867c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800885c  0800885c  0001885c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088c4  080088c4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080088c4  080088c4  000188c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088cc  080088cc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088cc  080088cc  000188cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088d0  080088d0  000188d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080088d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  20000070  08008944  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  08008944  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015457  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c20  00000000  00000000  000354f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001290  00000000  00000000  00038118  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001118  00000000  00000000  000393a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024c1b  00000000  00000000  0003a4c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fc6b  00000000  00000000  0005f0db  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e1ce2  00000000  00000000  0006ed46  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00150a28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000508c  00000000  00000000  00150aa4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008844 	.word	0x08008844

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08008844 	.word	0x08008844

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b972 	b.w	80005cc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	4688      	mov	r8, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14b      	bne.n	80003a6 <__udivmoddi4+0xa6>
 800030e:	428a      	cmp	r2, r1
 8000310:	4615      	mov	r5, r2
 8000312:	d967      	bls.n	80003e4 <__udivmoddi4+0xe4>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0720 	rsb	r7, r2, #32
 800031e:	fa01 f302 	lsl.w	r3, r1, r2
 8000322:	fa20 f707 	lsr.w	r7, r0, r7
 8000326:	4095      	lsls	r5, r2
 8000328:	ea47 0803 	orr.w	r8, r7, r3
 800032c:	4094      	lsls	r4, r2
 800032e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fbb8 f7fe 	udiv	r7, r8, lr
 8000338:	fa1f fc85 	uxth.w	ip, r5
 800033c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000340:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000344:	fb07 f10c 	mul.w	r1, r7, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x60>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000352:	f080 811b 	bcs.w	800058c <__udivmoddi4+0x28c>
 8000356:	4299      	cmp	r1, r3
 8000358:	f240 8118 	bls.w	800058c <__udivmoddi4+0x28c>
 800035c:	3f02      	subs	r7, #2
 800035e:	442b      	add	r3, r5
 8000360:	1a5b      	subs	r3, r3, r1
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb3 f0fe 	udiv	r0, r3, lr
 8000368:	fb0e 3310 	mls	r3, lr, r0, r3
 800036c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000370:	fb00 fc0c 	mul.w	ip, r0, ip
 8000374:	45a4      	cmp	ip, r4
 8000376:	d909      	bls.n	800038c <__udivmoddi4+0x8c>
 8000378:	192c      	adds	r4, r5, r4
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295
 800037e:	f080 8107 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000382:	45a4      	cmp	ip, r4
 8000384:	f240 8104 	bls.w	8000590 <__udivmoddi4+0x290>
 8000388:	3802      	subs	r0, #2
 800038a:	442c      	add	r4, r5
 800038c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	2700      	movs	r7, #0
 8000396:	b11e      	cbz	r6, 80003a0 <__udivmoddi4+0xa0>
 8000398:	40d4      	lsrs	r4, r2
 800039a:	2300      	movs	r3, #0
 800039c:	e9c6 4300 	strd	r4, r3, [r6]
 80003a0:	4639      	mov	r1, r7
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d909      	bls.n	80003be <__udivmoddi4+0xbe>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80eb 	beq.w	8000586 <__udivmoddi4+0x286>
 80003b0:	2700      	movs	r7, #0
 80003b2:	e9c6 0100 	strd	r0, r1, [r6]
 80003b6:	4638      	mov	r0, r7
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	fab3 f783 	clz	r7, r3
 80003c2:	2f00      	cmp	r7, #0
 80003c4:	d147      	bne.n	8000456 <__udivmoddi4+0x156>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xd0>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 80fa 	bhi.w	80005c4 <__udivmoddi4+0x2c4>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb61 0303 	sbc.w	r3, r1, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4698      	mov	r8, r3
 80003da:	2e00      	cmp	r6, #0
 80003dc:	d0e0      	beq.n	80003a0 <__udivmoddi4+0xa0>
 80003de:	e9c6 4800 	strd	r4, r8, [r6]
 80003e2:	e7dd      	b.n	80003a0 <__udivmoddi4+0xa0>
 80003e4:	b902      	cbnz	r2, 80003e8 <__udivmoddi4+0xe8>
 80003e6:	deff      	udf	#255	; 0xff
 80003e8:	fab2 f282 	clz	r2, r2
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f040 808f 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f2:	1b49      	subs	r1, r1, r5
 80003f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f8:	fa1f f885 	uxth.w	r8, r5
 80003fc:	2701      	movs	r7, #1
 80003fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000402:	0c23      	lsrs	r3, r4, #16
 8000404:	fb0e 111c 	mls	r1, lr, ip, r1
 8000408:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800040c:	fb08 f10c 	mul.w	r1, r8, ip
 8000410:	4299      	cmp	r1, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x124>
 8000414:	18eb      	adds	r3, r5, r3
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4299      	cmp	r1, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2bc>
 8000422:	4684      	mov	ip, r0
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000430:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x14c>
 800043c:	192c      	adds	r4, r5, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x14a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80b6 	bhi.w	80005b6 <__udivmoddi4+0x2b6>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e79f      	b.n	8000396 <__udivmoddi4+0x96>
 8000456:	f1c7 0c20 	rsb	ip, r7, #32
 800045a:	40bb      	lsls	r3, r7
 800045c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000460:	ea4e 0e03 	orr.w	lr, lr, r3
 8000464:	fa01 f407 	lsl.w	r4, r1, r7
 8000468:	fa20 f50c 	lsr.w	r5, r0, ip
 800046c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000470:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000474:	4325      	orrs	r5, r4
 8000476:	fbb3 f9f8 	udiv	r9, r3, r8
 800047a:	0c2c      	lsrs	r4, r5, #16
 800047c:	fb08 3319 	mls	r3, r8, r9, r3
 8000480:	fa1f fa8e 	uxth.w	sl, lr
 8000484:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000488:	fb09 f40a 	mul.w	r4, r9, sl
 800048c:	429c      	cmp	r4, r3
 800048e:	fa02 f207 	lsl.w	r2, r2, r7
 8000492:	fa00 f107 	lsl.w	r1, r0, r7
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1e 0303 	adds.w	r3, lr, r3
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a0:	f080 8087 	bcs.w	80005b2 <__udivmoddi4+0x2b2>
 80004a4:	429c      	cmp	r4, r3
 80004a6:	f240 8084 	bls.w	80005b2 <__udivmoddi4+0x2b2>
 80004aa:	f1a9 0902 	sub.w	r9, r9, #2
 80004ae:	4473      	add	r3, lr
 80004b0:	1b1b      	subs	r3, r3, r4
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004b8:	fb08 3310 	mls	r3, r8, r0, r3
 80004bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004c4:	45a2      	cmp	sl, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1e 0404 	adds.w	r4, lr, r4
 80004cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d0:	d26b      	bcs.n	80005aa <__udivmoddi4+0x2aa>
 80004d2:	45a2      	cmp	sl, r4
 80004d4:	d969      	bls.n	80005aa <__udivmoddi4+0x2aa>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4474      	add	r4, lr
 80004da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004de:	fba0 8902 	umull	r8, r9, r0, r2
 80004e2:	eba4 040a 	sub.w	r4, r4, sl
 80004e6:	454c      	cmp	r4, r9
 80004e8:	46c2      	mov	sl, r8
 80004ea:	464b      	mov	r3, r9
 80004ec:	d354      	bcc.n	8000598 <__udivmoddi4+0x298>
 80004ee:	d051      	beq.n	8000594 <__udivmoddi4+0x294>
 80004f0:	2e00      	cmp	r6, #0
 80004f2:	d069      	beq.n	80005c8 <__udivmoddi4+0x2c8>
 80004f4:	ebb1 050a 	subs.w	r5, r1, sl
 80004f8:	eb64 0403 	sbc.w	r4, r4, r3
 80004fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000500:	40fd      	lsrs	r5, r7
 8000502:	40fc      	lsrs	r4, r7
 8000504:	ea4c 0505 	orr.w	r5, ip, r5
 8000508:	e9c6 5400 	strd	r5, r4, [r6]
 800050c:	2700      	movs	r7, #0
 800050e:	e747      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000510:	f1c2 0320 	rsb	r3, r2, #32
 8000514:	fa20 f703 	lsr.w	r7, r0, r3
 8000518:	4095      	lsls	r5, r2
 800051a:	fa01 f002 	lsl.w	r0, r1, r2
 800051e:	fa21 f303 	lsr.w	r3, r1, r3
 8000522:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000526:	4338      	orrs	r0, r7
 8000528:	0c01      	lsrs	r1, r0, #16
 800052a:	fbb3 f7fe 	udiv	r7, r3, lr
 800052e:	fa1f f885 	uxth.w	r8, r5
 8000532:	fb0e 3317 	mls	r3, lr, r7, r3
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb07 f308 	mul.w	r3, r7, r8
 800053e:	428b      	cmp	r3, r1
 8000540:	fa04 f402 	lsl.w	r4, r4, r2
 8000544:	d907      	bls.n	8000556 <__udivmoddi4+0x256>
 8000546:	1869      	adds	r1, r5, r1
 8000548:	f107 3cff 	add.w	ip, r7, #4294967295
 800054c:	d22f      	bcs.n	80005ae <__udivmoddi4+0x2ae>
 800054e:	428b      	cmp	r3, r1
 8000550:	d92d      	bls.n	80005ae <__udivmoddi4+0x2ae>
 8000552:	3f02      	subs	r7, #2
 8000554:	4429      	add	r1, r5
 8000556:	1acb      	subs	r3, r1, r3
 8000558:	b281      	uxth	r1, r0
 800055a:	fbb3 f0fe 	udiv	r0, r3, lr
 800055e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000562:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000566:	fb00 f308 	mul.w	r3, r0, r8
 800056a:	428b      	cmp	r3, r1
 800056c:	d907      	bls.n	800057e <__udivmoddi4+0x27e>
 800056e:	1869      	adds	r1, r5, r1
 8000570:	f100 3cff 	add.w	ip, r0, #4294967295
 8000574:	d217      	bcs.n	80005a6 <__udivmoddi4+0x2a6>
 8000576:	428b      	cmp	r3, r1
 8000578:	d915      	bls.n	80005a6 <__udivmoddi4+0x2a6>
 800057a:	3802      	subs	r0, #2
 800057c:	4429      	add	r1, r5
 800057e:	1ac9      	subs	r1, r1, r3
 8000580:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000584:	e73b      	b.n	80003fe <__udivmoddi4+0xfe>
 8000586:	4637      	mov	r7, r6
 8000588:	4630      	mov	r0, r6
 800058a:	e709      	b.n	80003a0 <__udivmoddi4+0xa0>
 800058c:	4607      	mov	r7, r0
 800058e:	e6e7      	b.n	8000360 <__udivmoddi4+0x60>
 8000590:	4618      	mov	r0, r3
 8000592:	e6fb      	b.n	800038c <__udivmoddi4+0x8c>
 8000594:	4541      	cmp	r1, r8
 8000596:	d2ab      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 8000598:	ebb8 0a02 	subs.w	sl, r8, r2
 800059c:	eb69 020e 	sbc.w	r2, r9, lr
 80005a0:	3801      	subs	r0, #1
 80005a2:	4613      	mov	r3, r2
 80005a4:	e7a4      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a6:	4660      	mov	r0, ip
 80005a8:	e7e9      	b.n	800057e <__udivmoddi4+0x27e>
 80005aa:	4618      	mov	r0, r3
 80005ac:	e795      	b.n	80004da <__udivmoddi4+0x1da>
 80005ae:	4667      	mov	r7, ip
 80005b0:	e7d1      	b.n	8000556 <__udivmoddi4+0x256>
 80005b2:	4681      	mov	r9, r0
 80005b4:	e77c      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b6:	3802      	subs	r0, #2
 80005b8:	442c      	add	r4, r5
 80005ba:	e747      	b.n	800044c <__udivmoddi4+0x14c>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	442b      	add	r3, r5
 80005c2:	e72f      	b.n	8000424 <__udivmoddi4+0x124>
 80005c4:	4638      	mov	r0, r7
 80005c6:	e708      	b.n	80003da <__udivmoddi4+0xda>
 80005c8:	4637      	mov	r7, r6
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0xa0>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <ADC_INIT>:
/* Function Summary: The input from the ADC handler will be piped directly to the inputVar via DMA.
 * Parameters: hadc - ADC handler for particular ADC pin. inputVar - Variable you want ADC values stored into.
 */

void ADC_INIT(ADC_HandleTypeDef* hadc, uint32_t* inputVar)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc, inputVar, sizeof(*inputVar));
 80005da:	2204      	movs	r2, #4
 80005dc:	6839      	ldr	r1, [r7, #0]
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f001 fcf0 	bl	8001fc4 <HAL_ADC_Start_DMA>
	HAL_ADC_Start(hadc);
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f001 fc2d 	bl	8001e44 <HAL_ADC_Start>
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <ESC_INIT>:
#if defined(DSHOT150) || defined(DSHOT300) || defined(DSHOT600) || defined(DSHOT1200)

#define __DSHOT_MAKE_BYTE(__DSHOT_BYTE__, __BIT__) (__DSHOT_BYTE__ = (((__BIT__ & 0b1) == 0b1) ? DSHOT_HIGH_BIT : DSHOT_LOW_BIT))

ESC_CONTROLLER* ESC_INIT(TIM_HandleTypeDef* dmaTimerTick, TIM_HandleTypeDef* pwmTimer, DMA_HandleTypeDef* dma)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b086      	sub	sp, #24
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	60f8      	str	r0, [r7, #12]
 80005fa:	60b9      	str	r1, [r7, #8]
 80005fc:	607a      	str	r2, [r7, #4]
	dmaTimerTick->Instance->ARR = TIMER_ARR - 1;
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	22b3      	movs	r2, #179	; 0xb3
 8000604:	62da      	str	r2, [r3, #44]	; 0x2c
	pwmTimer->Instance->ARR = TIMER_ARR - 1;
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	22b3      	movs	r2, #179	; 0xb3
 800060c:	62da      	str	r2, [r3, #44]	; 0x2c
	ESC_CONTROLLER* ESC_CONTROLLER = malloc(sizeof(ESC_CONTROLLER) * ESC_COUNT);
 800060e:	2010      	movs	r0, #16
 8000610:	f007 fd02 	bl	8008018 <malloc>
 8000614:	4603      	mov	r3, r0
 8000616:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < ESC_COUNT; i++)
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
 800061c:	e064      	b.n	80006e8 <ESC_INIT+0xf6>
	{
		ESC_CONTROLLER[i].Throttle = 0;
 800061e:	697a      	ldr	r2, [r7, #20]
 8000620:	4613      	mov	r3, r2
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	4413      	add	r3, r2
 8000626:	00db      	lsls	r3, r3, #3
 8000628:	461a      	mov	r2, r3
 800062a:	693b      	ldr	r3, [r7, #16]
 800062c:	4413      	add	r3, r2
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
		ESC_CONTROLLER[i].Channel = 4*i;
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	0099      	lsls	r1, r3, #2
 8000636:	697a      	ldr	r2, [r7, #20]
 8000638:	4613      	mov	r3, r2
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	4413      	add	r3, r2
 800063e:	00db      	lsls	r3, r3, #3
 8000640:	461a      	mov	r2, r3
 8000642:	693b      	ldr	r3, [r7, #16]
 8000644:	4413      	add	r3, r2
 8000646:	460a      	mov	r2, r1
 8000648:	605a      	str	r2, [r3, #4]
		ESC_CONTROLLER[i].Number = i;
 800064a:	697a      	ldr	r2, [r7, #20]
 800064c:	4613      	mov	r3, r2
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	4413      	add	r3, r2
 8000652:	00db      	lsls	r3, r3, #3
 8000654:	461a      	mov	r2, r3
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	4413      	add	r3, r2
 800065a:	697a      	ldr	r2, [r7, #20]
 800065c:	609a      	str	r2, [r3, #8]
		ESC_CONTROLLER[i].Timer = dmaTimerTick;
 800065e:	697a      	ldr	r2, [r7, #20]
 8000660:	4613      	mov	r3, r2
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	4413      	add	r3, r2
 8000666:	00db      	lsls	r3, r3, #3
 8000668:	461a      	mov	r2, r3
 800066a:	693b      	ldr	r3, [r7, #16]
 800066c:	4413      	add	r3, r2
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	60da      	str	r2, [r3, #12]
		ESC_CONTROLLER[i].DMA = dma;
 8000672:	697a      	ldr	r2, [r7, #20]
 8000674:	4613      	mov	r3, r2
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	4413      	add	r3, r2
 800067a:	00db      	lsls	r3, r3, #3
 800067c:	461a      	mov	r2, r3
 800067e:	693b      	ldr	r3, [r7, #16]
 8000680:	4413      	add	r3, r2
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	611a      	str	r2, [r3, #16]
		ESC_CONTROLLER[i].CCR = (uint32_t) &(dmaTimerTick->Instance->CCR1) + (4*i);
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	3334      	adds	r3, #52	; 0x34
 800068c:	4618      	mov	r0, r3
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	4619      	mov	r1, r3
 8000694:	697a      	ldr	r2, [r7, #20]
 8000696:	4613      	mov	r3, r2
 8000698:	005b      	lsls	r3, r3, #1
 800069a:	4413      	add	r3, r2
 800069c:	00db      	lsls	r3, r3, #3
 800069e:	461a      	mov	r2, r3
 80006a0:	693b      	ldr	r3, [r7, #16]
 80006a2:	4413      	add	r3, r2
 80006a4:	1842      	adds	r2, r0, r1
 80006a6:	615a      	str	r2, [r3, #20]
		*((uint32_t *) ESC_CONTROLLER[i].CCR) = 0;
 80006a8:	697a      	ldr	r2, [r7, #20]
 80006aa:	4613      	mov	r3, r2
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	4413      	add	r3, r2
 80006b0:	00db      	lsls	r3, r3, #3
 80006b2:	461a      	mov	r2, r3
 80006b4:	693b      	ldr	r3, [r7, #16]
 80006b6:	4413      	add	r3, r2
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	461a      	mov	r2, r3
 80006bc:	2300      	movs	r3, #0
 80006be:	6013      	str	r3, [r2, #0]
		HAL_TIM_PWM_Start(dmaTimerTick, ESC_CONTROLLER[i].Channel);
 80006c0:	697a      	ldr	r2, [r7, #20]
 80006c2:	4613      	mov	r3, r2
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	4413      	add	r3, r2
 80006c8:	00db      	lsls	r3, r3, #3
 80006ca:	461a      	mov	r2, r3
 80006cc:	693b      	ldr	r3, [r7, #16]
 80006ce:	4413      	add	r3, r2
 80006d0:	685b      	ldr	r3, [r3, #4]
 80006d2:	4619      	mov	r1, r3
 80006d4:	68f8      	ldr	r0, [r7, #12]
 80006d6:	f005 fe1d 	bl	8006314 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(pwmTimer, TIM_CHANNEL_1);
 80006da:	2100      	movs	r1, #0
 80006dc:	68b8      	ldr	r0, [r7, #8]
 80006de:	f005 fe19 	bl	8006314 <HAL_TIM_PWM_Start>
	for (int i = 0; i < ESC_COUNT; i++)
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	3301      	adds	r3, #1
 80006e6:	617b      	str	r3, [r7, #20]
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	dd97      	ble.n	800061e <ESC_INIT+0x2c>
	}
	return ESC_CONTROLLER;
 80006ee:	693b      	ldr	r3, [r7, #16]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3718      	adds	r7, #24
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <RX_INIT>:
 */

#include "RX.h"

RX_CONTROLLER* RX_INIT(TIM_HandleTypeDef* timerSticks, TIM_HandleTypeDef* timerSwitches)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
	RX_CONTROLLER* RX_CONTROLLER = malloc(sizeof(RX_CONTROLLER));
 8000702:	2004      	movs	r0, #4
 8000704:	f007 fc88 	bl	8008018 <malloc>
 8000708:	4603      	mov	r3, r0
 800070a:	60fb      	str	r3, [r7, #12]
	RX_CONTROLLER->throttle = 0;
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
	RX_CONTROLLER->pitch = 0;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	2200      	movs	r2, #0
 8000716:	605a      	str	r2, [r3, #4]
	RX_CONTROLLER->roll = 0;
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
	RX_CONTROLLER->yaw = 0;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	2200      	movs	r2, #0
 8000722:	60da      	str	r2, [r3, #12]
	RX_CONTROLLER->switchA = 0;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
	RX_CONTROLLER->switchB = 0;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	2200      	movs	r2, #0
 800072e:	615a      	str	r2, [r3, #20]
	RX_CONTROLLER->timerSticks = timerSticks;
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	619a      	str	r2, [r3, #24]
	RX_CONTROLLER->timerSwitches = timerSwitches;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	683a      	ldr	r2, [r7, #0]
 800073a:	61da      	str	r2, [r3, #28]
	HAL_TIM_IC_Start_IT(RX_CONTROLLER->timerSticks, TIM_CHANNEL_1);
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f005 fe60 	bl	8006408 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(RX_CONTROLLER->timerSticks, TIM_CHANNEL_2);
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	2104      	movs	r1, #4
 800074e:	4618      	mov	r0, r3
 8000750:	f005 fe5a 	bl	8006408 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(RX_CONTROLLER->timerSticks, TIM_CHANNEL_3);
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	2108      	movs	r1, #8
 800075a:	4618      	mov	r0, r3
 800075c:	f005 fe54 	bl	8006408 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(RX_CONTROLLER->timerSticks, TIM_CHANNEL_4);
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	210c      	movs	r1, #12
 8000766:	4618      	mov	r0, r3
 8000768:	f005 fe4e 	bl	8006408 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(RX_CONTROLLER->timerSwitches, TIM_CHANNEL_1);
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	69db      	ldr	r3, [r3, #28]
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f005 fe48 	bl	8006408 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(RX_CONTROLLER->timerSwitches, TIM_CHANNEL_4);
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	69db      	ldr	r3, [r3, #28]
 800077c:	210c      	movs	r1, #12
 800077e:	4618      	mov	r0, r3
 8000780:	f005 fe42 	bl	8006408 <HAL_TIM_IC_Start_IT>
	return RX_CONTROLLER;
 8000784:	68fb      	ldr	r3, [r7, #12]
}
 8000786:	4618      	mov	r0, r3
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <RX_UPDATE>:

// TO DO: Debug this
// TO DO: Convert the values before putting them RX_CONTROLLER. Probably best to load into local array then copy into RX_CONTROLLER
void RX_UPDATE(RX_CONTROLLER* RX_CONTROLLER)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	b082      	sub	sp, #8
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
	RX_CONTROLLER->throttle = HAL_TIM_ReadCapturedValue(RX_CONTROLLER->timerSticks, TIM_CHANNEL_1);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f006 f915 	bl	80069cc <HAL_TIM_ReadCapturedValue>
 80007a2:	4602      	mov	r2, r0
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	601a      	str	r2, [r3, #0]
	RX_CONTROLLER->pitch = HAL_TIM_ReadCapturedValue(RX_CONTROLLER->timerSticks, TIM_CHANNEL_2);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	2104      	movs	r1, #4
 80007ae:	4618      	mov	r0, r3
 80007b0:	f006 f90c 	bl	80069cc <HAL_TIM_ReadCapturedValue>
 80007b4:	4602      	mov	r2, r0
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	605a      	str	r2, [r3, #4]
	RX_CONTROLLER->roll = HAL_TIM_ReadCapturedValue(RX_CONTROLLER->timerSticks, TIM_CHANNEL_3);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	2108      	movs	r1, #8
 80007c0:	4618      	mov	r0, r3
 80007c2:	f006 f903 	bl	80069cc <HAL_TIM_ReadCapturedValue>
 80007c6:	4602      	mov	r2, r0
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	609a      	str	r2, [r3, #8]
	RX_CONTROLLER->yaw = HAL_TIM_ReadCapturedValue(RX_CONTROLLER->timerSticks, TIM_CHANNEL_4);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	210c      	movs	r1, #12
 80007d2:	4618      	mov	r0, r3
 80007d4:	f006 f8fa 	bl	80069cc <HAL_TIM_ReadCapturedValue>
 80007d8:	4602      	mov	r2, r0
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	60da      	str	r2, [r3, #12]
	RX_CONTROLLER->switchA = HAL_TIM_ReadCapturedValue(RX_CONTROLLER->timerSwitches, TIM_CHANNEL_1);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f006 f8f1 	bl	80069cc <HAL_TIM_ReadCapturedValue>
 80007ea:	4602      	mov	r2, r0
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	611a      	str	r2, [r3, #16]
	RX_CONTROLLER->switchB = HAL_TIM_ReadCapturedValue(RX_CONTROLLER->timerSwitches, TIM_CHANNEL_4);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	69db      	ldr	r3, [r3, #28]
 80007f4:	210c      	movs	r1, #12
 80007f6:	4618      	mov	r0, r3
 80007f8:	f006 f8e8 	bl	80069cc <HAL_TIM_ReadCapturedValue>
 80007fc:	4602      	mov	r2, r0
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	615a      	str	r2, [r3, #20]
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <XLG_INIT>:
  * @param writeSize	write here
  * @retval void
  */

void XLG_INIT(I2C_HandleTypeDef* i2c)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b084      	sub	sp, #16
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
	uint8_t writeThis = 0b10100000;
 8000812:	23a0      	movs	r3, #160	; 0xa0
 8000814:	73fb      	strb	r3, [r7, #15]
	XLG_WRITE(i2c, CTRL1_XL, &writeThis, 1);
 8000816:	f107 020f 	add.w	r2, r7, #15
 800081a:	2301      	movs	r3, #1
 800081c:	2110      	movs	r1, #16
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f000 f80d 	bl	800083e <XLG_WRITE>
	writeThis = 0b10001100;
 8000824:	238c      	movs	r3, #140	; 0x8c
 8000826:	73fb      	strb	r3, [r7, #15]
	XLG_WRITE(i2c, CTRL2_G, &writeThis, 1);
 8000828:	f107 020f 	add.w	r2, r7, #15
 800082c:	2301      	movs	r3, #1
 800082e:	2111      	movs	r1, #17
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f000 f804 	bl	800083e <XLG_WRITE>
}
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <XLG_WRITE>:

void XLG_WRITE(I2C_HandleTypeDef* i2c, uint8_t addr, uint8_t* writeByte, uint32_t writeSize)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b086      	sub	sp, #24
 8000842:	af02      	add	r7, sp, #8
 8000844:	60f8      	str	r0, [r7, #12]
 8000846:	607a      	str	r2, [r7, #4]
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	460b      	mov	r3, r1
 800084c:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write_DMA(i2c, XLG_I2C_ADDR, addr, XLG_REG_SIZE, writeByte, writeSize);
 800084e:	7afb      	ldrb	r3, [r7, #11]
 8000850:	b29a      	uxth	r2, r3
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	b29b      	uxth	r3, r3
 8000856:	9301      	str	r3, [sp, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	2301      	movs	r3, #1
 800085e:	21d4      	movs	r1, #212	; 0xd4
 8000860:	68f8      	ldr	r0, [r7, #12]
 8000862:	f002 ff81 	bl	8003768 <HAL_I2C_Mem_Write_DMA>
	while(i2c->hdmatx->State != HAL_DMA_STATE_READY);
 8000866:	bf00      	nop
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800086c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000870:	b2db      	uxtb	r3, r3
 8000872:	2b01      	cmp	r3, #1
 8000874:	d1f8      	bne.n	8000868 <XLG_WRITE+0x2a>
	i2c->State = HAL_I2C_STATE_READY;
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	2220      	movs	r2, #32
 800087a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800087e:	bf00      	nop
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <XLG_READ>:

void XLG_READ(I2C_HandleTypeDef* i2c, uint8_t addr, uint8_t* readByte, uint32_t readSize)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b088      	sub	sp, #32
 800088a:	af04      	add	r7, sp, #16
 800088c:	60f8      	str	r0, [r7, #12]
 800088e:	607a      	str	r2, [r7, #4]
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	460b      	mov	r3, r1
 8000894:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Read_DMA(i2c, XLG_I2C_ADDR, addr, XLG_REG_SIZE, readByte, readSize);
 8000896:	7afb      	ldrb	r3, [r7, #11]
 8000898:	b29a      	uxth	r2, r3
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	b29b      	uxth	r3, r3
 800089e:	9301      	str	r3, [sp, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2301      	movs	r3, #1
 80008a6:	21d4      	movs	r1, #212	; 0xd4
 80008a8:	68f8      	ldr	r0, [r7, #12]
 80008aa:	f003 f853 	bl	8003954 <HAL_I2C_Mem_Read_DMA>
	HAL_I2C_Mem_Read(i2c, XLG_I2C_ADDR, addr, XLG_REG_SIZE, readByte, readSize, HAL_MAX_DELAY);
 80008ae:	7afb      	ldrb	r3, [r7, #11]
 80008b0:	b299      	uxth	r1, r3
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	f04f 32ff 	mov.w	r2, #4294967295
 80008ba:	9202      	str	r2, [sp, #8]
 80008bc:	9301      	str	r3, [sp, #4]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	2301      	movs	r3, #1
 80008c4:	460a      	mov	r2, r1
 80008c6:	21d4      	movs	r1, #212	; 0xd4
 80008c8:	68f8      	ldr	r0, [r7, #12]
 80008ca:	f002 fe33 	bl	8003534 <HAL_I2C_Mem_Read>
	while(i2c->hdmarx->State != HAL_DMA_STATE_READY);
 80008ce:	bf00      	nop
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d1f8      	bne.n	80008d0 <XLG_READ+0x4a>
	i2c->State = HAL_I2C_STATE_READY;
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	2220      	movs	r2, #32
 80008e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <XLG_XL_DATA_READY>:

_Bool XLG_XL_DATA_READY(I2C_HandleTypeDef* i2c)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b084      	sub	sp, #16
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	73fb      	strb	r3, [r7, #15]
	XLG_READ(i2c, STATUS_REG, &status, 1);
 80008fa:	f107 020f 	add.w	r2, r7, #15
 80008fe:	2301      	movs	r3, #1
 8000900:	211e      	movs	r1, #30
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff ffbf 	bl	8000886 <XLG_READ>
	return (status & 0b1); // Mask with XLDA bit in STATUS_REG
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	2b00      	cmp	r3, #0
 8000910:	bf14      	ite	ne
 8000912:	2301      	movne	r3, #1
 8000914:	2300      	moveq	r3, #0
 8000916:	b2db      	uxtb	r3, r3
}
 8000918:	4618      	mov	r0, r3
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <XLG_G_DATA_READY>:

_Bool XLG_G_DATA_READY(I2C_HandleTypeDef* i2c)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	73fb      	strb	r3, [r7, #15]
	XLG_READ(i2c, STATUS_REG, &status, 1);
 800092c:	f107 020f 	add.w	r2, r7, #15
 8000930:	2301      	movs	r3, #1
 8000932:	211e      	movs	r1, #30
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff ffa6 	bl	8000886 <XLG_READ>
	return (status & 0b10); // Mask with DGA bit in STATUS_REG
 800093a:	7bfb      	ldrb	r3, [r7, #15]
 800093c:	f003 0302 	and.w	r3, r3, #2
 8000940:	2b00      	cmp	r3, #0
 8000942:	bf14      	ite	ne
 8000944:	2301      	movne	r3, #1
 8000946:	2300      	moveq	r3, #0
 8000948:	b2db      	uxtb	r3, r3
}
 800094a:	4618      	mov	r0, r3
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <XLG_G_DATA_READ>:
	XLG_READ(i2c, STATUS_REG, &status, 1);
	return (status & 0b100); // Mask with TDA bit in STATUS_REG
}

void XLG_G_DATA_READ(I2C_HandleTypeDef* i2c, XLG_DATA* gData)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	b084      	sub	sp, #16
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
 800095a:	6039      	str	r1, [r7, #0]
	if (XLG_G_DATA_READY(i2c))
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff ffdf 	bl	8000920 <XLG_G_DATA_READY>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d064      	beq.n	8000a32 <XLG_G_DATA_READ+0xe0>
	{
		gData->dataReady = true;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	2201      	movs	r2, #1
 800096c:	719a      	strb	r2, [r3, #6]
		uint8_t readByte[6] = {0};
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	809a      	strh	r2, [r3, #4]
		XLG_READ(i2c, OUTX_H_G, &readByte[0], 1);
 8000978:	f107 0208 	add.w	r2, r7, #8
 800097c:	2301      	movs	r3, #1
 800097e:	2123      	movs	r1, #35	; 0x23
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f7ff ff80 	bl	8000886 <XLG_READ>
		XLG_READ(i2c, OUTX_L_G, &readByte[1], 1);
 8000986:	f107 0308 	add.w	r3, r7, #8
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	2301      	movs	r3, #1
 800098e:	2122      	movs	r1, #34	; 0x22
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f7ff ff78 	bl	8000886 <XLG_READ>
		XLG_READ(i2c, OUTY_H_G, &readByte[2], 1);
 8000996:	f107 0308 	add.w	r3, r7, #8
 800099a:	1c9a      	adds	r2, r3, #2
 800099c:	2301      	movs	r3, #1
 800099e:	2125      	movs	r1, #37	; 0x25
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff ff70 	bl	8000886 <XLG_READ>
		XLG_READ(i2c, OUTY_L_G, &readByte[3], 1);
 80009a6:	f107 0308 	add.w	r3, r7, #8
 80009aa:	1cda      	adds	r2, r3, #3
 80009ac:	2301      	movs	r3, #1
 80009ae:	2124      	movs	r1, #36	; 0x24
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff ff68 	bl	8000886 <XLG_READ>
		XLG_READ(i2c, OUTZ_H_G, &readByte[4], 1);
 80009b6:	f107 0308 	add.w	r3, r7, #8
 80009ba:	1d1a      	adds	r2, r3, #4
 80009bc:	2301      	movs	r3, #1
 80009be:	2127      	movs	r1, #39	; 0x27
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f7ff ff60 	bl	8000886 <XLG_READ>
		XLG_READ(i2c, OUTZ_L_G, &readByte[5], 1);
 80009c6:	f107 0308 	add.w	r3, r7, #8
 80009ca:	1d5a      	adds	r2, r3, #5
 80009cc:	2301      	movs	r3, #1
 80009ce:	2126      	movs	r1, #38	; 0x26
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f7ff ff58 	bl	8000886 <XLG_READ>
		gData->x = readByte[0];
 80009d6:	7a3b      	ldrb	r3, [r7, #8]
 80009d8:	b21a      	sxth	r2, r3
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	801a      	strh	r2, [r3, #0]
		gData->x = (gData->x << 8) | readByte[1];
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009e4:	021b      	lsls	r3, r3, #8
 80009e6:	b21a      	sxth	r2, r3
 80009e8:	7a7b      	ldrb	r3, [r7, #9]
 80009ea:	b21b      	sxth	r3, r3
 80009ec:	4313      	orrs	r3, r2
 80009ee:	b21a      	sxth	r2, r3
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	801a      	strh	r2, [r3, #0]
		gData->y = readByte[2];
 80009f4:	7abb      	ldrb	r3, [r7, #10]
 80009f6:	b21a      	sxth	r2, r3
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	805a      	strh	r2, [r3, #2]
		gData->y = (gData->y << 8) | readByte[3];
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a02:	021b      	lsls	r3, r3, #8
 8000a04:	b21a      	sxth	r2, r3
 8000a06:	7afb      	ldrb	r3, [r7, #11]
 8000a08:	b21b      	sxth	r3, r3
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	b21a      	sxth	r2, r3
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	805a      	strh	r2, [r3, #2]
		gData->z = readByte[4];
 8000a12:	7b3b      	ldrb	r3, [r7, #12]
 8000a14:	b21a      	sxth	r2, r3
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	809a      	strh	r2, [r3, #4]
		gData->z = (gData->z << 8) | readByte[5];
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a20:	021b      	lsls	r3, r3, #8
 8000a22:	b21a      	sxth	r2, r3
 8000a24:	7b7b      	ldrb	r3, [r7, #13]
 8000a26:	b21b      	sxth	r3, r3
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	b21a      	sxth	r2, r3
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	809a      	strh	r2, [r3, #4]
	}
	else
	{
		gData->dataReady = false;
	}
}
 8000a30:	e002      	b.n	8000a38 <XLG_G_DATA_READ+0xe6>
		gData->dataReady = false;
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	2200      	movs	r2, #0
 8000a36:	719a      	strb	r2, [r3, #6]
}
 8000a38:	bf00      	nop
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <XLG_XL_DATA_READ>:

void XLG_XL_DATA_READ(I2C_HandleTypeDef* i2c, XLG_DATA* xlData)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
	if (XLG_XL_DATA_READY(i2c))
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff ff4f 	bl	80008ee <XLG_XL_DATA_READY>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d064      	beq.n	8000b20 <XLG_XL_DATA_READ+0xe0>
	{
		xlData->dataReady = true;
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	2201      	movs	r2, #1
 8000a5a:	719a      	strb	r2, [r3, #6]
		uint8_t readByte[6] = {0};
 8000a5c:	f107 0308 	add.w	r3, r7, #8
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	809a      	strh	r2, [r3, #4]
		XLG_READ(i2c, OUTX_H_XL, &readByte[0], 1);
 8000a66:	f107 0208 	add.w	r2, r7, #8
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	2129      	movs	r1, #41	; 0x29
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f7ff ff09 	bl	8000886 <XLG_READ>
		XLG_READ(i2c, OUTX_L_XL, &readByte[1], 1);
 8000a74:	f107 0308 	add.w	r3, r7, #8
 8000a78:	1c5a      	adds	r2, r3, #1
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	2128      	movs	r1, #40	; 0x28
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff ff01 	bl	8000886 <XLG_READ>
		XLG_READ(i2c, OUTY_H_XL, &readByte[2], 1);
 8000a84:	f107 0308 	add.w	r3, r7, #8
 8000a88:	1c9a      	adds	r2, r3, #2
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	212b      	movs	r1, #43	; 0x2b
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f7ff fef9 	bl	8000886 <XLG_READ>
		XLG_READ(i2c, OUTY_L_XL, &readByte[3], 1);
 8000a94:	f107 0308 	add.w	r3, r7, #8
 8000a98:	1cda      	adds	r2, r3, #3
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	212a      	movs	r1, #42	; 0x2a
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f7ff fef1 	bl	8000886 <XLG_READ>
		XLG_READ(i2c, OUTZ_H_XL, &readByte[4], 1);
 8000aa4:	f107 0308 	add.w	r3, r7, #8
 8000aa8:	1d1a      	adds	r2, r3, #4
 8000aaa:	2301      	movs	r3, #1
 8000aac:	212d      	movs	r1, #45	; 0x2d
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff fee9 	bl	8000886 <XLG_READ>
		XLG_READ(i2c, OUTZ_L_XL, &readByte[5], 1);
 8000ab4:	f107 0308 	add.w	r3, r7, #8
 8000ab8:	1d5a      	adds	r2, r3, #5
 8000aba:	2301      	movs	r3, #1
 8000abc:	212c      	movs	r1, #44	; 0x2c
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f7ff fee1 	bl	8000886 <XLG_READ>
		xlData->x = readByte[0];
 8000ac4:	7a3b      	ldrb	r3, [r7, #8]
 8000ac6:	b21a      	sxth	r2, r3
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	801a      	strh	r2, [r3, #0]
		xlData->x = (xlData->x << 8) | readByte[1];
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad2:	021b      	lsls	r3, r3, #8
 8000ad4:	b21a      	sxth	r2, r3
 8000ad6:	7a7b      	ldrb	r3, [r7, #9]
 8000ad8:	b21b      	sxth	r3, r3
 8000ada:	4313      	orrs	r3, r2
 8000adc:	b21a      	sxth	r2, r3
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	801a      	strh	r2, [r3, #0]
		xlData->y = readByte[2];
 8000ae2:	7abb      	ldrb	r3, [r7, #10]
 8000ae4:	b21a      	sxth	r2, r3
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	805a      	strh	r2, [r3, #2]
		xlData->y = (xlData->y << 8) | readByte[3];
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000af0:	021b      	lsls	r3, r3, #8
 8000af2:	b21a      	sxth	r2, r3
 8000af4:	7afb      	ldrb	r3, [r7, #11]
 8000af6:	b21b      	sxth	r3, r3
 8000af8:	4313      	orrs	r3, r2
 8000afa:	b21a      	sxth	r2, r3
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	805a      	strh	r2, [r3, #2]
		xlData->z = readByte[4];
 8000b00:	7b3b      	ldrb	r3, [r7, #12]
 8000b02:	b21a      	sxth	r2, r3
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	809a      	strh	r2, [r3, #4]
		xlData->z = (xlData->z << 8) | readByte[5];
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b0e:	021b      	lsls	r3, r3, #8
 8000b10:	b21a      	sxth	r2, r3
 8000b12:	7b7b      	ldrb	r3, [r7, #13]
 8000b14:	b21b      	sxth	r3, r3
 8000b16:	4313      	orrs	r3, r2
 8000b18:	b21a      	sxth	r2, r3
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	809a      	strh	r2, [r3, #4]
	}
	else
	{
		xlData->dataReady = false;
	}
}
 8000b1e:	e002      	b.n	8000b26 <XLG_XL_DATA_READ+0xe6>
		xlData->dataReady = false;
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	2200      	movs	r2, #0
 8000b24:	719a      	strb	r2, [r3, #6]
}
 8000b26:	bf00      	nop
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b32:	b093      	sub	sp, #76	; 0x4c
 8000b34:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b36:	f001 f8e4 	bl	8001d02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b3a:	f000 f87b 	bl	8000c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3e:	f000 fc2b 	bl	8001398 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b42:	f000 fbfb 	bl	800133c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000b46:	f000 fbc1 	bl	80012cc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8000b4a:	f000 fbef 	bl	800132c <MX_USB_OTG_FS_USB_Init>
  MX_TIM4_Init();
 8000b4e:	f000 fb35 	bl	80011bc <MX_TIM4_Init>
  MX_ADC1_Init();
 8000b52:	f000 f907 	bl	8000d64 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000b56:	f000 f957 	bl	8000e08 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000b5a:	f000 fab3 	bl	80010c4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000b5e:	f000 fa33 	bl	8000fc8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000b62:	f000 f991 	bl	8000e88 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  ADC_INIT(&hadc1, &throttlePot);
 8000b66:	4927      	ldr	r1, [pc, #156]	; (8000c04 <main+0xd4>)
 8000b68:	4827      	ldr	r0, [pc, #156]	; (8000c08 <main+0xd8>)
 8000b6a:	f7ff fd31 	bl	80005d0 <ADC_INIT>
  XLG_INIT(&hi2c1);
 8000b6e:	4827      	ldr	r0, [pc, #156]	; (8000c0c <main+0xdc>)
 8000b70:	f7ff fe4b 	bl	800080a <XLG_INIT>
  ESC_CONTROLLER* myESCSet = ESC_INIT(&htim3, &htim4, &hdma_tim4_ch1);
 8000b74:	4a26      	ldr	r2, [pc, #152]	; (8000c10 <main+0xe0>)
 8000b76:	4927      	ldr	r1, [pc, #156]	; (8000c14 <main+0xe4>)
 8000b78:	4827      	ldr	r0, [pc, #156]	; (8000c18 <main+0xe8>)
 8000b7a:	f7ff fd3a 	bl	80005f2 <ESC_INIT>
 8000b7e:	6378      	str	r0, [r7, #52]	; 0x34
  RX_CONTROLLER* myRX = RX_INIT(&htim1, &htim2);
 8000b80:	4926      	ldr	r1, [pc, #152]	; (8000c1c <main+0xec>)
 8000b82:	4827      	ldr	r0, [pc, #156]	; (8000c20 <main+0xf0>)
 8000b84:	f7ff fdb8 	bl	80006f8 <RX_INIT>
 8000b88:	6338      	str	r0, [r7, #48]	; 0x30

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  RX_UPDATE(myRX);
 8000b8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b8c:	f7ff fdff 	bl	800078e <RX_UPDATE>
	  XLG_G_DATA_READ(&hi2c1, &gData);
 8000b90:	4924      	ldr	r1, [pc, #144]	; (8000c24 <main+0xf4>)
 8000b92:	481e      	ldr	r0, [pc, #120]	; (8000c0c <main+0xdc>)
 8000b94:	f7ff fedd 	bl	8000952 <XLG_G_DATA_READ>
	  XLG_XL_DATA_READ(&hi2c1, &xlData);
 8000b98:	4923      	ldr	r1, [pc, #140]	; (8000c28 <main+0xf8>)
 8000b9a:	481c      	ldr	r0, [pc, #112]	; (8000c0c <main+0xdc>)
 8000b9c:	f7ff ff50 	bl	8000a40 <XLG_XL_DATA_READ>
	  if (xlData.dataReady)
 8000ba0:	4b21      	ldr	r3, [pc, #132]	; (8000c28 <main+0xf8>)
 8000ba2:	799b      	ldrb	r3, [r3, #6]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d0f0      	beq.n	8000b8a <main+0x5a>
	  {
		  uint8_t buf[48];
		  sprintf((char*)buf, "%i %i %i %i %i %i\r\n", xlData.x, xlData.y, xlData.z,
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <main+0xf8>)
 8000baa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bae:	461d      	mov	r5, r3
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <main+0xf8>)
 8000bb2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000bb6:	461e      	mov	r6, r3
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <main+0xf8>)
 8000bba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000bbe:	461a      	mov	r2, r3
		  	  	  	  	  	  	  	  	  	  	  	   gData.x, gData.y, gData.z);
 8000bc0:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <main+0xf4>)
 8000bc2:	f9b3 3000 	ldrsh.w	r3, [r3]
		  sprintf((char*)buf, "%i %i %i %i %i %i\r\n", xlData.x, xlData.y, xlData.z,
 8000bc6:	4619      	mov	r1, r3
		  	  	  	  	  	  	  	  	  	  	  	   gData.x, gData.y, gData.z);
 8000bc8:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <main+0xf4>)
 8000bca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		  sprintf((char*)buf, "%i %i %i %i %i %i\r\n", xlData.x, xlData.y, xlData.z,
 8000bce:	461c      	mov	r4, r3
		  	  	  	  	  	  	  	  	  	  	  	   gData.x, gData.y, gData.z);
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <main+0xf4>)
 8000bd2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		  sprintf((char*)buf, "%i %i %i %i %i %i\r\n", xlData.x, xlData.y, xlData.z,
 8000bd6:	4638      	mov	r0, r7
 8000bd8:	9303      	str	r3, [sp, #12]
 8000bda:	9402      	str	r4, [sp, #8]
 8000bdc:	9101      	str	r1, [sp, #4]
 8000bde:	9200      	str	r2, [sp, #0]
 8000be0:	4633      	mov	r3, r6
 8000be2:	462a      	mov	r2, r5
 8000be4:	4911      	ldr	r1, [pc, #68]	; (8000c2c <main+0xfc>)
 8000be6:	f007 fadf 	bl	80081a8 <siprintf>
		  HAL_UART_Transmit(&huart3, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000bea:	463b      	mov	r3, r7
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fb17 	bl	8000220 <strlen>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	4639      	mov	r1, r7
 8000bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfc:	480c      	ldr	r0, [pc, #48]	; (8000c30 <main+0x100>)
 8000bfe:	f006 fd59 	bl	80076b4 <HAL_UART_Transmit>
	  RX_UPDATE(myRX);
 8000c02:	e7c2      	b.n	8000b8a <main+0x5a>
 8000c04:	200003d4 	.word	0x200003d4
 8000c08:	20000244 	.word	0x20000244
 8000c0c:	200001b8 	.word	0x200001b8
 8000c10:	20000374 	.word	0x20000374
 8000c14:	20000098 	.word	0x20000098
 8000c18:	20000204 	.word	0x20000204
 8000c1c:	20000334 	.word	0x20000334
 8000c20:	20000294 	.word	0x20000294
 8000c24:	2000028c 	.word	0x2000028c
 8000c28:	200003d8 	.word	0x200003d8
 8000c2c:	0800885c 	.word	0x0800885c
 8000c30:	200000d8 	.word	0x200000d8

08000c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b0b4      	sub	sp, #208	; 0xd0
 8000c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000c3e:	2230      	movs	r2, #48	; 0x30
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f007 f9f0 	bl	8008028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c48:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	2280      	movs	r2, #128	; 0x80
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4618      	mov	r0, r3
 8000c62:	f007 f9e1 	bl	8008028 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c66:	f004 fa8f 	bl	8005188 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6a:	4b3b      	ldr	r3, [pc, #236]	; (8000d58 <SystemClock_Config+0x124>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	4a3a      	ldr	r2, [pc, #232]	; (8000d58 <SystemClock_Config+0x124>)
 8000c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c74:	6413      	str	r3, [r2, #64]	; 0x40
 8000c76:	4b38      	ldr	r3, [pc, #224]	; (8000d58 <SystemClock_Config+0x124>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c82:	4b36      	ldr	r3, [pc, #216]	; (8000d5c <SystemClock_Config+0x128>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a35      	ldr	r2, [pc, #212]	; (8000d5c <SystemClock_Config+0x128>)
 8000c88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c8c:	6013      	str	r3, [r2, #0]
 8000c8e:	4b33      	ldr	r3, [pc, #204]	; (8000d5c <SystemClock_Config+0x128>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ca0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ca4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cb6:	2308      	movs	r3, #8
 8000cb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000cbc:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000cc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000cca:	2309      	movs	r3, #9
 8000ccc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f004 fab7 	bl	8005248 <HAL_RCC_OscConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000ce0:	f000 fc5a 	bl	8001598 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ce4:	f004 fa60 	bl	80051a8 <HAL_PWREx_EnableOverDrive>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000cee:	f000 fc53 	bl	8001598 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf2:	230f      	movs	r3, #15
 8000cf4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d04:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d14:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d18:	2107      	movs	r1, #7
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f004 fd38 	bl	8005790 <HAL_RCC_ClockConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000d26:	f000 fc37 	bl	8001598 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <SystemClock_Config+0x12c>)
 8000d2c:	60fb      	str	r3, [r7, #12]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	66bb      	str	r3, [r7, #104]	; 0x68
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d3c:	f107 030c 	add.w	r3, r7, #12
 8000d40:	4618      	mov	r0, r3
 8000d42:	f004 ff1d 	bl	8005b80 <HAL_RCCEx_PeriphCLKConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000d4c:	f000 fc24 	bl	8001598 <Error_Handler>
  }
}
 8000d50:	bf00      	nop
 8000d52:	37d0      	adds	r7, #208	; 0xd0
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40007000 	.word	0x40007000
 8000d60:	00204100 	.word	0x00204100

08000d64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d76:	4b21      	ldr	r3, [pc, #132]	; (8000dfc <MX_ADC1_Init+0x98>)
 8000d78:	4a21      	ldr	r2, [pc, #132]	; (8000e00 <MX_ADC1_Init+0x9c>)
 8000d7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d7c:	4b1f      	ldr	r3, [pc, #124]	; (8000dfc <MX_ADC1_Init+0x98>)
 8000d7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d84:	4b1d      	ldr	r3, [pc, #116]	; (8000dfc <MX_ADC1_Init+0x98>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d8a:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <MX_ADC1_Init+0x98>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d90:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <MX_ADC1_Init+0x98>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d96:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <MX_ADC1_Init+0x98>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d9e:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <MX_ADC1_Init+0x98>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000da4:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <MX_ADC1_Init+0x98>)
 8000da6:	4a17      	ldr	r2, [pc, #92]	; (8000e04 <MX_ADC1_Init+0xa0>)
 8000da8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_ADC1_Init+0x98>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <MX_ADC1_Init+0x98>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_ADC1_Init+0x98>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_ADC1_Init+0x98>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dc4:	480d      	ldr	r0, [pc, #52]	; (8000dfc <MX_ADC1_Init+0x98>)
 8000dc6:	f000 fff9 	bl	8001dbc <HAL_ADC_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000dd0:	f000 fbe2 	bl	8001598 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000dd4:	2309      	movs	r3, #9
 8000dd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de0:	463b      	mov	r3, r7
 8000de2:	4619      	mov	r1, r3
 8000de4:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_ADC1_Init+0x98>)
 8000de6:	f001 f9e5 	bl	80021b4 <HAL_ADC_ConfigChannel>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000df0:	f000 fbd2 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000df4:	bf00      	nop
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000244 	.word	0x20000244
 8000e00:	40012000 	.word	0x40012000
 8000e04:	0f000001 	.word	0x0f000001

08000e08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <MX_I2C1_Init+0x74>)
 8000e0e:	4a1c      	ldr	r2, [pc, #112]	; (8000e80 <MX_I2C1_Init+0x78>)
 8000e10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000e12:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <MX_I2C1_Init+0x74>)
 8000e14:	4a1b      	ldr	r2, [pc, #108]	; (8000e84 <MX_I2C1_Init+0x7c>)
 8000e16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 212;
 8000e18:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <MX_I2C1_Init+0x74>)
 8000e1a:	22d4      	movs	r2, #212	; 0xd4
 8000e1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e1e:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <MX_I2C1_Init+0x74>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e24:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <MX_I2C1_Init+0x74>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e2a:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <MX_I2C1_Init+0x74>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <MX_I2C1_Init+0x74>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_I2C1_Init+0x74>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <MX_I2C1_Init+0x74>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e42:	480e      	ldr	r0, [pc, #56]	; (8000e7c <MX_I2C1_Init+0x74>)
 8000e44:	f002 fae6 	bl	8003414 <HAL_I2C_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e4e:	f000 fba3 	bl	8001598 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e52:	2100      	movs	r1, #0
 8000e54:	4809      	ldr	r0, [pc, #36]	; (8000e7c <MX_I2C1_Init+0x74>)
 8000e56:	f004 f900 	bl	800505a <HAL_I2CEx_ConfigAnalogFilter>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e60:	f000 fb9a 	bl	8001598 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e64:	2100      	movs	r1, #0
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_I2C1_Init+0x74>)
 8000e68:	f004 f942 	bl	80050f0 <HAL_I2CEx_ConfigDigitalFilter>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e72:	f000 fb91 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200001b8 	.word	0x200001b8
 8000e80:	40005400 	.word	0x40005400
 8000e84:	20404768 	.word	0x20404768

08000e88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08c      	sub	sp, #48	; 0x30
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e8e:	f107 031c 	add.w	r3, r7, #28
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e9e:	f107 0310 	add.w	r3, r7, #16
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000eaa:	463b      	mov	r3, r7
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000eb6:	4b42      	ldr	r3, [pc, #264]	; (8000fc0 <MX_TIM1_Init+0x138>)
 8000eb8:	4a42      	ldr	r2, [pc, #264]	; (8000fc4 <MX_TIM1_Init+0x13c>)
 8000eba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1079;
 8000ebc:	4b40      	ldr	r3, [pc, #256]	; (8000fc0 <MX_TIM1_Init+0x138>)
 8000ebe:	f240 4237 	movw	r2, #1079	; 0x437
 8000ec2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec4:	4b3e      	ldr	r3, [pc, #248]	; (8000fc0 <MX_TIM1_Init+0x138>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8000eca:	4b3d      	ldr	r3, [pc, #244]	; (8000fc0 <MX_TIM1_Init+0x138>)
 8000ecc:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000ed0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed2:	4b3b      	ldr	r3, [pc, #236]	; (8000fc0 <MX_TIM1_Init+0x138>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ed8:	4b39      	ldr	r3, [pc, #228]	; (8000fc0 <MX_TIM1_Init+0x138>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ede:	4b38      	ldr	r3, [pc, #224]	; (8000fc0 <MX_TIM1_Init+0x138>)
 8000ee0:	2280      	movs	r2, #128	; 0x80
 8000ee2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ee4:	4836      	ldr	r0, [pc, #216]	; (8000fc0 <MX_TIM1_Init+0x138>)
 8000ee6:	f005 f993 	bl	8006210 <HAL_TIM_Base_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000ef0:	f000 fb52 	bl	8001598 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000ef4:	4832      	ldr	r0, [pc, #200]	; (8000fc0 <MX_TIM1_Init+0x138>)
 8000ef6:	f005 fa51 	bl	800639c <HAL_TIM_IC_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f00:	f000 fb4a 	bl	8001598 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000f04:	2304      	movs	r3, #4
 8000f06:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000f08:	2370      	movs	r3, #112	; 0x70
 8000f0a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4828      	ldr	r0, [pc, #160]	; (8000fc0 <MX_TIM1_Init+0x138>)
 8000f20:	f005 fd12 	bl	8006948 <HAL_TIM_SlaveConfigSynchro>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000f2a:	f000 fb35 	bl	8001598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f3a:	f107 0310 	add.w	r3, r7, #16
 8000f3e:	4619      	mov	r1, r3
 8000f40:	481f      	ldr	r0, [pc, #124]	; (8000fc0 <MX_TIM1_Init+0x138>)
 8000f42:	f006 fadb 	bl	80074fc <HAL_TIMEx_MasterConfigSynchronization>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000f4c:	f000 fb24 	bl	8001598 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000f50:	2302      	movs	r3, #2
 8000f52:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f54:	2301      	movs	r3, #1
 8000f56:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f60:	463b      	mov	r3, r7
 8000f62:	2200      	movs	r2, #0
 8000f64:	4619      	mov	r1, r3
 8000f66:	4816      	ldr	r0, [pc, #88]	; (8000fc0 <MX_TIM1_Init+0x138>)
 8000f68:	f005 fb3a 	bl	80065e0 <HAL_TIM_IC_ConfigChannel>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000f72:	f000 fb11 	bl	8001598 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000f76:	463b      	mov	r3, r7
 8000f78:	2204      	movs	r2, #4
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4810      	ldr	r0, [pc, #64]	; (8000fc0 <MX_TIM1_Init+0x138>)
 8000f7e:	f005 fb2f 	bl	80065e0 <HAL_TIM_IC_ConfigChannel>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8000f88:	f000 fb06 	bl	8001598 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	2208      	movs	r2, #8
 8000f90:	4619      	mov	r1, r3
 8000f92:	480b      	ldr	r0, [pc, #44]	; (8000fc0 <MX_TIM1_Init+0x138>)
 8000f94:	f005 fb24 	bl	80065e0 <HAL_TIM_IC_ConfigChannel>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 8000f9e:	f000 fafb 	bl	8001598 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	220c      	movs	r2, #12
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_TIM1_Init+0x138>)
 8000faa:	f005 fb19 	bl	80065e0 <HAL_TIM_IC_ConfigChannel>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8000fb4:	f000 faf0 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	3730      	adds	r7, #48	; 0x30
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000294 	.word	0x20000294
 8000fc4:	40010000 	.word	0x40010000

08000fc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08c      	sub	sp, #48	; 0x30
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fde:	f107 0310 	add.w	r3, r7, #16
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000fea:	463b      	mov	r3, r7
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ff6:	4b32      	ldr	r3, [pc, #200]	; (80010c0 <MX_TIM2_Init+0xf8>)
 8000ff8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ffc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1079;
 8000ffe:	4b30      	ldr	r3, [pc, #192]	; (80010c0 <MX_TIM2_Init+0xf8>)
 8001000:	f240 4237 	movw	r2, #1079	; 0x437
 8001004:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001006:	4b2e      	ldr	r3, [pc, #184]	; (80010c0 <MX_TIM2_Init+0xf8>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 800100c:	4b2c      	ldr	r3, [pc, #176]	; (80010c0 <MX_TIM2_Init+0xf8>)
 800100e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001012:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001014:	4b2a      	ldr	r3, [pc, #168]	; (80010c0 <MX_TIM2_Init+0xf8>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800101a:	4b29      	ldr	r3, [pc, #164]	; (80010c0 <MX_TIM2_Init+0xf8>)
 800101c:	2280      	movs	r2, #128	; 0x80
 800101e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001020:	4827      	ldr	r0, [pc, #156]	; (80010c0 <MX_TIM2_Init+0xf8>)
 8001022:	f005 f8f5 	bl	8006210 <HAL_TIM_Base_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800102c:	f000 fab4 	bl	8001598 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001030:	4823      	ldr	r0, [pc, #140]	; (80010c0 <MX_TIM2_Init+0xf8>)
 8001032:	f005 f9b3 	bl	800639c <HAL_TIM_IC_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800103c:	f000 faac 	bl	8001598 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001040:	2304      	movs	r3, #4
 8001042:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	4619      	mov	r1, r3
 800104e:	481c      	ldr	r0, [pc, #112]	; (80010c0 <MX_TIM2_Init+0xf8>)
 8001050:	f005 fc7a 	bl	8006948 <HAL_TIM_SlaveConfigSynchro>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800105a:	f000 fa9d 	bl	8001598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	4619      	mov	r1, r3
 800106c:	4814      	ldr	r0, [pc, #80]	; (80010c0 <MX_TIM2_Init+0xf8>)
 800106e:	f006 fa45 	bl	80074fc <HAL_TIMEx_MasterConfigSynchronization>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001078:	f000 fa8e 	bl	8001598 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800107c:	2302      	movs	r3, #2
 800107e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001080:	2301      	movs	r3, #1
 8001082:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800108c:	463b      	mov	r3, r7
 800108e:	2200      	movs	r2, #0
 8001090:	4619      	mov	r1, r3
 8001092:	480b      	ldr	r0, [pc, #44]	; (80010c0 <MX_TIM2_Init+0xf8>)
 8001094:	f005 faa4 	bl	80065e0 <HAL_TIM_IC_ConfigChannel>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800109e:	f000 fa7b 	bl	8001598 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80010a2:	463b      	mov	r3, r7
 80010a4:	220c      	movs	r2, #12
 80010a6:	4619      	mov	r1, r3
 80010a8:	4805      	ldr	r0, [pc, #20]	; (80010c0 <MX_TIM2_Init+0xf8>)
 80010aa:	f005 fa99 	bl	80065e0 <HAL_TIM_IC_ConfigChannel>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80010b4:	f000 fa70 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010b8:	bf00      	nop
 80010ba:	3730      	adds	r7, #48	; 0x30
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000334 	.word	0x20000334

080010c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010d6:	463b      	mov	r3, r7
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
 80010e4:	615a      	str	r2, [r3, #20]
 80010e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010e8:	4b32      	ldr	r3, [pc, #200]	; (80011b4 <MX_TIM3_Init+0xf0>)
 80010ea:	4a33      	ldr	r2, [pc, #204]	; (80011b8 <MX_TIM3_Init+0xf4>)
 80010ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010ee:	4b31      	ldr	r3, [pc, #196]	; (80011b4 <MX_TIM3_Init+0xf0>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f4:	4b2f      	ldr	r3, [pc, #188]	; (80011b4 <MX_TIM3_Init+0xf0>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 359;
 80010fa:	4b2e      	ldr	r3, [pc, #184]	; (80011b4 <MX_TIM3_Init+0xf0>)
 80010fc:	f240 1267 	movw	r2, #359	; 0x167
 8001100:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001102:	4b2c      	ldr	r3, [pc, #176]	; (80011b4 <MX_TIM3_Init+0xf0>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001108:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <MX_TIM3_Init+0xf0>)
 800110a:	2280      	movs	r2, #128	; 0x80
 800110c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800110e:	4829      	ldr	r0, [pc, #164]	; (80011b4 <MX_TIM3_Init+0xf0>)
 8001110:	f005 f8d4 	bl	80062bc <HAL_TIM_PWM_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800111a:	f000 fa3d 	bl	8001598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	4619      	mov	r1, r3
 800112c:	4821      	ldr	r0, [pc, #132]	; (80011b4 <MX_TIM3_Init+0xf0>)
 800112e:	f006 f9e5 	bl	80074fc <HAL_TIMEx_MasterConfigSynchronization>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001138:	f000 fa2e 	bl	8001598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800113c:	2360      	movs	r3, #96	; 0x60
 800113e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001144:	2300      	movs	r3, #0
 8001146:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800114c:	463b      	mov	r3, r7
 800114e:	2200      	movs	r2, #0
 8001150:	4619      	mov	r1, r3
 8001152:	4818      	ldr	r0, [pc, #96]	; (80011b4 <MX_TIM3_Init+0xf0>)
 8001154:	f005 fae0 	bl	8006718 <HAL_TIM_PWM_ConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800115e:	f000 fa1b 	bl	8001598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001162:	463b      	mov	r3, r7
 8001164:	2204      	movs	r2, #4
 8001166:	4619      	mov	r1, r3
 8001168:	4812      	ldr	r0, [pc, #72]	; (80011b4 <MX_TIM3_Init+0xf0>)
 800116a:	f005 fad5 	bl	8006718 <HAL_TIM_PWM_ConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001174:	f000 fa10 	bl	8001598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001178:	463b      	mov	r3, r7
 800117a:	2208      	movs	r2, #8
 800117c:	4619      	mov	r1, r3
 800117e:	480d      	ldr	r0, [pc, #52]	; (80011b4 <MX_TIM3_Init+0xf0>)
 8001180:	f005 faca 	bl	8006718 <HAL_TIM_PWM_ConfigChannel>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 800118a:	f000 fa05 	bl	8001598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800118e:	463b      	mov	r3, r7
 8001190:	220c      	movs	r2, #12
 8001192:	4619      	mov	r1, r3
 8001194:	4807      	ldr	r0, [pc, #28]	; (80011b4 <MX_TIM3_Init+0xf0>)
 8001196:	f005 fabf 	bl	8006718 <HAL_TIM_PWM_ConfigChannel>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80011a0:	f000 f9fa 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011a4:	4803      	ldr	r0, [pc, #12]	; (80011b4 <MX_TIM3_Init+0xf0>)
 80011a6:	f000 fc0b 	bl	80019c0 <HAL_TIM_MspPostInit>

}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	; 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000204 	.word	0x20000204
 80011b8:	40000400 	.word	0x40000400

080011bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ce:	463b      	mov	r3, r7
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
 80011dc:	615a      	str	r2, [r3, #20]
 80011de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011e0:	4b38      	ldr	r3, [pc, #224]	; (80012c4 <MX_TIM4_Init+0x108>)
 80011e2:	4a39      	ldr	r2, [pc, #228]	; (80012c8 <MX_TIM4_Init+0x10c>)
 80011e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80011e6:	4b37      	ldr	r3, [pc, #220]	; (80012c4 <MX_TIM4_Init+0x108>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ec:	4b35      	ldr	r3, [pc, #212]	; (80012c4 <MX_TIM4_Init+0x108>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 359;
 80011f2:	4b34      	ldr	r3, [pc, #208]	; (80012c4 <MX_TIM4_Init+0x108>)
 80011f4:	f240 1267 	movw	r2, #359	; 0x167
 80011f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fa:	4b32      	ldr	r3, [pc, #200]	; (80012c4 <MX_TIM4_Init+0x108>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001200:	4b30      	ldr	r3, [pc, #192]	; (80012c4 <MX_TIM4_Init+0x108>)
 8001202:	2280      	movs	r2, #128	; 0x80
 8001204:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001206:	482f      	ldr	r0, [pc, #188]	; (80012c4 <MX_TIM4_Init+0x108>)
 8001208:	f005 f82d 	bl	8006266 <HAL_TIM_OC_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001212:	f000 f9c1 	bl	8001598 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001216:	482b      	ldr	r0, [pc, #172]	; (80012c4 <MX_TIM4_Init+0x108>)
 8001218:	f005 f850 	bl	80062bc <HAL_TIM_PWM_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8001222:	f000 f9b9 	bl	8001598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	4619      	mov	r1, r3
 8001234:	4823      	ldr	r0, [pc, #140]	; (80012c4 <MX_TIM4_Init+0x108>)
 8001236:	f006 f961 	bl	80074fc <HAL_TIMEx_MasterConfigSynchronization>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001240:	f000 f9aa 	bl	8001598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001244:	2300      	movs	r3, #0
 8001246:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001254:	463b      	mov	r3, r7
 8001256:	2200      	movs	r2, #0
 8001258:	4619      	mov	r1, r3
 800125a:	481a      	ldr	r0, [pc, #104]	; (80012c4 <MX_TIM4_Init+0x108>)
 800125c:	f005 f942 	bl	80064e4 <HAL_TIM_OC_ConfigChannel>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001266:	f000 f997 	bl	8001598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800126a:	2360      	movs	r3, #96	; 0x60
 800126c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800126e:	463b      	mov	r3, r7
 8001270:	2204      	movs	r2, #4
 8001272:	4619      	mov	r1, r3
 8001274:	4813      	ldr	r0, [pc, #76]	; (80012c4 <MX_TIM4_Init+0x108>)
 8001276:	f005 fa4f 	bl	8006718 <HAL_TIM_PWM_ConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8001280:	f000 f98a 	bl	8001598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001284:	463b      	mov	r3, r7
 8001286:	2208      	movs	r2, #8
 8001288:	4619      	mov	r1, r3
 800128a:	480e      	ldr	r0, [pc, #56]	; (80012c4 <MX_TIM4_Init+0x108>)
 800128c:	f005 fa44 	bl	8006718 <HAL_TIM_PWM_ConfigChannel>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8001296:	f000 f97f 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  // Set DMA Transfers to 17 with DBL and destination to CCR1 (15) with DBA
  htim4.Instance->DCR =  TIM_DCR_DBA_1 | TIM_DCR_DBA_2 | TIM_DCR_DBA_3; // Transfer at CCR2, 1 transfer
 800129a:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <MX_TIM4_Init+0x108>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	220e      	movs	r2, #14
 80012a0:	649a      	str	r2, [r3, #72]	; 0x48
  // Enable Update DMA Request
  htim4.Instance->DIER = TIM_DIER_UDE;
 80012a2:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <MX_TIM4_Init+0x108>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012aa:	60da      	str	r2, [r3, #12]
  // Enable DMA requests on CH1
  htim4.Instance->DIER = TIM_DIER_CC1DE;
 80012ac:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <MX_TIM4_Init+0x108>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012b4:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80012b6:	4803      	ldr	r0, [pc, #12]	; (80012c4 <MX_TIM4_Init+0x108>)
 80012b8:	f000 fb82 	bl	80019c0 <HAL_TIM_MspPostInit>

}
 80012bc:	bf00      	nop
 80012be:	3728      	adds	r7, #40	; 0x28
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000098 	.word	0x20000098
 80012c8:	40000800 	.word	0x40000800

080012cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012d0:	4b14      	ldr	r3, [pc, #80]	; (8001324 <MX_USART3_UART_Init+0x58>)
 80012d2:	4a15      	ldr	r2, [pc, #84]	; (8001328 <MX_USART3_UART_Init+0x5c>)
 80012d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012d6:	4b13      	ldr	r3, [pc, #76]	; (8001324 <MX_USART3_UART_Init+0x58>)
 80012d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <MX_USART3_UART_Init+0x58>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <MX_USART3_UART_Init+0x58>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <MX_USART3_UART_Init+0x58>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <MX_USART3_UART_Init+0x58>)
 80012f2:	220c      	movs	r2, #12
 80012f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <MX_USART3_UART_Init+0x58>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <MX_USART3_UART_Init+0x58>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001302:	4b08      	ldr	r3, [pc, #32]	; (8001324 <MX_USART3_UART_Init+0x58>)
 8001304:	2200      	movs	r2, #0
 8001306:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <MX_USART3_UART_Init+0x58>)
 800130a:	2200      	movs	r2, #0
 800130c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800130e:	4805      	ldr	r0, [pc, #20]	; (8001324 <MX_USART3_UART_Init+0x58>)
 8001310:	f006 f982 	bl	8007618 <HAL_UART_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800131a:	f000 f93d 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200000d8 	.word	0x200000d8
 8001328:	40004800 	.word	0x40004800

0800132c <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <MX_DMA_Init+0x58>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a13      	ldr	r2, [pc, #76]	; (8001394 <MX_DMA_Init+0x58>)
 8001348:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_DMA_Init+0x58>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2100      	movs	r1, #0
 800135e:	200b      	movs	r0, #11
 8001360:	f001 fac9 	bl	80028f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001364:	200b      	movs	r0, #11
 8001366:	f001 fae2 	bl	800292e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	2100      	movs	r1, #0
 800136e:	2010      	movs	r0, #16
 8001370:	f001 fac1 	bl	80028f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001374:	2010      	movs	r0, #16
 8001376:	f001 fada 	bl	800292e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	202f      	movs	r0, #47	; 0x2f
 8001380:	f001 fab9 	bl	80028f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001384:	202f      	movs	r0, #47	; 0x2f
 8001386:	f001 fad2 	bl	800292e <HAL_NVIC_EnableIRQ>

}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800

08001398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08e      	sub	sp, #56	; 0x38
 800139c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ae:	4b68      	ldr	r3, [pc, #416]	; (8001550 <MX_GPIO_Init+0x1b8>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a67      	ldr	r2, [pc, #412]	; (8001550 <MX_GPIO_Init+0x1b8>)
 80013b4:	f043 0304 	orr.w	r3, r3, #4
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b65      	ldr	r3, [pc, #404]	; (8001550 <MX_GPIO_Init+0x1b8>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0304 	and.w	r3, r3, #4
 80013c2:	623b      	str	r3, [r7, #32]
 80013c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013c6:	4b62      	ldr	r3, [pc, #392]	; (8001550 <MX_GPIO_Init+0x1b8>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a61      	ldr	r2, [pc, #388]	; (8001550 <MX_GPIO_Init+0x1b8>)
 80013cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b5f      	ldr	r3, [pc, #380]	; (8001550 <MX_GPIO_Init+0x1b8>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013da:	61fb      	str	r3, [r7, #28]
 80013dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	4b5c      	ldr	r3, [pc, #368]	; (8001550 <MX_GPIO_Init+0x1b8>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a5b      	ldr	r2, [pc, #364]	; (8001550 <MX_GPIO_Init+0x1b8>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b59      	ldr	r3, [pc, #356]	; (8001550 <MX_GPIO_Init+0x1b8>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	61bb      	str	r3, [r7, #24]
 80013f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f6:	4b56      	ldr	r3, [pc, #344]	; (8001550 <MX_GPIO_Init+0x1b8>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a55      	ldr	r2, [pc, #340]	; (8001550 <MX_GPIO_Init+0x1b8>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b53      	ldr	r3, [pc, #332]	; (8001550 <MX_GPIO_Init+0x1b8>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800140e:	4b50      	ldr	r3, [pc, #320]	; (8001550 <MX_GPIO_Init+0x1b8>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a4f      	ldr	r2, [pc, #316]	; (8001550 <MX_GPIO_Init+0x1b8>)
 8001414:	f043 0320 	orr.w	r3, r3, #32
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b4d      	ldr	r3, [pc, #308]	; (8001550 <MX_GPIO_Init+0x1b8>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0320 	and.w	r3, r3, #32
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001426:	4b4a      	ldr	r3, [pc, #296]	; (8001550 <MX_GPIO_Init+0x1b8>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a49      	ldr	r2, [pc, #292]	; (8001550 <MX_GPIO_Init+0x1b8>)
 800142c:	f043 0310 	orr.w	r3, r3, #16
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b47      	ldr	r3, [pc, #284]	; (8001550 <MX_GPIO_Init+0x1b8>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0310 	and.w	r3, r3, #16
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800143e:	4b44      	ldr	r3, [pc, #272]	; (8001550 <MX_GPIO_Init+0x1b8>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a43      	ldr	r2, [pc, #268]	; (8001550 <MX_GPIO_Init+0x1b8>)
 8001444:	f043 0308 	orr.w	r3, r3, #8
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b41      	ldr	r3, [pc, #260]	; (8001550 <MX_GPIO_Init+0x1b8>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001456:	4b3e      	ldr	r3, [pc, #248]	; (8001550 <MX_GPIO_Init+0x1b8>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a3d      	ldr	r2, [pc, #244]	; (8001550 <MX_GPIO_Init+0x1b8>)
 800145c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b3b      	ldr	r3, [pc, #236]	; (8001550 <MX_GPIO_Init+0x1b8>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001474:	4837      	ldr	r0, [pc, #220]	; (8001554 <MX_GPIO_Init+0x1bc>)
 8001476:	f001 ffb3 	bl	80033e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800147a:	2200      	movs	r2, #0
 800147c:	2140      	movs	r1, #64	; 0x40
 800147e:	4836      	ldr	r0, [pc, #216]	; (8001558 <MX_GPIO_Init+0x1c0>)
 8001480:	f001 ffae 	bl	80033e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001484:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800148a:	4b34      	ldr	r3, [pc, #208]	; (800155c <MX_GPIO_Init+0x1c4>)
 800148c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001496:	4619      	mov	r1, r3
 8001498:	4831      	ldr	r0, [pc, #196]	; (8001560 <MX_GPIO_Init+0x1c8>)
 800149a:	f001 fe07 	bl	80030ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800149e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b0:	4619      	mov	r1, r3
 80014b2:	482c      	ldr	r0, [pc, #176]	; (8001564 <MX_GPIO_Init+0x1cc>)
 80014b4:	f001 fdfa 	bl	80030ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80014b8:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014be:	2301      	movs	r3, #1
 80014c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ce:	4619      	mov	r1, r3
 80014d0:	4820      	ldr	r0, [pc, #128]	; (8001554 <MX_GPIO_Init+0x1bc>)
 80014d2:	f001 fdeb 	bl	80030ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014d6:	2340      	movs	r3, #64	; 0x40
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014da:	2301      	movs	r3, #1
 80014dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ea:	4619      	mov	r1, r3
 80014ec:	481a      	ldr	r0, [pc, #104]	; (8001558 <MX_GPIO_Init+0x1c0>)
 80014ee:	f001 fddd 	bl	80030ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014f2:	2380      	movs	r3, #128	; 0x80
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f6:	2300      	movs	r3, #0
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001502:	4619      	mov	r1, r3
 8001504:	4814      	ldr	r0, [pc, #80]	; (8001558 <MX_GPIO_Init+0x1c0>)
 8001506:	f001 fdd1 	bl	80030ac <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin PA10 USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|GPIO_PIN_10|USB_DM_Pin|USB_DP_Pin;
 800150a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001518:	2303      	movs	r3, #3
 800151a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800151c:	230a      	movs	r3, #10
 800151e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001524:	4619      	mov	r1, r3
 8001526:	4810      	ldr	r0, [pc, #64]	; (8001568 <MX_GPIO_Init+0x1d0>)
 8001528:	f001 fdc0 	bl	80030ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800152c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001532:	2300      	movs	r3, #0
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800153a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153e:	4619      	mov	r1, r3
 8001540:	4809      	ldr	r0, [pc, #36]	; (8001568 <MX_GPIO_Init+0x1d0>)
 8001542:	f001 fdb3 	bl	80030ac <HAL_GPIO_Init>

}
 8001546:	bf00      	nop
 8001548:	3738      	adds	r7, #56	; 0x38
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800
 8001554:	40020400 	.word	0x40020400
 8001558:	40021800 	.word	0x40021800
 800155c:	10110000 	.word	0x10110000
 8001560:	40020800 	.word	0x40020800
 8001564:	40021400 	.word	0x40021400
 8001568:	40020000 	.word	0x40020000

0800156c <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
    void HAL_ADC_ConvHalfCpltCallback (ADC_HandleTypeDef* hadc)
    {
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	__NOP();
 8001574:	bf00      	nop
    }
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <HAL_ADC_ConvCpltCallback>:

    void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef* hadc)
    {
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
    __NOP();
 800158a:	bf00      	nop
    }
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <HAL_MspInit+0x44>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <HAL_MspInit+0x44>)
 80015b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ba:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <HAL_MspInit+0x44>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_MspInit+0x44>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	4a08      	ldr	r2, [pc, #32]	; (80015ec <HAL_MspInit+0x44>)
 80015cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d0:	6453      	str	r3, [r2, #68]	; 0x44
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_MspInit+0x44>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800

080015f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	; 0x28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a15      	ldr	r2, [pc, #84]	; (8001664 <HAL_ADC_MspInit+0x74>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d123      	bne.n	800165a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <HAL_ADC_MspInit+0x78>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	4a14      	ldr	r2, [pc, #80]	; (8001668 <HAL_ADC_MspInit+0x78>)
 8001618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800161c:	6453      	str	r3, [r2, #68]	; 0x44
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_ADC_MspInit+0x78>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162a:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <HAL_ADC_MspInit+0x78>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a0e      	ldr	r2, [pc, #56]	; (8001668 <HAL_ADC_MspInit+0x78>)
 8001630:	f043 0302 	orr.w	r3, r3, #2
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <HAL_ADC_MspInit+0x78>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_THROTTLE_CONTROL_Pin;
 8001642:	2302      	movs	r3, #2
 8001644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001646:	2303      	movs	r3, #3
 8001648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_THROTTLE_CONTROL_GPIO_Port, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	4805      	ldr	r0, [pc, #20]	; (800166c <HAL_ADC_MspInit+0x7c>)
 8001656:	f001 fd29 	bl	80030ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800165a:	bf00      	nop
 800165c:	3728      	adds	r7, #40	; 0x28
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40012000 	.word	0x40012000
 8001668:	40023800 	.word	0x40023800
 800166c:	40020400 	.word	0x40020400

08001670 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a52      	ldr	r2, [pc, #328]	; (80017d8 <HAL_I2C_MspInit+0x168>)
 800168e:	4293      	cmp	r3, r2
 8001690:	f040 809d 	bne.w	80017ce <HAL_I2C_MspInit+0x15e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001694:	4b51      	ldr	r3, [pc, #324]	; (80017dc <HAL_I2C_MspInit+0x16c>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	4a50      	ldr	r2, [pc, #320]	; (80017dc <HAL_I2C_MspInit+0x16c>)
 800169a:	f043 0302 	orr.w	r3, r3, #2
 800169e:	6313      	str	r3, [r2, #48]	; 0x30
 80016a0:	4b4e      	ldr	r3, [pc, #312]	; (80017dc <HAL_I2C_MspInit+0x16c>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b2:	2312      	movs	r3, #18
 80016b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ba:	2303      	movs	r3, #3
 80016bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016be:	2304      	movs	r3, #4
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	4845      	ldr	r0, [pc, #276]	; (80017e0 <HAL_I2C_MspInit+0x170>)
 80016ca:	f001 fcef 	bl	80030ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016ce:	4b43      	ldr	r3, [pc, #268]	; (80017dc <HAL_I2C_MspInit+0x16c>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	4a42      	ldr	r2, [pc, #264]	; (80017dc <HAL_I2C_MspInit+0x16c>)
 80016d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016d8:	6413      	str	r3, [r2, #64]	; 0x40
 80016da:	4b40      	ldr	r3, [pc, #256]	; (80017dc <HAL_I2C_MspInit+0x16c>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 80016e6:	4b3f      	ldr	r3, [pc, #252]	; (80017e4 <HAL_I2C_MspInit+0x174>)
 80016e8:	4a3f      	ldr	r2, [pc, #252]	; (80017e8 <HAL_I2C_MspInit+0x178>)
 80016ea:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80016ec:	4b3d      	ldr	r3, [pc, #244]	; (80017e4 <HAL_I2C_MspInit+0x174>)
 80016ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016f2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016f4:	4b3b      	ldr	r3, [pc, #236]	; (80017e4 <HAL_I2C_MspInit+0x174>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016fa:	4b3a      	ldr	r3, [pc, #232]	; (80017e4 <HAL_I2C_MspInit+0x174>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001700:	4b38      	ldr	r3, [pc, #224]	; (80017e4 <HAL_I2C_MspInit+0x174>)
 8001702:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001706:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001708:	4b36      	ldr	r3, [pc, #216]	; (80017e4 <HAL_I2C_MspInit+0x174>)
 800170a:	2200      	movs	r2, #0
 800170c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800170e:	4b35      	ldr	r3, [pc, #212]	; (80017e4 <HAL_I2C_MspInit+0x174>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001714:	4b33      	ldr	r3, [pc, #204]	; (80017e4 <HAL_I2C_MspInit+0x174>)
 8001716:	2200      	movs	r2, #0
 8001718:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800171a:	4b32      	ldr	r3, [pc, #200]	; (80017e4 <HAL_I2C_MspInit+0x174>)
 800171c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001720:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001722:	4b30      	ldr	r3, [pc, #192]	; (80017e4 <HAL_I2C_MspInit+0x174>)
 8001724:	2204      	movs	r2, #4
 8001726:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001728:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <HAL_I2C_MspInit+0x174>)
 800172a:	2203      	movs	r2, #3
 800172c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_rx.Init.MemBurst = DMA_MBURST_INC4;
 800172e:	4b2d      	ldr	r3, [pc, #180]	; (80017e4 <HAL_I2C_MspInit+0x174>)
 8001730:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001734:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001736:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <HAL_I2C_MspInit+0x174>)
 8001738:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800173c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800173e:	4829      	ldr	r0, [pc, #164]	; (80017e4 <HAL_I2C_MspInit+0x174>)
 8001740:	f001 f910 	bl	8002964 <HAL_DMA_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_I2C_MspInit+0xde>
    {
      Error_Handler();
 800174a:	f7ff ff25 	bl	8001598 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a24      	ldr	r2, [pc, #144]	; (80017e4 <HAL_I2C_MspInit+0x174>)
 8001752:	63da      	str	r2, [r3, #60]	; 0x3c
 8001754:	4a23      	ldr	r2, [pc, #140]	; (80017e4 <HAL_I2C_MspInit+0x174>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 800175a:	4b24      	ldr	r3, [pc, #144]	; (80017ec <HAL_I2C_MspInit+0x17c>)
 800175c:	4a24      	ldr	r2, [pc, #144]	; (80017f0 <HAL_I2C_MspInit+0x180>)
 800175e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001760:	4b22      	ldr	r3, [pc, #136]	; (80017ec <HAL_I2C_MspInit+0x17c>)
 8001762:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001766:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001768:	4b20      	ldr	r3, [pc, #128]	; (80017ec <HAL_I2C_MspInit+0x17c>)
 800176a:	2240      	movs	r2, #64	; 0x40
 800176c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800176e:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <HAL_I2C_MspInit+0x17c>)
 8001770:	2200      	movs	r2, #0
 8001772:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001774:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <HAL_I2C_MspInit+0x17c>)
 8001776:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800177a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800177c:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <HAL_I2C_MspInit+0x17c>)
 800177e:	2200      	movs	r2, #0
 8001780:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001782:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <HAL_I2C_MspInit+0x17c>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001788:	4b18      	ldr	r3, [pc, #96]	; (80017ec <HAL_I2C_MspInit+0x17c>)
 800178a:	2200      	movs	r2, #0
 800178c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800178e:	4b17      	ldr	r3, [pc, #92]	; (80017ec <HAL_I2C_MspInit+0x17c>)
 8001790:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001794:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HAL_I2C_MspInit+0x17c>)
 8001798:	2204      	movs	r2, #4
 800179a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <HAL_I2C_MspInit+0x17c>)
 800179e:	2203      	movs	r2, #3
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_I2C_MspInit+0x17c>)
 80017a4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80017a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <HAL_I2C_MspInit+0x17c>)
 80017ac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80017b0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80017b2:	480e      	ldr	r0, [pc, #56]	; (80017ec <HAL_I2C_MspInit+0x17c>)
 80017b4:	f001 f8d6 	bl	8002964 <HAL_DMA_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_I2C_MspInit+0x152>
    {
      Error_Handler();
 80017be:	f7ff feeb 	bl	8001598 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a09      	ldr	r2, [pc, #36]	; (80017ec <HAL_I2C_MspInit+0x17c>)
 80017c6:	639a      	str	r2, [r3, #56]	; 0x38
 80017c8:	4a08      	ldr	r2, [pc, #32]	; (80017ec <HAL_I2C_MspInit+0x17c>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017ce:	bf00      	nop
 80017d0:	3728      	adds	r7, #40	; 0x28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40005400 	.word	0x40005400
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40020400 	.word	0x40020400
 80017e4:	200002d4 	.word	0x200002d4
 80017e8:	40026088 	.word	0x40026088
 80017ec:	20000158 	.word	0x20000158
 80017f0:	400260b8 	.word	0x400260b8

080017f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08c      	sub	sp, #48	; 0x30
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 031c 	add.w	r3, r7, #28
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a2e      	ldr	r2, [pc, #184]	; (80018cc <HAL_TIM_Base_MspInit+0xd8>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d129      	bne.n	800186a <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001816:	4b2e      	ldr	r3, [pc, #184]	; (80018d0 <HAL_TIM_Base_MspInit+0xdc>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	4a2d      	ldr	r2, [pc, #180]	; (80018d0 <HAL_TIM_Base_MspInit+0xdc>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6453      	str	r3, [r2, #68]	; 0x44
 8001822:	4b2b      	ldr	r3, [pc, #172]	; (80018d0 <HAL_TIM_Base_MspInit+0xdc>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	61bb      	str	r3, [r7, #24]
 800182c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800182e:	4b28      	ldr	r3, [pc, #160]	; (80018d0 <HAL_TIM_Base_MspInit+0xdc>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a27      	ldr	r2, [pc, #156]	; (80018d0 <HAL_TIM_Base_MspInit+0xdc>)
 8001834:	f043 0310 	orr.w	r3, r3, #16
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b25      	ldr	r3, [pc, #148]	; (80018d0 <HAL_TIM_Base_MspInit+0xdc>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0310 	and.w	r3, r3, #16
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	697b      	ldr	r3, [r7, #20]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13
 8001846:	f44f 43d5 	mov.w	r3, #27264	; 0x6a80
 800184a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001858:	2301      	movs	r3, #1
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800185c:	f107 031c 	add.w	r3, r7, #28
 8001860:	4619      	mov	r1, r3
 8001862:	481c      	ldr	r0, [pc, #112]	; (80018d4 <HAL_TIM_Base_MspInit+0xe0>)
 8001864:	f001 fc22 	bl	80030ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001868:	e02c      	b.n	80018c4 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM2)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001872:	d127      	bne.n	80018c4 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001874:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <HAL_TIM_Base_MspInit+0xdc>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	4a15      	ldr	r2, [pc, #84]	; (80018d0 <HAL_TIM_Base_MspInit+0xdc>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	6413      	str	r3, [r2, #64]	; 0x40
 8001880:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <HAL_TIM_Base_MspInit+0xdc>)
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188c:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <HAL_TIM_Base_MspInit+0xdc>)
 800188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001890:	4a0f      	ldr	r2, [pc, #60]	; (80018d0 <HAL_TIM_Base_MspInit+0xdc>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	6313      	str	r3, [r2, #48]	; 0x30
 8001898:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <HAL_TIM_Base_MspInit+0xdc>)
 800189a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80018a4:	2309      	movs	r3, #9
 80018a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018b4:	2301      	movs	r3, #1
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b8:	f107 031c 	add.w	r3, r7, #28
 80018bc:	4619      	mov	r1, r3
 80018be:	4806      	ldr	r0, [pc, #24]	; (80018d8 <HAL_TIM_Base_MspInit+0xe4>)
 80018c0:	f001 fbf4 	bl	80030ac <HAL_GPIO_Init>
}
 80018c4:	bf00      	nop
 80018c6:	3730      	adds	r7, #48	; 0x30
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40010000 	.word	0x40010000
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40020000 	.word	0x40020000

080018dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <HAL_TIM_PWM_MspInit+0x38>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d10b      	bne.n	8001906 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018ee:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <HAL_TIM_PWM_MspInit+0x3c>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	4a09      	ldr	r2, [pc, #36]	; (8001918 <HAL_TIM_PWM_MspInit+0x3c>)
 80018f4:	f043 0302 	orr.w	r3, r3, #2
 80018f8:	6413      	str	r3, [r2, #64]	; 0x40
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <HAL_TIM_PWM_MspInit+0x3c>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001906:	bf00      	nop
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40000400 	.word	0x40000400
 8001918:	40023800 	.word	0x40023800

0800191c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a21      	ldr	r2, [pc, #132]	; (80019b0 <HAL_TIM_OC_MspInit+0x94>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d13c      	bne.n	80019a8 <HAL_TIM_OC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800192e:	4b21      	ldr	r3, [pc, #132]	; (80019b4 <HAL_TIM_OC_MspInit+0x98>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	4a20      	ldr	r2, [pc, #128]	; (80019b4 <HAL_TIM_OC_MspInit+0x98>)
 8001934:	f043 0304 	orr.w	r3, r3, #4
 8001938:	6413      	str	r3, [r2, #64]	; 0x40
 800193a:	4b1e      	ldr	r3, [pc, #120]	; (80019b4 <HAL_TIM_OC_MspInit+0x98>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f003 0304 	and.w	r3, r3, #4
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8001946:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <HAL_TIM_OC_MspInit+0x9c>)
 8001948:	4a1c      	ldr	r2, [pc, #112]	; (80019bc <HAL_TIM_OC_MspInit+0xa0>)
 800194a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 800194c:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <HAL_TIM_OC_MspInit+0x9c>)
 800194e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001952:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001954:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <HAL_TIM_OC_MspInit+0x9c>)
 8001956:	2240      	movs	r2, #64	; 0x40
 8001958:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800195a:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <HAL_TIM_OC_MspInit+0x9c>)
 800195c:	2200      	movs	r2, #0
 800195e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001960:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_TIM_OC_MspInit+0x9c>)
 8001962:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001966:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001968:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <HAL_TIM_OC_MspInit+0x9c>)
 800196a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800196e:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <HAL_TIM_OC_MspInit+0x9c>)
 8001972:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001976:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <HAL_TIM_OC_MspInit+0x9c>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <HAL_TIM_OC_MspInit+0x9c>)
 8001980:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001984:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001986:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <HAL_TIM_OC_MspInit+0x9c>)
 8001988:	2200      	movs	r2, #0
 800198a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 800198c:	480a      	ldr	r0, [pc, #40]	; (80019b8 <HAL_TIM_OC_MspInit+0x9c>)
 800198e:	f000 ffe9 	bl	8002964 <HAL_DMA_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <HAL_TIM_OC_MspInit+0x80>
    {
      Error_Handler();
 8001998:	f7ff fdfe 	bl	8001598 <Error_Handler>
    }

    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a06      	ldr	r2, [pc, #24]	; (80019b8 <HAL_TIM_OC_MspInit+0x9c>)
 80019a0:	625a      	str	r2, [r3, #36]	; 0x24
 80019a2:	4a05      	ldr	r2, [pc, #20]	; (80019b8 <HAL_TIM_OC_MspInit+0x9c>)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80019a8:	bf00      	nop
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40000800 	.word	0x40000800
 80019b4:	40023800 	.word	0x40023800
 80019b8:	20000374 	.word	0x20000374
 80019bc:	40026010 	.word	0x40026010

080019c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08c      	sub	sp, #48	; 0x30
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 031c 	add.w	r3, r7, #28
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a3f      	ldr	r2, [pc, #252]	; (8001adc <HAL_TIM_MspPostInit+0x11c>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d155      	bne.n	8001a8e <HAL_TIM_MspPostInit+0xce>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e2:	4b3f      	ldr	r3, [pc, #252]	; (8001ae0 <HAL_TIM_MspPostInit+0x120>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a3e      	ldr	r2, [pc, #248]	; (8001ae0 <HAL_TIM_MspPostInit+0x120>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b3c      	ldr	r3, [pc, #240]	; (8001ae0 <HAL_TIM_MspPostInit+0x120>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	61bb      	str	r3, [r7, #24]
 80019f8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fa:	4b39      	ldr	r3, [pc, #228]	; (8001ae0 <HAL_TIM_MspPostInit+0x120>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a38      	ldr	r2, [pc, #224]	; (8001ae0 <HAL_TIM_MspPostInit+0x120>)
 8001a00:	f043 0302 	orr.w	r3, r3, #2
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b36      	ldr	r3, [pc, #216]	; (8001ae0 <HAL_TIM_MspPostInit+0x120>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a12:	4b33      	ldr	r3, [pc, #204]	; (8001ae0 <HAL_TIM_MspPostInit+0x120>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a32      	ldr	r2, [pc, #200]	; (8001ae0 <HAL_TIM_MspPostInit+0x120>)
 8001a18:	f043 0304 	orr.w	r3, r3, #4
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b30      	ldr	r3, [pc, #192]	; (8001ae0 <HAL_TIM_MspPostInit+0x120>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM_3_CH1_MOTOR_1_Pin|TIM_3_CH1_MOTOR_2_Pin;
 8001a2a:	23c0      	movs	r3, #192	; 0xc0
 8001a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3e:	f107 031c 	add.w	r3, r7, #28
 8001a42:	4619      	mov	r1, r3
 8001a44:	4827      	ldr	r0, [pc, #156]	; (8001ae4 <HAL_TIM_MspPostInit+0x124>)
 8001a46:	f001 fb31 	bl	80030ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM_3_CH1_MOTOR_3_Pin;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a56:	2300      	movs	r3, #0
 8001a58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM_3_CH1_MOTOR_3_GPIO_Port, &GPIO_InitStruct);
 8001a5e:	f107 031c 	add.w	r3, r7, #28
 8001a62:	4619      	mov	r1, r3
 8001a64:	4820      	ldr	r0, [pc, #128]	; (8001ae8 <HAL_TIM_MspPostInit+0x128>)
 8001a66:	f001 fb21 	bl	80030ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM_3_CH1_MOTOR_4_Pin;
 8001a6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM_3_CH1_MOTOR_4_GPIO_Port, &GPIO_InitStruct);
 8001a80:	f107 031c 	add.w	r3, r7, #28
 8001a84:	4619      	mov	r1, r3
 8001a86:	4819      	ldr	r0, [pc, #100]	; (8001aec <HAL_TIM_MspPostInit+0x12c>)
 8001a88:	f001 fb10 	bl	80030ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001a8c:	e021      	b.n	8001ad2 <HAL_TIM_MspPostInit+0x112>
  else if(htim->Instance==TIM4)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a17      	ldr	r2, [pc, #92]	; (8001af0 <HAL_TIM_MspPostInit+0x130>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d11c      	bne.n	8001ad2 <HAL_TIM_MspPostInit+0x112>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a98:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <HAL_TIM_MspPostInit+0x120>)
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	4a10      	ldr	r2, [pc, #64]	; (8001ae0 <HAL_TIM_MspPostInit+0x120>)
 8001a9e:	f043 0308 	orr.w	r3, r3, #8
 8001aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa4:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <HAL_TIM_MspPostInit+0x120>)
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	f003 0308 	and.w	r3, r3, #8
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_DMA_LATCH_Pin|TIM4_CH2_MOTOR_1_Pin|TIM4_CH3_MOTOR_2_Pin;
 8001ab0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ac6:	f107 031c 	add.w	r3, r7, #28
 8001aca:	4619      	mov	r1, r3
 8001acc:	4809      	ldr	r0, [pc, #36]	; (8001af4 <HAL_TIM_MspPostInit+0x134>)
 8001ace:	f001 faed 	bl	80030ac <HAL_GPIO_Init>
}
 8001ad2:	bf00      	nop
 8001ad4:	3730      	adds	r7, #48	; 0x30
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40000400 	.word	0x40000400
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	40020000 	.word	0x40020000
 8001ae8:	40020400 	.word	0x40020400
 8001aec:	40020800 	.word	0x40020800
 8001af0:	40000800 	.word	0x40000800
 8001af4:	40020c00 	.word	0x40020c00

08001af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	; 0x28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a17      	ldr	r2, [pc, #92]	; (8001b74 <HAL_UART_MspInit+0x7c>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d128      	bne.n	8001b6c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b1a:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <HAL_UART_MspInit+0x80>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	4a16      	ldr	r2, [pc, #88]	; (8001b78 <HAL_UART_MspInit+0x80>)
 8001b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b24:	6413      	str	r3, [r2, #64]	; 0x40
 8001b26:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <HAL_UART_MspInit+0x80>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b32:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <HAL_UART_MspInit+0x80>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	4a10      	ldr	r2, [pc, #64]	; (8001b78 <HAL_UART_MspInit+0x80>)
 8001b38:	f043 0308 	orr.w	r3, r3, #8
 8001b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <HAL_UART_MspInit+0x80>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b50:	2302      	movs	r3, #2
 8001b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b5c:	2307      	movs	r3, #7
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	4619      	mov	r1, r3
 8001b66:	4805      	ldr	r0, [pc, #20]	; (8001b7c <HAL_UART_MspInit+0x84>)
 8001b68:	f001 faa0 	bl	80030ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b6c:	bf00      	nop
 8001b6e:	3728      	adds	r7, #40	; 0x28
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40004800 	.word	0x40004800
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40020c00 	.word	0x40020c00

08001b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b92:	e7fe      	b.n	8001b92 <HardFault_Handler+0x4>

08001b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b98:	e7fe      	b.n	8001b98 <MemManage_Handler+0x4>

08001b9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b9e:	e7fe      	b.n	8001b9e <BusFault_Handler+0x4>

08001ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba4:	e7fe      	b.n	8001ba4 <UsageFault_Handler+0x4>

08001ba6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bd4:	f000 f8d2 	bl	8001d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8001be0:	4802      	ldr	r0, [pc, #8]	; (8001bec <DMA1_Stream0_IRQHandler+0x10>)
 8001be2:	f000 ffef 	bl	8002bc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000374 	.word	0x20000374

08001bf0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <DMA1_Stream5_IRQHandler+0x10>)
 8001bf6:	f000 ffe5 	bl	8002bc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200002d4 	.word	0x200002d4

08001c04 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001c08:	4802      	ldr	r0, [pc, #8]	; (8001c14 <DMA1_Stream7_IRQHandler+0x10>)
 8001c0a:	f000 ffdb 	bl	8002bc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000158 	.word	0x20000158

08001c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c20:	4a14      	ldr	r2, [pc, #80]	; (8001c74 <_sbrk+0x5c>)
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <_sbrk+0x60>)
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <_sbrk+0x64>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d102      	bne.n	8001c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <_sbrk+0x64>)
 8001c36:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <_sbrk+0x68>)
 8001c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <_sbrk+0x64>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d207      	bcs.n	8001c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c48:	f006 f9bc 	bl	8007fc4 <__errno>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	230c      	movs	r3, #12
 8001c50:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001c52:	f04f 33ff 	mov.w	r3, #4294967295
 8001c56:	e009      	b.n	8001c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <_sbrk+0x64>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <_sbrk+0x64>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	4a05      	ldr	r2, [pc, #20]	; (8001c7c <_sbrk+0x64>)
 8001c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20040000 	.word	0x20040000
 8001c78:	00000400 	.word	0x00000400
 8001c7c:	2000008c 	.word	0x2000008c
 8001c80:	200003e8 	.word	0x200003e8

08001c84 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c88:	4b08      	ldr	r3, [pc, #32]	; (8001cac <SystemInit+0x28>)
 8001c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c8e:	4a07      	ldr	r2, [pc, #28]	; (8001cac <SystemInit+0x28>)
 8001c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <SystemInit+0x28>)
 8001c9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c9e:	609a      	str	r2, [r3, #8]
#endif
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ce8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001cb4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001cb6:	e003      	b.n	8001cc0 <LoopCopyDataInit>

08001cb8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001cba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001cbc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001cbe:	3104      	adds	r1, #4

08001cc0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001cc0:	480b      	ldr	r0, [pc, #44]	; (8001cf0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001cc4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001cc6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001cc8:	d3f6      	bcc.n	8001cb8 <CopyDataInit>
  ldr  r2, =_sbss
 8001cca:	4a0b      	ldr	r2, [pc, #44]	; (8001cf8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ccc:	e002      	b.n	8001cd4 <LoopFillZerobss>

08001cce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001cce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001cd0:	f842 3b04 	str.w	r3, [r2], #4

08001cd4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001cd4:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001cd6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001cd8:	d3f9      	bcc.n	8001cce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cda:	f7ff ffd3 	bl	8001c84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cde:	f006 f977 	bl	8007fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ce2:	f7fe ff25 	bl	8000b30 <main>
  bx  lr    
 8001ce6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ce8:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8001cec:	080088d4 	.word	0x080088d4
  ldr  r0, =_sdata
 8001cf0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001cf4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001cf8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001cfc:	200003e8 	.word	0x200003e8

08001d00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d00:	e7fe      	b.n	8001d00 <ADC_IRQHandler>

08001d02 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d06:	2003      	movs	r0, #3
 8001d08:	f000 fdea 	bl	80028e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f000 f805 	bl	8001d1c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001d12:	f7ff fc49 	bl	80015a8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d24:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <HAL_InitTick+0x54>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <HAL_InitTick+0x58>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 fe05 	bl	800294a <HAL_SYSTICK_Config>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e00e      	b.n	8001d68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b0f      	cmp	r3, #15
 8001d4e:	d80a      	bhi.n	8001d66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d50:	2200      	movs	r2, #0
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	f04f 30ff 	mov.w	r0, #4294967295
 8001d58:	f000 fdcd 	bl	80028f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d5c:	4a06      	ldr	r2, [pc, #24]	; (8001d78 <HAL_InitTick+0x5c>)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e000      	b.n	8001d68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000000 	.word	0x20000000
 8001d74:	20000008 	.word	0x20000008
 8001d78:	20000004 	.word	0x20000004

08001d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_IncTick+0x20>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	461a      	mov	r2, r3
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_IncTick+0x24>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <HAL_IncTick+0x24>)
 8001d8e:	6013      	str	r3, [r2, #0]
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000008 	.word	0x20000008
 8001da0:	200003e0 	.word	0x200003e0

08001da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return uwTick;
 8001da8:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <HAL_GetTick+0x14>)
 8001daa:	681b      	ldr	r3, [r3, #0]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	200003e0 	.word	0x200003e0

08001dbc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e031      	b.n	8001e36 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d109      	bne.n	8001dee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff fc08 	bl	80015f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f003 0310 	and.w	r3, r3, #16
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d116      	bne.n	8001e28 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dfe:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <HAL_ADC_Init+0x84>)
 8001e00:	4013      	ands	r3, r2
 8001e02:	f043 0202 	orr.w	r2, r3, #2
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 fb1c 	bl	8002448 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f023 0303 	bic.w	r3, r3, #3
 8001e1e:	f043 0201 	orr.w	r2, r3, #1
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	641a      	str	r2, [r3, #64]	; 0x40
 8001e26:	e001      	b.n	8001e2c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	ffffeefd 	.word	0xffffeefd

08001e44 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d101      	bne.n	8001e5e <HAL_ADC_Start+0x1a>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e0a0      	b.n	8001fa0 <HAL_ADC_Start+0x15c>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d018      	beq.n	8001ea6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0201 	orr.w	r2, r2, #1
 8001e82:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001e84:	4b49      	ldr	r3, [pc, #292]	; (8001fac <HAL_ADC_Start+0x168>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a49      	ldr	r2, [pc, #292]	; (8001fb0 <HAL_ADC_Start+0x16c>)
 8001e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8e:	0c9a      	lsrs	r2, r3, #18
 8001e90:	4613      	mov	r3, r2
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	4413      	add	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001e98:	e002      	b.n	8001ea0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f9      	bne.n	8001e9a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d174      	bne.n	8001f9e <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eb8:	4b3e      	ldr	r3, [pc, #248]	; (8001fb4 <HAL_ADC_Start+0x170>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d007      	beq.n	8001ee2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001eda:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eee:	d106      	bne.n	8001efe <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef4:	f023 0206 	bic.w	r2, r3, #6
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	645a      	str	r2, [r3, #68]	; 0x44
 8001efc:	e002      	b.n	8001f04 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f14:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001f16:	4b28      	ldr	r3, [pc, #160]	; (8001fb8 <HAL_ADC_Start+0x174>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 031f 	and.w	r3, r3, #31
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10f      	bne.n	8001f42 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d136      	bne.n	8001f9e <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	e02d      	b.n	8001f9e <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a1d      	ldr	r2, [pc, #116]	; (8001fbc <HAL_ADC_Start+0x178>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d10e      	bne.n	8001f6a <HAL_ADC_Start+0x126>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d107      	bne.n	8001f6a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f68:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001f6a:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <HAL_ADC_Start+0x174>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 0310 	and.w	r3, r3, #16
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d113      	bne.n	8001f9e <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a11      	ldr	r2, [pc, #68]	; (8001fc0 <HAL_ADC_Start+0x17c>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d10e      	bne.n	8001f9e <HAL_ADC_Start+0x15a>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d107      	bne.n	8001f9e <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f9c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	20000000 	.word	0x20000000
 8001fb0:	431bde83 	.word	0x431bde83
 8001fb4:	fffff8fe 	.word	0xfffff8fe
 8001fb8:	40012300 	.word	0x40012300
 8001fbc:	40012000 	.word	0x40012000
 8001fc0:	40012200 	.word	0x40012200

08001fc4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d101      	bne.n	8001fe2 <HAL_ADC_Start_DMA+0x1e>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e0c7      	b.n	8002172 <HAL_ADC_Start_DMA+0x1ae>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d018      	beq.n	800202a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 0201 	orr.w	r2, r2, #1
 8002006:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002008:	4b5c      	ldr	r3, [pc, #368]	; (800217c <HAL_ADC_Start_DMA+0x1b8>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a5c      	ldr	r2, [pc, #368]	; (8002180 <HAL_ADC_Start_DMA+0x1bc>)
 800200e:	fba2 2303 	umull	r2, r3, r2, r3
 8002012:	0c9a      	lsrs	r2, r3, #18
 8002014:	4613      	mov	r3, r2
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	4413      	add	r3, r2
 800201a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800201c:	e002      	b.n	8002024 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	3b01      	subs	r3, #1
 8002022:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f9      	bne.n	800201e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b01      	cmp	r3, #1
 8002036:	f040 809b 	bne.w	8002170 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800203e:	4b51      	ldr	r3, [pc, #324]	; (8002184 <HAL_ADC_Start_DMA+0x1c0>)
 8002040:	4013      	ands	r3, r2
 8002042:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002054:	2b00      	cmp	r3, #0
 8002056:	d007      	beq.n	8002068 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002060:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002074:	d106      	bne.n	8002084 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	f023 0206 	bic.w	r2, r3, #6
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	645a      	str	r2, [r3, #68]	; 0x44
 8002082:	e002      	b.n	800208a <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002096:	4a3c      	ldr	r2, [pc, #240]	; (8002188 <HAL_ADC_Start_DMA+0x1c4>)
 8002098:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209e:	4a3b      	ldr	r2, [pc, #236]	; (800218c <HAL_ADC_Start_DMA+0x1c8>)
 80020a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a6:	4a3a      	ldr	r2, [pc, #232]	; (8002190 <HAL_ADC_Start_DMA+0x1cc>)
 80020a8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80020b2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80020c2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020d2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	334c      	adds	r3, #76	; 0x4c
 80020de:	4619      	mov	r1, r3
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f000 fcec 	bl	8002ac0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80020e8:	4b2a      	ldr	r3, [pc, #168]	; (8002194 <HAL_ADC_Start_DMA+0x1d0>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 031f 	and.w	r3, r3, #31
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10f      	bne.n	8002114 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d136      	bne.n	8002170 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	e02d      	b.n	8002170 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a1f      	ldr	r2, [pc, #124]	; (8002198 <HAL_ADC_Start_DMA+0x1d4>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d10e      	bne.n	800213c <HAL_ADC_Start_DMA+0x178>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d107      	bne.n	800213c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800213a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800213c:	4b15      	ldr	r3, [pc, #84]	; (8002194 <HAL_ADC_Start_DMA+0x1d0>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 0310 	and.w	r3, r3, #16
 8002144:	2b00      	cmp	r3, #0
 8002146:	d113      	bne.n	8002170 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a13      	ldr	r2, [pc, #76]	; (800219c <HAL_ADC_Start_DMA+0x1d8>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d10e      	bne.n	8002170 <HAL_ADC_Start_DMA+0x1ac>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d107      	bne.n	8002170 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800216e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000000 	.word	0x20000000
 8002180:	431bde83 	.word	0x431bde83
 8002184:	fffff8fe 	.word	0xfffff8fe
 8002188:	0800263d 	.word	0x0800263d
 800218c:	080026f7 	.word	0x080026f7
 8002190:	08002713 	.word	0x08002713
 8002194:	40012300 	.word	0x40012300
 8002198:	40012000 	.word	0x40012000
 800219c:	40012200 	.word	0x40012200

080021a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x1c>
 80021cc:	2302      	movs	r3, #2
 80021ce:	e12a      	b.n	8002426 <HAL_ADC_ConfigChannel+0x272>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b09      	cmp	r3, #9
 80021de:	d93a      	bls.n	8002256 <HAL_ADC_ConfigChannel+0xa2>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021e8:	d035      	beq.n	8002256 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68d9      	ldr	r1, [r3, #12]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	461a      	mov	r2, r3
 80021f8:	4613      	mov	r3, r2
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	4413      	add	r3, r2
 80021fe:	3b1e      	subs	r3, #30
 8002200:	2207      	movs	r2, #7
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43da      	mvns	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	400a      	ands	r2, r1
 800220e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a87      	ldr	r2, [pc, #540]	; (8002434 <HAL_ADC_ConfigChannel+0x280>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d10a      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68d9      	ldr	r1, [r3, #12]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	061a      	lsls	r2, r3, #24
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800222e:	e035      	b.n	800229c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68d9      	ldr	r1, [r3, #12]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	b29b      	uxth	r3, r3
 8002240:	4618      	mov	r0, r3
 8002242:	4603      	mov	r3, r0
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	4403      	add	r3, r0
 8002248:	3b1e      	subs	r3, #30
 800224a:	409a      	lsls	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002254:	e022      	b.n	800229c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6919      	ldr	r1, [r3, #16]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	b29b      	uxth	r3, r3
 8002262:	461a      	mov	r2, r3
 8002264:	4613      	mov	r3, r2
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	4413      	add	r3, r2
 800226a:	2207      	movs	r2, #7
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43da      	mvns	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	400a      	ands	r2, r1
 8002278:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6919      	ldr	r1, [r3, #16]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	b29b      	uxth	r3, r3
 800228a:	4618      	mov	r0, r3
 800228c:	4603      	mov	r3, r0
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	4403      	add	r3, r0
 8002292:	409a      	lsls	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b06      	cmp	r3, #6
 80022a2:	d824      	bhi.n	80022ee <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	3b05      	subs	r3, #5
 80022b6:	221f      	movs	r2, #31
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43da      	mvns	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	400a      	ands	r2, r1
 80022c4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	4618      	mov	r0, r3
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	3b05      	subs	r3, #5
 80022e0:	fa00 f203 	lsl.w	r2, r0, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	635a      	str	r2, [r3, #52]	; 0x34
 80022ec:	e04c      	b.n	8002388 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b0c      	cmp	r3, #12
 80022f4:	d824      	bhi.n	8002340 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	3b23      	subs	r3, #35	; 0x23
 8002308:	221f      	movs	r2, #31
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43da      	mvns	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	400a      	ands	r2, r1
 8002316:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	b29b      	uxth	r3, r3
 8002324:	4618      	mov	r0, r3
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	3b23      	subs	r3, #35	; 0x23
 8002332:	fa00 f203 	lsl.w	r2, r0, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	631a      	str	r2, [r3, #48]	; 0x30
 800233e:	e023      	b.n	8002388 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	3b41      	subs	r3, #65	; 0x41
 8002352:	221f      	movs	r2, #31
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43da      	mvns	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	400a      	ands	r2, r1
 8002360:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	b29b      	uxth	r3, r3
 800236e:	4618      	mov	r0, r3
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	3b41      	subs	r3, #65	; 0x41
 800237c:	fa00 f203 	lsl.w	r2, r0, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a2a      	ldr	r2, [pc, #168]	; (8002438 <HAL_ADC_ConfigChannel+0x284>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d10a      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x1f4>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800239a:	d105      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800239c:	4b27      	ldr	r3, [pc, #156]	; (800243c <HAL_ADC_ConfigChannel+0x288>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	4a26      	ldr	r2, [pc, #152]	; (800243c <HAL_ADC_ConfigChannel+0x288>)
 80023a2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80023a6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a22      	ldr	r2, [pc, #136]	; (8002438 <HAL_ADC_ConfigChannel+0x284>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d109      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x212>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2b12      	cmp	r3, #18
 80023b8:	d105      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80023ba:	4b20      	ldr	r3, [pc, #128]	; (800243c <HAL_ADC_ConfigChannel+0x288>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	4a1f      	ldr	r2, [pc, #124]	; (800243c <HAL_ADC_ConfigChannel+0x288>)
 80023c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023c4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a1b      	ldr	r2, [pc, #108]	; (8002438 <HAL_ADC_ConfigChannel+0x284>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d125      	bne.n	800241c <HAL_ADC_ConfigChannel+0x268>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a17      	ldr	r2, [pc, #92]	; (8002434 <HAL_ADC_ConfigChannel+0x280>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d003      	beq.n	80023e2 <HAL_ADC_ConfigChannel+0x22e>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b11      	cmp	r3, #17
 80023e0:	d11c      	bne.n	800241c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80023e2:	4b16      	ldr	r3, [pc, #88]	; (800243c <HAL_ADC_ConfigChannel+0x288>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	4a15      	ldr	r2, [pc, #84]	; (800243c <HAL_ADC_ConfigChannel+0x288>)
 80023e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023ec:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a10      	ldr	r2, [pc, #64]	; (8002434 <HAL_ADC_ConfigChannel+0x280>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d111      	bne.n	800241c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80023f8:	4b11      	ldr	r3, [pc, #68]	; (8002440 <HAL_ADC_ConfigChannel+0x28c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a11      	ldr	r2, [pc, #68]	; (8002444 <HAL_ADC_ConfigChannel+0x290>)
 80023fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002402:	0c9a      	lsrs	r2, r3, #18
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800240e:	e002      	b.n	8002416 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	3b01      	subs	r3, #1
 8002414:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1f9      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	10000012 	.word	0x10000012
 8002438:	40012000 	.word	0x40012000
 800243c:	40012300 	.word	0x40012300
 8002440:	20000000 	.word	0x20000000
 8002444:	431bde83 	.word	0x431bde83

08002448 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002450:	4b78      	ldr	r3, [pc, #480]	; (8002634 <ADC_Init+0x1ec>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	4a77      	ldr	r2, [pc, #476]	; (8002634 <ADC_Init+0x1ec>)
 8002456:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800245a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800245c:	4b75      	ldr	r3, [pc, #468]	; (8002634 <ADC_Init+0x1ec>)
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	4973      	ldr	r1, [pc, #460]	; (8002634 <ADC_Init+0x1ec>)
 8002466:	4313      	orrs	r3, r2
 8002468:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002478:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6859      	ldr	r1, [r3, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	021a      	lsls	r2, r3, #8
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800249c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6859      	ldr	r1, [r3, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6899      	ldr	r1, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d6:	4a58      	ldr	r2, [pc, #352]	; (8002638 <ADC_Init+0x1f0>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d022      	beq.n	8002522 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6899      	ldr	r1, [r3, #8]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800250c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6899      	ldr	r1, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	e00f      	b.n	8002542 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002530:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002540:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0202 	bic.w	r2, r2, #2
 8002550:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6899      	ldr	r1, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	005a      	lsls	r2, r3, #1
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3020 	ldrb.w	r3, [r3, #32]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d01b      	beq.n	80025a8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800257e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800258e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6859      	ldr	r1, [r3, #4]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	3b01      	subs	r3, #1
 800259c:	035a      	lsls	r2, r3, #13
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	e007      	b.n	80025b8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80025c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	051a      	lsls	r2, r3, #20
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6899      	ldr	r1, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025fa:	025a      	lsls	r2, r3, #9
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002612:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6899      	ldr	r1, [r3, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	029a      	lsls	r2, r3, #10
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	430a      	orrs	r2, r1
 8002626:	609a      	str	r2, [r3, #8]
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	40012300 	.word	0x40012300
 8002638:	0f000001 	.word	0x0f000001

0800263c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002648:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002652:	2b00      	cmp	r3, #0
 8002654:	d13c      	bne.n	80026d0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d12b      	bne.n	80026c8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002674:	2b00      	cmp	r3, #0
 8002676:	d127      	bne.n	80026c8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002682:	2b00      	cmp	r3, #0
 8002684:	d006      	beq.n	8002694 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002690:	2b00      	cmp	r3, #0
 8002692:	d119      	bne.n	80026c8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0220 	bic.w	r2, r2, #32
 80026a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d105      	bne.n	80026c8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	f043 0201 	orr.w	r2, r3, #1
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f7fe ff5a 	bl	8001582 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80026ce:	e00e      	b.n	80026ee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	f003 0310 	and.w	r3, r3, #16
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f7ff fd5f 	bl	80021a0 <HAL_ADC_ErrorCallback>
}
 80026e2:	e004      	b.n	80026ee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	4798      	blx	r3
}
 80026ee:	bf00      	nop
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b084      	sub	sp, #16
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f7fe ff31 	bl	800156c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800270a:	bf00      	nop
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b084      	sub	sp, #16
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2240      	movs	r2, #64	; 0x40
 8002724:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272a:	f043 0204 	orr.w	r2, r3, #4
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f7ff fd34 	bl	80021a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002738:	bf00      	nop
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <__NVIC_SetPriorityGrouping+0x40>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800275c:	4013      	ands	r3, r2
 800275e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002768:	4b06      	ldr	r3, [pc, #24]	; (8002784 <__NVIC_SetPriorityGrouping+0x44>)
 800276a:	4313      	orrs	r3, r2
 800276c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800276e:	4a04      	ldr	r2, [pc, #16]	; (8002780 <__NVIC_SetPriorityGrouping+0x40>)
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	60d3      	str	r3, [r2, #12]
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	e000ed00 	.word	0xe000ed00
 8002784:	05fa0000 	.word	0x05fa0000

08002788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800278c:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <__NVIC_GetPriorityGrouping+0x18>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	0a1b      	lsrs	r3, r3, #8
 8002792:	f003 0307 	and.w	r3, r3, #7
}
 8002796:	4618      	mov	r0, r3
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	db0b      	blt.n	80027ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	f003 021f 	and.w	r2, r3, #31
 80027bc:	4907      	ldr	r1, [pc, #28]	; (80027dc <__NVIC_EnableIRQ+0x38>)
 80027be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c2:	095b      	lsrs	r3, r3, #5
 80027c4:	2001      	movs	r0, #1
 80027c6:	fa00 f202 	lsl.w	r2, r0, r2
 80027ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	e000e100 	.word	0xe000e100

080027e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	6039      	str	r1, [r7, #0]
 80027ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	db0a      	blt.n	800280a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	490c      	ldr	r1, [pc, #48]	; (800282c <__NVIC_SetPriority+0x4c>)
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	0112      	lsls	r2, r2, #4
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	440b      	add	r3, r1
 8002804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002808:	e00a      	b.n	8002820 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	b2da      	uxtb	r2, r3
 800280e:	4908      	ldr	r1, [pc, #32]	; (8002830 <__NVIC_SetPriority+0x50>)
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	3b04      	subs	r3, #4
 8002818:	0112      	lsls	r2, r2, #4
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	440b      	add	r3, r1
 800281e:	761a      	strb	r2, [r3, #24]
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	e000e100 	.word	0xe000e100
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002834:	b480      	push	{r7}
 8002836:	b089      	sub	sp, #36	; 0x24
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f1c3 0307 	rsb	r3, r3, #7
 800284e:	2b04      	cmp	r3, #4
 8002850:	bf28      	it	cs
 8002852:	2304      	movcs	r3, #4
 8002854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3304      	adds	r3, #4
 800285a:	2b06      	cmp	r3, #6
 800285c:	d902      	bls.n	8002864 <NVIC_EncodePriority+0x30>
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	3b03      	subs	r3, #3
 8002862:	e000      	b.n	8002866 <NVIC_EncodePriority+0x32>
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002868:	f04f 32ff 	mov.w	r2, #4294967295
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43da      	mvns	r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	401a      	ands	r2, r3
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800287c:	f04f 31ff 	mov.w	r1, #4294967295
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	fa01 f303 	lsl.w	r3, r1, r3
 8002886:	43d9      	mvns	r1, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800288c:	4313      	orrs	r3, r2
         );
}
 800288e:	4618      	mov	r0, r3
 8002890:	3724      	adds	r7, #36	; 0x24
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028ac:	d301      	bcc.n	80028b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ae:	2301      	movs	r3, #1
 80028b0:	e00f      	b.n	80028d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028b2:	4a0a      	ldr	r2, [pc, #40]	; (80028dc <SysTick_Config+0x40>)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ba:	210f      	movs	r1, #15
 80028bc:	f04f 30ff 	mov.w	r0, #4294967295
 80028c0:	f7ff ff8e 	bl	80027e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <SysTick_Config+0x40>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ca:	4b04      	ldr	r3, [pc, #16]	; (80028dc <SysTick_Config+0x40>)
 80028cc:	2207      	movs	r2, #7
 80028ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	e000e010 	.word	0xe000e010

080028e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff ff29 	bl	8002740 <__NVIC_SetPriorityGrouping>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b086      	sub	sp, #24
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	4603      	mov	r3, r0
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002908:	f7ff ff3e 	bl	8002788 <__NVIC_GetPriorityGrouping>
 800290c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	6978      	ldr	r0, [r7, #20]
 8002914:	f7ff ff8e 	bl	8002834 <NVIC_EncodePriority>
 8002918:	4602      	mov	r2, r0
 800291a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800291e:	4611      	mov	r1, r2
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ff5d 	bl	80027e0 <__NVIC_SetPriority>
}
 8002926:	bf00      	nop
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	4603      	mov	r3, r0
 8002936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff31 	bl	80027a4 <__NVIC_EnableIRQ>
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff ffa2 	bl	800289c <SysTick_Config>
 8002958:	4603      	mov	r3, r0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
	...

08002964 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002970:	f7ff fa18 	bl	8001da4 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e099      	b.n	8002ab4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0201 	bic.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029a0:	e00f      	b.n	80029c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029a2:	f7ff f9ff 	bl	8001da4 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b05      	cmp	r3, #5
 80029ae:	d908      	bls.n	80029c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2220      	movs	r2, #32
 80029b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2203      	movs	r2, #3
 80029ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e078      	b.n	8002ab4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1e8      	bne.n	80029a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	4b38      	ldr	r3, [pc, #224]	; (8002abc <HAL_DMA_Init+0x158>)
 80029dc:	4013      	ands	r3, r2
 80029de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d107      	bne.n	8002a2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	4313      	orrs	r3, r2
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f023 0307 	bic.w	r3, r3, #7
 8002a42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d117      	bne.n	8002a86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00e      	beq.n	8002a86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 faa5 	bl	8002fb8 <DMA_CheckFifoParam>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2240      	movs	r2, #64	; 0x40
 8002a78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a82:	2301      	movs	r3, #1
 8002a84:	e016      	b.n	8002ab4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 fa5c 	bl	8002f4c <DMA_CalcBaseAndBitshift>
 8002a94:	4603      	mov	r3, r0
 8002a96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9c:	223f      	movs	r2, #63	; 0x3f
 8002a9e:	409a      	lsls	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	e010803f 	.word	0xe010803f

08002ac0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
 8002acc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_DMA_Start_IT+0x26>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e048      	b.n	8002b78 <HAL_DMA_Start_IT+0xb8>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d137      	bne.n	8002b6a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2202      	movs	r2, #2
 8002afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	68b9      	ldr	r1, [r7, #8]
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 f9ee 	bl	8002ef0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b18:	223f      	movs	r2, #63	; 0x3f
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0216 	orr.w	r2, r2, #22
 8002b2e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b3e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d007      	beq.n	8002b58 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0208 	orr.w	r2, r2, #8
 8002b56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f042 0201 	orr.w	r2, r2, #1
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	e005      	b.n	8002b76 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b72:	2302      	movs	r3, #2
 8002b74:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d004      	beq.n	8002b9e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2280      	movs	r2, #128	; 0x80
 8002b98:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e00c      	b.n	8002bb8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2205      	movs	r2, #5
 8002ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0201 	bic.w	r2, r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002bd0:	4b92      	ldr	r3, [pc, #584]	; (8002e1c <HAL_DMA_IRQHandler+0x258>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a92      	ldr	r2, [pc, #584]	; (8002e20 <HAL_DMA_IRQHandler+0x25c>)
 8002bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bda:	0a9b      	lsrs	r3, r3, #10
 8002bdc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bee:	2208      	movs	r2, #8
 8002bf0:	409a      	lsls	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d01a      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d013      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0204 	bic.w	r2, r2, #4
 8002c16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1c:	2208      	movs	r2, #8
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c28:	f043 0201 	orr.w	r2, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c34:	2201      	movs	r2, #1
 8002c36:	409a      	lsls	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d012      	beq.n	8002c66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00b      	beq.n	8002c66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c52:	2201      	movs	r2, #1
 8002c54:	409a      	lsls	r2, r3
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5e:	f043 0202 	orr.w	r2, r3, #2
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6a:	2204      	movs	r2, #4
 8002c6c:	409a      	lsls	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	4013      	ands	r3, r2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d012      	beq.n	8002c9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00b      	beq.n	8002c9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c88:	2204      	movs	r2, #4
 8002c8a:	409a      	lsls	r2, r3
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c94:	f043 0204 	orr.w	r2, r3, #4
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca0:	2210      	movs	r2, #16
 8002ca2:	409a      	lsls	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d043      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d03c      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbe:	2210      	movs	r2, #16
 8002cc0:	409a      	lsls	r2, r3
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d018      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d108      	bne.n	8002cf4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d024      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	4798      	blx	r3
 8002cf2:	e01f      	b.n	8002d34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d01b      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	4798      	blx	r3
 8002d04:	e016      	b.n	8002d34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d107      	bne.n	8002d24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0208 	bic.w	r2, r2, #8
 8002d22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d38:	2220      	movs	r2, #32
 8002d3a:	409a      	lsls	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 808e 	beq.w	8002e62 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0310 	and.w	r3, r3, #16
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 8086 	beq.w	8002e62 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	409a      	lsls	r2, r3
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b05      	cmp	r3, #5
 8002d6c:	d136      	bne.n	8002ddc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0216 	bic.w	r2, r2, #22
 8002d7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695a      	ldr	r2, [r3, #20]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d103      	bne.n	8002d9e <HAL_DMA_IRQHandler+0x1da>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d007      	beq.n	8002dae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0208 	bic.w	r2, r2, #8
 8002dac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db2:	223f      	movs	r2, #63	; 0x3f
 8002db4:	409a      	lsls	r2, r3
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d07d      	beq.n	8002ece <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	4798      	blx	r3
        }
        return;
 8002dda:	e078      	b.n	8002ece <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d01c      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d108      	bne.n	8002e0a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d030      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	4798      	blx	r3
 8002e08:	e02b      	b.n	8002e62 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d027      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	4798      	blx	r3
 8002e1a:	e022      	b.n	8002e62 <HAL_DMA_IRQHandler+0x29e>
 8002e1c:	20000000 	.word	0x20000000
 8002e20:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10f      	bne.n	8002e52 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0210 	bic.w	r2, r2, #16
 8002e40:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d032      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d022      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2205      	movs	r2, #5
 8002e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0201 	bic.w	r2, r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	3301      	adds	r3, #1
 8002e92:	60bb      	str	r3, [r7, #8]
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d307      	bcc.n	8002eaa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1f2      	bne.n	8002e8e <HAL_DMA_IRQHandler+0x2ca>
 8002ea8:	e000      	b.n	8002eac <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002eaa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	4798      	blx	r3
 8002ecc:	e000      	b.n	8002ed0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002ece:	bf00      	nop
    }
  }
}
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop

08002ed8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
 8002efc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f0c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	2b40      	cmp	r3, #64	; 0x40
 8002f1c:	d108      	bne.n	8002f30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f2e:	e007      	b.n	8002f40 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	60da      	str	r2, [r3, #12]
}
 8002f40:	bf00      	nop
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	3b10      	subs	r3, #16
 8002f5c:	4a13      	ldr	r2, [pc, #76]	; (8002fac <DMA_CalcBaseAndBitshift+0x60>)
 8002f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f62:	091b      	lsrs	r3, r3, #4
 8002f64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f66:	4a12      	ldr	r2, [pc, #72]	; (8002fb0 <DMA_CalcBaseAndBitshift+0x64>)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2b03      	cmp	r3, #3
 8002f78:	d908      	bls.n	8002f8c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <DMA_CalcBaseAndBitshift+0x68>)
 8002f82:	4013      	ands	r3, r2
 8002f84:	1d1a      	adds	r2, r3, #4
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	659a      	str	r2, [r3, #88]	; 0x58
 8002f8a:	e006      	b.n	8002f9a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	461a      	mov	r2, r3
 8002f92:	4b08      	ldr	r3, [pc, #32]	; (8002fb4 <DMA_CalcBaseAndBitshift+0x68>)
 8002f94:	4013      	ands	r3, r2
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	aaaaaaab 	.word	0xaaaaaaab
 8002fb0:	08008888 	.word	0x08008888
 8002fb4:	fffffc00 	.word	0xfffffc00

08002fb8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d11f      	bne.n	8003012 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	d855      	bhi.n	8003084 <DMA_CheckFifoParam+0xcc>
 8002fd8:	a201      	add	r2, pc, #4	; (adr r2, 8002fe0 <DMA_CheckFifoParam+0x28>)
 8002fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fde:	bf00      	nop
 8002fe0:	08002ff1 	.word	0x08002ff1
 8002fe4:	08003003 	.word	0x08003003
 8002fe8:	08002ff1 	.word	0x08002ff1
 8002fec:	08003085 	.word	0x08003085
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d045      	beq.n	8003088 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003000:	e042      	b.n	8003088 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003006:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800300a:	d13f      	bne.n	800308c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003010:	e03c      	b.n	800308c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800301a:	d121      	bne.n	8003060 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2b03      	cmp	r3, #3
 8003020:	d836      	bhi.n	8003090 <DMA_CheckFifoParam+0xd8>
 8003022:	a201      	add	r2, pc, #4	; (adr r2, 8003028 <DMA_CheckFifoParam+0x70>)
 8003024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003028:	08003039 	.word	0x08003039
 800302c:	0800303f 	.word	0x0800303f
 8003030:	08003039 	.word	0x08003039
 8003034:	08003051 	.word	0x08003051
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	73fb      	strb	r3, [r7, #15]
      break;
 800303c:	e02f      	b.n	800309e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003042:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d024      	beq.n	8003094 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800304e:	e021      	b.n	8003094 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003058:	d11e      	bne.n	8003098 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800305e:	e01b      	b.n	8003098 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d902      	bls.n	800306c <DMA_CheckFifoParam+0xb4>
 8003066:	2b03      	cmp	r3, #3
 8003068:	d003      	beq.n	8003072 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800306a:	e018      	b.n	800309e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	73fb      	strb	r3, [r7, #15]
      break;
 8003070:	e015      	b.n	800309e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003076:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00e      	beq.n	800309c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	73fb      	strb	r3, [r7, #15]
      break;
 8003082:	e00b      	b.n	800309c <DMA_CheckFifoParam+0xe4>
      break;
 8003084:	bf00      	nop
 8003086:	e00a      	b.n	800309e <DMA_CheckFifoParam+0xe6>
      break;
 8003088:	bf00      	nop
 800308a:	e008      	b.n	800309e <DMA_CheckFifoParam+0xe6>
      break;
 800308c:	bf00      	nop
 800308e:	e006      	b.n	800309e <DMA_CheckFifoParam+0xe6>
      break;
 8003090:	bf00      	nop
 8003092:	e004      	b.n	800309e <DMA_CheckFifoParam+0xe6>
      break;
 8003094:	bf00      	nop
 8003096:	e002      	b.n	800309e <DMA_CheckFifoParam+0xe6>
      break;   
 8003098:	bf00      	nop
 800309a:	e000      	b.n	800309e <DMA_CheckFifoParam+0xe6>
      break;
 800309c:	bf00      	nop
    }
  } 
  
  return status; 
 800309e:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3714      	adds	r7, #20
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b089      	sub	sp, #36	; 0x24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80030ba:	2300      	movs	r3, #0
 80030bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80030be:	2300      	movs	r3, #0
 80030c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80030c2:	2300      	movs	r3, #0
 80030c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80030c6:	2300      	movs	r3, #0
 80030c8:	61fb      	str	r3, [r7, #28]
 80030ca:	e169      	b.n	80033a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80030cc:	2201      	movs	r2, #1
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	4013      	ands	r3, r2
 80030de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	f040 8158 	bne.w	800339a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d00b      	beq.n	800310a <HAL_GPIO_Init+0x5e>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d007      	beq.n	800310a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030fe:	2b11      	cmp	r3, #17
 8003100:	d003      	beq.n	800310a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b12      	cmp	r3, #18
 8003108:	d130      	bne.n	800316c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	2203      	movs	r2, #3
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43db      	mvns	r3, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4013      	ands	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003140:	2201      	movs	r2, #1
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	091b      	lsrs	r3, r3, #4
 8003156:	f003 0201 	and.w	r2, r3, #1
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	2203      	movs	r2, #3
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4013      	ands	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4313      	orrs	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d003      	beq.n	80031ac <HAL_GPIO_Init+0x100>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2b12      	cmp	r3, #18
 80031aa:	d123      	bne.n	80031f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	08da      	lsrs	r2, r3, #3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3208      	adds	r2, #8
 80031b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	220f      	movs	r2, #15
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4013      	ands	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	08da      	lsrs	r2, r3, #3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3208      	adds	r2, #8
 80031ee:	69b9      	ldr	r1, [r7, #24]
 80031f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	2203      	movs	r2, #3
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	43db      	mvns	r3, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4013      	ands	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 0203 	and.w	r2, r3, #3
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 80b2 	beq.w	800339a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003236:	4b5f      	ldr	r3, [pc, #380]	; (80033b4 <HAL_GPIO_Init+0x308>)
 8003238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323a:	4a5e      	ldr	r2, [pc, #376]	; (80033b4 <HAL_GPIO_Init+0x308>)
 800323c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003240:	6453      	str	r3, [r2, #68]	; 0x44
 8003242:	4b5c      	ldr	r3, [pc, #368]	; (80033b4 <HAL_GPIO_Init+0x308>)
 8003244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800324e:	4a5a      	ldr	r2, [pc, #360]	; (80033b8 <HAL_GPIO_Init+0x30c>)
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	089b      	lsrs	r3, r3, #2
 8003254:	3302      	adds	r3, #2
 8003256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800325a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	220f      	movs	r2, #15
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	43db      	mvns	r3, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4013      	ands	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a51      	ldr	r2, [pc, #324]	; (80033bc <HAL_GPIO_Init+0x310>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d02b      	beq.n	80032d2 <HAL_GPIO_Init+0x226>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a50      	ldr	r2, [pc, #320]	; (80033c0 <HAL_GPIO_Init+0x314>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d025      	beq.n	80032ce <HAL_GPIO_Init+0x222>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a4f      	ldr	r2, [pc, #316]	; (80033c4 <HAL_GPIO_Init+0x318>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d01f      	beq.n	80032ca <HAL_GPIO_Init+0x21e>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a4e      	ldr	r2, [pc, #312]	; (80033c8 <HAL_GPIO_Init+0x31c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d019      	beq.n	80032c6 <HAL_GPIO_Init+0x21a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a4d      	ldr	r2, [pc, #308]	; (80033cc <HAL_GPIO_Init+0x320>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d013      	beq.n	80032c2 <HAL_GPIO_Init+0x216>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a4c      	ldr	r2, [pc, #304]	; (80033d0 <HAL_GPIO_Init+0x324>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00d      	beq.n	80032be <HAL_GPIO_Init+0x212>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a4b      	ldr	r2, [pc, #300]	; (80033d4 <HAL_GPIO_Init+0x328>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d007      	beq.n	80032ba <HAL_GPIO_Init+0x20e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a4a      	ldr	r2, [pc, #296]	; (80033d8 <HAL_GPIO_Init+0x32c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d101      	bne.n	80032b6 <HAL_GPIO_Init+0x20a>
 80032b2:	2307      	movs	r3, #7
 80032b4:	e00e      	b.n	80032d4 <HAL_GPIO_Init+0x228>
 80032b6:	2308      	movs	r3, #8
 80032b8:	e00c      	b.n	80032d4 <HAL_GPIO_Init+0x228>
 80032ba:	2306      	movs	r3, #6
 80032bc:	e00a      	b.n	80032d4 <HAL_GPIO_Init+0x228>
 80032be:	2305      	movs	r3, #5
 80032c0:	e008      	b.n	80032d4 <HAL_GPIO_Init+0x228>
 80032c2:	2304      	movs	r3, #4
 80032c4:	e006      	b.n	80032d4 <HAL_GPIO_Init+0x228>
 80032c6:	2303      	movs	r3, #3
 80032c8:	e004      	b.n	80032d4 <HAL_GPIO_Init+0x228>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e002      	b.n	80032d4 <HAL_GPIO_Init+0x228>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <HAL_GPIO_Init+0x228>
 80032d2:	2300      	movs	r3, #0
 80032d4:	69fa      	ldr	r2, [r7, #28]
 80032d6:	f002 0203 	and.w	r2, r2, #3
 80032da:	0092      	lsls	r2, r2, #2
 80032dc:	4093      	lsls	r3, r2
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80032e4:	4934      	ldr	r1, [pc, #208]	; (80033b8 <HAL_GPIO_Init+0x30c>)
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	089b      	lsrs	r3, r3, #2
 80032ea:	3302      	adds	r3, #2
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032f2:	4b3a      	ldr	r3, [pc, #232]	; (80033dc <HAL_GPIO_Init+0x330>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	43db      	mvns	r3, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4013      	ands	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003316:	4a31      	ldr	r2, [pc, #196]	; (80033dc <HAL_GPIO_Init+0x330>)
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800331c:	4b2f      	ldr	r3, [pc, #188]	; (80033dc <HAL_GPIO_Init+0x330>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	43db      	mvns	r3, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003340:	4a26      	ldr	r2, [pc, #152]	; (80033dc <HAL_GPIO_Init+0x330>)
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003346:	4b25      	ldr	r3, [pc, #148]	; (80033dc <HAL_GPIO_Init+0x330>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	43db      	mvns	r3, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4013      	ands	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800336a:	4a1c      	ldr	r2, [pc, #112]	; (80033dc <HAL_GPIO_Init+0x330>)
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003370:	4b1a      	ldr	r3, [pc, #104]	; (80033dc <HAL_GPIO_Init+0x330>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003394:	4a11      	ldr	r2, [pc, #68]	; (80033dc <HAL_GPIO_Init+0x330>)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	3301      	adds	r3, #1
 800339e:	61fb      	str	r3, [r7, #28]
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	2b0f      	cmp	r3, #15
 80033a4:	f67f ae92 	bls.w	80030cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80033a8:	bf00      	nop
 80033aa:	3724      	adds	r7, #36	; 0x24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	40023800 	.word	0x40023800
 80033b8:	40013800 	.word	0x40013800
 80033bc:	40020000 	.word	0x40020000
 80033c0:	40020400 	.word	0x40020400
 80033c4:	40020800 	.word	0x40020800
 80033c8:	40020c00 	.word	0x40020c00
 80033cc:	40021000 	.word	0x40021000
 80033d0:	40021400 	.word	0x40021400
 80033d4:	40021800 	.word	0x40021800
 80033d8:	40021c00 	.word	0x40021c00
 80033dc:	40013c00 	.word	0x40013c00

080033e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	807b      	strh	r3, [r7, #2]
 80033ec:	4613      	mov	r3, r2
 80033ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033f0:	787b      	ldrb	r3, [r7, #1]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033f6:	887a      	ldrh	r2, [r7, #2]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80033fc:	e003      	b.n	8003406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80033fe:	887b      	ldrh	r3, [r7, #2]
 8003400:	041a      	lsls	r2, r3, #16
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	619a      	str	r2, [r3, #24]
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
	...

08003414 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e07f      	b.n	8003526 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d106      	bne.n	8003440 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7fe f918 	bl	8001670 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2224      	movs	r2, #36	; 0x24
 8003444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0201 	bic.w	r2, r2, #1
 8003456:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003464:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003474:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d107      	bne.n	800348e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800348a:	609a      	str	r2, [r3, #8]
 800348c:	e006      	b.n	800349c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800349a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d104      	bne.n	80034ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6859      	ldr	r1, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	4b1d      	ldr	r3, [pc, #116]	; (8003530 <HAL_I2C_Init+0x11c>)
 80034ba:	430b      	orrs	r3, r1
 80034bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691a      	ldr	r2, [r3, #16]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	ea42 0103 	orr.w	r1, r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	021a      	lsls	r2, r3, #8
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69d9      	ldr	r1, [r3, #28]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a1a      	ldr	r2, [r3, #32]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0201 	orr.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	02008000 	.word	0x02008000

08003534 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b088      	sub	sp, #32
 8003538:	af02      	add	r7, sp, #8
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	4608      	mov	r0, r1
 800353e:	4611      	mov	r1, r2
 8003540:	461a      	mov	r2, r3
 8003542:	4603      	mov	r3, r0
 8003544:	817b      	strh	r3, [r7, #10]
 8003546:	460b      	mov	r3, r1
 8003548:	813b      	strh	r3, [r7, #8]
 800354a:	4613      	mov	r3, r2
 800354c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b20      	cmp	r3, #32
 8003558:	f040 80fd 	bne.w	8003756 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <HAL_I2C_Mem_Read+0x34>
 8003562:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003564:	2b00      	cmp	r3, #0
 8003566:	d105      	bne.n	8003574 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800356e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e0f1      	b.n	8003758 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800357a:	2b01      	cmp	r3, #1
 800357c:	d101      	bne.n	8003582 <HAL_I2C_Mem_Read+0x4e>
 800357e:	2302      	movs	r3, #2
 8003580:	e0ea      	b.n	8003758 <HAL_I2C_Mem_Read+0x224>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800358a:	f7fe fc0b 	bl	8001da4 <HAL_GetTick>
 800358e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	2319      	movs	r3, #25
 8003596:	2201      	movs	r2, #1
 8003598:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f001 fb39 	bl	8004c14 <I2C_WaitOnFlagUntilTimeout>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e0d5      	b.n	8003758 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2222      	movs	r2, #34	; 0x22
 80035b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2240      	movs	r2, #64	; 0x40
 80035b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6a3a      	ldr	r2, [r7, #32]
 80035c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035d4:	88f8      	ldrh	r0, [r7, #6]
 80035d6:	893a      	ldrh	r2, [r7, #8]
 80035d8:	8979      	ldrh	r1, [r7, #10]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	9301      	str	r3, [sp, #4]
 80035de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	4603      	mov	r3, r0
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 fe27 	bl	8004238 <I2C_RequestMemoryRead>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e0ad      	b.n	8003758 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003600:	b29b      	uxth	r3, r3
 8003602:	2bff      	cmp	r3, #255	; 0xff
 8003604:	d90e      	bls.n	8003624 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	22ff      	movs	r2, #255	; 0xff
 800360a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003610:	b2da      	uxtb	r2, r3
 8003612:	8979      	ldrh	r1, [r7, #10]
 8003614:	4b52      	ldr	r3, [pc, #328]	; (8003760 <HAL_I2C_Mem_Read+0x22c>)
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f001 fc1b 	bl	8004e58 <I2C_TransferConfig>
 8003622:	e00f      	b.n	8003644 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003632:	b2da      	uxtb	r2, r3
 8003634:	8979      	ldrh	r1, [r7, #10]
 8003636:	4b4a      	ldr	r3, [pc, #296]	; (8003760 <HAL_I2C_Mem_Read+0x22c>)
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f001 fc0a 	bl	8004e58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364a:	2200      	movs	r2, #0
 800364c:	2104      	movs	r1, #4
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f001 fae0 	bl	8004c14 <I2C_WaitOnFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e07c      	b.n	8003758 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367a:	3b01      	subs	r3, #1
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003686:	b29b      	uxth	r3, r3
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003694:	b29b      	uxth	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d034      	beq.n	8003704 <HAL_I2C_Mem_Read+0x1d0>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d130      	bne.n	8003704 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a8:	2200      	movs	r2, #0
 80036aa:	2180      	movs	r1, #128	; 0x80
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f001 fab1 	bl	8004c14 <I2C_WaitOnFlagUntilTimeout>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e04d      	b.n	8003758 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2bff      	cmp	r3, #255	; 0xff
 80036c4:	d90e      	bls.n	80036e4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	22ff      	movs	r2, #255	; 0xff
 80036ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	8979      	ldrh	r1, [r7, #10]
 80036d4:	2300      	movs	r3, #0
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f001 fbbb 	bl	8004e58 <I2C_TransferConfig>
 80036e2:	e00f      	b.n	8003704 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	8979      	ldrh	r1, [r7, #10]
 80036f6:	2300      	movs	r3, #0
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f001 fbaa 	bl	8004e58 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003708:	b29b      	uxth	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d19a      	bne.n	8003644 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f001 fafe 	bl	8004d14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e01a      	b.n	8003758 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2220      	movs	r2, #32
 8003728:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6859      	ldr	r1, [r3, #4]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <HAL_I2C_Mem_Read+0x230>)
 8003736:	400b      	ands	r3, r1
 8003738:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2220      	movs	r2, #32
 800373e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	e000      	b.n	8003758 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003756:	2302      	movs	r3, #2
  }
}
 8003758:	4618      	mov	r0, r3
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	80002400 	.word	0x80002400
 8003764:	fe00e800 	.word	0xfe00e800

08003768 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b08a      	sub	sp, #40	; 0x28
 800376c:	af02      	add	r7, sp, #8
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	4608      	mov	r0, r1
 8003772:	4611      	mov	r1, r2
 8003774:	461a      	mov	r2, r3
 8003776:	4603      	mov	r3, r0
 8003778:	817b      	strh	r3, [r7, #10]
 800377a:	460b      	mov	r3, r1
 800377c:	813b      	strh	r3, [r7, #8]
 800377e:	4613      	mov	r3, r2
 8003780:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b20      	cmp	r3, #32
 800378c:	f040 80d5 	bne.w	800393a <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003792:	2b00      	cmp	r3, #0
 8003794:	d002      	beq.n	800379c <HAL_I2C_Mem_Write_DMA+0x34>
 8003796:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003798:	2b00      	cmp	r3, #0
 800379a:	d105      	bne.n	80037a8 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e0c9      	b.n	800393c <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037b6:	d101      	bne.n	80037bc <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 80037b8:	2302      	movs	r3, #2
 80037ba:	e0bf      	b.n	800393c <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d101      	bne.n	80037ca <HAL_I2C_Mem_Write_DMA+0x62>
 80037c6:	2302      	movs	r3, #2
 80037c8:	e0b8      	b.n	800393c <HAL_I2C_Mem_Write_DMA+0x1d4>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037d2:	f7fe fae7 	bl	8001da4 <HAL_GetTick>
 80037d6:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2221      	movs	r2, #33	; 0x21
 80037dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2240      	movs	r2, #64	; 0x40
 80037e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80037f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	4a51      	ldr	r2, [pc, #324]	; (8003944 <HAL_I2C_Mem_Write_DMA+0x1dc>)
 80037fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4a51      	ldr	r2, [pc, #324]	; (8003948 <HAL_I2C_Mem_Write_DMA+0x1e0>)
 8003804:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380a:	b29b      	uxth	r3, r3
 800380c:	2bff      	cmp	r3, #255	; 0xff
 800380e:	d906      	bls.n	800381e <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	22ff      	movs	r2, #255	; 0xff
 8003814:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003816:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800381a:	61fb      	str	r3, [r7, #28]
 800381c:	e007      	b.n	800382e <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003828:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800382c:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800382e:	88f8      	ldrh	r0, [r7, #6]
 8003830:	893a      	ldrh	r2, [r7, #8]
 8003832:	8979      	ldrh	r1, [r7, #10]
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	9301      	str	r3, [sp, #4]
 8003838:	2319      	movs	r3, #25
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	4603      	mov	r3, r0
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 fca6 	bl	8004190 <I2C_RequestMemoryWrite>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d005      	beq.n	8003856 <HAL_I2C_Mem_Write_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e072      	b.n	800393c <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385a:	2b00      	cmp	r3, #0
 800385c:	d020      	beq.n	80038a0 <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003862:	4a3a      	ldr	r2, [pc, #232]	; (800394c <HAL_I2C_Mem_Write_DMA+0x1e4>)
 8003864:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386a:	4a39      	ldr	r2, [pc, #228]	; (8003950 <HAL_I2C_Mem_Write_DMA+0x1e8>)
 800386c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003872:	2200      	movs	r2, #0
 8003874:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387a:	2200      	movs	r2, #0
 800387c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003882:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	3328      	adds	r3, #40	; 0x28
 800388a:	461a      	mov	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003890:	f7ff f916 	bl	8002ac0 <HAL_DMA_Start_IT>
 8003894:	4603      	mov	r3, r0
 8003896:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8003898:	7dfb      	ldrb	r3, [r7, #23]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d139      	bne.n	8003912 <HAL_I2C_Mem_Write_DMA+0x1aa>
 800389e:	e013      	b.n	80038c8 <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e039      	b.n	800393c <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	8979      	ldrh	r1, [r7, #10]
 80038d0:	2300      	movs	r3, #0
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f001 fabe 	bl	8004e58 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80038f6:	2111      	movs	r1, #17
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f001 fadb 	bl	8004eb4 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800390c:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	e014      	b.n	800393c <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2220      	movs	r2, #32
 8003916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	f043 0210 	orr.w	r2, r3, #16
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 800393a:	2302      	movs	r3, #2
  }
}
 800393c:	4618      	mov	r0, r3
 800393e:	3720      	adds	r7, #32
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	ffff0000 	.word	0xffff0000
 8003948:	08003e1b 	.word	0x08003e1b
 800394c:	08004a2d 	.word	0x08004a2d
 8003950:	08004b59 	.word	0x08004b59

08003954 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08a      	sub	sp, #40	; 0x28
 8003958:	af02      	add	r7, sp, #8
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	4608      	mov	r0, r1
 800395e:	4611      	mov	r1, r2
 8003960:	461a      	mov	r2, r3
 8003962:	4603      	mov	r3, r0
 8003964:	817b      	strh	r3, [r7, #10]
 8003966:	460b      	mov	r3, r1
 8003968:	813b      	strh	r3, [r7, #8]
 800396a:	4613      	mov	r3, r2
 800396c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b20      	cmp	r3, #32
 8003978:	f040 80d5 	bne.w	8003b26 <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 800397c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HAL_I2C_Mem_Read_DMA+0x34>
 8003982:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003984:	2b00      	cmp	r3, #0
 8003986:	d105      	bne.n	8003994 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800398e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e0c9      	b.n	8003b28 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800399e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039a2:	d101      	bne.n	80039a8 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 80039a4:	2302      	movs	r3, #2
 80039a6:	e0bf      	b.n	8003b28 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d101      	bne.n	80039b6 <HAL_I2C_Mem_Read_DMA+0x62>
 80039b2:	2302      	movs	r3, #2
 80039b4:	e0b8      	b.n	8003b28 <HAL_I2C_Mem_Read_DMA+0x1d4>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039be:	f7fe f9f1 	bl	8001da4 <HAL_GetTick>
 80039c2:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2222      	movs	r2, #34	; 0x22
 80039c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2240      	movs	r2, #64	; 0x40
 80039d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80039e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4a51      	ldr	r2, [pc, #324]	; (8003b30 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 80039ea:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4a51      	ldr	r2, [pc, #324]	; (8003b34 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 80039f0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2bff      	cmp	r3, #255	; 0xff
 80039fa:	d906      	bls.n	8003a0a <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	22ff      	movs	r2, #255	; 0xff
 8003a00:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003a02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a06:	61fb      	str	r3, [r7, #28]
 8003a08:	e007      	b.n	8003a1a <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003a14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a18:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003a1a:	88f8      	ldrh	r0, [r7, #6]
 8003a1c:	893a      	ldrh	r2, [r7, #8]
 8003a1e:	8979      	ldrh	r1, [r7, #10]
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	9301      	str	r3, [sp, #4]
 8003a24:	2319      	movs	r3, #25
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	4603      	mov	r3, r0
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 fc04 	bl	8004238 <I2C_RequestMemoryRead>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d005      	beq.n	8003a42 <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e072      	b.n	8003b28 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d020      	beq.n	8003a8c <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4e:	4a3a      	ldr	r2, [pc, #232]	; (8003b38 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 8003a50:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a56:	4a39      	ldr	r2, [pc, #228]	; (8003b3c <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8003a58:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5e:	2200      	movs	r2, #0
 8003a60:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a66:	2200      	movs	r2, #0
 8003a68:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	3324      	adds	r3, #36	; 0x24
 8003a74:	4619      	mov	r1, r3
 8003a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7c:	f7ff f820 	bl	8002ac0 <HAL_DMA_Start_IT>
 8003a80:	4603      	mov	r3, r0
 8003a82:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8003a84:	7dfb      	ldrb	r3, [r7, #23]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d139      	bne.n	8003afe <HAL_I2C_Mem_Read_DMA+0x1aa>
 8003a8a:	e013      	b.n	8003ab4 <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e039      	b.n	8003b28 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	8979      	ldrh	r1, [r7, #10]
 8003abc:	4b20      	ldr	r3, [pc, #128]	; (8003b40 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f001 f9c8 	bl	8004e58 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003ae2:	2111      	movs	r1, #17
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f001 f9e5 	bl	8004eb4 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003af8:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	e014      	b.n	8003b28 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b12:	f043 0210 	orr.w	r2, r3, #16
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8003b26:	2302      	movs	r3, #2
  }
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3720      	adds	r7, #32
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	ffff0000 	.word	0xffff0000
 8003b34:	08003e1b 	.word	0x08003e1b
 8003b38:	08004ac3 	.word	0x08004ac3
 8003b3c:	08004b59 	.word	0x08004b59
 8003b40:	80002400 	.word	0x80002400

08003b44 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	70fb      	strb	r3, [r7, #3]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <I2C_Slave_ISR_IT+0x24>
 8003c34:	2302      	movs	r3, #2
 8003c36:	e0ec      	b.n	8003e12 <I2C_Slave_ISR_IT+0x1fe>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d009      	beq.n	8003c60 <I2C_Slave_ISR_IT+0x4c>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003c58:	6939      	ldr	r1, [r7, #16]
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 fcd8 	bl	8004610 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	091b      	lsrs	r3, r3, #4
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d04d      	beq.n	8003d08 <I2C_Slave_ISR_IT+0xf4>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	091b      	lsrs	r3, r3, #4
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d047      	beq.n	8003d08 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d128      	bne.n	8003cd4 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b28      	cmp	r3, #40	; 0x28
 8003c8c:	d108      	bne.n	8003ca0 <I2C_Slave_ISR_IT+0x8c>
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c94:	d104      	bne.n	8003ca0 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003c96:	6939      	ldr	r1, [r7, #16]
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 fd8f 	bl	80047bc <I2C_ITListenCplt>
 8003c9e:	e032      	b.n	8003d06 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b29      	cmp	r3, #41	; 0x29
 8003caa:	d10e      	bne.n	8003cca <I2C_Slave_ISR_IT+0xb6>
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cb2:	d00a      	beq.n	8003cca <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2210      	movs	r2, #16
 8003cba:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 fe91 	bl	80049e4 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 fbcb 	bl	800445e <I2C_ITSlaveSeqCplt>
 8003cc8:	e01d      	b.n	8003d06 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2210      	movs	r2, #16
 8003cd0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003cd2:	e096      	b.n	8003e02 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2210      	movs	r2, #16
 8003cda:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce0:	f043 0204 	orr.w	r2, r3, #4
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d004      	beq.n	8003cf8 <I2C_Slave_ISR_IT+0xe4>
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cf4:	f040 8085 	bne.w	8003e02 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 fdb0 	bl	8004864 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003d04:	e07d      	b.n	8003e02 <I2C_Slave_ISR_IT+0x1ee>
 8003d06:	e07c      	b.n	8003e02 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	089b      	lsrs	r3, r3, #2
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d030      	beq.n	8003d76 <I2C_Slave_ISR_IT+0x162>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	089b      	lsrs	r3, r3, #2
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d02a      	beq.n	8003d76 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d018      	beq.n	8003d5c <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	b2d2      	uxtb	r2, r2
 8003d36:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d14f      	bne.n	8003e06 <I2C_Slave_ISR_IT+0x1f2>
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d6c:	d04b      	beq.n	8003e06 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 fb75 	bl	800445e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003d74:	e047      	b.n	8003e06 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	08db      	lsrs	r3, r3, #3
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00a      	beq.n	8003d98 <I2C_Slave_ISR_IT+0x184>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	08db      	lsrs	r3, r3, #3
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d004      	beq.n	8003d98 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003d8e:	6939      	ldr	r1, [r7, #16]
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 faa5 	bl	80042e0 <I2C_ITAddrCplt>
 8003d96:	e037      	b.n	8003e08 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	085b      	lsrs	r3, r3, #1
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d031      	beq.n	8003e08 <I2C_Slave_ISR_IT+0x1f4>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	085b      	lsrs	r3, r3, #1
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d02b      	beq.n	8003e08 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d018      	beq.n	8003dec <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	781a      	ldrb	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de2:	3b01      	subs	r3, #1
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	851a      	strh	r2, [r3, #40]	; 0x28
 8003dea:	e00d      	b.n	8003e08 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003df2:	d002      	beq.n	8003dfa <I2C_Slave_ISR_IT+0x1e6>
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d106      	bne.n	8003e08 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 fb2f 	bl	800445e <I2C_ITSlaveSeqCplt>
 8003e00:	e002      	b.n	8003e08 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003e02:	bf00      	nop
 8003e04:	e000      	b.n	8003e08 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003e06:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b088      	sub	sp, #32
 8003e1e:	af02      	add	r7, sp, #8
 8003e20:	60f8      	str	r0, [r7, #12]
 8003e22:	60b9      	str	r1, [r7, #8]
 8003e24:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d101      	bne.n	8003e34 <I2C_Master_ISR_DMA+0x1a>
 8003e30:	2302      	movs	r3, #2
 8003e32:	e0e1      	b.n	8003ff8 <I2C_Master_ISR_DMA+0x1de>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	091b      	lsrs	r3, r3, #4
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d017      	beq.n	8003e78 <I2C_Master_ISR_DMA+0x5e>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	091b      	lsrs	r3, r3, #4
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d011      	beq.n	8003e78 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2210      	movs	r2, #16
 8003e5a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e60:	f043 0204 	orr.w	r2, r3, #4
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003e68:	2112      	movs	r1, #18
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f001 f822 	bl	8004eb4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 fdb7 	bl	80049e4 <I2C_Flush_TXDR>
 8003e76:	e0ba      	b.n	8003fee <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	09db      	lsrs	r3, r3, #7
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d072      	beq.n	8003f6a <I2C_Master_ISR_DMA+0x150>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	099b      	lsrs	r3, r3, #6
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d06c      	beq.n	8003f6a <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e9e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d04e      	beq.n	8003f48 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eb6:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	2bff      	cmp	r3, #255	; 0xff
 8003ec0:	d906      	bls.n	8003ed0 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	22ff      	movs	r2, #255	; 0xff
 8003ec6:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003ec8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ecc:	617b      	str	r3, [r7, #20]
 8003ece:	e010      	b.n	8003ef2 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ee2:	d003      	beq.n	8003eec <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	617b      	str	r3, [r7, #20]
 8003eea:	e002      	b.n	8003ef2 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003eec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ef0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	8a79      	ldrh	r1, [r7, #18]
 8003efa:	2300      	movs	r3, #0
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 ffa9 	bl	8004e58 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b22      	cmp	r3, #34	; 0x22
 8003f22:	d108      	bne.n	8003f36 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f32:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003f34:	e05b      	b.n	8003fee <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f44:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003f46:	e052      	b.n	8003fee <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f56:	d003      	beq.n	8003f60 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 fa43 	bl	80043e4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003f5e:	e046      	b.n	8003fee <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003f60:	2140      	movs	r1, #64	; 0x40
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 fc7e 	bl	8004864 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003f68:	e041      	b.n	8003fee <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	099b      	lsrs	r3, r3, #6
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d029      	beq.n	8003fca <I2C_Master_ISR_DMA+0x1b0>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	099b      	lsrs	r3, r3, #6
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d023      	beq.n	8003fca <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d119      	bne.n	8003fc0 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f9a:	d027      	beq.n	8003fec <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fa4:	d108      	bne.n	8003fb8 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fb4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003fb6:	e019      	b.n	8003fec <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 fa13 	bl	80043e4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003fbe:	e015      	b.n	8003fec <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003fc0:	2140      	movs	r1, #64	; 0x40
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 fc4e 	bl	8004864 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003fc8:	e010      	b.n	8003fec <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	095b      	lsrs	r3, r3, #5
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00b      	beq.n	8003fee <I2C_Master_ISR_DMA+0x1d4>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	095b      	lsrs	r3, r3, #5
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d005      	beq.n	8003fee <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003fe2:	68b9      	ldr	r1, [r7, #8]
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 fa77 	bl	80044d8 <I2C_ITMasterCplt>
 8003fea:	e000      	b.n	8003fee <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003fec:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	613b      	str	r3, [r7, #16]
  uint32_t treatdmanack = 0U;
 8004012:	2300      	movs	r3, #0
 8004014:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <I2C_Slave_ISR_DMA+0x24>
 8004020:	2302      	movs	r3, #2
 8004022:	e0b1      	b.n	8004188 <I2C_Slave_ISR_DMA+0x188>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	095b      	lsrs	r3, r3, #5
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b00      	cmp	r3, #0
 8004036:	d009      	beq.n	800404c <I2C_Slave_ISR_DMA+0x4c>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	095b      	lsrs	r3, r3, #5
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004044:	68b9      	ldr	r1, [r7, #8]
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 fae2 	bl	8004610 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	091b      	lsrs	r3, r3, #4
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 8082 	beq.w	800415e <I2C_Slave_ISR_DMA+0x15e>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	091b      	lsrs	r3, r3, #4
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d07b      	beq.n	800415e <I2C_Slave_ISR_DMA+0x15e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	0b9b      	lsrs	r3, r3, #14
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d105      	bne.n	800407e <I2C_Slave_ISR_DMA+0x7e>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	0bdb      	lsrs	r3, r3, #15
 8004076:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800407a:	2b00      	cmp	r3, #0
 800407c:	d068      	beq.n	8004150 <I2C_Slave_ISR_DMA+0x150>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00d      	beq.n	80040a2 <I2C_Slave_ISR_DMA+0xa2>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	0bdb      	lsrs	r3, r3, #15
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d007      	beq.n	80040a2 <I2C_Slave_ISR_DMA+0xa2>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <I2C_Slave_ISR_DMA+0xa2>
          {
            treatdmanack = 1U;
 800409e:	2301      	movs	r3, #1
 80040a0:	617b      	str	r3, [r7, #20]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00d      	beq.n	80040c6 <I2C_Slave_ISR_DMA+0xc6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	0b9b      	lsrs	r3, r3, #14
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d007      	beq.n	80040c6 <I2C_Slave_ISR_DMA+0xc6>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <I2C_Slave_ISR_DMA+0xc6>
          {
            treatdmanack = 1U;
 80040c2:	2301      	movs	r3, #1
 80040c4:	617b      	str	r3, [r7, #20]
          }
        }
      }

      if (treatdmanack == 1U)
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d128      	bne.n	800411e <I2C_Slave_ISR_DMA+0x11e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b28      	cmp	r3, #40	; 0x28
 80040d6:	d108      	bne.n	80040ea <I2C_Slave_ISR_DMA+0xea>
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040de:	d104      	bne.n	80040ea <I2C_Slave_ISR_DMA+0xea>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80040e0:	68b9      	ldr	r1, [r7, #8]
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 fb6a 	bl	80047bc <I2C_ITListenCplt>
 80040e8:	e031      	b.n	800414e <I2C_Slave_ISR_DMA+0x14e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b29      	cmp	r3, #41	; 0x29
 80040f4:	d10e      	bne.n	8004114 <I2C_Slave_ISR_DMA+0x114>
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040fc:	d00a      	beq.n	8004114 <I2C_Slave_ISR_DMA+0x114>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2210      	movs	r2, #16
 8004104:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 fc6c 	bl	80049e4 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 f9a6 	bl	800445e <I2C_ITSlaveSeqCplt>
 8004112:	e01c      	b.n	800414e <I2C_Slave_ISR_DMA+0x14e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2210      	movs	r2, #16
 800411a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800411c:	e01d      	b.n	800415a <I2C_Slave_ISR_DMA+0x15a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2210      	movs	r2, #16
 8004124:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412a:	f043 0204 	orr.w	r2, r3, #4
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	645a      	str	r2, [r3, #68]	; 0x44

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <I2C_Slave_ISR_DMA+0x140>
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800413e:	d10c      	bne.n	800415a <I2C_Slave_ISR_DMA+0x15a>
        {
          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004144:	4619      	mov	r1, r3
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 fb8c 	bl	8004864 <I2C_ITError>
      if (treatdmanack == 1U)
 800414c:	e005      	b.n	800415a <I2C_Slave_ISR_DMA+0x15a>
 800414e:	e004      	b.n	800415a <I2C_Slave_ISR_DMA+0x15a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2210      	movs	r2, #16
 8004156:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004158:	e011      	b.n	800417e <I2C_Slave_ISR_DMA+0x17e>
      if (treatdmanack == 1U)
 800415a:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800415c:	e00f      	b.n	800417e <I2C_Slave_ISR_DMA+0x17e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	08db      	lsrs	r3, r3, #3
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d009      	beq.n	800417e <I2C_Slave_ISR_DMA+0x17e>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	08db      	lsrs	r3, r3, #3
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <I2C_Slave_ISR_DMA+0x17e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004176:	68b9      	ldr	r1, [r7, #8]
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f8b1 	bl	80042e0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3718      	adds	r7, #24
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af02      	add	r7, sp, #8
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	4608      	mov	r0, r1
 800419a:	4611      	mov	r1, r2
 800419c:	461a      	mov	r2, r3
 800419e:	4603      	mov	r3, r0
 80041a0:	817b      	strh	r3, [r7, #10]
 80041a2:	460b      	mov	r3, r1
 80041a4:	813b      	strh	r3, [r7, #8]
 80041a6:	4613      	mov	r3, r2
 80041a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80041aa:	88fb      	ldrh	r3, [r7, #6]
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	8979      	ldrh	r1, [r7, #10]
 80041b0:	4b20      	ldr	r3, [pc, #128]	; (8004234 <I2C_RequestMemoryWrite+0xa4>)
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 fe4d 	bl	8004e58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041be:	69fa      	ldr	r2, [r7, #28]
 80041c0:	69b9      	ldr	r1, [r7, #24]
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 fd66 	bl	8004c94 <I2C_WaitOnTXISFlagUntilTimeout>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e02c      	b.n	800422c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041d2:	88fb      	ldrh	r3, [r7, #6]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d105      	bne.n	80041e4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041d8:	893b      	ldrh	r3, [r7, #8]
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	629a      	str	r2, [r3, #40]	; 0x28
 80041e2:	e015      	b.n	8004210 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041e4:	893b      	ldrh	r3, [r7, #8]
 80041e6:	0a1b      	lsrs	r3, r3, #8
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041f2:	69fa      	ldr	r2, [r7, #28]
 80041f4:	69b9      	ldr	r1, [r7, #24]
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 fd4c 	bl	8004c94 <I2C_WaitOnTXISFlagUntilTimeout>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e012      	b.n	800422c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004206:	893b      	ldrh	r3, [r7, #8]
 8004208:	b2da      	uxtb	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	2200      	movs	r2, #0
 8004218:	2180      	movs	r1, #128	; 0x80
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 fcfa 	bl	8004c14 <I2C_WaitOnFlagUntilTimeout>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e000      	b.n	800422c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	80002000 	.word	0x80002000

08004238 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af02      	add	r7, sp, #8
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	4608      	mov	r0, r1
 8004242:	4611      	mov	r1, r2
 8004244:	461a      	mov	r2, r3
 8004246:	4603      	mov	r3, r0
 8004248:	817b      	strh	r3, [r7, #10]
 800424a:	460b      	mov	r3, r1
 800424c:	813b      	strh	r3, [r7, #8]
 800424e:	4613      	mov	r3, r2
 8004250:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004252:	88fb      	ldrh	r3, [r7, #6]
 8004254:	b2da      	uxtb	r2, r3
 8004256:	8979      	ldrh	r1, [r7, #10]
 8004258:	4b20      	ldr	r3, [pc, #128]	; (80042dc <I2C_RequestMemoryRead+0xa4>)
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	2300      	movs	r3, #0
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 fdfa 	bl	8004e58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004264:	69fa      	ldr	r2, [r7, #28]
 8004266:	69b9      	ldr	r1, [r7, #24]
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 fd13 	bl	8004c94 <I2C_WaitOnTXISFlagUntilTimeout>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e02c      	b.n	80042d2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004278:	88fb      	ldrh	r3, [r7, #6]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d105      	bne.n	800428a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800427e:	893b      	ldrh	r3, [r7, #8]
 8004280:	b2da      	uxtb	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	629a      	str	r2, [r3, #40]	; 0x28
 8004288:	e015      	b.n	80042b6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800428a:	893b      	ldrh	r3, [r7, #8]
 800428c:	0a1b      	lsrs	r3, r3, #8
 800428e:	b29b      	uxth	r3, r3
 8004290:	b2da      	uxtb	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004298:	69fa      	ldr	r2, [r7, #28]
 800429a:	69b9      	ldr	r1, [r7, #24]
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f000 fcf9 	bl	8004c94 <I2C_WaitOnTXISFlagUntilTimeout>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e012      	b.n	80042d2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042ac:	893b      	ldrh	r3, [r7, #8]
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	2200      	movs	r2, #0
 80042be:	2140      	movs	r1, #64	; 0x40
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 fca7 	bl	8004c14 <I2C_WaitOnFlagUntilTimeout>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e000      	b.n	80042d2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	80002000 	.word	0x80002000

080042e0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042f6:	2b28      	cmp	r3, #40	; 0x28
 80042f8:	d168      	bne.n	80043cc <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	0c1b      	lsrs	r3, r3, #16
 8004302:	b2db      	uxtb	r3, r3
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	0c1b      	lsrs	r3, r3, #16
 8004312:	b29b      	uxth	r3, r3
 8004314:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004318:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	b29b      	uxth	r3, r3
 8004322:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004326:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	b29b      	uxth	r3, r3
 8004330:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004334:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	2b02      	cmp	r3, #2
 800433c:	d137      	bne.n	80043ae <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800433e:	897b      	ldrh	r3, [r7, #10]
 8004340:	09db      	lsrs	r3, r3, #7
 8004342:	b29a      	uxth	r2, r3
 8004344:	89bb      	ldrh	r3, [r7, #12]
 8004346:	4053      	eors	r3, r2
 8004348:	b29b      	uxth	r3, r3
 800434a:	f003 0306 	and.w	r3, r3, #6
 800434e:	2b00      	cmp	r3, #0
 8004350:	d11c      	bne.n	800438c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004352:	897b      	ldrh	r3, [r7, #10]
 8004354:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004364:	2b02      	cmp	r3, #2
 8004366:	d139      	bne.n	80043dc <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2208      	movs	r2, #8
 8004374:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800437e:	89ba      	ldrh	r2, [r7, #12]
 8004380:	7bfb      	ldrb	r3, [r7, #15]
 8004382:	4619      	mov	r1, r3
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7ff fc05 	bl	8003b94 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800438a:	e027      	b.n	80043dc <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 800438c:	893b      	ldrh	r3, [r7, #8]
 800438e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004390:	2104      	movs	r1, #4
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 fdfc 	bl	8004f90 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80043a0:	89ba      	ldrh	r2, [r7, #12]
 80043a2:	7bfb      	ldrb	r3, [r7, #15]
 80043a4:	4619      	mov	r1, r3
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7ff fbf4 	bl	8003b94 <HAL_I2C_AddrCallback>
}
 80043ac:	e016      	b.n	80043dc <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80043ae:	2104      	movs	r1, #4
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fded 	bl	8004f90 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80043be:	89ba      	ldrh	r2, [r7, #12]
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	4619      	mov	r1, r3
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7ff fbe5 	bl	8003b94 <HAL_I2C_AddrCallback>
}
 80043ca:	e007      	b.n	80043dc <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2208      	movs	r2, #8
 80043d2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80043dc:	bf00      	nop
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b21      	cmp	r3, #33	; 0x21
 80043fe:	d115      	bne.n	800442c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2211      	movs	r2, #17
 800440c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004414:	2101      	movs	r1, #1
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 fdba 	bl	8004f90 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f7ff fb8d 	bl	8003b44 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800442a:	e014      	b.n	8004456 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2220      	movs	r2, #32
 8004430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2212      	movs	r2, #18
 8004438:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004440:	2102      	movs	r1, #2
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fda4 	bl	8004f90 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7ff fb81 	bl	8003b58 <HAL_I2C_MasterRxCpltCallback>
}
 8004456:	bf00      	nop
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b082      	sub	sp, #8
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b29      	cmp	r3, #41	; 0x29
 8004478:	d112      	bne.n	80044a0 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2228      	movs	r2, #40	; 0x28
 800447e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2221      	movs	r2, #33	; 0x21
 8004486:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004488:	2101      	movs	r1, #1
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fd80 	bl	8004f90 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7ff fb67 	bl	8003b6c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800449e:	e017      	b.n	80044d0 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b2a      	cmp	r3, #42	; 0x2a
 80044aa:	d111      	bne.n	80044d0 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2228      	movs	r2, #40	; 0x28
 80044b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2222      	movs	r2, #34	; 0x22
 80044b8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80044ba:	2102      	movs	r1, #2
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 fd67 	bl	8004f90 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7ff fb58 	bl	8003b80 <HAL_I2C_SlaveRxCpltCallback>
}
 80044d0:	bf00      	nop
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2220      	movs	r2, #32
 80044e8:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6859      	ldr	r1, [r3, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	4b44      	ldr	r3, [pc, #272]	; (8004608 <I2C_ITMasterCplt+0x130>)
 80044f6:	400b      	ands	r3, r1
 80044f8:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a40      	ldr	r2, [pc, #256]	; (800460c <I2C_ITMasterCplt+0x134>)
 800450a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	091b      	lsrs	r3, r3, #4
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b00      	cmp	r3, #0
 8004516:	d009      	beq.n	800452c <I2C_ITMasterCplt+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2210      	movs	r2, #16
 800451e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004524:	f043 0204 	orr.w	r2, r3, #4
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 fa59 	bl	80049e4 <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004532:	2103      	movs	r1, #3
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 fd2b 	bl	8004f90 <I2C_Disable_IRQ>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453e:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b60      	cmp	r3, #96	; 0x60
 800454a:	d002      	beq.n	8004552 <I2C_ITMasterCplt+0x7a>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d006      	beq.n	8004560 <I2C_ITMasterCplt+0x88>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004556:	4619      	mov	r1, r3
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f983 	bl	8004864 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800455e:	e04e      	b.n	80045fe <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b21      	cmp	r3, #33	; 0x21
 800456a:	d121      	bne.n	80045b0 <I2C_ITMasterCplt+0xd8>
    hi2c->State = HAL_I2C_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2220      	movs	r2, #32
 8004570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b40      	cmp	r3, #64	; 0x40
 800457e:	d10b      	bne.n	8004598 <I2C_ITMasterCplt+0xc0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7ff fb17 	bl	8003bc4 <HAL_I2C_MemTxCpltCallback>
}
 8004596:	e032      	b.n	80045fe <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7ff facb 	bl	8003b44 <HAL_I2C_MasterTxCpltCallback>
}
 80045ae:	e026      	b.n	80045fe <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b22      	cmp	r3, #34	; 0x22
 80045ba:	d120      	bne.n	80045fe <I2C_ITMasterCplt+0x126>
    hi2c->State = HAL_I2C_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2220      	movs	r2, #32
 80045c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b40      	cmp	r3, #64	; 0x40
 80045ce:	d10b      	bne.n	80045e8 <I2C_ITMasterCplt+0x110>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f7ff faf9 	bl	8003bd8 <HAL_I2C_MemRxCpltCallback>
}
 80045e6:	e00a      	b.n	80045fe <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f7ff faad 	bl	8003b58 <HAL_I2C_MasterRxCpltCallback>
}
 80045fe:	bf00      	nop
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	fe00e800 	.word	0xfe00e800
 800460c:	ffff0000 	.word	0xffff0000

08004610 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2220      	movs	r2, #32
 800462c:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800462e:	2107      	movs	r1, #7
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 fcad 	bl	8004f90 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004644:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6859      	ldr	r1, [r3, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	4b58      	ldr	r3, [pc, #352]	; (80047b4 <I2C_ITSlaveCplt+0x1a4>)
 8004652:	400b      	ands	r3, r1
 8004654:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f9c4 	bl	80049e4 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	0b9b      	lsrs	r3, r3, #14
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00b      	beq.n	8004680 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	2b00      	cmp	r3, #0
 800466e:	d018      	beq.n	80046a2 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	b29a      	uxth	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800467e:	e010      	b.n	80046a2 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	0bdb      	lsrs	r3, r3, #15
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00a      	beq.n	80046a2 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004690:	2b00      	cmp	r3, #0
 8004692:	d006      	beq.n	80046a2 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	b29a      	uxth	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	089b      	lsrs	r3, r3, #2
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d020      	beq.n	80046f0 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f023 0304 	bic.w	r3, r3, #4
 80046b4:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00c      	beq.n	80046f0 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046da:	3b01      	subs	r3, #1
 80046dc:	b29a      	uxth	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	3b01      	subs	r3, #1
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d005      	beq.n	8004706 <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fe:	f043 0204 	orr.w	r2, r3, #4
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471e:	2b00      	cmp	r3, #0
 8004720:	d010      	beq.n	8004744 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004726:	4619      	mov	r1, r3
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f89b 	bl	8004864 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b28      	cmp	r3, #40	; 0x28
 8004738:	d138      	bne.n	80047ac <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800473a:	68f9      	ldr	r1, [r7, #12]
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f83d 	bl	80047bc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004742:	e033      	b.n	80047ac <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800474c:	d011      	beq.n	8004772 <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7ff fe85 	bl	800445e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a18      	ldr	r2, [pc, #96]	; (80047b8 <I2C_ITSlaveCplt+0x1a8>)
 8004758:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2220      	movs	r2, #32
 800475e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7ff fa20 	bl	8003bb0 <HAL_I2C_ListenCpltCallback>
}
 8004770:	e01c      	b.n	80047ac <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b22      	cmp	r3, #34	; 0x22
 800477c:	d10b      	bne.n	8004796 <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2220      	movs	r2, #32
 8004782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7ff f9f6 	bl	8003b80 <HAL_I2C_SlaveRxCpltCallback>
}
 8004794:	e00a      	b.n	80047ac <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7ff f9e0 	bl	8003b6c <HAL_I2C_SlaveTxCpltCallback>
}
 80047ac:	bf00      	nop
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	fe00e800 	.word	0xfe00e800
 80047b8:	ffff0000 	.word	0xffff0000

080047bc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a25      	ldr	r2, [pc, #148]	; (8004860 <I2C_ITListenCplt+0xa4>)
 80047ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	089b      	lsrs	r3, r3, #2
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d022      	beq.n	800483a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	1c5a      	adds	r2, r3, #1
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004810:	2b00      	cmp	r3, #0
 8004812:	d012      	beq.n	800483a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004824:	b29b      	uxth	r3, r3
 8004826:	3b01      	subs	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004832:	f043 0204 	orr.w	r2, r3, #4
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800483a:	2107      	movs	r1, #7
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 fba7 	bl	8004f90 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2210      	movs	r2, #16
 8004848:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7ff f9ac 	bl	8003bb0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004858:	bf00      	nop
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	ffff0000 	.word	0xffff0000

08004864 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004874:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a55      	ldr	r2, [pc, #340]	; (80049d8 <I2C_ITError+0x174>)
 8004882:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	431a      	orrs	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004896:	7bfb      	ldrb	r3, [r7, #15]
 8004898:	2b28      	cmp	r3, #40	; 0x28
 800489a:	d005      	beq.n	80048a8 <I2C_ITError+0x44>
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	2b29      	cmp	r3, #41	; 0x29
 80048a0:	d002      	beq.n	80048a8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
 80048a4:	2b2a      	cmp	r3, #42	; 0x2a
 80048a6:	d10e      	bne.n	80048c6 <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80048a8:	2103      	movs	r1, #3
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fb70 	bl	8004f90 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2228      	movs	r2, #40	; 0x28
 80048b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a46      	ldr	r2, [pc, #280]	; (80049dc <I2C_ITError+0x178>)
 80048c2:	635a      	str	r2, [r3, #52]	; 0x34
 80048c4:	e013      	b.n	80048ee <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80048c6:	2107      	movs	r1, #7
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 fb61 	bl	8004f90 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b60      	cmp	r3, #96	; 0x60
 80048d8:	d003      	beq.n	80048e2 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048fc:	d123      	bne.n	8004946 <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800490c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004912:	2b00      	cmp	r3, #0
 8004914:	d05c      	beq.n	80049d0 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491a:	4a31      	ldr	r2, [pc, #196]	; (80049e0 <I2C_ITError+0x17c>)
 800491c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492a:	4618      	mov	r0, r3
 800492c:	f7fe f928 	bl	8002b80 <HAL_DMA_Abort_IT>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d04c      	beq.n	80049d0 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004940:	4610      	mov	r0, r2
 8004942:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004944:	e044      	b.n	80049d0 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004954:	d123      	bne.n	800499e <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004964:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496a:	2b00      	cmp	r3, #0
 800496c:	d030      	beq.n	80049d0 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004972:	4a1b      	ldr	r2, [pc, #108]	; (80049e0 <I2C_ITError+0x17c>)
 8004974:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004982:	4618      	mov	r0, r3
 8004984:	f7fe f8fc 	bl	8002b80 <HAL_DMA_Abort_IT>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d020      	beq.n	80049d0 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004998:	4610      	mov	r0, r2
 800499a:	4798      	blx	r3
}
 800499c:	e018      	b.n	80049d0 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b60      	cmp	r3, #96	; 0x60
 80049a8:	d10b      	bne.n	80049c2 <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7ff f920 	bl	8003c00 <HAL_I2C_AbortCpltCallback>
}
 80049c0:	e006      	b.n	80049d0 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7ff f90e 	bl	8003bec <HAL_I2C_ErrorCallback>
}
 80049d0:	bf00      	nop
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	ffff0000 	.word	0xffff0000
 80049dc:	08003c15 	.word	0x08003c15
 80049e0:	08004bcd 	.word	0x08004bcd

080049e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d103      	bne.n	8004a02 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2200      	movs	r2, #0
 8004a00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d007      	beq.n	8004a20 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699a      	ldr	r2, [r3, #24]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0201 	orr.w	r2, r2, #1
 8004a1e:	619a      	str	r2, [r3, #24]
  }
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a38:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a48:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d104      	bne.n	8004a5e <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004a54:	2112      	movs	r1, #18
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f000 fa2c 	bl	8004eb4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004a5c:	e02d      	b.n	8004aba <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8004a66:	441a      	add	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2bff      	cmp	r3, #255	; 0xff
 8004a74:	d903      	bls.n	8004a7e <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	22ff      	movs	r2, #255	; 0xff
 8004a7a:	851a      	strh	r2, [r3, #40]	; 0x28
 8004a7c:	e004      	b.n	8004a88 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	4619      	mov	r1, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	3328      	adds	r3, #40	; 0x28
 8004a98:	461a      	mov	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a9e:	f7fe f80f 	bl	8002ac0 <HAL_DMA_Start_IT>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d004      	beq.n	8004ab2 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004aa8:	2110      	movs	r1, #16
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f7ff feda 	bl	8004864 <I2C_ITError>
}
 8004ab0:	e003      	b.n	8004aba <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004ab2:	2112      	movs	r1, #18
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f000 f9fd 	bl	8004eb4 <I2C_Enable_IRQ>
}
 8004aba:	bf00      	nop
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b084      	sub	sp, #16
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ade:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d104      	bne.n	8004af4 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004aea:	2112      	movs	r1, #18
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 f9e1 	bl	8004eb4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004af2:	e02d      	b.n	8004b50 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8004afc:	441a      	add	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	2bff      	cmp	r3, #255	; 0xff
 8004b0a:	d903      	bls.n	8004b14 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	22ff      	movs	r2, #255	; 0xff
 8004b10:	851a      	strh	r2, [r3, #40]	; 0x28
 8004b12:	e004      	b.n	8004b1e <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	3324      	adds	r3, #36	; 0x24
 8004b28:	4619      	mov	r1, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	461a      	mov	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b34:	f7fd ffc4 	bl	8002ac0 <HAL_DMA_Start_IT>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d004      	beq.n	8004b48 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004b3e:	2110      	movs	r1, #16
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f7ff fe8f 	bl	8004864 <I2C_ITError>
}
 8004b46:	e003      	b.n	8004b50 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004b48:	2112      	movs	r1, #18
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 f9b2 	bl	8004eb4 <I2C_Enable_IRQ>
}
 8004b50:	bf00      	nop
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b68:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d007      	beq.n	8004b82 <I2C_DMAError+0x2a>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d007      	beq.n	8004b9a <I2C_DMAError+0x42>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8004b96:	2301      	movs	r3, #1
 8004b98:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7fe f99c 	bl	8002ed8 <HAL_DMA_GetError>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d00e      	beq.n	8004bc4 <I2C_DMAError+0x6c>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00b      	beq.n	8004bc4 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bba:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004bbc:	2110      	movs	r1, #16
 8004bbe:	68b8      	ldr	r0, [r7, #8]
 8004bc0:	f7ff fe50 	bl	8004864 <I2C_ITError>
  }
}
 8004bc4:	bf00      	nop
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bde:	2200      	movs	r2, #0
 8004be0:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be6:	2200      	movs	r2, #0
 8004be8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b60      	cmp	r3, #96	; 0x60
 8004bf4:	d107      	bne.n	8004c06 <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f7fe fffe 	bl	8003c00 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c04:	e002      	b.n	8004c0c <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f7fe fff0 	bl	8003bec <HAL_I2C_ErrorCallback>
}
 8004c0c:	bf00      	nop
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	603b      	str	r3, [r7, #0]
 8004c20:	4613      	mov	r3, r2
 8004c22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c24:	e022      	b.n	8004c6c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2c:	d01e      	beq.n	8004c6c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c2e:	f7fd f8b9 	bl	8001da4 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d302      	bcc.n	8004c44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d113      	bne.n	8004c6c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c48:	f043 0220 	orr.w	r2, r3, #32
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e00f      	b.n	8004c8c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699a      	ldr	r2, [r3, #24]
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	4013      	ands	r3, r2
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	bf0c      	ite	eq
 8004c7c:	2301      	moveq	r3, #1
 8004c7e:	2300      	movne	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	461a      	mov	r2, r3
 8004c84:	79fb      	ldrb	r3, [r7, #7]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d0cd      	beq.n	8004c26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ca0:	e02c      	b.n	8004cfc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	68b9      	ldr	r1, [r7, #8]
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f000 f870 	bl	8004d8c <I2C_IsAcknowledgeFailed>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e02a      	b.n	8004d0c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cbc:	d01e      	beq.n	8004cfc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cbe:	f7fd f871 	bl	8001da4 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d302      	bcc.n	8004cd4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d113      	bne.n	8004cfc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd8:	f043 0220 	orr.w	r2, r3, #32
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e007      	b.n	8004d0c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d1cb      	bne.n	8004ca2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d20:	e028      	b.n	8004d74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	68b9      	ldr	r1, [r7, #8]
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f000 f830 	bl	8004d8c <I2C_IsAcknowledgeFailed>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e026      	b.n	8004d84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d36:	f7fd f835 	bl	8001da4 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d302      	bcc.n	8004d4c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d113      	bne.n	8004d74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d50:	f043 0220 	orr.w	r2, r3, #32
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e007      	b.n	8004d84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	f003 0320 	and.w	r3, r3, #32
 8004d7e:	2b20      	cmp	r3, #32
 8004d80:	d1cf      	bne.n	8004d22 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	f003 0310 	and.w	r3, r3, #16
 8004da2:	2b10      	cmp	r3, #16
 8004da4:	d151      	bne.n	8004e4a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004da6:	e022      	b.n	8004dee <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dae:	d01e      	beq.n	8004dee <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db0:	f7fc fff8 	bl	8001da4 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d302      	bcc.n	8004dc6 <I2C_IsAcknowledgeFailed+0x3a>
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d113      	bne.n	8004dee <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dca:	f043 0220 	orr.w	r2, r3, #32
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e02e      	b.n	8004e4c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	f003 0320 	and.w	r3, r3, #32
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	d1d5      	bne.n	8004da8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2210      	movs	r2, #16
 8004e02:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f7ff fde9 	bl	80049e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6859      	ldr	r1, [r3, #4]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	4b0d      	ldr	r3, [pc, #52]	; (8004e54 <I2C_IsAcknowledgeFailed+0xc8>)
 8004e1e:	400b      	ands	r3, r1
 8004e20:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e26:	f043 0204 	orr.w	r2, r3, #4
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e000      	b.n	8004e4c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	fe00e800 	.word	0xfe00e800

08004e58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	607b      	str	r3, [r7, #4]
 8004e62:	460b      	mov	r3, r1
 8004e64:	817b      	strh	r3, [r7, #10]
 8004e66:	4613      	mov	r3, r2
 8004e68:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	0d5b      	lsrs	r3, r3, #21
 8004e74:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004e78:	4b0d      	ldr	r3, [pc, #52]	; (8004eb0 <I2C_TransferConfig+0x58>)
 8004e7a:	430b      	orrs	r3, r1
 8004e7c:	43db      	mvns	r3, r3
 8004e7e:	ea02 0103 	and.w	r1, r2, r3
 8004e82:	897b      	ldrh	r3, [r7, #10]
 8004e84:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e88:	7a7b      	ldrb	r3, [r7, #9]
 8004e8a:	041b      	lsls	r3, r3, #16
 8004e8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e90:	431a      	orrs	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	431a      	orrs	r2, r3
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004ea2:	bf00      	nop
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	03ff63ff 	.word	0x03ff63ff

08004eb4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec8:	4a2f      	ldr	r2, [pc, #188]	; (8004f88 <I2C_Enable_IRQ+0xd4>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d004      	beq.n	8004ed8 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004ed2:	4a2e      	ldr	r2, [pc, #184]	; (8004f8c <I2C_Enable_IRQ+0xd8>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d124      	bne.n	8004f22 <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004ed8:	887b      	ldrh	r3, [r7, #2]
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004ee8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8004eea:	887b      	ldrh	r3, [r7, #2]
 8004eec:	f003 0311 	and.w	r3, r3, #17
 8004ef0:	2b11      	cmp	r3, #17
 8004ef2:	d103      	bne.n	8004efc <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004efa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8004efc:	887b      	ldrh	r3, [r7, #2]
 8004efe:	f003 0312 	and.w	r3, r3, #18
 8004f02:	2b12      	cmp	r3, #18
 8004f04:	d103      	bne.n	8004f0e <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f043 0320 	orr.w	r3, r3, #32
 8004f0c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8004f0e:	887b      	ldrh	r3, [r7, #2]
 8004f10:	f003 0312 	and.w	r3, r3, #18
 8004f14:	2b12      	cmp	r3, #18
 8004f16:	d128      	bne.n	8004f6a <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f1e:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8004f20:	e023      	b.n	8004f6a <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004f22:	887b      	ldrh	r3, [r7, #2]
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004f32:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004f34:	887b      	ldrh	r3, [r7, #2]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004f44:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004f46:	887b      	ldrh	r3, [r7, #2]
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8004f56:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8004f58:	887b      	ldrh	r3, [r7, #2]
 8004f5a:	f003 0312 	and.w	r3, r3, #18
 8004f5e:	2b12      	cmp	r3, #18
 8004f60:	d103      	bne.n	8004f6a <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f043 0320 	orr.w	r3, r3, #32
 8004f68:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	6819      	ldr	r1, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	601a      	str	r2, [r3, #0]
}
 8004f7a:	bf00      	nop
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	08003e1b 	.word	0x08003e1b
 8004f8c:	08004001 	.word	0x08004001

08004f90 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	460b      	mov	r3, r1
 8004f9a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004fa0:	887b      	ldrh	r3, [r7, #2]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00f      	beq.n	8004fca <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004fb0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004fbe:	2b28      	cmp	r3, #40	; 0x28
 8004fc0:	d003      	beq.n	8004fca <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004fc8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004fca:	887b      	ldrh	r3, [r7, #2]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00f      	beq.n	8004ff4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004fda:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004fe8:	2b28      	cmp	r3, #40	; 0x28
 8004fea:	d003      	beq.n	8004ff4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004ff2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004ff4:	887b      	ldrh	r3, [r7, #2]
 8004ff6:	f003 0304 	and.w	r3, r3, #4
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005004:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8005006:	887b      	ldrh	r3, [r7, #2]
 8005008:	f003 0311 	and.w	r3, r3, #17
 800500c:	2b11      	cmp	r3, #17
 800500e:	d103      	bne.n	8005018 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005016:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8005018:	887b      	ldrh	r3, [r7, #2]
 800501a:	f003 0312 	and.w	r3, r3, #18
 800501e:	2b12      	cmp	r3, #18
 8005020:	d103      	bne.n	800502a <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f043 0320 	orr.w	r3, r3, #32
 8005028:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800502a:	887b      	ldrh	r3, [r7, #2]
 800502c:	f003 0312 	and.w	r3, r3, #18
 8005030:	2b12      	cmp	r3, #18
 8005032:	d103      	bne.n	800503c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800503a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6819      	ldr	r1, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	43da      	mvns	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	400a      	ands	r2, r1
 800504c:	601a      	str	r2, [r3, #0]
}
 800504e:	bf00      	nop
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b20      	cmp	r3, #32
 800506e:	d138      	bne.n	80050e2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005076:	2b01      	cmp	r3, #1
 8005078:	d101      	bne.n	800507e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800507a:	2302      	movs	r3, #2
 800507c:	e032      	b.n	80050e4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2224      	movs	r2, #36	; 0x24
 800508a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0201 	bic.w	r2, r2, #1
 800509c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050ac:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	6819      	ldr	r1, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f042 0201 	orr.w	r2, r2, #1
 80050cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	e000      	b.n	80050e4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80050e2:	2302      	movs	r3, #2
  }
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b20      	cmp	r3, #32
 8005104:	d139      	bne.n	800517a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800510c:	2b01      	cmp	r3, #1
 800510e:	d101      	bne.n	8005114 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005110:	2302      	movs	r3, #2
 8005112:	e033      	b.n	800517c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2224      	movs	r2, #36	; 0x24
 8005120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 0201 	bic.w	r2, r2, #1
 8005132:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005142:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	021b      	lsls	r3, r3, #8
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f042 0201 	orr.w	r2, r2, #1
 8005164:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2220      	movs	r2, #32
 800516a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005176:	2300      	movs	r3, #0
 8005178:	e000      	b.n	800517c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800517a:	2302      	movs	r3, #2
  }
}
 800517c:	4618      	mov	r0, r3
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800518c:	4b05      	ldr	r3, [pc, #20]	; (80051a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a04      	ldr	r2, [pc, #16]	; (80051a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005196:	6013      	str	r3, [r2, #0]
}
 8005198:	bf00      	nop
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40007000 	.word	0x40007000

080051a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80051ae:	2300      	movs	r3, #0
 80051b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80051b2:	4b23      	ldr	r3, [pc, #140]	; (8005240 <HAL_PWREx_EnableOverDrive+0x98>)
 80051b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b6:	4a22      	ldr	r2, [pc, #136]	; (8005240 <HAL_PWREx_EnableOverDrive+0x98>)
 80051b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051bc:	6413      	str	r3, [r2, #64]	; 0x40
 80051be:	4b20      	ldr	r3, [pc, #128]	; (8005240 <HAL_PWREx_EnableOverDrive+0x98>)
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c6:	603b      	str	r3, [r7, #0]
 80051c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80051ca:	4b1e      	ldr	r3, [pc, #120]	; (8005244 <HAL_PWREx_EnableOverDrive+0x9c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a1d      	ldr	r2, [pc, #116]	; (8005244 <HAL_PWREx_EnableOverDrive+0x9c>)
 80051d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051d4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051d6:	f7fc fde5 	bl	8001da4 <HAL_GetTick>
 80051da:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80051dc:	e009      	b.n	80051f2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80051de:	f7fc fde1 	bl	8001da4 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051ec:	d901      	bls.n	80051f2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e022      	b.n	8005238 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80051f2:	4b14      	ldr	r3, [pc, #80]	; (8005244 <HAL_PWREx_EnableOverDrive+0x9c>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051fe:	d1ee      	bne.n	80051de <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005200:	4b10      	ldr	r3, [pc, #64]	; (8005244 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a0f      	ldr	r2, [pc, #60]	; (8005244 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005206:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800520a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800520c:	f7fc fdca 	bl	8001da4 <HAL_GetTick>
 8005210:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005212:	e009      	b.n	8005228 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005214:	f7fc fdc6 	bl	8001da4 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005222:	d901      	bls.n	8005228 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e007      	b.n	8005238 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005228:	4b06      	ldr	r3, [pc, #24]	; (8005244 <HAL_PWREx_EnableOverDrive+0x9c>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005230:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005234:	d1ee      	bne.n	8005214 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	40023800 	.word	0x40023800
 8005244:	40007000 	.word	0x40007000

08005248 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005250:	2300      	movs	r3, #0
 8005252:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e291      	b.n	8005782 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	f000 8087 	beq.w	800537a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800526c:	4b96      	ldr	r3, [pc, #600]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f003 030c 	and.w	r3, r3, #12
 8005274:	2b04      	cmp	r3, #4
 8005276:	d00c      	beq.n	8005292 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005278:	4b93      	ldr	r3, [pc, #588]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f003 030c 	and.w	r3, r3, #12
 8005280:	2b08      	cmp	r3, #8
 8005282:	d112      	bne.n	80052aa <HAL_RCC_OscConfig+0x62>
 8005284:	4b90      	ldr	r3, [pc, #576]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800528c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005290:	d10b      	bne.n	80052aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005292:	4b8d      	ldr	r3, [pc, #564]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d06c      	beq.n	8005378 <HAL_RCC_OscConfig+0x130>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d168      	bne.n	8005378 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e26b      	b.n	8005782 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052b2:	d106      	bne.n	80052c2 <HAL_RCC_OscConfig+0x7a>
 80052b4:	4b84      	ldr	r3, [pc, #528]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a83      	ldr	r2, [pc, #524]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 80052ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052be:	6013      	str	r3, [r2, #0]
 80052c0:	e02e      	b.n	8005320 <HAL_RCC_OscConfig+0xd8>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10c      	bne.n	80052e4 <HAL_RCC_OscConfig+0x9c>
 80052ca:	4b7f      	ldr	r3, [pc, #508]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a7e      	ldr	r2, [pc, #504]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 80052d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052d4:	6013      	str	r3, [r2, #0]
 80052d6:	4b7c      	ldr	r3, [pc, #496]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a7b      	ldr	r2, [pc, #492]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 80052dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052e0:	6013      	str	r3, [r2, #0]
 80052e2:	e01d      	b.n	8005320 <HAL_RCC_OscConfig+0xd8>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052ec:	d10c      	bne.n	8005308 <HAL_RCC_OscConfig+0xc0>
 80052ee:	4b76      	ldr	r3, [pc, #472]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a75      	ldr	r2, [pc, #468]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 80052f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052f8:	6013      	str	r3, [r2, #0]
 80052fa:	4b73      	ldr	r3, [pc, #460]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a72      	ldr	r2, [pc, #456]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 8005300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	e00b      	b.n	8005320 <HAL_RCC_OscConfig+0xd8>
 8005308:	4b6f      	ldr	r3, [pc, #444]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a6e      	ldr	r2, [pc, #440]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 800530e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005312:	6013      	str	r3, [r2, #0]
 8005314:	4b6c      	ldr	r3, [pc, #432]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a6b      	ldr	r2, [pc, #428]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 800531a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800531e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d013      	beq.n	8005350 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005328:	f7fc fd3c 	bl	8001da4 <HAL_GetTick>
 800532c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800532e:	e008      	b.n	8005342 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005330:	f7fc fd38 	bl	8001da4 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b64      	cmp	r3, #100	; 0x64
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e21f      	b.n	8005782 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005342:	4b61      	ldr	r3, [pc, #388]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0f0      	beq.n	8005330 <HAL_RCC_OscConfig+0xe8>
 800534e:	e014      	b.n	800537a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005350:	f7fc fd28 	bl	8001da4 <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005356:	e008      	b.n	800536a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005358:	f7fc fd24 	bl	8001da4 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b64      	cmp	r3, #100	; 0x64
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e20b      	b.n	8005782 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800536a:	4b57      	ldr	r3, [pc, #348]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1f0      	bne.n	8005358 <HAL_RCC_OscConfig+0x110>
 8005376:	e000      	b.n	800537a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d069      	beq.n	800545a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005386:	4b50      	ldr	r3, [pc, #320]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f003 030c 	and.w	r3, r3, #12
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00b      	beq.n	80053aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005392:	4b4d      	ldr	r3, [pc, #308]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f003 030c 	and.w	r3, r3, #12
 800539a:	2b08      	cmp	r3, #8
 800539c:	d11c      	bne.n	80053d8 <HAL_RCC_OscConfig+0x190>
 800539e:	4b4a      	ldr	r3, [pc, #296]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d116      	bne.n	80053d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053aa:	4b47      	ldr	r3, [pc, #284]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d005      	beq.n	80053c2 <HAL_RCC_OscConfig+0x17a>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d001      	beq.n	80053c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e1df      	b.n	8005782 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053c2:	4b41      	ldr	r3, [pc, #260]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	493d      	ldr	r1, [pc, #244]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053d6:	e040      	b.n	800545a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d023      	beq.n	8005428 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053e0:	4b39      	ldr	r3, [pc, #228]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a38      	ldr	r2, [pc, #224]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 80053e6:	f043 0301 	orr.w	r3, r3, #1
 80053ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ec:	f7fc fcda 	bl	8001da4 <HAL_GetTick>
 80053f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053f2:	e008      	b.n	8005406 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053f4:	f7fc fcd6 	bl	8001da4 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d901      	bls.n	8005406 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e1bd      	b.n	8005782 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005406:	4b30      	ldr	r3, [pc, #192]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d0f0      	beq.n	80053f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005412:	4b2d      	ldr	r3, [pc, #180]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	00db      	lsls	r3, r3, #3
 8005420:	4929      	ldr	r1, [pc, #164]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 8005422:	4313      	orrs	r3, r2
 8005424:	600b      	str	r3, [r1, #0]
 8005426:	e018      	b.n	800545a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005428:	4b27      	ldr	r3, [pc, #156]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a26      	ldr	r2, [pc, #152]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 800542e:	f023 0301 	bic.w	r3, r3, #1
 8005432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005434:	f7fc fcb6 	bl	8001da4 <HAL_GetTick>
 8005438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800543a:	e008      	b.n	800544e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800543c:	f7fc fcb2 	bl	8001da4 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b02      	cmp	r3, #2
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e199      	b.n	8005782 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800544e:	4b1e      	ldr	r3, [pc, #120]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1f0      	bne.n	800543c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0308 	and.w	r3, r3, #8
 8005462:	2b00      	cmp	r3, #0
 8005464:	d038      	beq.n	80054d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d019      	beq.n	80054a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800546e:	4b16      	ldr	r3, [pc, #88]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 8005470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005472:	4a15      	ldr	r2, [pc, #84]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 8005474:	f043 0301 	orr.w	r3, r3, #1
 8005478:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800547a:	f7fc fc93 	bl	8001da4 <HAL_GetTick>
 800547e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005480:	e008      	b.n	8005494 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005482:	f7fc fc8f 	bl	8001da4 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	2b02      	cmp	r3, #2
 800548e:	d901      	bls.n	8005494 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e176      	b.n	8005782 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005494:	4b0c      	ldr	r3, [pc, #48]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 8005496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d0f0      	beq.n	8005482 <HAL_RCC_OscConfig+0x23a>
 80054a0:	e01a      	b.n	80054d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054a2:	4b09      	ldr	r3, [pc, #36]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 80054a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054a6:	4a08      	ldr	r2, [pc, #32]	; (80054c8 <HAL_RCC_OscConfig+0x280>)
 80054a8:	f023 0301 	bic.w	r3, r3, #1
 80054ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ae:	f7fc fc79 	bl	8001da4 <HAL_GetTick>
 80054b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054b4:	e00a      	b.n	80054cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054b6:	f7fc fc75 	bl	8001da4 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d903      	bls.n	80054cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e15c      	b.n	8005782 <HAL_RCC_OscConfig+0x53a>
 80054c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054cc:	4b91      	ldr	r3, [pc, #580]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 80054ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054d0:	f003 0302 	and.w	r3, r3, #2
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1ee      	bne.n	80054b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0304 	and.w	r3, r3, #4
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 80a4 	beq.w	800562e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054e6:	4b8b      	ldr	r3, [pc, #556]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 80054e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10d      	bne.n	800550e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80054f2:	4b88      	ldr	r3, [pc, #544]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	4a87      	ldr	r2, [pc, #540]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 80054f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054fc:	6413      	str	r3, [r2, #64]	; 0x40
 80054fe:	4b85      	ldr	r3, [pc, #532]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005506:	60bb      	str	r3, [r7, #8]
 8005508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800550a:	2301      	movs	r3, #1
 800550c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800550e:	4b82      	ldr	r3, [pc, #520]	; (8005718 <HAL_RCC_OscConfig+0x4d0>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005516:	2b00      	cmp	r3, #0
 8005518:	d118      	bne.n	800554c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800551a:	4b7f      	ldr	r3, [pc, #508]	; (8005718 <HAL_RCC_OscConfig+0x4d0>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a7e      	ldr	r2, [pc, #504]	; (8005718 <HAL_RCC_OscConfig+0x4d0>)
 8005520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005526:	f7fc fc3d 	bl	8001da4 <HAL_GetTick>
 800552a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800552c:	e008      	b.n	8005540 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800552e:	f7fc fc39 	bl	8001da4 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b64      	cmp	r3, #100	; 0x64
 800553a:	d901      	bls.n	8005540 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e120      	b.n	8005782 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005540:	4b75      	ldr	r3, [pc, #468]	; (8005718 <HAL_RCC_OscConfig+0x4d0>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005548:	2b00      	cmp	r3, #0
 800554a:	d0f0      	beq.n	800552e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d106      	bne.n	8005562 <HAL_RCC_OscConfig+0x31a>
 8005554:	4b6f      	ldr	r3, [pc, #444]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 8005556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005558:	4a6e      	ldr	r2, [pc, #440]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 800555a:	f043 0301 	orr.w	r3, r3, #1
 800555e:	6713      	str	r3, [r2, #112]	; 0x70
 8005560:	e02d      	b.n	80055be <HAL_RCC_OscConfig+0x376>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10c      	bne.n	8005584 <HAL_RCC_OscConfig+0x33c>
 800556a:	4b6a      	ldr	r3, [pc, #424]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 800556c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556e:	4a69      	ldr	r2, [pc, #420]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 8005570:	f023 0301 	bic.w	r3, r3, #1
 8005574:	6713      	str	r3, [r2, #112]	; 0x70
 8005576:	4b67      	ldr	r3, [pc, #412]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 8005578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557a:	4a66      	ldr	r2, [pc, #408]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 800557c:	f023 0304 	bic.w	r3, r3, #4
 8005580:	6713      	str	r3, [r2, #112]	; 0x70
 8005582:	e01c      	b.n	80055be <HAL_RCC_OscConfig+0x376>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	2b05      	cmp	r3, #5
 800558a:	d10c      	bne.n	80055a6 <HAL_RCC_OscConfig+0x35e>
 800558c:	4b61      	ldr	r3, [pc, #388]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 800558e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005590:	4a60      	ldr	r2, [pc, #384]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 8005592:	f043 0304 	orr.w	r3, r3, #4
 8005596:	6713      	str	r3, [r2, #112]	; 0x70
 8005598:	4b5e      	ldr	r3, [pc, #376]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 800559a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559c:	4a5d      	ldr	r2, [pc, #372]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 800559e:	f043 0301 	orr.w	r3, r3, #1
 80055a2:	6713      	str	r3, [r2, #112]	; 0x70
 80055a4:	e00b      	b.n	80055be <HAL_RCC_OscConfig+0x376>
 80055a6:	4b5b      	ldr	r3, [pc, #364]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 80055a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055aa:	4a5a      	ldr	r2, [pc, #360]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 80055ac:	f023 0301 	bic.w	r3, r3, #1
 80055b0:	6713      	str	r3, [r2, #112]	; 0x70
 80055b2:	4b58      	ldr	r3, [pc, #352]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 80055b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b6:	4a57      	ldr	r2, [pc, #348]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 80055b8:	f023 0304 	bic.w	r3, r3, #4
 80055bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d015      	beq.n	80055f2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c6:	f7fc fbed 	bl	8001da4 <HAL_GetTick>
 80055ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055cc:	e00a      	b.n	80055e4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ce:	f7fc fbe9 	bl	8001da4 <HAL_GetTick>
 80055d2:	4602      	mov	r2, r0
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80055dc:	4293      	cmp	r3, r2
 80055de:	d901      	bls.n	80055e4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e0ce      	b.n	8005782 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055e4:	4b4b      	ldr	r3, [pc, #300]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 80055e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d0ee      	beq.n	80055ce <HAL_RCC_OscConfig+0x386>
 80055f0:	e014      	b.n	800561c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f2:	f7fc fbd7 	bl	8001da4 <HAL_GetTick>
 80055f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055f8:	e00a      	b.n	8005610 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055fa:	f7fc fbd3 	bl	8001da4 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	f241 3288 	movw	r2, #5000	; 0x1388
 8005608:	4293      	cmp	r3, r2
 800560a:	d901      	bls.n	8005610 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e0b8      	b.n	8005782 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005610:	4b40      	ldr	r3, [pc, #256]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 8005612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1ee      	bne.n	80055fa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800561c:	7dfb      	ldrb	r3, [r7, #23]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d105      	bne.n	800562e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005622:	4b3c      	ldr	r3, [pc, #240]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	4a3b      	ldr	r2, [pc, #236]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 8005628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800562c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 80a4 	beq.w	8005780 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005638:	4b36      	ldr	r3, [pc, #216]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f003 030c 	and.w	r3, r3, #12
 8005640:	2b08      	cmp	r3, #8
 8005642:	d06b      	beq.n	800571c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	2b02      	cmp	r3, #2
 800564a:	d149      	bne.n	80056e0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800564c:	4b31      	ldr	r3, [pc, #196]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a30      	ldr	r2, [pc, #192]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 8005652:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005658:	f7fc fba4 	bl	8001da4 <HAL_GetTick>
 800565c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800565e:	e008      	b.n	8005672 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005660:	f7fc fba0 	bl	8001da4 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	2b02      	cmp	r3, #2
 800566c:	d901      	bls.n	8005672 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e087      	b.n	8005782 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005672:	4b28      	ldr	r3, [pc, #160]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1f0      	bne.n	8005660 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	69da      	ldr	r2, [r3, #28]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	431a      	orrs	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	019b      	lsls	r3, r3, #6
 800568e:	431a      	orrs	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005694:	085b      	lsrs	r3, r3, #1
 8005696:	3b01      	subs	r3, #1
 8005698:	041b      	lsls	r3, r3, #16
 800569a:	431a      	orrs	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a0:	061b      	lsls	r3, r3, #24
 80056a2:	4313      	orrs	r3, r2
 80056a4:	4a1b      	ldr	r2, [pc, #108]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 80056a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056aa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056ac:	4b19      	ldr	r3, [pc, #100]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a18      	ldr	r2, [pc, #96]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 80056b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b8:	f7fc fb74 	bl	8001da4 <HAL_GetTick>
 80056bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056be:	e008      	b.n	80056d2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056c0:	f7fc fb70 	bl	8001da4 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d901      	bls.n	80056d2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e057      	b.n	8005782 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056d2:	4b10      	ldr	r3, [pc, #64]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d0f0      	beq.n	80056c0 <HAL_RCC_OscConfig+0x478>
 80056de:	e04f      	b.n	8005780 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056e0:	4b0c      	ldr	r3, [pc, #48]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a0b      	ldr	r2, [pc, #44]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 80056e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ec:	f7fc fb5a 	bl	8001da4 <HAL_GetTick>
 80056f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056f2:	e008      	b.n	8005706 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056f4:	f7fc fb56 	bl	8001da4 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e03d      	b.n	8005782 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005706:	4b03      	ldr	r3, [pc, #12]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1f0      	bne.n	80056f4 <HAL_RCC_OscConfig+0x4ac>
 8005712:	e035      	b.n	8005780 <HAL_RCC_OscConfig+0x538>
 8005714:	40023800 	.word	0x40023800
 8005718:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800571c:	4b1b      	ldr	r3, [pc, #108]	; (800578c <HAL_RCC_OscConfig+0x544>)
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d028      	beq.n	800577c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005734:	429a      	cmp	r2, r3
 8005736:	d121      	bne.n	800577c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005742:	429a      	cmp	r2, r3
 8005744:	d11a      	bne.n	800577c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800574c:	4013      	ands	r3, r2
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005752:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005754:	4293      	cmp	r3, r2
 8005756:	d111      	bne.n	800577c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005762:	085b      	lsrs	r3, r3, #1
 8005764:	3b01      	subs	r3, #1
 8005766:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005768:	429a      	cmp	r2, r3
 800576a:	d107      	bne.n	800577c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005776:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005778:	429a      	cmp	r2, r3
 800577a:	d001      	beq.n	8005780 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e000      	b.n	8005782 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3718      	adds	r7, #24
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	40023800 	.word	0x40023800

08005790 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800579a:	2300      	movs	r3, #0
 800579c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e0d0      	b.n	800594a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057a8:	4b6a      	ldr	r3, [pc, #424]	; (8005954 <HAL_RCC_ClockConfig+0x1c4>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 030f 	and.w	r3, r3, #15
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d910      	bls.n	80057d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057b6:	4b67      	ldr	r3, [pc, #412]	; (8005954 <HAL_RCC_ClockConfig+0x1c4>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f023 020f 	bic.w	r2, r3, #15
 80057be:	4965      	ldr	r1, [pc, #404]	; (8005954 <HAL_RCC_ClockConfig+0x1c4>)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057c6:	4b63      	ldr	r3, [pc, #396]	; (8005954 <HAL_RCC_ClockConfig+0x1c4>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 030f 	and.w	r3, r3, #15
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d001      	beq.n	80057d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e0b8      	b.n	800594a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d020      	beq.n	8005826 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0304 	and.w	r3, r3, #4
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d005      	beq.n	80057fc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057f0:	4b59      	ldr	r3, [pc, #356]	; (8005958 <HAL_RCC_ClockConfig+0x1c8>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	4a58      	ldr	r2, [pc, #352]	; (8005958 <HAL_RCC_ClockConfig+0x1c8>)
 80057f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0308 	and.w	r3, r3, #8
 8005804:	2b00      	cmp	r3, #0
 8005806:	d005      	beq.n	8005814 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005808:	4b53      	ldr	r3, [pc, #332]	; (8005958 <HAL_RCC_ClockConfig+0x1c8>)
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	4a52      	ldr	r2, [pc, #328]	; (8005958 <HAL_RCC_ClockConfig+0x1c8>)
 800580e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005812:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005814:	4b50      	ldr	r3, [pc, #320]	; (8005958 <HAL_RCC_ClockConfig+0x1c8>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	494d      	ldr	r1, [pc, #308]	; (8005958 <HAL_RCC_ClockConfig+0x1c8>)
 8005822:	4313      	orrs	r3, r2
 8005824:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	d040      	beq.n	80058b4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d107      	bne.n	800584a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800583a:	4b47      	ldr	r3, [pc, #284]	; (8005958 <HAL_RCC_ClockConfig+0x1c8>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d115      	bne.n	8005872 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e07f      	b.n	800594a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	2b02      	cmp	r3, #2
 8005850:	d107      	bne.n	8005862 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005852:	4b41      	ldr	r3, [pc, #260]	; (8005958 <HAL_RCC_ClockConfig+0x1c8>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d109      	bne.n	8005872 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e073      	b.n	800594a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005862:	4b3d      	ldr	r3, [pc, #244]	; (8005958 <HAL_RCC_ClockConfig+0x1c8>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e06b      	b.n	800594a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005872:	4b39      	ldr	r3, [pc, #228]	; (8005958 <HAL_RCC_ClockConfig+0x1c8>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f023 0203 	bic.w	r2, r3, #3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	4936      	ldr	r1, [pc, #216]	; (8005958 <HAL_RCC_ClockConfig+0x1c8>)
 8005880:	4313      	orrs	r3, r2
 8005882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005884:	f7fc fa8e 	bl	8001da4 <HAL_GetTick>
 8005888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800588a:	e00a      	b.n	80058a2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800588c:	f7fc fa8a 	bl	8001da4 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	f241 3288 	movw	r2, #5000	; 0x1388
 800589a:	4293      	cmp	r3, r2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e053      	b.n	800594a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058a2:	4b2d      	ldr	r3, [pc, #180]	; (8005958 <HAL_RCC_ClockConfig+0x1c8>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f003 020c 	and.w	r2, r3, #12
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d1eb      	bne.n	800588c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058b4:	4b27      	ldr	r3, [pc, #156]	; (8005954 <HAL_RCC_ClockConfig+0x1c4>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 030f 	and.w	r3, r3, #15
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d210      	bcs.n	80058e4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058c2:	4b24      	ldr	r3, [pc, #144]	; (8005954 <HAL_RCC_ClockConfig+0x1c4>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f023 020f 	bic.w	r2, r3, #15
 80058ca:	4922      	ldr	r1, [pc, #136]	; (8005954 <HAL_RCC_ClockConfig+0x1c4>)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058d2:	4b20      	ldr	r3, [pc, #128]	; (8005954 <HAL_RCC_ClockConfig+0x1c4>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 030f 	and.w	r3, r3, #15
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d001      	beq.n	80058e4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e032      	b.n	800594a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0304 	and.w	r3, r3, #4
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d008      	beq.n	8005902 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058f0:	4b19      	ldr	r3, [pc, #100]	; (8005958 <HAL_RCC_ClockConfig+0x1c8>)
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	4916      	ldr	r1, [pc, #88]	; (8005958 <HAL_RCC_ClockConfig+0x1c8>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0308 	and.w	r3, r3, #8
 800590a:	2b00      	cmp	r3, #0
 800590c:	d009      	beq.n	8005922 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800590e:	4b12      	ldr	r3, [pc, #72]	; (8005958 <HAL_RCC_ClockConfig+0x1c8>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	00db      	lsls	r3, r3, #3
 800591c:	490e      	ldr	r1, [pc, #56]	; (8005958 <HAL_RCC_ClockConfig+0x1c8>)
 800591e:	4313      	orrs	r3, r2
 8005920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005922:	f000 f821 	bl	8005968 <HAL_RCC_GetSysClockFreq>
 8005926:	4601      	mov	r1, r0
 8005928:	4b0b      	ldr	r3, [pc, #44]	; (8005958 <HAL_RCC_ClockConfig+0x1c8>)
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	091b      	lsrs	r3, r3, #4
 800592e:	f003 030f 	and.w	r3, r3, #15
 8005932:	4a0a      	ldr	r2, [pc, #40]	; (800595c <HAL_RCC_ClockConfig+0x1cc>)
 8005934:	5cd3      	ldrb	r3, [r2, r3]
 8005936:	fa21 f303 	lsr.w	r3, r1, r3
 800593a:	4a09      	ldr	r2, [pc, #36]	; (8005960 <HAL_RCC_ClockConfig+0x1d0>)
 800593c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800593e:	4b09      	ldr	r3, [pc, #36]	; (8005964 <HAL_RCC_ClockConfig+0x1d4>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4618      	mov	r0, r3
 8005944:	f7fc f9ea 	bl	8001d1c <HAL_InitTick>

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	40023c00 	.word	0x40023c00
 8005958:	40023800 	.word	0x40023800
 800595c:	08008870 	.word	0x08008870
 8005960:	20000000 	.word	0x20000000
 8005964:	20000004 	.word	0x20000004

08005968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800596e:	2300      	movs	r3, #0
 8005970:	607b      	str	r3, [r7, #4]
 8005972:	2300      	movs	r3, #0
 8005974:	60fb      	str	r3, [r7, #12]
 8005976:	2300      	movs	r3, #0
 8005978:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800597a:	2300      	movs	r3, #0
 800597c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800597e:	4b63      	ldr	r3, [pc, #396]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 030c 	and.w	r3, r3, #12
 8005986:	2b04      	cmp	r3, #4
 8005988:	d007      	beq.n	800599a <HAL_RCC_GetSysClockFreq+0x32>
 800598a:	2b08      	cmp	r3, #8
 800598c:	d008      	beq.n	80059a0 <HAL_RCC_GetSysClockFreq+0x38>
 800598e:	2b00      	cmp	r3, #0
 8005990:	f040 80b4 	bne.w	8005afc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005994:	4b5e      	ldr	r3, [pc, #376]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005996:	60bb      	str	r3, [r7, #8]
      break;
 8005998:	e0b3      	b.n	8005b02 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800599a:	4b5e      	ldr	r3, [pc, #376]	; (8005b14 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800599c:	60bb      	str	r3, [r7, #8]
      break;
 800599e:	e0b0      	b.n	8005b02 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059a0:	4b5a      	ldr	r3, [pc, #360]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059a8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80059aa:	4b58      	ldr	r3, [pc, #352]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d04a      	beq.n	8005a4c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059b6:	4b55      	ldr	r3, [pc, #340]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	099b      	lsrs	r3, r3, #6
 80059bc:	f04f 0400 	mov.w	r4, #0
 80059c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80059c4:	f04f 0200 	mov.w	r2, #0
 80059c8:	ea03 0501 	and.w	r5, r3, r1
 80059cc:	ea04 0602 	and.w	r6, r4, r2
 80059d0:	4629      	mov	r1, r5
 80059d2:	4632      	mov	r2, r6
 80059d4:	f04f 0300 	mov.w	r3, #0
 80059d8:	f04f 0400 	mov.w	r4, #0
 80059dc:	0154      	lsls	r4, r2, #5
 80059de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80059e2:	014b      	lsls	r3, r1, #5
 80059e4:	4619      	mov	r1, r3
 80059e6:	4622      	mov	r2, r4
 80059e8:	1b49      	subs	r1, r1, r5
 80059ea:	eb62 0206 	sbc.w	r2, r2, r6
 80059ee:	f04f 0300 	mov.w	r3, #0
 80059f2:	f04f 0400 	mov.w	r4, #0
 80059f6:	0194      	lsls	r4, r2, #6
 80059f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80059fc:	018b      	lsls	r3, r1, #6
 80059fe:	1a5b      	subs	r3, r3, r1
 8005a00:	eb64 0402 	sbc.w	r4, r4, r2
 8005a04:	f04f 0100 	mov.w	r1, #0
 8005a08:	f04f 0200 	mov.w	r2, #0
 8005a0c:	00e2      	lsls	r2, r4, #3
 8005a0e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005a12:	00d9      	lsls	r1, r3, #3
 8005a14:	460b      	mov	r3, r1
 8005a16:	4614      	mov	r4, r2
 8005a18:	195b      	adds	r3, r3, r5
 8005a1a:	eb44 0406 	adc.w	r4, r4, r6
 8005a1e:	f04f 0100 	mov.w	r1, #0
 8005a22:	f04f 0200 	mov.w	r2, #0
 8005a26:	0262      	lsls	r2, r4, #9
 8005a28:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005a2c:	0259      	lsls	r1, r3, #9
 8005a2e:	460b      	mov	r3, r1
 8005a30:	4614      	mov	r4, r2
 8005a32:	4618      	mov	r0, r3
 8005a34:	4621      	mov	r1, r4
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f04f 0400 	mov.w	r4, #0
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	4623      	mov	r3, r4
 8005a40:	f7fa fc46 	bl	80002d0 <__aeabi_uldivmod>
 8005a44:	4603      	mov	r3, r0
 8005a46:	460c      	mov	r4, r1
 8005a48:	60fb      	str	r3, [r7, #12]
 8005a4a:	e049      	b.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a4c:	4b2f      	ldr	r3, [pc, #188]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	099b      	lsrs	r3, r3, #6
 8005a52:	f04f 0400 	mov.w	r4, #0
 8005a56:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005a5a:	f04f 0200 	mov.w	r2, #0
 8005a5e:	ea03 0501 	and.w	r5, r3, r1
 8005a62:	ea04 0602 	and.w	r6, r4, r2
 8005a66:	4629      	mov	r1, r5
 8005a68:	4632      	mov	r2, r6
 8005a6a:	f04f 0300 	mov.w	r3, #0
 8005a6e:	f04f 0400 	mov.w	r4, #0
 8005a72:	0154      	lsls	r4, r2, #5
 8005a74:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005a78:	014b      	lsls	r3, r1, #5
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	4622      	mov	r2, r4
 8005a7e:	1b49      	subs	r1, r1, r5
 8005a80:	eb62 0206 	sbc.w	r2, r2, r6
 8005a84:	f04f 0300 	mov.w	r3, #0
 8005a88:	f04f 0400 	mov.w	r4, #0
 8005a8c:	0194      	lsls	r4, r2, #6
 8005a8e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005a92:	018b      	lsls	r3, r1, #6
 8005a94:	1a5b      	subs	r3, r3, r1
 8005a96:	eb64 0402 	sbc.w	r4, r4, r2
 8005a9a:	f04f 0100 	mov.w	r1, #0
 8005a9e:	f04f 0200 	mov.w	r2, #0
 8005aa2:	00e2      	lsls	r2, r4, #3
 8005aa4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005aa8:	00d9      	lsls	r1, r3, #3
 8005aaa:	460b      	mov	r3, r1
 8005aac:	4614      	mov	r4, r2
 8005aae:	195b      	adds	r3, r3, r5
 8005ab0:	eb44 0406 	adc.w	r4, r4, r6
 8005ab4:	f04f 0100 	mov.w	r1, #0
 8005ab8:	f04f 0200 	mov.w	r2, #0
 8005abc:	02a2      	lsls	r2, r4, #10
 8005abe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005ac2:	0299      	lsls	r1, r3, #10
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	4614      	mov	r4, r2
 8005ac8:	4618      	mov	r0, r3
 8005aca:	4621      	mov	r1, r4
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f04f 0400 	mov.w	r4, #0
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	4623      	mov	r3, r4
 8005ad6:	f7fa fbfb 	bl	80002d0 <__aeabi_uldivmod>
 8005ada:	4603      	mov	r3, r0
 8005adc:	460c      	mov	r4, r1
 8005ade:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005ae0:	4b0a      	ldr	r3, [pc, #40]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	0c1b      	lsrs	r3, r3, #16
 8005ae6:	f003 0303 	and.w	r3, r3, #3
 8005aea:	3301      	adds	r3, #1
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af8:	60bb      	str	r3, [r7, #8]
      break;
 8005afa:	e002      	b.n	8005b02 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005afc:	4b04      	ldr	r3, [pc, #16]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005afe:	60bb      	str	r3, [r7, #8]
      break;
 8005b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b02:	68bb      	ldr	r3, [r7, #8]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b0c:	40023800 	.word	0x40023800
 8005b10:	00f42400 	.word	0x00f42400
 8005b14:	007a1200 	.word	0x007a1200

08005b18 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b1c:	4b03      	ldr	r3, [pc, #12]	; (8005b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	20000000 	.word	0x20000000

08005b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b34:	f7ff fff0 	bl	8005b18 <HAL_RCC_GetHCLKFreq>
 8005b38:	4601      	mov	r1, r0
 8005b3a:	4b05      	ldr	r3, [pc, #20]	; (8005b50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	0a9b      	lsrs	r3, r3, #10
 8005b40:	f003 0307 	and.w	r3, r3, #7
 8005b44:	4a03      	ldr	r2, [pc, #12]	; (8005b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b46:	5cd3      	ldrb	r3, [r2, r3]
 8005b48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	40023800 	.word	0x40023800
 8005b54:	08008880 	.word	0x08008880

08005b58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b5c:	f7ff ffdc 	bl	8005b18 <HAL_RCC_GetHCLKFreq>
 8005b60:	4601      	mov	r1, r0
 8005b62:	4b05      	ldr	r3, [pc, #20]	; (8005b78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	0b5b      	lsrs	r3, r3, #13
 8005b68:	f003 0307 	and.w	r3, r3, #7
 8005b6c:	4a03      	ldr	r2, [pc, #12]	; (8005b7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b6e:	5cd3      	ldrb	r3, [r2, r3]
 8005b70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	40023800 	.word	0x40023800
 8005b7c:	08008880 	.word	0x08008880

08005b80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b088      	sub	sp, #32
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8005b90:	2300      	movs	r3, #0
 8005b92:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005b94:	2300      	movs	r3, #0
 8005b96:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0301 	and.w	r3, r3, #1
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d012      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ba4:	4b65      	ldr	r3, [pc, #404]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	4a64      	ldr	r2, [pc, #400]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005baa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005bae:	6093      	str	r3, [r2, #8]
 8005bb0:	4b62      	ldr	r3, [pc, #392]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005bb2:	689a      	ldr	r2, [r3, #8]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb8:	4960      	ldr	r1, [pc, #384]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d101      	bne.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d017      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bd6:	4b59      	ldr	r3, [pc, #356]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be4:	4955      	ldr	r1, [pc, #340]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bf4:	d101      	bne.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8005c02:	2301      	movs	r3, #1
 8005c04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d017      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005c12:	4b4a      	ldr	r3, [pc, #296]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c20:	4946      	ldr	r1, [pc, #280]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c30:	d101      	bne.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8005c32:	2301      	movs	r3, #1
 8005c34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0320 	and.w	r3, r3, #32
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f000 808b 	beq.w	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c50:	4b3a      	ldr	r3, [pc, #232]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c54:	4a39      	ldr	r2, [pc, #228]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c5a:	6413      	str	r3, [r2, #64]	; 0x40
 8005c5c:	4b37      	ldr	r3, [pc, #220]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005c68:	4b35      	ldr	r3, [pc, #212]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a34      	ldr	r2, [pc, #208]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c74:	f7fc f896 	bl	8001da4 <HAL_GetTick>
 8005c78:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005c7a:	e008      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c7c:	f7fc f892 	bl	8001da4 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b64      	cmp	r3, #100	; 0x64
 8005c88:	d901      	bls.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e2ba      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005c8e:	4b2c      	ldr	r3, [pc, #176]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0f0      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c9a:	4b28      	ldr	r3, [pc, #160]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ca2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d035      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d02e      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cb8:	4b20      	ldr	r3, [pc, #128]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cc2:	4b1e      	ldr	r3, [pc, #120]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc6:	4a1d      	ldr	r2, [pc, #116]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ccc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005cce:	4b1b      	ldr	r3, [pc, #108]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd2:	4a1a      	ldr	r2, [pc, #104]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cd8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005cda:	4a18      	ldr	r2, [pc, #96]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005ce0:	4b16      	ldr	r3, [pc, #88]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d114      	bne.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cec:	f7fc f85a 	bl	8001da4 <HAL_GetTick>
 8005cf0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cf2:	e00a      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cf4:	f7fc f856 	bl	8001da4 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d901      	bls.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e27c      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d0a:	4b0c      	ldr	r3, [pc, #48]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0ee      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d22:	d111      	bne.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8005d24:	4b05      	ldr	r3, [pc, #20]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005d30:	4b04      	ldr	r3, [pc, #16]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005d32:	400b      	ands	r3, r1
 8005d34:	4901      	ldr	r1, [pc, #4]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	608b      	str	r3, [r1, #8]
 8005d3a:	e00b      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005d3c:	40023800 	.word	0x40023800
 8005d40:	40007000 	.word	0x40007000
 8005d44:	0ffffcff 	.word	0x0ffffcff
 8005d48:	4ba3      	ldr	r3, [pc, #652]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	4aa2      	ldr	r2, [pc, #648]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005d4e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005d52:	6093      	str	r3, [r2, #8]
 8005d54:	4ba0      	ldr	r3, [pc, #640]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005d56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d60:	499d      	ldr	r1, [pc, #628]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0310 	and.w	r3, r3, #16
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d010      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d72:	4b99      	ldr	r3, [pc, #612]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d78:	4a97      	ldr	r2, [pc, #604]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005d7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005d82:	4b95      	ldr	r3, [pc, #596]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005d84:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8c:	4992      	ldr	r1, [pc, #584]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00a      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005da0:	4b8d      	ldr	r3, [pc, #564]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dae:	498a      	ldr	r1, [pc, #552]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005db0:	4313      	orrs	r3, r2
 8005db2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00a      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005dc2:	4b85      	ldr	r3, [pc, #532]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dd0:	4981      	ldr	r1, [pc, #516]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00a      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005de4:	4b7c      	ldr	r3, [pc, #496]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005df2:	4979      	ldr	r1, [pc, #484]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00a      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e06:	4b74      	ldr	r3, [pc, #464]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e0c:	f023 0203 	bic.w	r2, r3, #3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e14:	4970      	ldr	r1, [pc, #448]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00a      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e28:	4b6b      	ldr	r3, [pc, #428]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e2e:	f023 020c 	bic.w	r2, r3, #12
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	4968      	ldr	r1, [pc, #416]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00a      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e4a:	4b63      	ldr	r3, [pc, #396]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e58:	495f      	ldr	r1, [pc, #380]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00a      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e6c:	4b5a      	ldr	r3, [pc, #360]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e7a:	4957      	ldr	r1, [pc, #348]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00a      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e8e:	4b52      	ldr	r3, [pc, #328]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e9c:	494e      	ldr	r1, [pc, #312]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00a      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005eb0:	4b49      	ldr	r3, [pc, #292]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ebe:	4946      	ldr	r1, [pc, #280]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00a      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005ed2:	4b41      	ldr	r3, [pc, #260]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee0:	493d      	ldr	r1, [pc, #244]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00a      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005ef4:	4b38      	ldr	r3, [pc, #224]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005efa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f02:	4935      	ldr	r1, [pc, #212]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f04:	4313      	orrs	r3, r2
 8005f06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d011      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005f16:	4b30      	ldr	r3, [pc, #192]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f1c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f24:	492c      	ldr	r1, [pc, #176]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f34:	d101      	bne.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8005f36:	2301      	movs	r3, #1
 8005f38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00a      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f46:	4b24      	ldr	r3, [pc, #144]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f4c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f54:	4920      	ldr	r1, [pc, #128]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00a      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005f68:	4b1b      	ldr	r3, [pc, #108]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f6e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f76:	4918      	ldr	r1, [pc, #96]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005f8a:	4b13      	ldr	r3, [pc, #76]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f90:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f98:	490f      	ldr	r1, [pc, #60]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d005      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fae:	f040 809c 	bne.w	80060ea <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005fb2:	4b09      	ldr	r3, [pc, #36]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a08      	ldr	r2, [pc, #32]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005fb8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005fbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fbe:	f7fb fef1 	bl	8001da4 <HAL_GetTick>
 8005fc2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005fc4:	e00a      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005fc6:	f7fb feed 	bl	8001da4 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	2b64      	cmp	r3, #100	; 0x64
 8005fd2:	d903      	bls.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e115      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005fd8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005fdc:	4b8b      	ldr	r3, [pc, #556]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1ee      	bne.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d017      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d113      	bne.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005ffc:	4b83      	ldr	r3, [pc, #524]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006002:	0e1b      	lsrs	r3, r3, #24
 8006004:	f003 030f 	and.w	r3, r3, #15
 8006008:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	019a      	lsls	r2, r3, #6
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	061b      	lsls	r3, r3, #24
 8006014:	431a      	orrs	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	071b      	lsls	r3, r3, #28
 800601c:	497b      	ldr	r1, [pc, #492]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800601e:	4313      	orrs	r3, r2
 8006020:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d004      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006034:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006038:	d00a      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006042:	2b00      	cmp	r3, #0
 8006044:	d024      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800604e:	d11f      	bne.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006050:	4b6e      	ldr	r3, [pc, #440]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006056:	0f1b      	lsrs	r3, r3, #28
 8006058:	f003 0307 	and.w	r3, r3, #7
 800605c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	019a      	lsls	r2, r3, #6
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	061b      	lsls	r3, r3, #24
 800606a:	431a      	orrs	r2, r3
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	071b      	lsls	r3, r3, #28
 8006070:	4966      	ldr	r1, [pc, #408]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006072:	4313      	orrs	r3, r2
 8006074:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006078:	4b64      	ldr	r3, [pc, #400]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800607a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800607e:	f023 021f 	bic.w	r2, r3, #31
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	3b01      	subs	r3, #1
 8006088:	4960      	ldr	r1, [pc, #384]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800608a:	4313      	orrs	r3, r2
 800608c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00d      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	019a      	lsls	r2, r3, #6
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	061b      	lsls	r3, r3, #24
 80060a8:	431a      	orrs	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	071b      	lsls	r3, r3, #28
 80060b0:	4956      	ldr	r1, [pc, #344]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80060b8:	4b54      	ldr	r3, [pc, #336]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a53      	ldr	r2, [pc, #332]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80060be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060c4:	f7fb fe6e 	bl	8001da4 <HAL_GetTick>
 80060c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060ca:	e008      	b.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80060cc:	f7fb fe6a 	bl	8001da4 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	2b64      	cmp	r3, #100	; 0x64
 80060d8:	d901      	bls.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e092      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060de:	4b4b      	ldr	r3, [pc, #300]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d0f0      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	f040 8088 	bne.w	8006202 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80060f2:	4b46      	ldr	r3, [pc, #280]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a45      	ldr	r2, [pc, #276]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80060f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060fe:	f7fb fe51 	bl	8001da4 <HAL_GetTick>
 8006102:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006104:	e008      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006106:	f7fb fe4d 	bl	8001da4 <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	2b64      	cmp	r3, #100	; 0x64
 8006112:	d901      	bls.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e075      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006118:	4b3c      	ldr	r3, [pc, #240]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006120:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006124:	d0ef      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d003      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006136:	2b00      	cmp	r3, #0
 8006138:	d009      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006142:	2b00      	cmp	r3, #0
 8006144:	d024      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614a:	2b00      	cmp	r3, #0
 800614c:	d120      	bne.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800614e:	4b2f      	ldr	r3, [pc, #188]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006154:	0c1b      	lsrs	r3, r3, #16
 8006156:	f003 0303 	and.w	r3, r3, #3
 800615a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	019a      	lsls	r2, r3, #6
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	041b      	lsls	r3, r3, #16
 8006166:	431a      	orrs	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	061b      	lsls	r3, r3, #24
 800616e:	4927      	ldr	r1, [pc, #156]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006170:	4313      	orrs	r3, r2
 8006172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006176:	4b25      	ldr	r3, [pc, #148]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800617c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a1b      	ldr	r3, [r3, #32]
 8006184:	3b01      	subs	r3, #1
 8006186:	021b      	lsls	r3, r3, #8
 8006188:	4920      	ldr	r1, [pc, #128]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800618a:	4313      	orrs	r3, r2
 800618c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d018      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061a4:	d113      	bne.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80061a6:	4b19      	ldr	r3, [pc, #100]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80061a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ac:	0e1b      	lsrs	r3, r3, #24
 80061ae:	f003 030f 	and.w	r3, r3, #15
 80061b2:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	019a      	lsls	r2, r3, #6
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	041b      	lsls	r3, r3, #16
 80061c0:	431a      	orrs	r2, r3
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	061b      	lsls	r3, r3, #24
 80061c6:	4911      	ldr	r1, [pc, #68]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80061ce:	4b0f      	ldr	r3, [pc, #60]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a0e      	ldr	r2, [pc, #56]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80061d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061da:	f7fb fde3 	bl	8001da4 <HAL_GetTick>
 80061de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80061e0:	e008      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80061e2:	f7fb fddf 	bl	8001da4 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	2b64      	cmp	r3, #100	; 0x64
 80061ee:	d901      	bls.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e007      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80061f4:	4b05      	ldr	r3, [pc, #20]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006200:	d1ef      	bne.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3720      	adds	r7, #32
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	40023800 	.word	0x40023800

08006210 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d101      	bne.n	8006222 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e01d      	b.n	800625e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d106      	bne.n	800623c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7fb fadc 	bl	80017f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2202      	movs	r2, #2
 8006240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	3304      	adds	r3, #4
 800624c:	4619      	mov	r1, r3
 800624e:	4610      	mov	r0, r2
 8006250:	f000 fc00 	bl	8006a54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b082      	sub	sp, #8
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e01d      	b.n	80062b4 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	d106      	bne.n	8006292 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f7fb fb45 	bl	800191c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2202      	movs	r2, #2
 8006296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	3304      	adds	r3, #4
 80062a2:	4619      	mov	r1, r3
 80062a4:	4610      	mov	r0, r2
 80062a6:	f000 fbd5 	bl	8006a54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3708      	adds	r7, #8
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e01d      	b.n	800630a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d106      	bne.n	80062e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7fb fafa 	bl	80018dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2202      	movs	r2, #2
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	3304      	adds	r3, #4
 80062f8:	4619      	mov	r1, r3
 80062fa:	4610      	mov	r0, r2
 80062fc:	f000 fbaa 	bl	8006a54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3708      	adds	r7, #8
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
	...

08006314 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2201      	movs	r2, #1
 8006324:	6839      	ldr	r1, [r7, #0]
 8006326:	4618      	mov	r0, r3
 8006328:	f001 f8c3 	bl	80074b2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a17      	ldr	r2, [pc, #92]	; (8006390 <HAL_TIM_PWM_Start+0x7c>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d004      	beq.n	8006340 <HAL_TIM_PWM_Start+0x2c>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a16      	ldr	r2, [pc, #88]	; (8006394 <HAL_TIM_PWM_Start+0x80>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d101      	bne.n	8006344 <HAL_TIM_PWM_Start+0x30>
 8006340:	2301      	movs	r3, #1
 8006342:	e000      	b.n	8006346 <HAL_TIM_PWM_Start+0x32>
 8006344:	2300      	movs	r3, #0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d007      	beq.n	800635a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006358:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	689a      	ldr	r2, [r3, #8]
 8006360:	4b0d      	ldr	r3, [pc, #52]	; (8006398 <HAL_TIM_PWM_Start+0x84>)
 8006362:	4013      	ands	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2b06      	cmp	r3, #6
 800636a:	d00b      	beq.n	8006384 <HAL_TIM_PWM_Start+0x70>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006372:	d007      	beq.n	8006384 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f042 0201 	orr.w	r2, r2, #1
 8006382:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	40010000 	.word	0x40010000
 8006394:	40010400 	.word	0x40010400
 8006398:	00010007 	.word	0x00010007

0800639c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e01d      	b.n	80063ea <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d106      	bne.n	80063c8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f815 	bl	80063f2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2202      	movs	r2, #2
 80063cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	3304      	adds	r3, #4
 80063d8:	4619      	mov	r1, r3
 80063da:	4610      	mov	r0, r2
 80063dc:	f000 fb3a 	bl	8006a54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3708      	adds	r7, #8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b083      	sub	sp, #12
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80063fa:	bf00      	nop
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
	...

08006408 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2b0c      	cmp	r3, #12
 8006416:	d841      	bhi.n	800649c <HAL_TIM_IC_Start_IT+0x94>
 8006418:	a201      	add	r2, pc, #4	; (adr r2, 8006420 <HAL_TIM_IC_Start_IT+0x18>)
 800641a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641e:	bf00      	nop
 8006420:	08006455 	.word	0x08006455
 8006424:	0800649d 	.word	0x0800649d
 8006428:	0800649d 	.word	0x0800649d
 800642c:	0800649d 	.word	0x0800649d
 8006430:	08006467 	.word	0x08006467
 8006434:	0800649d 	.word	0x0800649d
 8006438:	0800649d 	.word	0x0800649d
 800643c:	0800649d 	.word	0x0800649d
 8006440:	08006479 	.word	0x08006479
 8006444:	0800649d 	.word	0x0800649d
 8006448:	0800649d 	.word	0x0800649d
 800644c:	0800649d 	.word	0x0800649d
 8006450:	0800648b 	.word	0x0800648b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68da      	ldr	r2, [r3, #12]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f042 0202 	orr.w	r2, r2, #2
 8006462:	60da      	str	r2, [r3, #12]
      break;
 8006464:	e01b      	b.n	800649e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68da      	ldr	r2, [r3, #12]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f042 0204 	orr.w	r2, r2, #4
 8006474:	60da      	str	r2, [r3, #12]
      break;
 8006476:	e012      	b.n	800649e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68da      	ldr	r2, [r3, #12]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f042 0208 	orr.w	r2, r2, #8
 8006486:	60da      	str	r2, [r3, #12]
      break;
 8006488:	e009      	b.n	800649e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68da      	ldr	r2, [r3, #12]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f042 0210 	orr.w	r2, r2, #16
 8006498:	60da      	str	r2, [r3, #12]
      break;
 800649a:	e000      	b.n	800649e <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 800649c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2201      	movs	r2, #1
 80064a4:	6839      	ldr	r1, [r7, #0]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f001 f803 	bl	80074b2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	689a      	ldr	r2, [r3, #8]
 80064b2:	4b0b      	ldr	r3, [pc, #44]	; (80064e0 <HAL_TIM_IC_Start_IT+0xd8>)
 80064b4:	4013      	ands	r3, r2
 80064b6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2b06      	cmp	r3, #6
 80064bc:	d00b      	beq.n	80064d6 <HAL_TIM_IC_Start_IT+0xce>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064c4:	d007      	beq.n	80064d6 <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f042 0201 	orr.w	r2, r2, #1
 80064d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	00010007 	.word	0x00010007

080064e4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d101      	bne.n	80064fe <HAL_TIM_OC_ConfigChannel+0x1a>
 80064fa:	2302      	movs	r3, #2
 80064fc:	e06c      	b.n	80065d8 <HAL_TIM_OC_ConfigChannel+0xf4>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2202      	movs	r2, #2
 800650a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2b14      	cmp	r3, #20
 8006512:	d857      	bhi.n	80065c4 <HAL_TIM_OC_ConfigChannel+0xe0>
 8006514:	a201      	add	r2, pc, #4	; (adr r2, 800651c <HAL_TIM_OC_ConfigChannel+0x38>)
 8006516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651a:	bf00      	nop
 800651c:	08006571 	.word	0x08006571
 8006520:	080065c5 	.word	0x080065c5
 8006524:	080065c5 	.word	0x080065c5
 8006528:	080065c5 	.word	0x080065c5
 800652c:	0800657f 	.word	0x0800657f
 8006530:	080065c5 	.word	0x080065c5
 8006534:	080065c5 	.word	0x080065c5
 8006538:	080065c5 	.word	0x080065c5
 800653c:	0800658d 	.word	0x0800658d
 8006540:	080065c5 	.word	0x080065c5
 8006544:	080065c5 	.word	0x080065c5
 8006548:	080065c5 	.word	0x080065c5
 800654c:	0800659b 	.word	0x0800659b
 8006550:	080065c5 	.word	0x080065c5
 8006554:	080065c5 	.word	0x080065c5
 8006558:	080065c5 	.word	0x080065c5
 800655c:	080065a9 	.word	0x080065a9
 8006560:	080065c5 	.word	0x080065c5
 8006564:	080065c5 	.word	0x080065c5
 8006568:	080065c5 	.word	0x080065c5
 800656c:	080065b7 	.word	0x080065b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68b9      	ldr	r1, [r7, #8]
 8006576:	4618      	mov	r0, r3
 8006578:	f000 fb0c 	bl	8006b94 <TIM_OC1_SetConfig>
      break;
 800657c:	e023      	b.n	80065c6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68b9      	ldr	r1, [r7, #8]
 8006584:	4618      	mov	r0, r3
 8006586:	f000 fb77 	bl	8006c78 <TIM_OC2_SetConfig>
      break;
 800658a:	e01c      	b.n	80065c6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68b9      	ldr	r1, [r7, #8]
 8006592:	4618      	mov	r0, r3
 8006594:	f000 fbe8 	bl	8006d68 <TIM_OC3_SetConfig>
      break;
 8006598:	e015      	b.n	80065c6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68b9      	ldr	r1, [r7, #8]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f000 fc57 	bl	8006e54 <TIM_OC4_SetConfig>
      break;
 80065a6:	e00e      	b.n	80065c6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68b9      	ldr	r1, [r7, #8]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f000 fca8 	bl	8006f04 <TIM_OC5_SetConfig>
      break;
 80065b4:	e007      	b.n	80065c6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68b9      	ldr	r1, [r7, #8]
 80065bc:	4618      	mov	r0, r3
 80065be:	f000 fcf3 	bl	8006fa8 <TIM_OC6_SetConfig>
      break;
 80065c2:	e000      	b.n	80065c6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 80065c4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d101      	bne.n	80065fa <HAL_TIM_IC_ConfigChannel+0x1a>
 80065f6:	2302      	movs	r3, #2
 80065f8:	e08a      	b.n	8006710 <HAL_TIM_IC_ConfigChannel+0x130>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2202      	movs	r2, #2
 8006606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d11b      	bne.n	8006648 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6818      	ldr	r0, [r3, #0]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	6819      	ldr	r1, [r3, #0]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	f000 fd9e 	bl	8007160 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	699a      	ldr	r2, [r3, #24]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f022 020c 	bic.w	r2, r2, #12
 8006632:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6999      	ldr	r1, [r3, #24]
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	689a      	ldr	r2, [r3, #8]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	430a      	orrs	r2, r1
 8006644:	619a      	str	r2, [r3, #24]
 8006646:	e05a      	b.n	80066fe <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b04      	cmp	r3, #4
 800664c:	d11c      	bne.n	8006688 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6818      	ldr	r0, [r3, #0]
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	6819      	ldr	r1, [r3, #0]
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	f000 fe22 	bl	80072a6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	699a      	ldr	r2, [r3, #24]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006670:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6999      	ldr	r1, [r3, #24]
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	021a      	lsls	r2, r3, #8
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	430a      	orrs	r2, r1
 8006684:	619a      	str	r2, [r3, #24]
 8006686:	e03a      	b.n	80066fe <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b08      	cmp	r3, #8
 800668c:	d11b      	bne.n	80066c6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6818      	ldr	r0, [r3, #0]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	6819      	ldr	r1, [r3, #0]
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	685a      	ldr	r2, [r3, #4]
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	f000 fe6f 	bl	8007380 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	69da      	ldr	r2, [r3, #28]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 020c 	bic.w	r2, r2, #12
 80066b0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	69d9      	ldr	r1, [r3, #28]
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	689a      	ldr	r2, [r3, #8]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	430a      	orrs	r2, r1
 80066c2:	61da      	str	r2, [r3, #28]
 80066c4:	e01b      	b.n	80066fe <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6818      	ldr	r0, [r3, #0]
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	6819      	ldr	r1, [r3, #0]
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	685a      	ldr	r2, [r3, #4]
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	f000 fe8f 	bl	80073f8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	69da      	ldr	r2, [r3, #28]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80066e8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	69d9      	ldr	r1, [r3, #28]
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	021a      	lsls	r2, r3, #8
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800672a:	2b01      	cmp	r3, #1
 800672c:	d101      	bne.n	8006732 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800672e:	2302      	movs	r3, #2
 8006730:	e105      	b.n	800693e <HAL_TIM_PWM_ConfigChannel+0x226>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2202      	movs	r2, #2
 800673e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2b14      	cmp	r3, #20
 8006746:	f200 80f0 	bhi.w	800692a <HAL_TIM_PWM_ConfigChannel+0x212>
 800674a:	a201      	add	r2, pc, #4	; (adr r2, 8006750 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800674c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006750:	080067a5 	.word	0x080067a5
 8006754:	0800692b 	.word	0x0800692b
 8006758:	0800692b 	.word	0x0800692b
 800675c:	0800692b 	.word	0x0800692b
 8006760:	080067e5 	.word	0x080067e5
 8006764:	0800692b 	.word	0x0800692b
 8006768:	0800692b 	.word	0x0800692b
 800676c:	0800692b 	.word	0x0800692b
 8006770:	08006827 	.word	0x08006827
 8006774:	0800692b 	.word	0x0800692b
 8006778:	0800692b 	.word	0x0800692b
 800677c:	0800692b 	.word	0x0800692b
 8006780:	08006867 	.word	0x08006867
 8006784:	0800692b 	.word	0x0800692b
 8006788:	0800692b 	.word	0x0800692b
 800678c:	0800692b 	.word	0x0800692b
 8006790:	080068a9 	.word	0x080068a9
 8006794:	0800692b 	.word	0x0800692b
 8006798:	0800692b 	.word	0x0800692b
 800679c:	0800692b 	.word	0x0800692b
 80067a0:	080068e9 	.word	0x080068e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68b9      	ldr	r1, [r7, #8]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f000 f9f2 	bl	8006b94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	699a      	ldr	r2, [r3, #24]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f042 0208 	orr.w	r2, r2, #8
 80067be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	699a      	ldr	r2, [r3, #24]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f022 0204 	bic.w	r2, r2, #4
 80067ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6999      	ldr	r1, [r3, #24]
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	691a      	ldr	r2, [r3, #16]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	430a      	orrs	r2, r1
 80067e0:	619a      	str	r2, [r3, #24]
      break;
 80067e2:	e0a3      	b.n	800692c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68b9      	ldr	r1, [r7, #8]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 fa44 	bl	8006c78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	699a      	ldr	r2, [r3, #24]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	699a      	ldr	r2, [r3, #24]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800680e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	6999      	ldr	r1, [r3, #24]
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	021a      	lsls	r2, r3, #8
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	430a      	orrs	r2, r1
 8006822:	619a      	str	r2, [r3, #24]
      break;
 8006824:	e082      	b.n	800692c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68b9      	ldr	r1, [r7, #8]
 800682c:	4618      	mov	r0, r3
 800682e:	f000 fa9b 	bl	8006d68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	69da      	ldr	r2, [r3, #28]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f042 0208 	orr.w	r2, r2, #8
 8006840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	69da      	ldr	r2, [r3, #28]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f022 0204 	bic.w	r2, r2, #4
 8006850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	69d9      	ldr	r1, [r3, #28]
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	691a      	ldr	r2, [r3, #16]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	430a      	orrs	r2, r1
 8006862:	61da      	str	r2, [r3, #28]
      break;
 8006864:	e062      	b.n	800692c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68b9      	ldr	r1, [r7, #8]
 800686c:	4618      	mov	r0, r3
 800686e:	f000 faf1 	bl	8006e54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	69da      	ldr	r2, [r3, #28]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006880:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	69da      	ldr	r2, [r3, #28]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006890:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	69d9      	ldr	r1, [r3, #28]
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	021a      	lsls	r2, r3, #8
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	61da      	str	r2, [r3, #28]
      break;
 80068a6:	e041      	b.n	800692c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68b9      	ldr	r1, [r7, #8]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f000 fb28 	bl	8006f04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f042 0208 	orr.w	r2, r2, #8
 80068c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 0204 	bic.w	r2, r2, #4
 80068d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	691a      	ldr	r2, [r3, #16]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068e6:	e021      	b.n	800692c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68b9      	ldr	r1, [r7, #8]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f000 fb5a 	bl	8006fa8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006902:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006912:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	021a      	lsls	r2, r3, #8
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	430a      	orrs	r2, r1
 8006926:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006928:	e000      	b.n	800692c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800692a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop

08006948 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006958:	2b01      	cmp	r3, #1
 800695a:	d101      	bne.n	8006960 <HAL_TIM_SlaveConfigSynchro+0x18>
 800695c:	2302      	movs	r3, #2
 800695e:	e031      	b.n	80069c4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2202      	movs	r2, #2
 800696c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006970:	6839      	ldr	r1, [r7, #0]
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 fb6c 	bl	8007050 <TIM_SlaveTimer_SetConfig>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d009      	beq.n	8006992 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e018      	b.n	80069c4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68da      	ldr	r2, [r3, #12]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069a0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68da      	ldr	r2, [r3, #12]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80069b0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3708      	adds	r7, #8
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80069d6:	2300      	movs	r3, #0
 80069d8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b0c      	cmp	r3, #12
 80069de:	d831      	bhi.n	8006a44 <HAL_TIM_ReadCapturedValue+0x78>
 80069e0:	a201      	add	r2, pc, #4	; (adr r2, 80069e8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80069e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e6:	bf00      	nop
 80069e8:	08006a1d 	.word	0x08006a1d
 80069ec:	08006a45 	.word	0x08006a45
 80069f0:	08006a45 	.word	0x08006a45
 80069f4:	08006a45 	.word	0x08006a45
 80069f8:	08006a27 	.word	0x08006a27
 80069fc:	08006a45 	.word	0x08006a45
 8006a00:	08006a45 	.word	0x08006a45
 8006a04:	08006a45 	.word	0x08006a45
 8006a08:	08006a31 	.word	0x08006a31
 8006a0c:	08006a45 	.word	0x08006a45
 8006a10:	08006a45 	.word	0x08006a45
 8006a14:	08006a45 	.word	0x08006a45
 8006a18:	08006a3b 	.word	0x08006a3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a22:	60fb      	str	r3, [r7, #12]

      break;
 8006a24:	e00f      	b.n	8006a46 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2c:	60fb      	str	r3, [r7, #12]

      break;
 8006a2e:	e00a      	b.n	8006a46 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a36:	60fb      	str	r3, [r7, #12]

      break;
 8006a38:	e005      	b.n	8006a46 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a40:	60fb      	str	r3, [r7, #12]

      break;
 8006a42:	e000      	b.n	8006a46 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006a44:	bf00      	nop
  }

  return tmpreg;
 8006a46:	68fb      	ldr	r3, [r7, #12]
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3714      	adds	r7, #20
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a40      	ldr	r2, [pc, #256]	; (8006b68 <TIM_Base_SetConfig+0x114>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d013      	beq.n	8006a94 <TIM_Base_SetConfig+0x40>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a72:	d00f      	beq.n	8006a94 <TIM_Base_SetConfig+0x40>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a3d      	ldr	r2, [pc, #244]	; (8006b6c <TIM_Base_SetConfig+0x118>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d00b      	beq.n	8006a94 <TIM_Base_SetConfig+0x40>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a3c      	ldr	r2, [pc, #240]	; (8006b70 <TIM_Base_SetConfig+0x11c>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d007      	beq.n	8006a94 <TIM_Base_SetConfig+0x40>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a3b      	ldr	r2, [pc, #236]	; (8006b74 <TIM_Base_SetConfig+0x120>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d003      	beq.n	8006a94 <TIM_Base_SetConfig+0x40>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a3a      	ldr	r2, [pc, #232]	; (8006b78 <TIM_Base_SetConfig+0x124>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d108      	bne.n	8006aa6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a2f      	ldr	r2, [pc, #188]	; (8006b68 <TIM_Base_SetConfig+0x114>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d02b      	beq.n	8006b06 <TIM_Base_SetConfig+0xb2>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ab4:	d027      	beq.n	8006b06 <TIM_Base_SetConfig+0xb2>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a2c      	ldr	r2, [pc, #176]	; (8006b6c <TIM_Base_SetConfig+0x118>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d023      	beq.n	8006b06 <TIM_Base_SetConfig+0xb2>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a2b      	ldr	r2, [pc, #172]	; (8006b70 <TIM_Base_SetConfig+0x11c>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d01f      	beq.n	8006b06 <TIM_Base_SetConfig+0xb2>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a2a      	ldr	r2, [pc, #168]	; (8006b74 <TIM_Base_SetConfig+0x120>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d01b      	beq.n	8006b06 <TIM_Base_SetConfig+0xb2>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a29      	ldr	r2, [pc, #164]	; (8006b78 <TIM_Base_SetConfig+0x124>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d017      	beq.n	8006b06 <TIM_Base_SetConfig+0xb2>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a28      	ldr	r2, [pc, #160]	; (8006b7c <TIM_Base_SetConfig+0x128>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d013      	beq.n	8006b06 <TIM_Base_SetConfig+0xb2>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a27      	ldr	r2, [pc, #156]	; (8006b80 <TIM_Base_SetConfig+0x12c>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d00f      	beq.n	8006b06 <TIM_Base_SetConfig+0xb2>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a26      	ldr	r2, [pc, #152]	; (8006b84 <TIM_Base_SetConfig+0x130>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d00b      	beq.n	8006b06 <TIM_Base_SetConfig+0xb2>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a25      	ldr	r2, [pc, #148]	; (8006b88 <TIM_Base_SetConfig+0x134>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d007      	beq.n	8006b06 <TIM_Base_SetConfig+0xb2>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a24      	ldr	r2, [pc, #144]	; (8006b8c <TIM_Base_SetConfig+0x138>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d003      	beq.n	8006b06 <TIM_Base_SetConfig+0xb2>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a23      	ldr	r2, [pc, #140]	; (8006b90 <TIM_Base_SetConfig+0x13c>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d108      	bne.n	8006b18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	689a      	ldr	r2, [r3, #8]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a0a      	ldr	r2, [pc, #40]	; (8006b68 <TIM_Base_SetConfig+0x114>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d003      	beq.n	8006b4c <TIM_Base_SetConfig+0xf8>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a0c      	ldr	r2, [pc, #48]	; (8006b78 <TIM_Base_SetConfig+0x124>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d103      	bne.n	8006b54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	691a      	ldr	r2, [r3, #16]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	615a      	str	r2, [r3, #20]
}
 8006b5a:	bf00      	nop
 8006b5c:	3714      	adds	r7, #20
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	40010000 	.word	0x40010000
 8006b6c:	40000400 	.word	0x40000400
 8006b70:	40000800 	.word	0x40000800
 8006b74:	40000c00 	.word	0x40000c00
 8006b78:	40010400 	.word	0x40010400
 8006b7c:	40014000 	.word	0x40014000
 8006b80:	40014400 	.word	0x40014400
 8006b84:	40014800 	.word	0x40014800
 8006b88:	40001800 	.word	0x40001800
 8006b8c:	40001c00 	.word	0x40001c00
 8006b90:	40002000 	.word	0x40002000

08006b94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b087      	sub	sp, #28
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	f023 0201 	bic.w	r2, r3, #1
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	4b2b      	ldr	r3, [pc, #172]	; (8006c6c <TIM_OC1_SetConfig+0xd8>)
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 0303 	bic.w	r3, r3, #3
 8006bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f023 0302 	bic.w	r3, r3, #2
 8006bdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a21      	ldr	r2, [pc, #132]	; (8006c70 <TIM_OC1_SetConfig+0xdc>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d003      	beq.n	8006bf8 <TIM_OC1_SetConfig+0x64>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a20      	ldr	r2, [pc, #128]	; (8006c74 <TIM_OC1_SetConfig+0xe0>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d10c      	bne.n	8006c12 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	f023 0308 	bic.w	r3, r3, #8
 8006bfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	697a      	ldr	r2, [r7, #20]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	f023 0304 	bic.w	r3, r3, #4
 8006c10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a16      	ldr	r2, [pc, #88]	; (8006c70 <TIM_OC1_SetConfig+0xdc>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d003      	beq.n	8006c22 <TIM_OC1_SetConfig+0x8e>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a15      	ldr	r2, [pc, #84]	; (8006c74 <TIM_OC1_SetConfig+0xe0>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d111      	bne.n	8006c46 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	685a      	ldr	r2, [r3, #4]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	621a      	str	r2, [r3, #32]
}
 8006c60:	bf00      	nop
 8006c62:	371c      	adds	r7, #28
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	fffeff8f 	.word	0xfffeff8f
 8006c70:	40010000 	.word	0x40010000
 8006c74:	40010400 	.word	0x40010400

08006c78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b087      	sub	sp, #28
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	f023 0210 	bic.w	r2, r3, #16
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	4b2e      	ldr	r3, [pc, #184]	; (8006d5c <TIM_OC2_SetConfig+0xe4>)
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	021b      	lsls	r3, r3, #8
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	f023 0320 	bic.w	r3, r3, #32
 8006cc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	011b      	lsls	r3, r3, #4
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a23      	ldr	r2, [pc, #140]	; (8006d60 <TIM_OC2_SetConfig+0xe8>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d003      	beq.n	8006ce0 <TIM_OC2_SetConfig+0x68>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a22      	ldr	r2, [pc, #136]	; (8006d64 <TIM_OC2_SetConfig+0xec>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d10d      	bne.n	8006cfc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ce6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	011b      	lsls	r3, r3, #4
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cfa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a18      	ldr	r2, [pc, #96]	; (8006d60 <TIM_OC2_SetConfig+0xe8>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d003      	beq.n	8006d0c <TIM_OC2_SetConfig+0x94>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a17      	ldr	r2, [pc, #92]	; (8006d64 <TIM_OC2_SetConfig+0xec>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d113      	bne.n	8006d34 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	685a      	ldr	r2, [r3, #4]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	621a      	str	r2, [r3, #32]
}
 8006d4e:	bf00      	nop
 8006d50:	371c      	adds	r7, #28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	feff8fff 	.word	0xfeff8fff
 8006d60:	40010000 	.word	0x40010000
 8006d64:	40010400 	.word	0x40010400

08006d68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b087      	sub	sp, #28
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	4b2d      	ldr	r3, [pc, #180]	; (8006e48 <TIM_OC3_SetConfig+0xe0>)
 8006d94:	4013      	ands	r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f023 0303 	bic.w	r3, r3, #3
 8006d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006db0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	021b      	lsls	r3, r3, #8
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a22      	ldr	r2, [pc, #136]	; (8006e4c <TIM_OC3_SetConfig+0xe4>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d003      	beq.n	8006dce <TIM_OC3_SetConfig+0x66>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a21      	ldr	r2, [pc, #132]	; (8006e50 <TIM_OC3_SetConfig+0xe8>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d10d      	bne.n	8006dea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	021b      	lsls	r3, r3, #8
 8006ddc:	697a      	ldr	r2, [r7, #20]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006de8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a17      	ldr	r2, [pc, #92]	; (8006e4c <TIM_OC3_SetConfig+0xe4>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d003      	beq.n	8006dfa <TIM_OC3_SetConfig+0x92>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a16      	ldr	r2, [pc, #88]	; (8006e50 <TIM_OC3_SetConfig+0xe8>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d113      	bne.n	8006e22 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	011b      	lsls	r3, r3, #4
 8006e10:	693a      	ldr	r2, [r7, #16]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	011b      	lsls	r3, r3, #4
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	621a      	str	r2, [r3, #32]
}
 8006e3c:	bf00      	nop
 8006e3e:	371c      	adds	r7, #28
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr
 8006e48:	fffeff8f 	.word	0xfffeff8f
 8006e4c:	40010000 	.word	0x40010000
 8006e50:	40010400 	.word	0x40010400

08006e54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b087      	sub	sp, #28
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a1b      	ldr	r3, [r3, #32]
 8006e62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	4b1e      	ldr	r3, [pc, #120]	; (8006ef8 <TIM_OC4_SetConfig+0xa4>)
 8006e80:	4013      	ands	r3, r2
 8006e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	021b      	lsls	r3, r3, #8
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	031b      	lsls	r3, r3, #12
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a13      	ldr	r2, [pc, #76]	; (8006efc <TIM_OC4_SetConfig+0xa8>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d003      	beq.n	8006ebc <TIM_OC4_SetConfig+0x68>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a12      	ldr	r2, [pc, #72]	; (8006f00 <TIM_OC4_SetConfig+0xac>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d109      	bne.n	8006ed0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ec2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	695b      	ldr	r3, [r3, #20]
 8006ec8:	019b      	lsls	r3, r3, #6
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	621a      	str	r2, [r3, #32]
}
 8006eea:	bf00      	nop
 8006eec:	371c      	adds	r7, #28
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	feff8fff 	.word	0xfeff8fff
 8006efc:	40010000 	.word	0x40010000
 8006f00:	40010400 	.word	0x40010400

08006f04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b087      	sub	sp, #28
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a1b      	ldr	r3, [r3, #32]
 8006f1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	4b1b      	ldr	r3, [pc, #108]	; (8006f9c <TIM_OC5_SetConfig+0x98>)
 8006f30:	4013      	ands	r3, r2
 8006f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006f44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	041b      	lsls	r3, r3, #16
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a12      	ldr	r2, [pc, #72]	; (8006fa0 <TIM_OC5_SetConfig+0x9c>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d003      	beq.n	8006f62 <TIM_OC5_SetConfig+0x5e>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a11      	ldr	r2, [pc, #68]	; (8006fa4 <TIM_OC5_SetConfig+0xa0>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d109      	bne.n	8006f76 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	695b      	ldr	r3, [r3, #20]
 8006f6e:	021b      	lsls	r3, r3, #8
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	685a      	ldr	r2, [r3, #4]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	621a      	str	r2, [r3, #32]
}
 8006f90:	bf00      	nop
 8006f92:	371c      	adds	r7, #28
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr
 8006f9c:	fffeff8f 	.word	0xfffeff8f
 8006fa0:	40010000 	.word	0x40010000
 8006fa4:	40010400 	.word	0x40010400

08006fa8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b087      	sub	sp, #28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a1b      	ldr	r3, [r3, #32]
 8006fc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	4b1c      	ldr	r3, [pc, #112]	; (8007044 <TIM_OC6_SetConfig+0x9c>)
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	021b      	lsls	r3, r3, #8
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006fea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	051b      	lsls	r3, r3, #20
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a13      	ldr	r2, [pc, #76]	; (8007048 <TIM_OC6_SetConfig+0xa0>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d003      	beq.n	8007008 <TIM_OC6_SetConfig+0x60>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a12      	ldr	r2, [pc, #72]	; (800704c <TIM_OC6_SetConfig+0xa4>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d109      	bne.n	800701c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800700e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	695b      	ldr	r3, [r3, #20]
 8007014:	029b      	lsls	r3, r3, #10
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	4313      	orrs	r3, r2
 800701a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	621a      	str	r2, [r3, #32]
}
 8007036:	bf00      	nop
 8007038:	371c      	adds	r7, #28
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	feff8fff 	.word	0xfeff8fff
 8007048:	40010000 	.word	0x40010000
 800704c:	40010400 	.word	0x40010400

08007050 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007068:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	4313      	orrs	r3, r2
 8007072:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007074:	697a      	ldr	r2, [r7, #20]
 8007076:	4b39      	ldr	r3, [pc, #228]	; (800715c <TIM_SlaveTimer_SetConfig+0x10c>)
 8007078:	4013      	ands	r3, r2
 800707a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	697a      	ldr	r2, [r7, #20]
 8007082:	4313      	orrs	r3, r2
 8007084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	697a      	ldr	r2, [r7, #20]
 800708c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	2b30      	cmp	r3, #48	; 0x30
 8007094:	d05c      	beq.n	8007150 <TIM_SlaveTimer_SetConfig+0x100>
 8007096:	2b30      	cmp	r3, #48	; 0x30
 8007098:	d806      	bhi.n	80070a8 <TIM_SlaveTimer_SetConfig+0x58>
 800709a:	2b10      	cmp	r3, #16
 800709c:	d058      	beq.n	8007150 <TIM_SlaveTimer_SetConfig+0x100>
 800709e:	2b20      	cmp	r3, #32
 80070a0:	d056      	beq.n	8007150 <TIM_SlaveTimer_SetConfig+0x100>
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d054      	beq.n	8007150 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80070a6:	e054      	b.n	8007152 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80070a8:	2b50      	cmp	r3, #80	; 0x50
 80070aa:	d03d      	beq.n	8007128 <TIM_SlaveTimer_SetConfig+0xd8>
 80070ac:	2b50      	cmp	r3, #80	; 0x50
 80070ae:	d802      	bhi.n	80070b6 <TIM_SlaveTimer_SetConfig+0x66>
 80070b0:	2b40      	cmp	r3, #64	; 0x40
 80070b2:	d010      	beq.n	80070d6 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 80070b4:	e04d      	b.n	8007152 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80070b6:	2b60      	cmp	r3, #96	; 0x60
 80070b8:	d040      	beq.n	800713c <TIM_SlaveTimer_SetConfig+0xec>
 80070ba:	2b70      	cmp	r3, #112	; 0x70
 80070bc:	d000      	beq.n	80070c0 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 80070be:	e048      	b.n	8007152 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6818      	ldr	r0, [r3, #0]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	68d9      	ldr	r1, [r3, #12]
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	689a      	ldr	r2, [r3, #8]
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	f000 f9cf 	bl	8007472 <TIM_ETR_SetConfig>
      break;
 80070d4:	e03d      	b.n	8007152 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2b05      	cmp	r3, #5
 80070dc:	d101      	bne.n	80070e2 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e038      	b.n	8007154 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	6a1b      	ldr	r3, [r3, #32]
 80070e8:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	6a1a      	ldr	r2, [r3, #32]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f022 0201 	bic.w	r2, r2, #1
 80070f8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	699b      	ldr	r3, [r3, #24]
 8007100:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007108:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	011b      	lsls	r3, r3, #4
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	4313      	orrs	r3, r2
 8007114:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	621a      	str	r2, [r3, #32]
      break;
 8007126:	e014      	b.n	8007152 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6818      	ldr	r0, [r3, #0]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	6899      	ldr	r1, [r3, #8]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	461a      	mov	r2, r3
 8007136:	f000 f887 	bl	8007248 <TIM_TI1_ConfigInputStage>
      break;
 800713a:	e00a      	b.n	8007152 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6818      	ldr	r0, [r3, #0]
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	6899      	ldr	r1, [r3, #8]
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	461a      	mov	r2, r3
 800714a:	f000 f8e9 	bl	8007320 <TIM_TI2_ConfigInputStage>
      break;
 800714e:	e000      	b.n	8007152 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8007150:	bf00      	nop
  }
  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3718      	adds	r7, #24
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}
 800715c:	fffefff8 	.word	0xfffefff8

08007160 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007160:	b480      	push	{r7}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
 800716c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6a1b      	ldr	r3, [r3, #32]
 8007172:	f023 0201 	bic.w	r2, r3, #1
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6a1b      	ldr	r3, [r3, #32]
 8007184:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	4a28      	ldr	r2, [pc, #160]	; (800722c <TIM_TI1_SetConfig+0xcc>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d01b      	beq.n	80071c6 <TIM_TI1_SetConfig+0x66>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007194:	d017      	beq.n	80071c6 <TIM_TI1_SetConfig+0x66>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	4a25      	ldr	r2, [pc, #148]	; (8007230 <TIM_TI1_SetConfig+0xd0>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d013      	beq.n	80071c6 <TIM_TI1_SetConfig+0x66>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	4a24      	ldr	r2, [pc, #144]	; (8007234 <TIM_TI1_SetConfig+0xd4>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d00f      	beq.n	80071c6 <TIM_TI1_SetConfig+0x66>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	4a23      	ldr	r2, [pc, #140]	; (8007238 <TIM_TI1_SetConfig+0xd8>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d00b      	beq.n	80071c6 <TIM_TI1_SetConfig+0x66>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	4a22      	ldr	r2, [pc, #136]	; (800723c <TIM_TI1_SetConfig+0xdc>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d007      	beq.n	80071c6 <TIM_TI1_SetConfig+0x66>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	4a21      	ldr	r2, [pc, #132]	; (8007240 <TIM_TI1_SetConfig+0xe0>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d003      	beq.n	80071c6 <TIM_TI1_SetConfig+0x66>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	4a20      	ldr	r2, [pc, #128]	; (8007244 <TIM_TI1_SetConfig+0xe4>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d101      	bne.n	80071ca <TIM_TI1_SetConfig+0x6a>
 80071c6:	2301      	movs	r3, #1
 80071c8:	e000      	b.n	80071cc <TIM_TI1_SetConfig+0x6c>
 80071ca:	2300      	movs	r3, #0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d008      	beq.n	80071e2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	f023 0303 	bic.w	r3, r3, #3
 80071d6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80071d8:	697a      	ldr	r2, [r7, #20]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4313      	orrs	r3, r2
 80071de:	617b      	str	r3, [r7, #20]
 80071e0:	e003      	b.n	80071ea <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	f043 0301 	orr.w	r3, r3, #1
 80071e8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	011b      	lsls	r3, r3, #4
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f023 030a 	bic.w	r3, r3, #10
 8007204:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	f003 030a 	and.w	r3, r3, #10
 800720c:	693a      	ldr	r2, [r7, #16]
 800720e:	4313      	orrs	r3, r2
 8007210:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	693a      	ldr	r2, [r7, #16]
 800721c:	621a      	str	r2, [r3, #32]
}
 800721e:	bf00      	nop
 8007220:	371c      	adds	r7, #28
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	40010000 	.word	0x40010000
 8007230:	40000400 	.word	0x40000400
 8007234:	40000800 	.word	0x40000800
 8007238:	40000c00 	.word	0x40000c00
 800723c:	40010400 	.word	0x40010400
 8007240:	40014000 	.word	0x40014000
 8007244:	40001800 	.word	0x40001800

08007248 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007248:	b480      	push	{r7}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6a1b      	ldr	r3, [r3, #32]
 8007258:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	f023 0201 	bic.w	r2, r3, #1
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	011b      	lsls	r3, r3, #4
 8007278:	693a      	ldr	r2, [r7, #16]
 800727a:	4313      	orrs	r3, r2
 800727c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f023 030a 	bic.w	r3, r3, #10
 8007284:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007286:	697a      	ldr	r2, [r7, #20]
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	4313      	orrs	r3, r2
 800728c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	621a      	str	r2, [r3, #32]
}
 800729a:	bf00      	nop
 800729c:	371c      	adds	r7, #28
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b087      	sub	sp, #28
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	60f8      	str	r0, [r7, #12]
 80072ae:	60b9      	str	r1, [r7, #8]
 80072b0:	607a      	str	r2, [r7, #4]
 80072b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6a1b      	ldr	r3, [r3, #32]
 80072b8:	f023 0210 	bic.w	r2, r3, #16
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6a1b      	ldr	r3, [r3, #32]
 80072ca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	021b      	lsls	r3, r3, #8
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	4313      	orrs	r3, r2
 80072dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	031b      	lsls	r3, r3, #12
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	697a      	ldr	r2, [r7, #20]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	011b      	lsls	r3, r3, #4
 80072fe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	4313      	orrs	r3, r2
 8007306:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	621a      	str	r2, [r3, #32]
}
 8007314:	bf00      	nop
 8007316:	371c      	adds	r7, #28
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007320:	b480      	push	{r7}
 8007322:	b087      	sub	sp, #28
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6a1b      	ldr	r3, [r3, #32]
 8007330:	f023 0210 	bic.w	r2, r3, #16
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800734a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	031b      	lsls	r3, r3, #12
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	4313      	orrs	r3, r2
 8007354:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800735c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	011b      	lsls	r3, r3, #4
 8007362:	693a      	ldr	r2, [r7, #16]
 8007364:	4313      	orrs	r3, r2
 8007366:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	621a      	str	r2, [r3, #32]
}
 8007374:	bf00      	nop
 8007376:	371c      	adds	r7, #28
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007380:	b480      	push	{r7}
 8007382:	b087      	sub	sp, #28
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
 800738c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6a1b      	ldr	r3, [r3, #32]
 80073a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f023 0303 	bic.w	r3, r3, #3
 80073ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80073ae:	697a      	ldr	r2, [r7, #20]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	011b      	lsls	r3, r3, #4
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	697a      	ldr	r2, [r7, #20]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80073d0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	021b      	lsls	r3, r3, #8
 80073d6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	4313      	orrs	r3, r2
 80073de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	621a      	str	r2, [r3, #32]
}
 80073ec:	bf00      	nop
 80073ee:	371c      	adds	r7, #28
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b087      	sub	sp, #28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
 8007404:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	69db      	ldr	r3, [r3, #28]
 8007416:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6a1b      	ldr	r3, [r3, #32]
 800741c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007424:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	021b      	lsls	r3, r3, #8
 800742a:	697a      	ldr	r2, [r7, #20]
 800742c:	4313      	orrs	r3, r2
 800742e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007436:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	031b      	lsls	r3, r3, #12
 800743c:	b29b      	uxth	r3, r3
 800743e:	697a      	ldr	r2, [r7, #20]
 8007440:	4313      	orrs	r3, r2
 8007442:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800744a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	031b      	lsls	r3, r3, #12
 8007450:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	4313      	orrs	r3, r2
 8007458:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	697a      	ldr	r2, [r7, #20]
 800745e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	621a      	str	r2, [r3, #32]
}
 8007466:	bf00      	nop
 8007468:	371c      	adds	r7, #28
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007472:	b480      	push	{r7}
 8007474:	b087      	sub	sp, #28
 8007476:	af00      	add	r7, sp, #0
 8007478:	60f8      	str	r0, [r7, #12]
 800747a:	60b9      	str	r1, [r7, #8]
 800747c:	607a      	str	r2, [r7, #4]
 800747e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800748c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	021a      	lsls	r2, r3, #8
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	431a      	orrs	r2, r3
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	4313      	orrs	r3, r2
 800749a:	697a      	ldr	r2, [r7, #20]
 800749c:	4313      	orrs	r3, r2
 800749e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	609a      	str	r2, [r3, #8]
}
 80074a6:	bf00      	nop
 80074a8:	371c      	adds	r7, #28
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b087      	sub	sp, #28
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	60f8      	str	r0, [r7, #12]
 80074ba:	60b9      	str	r1, [r7, #8]
 80074bc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	f003 031f 	and.w	r3, r3, #31
 80074c4:	2201      	movs	r2, #1
 80074c6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ca:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6a1a      	ldr	r2, [r3, #32]
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	43db      	mvns	r3, r3
 80074d4:	401a      	ands	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6a1a      	ldr	r2, [r3, #32]
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	f003 031f 	and.w	r3, r3, #31
 80074e4:	6879      	ldr	r1, [r7, #4]
 80074e6:	fa01 f303 	lsl.w	r3, r1, r3
 80074ea:	431a      	orrs	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	621a      	str	r2, [r3, #32]
}
 80074f0:	bf00      	nop
 80074f2:	371c      	adds	r7, #28
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800750c:	2b01      	cmp	r3, #1
 800750e:	d101      	bne.n	8007514 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007510:	2302      	movs	r3, #2
 8007512:	e06d      	b.n	80075f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2202      	movs	r2, #2
 8007520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a30      	ldr	r2, [pc, #192]	; (80075fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d004      	beq.n	8007548 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a2f      	ldr	r2, [pc, #188]	; (8007600 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d108      	bne.n	800755a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800754e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	4313      	orrs	r3, r2
 8007558:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007560:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	4313      	orrs	r3, r2
 800756a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a20      	ldr	r2, [pc, #128]	; (80075fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d022      	beq.n	80075c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007586:	d01d      	beq.n	80075c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a1d      	ldr	r2, [pc, #116]	; (8007604 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d018      	beq.n	80075c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a1c      	ldr	r2, [pc, #112]	; (8007608 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d013      	beq.n	80075c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a1a      	ldr	r2, [pc, #104]	; (800760c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d00e      	beq.n	80075c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a15      	ldr	r2, [pc, #84]	; (8007600 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d009      	beq.n	80075c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a16      	ldr	r2, [pc, #88]	; (8007610 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d004      	beq.n	80075c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a15      	ldr	r2, [pc, #84]	; (8007614 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d10c      	bne.n	80075de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3714      	adds	r7, #20
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr
 80075fc:	40010000 	.word	0x40010000
 8007600:	40010400 	.word	0x40010400
 8007604:	40000400 	.word	0x40000400
 8007608:	40000800 	.word	0x40000800
 800760c:	40000c00 	.word	0x40000c00
 8007610:	40014000 	.word	0x40014000
 8007614:	40001800 	.word	0x40001800

08007618 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d101      	bne.n	800762a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e040      	b.n	80076ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800762e:	2b00      	cmp	r3, #0
 8007630:	d106      	bne.n	8007640 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7fa fa5c 	bl	8001af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2224      	movs	r2, #36	; 0x24
 8007644:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f022 0201 	bic.w	r2, r2, #1
 8007654:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 f8be 	bl	80077d8 <UART_SetConfig>
 800765c:	4603      	mov	r3, r0
 800765e:	2b01      	cmp	r3, #1
 8007660:	d101      	bne.n	8007666 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e022      	b.n	80076ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766a:	2b00      	cmp	r3, #0
 800766c:	d002      	beq.n	8007674 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fb5c 	bl	8007d2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	685a      	ldr	r2, [r3, #4]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007682:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	689a      	ldr	r2, [r3, #8]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007692:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f042 0201 	orr.w	r2, r2, #1
 80076a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 fbe3 	bl	8007e70 <UART_CheckIdleState>
 80076aa:	4603      	mov	r3, r0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3708      	adds	r7, #8
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b08a      	sub	sp, #40	; 0x28
 80076b8:	af02      	add	r7, sp, #8
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	603b      	str	r3, [r7, #0]
 80076c0:	4613      	mov	r3, r2
 80076c2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076c8:	2b20      	cmp	r3, #32
 80076ca:	d17f      	bne.n	80077cc <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d002      	beq.n	80076d8 <HAL_UART_Transmit+0x24>
 80076d2:	88fb      	ldrh	r3, [r7, #6]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e078      	b.n	80077ce <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d101      	bne.n	80076ea <HAL_UART_Transmit+0x36>
 80076e6:	2302      	movs	r3, #2
 80076e8:	e071      	b.n	80077ce <HAL_UART_Transmit+0x11a>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2221      	movs	r2, #33	; 0x21
 80076fc:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80076fe:	f7fa fb51 	bl	8001da4 <HAL_GetTick>
 8007702:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	88fa      	ldrh	r2, [r7, #6]
 8007708:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	88fa      	ldrh	r2, [r7, #6]
 8007710:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800771c:	d108      	bne.n	8007730 <HAL_UART_Transmit+0x7c>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d104      	bne.n	8007730 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8007726:	2300      	movs	r3, #0
 8007728:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	61bb      	str	r3, [r7, #24]
 800772e:	e003      	b.n	8007738 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007734:	2300      	movs	r3, #0
 8007736:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8007740:	e02c      	b.n	800779c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	2200      	movs	r2, #0
 800774a:	2180      	movs	r1, #128	; 0x80
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f000 fbbe 	bl	8007ece <UART_WaitOnFlagUntilTimeout>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d001      	beq.n	800775c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8007758:	2303      	movs	r3, #3
 800775a:	e038      	b.n	80077ce <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d10b      	bne.n	800777a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	881b      	ldrh	r3, [r3, #0]
 8007766:	461a      	mov	r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007770:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	3302      	adds	r3, #2
 8007776:	61bb      	str	r3, [r7, #24]
 8007778:	e007      	b.n	800778a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	781a      	ldrb	r2, [r3, #0]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	3301      	adds	r3, #1
 8007788:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007790:	b29b      	uxth	r3, r3
 8007792:	3b01      	subs	r3, #1
 8007794:	b29a      	uxth	r2, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d1cc      	bne.n	8007742 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	9300      	str	r3, [sp, #0]
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	2200      	movs	r2, #0
 80077b0:	2140      	movs	r1, #64	; 0x40
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f000 fb8b 	bl	8007ece <UART_WaitOnFlagUntilTimeout>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d001      	beq.n	80077c2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80077be:	2303      	movs	r3, #3
 80077c0:	e005      	b.n	80077ce <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2220      	movs	r2, #32
 80077c6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80077c8:	2300      	movs	r3, #0
 80077ca:	e000      	b.n	80077ce <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80077cc:	2302      	movs	r3, #2
  }
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3720      	adds	r7, #32
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
	...

080077d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b088      	sub	sp, #32
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80077e0:	2300      	movs	r3, #0
 80077e2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80077e4:	2300      	movs	r3, #0
 80077e6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	689a      	ldr	r2, [r3, #8]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	431a      	orrs	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	431a      	orrs	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	69db      	ldr	r3, [r3, #28]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	4bb1      	ldr	r3, [pc, #708]	; (8007acc <UART_SetConfig+0x2f4>)
 8007808:	4013      	ands	r3, r2
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	6812      	ldr	r2, [r2, #0]
 800780e:	6939      	ldr	r1, [r7, #16]
 8007810:	430b      	orrs	r3, r1
 8007812:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68da      	ldr	r2, [r3, #12]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	430a      	orrs	r2, r1
 8007828:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	699b      	ldr	r3, [r3, #24]
 800782e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a1b      	ldr	r3, [r3, #32]
 8007834:	693a      	ldr	r2, [r7, #16]
 8007836:	4313      	orrs	r3, r2
 8007838:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	430a      	orrs	r2, r1
 800784c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a9f      	ldr	r2, [pc, #636]	; (8007ad0 <UART_SetConfig+0x2f8>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d121      	bne.n	800789c <UART_SetConfig+0xc4>
 8007858:	4b9e      	ldr	r3, [pc, #632]	; (8007ad4 <UART_SetConfig+0x2fc>)
 800785a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800785e:	f003 0303 	and.w	r3, r3, #3
 8007862:	2b03      	cmp	r3, #3
 8007864:	d816      	bhi.n	8007894 <UART_SetConfig+0xbc>
 8007866:	a201      	add	r2, pc, #4	; (adr r2, 800786c <UART_SetConfig+0x94>)
 8007868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786c:	0800787d 	.word	0x0800787d
 8007870:	08007889 	.word	0x08007889
 8007874:	08007883 	.word	0x08007883
 8007878:	0800788f 	.word	0x0800788f
 800787c:	2301      	movs	r3, #1
 800787e:	77fb      	strb	r3, [r7, #31]
 8007880:	e151      	b.n	8007b26 <UART_SetConfig+0x34e>
 8007882:	2302      	movs	r3, #2
 8007884:	77fb      	strb	r3, [r7, #31]
 8007886:	e14e      	b.n	8007b26 <UART_SetConfig+0x34e>
 8007888:	2304      	movs	r3, #4
 800788a:	77fb      	strb	r3, [r7, #31]
 800788c:	e14b      	b.n	8007b26 <UART_SetConfig+0x34e>
 800788e:	2308      	movs	r3, #8
 8007890:	77fb      	strb	r3, [r7, #31]
 8007892:	e148      	b.n	8007b26 <UART_SetConfig+0x34e>
 8007894:	2310      	movs	r3, #16
 8007896:	77fb      	strb	r3, [r7, #31]
 8007898:	bf00      	nop
 800789a:	e144      	b.n	8007b26 <UART_SetConfig+0x34e>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a8d      	ldr	r2, [pc, #564]	; (8007ad8 <UART_SetConfig+0x300>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d134      	bne.n	8007910 <UART_SetConfig+0x138>
 80078a6:	4b8b      	ldr	r3, [pc, #556]	; (8007ad4 <UART_SetConfig+0x2fc>)
 80078a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078ac:	f003 030c 	and.w	r3, r3, #12
 80078b0:	2b0c      	cmp	r3, #12
 80078b2:	d829      	bhi.n	8007908 <UART_SetConfig+0x130>
 80078b4:	a201      	add	r2, pc, #4	; (adr r2, 80078bc <UART_SetConfig+0xe4>)
 80078b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ba:	bf00      	nop
 80078bc:	080078f1 	.word	0x080078f1
 80078c0:	08007909 	.word	0x08007909
 80078c4:	08007909 	.word	0x08007909
 80078c8:	08007909 	.word	0x08007909
 80078cc:	080078fd 	.word	0x080078fd
 80078d0:	08007909 	.word	0x08007909
 80078d4:	08007909 	.word	0x08007909
 80078d8:	08007909 	.word	0x08007909
 80078dc:	080078f7 	.word	0x080078f7
 80078e0:	08007909 	.word	0x08007909
 80078e4:	08007909 	.word	0x08007909
 80078e8:	08007909 	.word	0x08007909
 80078ec:	08007903 	.word	0x08007903
 80078f0:	2300      	movs	r3, #0
 80078f2:	77fb      	strb	r3, [r7, #31]
 80078f4:	e117      	b.n	8007b26 <UART_SetConfig+0x34e>
 80078f6:	2302      	movs	r3, #2
 80078f8:	77fb      	strb	r3, [r7, #31]
 80078fa:	e114      	b.n	8007b26 <UART_SetConfig+0x34e>
 80078fc:	2304      	movs	r3, #4
 80078fe:	77fb      	strb	r3, [r7, #31]
 8007900:	e111      	b.n	8007b26 <UART_SetConfig+0x34e>
 8007902:	2308      	movs	r3, #8
 8007904:	77fb      	strb	r3, [r7, #31]
 8007906:	e10e      	b.n	8007b26 <UART_SetConfig+0x34e>
 8007908:	2310      	movs	r3, #16
 800790a:	77fb      	strb	r3, [r7, #31]
 800790c:	bf00      	nop
 800790e:	e10a      	b.n	8007b26 <UART_SetConfig+0x34e>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a71      	ldr	r2, [pc, #452]	; (8007adc <UART_SetConfig+0x304>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d120      	bne.n	800795c <UART_SetConfig+0x184>
 800791a:	4b6e      	ldr	r3, [pc, #440]	; (8007ad4 <UART_SetConfig+0x2fc>)
 800791c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007920:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007924:	2b10      	cmp	r3, #16
 8007926:	d00f      	beq.n	8007948 <UART_SetConfig+0x170>
 8007928:	2b10      	cmp	r3, #16
 800792a:	d802      	bhi.n	8007932 <UART_SetConfig+0x15a>
 800792c:	2b00      	cmp	r3, #0
 800792e:	d005      	beq.n	800793c <UART_SetConfig+0x164>
 8007930:	e010      	b.n	8007954 <UART_SetConfig+0x17c>
 8007932:	2b20      	cmp	r3, #32
 8007934:	d005      	beq.n	8007942 <UART_SetConfig+0x16a>
 8007936:	2b30      	cmp	r3, #48	; 0x30
 8007938:	d009      	beq.n	800794e <UART_SetConfig+0x176>
 800793a:	e00b      	b.n	8007954 <UART_SetConfig+0x17c>
 800793c:	2300      	movs	r3, #0
 800793e:	77fb      	strb	r3, [r7, #31]
 8007940:	e0f1      	b.n	8007b26 <UART_SetConfig+0x34e>
 8007942:	2302      	movs	r3, #2
 8007944:	77fb      	strb	r3, [r7, #31]
 8007946:	e0ee      	b.n	8007b26 <UART_SetConfig+0x34e>
 8007948:	2304      	movs	r3, #4
 800794a:	77fb      	strb	r3, [r7, #31]
 800794c:	e0eb      	b.n	8007b26 <UART_SetConfig+0x34e>
 800794e:	2308      	movs	r3, #8
 8007950:	77fb      	strb	r3, [r7, #31]
 8007952:	e0e8      	b.n	8007b26 <UART_SetConfig+0x34e>
 8007954:	2310      	movs	r3, #16
 8007956:	77fb      	strb	r3, [r7, #31]
 8007958:	bf00      	nop
 800795a:	e0e4      	b.n	8007b26 <UART_SetConfig+0x34e>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a5f      	ldr	r2, [pc, #380]	; (8007ae0 <UART_SetConfig+0x308>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d120      	bne.n	80079a8 <UART_SetConfig+0x1d0>
 8007966:	4b5b      	ldr	r3, [pc, #364]	; (8007ad4 <UART_SetConfig+0x2fc>)
 8007968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800796c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007970:	2b40      	cmp	r3, #64	; 0x40
 8007972:	d00f      	beq.n	8007994 <UART_SetConfig+0x1bc>
 8007974:	2b40      	cmp	r3, #64	; 0x40
 8007976:	d802      	bhi.n	800797e <UART_SetConfig+0x1a6>
 8007978:	2b00      	cmp	r3, #0
 800797a:	d005      	beq.n	8007988 <UART_SetConfig+0x1b0>
 800797c:	e010      	b.n	80079a0 <UART_SetConfig+0x1c8>
 800797e:	2b80      	cmp	r3, #128	; 0x80
 8007980:	d005      	beq.n	800798e <UART_SetConfig+0x1b6>
 8007982:	2bc0      	cmp	r3, #192	; 0xc0
 8007984:	d009      	beq.n	800799a <UART_SetConfig+0x1c2>
 8007986:	e00b      	b.n	80079a0 <UART_SetConfig+0x1c8>
 8007988:	2300      	movs	r3, #0
 800798a:	77fb      	strb	r3, [r7, #31]
 800798c:	e0cb      	b.n	8007b26 <UART_SetConfig+0x34e>
 800798e:	2302      	movs	r3, #2
 8007990:	77fb      	strb	r3, [r7, #31]
 8007992:	e0c8      	b.n	8007b26 <UART_SetConfig+0x34e>
 8007994:	2304      	movs	r3, #4
 8007996:	77fb      	strb	r3, [r7, #31]
 8007998:	e0c5      	b.n	8007b26 <UART_SetConfig+0x34e>
 800799a:	2308      	movs	r3, #8
 800799c:	77fb      	strb	r3, [r7, #31]
 800799e:	e0c2      	b.n	8007b26 <UART_SetConfig+0x34e>
 80079a0:	2310      	movs	r3, #16
 80079a2:	77fb      	strb	r3, [r7, #31]
 80079a4:	bf00      	nop
 80079a6:	e0be      	b.n	8007b26 <UART_SetConfig+0x34e>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a4d      	ldr	r2, [pc, #308]	; (8007ae4 <UART_SetConfig+0x30c>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d124      	bne.n	80079fc <UART_SetConfig+0x224>
 80079b2:	4b48      	ldr	r3, [pc, #288]	; (8007ad4 <UART_SetConfig+0x2fc>)
 80079b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079c0:	d012      	beq.n	80079e8 <UART_SetConfig+0x210>
 80079c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079c6:	d802      	bhi.n	80079ce <UART_SetConfig+0x1f6>
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d007      	beq.n	80079dc <UART_SetConfig+0x204>
 80079cc:	e012      	b.n	80079f4 <UART_SetConfig+0x21c>
 80079ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079d2:	d006      	beq.n	80079e2 <UART_SetConfig+0x20a>
 80079d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079d8:	d009      	beq.n	80079ee <UART_SetConfig+0x216>
 80079da:	e00b      	b.n	80079f4 <UART_SetConfig+0x21c>
 80079dc:	2300      	movs	r3, #0
 80079de:	77fb      	strb	r3, [r7, #31]
 80079e0:	e0a1      	b.n	8007b26 <UART_SetConfig+0x34e>
 80079e2:	2302      	movs	r3, #2
 80079e4:	77fb      	strb	r3, [r7, #31]
 80079e6:	e09e      	b.n	8007b26 <UART_SetConfig+0x34e>
 80079e8:	2304      	movs	r3, #4
 80079ea:	77fb      	strb	r3, [r7, #31]
 80079ec:	e09b      	b.n	8007b26 <UART_SetConfig+0x34e>
 80079ee:	2308      	movs	r3, #8
 80079f0:	77fb      	strb	r3, [r7, #31]
 80079f2:	e098      	b.n	8007b26 <UART_SetConfig+0x34e>
 80079f4:	2310      	movs	r3, #16
 80079f6:	77fb      	strb	r3, [r7, #31]
 80079f8:	bf00      	nop
 80079fa:	e094      	b.n	8007b26 <UART_SetConfig+0x34e>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a39      	ldr	r2, [pc, #228]	; (8007ae8 <UART_SetConfig+0x310>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d124      	bne.n	8007a50 <UART_SetConfig+0x278>
 8007a06:	4b33      	ldr	r3, [pc, #204]	; (8007ad4 <UART_SetConfig+0x2fc>)
 8007a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a14:	d012      	beq.n	8007a3c <UART_SetConfig+0x264>
 8007a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a1a:	d802      	bhi.n	8007a22 <UART_SetConfig+0x24a>
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d007      	beq.n	8007a30 <UART_SetConfig+0x258>
 8007a20:	e012      	b.n	8007a48 <UART_SetConfig+0x270>
 8007a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a26:	d006      	beq.n	8007a36 <UART_SetConfig+0x25e>
 8007a28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a2c:	d009      	beq.n	8007a42 <UART_SetConfig+0x26a>
 8007a2e:	e00b      	b.n	8007a48 <UART_SetConfig+0x270>
 8007a30:	2301      	movs	r3, #1
 8007a32:	77fb      	strb	r3, [r7, #31]
 8007a34:	e077      	b.n	8007b26 <UART_SetConfig+0x34e>
 8007a36:	2302      	movs	r3, #2
 8007a38:	77fb      	strb	r3, [r7, #31]
 8007a3a:	e074      	b.n	8007b26 <UART_SetConfig+0x34e>
 8007a3c:	2304      	movs	r3, #4
 8007a3e:	77fb      	strb	r3, [r7, #31]
 8007a40:	e071      	b.n	8007b26 <UART_SetConfig+0x34e>
 8007a42:	2308      	movs	r3, #8
 8007a44:	77fb      	strb	r3, [r7, #31]
 8007a46:	e06e      	b.n	8007b26 <UART_SetConfig+0x34e>
 8007a48:	2310      	movs	r3, #16
 8007a4a:	77fb      	strb	r3, [r7, #31]
 8007a4c:	bf00      	nop
 8007a4e:	e06a      	b.n	8007b26 <UART_SetConfig+0x34e>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a25      	ldr	r2, [pc, #148]	; (8007aec <UART_SetConfig+0x314>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d124      	bne.n	8007aa4 <UART_SetConfig+0x2cc>
 8007a5a:	4b1e      	ldr	r3, [pc, #120]	; (8007ad4 <UART_SetConfig+0x2fc>)
 8007a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a60:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a68:	d012      	beq.n	8007a90 <UART_SetConfig+0x2b8>
 8007a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a6e:	d802      	bhi.n	8007a76 <UART_SetConfig+0x29e>
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d007      	beq.n	8007a84 <UART_SetConfig+0x2ac>
 8007a74:	e012      	b.n	8007a9c <UART_SetConfig+0x2c4>
 8007a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a7a:	d006      	beq.n	8007a8a <UART_SetConfig+0x2b2>
 8007a7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a80:	d009      	beq.n	8007a96 <UART_SetConfig+0x2be>
 8007a82:	e00b      	b.n	8007a9c <UART_SetConfig+0x2c4>
 8007a84:	2300      	movs	r3, #0
 8007a86:	77fb      	strb	r3, [r7, #31]
 8007a88:	e04d      	b.n	8007b26 <UART_SetConfig+0x34e>
 8007a8a:	2302      	movs	r3, #2
 8007a8c:	77fb      	strb	r3, [r7, #31]
 8007a8e:	e04a      	b.n	8007b26 <UART_SetConfig+0x34e>
 8007a90:	2304      	movs	r3, #4
 8007a92:	77fb      	strb	r3, [r7, #31]
 8007a94:	e047      	b.n	8007b26 <UART_SetConfig+0x34e>
 8007a96:	2308      	movs	r3, #8
 8007a98:	77fb      	strb	r3, [r7, #31]
 8007a9a:	e044      	b.n	8007b26 <UART_SetConfig+0x34e>
 8007a9c:	2310      	movs	r3, #16
 8007a9e:	77fb      	strb	r3, [r7, #31]
 8007aa0:	bf00      	nop
 8007aa2:	e040      	b.n	8007b26 <UART_SetConfig+0x34e>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a11      	ldr	r2, [pc, #68]	; (8007af0 <UART_SetConfig+0x318>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d139      	bne.n	8007b22 <UART_SetConfig+0x34a>
 8007aae:	4b09      	ldr	r3, [pc, #36]	; (8007ad4 <UART_SetConfig+0x2fc>)
 8007ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ab4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007ab8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007abc:	d027      	beq.n	8007b0e <UART_SetConfig+0x336>
 8007abe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ac2:	d817      	bhi.n	8007af4 <UART_SetConfig+0x31c>
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d01c      	beq.n	8007b02 <UART_SetConfig+0x32a>
 8007ac8:	e027      	b.n	8007b1a <UART_SetConfig+0x342>
 8007aca:	bf00      	nop
 8007acc:	efff69f3 	.word	0xefff69f3
 8007ad0:	40011000 	.word	0x40011000
 8007ad4:	40023800 	.word	0x40023800
 8007ad8:	40004400 	.word	0x40004400
 8007adc:	40004800 	.word	0x40004800
 8007ae0:	40004c00 	.word	0x40004c00
 8007ae4:	40005000 	.word	0x40005000
 8007ae8:	40011400 	.word	0x40011400
 8007aec:	40007800 	.word	0x40007800
 8007af0:	40007c00 	.word	0x40007c00
 8007af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007af8:	d006      	beq.n	8007b08 <UART_SetConfig+0x330>
 8007afa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007afe:	d009      	beq.n	8007b14 <UART_SetConfig+0x33c>
 8007b00:	e00b      	b.n	8007b1a <UART_SetConfig+0x342>
 8007b02:	2300      	movs	r3, #0
 8007b04:	77fb      	strb	r3, [r7, #31]
 8007b06:	e00e      	b.n	8007b26 <UART_SetConfig+0x34e>
 8007b08:	2302      	movs	r3, #2
 8007b0a:	77fb      	strb	r3, [r7, #31]
 8007b0c:	e00b      	b.n	8007b26 <UART_SetConfig+0x34e>
 8007b0e:	2304      	movs	r3, #4
 8007b10:	77fb      	strb	r3, [r7, #31]
 8007b12:	e008      	b.n	8007b26 <UART_SetConfig+0x34e>
 8007b14:	2308      	movs	r3, #8
 8007b16:	77fb      	strb	r3, [r7, #31]
 8007b18:	e005      	b.n	8007b26 <UART_SetConfig+0x34e>
 8007b1a:	2310      	movs	r3, #16
 8007b1c:	77fb      	strb	r3, [r7, #31]
 8007b1e:	bf00      	nop
 8007b20:	e001      	b.n	8007b26 <UART_SetConfig+0x34e>
 8007b22:	2310      	movs	r3, #16
 8007b24:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	69db      	ldr	r3, [r3, #28]
 8007b2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b2e:	d17f      	bne.n	8007c30 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8007b30:	7ffb      	ldrb	r3, [r7, #31]
 8007b32:	2b08      	cmp	r3, #8
 8007b34:	d85c      	bhi.n	8007bf0 <UART_SetConfig+0x418>
 8007b36:	a201      	add	r2, pc, #4	; (adr r2, 8007b3c <UART_SetConfig+0x364>)
 8007b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b3c:	08007b61 	.word	0x08007b61
 8007b40:	08007b81 	.word	0x08007b81
 8007b44:	08007ba1 	.word	0x08007ba1
 8007b48:	08007bf1 	.word	0x08007bf1
 8007b4c:	08007bb9 	.word	0x08007bb9
 8007b50:	08007bf1 	.word	0x08007bf1
 8007b54:	08007bf1 	.word	0x08007bf1
 8007b58:	08007bf1 	.word	0x08007bf1
 8007b5c:	08007bd9 	.word	0x08007bd9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b60:	f7fd ffe6 	bl	8005b30 <HAL_RCC_GetPCLK1Freq>
 8007b64:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	005a      	lsls	r2, r3, #1
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	085b      	lsrs	r3, r3, #1
 8007b70:	441a      	add	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	61bb      	str	r3, [r7, #24]
        break;
 8007b7e:	e03a      	b.n	8007bf6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b80:	f7fd ffea 	bl	8005b58 <HAL_RCC_GetPCLK2Freq>
 8007b84:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	005a      	lsls	r2, r3, #1
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	085b      	lsrs	r3, r3, #1
 8007b90:	441a      	add	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	61bb      	str	r3, [r7, #24]
        break;
 8007b9e:	e02a      	b.n	8007bf6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	085a      	lsrs	r2, r3, #1
 8007ba6:	4b5f      	ldr	r3, [pc, #380]	; (8007d24 <UART_SetConfig+0x54c>)
 8007ba8:	4413      	add	r3, r2
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	6852      	ldr	r2, [r2, #4]
 8007bae:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	61bb      	str	r3, [r7, #24]
        break;
 8007bb6:	e01e      	b.n	8007bf6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bb8:	f7fd fed6 	bl	8005968 <HAL_RCC_GetSysClockFreq>
 8007bbc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	005a      	lsls	r2, r3, #1
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	085b      	lsrs	r3, r3, #1
 8007bc8:	441a      	add	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	61bb      	str	r3, [r7, #24]
        break;
 8007bd6:	e00e      	b.n	8007bf6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	085b      	lsrs	r3, r3, #1
 8007bde:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	61bb      	str	r3, [r7, #24]
        break;
 8007bee:	e002      	b.n	8007bf6 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	75fb      	strb	r3, [r7, #23]
        break;
 8007bf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	2b0f      	cmp	r3, #15
 8007bfa:	d916      	bls.n	8007c2a <UART_SetConfig+0x452>
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c02:	d212      	bcs.n	8007c2a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	f023 030f 	bic.w	r3, r3, #15
 8007c0c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	085b      	lsrs	r3, r3, #1
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	f003 0307 	and.w	r3, r3, #7
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	897b      	ldrh	r3, [r7, #10]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	897a      	ldrh	r2, [r7, #10]
 8007c26:	60da      	str	r2, [r3, #12]
 8007c28:	e070      	b.n	8007d0c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	75fb      	strb	r3, [r7, #23]
 8007c2e:	e06d      	b.n	8007d0c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8007c30:	7ffb      	ldrb	r3, [r7, #31]
 8007c32:	2b08      	cmp	r3, #8
 8007c34:	d859      	bhi.n	8007cea <UART_SetConfig+0x512>
 8007c36:	a201      	add	r2, pc, #4	; (adr r2, 8007c3c <UART_SetConfig+0x464>)
 8007c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3c:	08007c61 	.word	0x08007c61
 8007c40:	08007c7f 	.word	0x08007c7f
 8007c44:	08007c9d 	.word	0x08007c9d
 8007c48:	08007ceb 	.word	0x08007ceb
 8007c4c:	08007cb5 	.word	0x08007cb5
 8007c50:	08007ceb 	.word	0x08007ceb
 8007c54:	08007ceb 	.word	0x08007ceb
 8007c58:	08007ceb 	.word	0x08007ceb
 8007c5c:	08007cd3 	.word	0x08007cd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c60:	f7fd ff66 	bl	8005b30 <HAL_RCC_GetPCLK1Freq>
 8007c64:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	085a      	lsrs	r2, r3, #1
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	441a      	add	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	61bb      	str	r3, [r7, #24]
        break;
 8007c7c:	e038      	b.n	8007cf0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c7e:	f7fd ff6b 	bl	8005b58 <HAL_RCC_GetPCLK2Freq>
 8007c82:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	085a      	lsrs	r2, r3, #1
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	441a      	add	r2, r3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	61bb      	str	r3, [r7, #24]
        break;
 8007c9a:	e029      	b.n	8007cf0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	085a      	lsrs	r2, r3, #1
 8007ca2:	4b21      	ldr	r3, [pc, #132]	; (8007d28 <UART_SetConfig+0x550>)
 8007ca4:	4413      	add	r3, r2
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	6852      	ldr	r2, [r2, #4]
 8007caa:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	61bb      	str	r3, [r7, #24]
        break;
 8007cb2:	e01d      	b.n	8007cf0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cb4:	f7fd fe58 	bl	8005968 <HAL_RCC_GetSysClockFreq>
 8007cb8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	085a      	lsrs	r2, r3, #1
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	441a      	add	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	61bb      	str	r3, [r7, #24]
        break;
 8007cd0:	e00e      	b.n	8007cf0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	085b      	lsrs	r3, r3, #1
 8007cd8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	61bb      	str	r3, [r7, #24]
        break;
 8007ce8:	e002      	b.n	8007cf0 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	75fb      	strb	r3, [r7, #23]
        break;
 8007cee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	2b0f      	cmp	r3, #15
 8007cf4:	d908      	bls.n	8007d08 <UART_SetConfig+0x530>
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cfc:	d204      	bcs.n	8007d08 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	69ba      	ldr	r2, [r7, #24]
 8007d04:	60da      	str	r2, [r3, #12]
 8007d06:	e001      	b.n	8007d0c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3720      	adds	r7, #32
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	01e84800 	.word	0x01e84800
 8007d28:	00f42400 	.word	0x00f42400

08007d2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d38:	f003 0301 	and.w	r3, r3, #1
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00a      	beq.n	8007d56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	430a      	orrs	r2, r1
 8007d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5a:	f003 0302 	and.w	r3, r3, #2
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00a      	beq.n	8007d78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	430a      	orrs	r2, r1
 8007d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7c:	f003 0304 	and.w	r3, r3, #4
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00a      	beq.n	8007d9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	430a      	orrs	r2, r1
 8007d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9e:	f003 0308 	and.w	r3, r3, #8
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00a      	beq.n	8007dbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	430a      	orrs	r2, r1
 8007dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc0:	f003 0310 	and.w	r3, r3, #16
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00a      	beq.n	8007dde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	430a      	orrs	r2, r1
 8007ddc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de2:	f003 0320 	and.w	r3, r3, #32
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00a      	beq.n	8007e00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	430a      	orrs	r2, r1
 8007dfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d01a      	beq.n	8007e42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e2a:	d10a      	bne.n	8007e42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	430a      	orrs	r2, r1
 8007e40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00a      	beq.n	8007e64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	430a      	orrs	r2, r1
 8007e62:	605a      	str	r2, [r3, #4]
  }
}
 8007e64:	bf00      	nop
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af02      	add	r7, sp, #8
 8007e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007e7e:	f7f9 ff91 	bl	8001da4 <HAL_GetTick>
 8007e82:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 0308 	and.w	r3, r3, #8
 8007e8e:	2b08      	cmp	r3, #8
 8007e90:	d10e      	bne.n	8007eb0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 f814 	bl	8007ece <UART_WaitOnFlagUntilTimeout>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d001      	beq.n	8007eb0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007eac:	2303      	movs	r3, #3
 8007eae:	e00a      	b.n	8007ec6 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2220      	movs	r2, #32
 8007eb4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2220      	movs	r2, #32
 8007eba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b084      	sub	sp, #16
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	60f8      	str	r0, [r7, #12]
 8007ed6:	60b9      	str	r1, [r7, #8]
 8007ed8:	603b      	str	r3, [r7, #0]
 8007eda:	4613      	mov	r3, r2
 8007edc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ede:	e05d      	b.n	8007f9c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee6:	d059      	beq.n	8007f9c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ee8:	f7f9 ff5c 	bl	8001da4 <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	69ba      	ldr	r2, [r7, #24]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d302      	bcc.n	8007efe <UART_WaitOnFlagUntilTimeout+0x30>
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d11b      	bne.n	8007f36 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f0c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	689a      	ldr	r2, [r3, #8]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f022 0201 	bic.w	r2, r2, #1
 8007f1c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2220      	movs	r2, #32
 8007f22:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2220      	movs	r2, #32
 8007f28:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e042      	b.n	8007fbc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0304 	and.w	r3, r3, #4
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d02b      	beq.n	8007f9c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	69db      	ldr	r3, [r3, #28]
 8007f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f52:	d123      	bne.n	8007f9c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f5c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f6c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	689a      	ldr	r2, [r3, #8]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f022 0201 	bic.w	r2, r2, #1
 8007f7c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2220      	movs	r2, #32
 8007f82:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2220      	movs	r2, #32
 8007f88:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2220      	movs	r2, #32
 8007f8e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e00f      	b.n	8007fbc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	69da      	ldr	r2, [r3, #28]
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	bf0c      	ite	eq
 8007fac:	2301      	moveq	r3, #1
 8007fae:	2300      	movne	r3, #0
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	79fb      	ldrb	r3, [r7, #7]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d092      	beq.n	8007ee0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <__errno>:
 8007fc4:	4b01      	ldr	r3, [pc, #4]	; (8007fcc <__errno+0x8>)
 8007fc6:	6818      	ldr	r0, [r3, #0]
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	2000000c 	.word	0x2000000c

08007fd0 <__libc_init_array>:
 8007fd0:	b570      	push	{r4, r5, r6, lr}
 8007fd2:	4e0d      	ldr	r6, [pc, #52]	; (8008008 <__libc_init_array+0x38>)
 8007fd4:	4c0d      	ldr	r4, [pc, #52]	; (800800c <__libc_init_array+0x3c>)
 8007fd6:	1ba4      	subs	r4, r4, r6
 8007fd8:	10a4      	asrs	r4, r4, #2
 8007fda:	2500      	movs	r5, #0
 8007fdc:	42a5      	cmp	r5, r4
 8007fde:	d109      	bne.n	8007ff4 <__libc_init_array+0x24>
 8007fe0:	4e0b      	ldr	r6, [pc, #44]	; (8008010 <__libc_init_array+0x40>)
 8007fe2:	4c0c      	ldr	r4, [pc, #48]	; (8008014 <__libc_init_array+0x44>)
 8007fe4:	f000 fc2e 	bl	8008844 <_init>
 8007fe8:	1ba4      	subs	r4, r4, r6
 8007fea:	10a4      	asrs	r4, r4, #2
 8007fec:	2500      	movs	r5, #0
 8007fee:	42a5      	cmp	r5, r4
 8007ff0:	d105      	bne.n	8007ffe <__libc_init_array+0x2e>
 8007ff2:	bd70      	pop	{r4, r5, r6, pc}
 8007ff4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ff8:	4798      	blx	r3
 8007ffa:	3501      	adds	r5, #1
 8007ffc:	e7ee      	b.n	8007fdc <__libc_init_array+0xc>
 8007ffe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008002:	4798      	blx	r3
 8008004:	3501      	adds	r5, #1
 8008006:	e7f2      	b.n	8007fee <__libc_init_array+0x1e>
 8008008:	080088cc 	.word	0x080088cc
 800800c:	080088cc 	.word	0x080088cc
 8008010:	080088cc 	.word	0x080088cc
 8008014:	080088d0 	.word	0x080088d0

08008018 <malloc>:
 8008018:	4b02      	ldr	r3, [pc, #8]	; (8008024 <malloc+0xc>)
 800801a:	4601      	mov	r1, r0
 800801c:	6818      	ldr	r0, [r3, #0]
 800801e:	f000 b859 	b.w	80080d4 <_malloc_r>
 8008022:	bf00      	nop
 8008024:	2000000c 	.word	0x2000000c

08008028 <memset>:
 8008028:	4402      	add	r2, r0
 800802a:	4603      	mov	r3, r0
 800802c:	4293      	cmp	r3, r2
 800802e:	d100      	bne.n	8008032 <memset+0xa>
 8008030:	4770      	bx	lr
 8008032:	f803 1b01 	strb.w	r1, [r3], #1
 8008036:	e7f9      	b.n	800802c <memset+0x4>

08008038 <_free_r>:
 8008038:	b538      	push	{r3, r4, r5, lr}
 800803a:	4605      	mov	r5, r0
 800803c:	2900      	cmp	r1, #0
 800803e:	d045      	beq.n	80080cc <_free_r+0x94>
 8008040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008044:	1f0c      	subs	r4, r1, #4
 8008046:	2b00      	cmp	r3, #0
 8008048:	bfb8      	it	lt
 800804a:	18e4      	addlt	r4, r4, r3
 800804c:	f000 f8cc 	bl	80081e8 <__malloc_lock>
 8008050:	4a1f      	ldr	r2, [pc, #124]	; (80080d0 <_free_r+0x98>)
 8008052:	6813      	ldr	r3, [r2, #0]
 8008054:	4610      	mov	r0, r2
 8008056:	b933      	cbnz	r3, 8008066 <_free_r+0x2e>
 8008058:	6063      	str	r3, [r4, #4]
 800805a:	6014      	str	r4, [r2, #0]
 800805c:	4628      	mov	r0, r5
 800805e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008062:	f000 b8c2 	b.w	80081ea <__malloc_unlock>
 8008066:	42a3      	cmp	r3, r4
 8008068:	d90c      	bls.n	8008084 <_free_r+0x4c>
 800806a:	6821      	ldr	r1, [r4, #0]
 800806c:	1862      	adds	r2, r4, r1
 800806e:	4293      	cmp	r3, r2
 8008070:	bf04      	itt	eq
 8008072:	681a      	ldreq	r2, [r3, #0]
 8008074:	685b      	ldreq	r3, [r3, #4]
 8008076:	6063      	str	r3, [r4, #4]
 8008078:	bf04      	itt	eq
 800807a:	1852      	addeq	r2, r2, r1
 800807c:	6022      	streq	r2, [r4, #0]
 800807e:	6004      	str	r4, [r0, #0]
 8008080:	e7ec      	b.n	800805c <_free_r+0x24>
 8008082:	4613      	mov	r3, r2
 8008084:	685a      	ldr	r2, [r3, #4]
 8008086:	b10a      	cbz	r2, 800808c <_free_r+0x54>
 8008088:	42a2      	cmp	r2, r4
 800808a:	d9fa      	bls.n	8008082 <_free_r+0x4a>
 800808c:	6819      	ldr	r1, [r3, #0]
 800808e:	1858      	adds	r0, r3, r1
 8008090:	42a0      	cmp	r0, r4
 8008092:	d10b      	bne.n	80080ac <_free_r+0x74>
 8008094:	6820      	ldr	r0, [r4, #0]
 8008096:	4401      	add	r1, r0
 8008098:	1858      	adds	r0, r3, r1
 800809a:	4282      	cmp	r2, r0
 800809c:	6019      	str	r1, [r3, #0]
 800809e:	d1dd      	bne.n	800805c <_free_r+0x24>
 80080a0:	6810      	ldr	r0, [r2, #0]
 80080a2:	6852      	ldr	r2, [r2, #4]
 80080a4:	605a      	str	r2, [r3, #4]
 80080a6:	4401      	add	r1, r0
 80080a8:	6019      	str	r1, [r3, #0]
 80080aa:	e7d7      	b.n	800805c <_free_r+0x24>
 80080ac:	d902      	bls.n	80080b4 <_free_r+0x7c>
 80080ae:	230c      	movs	r3, #12
 80080b0:	602b      	str	r3, [r5, #0]
 80080b2:	e7d3      	b.n	800805c <_free_r+0x24>
 80080b4:	6820      	ldr	r0, [r4, #0]
 80080b6:	1821      	adds	r1, r4, r0
 80080b8:	428a      	cmp	r2, r1
 80080ba:	bf04      	itt	eq
 80080bc:	6811      	ldreq	r1, [r2, #0]
 80080be:	6852      	ldreq	r2, [r2, #4]
 80080c0:	6062      	str	r2, [r4, #4]
 80080c2:	bf04      	itt	eq
 80080c4:	1809      	addeq	r1, r1, r0
 80080c6:	6021      	streq	r1, [r4, #0]
 80080c8:	605c      	str	r4, [r3, #4]
 80080ca:	e7c7      	b.n	800805c <_free_r+0x24>
 80080cc:	bd38      	pop	{r3, r4, r5, pc}
 80080ce:	bf00      	nop
 80080d0:	20000090 	.word	0x20000090

080080d4 <_malloc_r>:
 80080d4:	b570      	push	{r4, r5, r6, lr}
 80080d6:	1ccd      	adds	r5, r1, #3
 80080d8:	f025 0503 	bic.w	r5, r5, #3
 80080dc:	3508      	adds	r5, #8
 80080de:	2d0c      	cmp	r5, #12
 80080e0:	bf38      	it	cc
 80080e2:	250c      	movcc	r5, #12
 80080e4:	2d00      	cmp	r5, #0
 80080e6:	4606      	mov	r6, r0
 80080e8:	db01      	blt.n	80080ee <_malloc_r+0x1a>
 80080ea:	42a9      	cmp	r1, r5
 80080ec:	d903      	bls.n	80080f6 <_malloc_r+0x22>
 80080ee:	230c      	movs	r3, #12
 80080f0:	6033      	str	r3, [r6, #0]
 80080f2:	2000      	movs	r0, #0
 80080f4:	bd70      	pop	{r4, r5, r6, pc}
 80080f6:	f000 f877 	bl	80081e8 <__malloc_lock>
 80080fa:	4a21      	ldr	r2, [pc, #132]	; (8008180 <_malloc_r+0xac>)
 80080fc:	6814      	ldr	r4, [r2, #0]
 80080fe:	4621      	mov	r1, r4
 8008100:	b991      	cbnz	r1, 8008128 <_malloc_r+0x54>
 8008102:	4c20      	ldr	r4, [pc, #128]	; (8008184 <_malloc_r+0xb0>)
 8008104:	6823      	ldr	r3, [r4, #0]
 8008106:	b91b      	cbnz	r3, 8008110 <_malloc_r+0x3c>
 8008108:	4630      	mov	r0, r6
 800810a:	f000 f83d 	bl	8008188 <_sbrk_r>
 800810e:	6020      	str	r0, [r4, #0]
 8008110:	4629      	mov	r1, r5
 8008112:	4630      	mov	r0, r6
 8008114:	f000 f838 	bl	8008188 <_sbrk_r>
 8008118:	1c43      	adds	r3, r0, #1
 800811a:	d124      	bne.n	8008166 <_malloc_r+0x92>
 800811c:	230c      	movs	r3, #12
 800811e:	6033      	str	r3, [r6, #0]
 8008120:	4630      	mov	r0, r6
 8008122:	f000 f862 	bl	80081ea <__malloc_unlock>
 8008126:	e7e4      	b.n	80080f2 <_malloc_r+0x1e>
 8008128:	680b      	ldr	r3, [r1, #0]
 800812a:	1b5b      	subs	r3, r3, r5
 800812c:	d418      	bmi.n	8008160 <_malloc_r+0x8c>
 800812e:	2b0b      	cmp	r3, #11
 8008130:	d90f      	bls.n	8008152 <_malloc_r+0x7e>
 8008132:	600b      	str	r3, [r1, #0]
 8008134:	50cd      	str	r5, [r1, r3]
 8008136:	18cc      	adds	r4, r1, r3
 8008138:	4630      	mov	r0, r6
 800813a:	f000 f856 	bl	80081ea <__malloc_unlock>
 800813e:	f104 000b 	add.w	r0, r4, #11
 8008142:	1d23      	adds	r3, r4, #4
 8008144:	f020 0007 	bic.w	r0, r0, #7
 8008148:	1ac3      	subs	r3, r0, r3
 800814a:	d0d3      	beq.n	80080f4 <_malloc_r+0x20>
 800814c:	425a      	negs	r2, r3
 800814e:	50e2      	str	r2, [r4, r3]
 8008150:	e7d0      	b.n	80080f4 <_malloc_r+0x20>
 8008152:	428c      	cmp	r4, r1
 8008154:	684b      	ldr	r3, [r1, #4]
 8008156:	bf16      	itet	ne
 8008158:	6063      	strne	r3, [r4, #4]
 800815a:	6013      	streq	r3, [r2, #0]
 800815c:	460c      	movne	r4, r1
 800815e:	e7eb      	b.n	8008138 <_malloc_r+0x64>
 8008160:	460c      	mov	r4, r1
 8008162:	6849      	ldr	r1, [r1, #4]
 8008164:	e7cc      	b.n	8008100 <_malloc_r+0x2c>
 8008166:	1cc4      	adds	r4, r0, #3
 8008168:	f024 0403 	bic.w	r4, r4, #3
 800816c:	42a0      	cmp	r0, r4
 800816e:	d005      	beq.n	800817c <_malloc_r+0xa8>
 8008170:	1a21      	subs	r1, r4, r0
 8008172:	4630      	mov	r0, r6
 8008174:	f000 f808 	bl	8008188 <_sbrk_r>
 8008178:	3001      	adds	r0, #1
 800817a:	d0cf      	beq.n	800811c <_malloc_r+0x48>
 800817c:	6025      	str	r5, [r4, #0]
 800817e:	e7db      	b.n	8008138 <_malloc_r+0x64>
 8008180:	20000090 	.word	0x20000090
 8008184:	20000094 	.word	0x20000094

08008188 <_sbrk_r>:
 8008188:	b538      	push	{r3, r4, r5, lr}
 800818a:	4c06      	ldr	r4, [pc, #24]	; (80081a4 <_sbrk_r+0x1c>)
 800818c:	2300      	movs	r3, #0
 800818e:	4605      	mov	r5, r0
 8008190:	4608      	mov	r0, r1
 8008192:	6023      	str	r3, [r4, #0]
 8008194:	f7f9 fd40 	bl	8001c18 <_sbrk>
 8008198:	1c43      	adds	r3, r0, #1
 800819a:	d102      	bne.n	80081a2 <_sbrk_r+0x1a>
 800819c:	6823      	ldr	r3, [r4, #0]
 800819e:	b103      	cbz	r3, 80081a2 <_sbrk_r+0x1a>
 80081a0:	602b      	str	r3, [r5, #0]
 80081a2:	bd38      	pop	{r3, r4, r5, pc}
 80081a4:	200003e4 	.word	0x200003e4

080081a8 <siprintf>:
 80081a8:	b40e      	push	{r1, r2, r3}
 80081aa:	b500      	push	{lr}
 80081ac:	b09c      	sub	sp, #112	; 0x70
 80081ae:	ab1d      	add	r3, sp, #116	; 0x74
 80081b0:	9002      	str	r0, [sp, #8]
 80081b2:	9006      	str	r0, [sp, #24]
 80081b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80081b8:	4809      	ldr	r0, [pc, #36]	; (80081e0 <siprintf+0x38>)
 80081ba:	9107      	str	r1, [sp, #28]
 80081bc:	9104      	str	r1, [sp, #16]
 80081be:	4909      	ldr	r1, [pc, #36]	; (80081e4 <siprintf+0x3c>)
 80081c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80081c4:	9105      	str	r1, [sp, #20]
 80081c6:	6800      	ldr	r0, [r0, #0]
 80081c8:	9301      	str	r3, [sp, #4]
 80081ca:	a902      	add	r1, sp, #8
 80081cc:	f000 f868 	bl	80082a0 <_svfiprintf_r>
 80081d0:	9b02      	ldr	r3, [sp, #8]
 80081d2:	2200      	movs	r2, #0
 80081d4:	701a      	strb	r2, [r3, #0]
 80081d6:	b01c      	add	sp, #112	; 0x70
 80081d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80081dc:	b003      	add	sp, #12
 80081de:	4770      	bx	lr
 80081e0:	2000000c 	.word	0x2000000c
 80081e4:	ffff0208 	.word	0xffff0208

080081e8 <__malloc_lock>:
 80081e8:	4770      	bx	lr

080081ea <__malloc_unlock>:
 80081ea:	4770      	bx	lr

080081ec <__ssputs_r>:
 80081ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081f0:	688e      	ldr	r6, [r1, #8]
 80081f2:	429e      	cmp	r6, r3
 80081f4:	4682      	mov	sl, r0
 80081f6:	460c      	mov	r4, r1
 80081f8:	4690      	mov	r8, r2
 80081fa:	4699      	mov	r9, r3
 80081fc:	d837      	bhi.n	800826e <__ssputs_r+0x82>
 80081fe:	898a      	ldrh	r2, [r1, #12]
 8008200:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008204:	d031      	beq.n	800826a <__ssputs_r+0x7e>
 8008206:	6825      	ldr	r5, [r4, #0]
 8008208:	6909      	ldr	r1, [r1, #16]
 800820a:	1a6f      	subs	r7, r5, r1
 800820c:	6965      	ldr	r5, [r4, #20]
 800820e:	2302      	movs	r3, #2
 8008210:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008214:	fb95 f5f3 	sdiv	r5, r5, r3
 8008218:	f109 0301 	add.w	r3, r9, #1
 800821c:	443b      	add	r3, r7
 800821e:	429d      	cmp	r5, r3
 8008220:	bf38      	it	cc
 8008222:	461d      	movcc	r5, r3
 8008224:	0553      	lsls	r3, r2, #21
 8008226:	d530      	bpl.n	800828a <__ssputs_r+0x9e>
 8008228:	4629      	mov	r1, r5
 800822a:	f7ff ff53 	bl	80080d4 <_malloc_r>
 800822e:	4606      	mov	r6, r0
 8008230:	b950      	cbnz	r0, 8008248 <__ssputs_r+0x5c>
 8008232:	230c      	movs	r3, #12
 8008234:	f8ca 3000 	str.w	r3, [sl]
 8008238:	89a3      	ldrh	r3, [r4, #12]
 800823a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800823e:	81a3      	strh	r3, [r4, #12]
 8008240:	f04f 30ff 	mov.w	r0, #4294967295
 8008244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008248:	463a      	mov	r2, r7
 800824a:	6921      	ldr	r1, [r4, #16]
 800824c:	f000 faa8 	bl	80087a0 <memcpy>
 8008250:	89a3      	ldrh	r3, [r4, #12]
 8008252:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800825a:	81a3      	strh	r3, [r4, #12]
 800825c:	6126      	str	r6, [r4, #16]
 800825e:	6165      	str	r5, [r4, #20]
 8008260:	443e      	add	r6, r7
 8008262:	1bed      	subs	r5, r5, r7
 8008264:	6026      	str	r6, [r4, #0]
 8008266:	60a5      	str	r5, [r4, #8]
 8008268:	464e      	mov	r6, r9
 800826a:	454e      	cmp	r6, r9
 800826c:	d900      	bls.n	8008270 <__ssputs_r+0x84>
 800826e:	464e      	mov	r6, r9
 8008270:	4632      	mov	r2, r6
 8008272:	4641      	mov	r1, r8
 8008274:	6820      	ldr	r0, [r4, #0]
 8008276:	f000 fa9e 	bl	80087b6 <memmove>
 800827a:	68a3      	ldr	r3, [r4, #8]
 800827c:	1b9b      	subs	r3, r3, r6
 800827e:	60a3      	str	r3, [r4, #8]
 8008280:	6823      	ldr	r3, [r4, #0]
 8008282:	441e      	add	r6, r3
 8008284:	6026      	str	r6, [r4, #0]
 8008286:	2000      	movs	r0, #0
 8008288:	e7dc      	b.n	8008244 <__ssputs_r+0x58>
 800828a:	462a      	mov	r2, r5
 800828c:	f000 faac 	bl	80087e8 <_realloc_r>
 8008290:	4606      	mov	r6, r0
 8008292:	2800      	cmp	r0, #0
 8008294:	d1e2      	bne.n	800825c <__ssputs_r+0x70>
 8008296:	6921      	ldr	r1, [r4, #16]
 8008298:	4650      	mov	r0, sl
 800829a:	f7ff fecd 	bl	8008038 <_free_r>
 800829e:	e7c8      	b.n	8008232 <__ssputs_r+0x46>

080082a0 <_svfiprintf_r>:
 80082a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a4:	461d      	mov	r5, r3
 80082a6:	898b      	ldrh	r3, [r1, #12]
 80082a8:	061f      	lsls	r7, r3, #24
 80082aa:	b09d      	sub	sp, #116	; 0x74
 80082ac:	4680      	mov	r8, r0
 80082ae:	460c      	mov	r4, r1
 80082b0:	4616      	mov	r6, r2
 80082b2:	d50f      	bpl.n	80082d4 <_svfiprintf_r+0x34>
 80082b4:	690b      	ldr	r3, [r1, #16]
 80082b6:	b96b      	cbnz	r3, 80082d4 <_svfiprintf_r+0x34>
 80082b8:	2140      	movs	r1, #64	; 0x40
 80082ba:	f7ff ff0b 	bl	80080d4 <_malloc_r>
 80082be:	6020      	str	r0, [r4, #0]
 80082c0:	6120      	str	r0, [r4, #16]
 80082c2:	b928      	cbnz	r0, 80082d0 <_svfiprintf_r+0x30>
 80082c4:	230c      	movs	r3, #12
 80082c6:	f8c8 3000 	str.w	r3, [r8]
 80082ca:	f04f 30ff 	mov.w	r0, #4294967295
 80082ce:	e0c8      	b.n	8008462 <_svfiprintf_r+0x1c2>
 80082d0:	2340      	movs	r3, #64	; 0x40
 80082d2:	6163      	str	r3, [r4, #20]
 80082d4:	2300      	movs	r3, #0
 80082d6:	9309      	str	r3, [sp, #36]	; 0x24
 80082d8:	2320      	movs	r3, #32
 80082da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082de:	2330      	movs	r3, #48	; 0x30
 80082e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082e4:	9503      	str	r5, [sp, #12]
 80082e6:	f04f 0b01 	mov.w	fp, #1
 80082ea:	4637      	mov	r7, r6
 80082ec:	463d      	mov	r5, r7
 80082ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80082f2:	b10b      	cbz	r3, 80082f8 <_svfiprintf_r+0x58>
 80082f4:	2b25      	cmp	r3, #37	; 0x25
 80082f6:	d13e      	bne.n	8008376 <_svfiprintf_r+0xd6>
 80082f8:	ebb7 0a06 	subs.w	sl, r7, r6
 80082fc:	d00b      	beq.n	8008316 <_svfiprintf_r+0x76>
 80082fe:	4653      	mov	r3, sl
 8008300:	4632      	mov	r2, r6
 8008302:	4621      	mov	r1, r4
 8008304:	4640      	mov	r0, r8
 8008306:	f7ff ff71 	bl	80081ec <__ssputs_r>
 800830a:	3001      	adds	r0, #1
 800830c:	f000 80a4 	beq.w	8008458 <_svfiprintf_r+0x1b8>
 8008310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008312:	4453      	add	r3, sl
 8008314:	9309      	str	r3, [sp, #36]	; 0x24
 8008316:	783b      	ldrb	r3, [r7, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	f000 809d 	beq.w	8008458 <_svfiprintf_r+0x1b8>
 800831e:	2300      	movs	r3, #0
 8008320:	f04f 32ff 	mov.w	r2, #4294967295
 8008324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008328:	9304      	str	r3, [sp, #16]
 800832a:	9307      	str	r3, [sp, #28]
 800832c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008330:	931a      	str	r3, [sp, #104]	; 0x68
 8008332:	462f      	mov	r7, r5
 8008334:	2205      	movs	r2, #5
 8008336:	f817 1b01 	ldrb.w	r1, [r7], #1
 800833a:	4850      	ldr	r0, [pc, #320]	; (800847c <_svfiprintf_r+0x1dc>)
 800833c:	f7f7 ff78 	bl	8000230 <memchr>
 8008340:	9b04      	ldr	r3, [sp, #16]
 8008342:	b9d0      	cbnz	r0, 800837a <_svfiprintf_r+0xda>
 8008344:	06d9      	lsls	r1, r3, #27
 8008346:	bf44      	itt	mi
 8008348:	2220      	movmi	r2, #32
 800834a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800834e:	071a      	lsls	r2, r3, #28
 8008350:	bf44      	itt	mi
 8008352:	222b      	movmi	r2, #43	; 0x2b
 8008354:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008358:	782a      	ldrb	r2, [r5, #0]
 800835a:	2a2a      	cmp	r2, #42	; 0x2a
 800835c:	d015      	beq.n	800838a <_svfiprintf_r+0xea>
 800835e:	9a07      	ldr	r2, [sp, #28]
 8008360:	462f      	mov	r7, r5
 8008362:	2000      	movs	r0, #0
 8008364:	250a      	movs	r5, #10
 8008366:	4639      	mov	r1, r7
 8008368:	f811 3b01 	ldrb.w	r3, [r1], #1
 800836c:	3b30      	subs	r3, #48	; 0x30
 800836e:	2b09      	cmp	r3, #9
 8008370:	d94d      	bls.n	800840e <_svfiprintf_r+0x16e>
 8008372:	b1b8      	cbz	r0, 80083a4 <_svfiprintf_r+0x104>
 8008374:	e00f      	b.n	8008396 <_svfiprintf_r+0xf6>
 8008376:	462f      	mov	r7, r5
 8008378:	e7b8      	b.n	80082ec <_svfiprintf_r+0x4c>
 800837a:	4a40      	ldr	r2, [pc, #256]	; (800847c <_svfiprintf_r+0x1dc>)
 800837c:	1a80      	subs	r0, r0, r2
 800837e:	fa0b f000 	lsl.w	r0, fp, r0
 8008382:	4318      	orrs	r0, r3
 8008384:	9004      	str	r0, [sp, #16]
 8008386:	463d      	mov	r5, r7
 8008388:	e7d3      	b.n	8008332 <_svfiprintf_r+0x92>
 800838a:	9a03      	ldr	r2, [sp, #12]
 800838c:	1d11      	adds	r1, r2, #4
 800838e:	6812      	ldr	r2, [r2, #0]
 8008390:	9103      	str	r1, [sp, #12]
 8008392:	2a00      	cmp	r2, #0
 8008394:	db01      	blt.n	800839a <_svfiprintf_r+0xfa>
 8008396:	9207      	str	r2, [sp, #28]
 8008398:	e004      	b.n	80083a4 <_svfiprintf_r+0x104>
 800839a:	4252      	negs	r2, r2
 800839c:	f043 0302 	orr.w	r3, r3, #2
 80083a0:	9207      	str	r2, [sp, #28]
 80083a2:	9304      	str	r3, [sp, #16]
 80083a4:	783b      	ldrb	r3, [r7, #0]
 80083a6:	2b2e      	cmp	r3, #46	; 0x2e
 80083a8:	d10c      	bne.n	80083c4 <_svfiprintf_r+0x124>
 80083aa:	787b      	ldrb	r3, [r7, #1]
 80083ac:	2b2a      	cmp	r3, #42	; 0x2a
 80083ae:	d133      	bne.n	8008418 <_svfiprintf_r+0x178>
 80083b0:	9b03      	ldr	r3, [sp, #12]
 80083b2:	1d1a      	adds	r2, r3, #4
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	9203      	str	r2, [sp, #12]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	bfb8      	it	lt
 80083bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80083c0:	3702      	adds	r7, #2
 80083c2:	9305      	str	r3, [sp, #20]
 80083c4:	4d2e      	ldr	r5, [pc, #184]	; (8008480 <_svfiprintf_r+0x1e0>)
 80083c6:	7839      	ldrb	r1, [r7, #0]
 80083c8:	2203      	movs	r2, #3
 80083ca:	4628      	mov	r0, r5
 80083cc:	f7f7 ff30 	bl	8000230 <memchr>
 80083d0:	b138      	cbz	r0, 80083e2 <_svfiprintf_r+0x142>
 80083d2:	2340      	movs	r3, #64	; 0x40
 80083d4:	1b40      	subs	r0, r0, r5
 80083d6:	fa03 f000 	lsl.w	r0, r3, r0
 80083da:	9b04      	ldr	r3, [sp, #16]
 80083dc:	4303      	orrs	r3, r0
 80083de:	3701      	adds	r7, #1
 80083e0:	9304      	str	r3, [sp, #16]
 80083e2:	7839      	ldrb	r1, [r7, #0]
 80083e4:	4827      	ldr	r0, [pc, #156]	; (8008484 <_svfiprintf_r+0x1e4>)
 80083e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083ea:	2206      	movs	r2, #6
 80083ec:	1c7e      	adds	r6, r7, #1
 80083ee:	f7f7 ff1f 	bl	8000230 <memchr>
 80083f2:	2800      	cmp	r0, #0
 80083f4:	d038      	beq.n	8008468 <_svfiprintf_r+0x1c8>
 80083f6:	4b24      	ldr	r3, [pc, #144]	; (8008488 <_svfiprintf_r+0x1e8>)
 80083f8:	bb13      	cbnz	r3, 8008440 <_svfiprintf_r+0x1a0>
 80083fa:	9b03      	ldr	r3, [sp, #12]
 80083fc:	3307      	adds	r3, #7
 80083fe:	f023 0307 	bic.w	r3, r3, #7
 8008402:	3308      	adds	r3, #8
 8008404:	9303      	str	r3, [sp, #12]
 8008406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008408:	444b      	add	r3, r9
 800840a:	9309      	str	r3, [sp, #36]	; 0x24
 800840c:	e76d      	b.n	80082ea <_svfiprintf_r+0x4a>
 800840e:	fb05 3202 	mla	r2, r5, r2, r3
 8008412:	2001      	movs	r0, #1
 8008414:	460f      	mov	r7, r1
 8008416:	e7a6      	b.n	8008366 <_svfiprintf_r+0xc6>
 8008418:	2300      	movs	r3, #0
 800841a:	3701      	adds	r7, #1
 800841c:	9305      	str	r3, [sp, #20]
 800841e:	4619      	mov	r1, r3
 8008420:	250a      	movs	r5, #10
 8008422:	4638      	mov	r0, r7
 8008424:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008428:	3a30      	subs	r2, #48	; 0x30
 800842a:	2a09      	cmp	r2, #9
 800842c:	d903      	bls.n	8008436 <_svfiprintf_r+0x196>
 800842e:	2b00      	cmp	r3, #0
 8008430:	d0c8      	beq.n	80083c4 <_svfiprintf_r+0x124>
 8008432:	9105      	str	r1, [sp, #20]
 8008434:	e7c6      	b.n	80083c4 <_svfiprintf_r+0x124>
 8008436:	fb05 2101 	mla	r1, r5, r1, r2
 800843a:	2301      	movs	r3, #1
 800843c:	4607      	mov	r7, r0
 800843e:	e7f0      	b.n	8008422 <_svfiprintf_r+0x182>
 8008440:	ab03      	add	r3, sp, #12
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	4622      	mov	r2, r4
 8008446:	4b11      	ldr	r3, [pc, #68]	; (800848c <_svfiprintf_r+0x1ec>)
 8008448:	a904      	add	r1, sp, #16
 800844a:	4640      	mov	r0, r8
 800844c:	f3af 8000 	nop.w
 8008450:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008454:	4681      	mov	r9, r0
 8008456:	d1d6      	bne.n	8008406 <_svfiprintf_r+0x166>
 8008458:	89a3      	ldrh	r3, [r4, #12]
 800845a:	065b      	lsls	r3, r3, #25
 800845c:	f53f af35 	bmi.w	80082ca <_svfiprintf_r+0x2a>
 8008460:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008462:	b01d      	add	sp, #116	; 0x74
 8008464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008468:	ab03      	add	r3, sp, #12
 800846a:	9300      	str	r3, [sp, #0]
 800846c:	4622      	mov	r2, r4
 800846e:	4b07      	ldr	r3, [pc, #28]	; (800848c <_svfiprintf_r+0x1ec>)
 8008470:	a904      	add	r1, sp, #16
 8008472:	4640      	mov	r0, r8
 8008474:	f000 f882 	bl	800857c <_printf_i>
 8008478:	e7ea      	b.n	8008450 <_svfiprintf_r+0x1b0>
 800847a:	bf00      	nop
 800847c:	08008890 	.word	0x08008890
 8008480:	08008896 	.word	0x08008896
 8008484:	0800889a 	.word	0x0800889a
 8008488:	00000000 	.word	0x00000000
 800848c:	080081ed 	.word	0x080081ed

08008490 <_printf_common>:
 8008490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008494:	4691      	mov	r9, r2
 8008496:	461f      	mov	r7, r3
 8008498:	688a      	ldr	r2, [r1, #8]
 800849a:	690b      	ldr	r3, [r1, #16]
 800849c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80084a0:	4293      	cmp	r3, r2
 80084a2:	bfb8      	it	lt
 80084a4:	4613      	movlt	r3, r2
 80084a6:	f8c9 3000 	str.w	r3, [r9]
 80084aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80084ae:	4606      	mov	r6, r0
 80084b0:	460c      	mov	r4, r1
 80084b2:	b112      	cbz	r2, 80084ba <_printf_common+0x2a>
 80084b4:	3301      	adds	r3, #1
 80084b6:	f8c9 3000 	str.w	r3, [r9]
 80084ba:	6823      	ldr	r3, [r4, #0]
 80084bc:	0699      	lsls	r1, r3, #26
 80084be:	bf42      	ittt	mi
 80084c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80084c4:	3302      	addmi	r3, #2
 80084c6:	f8c9 3000 	strmi.w	r3, [r9]
 80084ca:	6825      	ldr	r5, [r4, #0]
 80084cc:	f015 0506 	ands.w	r5, r5, #6
 80084d0:	d107      	bne.n	80084e2 <_printf_common+0x52>
 80084d2:	f104 0a19 	add.w	sl, r4, #25
 80084d6:	68e3      	ldr	r3, [r4, #12]
 80084d8:	f8d9 2000 	ldr.w	r2, [r9]
 80084dc:	1a9b      	subs	r3, r3, r2
 80084de:	42ab      	cmp	r3, r5
 80084e0:	dc28      	bgt.n	8008534 <_printf_common+0xa4>
 80084e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80084e6:	6822      	ldr	r2, [r4, #0]
 80084e8:	3300      	adds	r3, #0
 80084ea:	bf18      	it	ne
 80084ec:	2301      	movne	r3, #1
 80084ee:	0692      	lsls	r2, r2, #26
 80084f0:	d42d      	bmi.n	800854e <_printf_common+0xbe>
 80084f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084f6:	4639      	mov	r1, r7
 80084f8:	4630      	mov	r0, r6
 80084fa:	47c0      	blx	r8
 80084fc:	3001      	adds	r0, #1
 80084fe:	d020      	beq.n	8008542 <_printf_common+0xb2>
 8008500:	6823      	ldr	r3, [r4, #0]
 8008502:	68e5      	ldr	r5, [r4, #12]
 8008504:	f8d9 2000 	ldr.w	r2, [r9]
 8008508:	f003 0306 	and.w	r3, r3, #6
 800850c:	2b04      	cmp	r3, #4
 800850e:	bf08      	it	eq
 8008510:	1aad      	subeq	r5, r5, r2
 8008512:	68a3      	ldr	r3, [r4, #8]
 8008514:	6922      	ldr	r2, [r4, #16]
 8008516:	bf0c      	ite	eq
 8008518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800851c:	2500      	movne	r5, #0
 800851e:	4293      	cmp	r3, r2
 8008520:	bfc4      	itt	gt
 8008522:	1a9b      	subgt	r3, r3, r2
 8008524:	18ed      	addgt	r5, r5, r3
 8008526:	f04f 0900 	mov.w	r9, #0
 800852a:	341a      	adds	r4, #26
 800852c:	454d      	cmp	r5, r9
 800852e:	d11a      	bne.n	8008566 <_printf_common+0xd6>
 8008530:	2000      	movs	r0, #0
 8008532:	e008      	b.n	8008546 <_printf_common+0xb6>
 8008534:	2301      	movs	r3, #1
 8008536:	4652      	mov	r2, sl
 8008538:	4639      	mov	r1, r7
 800853a:	4630      	mov	r0, r6
 800853c:	47c0      	blx	r8
 800853e:	3001      	adds	r0, #1
 8008540:	d103      	bne.n	800854a <_printf_common+0xba>
 8008542:	f04f 30ff 	mov.w	r0, #4294967295
 8008546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800854a:	3501      	adds	r5, #1
 800854c:	e7c3      	b.n	80084d6 <_printf_common+0x46>
 800854e:	18e1      	adds	r1, r4, r3
 8008550:	1c5a      	adds	r2, r3, #1
 8008552:	2030      	movs	r0, #48	; 0x30
 8008554:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008558:	4422      	add	r2, r4
 800855a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800855e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008562:	3302      	adds	r3, #2
 8008564:	e7c5      	b.n	80084f2 <_printf_common+0x62>
 8008566:	2301      	movs	r3, #1
 8008568:	4622      	mov	r2, r4
 800856a:	4639      	mov	r1, r7
 800856c:	4630      	mov	r0, r6
 800856e:	47c0      	blx	r8
 8008570:	3001      	adds	r0, #1
 8008572:	d0e6      	beq.n	8008542 <_printf_common+0xb2>
 8008574:	f109 0901 	add.w	r9, r9, #1
 8008578:	e7d8      	b.n	800852c <_printf_common+0x9c>
	...

0800857c <_printf_i>:
 800857c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008580:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008584:	460c      	mov	r4, r1
 8008586:	7e09      	ldrb	r1, [r1, #24]
 8008588:	b085      	sub	sp, #20
 800858a:	296e      	cmp	r1, #110	; 0x6e
 800858c:	4617      	mov	r7, r2
 800858e:	4606      	mov	r6, r0
 8008590:	4698      	mov	r8, r3
 8008592:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008594:	f000 80b3 	beq.w	80086fe <_printf_i+0x182>
 8008598:	d822      	bhi.n	80085e0 <_printf_i+0x64>
 800859a:	2963      	cmp	r1, #99	; 0x63
 800859c:	d036      	beq.n	800860c <_printf_i+0x90>
 800859e:	d80a      	bhi.n	80085b6 <_printf_i+0x3a>
 80085a0:	2900      	cmp	r1, #0
 80085a2:	f000 80b9 	beq.w	8008718 <_printf_i+0x19c>
 80085a6:	2958      	cmp	r1, #88	; 0x58
 80085a8:	f000 8083 	beq.w	80086b2 <_printf_i+0x136>
 80085ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80085b4:	e032      	b.n	800861c <_printf_i+0xa0>
 80085b6:	2964      	cmp	r1, #100	; 0x64
 80085b8:	d001      	beq.n	80085be <_printf_i+0x42>
 80085ba:	2969      	cmp	r1, #105	; 0x69
 80085bc:	d1f6      	bne.n	80085ac <_printf_i+0x30>
 80085be:	6820      	ldr	r0, [r4, #0]
 80085c0:	6813      	ldr	r3, [r2, #0]
 80085c2:	0605      	lsls	r5, r0, #24
 80085c4:	f103 0104 	add.w	r1, r3, #4
 80085c8:	d52a      	bpl.n	8008620 <_printf_i+0xa4>
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	6011      	str	r1, [r2, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	da03      	bge.n	80085da <_printf_i+0x5e>
 80085d2:	222d      	movs	r2, #45	; 0x2d
 80085d4:	425b      	negs	r3, r3
 80085d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80085da:	486f      	ldr	r0, [pc, #444]	; (8008798 <_printf_i+0x21c>)
 80085dc:	220a      	movs	r2, #10
 80085de:	e039      	b.n	8008654 <_printf_i+0xd8>
 80085e0:	2973      	cmp	r1, #115	; 0x73
 80085e2:	f000 809d 	beq.w	8008720 <_printf_i+0x1a4>
 80085e6:	d808      	bhi.n	80085fa <_printf_i+0x7e>
 80085e8:	296f      	cmp	r1, #111	; 0x6f
 80085ea:	d020      	beq.n	800862e <_printf_i+0xb2>
 80085ec:	2970      	cmp	r1, #112	; 0x70
 80085ee:	d1dd      	bne.n	80085ac <_printf_i+0x30>
 80085f0:	6823      	ldr	r3, [r4, #0]
 80085f2:	f043 0320 	orr.w	r3, r3, #32
 80085f6:	6023      	str	r3, [r4, #0]
 80085f8:	e003      	b.n	8008602 <_printf_i+0x86>
 80085fa:	2975      	cmp	r1, #117	; 0x75
 80085fc:	d017      	beq.n	800862e <_printf_i+0xb2>
 80085fe:	2978      	cmp	r1, #120	; 0x78
 8008600:	d1d4      	bne.n	80085ac <_printf_i+0x30>
 8008602:	2378      	movs	r3, #120	; 0x78
 8008604:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008608:	4864      	ldr	r0, [pc, #400]	; (800879c <_printf_i+0x220>)
 800860a:	e055      	b.n	80086b8 <_printf_i+0x13c>
 800860c:	6813      	ldr	r3, [r2, #0]
 800860e:	1d19      	adds	r1, r3, #4
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	6011      	str	r1, [r2, #0]
 8008614:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008618:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800861c:	2301      	movs	r3, #1
 800861e:	e08c      	b.n	800873a <_printf_i+0x1be>
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	6011      	str	r1, [r2, #0]
 8008624:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008628:	bf18      	it	ne
 800862a:	b21b      	sxthne	r3, r3
 800862c:	e7cf      	b.n	80085ce <_printf_i+0x52>
 800862e:	6813      	ldr	r3, [r2, #0]
 8008630:	6825      	ldr	r5, [r4, #0]
 8008632:	1d18      	adds	r0, r3, #4
 8008634:	6010      	str	r0, [r2, #0]
 8008636:	0628      	lsls	r0, r5, #24
 8008638:	d501      	bpl.n	800863e <_printf_i+0xc2>
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	e002      	b.n	8008644 <_printf_i+0xc8>
 800863e:	0668      	lsls	r0, r5, #25
 8008640:	d5fb      	bpl.n	800863a <_printf_i+0xbe>
 8008642:	881b      	ldrh	r3, [r3, #0]
 8008644:	4854      	ldr	r0, [pc, #336]	; (8008798 <_printf_i+0x21c>)
 8008646:	296f      	cmp	r1, #111	; 0x6f
 8008648:	bf14      	ite	ne
 800864a:	220a      	movne	r2, #10
 800864c:	2208      	moveq	r2, #8
 800864e:	2100      	movs	r1, #0
 8008650:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008654:	6865      	ldr	r5, [r4, #4]
 8008656:	60a5      	str	r5, [r4, #8]
 8008658:	2d00      	cmp	r5, #0
 800865a:	f2c0 8095 	blt.w	8008788 <_printf_i+0x20c>
 800865e:	6821      	ldr	r1, [r4, #0]
 8008660:	f021 0104 	bic.w	r1, r1, #4
 8008664:	6021      	str	r1, [r4, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d13d      	bne.n	80086e6 <_printf_i+0x16a>
 800866a:	2d00      	cmp	r5, #0
 800866c:	f040 808e 	bne.w	800878c <_printf_i+0x210>
 8008670:	4665      	mov	r5, ip
 8008672:	2a08      	cmp	r2, #8
 8008674:	d10b      	bne.n	800868e <_printf_i+0x112>
 8008676:	6823      	ldr	r3, [r4, #0]
 8008678:	07db      	lsls	r3, r3, #31
 800867a:	d508      	bpl.n	800868e <_printf_i+0x112>
 800867c:	6923      	ldr	r3, [r4, #16]
 800867e:	6862      	ldr	r2, [r4, #4]
 8008680:	429a      	cmp	r2, r3
 8008682:	bfde      	ittt	le
 8008684:	2330      	movle	r3, #48	; 0x30
 8008686:	f805 3c01 	strble.w	r3, [r5, #-1]
 800868a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800868e:	ebac 0305 	sub.w	r3, ip, r5
 8008692:	6123      	str	r3, [r4, #16]
 8008694:	f8cd 8000 	str.w	r8, [sp]
 8008698:	463b      	mov	r3, r7
 800869a:	aa03      	add	r2, sp, #12
 800869c:	4621      	mov	r1, r4
 800869e:	4630      	mov	r0, r6
 80086a0:	f7ff fef6 	bl	8008490 <_printf_common>
 80086a4:	3001      	adds	r0, #1
 80086a6:	d14d      	bne.n	8008744 <_printf_i+0x1c8>
 80086a8:	f04f 30ff 	mov.w	r0, #4294967295
 80086ac:	b005      	add	sp, #20
 80086ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086b2:	4839      	ldr	r0, [pc, #228]	; (8008798 <_printf_i+0x21c>)
 80086b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80086b8:	6813      	ldr	r3, [r2, #0]
 80086ba:	6821      	ldr	r1, [r4, #0]
 80086bc:	1d1d      	adds	r5, r3, #4
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	6015      	str	r5, [r2, #0]
 80086c2:	060a      	lsls	r2, r1, #24
 80086c4:	d50b      	bpl.n	80086de <_printf_i+0x162>
 80086c6:	07ca      	lsls	r2, r1, #31
 80086c8:	bf44      	itt	mi
 80086ca:	f041 0120 	orrmi.w	r1, r1, #32
 80086ce:	6021      	strmi	r1, [r4, #0]
 80086d0:	b91b      	cbnz	r3, 80086da <_printf_i+0x15e>
 80086d2:	6822      	ldr	r2, [r4, #0]
 80086d4:	f022 0220 	bic.w	r2, r2, #32
 80086d8:	6022      	str	r2, [r4, #0]
 80086da:	2210      	movs	r2, #16
 80086dc:	e7b7      	b.n	800864e <_printf_i+0xd2>
 80086de:	064d      	lsls	r5, r1, #25
 80086e0:	bf48      	it	mi
 80086e2:	b29b      	uxthmi	r3, r3
 80086e4:	e7ef      	b.n	80086c6 <_printf_i+0x14a>
 80086e6:	4665      	mov	r5, ip
 80086e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80086ec:	fb02 3311 	mls	r3, r2, r1, r3
 80086f0:	5cc3      	ldrb	r3, [r0, r3]
 80086f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80086f6:	460b      	mov	r3, r1
 80086f8:	2900      	cmp	r1, #0
 80086fa:	d1f5      	bne.n	80086e8 <_printf_i+0x16c>
 80086fc:	e7b9      	b.n	8008672 <_printf_i+0xf6>
 80086fe:	6813      	ldr	r3, [r2, #0]
 8008700:	6825      	ldr	r5, [r4, #0]
 8008702:	6961      	ldr	r1, [r4, #20]
 8008704:	1d18      	adds	r0, r3, #4
 8008706:	6010      	str	r0, [r2, #0]
 8008708:	0628      	lsls	r0, r5, #24
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	d501      	bpl.n	8008712 <_printf_i+0x196>
 800870e:	6019      	str	r1, [r3, #0]
 8008710:	e002      	b.n	8008718 <_printf_i+0x19c>
 8008712:	066a      	lsls	r2, r5, #25
 8008714:	d5fb      	bpl.n	800870e <_printf_i+0x192>
 8008716:	8019      	strh	r1, [r3, #0]
 8008718:	2300      	movs	r3, #0
 800871a:	6123      	str	r3, [r4, #16]
 800871c:	4665      	mov	r5, ip
 800871e:	e7b9      	b.n	8008694 <_printf_i+0x118>
 8008720:	6813      	ldr	r3, [r2, #0]
 8008722:	1d19      	adds	r1, r3, #4
 8008724:	6011      	str	r1, [r2, #0]
 8008726:	681d      	ldr	r5, [r3, #0]
 8008728:	6862      	ldr	r2, [r4, #4]
 800872a:	2100      	movs	r1, #0
 800872c:	4628      	mov	r0, r5
 800872e:	f7f7 fd7f 	bl	8000230 <memchr>
 8008732:	b108      	cbz	r0, 8008738 <_printf_i+0x1bc>
 8008734:	1b40      	subs	r0, r0, r5
 8008736:	6060      	str	r0, [r4, #4]
 8008738:	6863      	ldr	r3, [r4, #4]
 800873a:	6123      	str	r3, [r4, #16]
 800873c:	2300      	movs	r3, #0
 800873e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008742:	e7a7      	b.n	8008694 <_printf_i+0x118>
 8008744:	6923      	ldr	r3, [r4, #16]
 8008746:	462a      	mov	r2, r5
 8008748:	4639      	mov	r1, r7
 800874a:	4630      	mov	r0, r6
 800874c:	47c0      	blx	r8
 800874e:	3001      	adds	r0, #1
 8008750:	d0aa      	beq.n	80086a8 <_printf_i+0x12c>
 8008752:	6823      	ldr	r3, [r4, #0]
 8008754:	079b      	lsls	r3, r3, #30
 8008756:	d413      	bmi.n	8008780 <_printf_i+0x204>
 8008758:	68e0      	ldr	r0, [r4, #12]
 800875a:	9b03      	ldr	r3, [sp, #12]
 800875c:	4298      	cmp	r0, r3
 800875e:	bfb8      	it	lt
 8008760:	4618      	movlt	r0, r3
 8008762:	e7a3      	b.n	80086ac <_printf_i+0x130>
 8008764:	2301      	movs	r3, #1
 8008766:	464a      	mov	r2, r9
 8008768:	4639      	mov	r1, r7
 800876a:	4630      	mov	r0, r6
 800876c:	47c0      	blx	r8
 800876e:	3001      	adds	r0, #1
 8008770:	d09a      	beq.n	80086a8 <_printf_i+0x12c>
 8008772:	3501      	adds	r5, #1
 8008774:	68e3      	ldr	r3, [r4, #12]
 8008776:	9a03      	ldr	r2, [sp, #12]
 8008778:	1a9b      	subs	r3, r3, r2
 800877a:	42ab      	cmp	r3, r5
 800877c:	dcf2      	bgt.n	8008764 <_printf_i+0x1e8>
 800877e:	e7eb      	b.n	8008758 <_printf_i+0x1dc>
 8008780:	2500      	movs	r5, #0
 8008782:	f104 0919 	add.w	r9, r4, #25
 8008786:	e7f5      	b.n	8008774 <_printf_i+0x1f8>
 8008788:	2b00      	cmp	r3, #0
 800878a:	d1ac      	bne.n	80086e6 <_printf_i+0x16a>
 800878c:	7803      	ldrb	r3, [r0, #0]
 800878e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008792:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008796:	e76c      	b.n	8008672 <_printf_i+0xf6>
 8008798:	080088a1 	.word	0x080088a1
 800879c:	080088b2 	.word	0x080088b2

080087a0 <memcpy>:
 80087a0:	b510      	push	{r4, lr}
 80087a2:	1e43      	subs	r3, r0, #1
 80087a4:	440a      	add	r2, r1
 80087a6:	4291      	cmp	r1, r2
 80087a8:	d100      	bne.n	80087ac <memcpy+0xc>
 80087aa:	bd10      	pop	{r4, pc}
 80087ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087b4:	e7f7      	b.n	80087a6 <memcpy+0x6>

080087b6 <memmove>:
 80087b6:	4288      	cmp	r0, r1
 80087b8:	b510      	push	{r4, lr}
 80087ba:	eb01 0302 	add.w	r3, r1, r2
 80087be:	d807      	bhi.n	80087d0 <memmove+0x1a>
 80087c0:	1e42      	subs	r2, r0, #1
 80087c2:	4299      	cmp	r1, r3
 80087c4:	d00a      	beq.n	80087dc <memmove+0x26>
 80087c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087ca:	f802 4f01 	strb.w	r4, [r2, #1]!
 80087ce:	e7f8      	b.n	80087c2 <memmove+0xc>
 80087d0:	4283      	cmp	r3, r0
 80087d2:	d9f5      	bls.n	80087c0 <memmove+0xa>
 80087d4:	1881      	adds	r1, r0, r2
 80087d6:	1ad2      	subs	r2, r2, r3
 80087d8:	42d3      	cmn	r3, r2
 80087da:	d100      	bne.n	80087de <memmove+0x28>
 80087dc:	bd10      	pop	{r4, pc}
 80087de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087e2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80087e6:	e7f7      	b.n	80087d8 <memmove+0x22>

080087e8 <_realloc_r>:
 80087e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ea:	4607      	mov	r7, r0
 80087ec:	4614      	mov	r4, r2
 80087ee:	460e      	mov	r6, r1
 80087f0:	b921      	cbnz	r1, 80087fc <_realloc_r+0x14>
 80087f2:	4611      	mov	r1, r2
 80087f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80087f8:	f7ff bc6c 	b.w	80080d4 <_malloc_r>
 80087fc:	b922      	cbnz	r2, 8008808 <_realloc_r+0x20>
 80087fe:	f7ff fc1b 	bl	8008038 <_free_r>
 8008802:	4625      	mov	r5, r4
 8008804:	4628      	mov	r0, r5
 8008806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008808:	f000 f814 	bl	8008834 <_malloc_usable_size_r>
 800880c:	42a0      	cmp	r0, r4
 800880e:	d20f      	bcs.n	8008830 <_realloc_r+0x48>
 8008810:	4621      	mov	r1, r4
 8008812:	4638      	mov	r0, r7
 8008814:	f7ff fc5e 	bl	80080d4 <_malloc_r>
 8008818:	4605      	mov	r5, r0
 800881a:	2800      	cmp	r0, #0
 800881c:	d0f2      	beq.n	8008804 <_realloc_r+0x1c>
 800881e:	4631      	mov	r1, r6
 8008820:	4622      	mov	r2, r4
 8008822:	f7ff ffbd 	bl	80087a0 <memcpy>
 8008826:	4631      	mov	r1, r6
 8008828:	4638      	mov	r0, r7
 800882a:	f7ff fc05 	bl	8008038 <_free_r>
 800882e:	e7e9      	b.n	8008804 <_realloc_r+0x1c>
 8008830:	4635      	mov	r5, r6
 8008832:	e7e7      	b.n	8008804 <_realloc_r+0x1c>

08008834 <_malloc_usable_size_r>:
 8008834:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008838:	1f18      	subs	r0, r3, #4
 800883a:	2b00      	cmp	r3, #0
 800883c:	bfbc      	itt	lt
 800883e:	580b      	ldrlt	r3, [r1, r0]
 8008840:	18c0      	addlt	r0, r0, r3
 8008842:	4770      	bx	lr

08008844 <_init>:
 8008844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008846:	bf00      	nop
 8008848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800884a:	bc08      	pop	{r3}
 800884c:	469e      	mov	lr, r3
 800884e:	4770      	bx	lr

08008850 <_fini>:
 8008850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008852:	bf00      	nop
 8008854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008856:	bc08      	pop	{r3}
 8008858:	469e      	mov	lr, r3
 800885a:	4770      	bx	lr
