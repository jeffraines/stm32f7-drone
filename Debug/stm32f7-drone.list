
stm32f7-drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a620  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800a800  0800a800  0001a800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a86c  0800a86c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a86c  0800a86c  0001a86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a874  0800a874  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a874  0800a874  0001a874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a878  0800a878  0001a878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a87c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000534  20000074  0800a8f0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  0800a8f0  000205a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016236  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bcc  00000000  00000000  000362da  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012f8  00000000  00000000  00038ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001190  00000000  00000000  0003a1a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000466b  00000000  00000000  0003b330  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000faab  00000000  00000000  0003f99b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e231a  00000000  00000000  0004f446  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00131760  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053dc  00000000  00000000  001317dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a7e8 	.word	0x0800a7e8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	0800a7e8 	.word	0x0800a7e8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_d2uiz>:
 8000abc:	004a      	lsls	r2, r1, #1
 8000abe:	d211      	bcs.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac4:	d211      	bcs.n	8000aea <__aeabi_d2uiz+0x2e>
 8000ac6:	d50d      	bpl.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad0:	d40e      	bmi.n	8000af0 <__aeabi_d2uiz+0x34>
 8000ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d102      	bne.n	8000af6 <__aeabi_d2uiz+0x3a>
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	4770      	bx	lr
 8000af6:	f04f 0000 	mov.w	r0, #0
 8000afa:	4770      	bx	lr

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b972 	b.w	8000df8 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9e08      	ldr	r6, [sp, #32]
 8000b32:	4604      	mov	r4, r0
 8000b34:	4688      	mov	r8, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d14b      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3a:	428a      	cmp	r2, r1
 8000b3c:	4615      	mov	r5, r2
 8000b3e:	d967      	bls.n	8000c10 <__udivmoddi4+0xe4>
 8000b40:	fab2 f282 	clz	r2, r2
 8000b44:	b14a      	cbz	r2, 8000b5a <__udivmoddi4+0x2e>
 8000b46:	f1c2 0720 	rsb	r7, r2, #32
 8000b4a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b4e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b52:	4095      	lsls	r5, r2
 8000b54:	ea47 0803 	orr.w	r8, r7, r3
 8000b58:	4094      	lsls	r4, r2
 8000b5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b5e:	0c23      	lsrs	r3, r4, #16
 8000b60:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b64:	fa1f fc85 	uxth.w	ip, r5
 8000b68:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b6c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b70:	fb07 f10c 	mul.w	r1, r7, ip
 8000b74:	4299      	cmp	r1, r3
 8000b76:	d909      	bls.n	8000b8c <__udivmoddi4+0x60>
 8000b78:	18eb      	adds	r3, r5, r3
 8000b7a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b7e:	f080 811b 	bcs.w	8000db8 <__udivmoddi4+0x28c>
 8000b82:	4299      	cmp	r1, r3
 8000b84:	f240 8118 	bls.w	8000db8 <__udivmoddi4+0x28c>
 8000b88:	3f02      	subs	r7, #2
 8000b8a:	442b      	add	r3, r5
 8000b8c:	1a5b      	subs	r3, r3, r1
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b94:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b9c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba0:	45a4      	cmp	ip, r4
 8000ba2:	d909      	bls.n	8000bb8 <__udivmoddi4+0x8c>
 8000ba4:	192c      	adds	r4, r5, r4
 8000ba6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000baa:	f080 8107 	bcs.w	8000dbc <__udivmoddi4+0x290>
 8000bae:	45a4      	cmp	ip, r4
 8000bb0:	f240 8104 	bls.w	8000dbc <__udivmoddi4+0x290>
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	442c      	add	r4, r5
 8000bb8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bbc:	eba4 040c 	sub.w	r4, r4, ip
 8000bc0:	2700      	movs	r7, #0
 8000bc2:	b11e      	cbz	r6, 8000bcc <__udivmoddi4+0xa0>
 8000bc4:	40d4      	lsrs	r4, r2
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bcc:	4639      	mov	r1, r7
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d909      	bls.n	8000bea <__udivmoddi4+0xbe>
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	f000 80eb 	beq.w	8000db2 <__udivmoddi4+0x286>
 8000bdc:	2700      	movs	r7, #0
 8000bde:	e9c6 0100 	strd	r0, r1, [r6]
 8000be2:	4638      	mov	r0, r7
 8000be4:	4639      	mov	r1, r7
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	fab3 f783 	clz	r7, r3
 8000bee:	2f00      	cmp	r7, #0
 8000bf0:	d147      	bne.n	8000c82 <__udivmoddi4+0x156>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d302      	bcc.n	8000bfc <__udivmoddi4+0xd0>
 8000bf6:	4282      	cmp	r2, r0
 8000bf8:	f200 80fa 	bhi.w	8000df0 <__udivmoddi4+0x2c4>
 8000bfc:	1a84      	subs	r4, r0, r2
 8000bfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000c02:	2001      	movs	r0, #1
 8000c04:	4698      	mov	r8, r3
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	d0e0      	beq.n	8000bcc <__udivmoddi4+0xa0>
 8000c0a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c0e:	e7dd      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000c10:	b902      	cbnz	r2, 8000c14 <__udivmoddi4+0xe8>
 8000c12:	deff      	udf	#255	; 0xff
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	f040 808f 	bne.w	8000d3c <__udivmoddi4+0x210>
 8000c1e:	1b49      	subs	r1, r1, r5
 8000c20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c24:	fa1f f885 	uxth.w	r8, r5
 8000c28:	2701      	movs	r7, #1
 8000c2a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c2e:	0c23      	lsrs	r3, r4, #16
 8000c30:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c38:	fb08 f10c 	mul.w	r1, r8, ip
 8000c3c:	4299      	cmp	r1, r3
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x124>
 8000c40:	18eb      	adds	r3, r5, r3
 8000c42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x122>
 8000c48:	4299      	cmp	r1, r3
 8000c4a:	f200 80cd 	bhi.w	8000de8 <__udivmoddi4+0x2bc>
 8000c4e:	4684      	mov	ip, r0
 8000c50:	1a59      	subs	r1, r3, r1
 8000c52:	b2a3      	uxth	r3, r4
 8000c54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c58:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c5c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c60:	fb08 f800 	mul.w	r8, r8, r0
 8000c64:	45a0      	cmp	r8, r4
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0x14c>
 8000c68:	192c      	adds	r4, r5, r4
 8000c6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x14a>
 8000c70:	45a0      	cmp	r8, r4
 8000c72:	f200 80b6 	bhi.w	8000de2 <__udivmoddi4+0x2b6>
 8000c76:	4618      	mov	r0, r3
 8000c78:	eba4 0408 	sub.w	r4, r4, r8
 8000c7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c80:	e79f      	b.n	8000bc2 <__udivmoddi4+0x96>
 8000c82:	f1c7 0c20 	rsb	ip, r7, #32
 8000c86:	40bb      	lsls	r3, r7
 8000c88:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c8c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c90:	fa01 f407 	lsl.w	r4, r1, r7
 8000c94:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c98:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c9c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca0:	4325      	orrs	r5, r4
 8000ca2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ca6:	0c2c      	lsrs	r4, r5, #16
 8000ca8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cac:	fa1f fa8e 	uxth.w	sl, lr
 8000cb0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cb8:	429c      	cmp	r4, r3
 8000cba:	fa02 f207 	lsl.w	r2, r2, r7
 8000cbe:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc2:	d90b      	bls.n	8000cdc <__udivmoddi4+0x1b0>
 8000cc4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ccc:	f080 8087 	bcs.w	8000dde <__udivmoddi4+0x2b2>
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	f240 8084 	bls.w	8000dde <__udivmoddi4+0x2b2>
 8000cd6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cda:	4473      	add	r3, lr
 8000cdc:	1b1b      	subs	r3, r3, r4
 8000cde:	b2ad      	uxth	r5, r5
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cec:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf0:	45a2      	cmp	sl, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x1da>
 8000cf4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	d26b      	bcs.n	8000dd6 <__udivmoddi4+0x2aa>
 8000cfe:	45a2      	cmp	sl, r4
 8000d00:	d969      	bls.n	8000dd6 <__udivmoddi4+0x2aa>
 8000d02:	3802      	subs	r0, #2
 8000d04:	4474      	add	r4, lr
 8000d06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d0e:	eba4 040a 	sub.w	r4, r4, sl
 8000d12:	454c      	cmp	r4, r9
 8000d14:	46c2      	mov	sl, r8
 8000d16:	464b      	mov	r3, r9
 8000d18:	d354      	bcc.n	8000dc4 <__udivmoddi4+0x298>
 8000d1a:	d051      	beq.n	8000dc0 <__udivmoddi4+0x294>
 8000d1c:	2e00      	cmp	r6, #0
 8000d1e:	d069      	beq.n	8000df4 <__udivmoddi4+0x2c8>
 8000d20:	ebb1 050a 	subs.w	r5, r1, sl
 8000d24:	eb64 0403 	sbc.w	r4, r4, r3
 8000d28:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d2c:	40fd      	lsrs	r5, r7
 8000d2e:	40fc      	lsrs	r4, r7
 8000d30:	ea4c 0505 	orr.w	r5, ip, r5
 8000d34:	e9c6 5400 	strd	r5, r4, [r6]
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e747      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f703 	lsr.w	r7, r0, r3
 8000d44:	4095      	lsls	r5, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d52:	4338      	orrs	r0, r7
 8000d54:	0c01      	lsrs	r1, r0, #16
 8000d56:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5a:	fa1f f885 	uxth.w	r8, r5
 8000d5e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d66:	fb07 f308 	mul.w	r3, r7, r8
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d70:	d907      	bls.n	8000d82 <__udivmoddi4+0x256>
 8000d72:	1869      	adds	r1, r5, r1
 8000d74:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d78:	d22f      	bcs.n	8000dda <__udivmoddi4+0x2ae>
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d92d      	bls.n	8000dda <__udivmoddi4+0x2ae>
 8000d7e:	3f02      	subs	r7, #2
 8000d80:	4429      	add	r1, r5
 8000d82:	1acb      	subs	r3, r1, r3
 8000d84:	b281      	uxth	r1, r0
 8000d86:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d92:	fb00 f308 	mul.w	r3, r0, r8
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x27e>
 8000d9a:	1869      	adds	r1, r5, r1
 8000d9c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da0:	d217      	bcs.n	8000dd2 <__udivmoddi4+0x2a6>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d915      	bls.n	8000dd2 <__udivmoddi4+0x2a6>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4429      	add	r1, r5
 8000daa:	1ac9      	subs	r1, r1, r3
 8000dac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db0:	e73b      	b.n	8000c2a <__udivmoddi4+0xfe>
 8000db2:	4637      	mov	r7, r6
 8000db4:	4630      	mov	r0, r6
 8000db6:	e709      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000db8:	4607      	mov	r7, r0
 8000dba:	e6e7      	b.n	8000b8c <__udivmoddi4+0x60>
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	e6fb      	b.n	8000bb8 <__udivmoddi4+0x8c>
 8000dc0:	4541      	cmp	r1, r8
 8000dc2:	d2ab      	bcs.n	8000d1c <__udivmoddi4+0x1f0>
 8000dc4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dc8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dcc:	3801      	subs	r0, #1
 8000dce:	4613      	mov	r3, r2
 8000dd0:	e7a4      	b.n	8000d1c <__udivmoddi4+0x1f0>
 8000dd2:	4660      	mov	r0, ip
 8000dd4:	e7e9      	b.n	8000daa <__udivmoddi4+0x27e>
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	e795      	b.n	8000d06 <__udivmoddi4+0x1da>
 8000dda:	4667      	mov	r7, ip
 8000ddc:	e7d1      	b.n	8000d82 <__udivmoddi4+0x256>
 8000dde:	4681      	mov	r9, r0
 8000de0:	e77c      	b.n	8000cdc <__udivmoddi4+0x1b0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	442c      	add	r4, r5
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0x14c>
 8000de8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dec:	442b      	add	r3, r5
 8000dee:	e72f      	b.n	8000c50 <__udivmoddi4+0x124>
 8000df0:	4638      	mov	r0, r7
 8000df2:	e708      	b.n	8000c06 <__udivmoddi4+0xda>
 8000df4:	4637      	mov	r7, r6
 8000df6:	e6e9      	b.n	8000bcc <__udivmoddi4+0xa0>

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <ESC_INIT>:
#if defined(DSHOT150) || defined(DSHOT300) || defined(DSHOT600) || defined(DSHOT1200)

#define __DSHOT_CONSUME_BIT(__DSHOT_BYTE__, __BIT__) (__DSHOT_BYTE__ = (((__BIT__ & 0b1) == 0b1) ? DSHOT_HIGH_BIT : DSHOT_LOW_BIT))

ESC_CONTROLLER* ESC_INIT(TIM_HandleTypeDef** dmaTickTimers, TIM_HandleTypeDef* pwmTimer, DMA_HandleTypeDef** dmaHandlers)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
	dmaTickTimers[0]->Instance->ARR = TIMER_ARR - 1; 	// htim4 ARR, synchronize timer that control DMA requests
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f240 1267 	movw	r2, #359	; 0x167
 8000e12:	62da      	str	r2, [r3, #44]	; 0x2c
	dmaTickTimers[1]->Instance->ARR = TIMER_ARR - 1; 	// htim5 ARR, synchronize timer that control DMA requests
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	3304      	adds	r3, #4
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f240 1267 	movw	r2, #359	; 0x167
 8000e20:	62da      	str	r2, [r3, #44]	; 0x2c
	pwmTimer->Instance->ARR = TIMER_ARR - 1;		 		// htim3 ARR, synchronize timer that control DMA requests
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f240 1267 	movw	r2, #359	; 0x167
 8000e2a:	62da      	str	r2, [r3, #44]	; 0x2c
	// Enable DMA requests on CH1 and CH2
	dmaTickTimers[0]->Instance->DIER = TIM_DIER_CC1DE | TIM_DIER_CC2DE | TIM_DIER_CC3DE;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 8000e36:	60da      	str	r2, [r3, #12]
	dmaTickTimers[1]->Instance->DIER = TIM_DIER_CC1DE | TIM_DIER_CC2DE;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	3304      	adds	r3, #4
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000e44:	60da      	str	r2, [r3, #12]
	HAL_TIM_PWM_Start(dmaTickTimers[0], TIM_CHANNEL_1);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f006 fdad 	bl	80079ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(dmaTickTimers[0], TIM_CHANNEL_2);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2104      	movs	r1, #4
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f006 fda7 	bl	80079ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(dmaTickTimers[0], TIM_CHANNEL_3);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2108      	movs	r1, #8
 8000e64:	4618      	mov	r0, r3
 8000e66:	f006 fda1 	bl	80079ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(dmaTickTimers[1], TIM_CHANNEL_2);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2104      	movs	r1, #4
 8000e72:	4618      	mov	r0, r3
 8000e74:	f006 fd9a 	bl	80079ac <HAL_TIM_PWM_Start>
	int bytes = sizeof(ESC_CONTROLLER)*ESC_COUNT;
 8000e78:	f44f 63ea 	mov.w	r3, #1872	; 0x750
 8000e7c:	61bb      	str	r3, [r7, #24]
	ESC_CONTROLLER* escSet = malloc(bytes);
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f009 f899 	bl	8009fb8 <malloc>
 8000e86:	4603      	mov	r3, r0
 8000e88:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < ESC_COUNT; i++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e8e:	e04f      	b.n	8000f30 <ESC_INIT+0x134>
	{
		escSet->Throttle[i] = 0;
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e94:	2100      	movs	r1, #0
 8000e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int j = 0; j < DSHOT_PACKET_SIZE; j++) escSet->ThrottleDshot[i][j] = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	623b      	str	r3, [r7, #32]
 8000e9e:	e00e      	b.n	8000ebe <ESC_INIT+0xc2>
 8000ea0:	6979      	ldr	r1, [r7, #20]
 8000ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	4413      	add	r3, r2
 8000eaa:	00db      	lsls	r3, r3, #3
 8000eac:	6a3a      	ldr	r2, [r7, #32]
 8000eae:	4413      	add	r3, r2
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000eb8:	6a3b      	ldr	r3, [r7, #32]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	623b      	str	r3, [r7, #32]
 8000ebe:	6a3b      	ldr	r3, [r7, #32]
 8000ec0:	2b17      	cmp	r3, #23
 8000ec2:	dded      	ble.n	8000ea0 <ESC_INIT+0xa4>
		escSet->Channel[i] = 4*i;
 8000ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	4619      	mov	r1, r3
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ece:	3264      	adds	r2, #100	; 0x64
 8000ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		escSet->SendingFlag = 0;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
		escSet->Timer[i] = pwmTimer;
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee0:	3368      	adds	r3, #104	; 0x68
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	4413      	add	r3, r2
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	605a      	str	r2, [r3, #4]
		escSet->DMA[i] = dmaHandlers[i];
 8000eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	6979      	ldr	r1, [r7, #20]
 8000ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef8:	336c      	adds	r3, #108	; 0x6c
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	440b      	add	r3, r1
 8000efe:	605a      	str	r2, [r3, #4]
 		escSet->CCR[i] = &(pwmTimer->Instance->CCR1) + i;
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8000f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	441a      	add	r2, r3
 8000f0e:	6979      	ldr	r1, [r7, #20]
 8000f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f12:	3370      	adds	r3, #112	; 0x70
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	440b      	add	r3, r1
 8000f18:	605a      	str	r2, [r3, #4]
		*escSet->CCR[i] = 0;
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1e:	3370      	adds	r3, #112	; 0x70
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < ESC_COUNT; i++)
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	ddac      	ble.n	8000e90 <ESC_INIT+0x94>
	}
	for (int i = 0; i < ESC_COUNT; i++)
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
 8000f3a:	e02f      	b.n	8000f9c <ESC_INIT+0x1a0>
	{
		HAL_TIM_PWM_Start(pwmTimer, escSet->Channel[i]);
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	69fa      	ldr	r2, [r7, #28]
 8000f40:	3264      	adds	r2, #100	; 0x64
 8000f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f46:	4619      	mov	r1, r3
 8000f48:	68b8      	ldr	r0, [r7, #8]
 8000f4a:	f006 fd2f 	bl	80079ac <HAL_TIM_PWM_Start>
		HAL_DMA_RegisterCallback(escSet->DMA[i], HAL_DMA_XFER_HALFCPLT_CB_ID, *DMA_XferCpltCallback);
 8000f4e:	697a      	ldr	r2, [r7, #20]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	336c      	adds	r3, #108	; 0x6c
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	4413      	add	r3, r2
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	4a14      	ldr	r2, [pc, #80]	; (8000fac <ESC_INIT+0x1b0>)
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f003 fbf8 	bl	8004754 <HAL_DMA_RegisterCallback>
		HAL_DMA_Start_IT(escSet->DMA[i], (uint32_t) &escSet->ThrottleDshot[i],
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	336c      	adds	r3, #108	; 0x6c
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	6858      	ldr	r0, [r3, #4]
 8000f70:	69fa      	ldr	r2, [r7, #28]
 8000f72:	4613      	mov	r3, r2
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	4413      	add	r3, r2
 8000f78:	015b      	lsls	r3, r3, #5
 8000f7a:	3310      	adds	r3, #16
 8000f7c:	697a      	ldr	r2, [r7, #20]
 8000f7e:	4413      	add	r3, r2
 8000f80:	4619      	mov	r1, r3
								(uint32_t) escSet->CCR[i], DSHOT_PACKET_SIZE);
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	3370      	adds	r3, #112	; 0x70
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4413      	add	r3, r2
 8000f8c:	685b      	ldr	r3, [r3, #4]
		HAL_DMA_Start_IT(escSet->DMA[i], (uint32_t) &escSet->ThrottleDshot[i],
 8000f8e:	461a      	mov	r2, r3
 8000f90:	2318      	movs	r3, #24
 8000f92:	f003 f9d3 	bl	800433c <HAL_DMA_Start_IT>
	for (int i = 0; i < ESC_COUNT; i++)
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	61fb      	str	r3, [r7, #28]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	2b03      	cmp	r3, #3
 8000fa0:	ddcc      	ble.n	8000f3c <ESC_INIT+0x140>
	}
	return escSet;
 8000fa2:	697b      	ldr	r3, [r7, #20]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3728      	adds	r7, #40	; 0x28
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	080023bd 	.word	0x080023bd

08000fb0 <makeDshotPacketBytes>:

uint16_t makeDshotPacketBytes(uint32_t value, uint8_t telemBit)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b087      	sub	sp, #28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	70fb      	strb	r3, [r7, #3]
	uint16_t packet = (value << 1) | telemBit;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	78fb      	ldrb	r3, [r7, #3]
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	817b      	strh	r3, [r7, #10]
	int csum = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
	int csumData = packet;
 8000fd0:	897b      	ldrh	r3, [r7, #10]
 8000fd2:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 3; i++)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	e009      	b.n	8000fee <makeDshotPacketBytes+0x3e>
	{
		csum ^= csumData; // xor data by nibbles
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4053      	eors	r3, r2
 8000fe0:	617b      	str	r3, [r7, #20]
		csumData >>= 4;
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	111b      	asrs	r3, r3, #4
 8000fe6:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 3; i++)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	3301      	adds	r3, #1
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	ddf2      	ble.n	8000fda <makeDshotPacketBytes+0x2a>
	}
	csum &= 0xf;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 8000ffc:	897b      	ldrh	r3, [r7, #10]
 8000ffe:	011b      	lsls	r3, r3, #4
 8001000:	b21a      	sxth	r2, r3
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	b21b      	sxth	r3, r3
 8001006:	4313      	orrs	r3, r2
 8001008:	b21b      	sxth	r3, r3
 800100a:	817b      	strh	r3, [r7, #10]
	return packet;
 800100c:	897b      	ldrh	r3, [r7, #10]
}
 800100e:	4618      	mov	r0, r3
 8001010:	371c      	adds	r7, #28
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <DSHOT_SEND_PACKET>:

void DSHOT_SEND_PACKET(ESC_CONTROLLER* escSet, uint32_t data, uint32_t telemBit, uint32_t motorNum)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b09e      	sub	sp, #120	; 0x78
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	603b      	str	r3, [r7, #0]
	uint16_t dshotBytes = makeDshotPacketBytes(data, telemBit);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	4619      	mov	r1, r3
 8001030:	68b8      	ldr	r0, [r7, #8]
 8001032:	f7ff ffbd 	bl	8000fb0 <makeDshotPacketBytes>
 8001036:	4603      	mov	r3, r0
 8001038:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	// 17th bit is to set CCR to 0 to keep it low between packets
	uint32_t dshotPacket[DSHOT_PACKET_SIZE] = {0};
 800103c:	f107 0310 	add.w	r3, r7, #16
 8001040:	2260      	movs	r2, #96	; 0x60
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f008 ffca 	bl	8009fde <memset>
	// Populate checksum bits
	for (int i = 18; i >= 3; i--)
 800104a:	2312      	movs	r3, #18
 800104c:	673b      	str	r3, [r7, #112]	; 0x70
 800104e:	e018      	b.n	8001082 <DSHOT_SEND_PACKET+0x66>
	{
		__DSHOT_CONSUME_BIT(dshotPacket[i], dshotBytes);
 8001050:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	2b00      	cmp	r3, #0
 800105a:	d002      	beq.n	8001062 <DSHOT_SEND_PACKET+0x46>
 800105c:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001060:	e000      	b.n	8001064 <DSHOT_SEND_PACKET+0x48>
 8001062:	2287      	movs	r2, #135	; 0x87
 8001064:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800106c:	440b      	add	r3, r1
 800106e:	f843 2c68 	str.w	r2, [r3, #-104]
		dshotBytes >>= 1;
 8001072:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001076:	085b      	lsrs	r3, r3, #1
 8001078:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	for (int i = 18; i >= 3; i--)
 800107c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800107e:	3b01      	subs	r3, #1
 8001080:	673b      	str	r3, [r7, #112]	; 0x70
 8001082:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001084:	2b02      	cmp	r3, #2
 8001086:	dce3      	bgt.n	8001050 <DSHOT_SEND_PACKET+0x34>
	}
	escSet->SendingFlag = 1;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2201      	movs	r2, #1
 800108c:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
	switch(motorNum) {
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	2b08      	cmp	r3, #8
 8001094:	f200 8474 	bhi.w	8001980 <DSHOT_SEND_PACKET+0x964>
 8001098:	a201      	add	r2, pc, #4	; (adr r2, 80010a0 <DSHOT_SEND_PACKET+0x84>)
 800109a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800109e:	bf00      	nop
 80010a0:	080010c5 	.word	0x080010c5
 80010a4:	0800114b 	.word	0x0800114b
 80010a8:	080011d7 	.word	0x080011d7
 80010ac:	08001263 	.word	0x08001263
 80010b0:	080012e9 	.word	0x080012e9
 80010b4:	0800140b 	.word	0x0800140b
 80010b8:	0800151b 	.word	0x0800151b
 80010bc:	0800163f 	.word	0x0800163f
 80010c0:	0800174f 	.word	0x0800174f
		case (FRONT_LEFT_MOTOR):
			memcpy(escSet->ThrottleDshot[0], dshotPacket, sizeof(dshotPacket));
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	3310      	adds	r3, #16
 80010c8:	f107 0110 	add.w	r1, r7, #16
 80010cc:	2260      	movs	r2, #96	; 0x60
 80010ce:	4618      	mov	r0, r3
 80010d0:	f008 ff7a 	bl	8009fc8 <memcpy>
			__HAL_DMA_CLEAR_FLAG(escSet->DMA[0], DMA_FLAG_TCIF0_4 | DMA_FLAG_HTIF0_4 | DMA_FLAG_FEIF0_4);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	4ba2      	ldr	r3, [pc, #648]	; (8001368 <DSHOT_SEND_PACKET+0x34c>)
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d903      	bls.n	80010ec <DSHOT_SEND_PACKET+0xd0>
 80010e4:	4ba1      	ldr	r3, [pc, #644]	; (800136c <DSHOT_SEND_PACKET+0x350>)
 80010e6:	2231      	movs	r2, #49	; 0x31
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	e01a      	b.n	8001122 <DSHOT_SEND_PACKET+0x106>
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b9e      	ldr	r3, [pc, #632]	; (8001370 <DSHOT_SEND_PACKET+0x354>)
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d903      	bls.n	8001104 <DSHOT_SEND_PACKET+0xe8>
 80010fc:	4b9b      	ldr	r3, [pc, #620]	; (800136c <DSHOT_SEND_PACKET+0x350>)
 80010fe:	2231      	movs	r2, #49	; 0x31
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	e00e      	b.n	8001122 <DSHOT_SEND_PACKET+0x106>
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	461a      	mov	r2, r3
 800110e:	4b99      	ldr	r3, [pc, #612]	; (8001374 <DSHOT_SEND_PACKET+0x358>)
 8001110:	429a      	cmp	r2, r3
 8001112:	d903      	bls.n	800111c <DSHOT_SEND_PACKET+0x100>
 8001114:	4b98      	ldr	r3, [pc, #608]	; (8001378 <DSHOT_SEND_PACKET+0x35c>)
 8001116:	2231      	movs	r2, #49	; 0x31
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	e002      	b.n	8001122 <DSHOT_SEND_PACKET+0x106>
 800111c:	4b96      	ldr	r3, [pc, #600]	; (8001378 <DSHOT_SEND_PACKET+0x35c>)
 800111e:	2231      	movs	r2, #49	; 0x31
 8001120:	609a      	str	r2, [r3, #8]
			escSet->DMA[0]->Instance->NDTR = DSHOT_PACKET_SIZE;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2218      	movs	r2, #24
 800112c:	605a      	str	r2, [r3, #4]
			__HAL_DMA_ENABLE(escSet->DMA[0]);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f042 0201 	orr.w	r2, r2, #1
 8001144:	601a      	str	r2, [r3, #0]
			break;
 8001146:	f000 bc1b 	b.w	8001980 <DSHOT_SEND_PACKET+0x964>
		case (FRONT_RIGHT_MOTOR):
			memcpy(escSet->ThrottleDshot[1], dshotPacket, sizeof(dshotPacket));
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	3370      	adds	r3, #112	; 0x70
 800114e:	f107 0110 	add.w	r1, r7, #16
 8001152:	2260      	movs	r2, #96	; 0x60
 8001154:	4618      	mov	r0, r3
 8001156:	f008 ff37 	bl	8009fc8 <memcpy>
			__HAL_DMA_CLEAR_FLAG(escSet->DMA[1], DMA_FLAG_TCIF3_7 | DMA_FLAG_HTIF3_7 | DMA_FLAG_FEIF3_7);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	461a      	mov	r2, r3
 8001164:	4b80      	ldr	r3, [pc, #512]	; (8001368 <DSHOT_SEND_PACKET+0x34c>)
 8001166:	429a      	cmp	r2, r3
 8001168:	d904      	bls.n	8001174 <DSHOT_SEND_PACKET+0x158>
 800116a:	4b80      	ldr	r3, [pc, #512]	; (800136c <DSHOT_SEND_PACKET+0x350>)
 800116c:	f04f 6244 	mov.w	r2, #205520896	; 0xc400000
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	e01d      	b.n	80011b0 <DSHOT_SEND_PACKET+0x194>
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	461a      	mov	r2, r3
 800117e:	4b7c      	ldr	r3, [pc, #496]	; (8001370 <DSHOT_SEND_PACKET+0x354>)
 8001180:	429a      	cmp	r2, r3
 8001182:	d904      	bls.n	800118e <DSHOT_SEND_PACKET+0x172>
 8001184:	4b79      	ldr	r3, [pc, #484]	; (800136c <DSHOT_SEND_PACKET+0x350>)
 8001186:	f04f 6244 	mov.w	r2, #205520896	; 0xc400000
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	e010      	b.n	80011b0 <DSHOT_SEND_PACKET+0x194>
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	4b76      	ldr	r3, [pc, #472]	; (8001374 <DSHOT_SEND_PACKET+0x358>)
 800119a:	429a      	cmp	r2, r3
 800119c:	d904      	bls.n	80011a8 <DSHOT_SEND_PACKET+0x18c>
 800119e:	4b76      	ldr	r3, [pc, #472]	; (8001378 <DSHOT_SEND_PACKET+0x35c>)
 80011a0:	f04f 6244 	mov.w	r2, #205520896	; 0xc400000
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	e003      	b.n	80011b0 <DSHOT_SEND_PACKET+0x194>
 80011a8:	4b73      	ldr	r3, [pc, #460]	; (8001378 <DSHOT_SEND_PACKET+0x35c>)
 80011aa:	f04f 6244 	mov.w	r2, #205520896	; 0xc400000
 80011ae:	609a      	str	r2, [r3, #8]
			escSet->DMA[1]->Instance->NDTR = DSHOT_PACKET_SIZE;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2218      	movs	r2, #24
 80011ba:	605a      	str	r2, [r3, #4]
			__HAL_DMA_ENABLE(escSet->DMA[1]);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f042 0201 	orr.w	r2, r2, #1
 80011d2:	601a      	str	r2, [r3, #0]
			break;
 80011d4:	e3d4      	b.n	8001980 <DSHOT_SEND_PACKET+0x964>
		case (BACK_LEFT_MOTOR):
			memcpy(escSet->ThrottleDshot[2], dshotPacket, sizeof(dshotPacket));
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	33d0      	adds	r3, #208	; 0xd0
 80011da:	f107 0110 	add.w	r1, r7, #16
 80011de:	2260      	movs	r2, #96	; 0x60
 80011e0:	4618      	mov	r0, r3
 80011e2:	f008 fef1 	bl	8009fc8 <memcpy>
			__HAL_DMA_CLEAR_FLAG(escSet->DMA[2], DMA_FLAG_TCIF3_7 | DMA_FLAG_HTIF3_7 | DMA_FLAG_FEIF3_7);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b5d      	ldr	r3, [pc, #372]	; (8001368 <DSHOT_SEND_PACKET+0x34c>)
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d904      	bls.n	8001200 <DSHOT_SEND_PACKET+0x1e4>
 80011f6:	4b5d      	ldr	r3, [pc, #372]	; (800136c <DSHOT_SEND_PACKET+0x350>)
 80011f8:	f04f 6244 	mov.w	r2, #205520896	; 0xc400000
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	e01d      	b.n	800123c <DSHOT_SEND_PACKET+0x220>
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	461a      	mov	r2, r3
 800120a:	4b59      	ldr	r3, [pc, #356]	; (8001370 <DSHOT_SEND_PACKET+0x354>)
 800120c:	429a      	cmp	r2, r3
 800120e:	d904      	bls.n	800121a <DSHOT_SEND_PACKET+0x1fe>
 8001210:	4b56      	ldr	r3, [pc, #344]	; (800136c <DSHOT_SEND_PACKET+0x350>)
 8001212:	f04f 6244 	mov.w	r2, #205520896	; 0xc400000
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	e010      	b.n	800123c <DSHOT_SEND_PACKET+0x220>
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	4b53      	ldr	r3, [pc, #332]	; (8001374 <DSHOT_SEND_PACKET+0x358>)
 8001226:	429a      	cmp	r2, r3
 8001228:	d904      	bls.n	8001234 <DSHOT_SEND_PACKET+0x218>
 800122a:	4b53      	ldr	r3, [pc, #332]	; (8001378 <DSHOT_SEND_PACKET+0x35c>)
 800122c:	f04f 6244 	mov.w	r2, #205520896	; 0xc400000
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	e003      	b.n	800123c <DSHOT_SEND_PACKET+0x220>
 8001234:	4b50      	ldr	r3, [pc, #320]	; (8001378 <DSHOT_SEND_PACKET+0x35c>)
 8001236:	f04f 6244 	mov.w	r2, #205520896	; 0xc400000
 800123a:	609a      	str	r2, [r3, #8]
			escSet->DMA[2]->Instance->NDTR = DSHOT_PACKET_SIZE;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2218      	movs	r2, #24
 8001246:	605a      	str	r2, [r3, #4]
			__HAL_DMA_ENABLE(escSet->DMA[2]);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0201 	orr.w	r2, r2, #1
 800125e:	601a      	str	r2, [r3, #0]
			break;
 8001260:	e38e      	b.n	8001980 <DSHOT_SEND_PACKET+0x964>
		case (BACK_RIGHT_MOTOR):
			memcpy(escSet->ThrottleDshot[3], dshotPacket, sizeof(dshotPacket));
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8001268:	f107 0110 	add.w	r1, r7, #16
 800126c:	2260      	movs	r2, #96	; 0x60
 800126e:	4618      	mov	r0, r3
 8001270:	f008 feaa 	bl	8009fc8 <memcpy>
			escSet->DMA[3]->Instance->NDTR = DSHOT_PACKET_SIZE;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2218      	movs	r2, #24
 800127e:	605a      	str	r2, [r3, #4]
			__HAL_DMA_CLEAR_FLAG(escSet->DMA[3], DMA_FLAG_TCIF0_4 | DMA_FLAG_HTIF0_4 | DMA_FLAG_FEIF0_4);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	4b37      	ldr	r3, [pc, #220]	; (8001368 <DSHOT_SEND_PACKET+0x34c>)
 800128c:	429a      	cmp	r2, r3
 800128e:	d903      	bls.n	8001298 <DSHOT_SEND_PACKET+0x27c>
 8001290:	4b36      	ldr	r3, [pc, #216]	; (800136c <DSHOT_SEND_PACKET+0x350>)
 8001292:	2231      	movs	r2, #49	; 0x31
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	e01a      	b.n	80012ce <DSHOT_SEND_PACKET+0x2b2>
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b33      	ldr	r3, [pc, #204]	; (8001370 <DSHOT_SEND_PACKET+0x354>)
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d903      	bls.n	80012b0 <DSHOT_SEND_PACKET+0x294>
 80012a8:	4b30      	ldr	r3, [pc, #192]	; (800136c <DSHOT_SEND_PACKET+0x350>)
 80012aa:	2231      	movs	r2, #49	; 0x31
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	e00e      	b.n	80012ce <DSHOT_SEND_PACKET+0x2b2>
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b2e      	ldr	r3, [pc, #184]	; (8001374 <DSHOT_SEND_PACKET+0x358>)
 80012bc:	429a      	cmp	r2, r3
 80012be:	d903      	bls.n	80012c8 <DSHOT_SEND_PACKET+0x2ac>
 80012c0:	4b2d      	ldr	r3, [pc, #180]	; (8001378 <DSHOT_SEND_PACKET+0x35c>)
 80012c2:	2231      	movs	r2, #49	; 0x31
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	e002      	b.n	80012ce <DSHOT_SEND_PACKET+0x2b2>
 80012c8:	4b2b      	ldr	r3, [pc, #172]	; (8001378 <DSHOT_SEND_PACKET+0x35c>)
 80012ca:	2231      	movs	r2, #49	; 0x31
 80012cc:	609a      	str	r2, [r3, #8]
			__HAL_DMA_ENABLE(escSet->DMA[3]);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f042 0201 	orr.w	r2, r2, #1
 80012e4:	601a      	str	r2, [r3, #0]
			break;
 80012e6:	e34b      	b.n	8001980 <DSHOT_SEND_PACKET+0x964>
		case (LEFT_SIDE_MOTORS):
			memcpy(escSet->ThrottleDshot[0], dshotPacket, sizeof(dshotPacket));
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	3310      	adds	r3, #16
 80012ec:	f107 0110 	add.w	r1, r7, #16
 80012f0:	2260      	movs	r2, #96	; 0x60
 80012f2:	4618      	mov	r0, r3
 80012f4:	f008 fe68 	bl	8009fc8 <memcpy>
			memcpy(escSet->ThrottleDshot[2], dshotPacket, sizeof(dshotPacket));
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	33d0      	adds	r3, #208	; 0xd0
 80012fc:	f107 0110 	add.w	r1, r7, #16
 8001300:	2260      	movs	r2, #96	; 0x60
 8001302:	4618      	mov	r0, r3
 8001304:	f008 fe60 	bl	8009fc8 <memcpy>
			escSet->DMA[0]->Instance->NDTR = DSHOT_PACKET_SIZE;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2218      	movs	r2, #24
 8001312:	605a      	str	r2, [r3, #4]
			escSet->DMA[2]->Instance->NDTR = DSHOT_PACKET_SIZE;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2218      	movs	r2, #24
 800131e:	605a      	str	r2, [r3, #4]
			__HAL_DMA_CLEAR_FLAG(escSet->DMA[0], DMA_FLAG_TCIF0_4 | DMA_FLAG_HTIF0_4 | DMA_FLAG_FEIF0_4);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <DSHOT_SEND_PACKET+0x34c>)
 800132c:	429a      	cmp	r2, r3
 800132e:	d903      	bls.n	8001338 <DSHOT_SEND_PACKET+0x31c>
 8001330:	4b0e      	ldr	r3, [pc, #56]	; (800136c <DSHOT_SEND_PACKET+0x350>)
 8001332:	2231      	movs	r2, #49	; 0x31
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	e024      	b.n	8001382 <DSHOT_SEND_PACKET+0x366>
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <DSHOT_SEND_PACKET+0x354>)
 8001344:	429a      	cmp	r2, r3
 8001346:	d903      	bls.n	8001350 <DSHOT_SEND_PACKET+0x334>
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <DSHOT_SEND_PACKET+0x350>)
 800134a:	2231      	movs	r2, #49	; 0x31
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	e018      	b.n	8001382 <DSHOT_SEND_PACKET+0x366>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <DSHOT_SEND_PACKET+0x358>)
 800135c:	429a      	cmp	r2, r3
 800135e:	d90d      	bls.n	800137c <DSHOT_SEND_PACKET+0x360>
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <DSHOT_SEND_PACKET+0x35c>)
 8001362:	2231      	movs	r2, #49	; 0x31
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	e00c      	b.n	8001382 <DSHOT_SEND_PACKET+0x366>
 8001368:	40026458 	.word	0x40026458
 800136c:	40026400 	.word	0x40026400
 8001370:	400260b8 	.word	0x400260b8
 8001374:	40026058 	.word	0x40026058
 8001378:	40026000 	.word	0x40026000
 800137c:	4b9c      	ldr	r3, [pc, #624]	; (80015f0 <DSHOT_SEND_PACKET+0x5d4>)
 800137e:	2231      	movs	r2, #49	; 0x31
 8001380:	609a      	str	r2, [r3, #8]
			__HAL_DMA_CLEAR_FLAG(escSet->DMA[2], DMA_FLAG_TCIF3_7 | DMA_FLAG_HTIF3_7 | DMA_FLAG_FEIF3_7);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	461a      	mov	r2, r3
 800138c:	4b99      	ldr	r3, [pc, #612]	; (80015f4 <DSHOT_SEND_PACKET+0x5d8>)
 800138e:	429a      	cmp	r2, r3
 8001390:	d904      	bls.n	800139c <DSHOT_SEND_PACKET+0x380>
 8001392:	4b99      	ldr	r3, [pc, #612]	; (80015f8 <DSHOT_SEND_PACKET+0x5dc>)
 8001394:	f04f 6244 	mov.w	r2, #205520896	; 0xc400000
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	e01d      	b.n	80013d8 <DSHOT_SEND_PACKET+0x3bc>
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b95      	ldr	r3, [pc, #596]	; (80015fc <DSHOT_SEND_PACKET+0x5e0>)
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d904      	bls.n	80013b6 <DSHOT_SEND_PACKET+0x39a>
 80013ac:	4b92      	ldr	r3, [pc, #584]	; (80015f8 <DSHOT_SEND_PACKET+0x5dc>)
 80013ae:	f04f 6244 	mov.w	r2, #205520896	; 0xc400000
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	e010      	b.n	80013d8 <DSHOT_SEND_PACKET+0x3bc>
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	4b8f      	ldr	r3, [pc, #572]	; (8001600 <DSHOT_SEND_PACKET+0x5e4>)
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d904      	bls.n	80013d0 <DSHOT_SEND_PACKET+0x3b4>
 80013c6:	4b8a      	ldr	r3, [pc, #552]	; (80015f0 <DSHOT_SEND_PACKET+0x5d4>)
 80013c8:	f04f 6244 	mov.w	r2, #205520896	; 0xc400000
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	e003      	b.n	80013d8 <DSHOT_SEND_PACKET+0x3bc>
 80013d0:	4b87      	ldr	r3, [pc, #540]	; (80015f0 <DSHOT_SEND_PACKET+0x5d4>)
 80013d2:	f04f 6244 	mov.w	r2, #205520896	; 0xc400000
 80013d6:	609a      	str	r2, [r3, #8]
			__HAL_DMA_ENABLE(escSet->DMA[0]);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f042 0201 	orr.w	r2, r2, #1
 80013ee:	601a      	str	r2, [r3, #0]
			__HAL_DMA_ENABLE(escSet->DMA[2]);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f042 0201 	orr.w	r2, r2, #1
 8001406:	601a      	str	r2, [r3, #0]
			break;
 8001408:	e2ba      	b.n	8001980 <DSHOT_SEND_PACKET+0x964>
		case (RIGHT_SIDE_MOTORS):
			memcpy(escSet->ThrottleDshot[1], dshotPacket, sizeof(dshotPacket));
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	3370      	adds	r3, #112	; 0x70
 800140e:	f107 0110 	add.w	r1, r7, #16
 8001412:	2260      	movs	r2, #96	; 0x60
 8001414:	4618      	mov	r0, r3
 8001416:	f008 fdd7 	bl	8009fc8 <memcpy>
			memcpy(escSet->ThrottleDshot[3], dshotPacket, sizeof(dshotPacket));
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8001420:	f107 0110 	add.w	r1, r7, #16
 8001424:	2260      	movs	r2, #96	; 0x60
 8001426:	4618      	mov	r0, r3
 8001428:	f008 fdce 	bl	8009fc8 <memcpy>
			escSet->DMA[1]->Instance->NDTR = DSHOT_PACKET_SIZE;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2218      	movs	r2, #24
 8001436:	605a      	str	r2, [r3, #4]
			escSet->DMA[3]->Instance->NDTR = DSHOT_PACKET_SIZE;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2218      	movs	r2, #24
 8001442:	605a      	str	r2, [r3, #4]
			__HAL_DMA_CLEAR_FLAG(escSet->DMA[1], DMA_FLAG_TCIF3_7 | DMA_FLAG_HTIF3_7) | DMA_FLAG_FEIF3_7;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	461a      	mov	r2, r3
 800144e:	4b69      	ldr	r3, [pc, #420]	; (80015f4 <DSHOT_SEND_PACKET+0x5d8>)
 8001450:	429a      	cmp	r2, r3
 8001452:	d904      	bls.n	800145e <DSHOT_SEND_PACKET+0x442>
 8001454:	4b68      	ldr	r3, [pc, #416]	; (80015f8 <DSHOT_SEND_PACKET+0x5dc>)
 8001456:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	e01d      	b.n	800149a <DSHOT_SEND_PACKET+0x47e>
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	4b64      	ldr	r3, [pc, #400]	; (80015fc <DSHOT_SEND_PACKET+0x5e0>)
 800146a:	429a      	cmp	r2, r3
 800146c:	d904      	bls.n	8001478 <DSHOT_SEND_PACKET+0x45c>
 800146e:	4b62      	ldr	r3, [pc, #392]	; (80015f8 <DSHOT_SEND_PACKET+0x5dc>)
 8001470:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	e010      	b.n	800149a <DSHOT_SEND_PACKET+0x47e>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	461a      	mov	r2, r3
 8001482:	4b5f      	ldr	r3, [pc, #380]	; (8001600 <DSHOT_SEND_PACKET+0x5e4>)
 8001484:	429a      	cmp	r2, r3
 8001486:	d904      	bls.n	8001492 <DSHOT_SEND_PACKET+0x476>
 8001488:	4b59      	ldr	r3, [pc, #356]	; (80015f0 <DSHOT_SEND_PACKET+0x5d4>)
 800148a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800148e:	60da      	str	r2, [r3, #12]
 8001490:	e003      	b.n	800149a <DSHOT_SEND_PACKET+0x47e>
 8001492:	4b57      	ldr	r3, [pc, #348]	; (80015f0 <DSHOT_SEND_PACKET+0x5d4>)
 8001494:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001498:	609a      	str	r2, [r3, #8]
			__HAL_DMA_CLEAR_FLAG(escSet->DMA[3], DMA_FLAG_TCIF0_4 | DMA_FLAG_HTIF0_4 | DMA_FLAG_FEIF0_4);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b53      	ldr	r3, [pc, #332]	; (80015f4 <DSHOT_SEND_PACKET+0x5d8>)
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d903      	bls.n	80014b2 <DSHOT_SEND_PACKET+0x496>
 80014aa:	4b53      	ldr	r3, [pc, #332]	; (80015f8 <DSHOT_SEND_PACKET+0x5dc>)
 80014ac:	2231      	movs	r2, #49	; 0x31
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	e01a      	b.n	80014e8 <DSHOT_SEND_PACKET+0x4cc>
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	4b4f      	ldr	r3, [pc, #316]	; (80015fc <DSHOT_SEND_PACKET+0x5e0>)
 80014be:	429a      	cmp	r2, r3
 80014c0:	d903      	bls.n	80014ca <DSHOT_SEND_PACKET+0x4ae>
 80014c2:	4b4d      	ldr	r3, [pc, #308]	; (80015f8 <DSHOT_SEND_PACKET+0x5dc>)
 80014c4:	2231      	movs	r2, #49	; 0x31
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	e00e      	b.n	80014e8 <DSHOT_SEND_PACKET+0x4cc>
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	4b4a      	ldr	r3, [pc, #296]	; (8001600 <DSHOT_SEND_PACKET+0x5e4>)
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d903      	bls.n	80014e2 <DSHOT_SEND_PACKET+0x4c6>
 80014da:	4b45      	ldr	r3, [pc, #276]	; (80015f0 <DSHOT_SEND_PACKET+0x5d4>)
 80014dc:	2231      	movs	r2, #49	; 0x31
 80014de:	60da      	str	r2, [r3, #12]
 80014e0:	e002      	b.n	80014e8 <DSHOT_SEND_PACKET+0x4cc>
 80014e2:	4b43      	ldr	r3, [pc, #268]	; (80015f0 <DSHOT_SEND_PACKET+0x5d4>)
 80014e4:	2231      	movs	r2, #49	; 0x31
 80014e6:	609a      	str	r2, [r3, #8]
			__HAL_DMA_ENABLE(escSet->DMA[1]);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 0201 	orr.w	r2, r2, #1
 80014fe:	601a      	str	r2, [r3, #0]
			__HAL_DMA_ENABLE(escSet->DMA[3]);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f042 0201 	orr.w	r2, r2, #1
 8001516:	601a      	str	r2, [r3, #0]
			break;
 8001518:	e232      	b.n	8001980 <DSHOT_SEND_PACKET+0x964>
		case (FRONT_SIDE_MOTORS):
			memcpy(escSet->ThrottleDshot[0], dshotPacket, sizeof(dshotPacket));
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	3310      	adds	r3, #16
 800151e:	f107 0110 	add.w	r1, r7, #16
 8001522:	2260      	movs	r2, #96	; 0x60
 8001524:	4618      	mov	r0, r3
 8001526:	f008 fd4f 	bl	8009fc8 <memcpy>
			memcpy(escSet->ThrottleDshot[1], dshotPacket, sizeof(dshotPacket));
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	3370      	adds	r3, #112	; 0x70
 800152e:	f107 0110 	add.w	r1, r7, #16
 8001532:	2260      	movs	r2, #96	; 0x60
 8001534:	4618      	mov	r0, r3
 8001536:	f008 fd47 	bl	8009fc8 <memcpy>
			escSet->DMA[0]->Instance->NDTR = DSHOT_PACKET_SIZE;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2218      	movs	r2, #24
 8001544:	605a      	str	r2, [r3, #4]
			escSet->DMA[1]->Instance->NDTR = DSHOT_PACKET_SIZE;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2218      	movs	r2, #24
 8001550:	605a      	str	r2, [r3, #4]
			__HAL_DMA_CLEAR_FLAG(escSet->DMA[0], DMA_FLAG_TCIF0_4 | DMA_FLAG_HTIF0_4 | DMA_FLAG_FEIF0_4);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	4b25      	ldr	r3, [pc, #148]	; (80015f4 <DSHOT_SEND_PACKET+0x5d8>)
 800155e:	429a      	cmp	r2, r3
 8001560:	d903      	bls.n	800156a <DSHOT_SEND_PACKET+0x54e>
 8001562:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <DSHOT_SEND_PACKET+0x5dc>)
 8001564:	2231      	movs	r2, #49	; 0x31
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	e01a      	b.n	80015a0 <DSHOT_SEND_PACKET+0x584>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	461a      	mov	r2, r3
 8001574:	4b21      	ldr	r3, [pc, #132]	; (80015fc <DSHOT_SEND_PACKET+0x5e0>)
 8001576:	429a      	cmp	r2, r3
 8001578:	d903      	bls.n	8001582 <DSHOT_SEND_PACKET+0x566>
 800157a:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <DSHOT_SEND_PACKET+0x5dc>)
 800157c:	2231      	movs	r2, #49	; 0x31
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	e00e      	b.n	80015a0 <DSHOT_SEND_PACKET+0x584>
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <DSHOT_SEND_PACKET+0x5e4>)
 800158e:	429a      	cmp	r2, r3
 8001590:	d903      	bls.n	800159a <DSHOT_SEND_PACKET+0x57e>
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <DSHOT_SEND_PACKET+0x5d4>)
 8001594:	2231      	movs	r2, #49	; 0x31
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	e002      	b.n	80015a0 <DSHOT_SEND_PACKET+0x584>
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <DSHOT_SEND_PACKET+0x5d4>)
 800159c:	2231      	movs	r2, #49	; 0x31
 800159e:	609a      	str	r2, [r3, #8]
			__HAL_DMA_CLEAR_FLAG(escSet->DMA[1], DMA_FLAG_TCIF3_7 | DMA_FLAG_HTIF3_7 | DMA_FLAG_FEIF3_7);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <DSHOT_SEND_PACKET+0x5d8>)
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d904      	bls.n	80015ba <DSHOT_SEND_PACKET+0x59e>
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <DSHOT_SEND_PACKET+0x5dc>)
 80015b2:	f04f 6244 	mov.w	r2, #205520896	; 0xc400000
 80015b6:	60da      	str	r2, [r3, #12]
 80015b8:	e028      	b.n	800160c <DSHOT_SEND_PACKET+0x5f0>
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <DSHOT_SEND_PACKET+0x5e0>)
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d904      	bls.n	80015d4 <DSHOT_SEND_PACKET+0x5b8>
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <DSHOT_SEND_PACKET+0x5dc>)
 80015cc:	f04f 6244 	mov.w	r2, #205520896	; 0xc400000
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	e01b      	b.n	800160c <DSHOT_SEND_PACKET+0x5f0>
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	4b08      	ldr	r3, [pc, #32]	; (8001600 <DSHOT_SEND_PACKET+0x5e4>)
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d90f      	bls.n	8001604 <DSHOT_SEND_PACKET+0x5e8>
 80015e4:	4b02      	ldr	r3, [pc, #8]	; (80015f0 <DSHOT_SEND_PACKET+0x5d4>)
 80015e6:	f04f 6244 	mov.w	r2, #205520896	; 0xc400000
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	e00e      	b.n	800160c <DSHOT_SEND_PACKET+0x5f0>
 80015ee:	bf00      	nop
 80015f0:	40026000 	.word	0x40026000
 80015f4:	40026458 	.word	0x40026458
 80015f8:	40026400 	.word	0x40026400
 80015fc:	400260b8 	.word	0x400260b8
 8001600:	40026058 	.word	0x40026058
 8001604:	4bab      	ldr	r3, [pc, #684]	; (80018b4 <DSHOT_SEND_PACKET+0x898>)
 8001606:	f04f 6244 	mov.w	r2, #205520896	; 0xc400000
 800160a:	609a      	str	r2, [r3, #8]
			__HAL_DMA_ENABLE(escSet->DMA[0]);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f042 0201 	orr.w	r2, r2, #1
 8001622:	601a      	str	r2, [r3, #0]
			__HAL_DMA_ENABLE(escSet->DMA[1]);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 0201 	orr.w	r2, r2, #1
 800163a:	601a      	str	r2, [r3, #0]
			break;
 800163c:	e1a0      	b.n	8001980 <DSHOT_SEND_PACKET+0x964>
		case (BACK_SIDE_MOTORS):
			memcpy(escSet->ThrottleDshot[2], dshotPacket, sizeof(dshotPacket));
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	33d0      	adds	r3, #208	; 0xd0
 8001642:	f107 0110 	add.w	r1, r7, #16
 8001646:	2260      	movs	r2, #96	; 0x60
 8001648:	4618      	mov	r0, r3
 800164a:	f008 fcbd 	bl	8009fc8 <memcpy>
			memcpy(escSet->ThrottleDshot[3], dshotPacket, sizeof(dshotPacket));
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8001654:	f107 0110 	add.w	r1, r7, #16
 8001658:	2260      	movs	r2, #96	; 0x60
 800165a:	4618      	mov	r0, r3
 800165c:	f008 fcb4 	bl	8009fc8 <memcpy>
			escSet->DMA[2]->Instance->NDTR = DSHOT_PACKET_SIZE;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2218      	movs	r2, #24
 800166a:	605a      	str	r2, [r3, #4]
			escSet->DMA[3]->Instance->NDTR = DSHOT_PACKET_SIZE;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2218      	movs	r2, #24
 8001676:	605a      	str	r2, [r3, #4]
			__HAL_DMA_CLEAR_FLAG(escSet->DMA[2], DMA_FLAG_TCIF3_7 | DMA_FLAG_HTIF3_7 | DMA_FLAG_FEIF3_7);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	4b8d      	ldr	r3, [pc, #564]	; (80018b8 <DSHOT_SEND_PACKET+0x89c>)
 8001684:	429a      	cmp	r2, r3
 8001686:	d904      	bls.n	8001692 <DSHOT_SEND_PACKET+0x676>
 8001688:	4b8c      	ldr	r3, [pc, #560]	; (80018bc <DSHOT_SEND_PACKET+0x8a0>)
 800168a:	f04f 6244 	mov.w	r2, #205520896	; 0xc400000
 800168e:	60da      	str	r2, [r3, #12]
 8001690:	e01d      	b.n	80016ce <DSHOT_SEND_PACKET+0x6b2>
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	4b88      	ldr	r3, [pc, #544]	; (80018c0 <DSHOT_SEND_PACKET+0x8a4>)
 800169e:	429a      	cmp	r2, r3
 80016a0:	d904      	bls.n	80016ac <DSHOT_SEND_PACKET+0x690>
 80016a2:	4b86      	ldr	r3, [pc, #536]	; (80018bc <DSHOT_SEND_PACKET+0x8a0>)
 80016a4:	f04f 6244 	mov.w	r2, #205520896	; 0xc400000
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	e010      	b.n	80016ce <DSHOT_SEND_PACKET+0x6b2>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b83      	ldr	r3, [pc, #524]	; (80018c4 <DSHOT_SEND_PACKET+0x8a8>)
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d904      	bls.n	80016c6 <DSHOT_SEND_PACKET+0x6aa>
 80016bc:	4b7d      	ldr	r3, [pc, #500]	; (80018b4 <DSHOT_SEND_PACKET+0x898>)
 80016be:	f04f 6244 	mov.w	r2, #205520896	; 0xc400000
 80016c2:	60da      	str	r2, [r3, #12]
 80016c4:	e003      	b.n	80016ce <DSHOT_SEND_PACKET+0x6b2>
 80016c6:	4b7b      	ldr	r3, [pc, #492]	; (80018b4 <DSHOT_SEND_PACKET+0x898>)
 80016c8:	f04f 6244 	mov.w	r2, #205520896	; 0xc400000
 80016cc:	609a      	str	r2, [r3, #8]
			__HAL_DMA_CLEAR_FLAG(escSet->DMA[3], DMA_FLAG_TCIF0_4 | DMA_FLAG_HTIF0_4 | DMA_FLAG_FEIF0_4);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b77      	ldr	r3, [pc, #476]	; (80018b8 <DSHOT_SEND_PACKET+0x89c>)
 80016da:	429a      	cmp	r2, r3
 80016dc:	d903      	bls.n	80016e6 <DSHOT_SEND_PACKET+0x6ca>
 80016de:	4b77      	ldr	r3, [pc, #476]	; (80018bc <DSHOT_SEND_PACKET+0x8a0>)
 80016e0:	2231      	movs	r2, #49	; 0x31
 80016e2:	60da      	str	r2, [r3, #12]
 80016e4:	e01a      	b.n	800171c <DSHOT_SEND_PACKET+0x700>
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b73      	ldr	r3, [pc, #460]	; (80018c0 <DSHOT_SEND_PACKET+0x8a4>)
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d903      	bls.n	80016fe <DSHOT_SEND_PACKET+0x6e2>
 80016f6:	4b71      	ldr	r3, [pc, #452]	; (80018bc <DSHOT_SEND_PACKET+0x8a0>)
 80016f8:	2231      	movs	r2, #49	; 0x31
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	e00e      	b.n	800171c <DSHOT_SEND_PACKET+0x700>
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	4b6e      	ldr	r3, [pc, #440]	; (80018c4 <DSHOT_SEND_PACKET+0x8a8>)
 800170a:	429a      	cmp	r2, r3
 800170c:	d903      	bls.n	8001716 <DSHOT_SEND_PACKET+0x6fa>
 800170e:	4b69      	ldr	r3, [pc, #420]	; (80018b4 <DSHOT_SEND_PACKET+0x898>)
 8001710:	2231      	movs	r2, #49	; 0x31
 8001712:	60da      	str	r2, [r3, #12]
 8001714:	e002      	b.n	800171c <DSHOT_SEND_PACKET+0x700>
 8001716:	4b67      	ldr	r3, [pc, #412]	; (80018b4 <DSHOT_SEND_PACKET+0x898>)
 8001718:	2231      	movs	r2, #49	; 0x31
 800171a:	609a      	str	r2, [r3, #8]
			__HAL_DMA_ENABLE(escSet->DMA[2]);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f042 0201 	orr.w	r2, r2, #1
 8001732:	601a      	str	r2, [r3, #0]
			__HAL_DMA_ENABLE(escSet->DMA[3]);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f042 0201 	orr.w	r2, r2, #1
 800174a:	601a      	str	r2, [r3, #0]
			break;
 800174c:	e118      	b.n	8001980 <DSHOT_SEND_PACKET+0x964>
		case (ALL_MOTORS):
			memcpy(escSet->ThrottleDshot[0], dshotPacket, sizeof(dshotPacket));
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	3310      	adds	r3, #16
 8001752:	f107 0110 	add.w	r1, r7, #16
 8001756:	2260      	movs	r2, #96	; 0x60
 8001758:	4618      	mov	r0, r3
 800175a:	f008 fc35 	bl	8009fc8 <memcpy>
			memcpy(escSet->ThrottleDshot[1], dshotPacket, sizeof(dshotPacket));
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	3370      	adds	r3, #112	; 0x70
 8001762:	f107 0110 	add.w	r1, r7, #16
 8001766:	2260      	movs	r2, #96	; 0x60
 8001768:	4618      	mov	r0, r3
 800176a:	f008 fc2d 	bl	8009fc8 <memcpy>
			memcpy(escSet->ThrottleDshot[2], dshotPacket, sizeof(dshotPacket));
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	33d0      	adds	r3, #208	; 0xd0
 8001772:	f107 0110 	add.w	r1, r7, #16
 8001776:	2260      	movs	r2, #96	; 0x60
 8001778:	4618      	mov	r0, r3
 800177a:	f008 fc25 	bl	8009fc8 <memcpy>
			memcpy(escSet->ThrottleDshot[3], dshotPacket, sizeof(dshotPacket));
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8001784:	f107 0110 	add.w	r1, r7, #16
 8001788:	2260      	movs	r2, #96	; 0x60
 800178a:	4618      	mov	r0, r3
 800178c:	f008 fc1c 	bl	8009fc8 <memcpy>
			escSet->DMA[0]->Instance->NDTR = DSHOT_PACKET_SIZE;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2218      	movs	r2, #24
 800179a:	605a      	str	r2, [r3, #4]
			escSet->DMA[1]->Instance->NDTR = DSHOT_PACKET_SIZE;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2218      	movs	r2, #24
 80017a6:	605a      	str	r2, [r3, #4]
			escSet->DMA[2]->Instance->NDTR = DSHOT_PACKET_SIZE;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2218      	movs	r2, #24
 80017b2:	605a      	str	r2, [r3, #4]
			escSet->DMA[3]->Instance->NDTR = DSHOT_PACKET_SIZE;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2218      	movs	r2, #24
 80017be:	605a      	str	r2, [r3, #4]
			__HAL_DMA_CLEAR_FLAG(escSet->DMA[0], DMA_FLAG_TCIF0_4 | DMA_FLAG_HTIF0_4 | DMA_FLAG_FEIF0_4);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	461a      	mov	r2, r3
 80017ca:	4b3b      	ldr	r3, [pc, #236]	; (80018b8 <DSHOT_SEND_PACKET+0x89c>)
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d903      	bls.n	80017d8 <DSHOT_SEND_PACKET+0x7bc>
 80017d0:	4b3a      	ldr	r3, [pc, #232]	; (80018bc <DSHOT_SEND_PACKET+0x8a0>)
 80017d2:	2231      	movs	r2, #49	; 0x31
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	e01a      	b.n	800180e <DSHOT_SEND_PACKET+0x7f2>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b37      	ldr	r3, [pc, #220]	; (80018c0 <DSHOT_SEND_PACKET+0x8a4>)
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d903      	bls.n	80017f0 <DSHOT_SEND_PACKET+0x7d4>
 80017e8:	4b34      	ldr	r3, [pc, #208]	; (80018bc <DSHOT_SEND_PACKET+0x8a0>)
 80017ea:	2231      	movs	r2, #49	; 0x31
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	e00e      	b.n	800180e <DSHOT_SEND_PACKET+0x7f2>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b32      	ldr	r3, [pc, #200]	; (80018c4 <DSHOT_SEND_PACKET+0x8a8>)
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d903      	bls.n	8001808 <DSHOT_SEND_PACKET+0x7ec>
 8001800:	4b2c      	ldr	r3, [pc, #176]	; (80018b4 <DSHOT_SEND_PACKET+0x898>)
 8001802:	2231      	movs	r2, #49	; 0x31
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	e002      	b.n	800180e <DSHOT_SEND_PACKET+0x7f2>
 8001808:	4b2a      	ldr	r3, [pc, #168]	; (80018b4 <DSHOT_SEND_PACKET+0x898>)
 800180a:	2231      	movs	r2, #49	; 0x31
 800180c:	609a      	str	r2, [r3, #8]
			__HAL_DMA_CLEAR_FLAG(escSet->DMA[1], DMA_FLAG_TCIF3_7 | DMA_FLAG_HTIF3_7 | DMA_FLAG_FEIF3_7);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	461a      	mov	r2, r3
 8001818:	4b27      	ldr	r3, [pc, #156]	; (80018b8 <DSHOT_SEND_PACKET+0x89c>)
 800181a:	429a      	cmp	r2, r3
 800181c:	d904      	bls.n	8001828 <DSHOT_SEND_PACKET+0x80c>
 800181e:	4b27      	ldr	r3, [pc, #156]	; (80018bc <DSHOT_SEND_PACKET+0x8a0>)
 8001820:	f04f 6244 	mov.w	r2, #205520896	; 0xc400000
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	e01d      	b.n	8001864 <DSHOT_SEND_PACKET+0x848>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <DSHOT_SEND_PACKET+0x8a4>)
 8001834:	429a      	cmp	r2, r3
 8001836:	d904      	bls.n	8001842 <DSHOT_SEND_PACKET+0x826>
 8001838:	4b20      	ldr	r3, [pc, #128]	; (80018bc <DSHOT_SEND_PACKET+0x8a0>)
 800183a:	f04f 6244 	mov.w	r2, #205520896	; 0xc400000
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	e010      	b.n	8001864 <DSHOT_SEND_PACKET+0x848>
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	461a      	mov	r2, r3
 800184c:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <DSHOT_SEND_PACKET+0x8a8>)
 800184e:	429a      	cmp	r2, r3
 8001850:	d904      	bls.n	800185c <DSHOT_SEND_PACKET+0x840>
 8001852:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <DSHOT_SEND_PACKET+0x898>)
 8001854:	f04f 6244 	mov.w	r2, #205520896	; 0xc400000
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	e003      	b.n	8001864 <DSHOT_SEND_PACKET+0x848>
 800185c:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <DSHOT_SEND_PACKET+0x898>)
 800185e:	f04f 6244 	mov.w	r2, #205520896	; 0xc400000
 8001862:	609a      	str	r2, [r3, #8]
			__HAL_DMA_CLEAR_FLAG(escSet->DMA[2], DMA_FLAG_TCIF3_7 | DMA_FLAG_HTIF3_7 | DMA_FLAG_FEIF3_7);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <DSHOT_SEND_PACKET+0x89c>)
 8001870:	429a      	cmp	r2, r3
 8001872:	d904      	bls.n	800187e <DSHOT_SEND_PACKET+0x862>
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <DSHOT_SEND_PACKET+0x8a0>)
 8001876:	f04f 6244 	mov.w	r2, #205520896	; 0xc400000
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	e028      	b.n	80018d0 <DSHOT_SEND_PACKET+0x8b4>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	461a      	mov	r2, r3
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <DSHOT_SEND_PACKET+0x8a4>)
 800188a:	429a      	cmp	r2, r3
 800188c:	d904      	bls.n	8001898 <DSHOT_SEND_PACKET+0x87c>
 800188e:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <DSHOT_SEND_PACKET+0x8a0>)
 8001890:	f04f 6244 	mov.w	r2, #205520896	; 0xc400000
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	e01b      	b.n	80018d0 <DSHOT_SEND_PACKET+0x8b4>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <DSHOT_SEND_PACKET+0x8a8>)
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d90f      	bls.n	80018c8 <DSHOT_SEND_PACKET+0x8ac>
 80018a8:	4b02      	ldr	r3, [pc, #8]	; (80018b4 <DSHOT_SEND_PACKET+0x898>)
 80018aa:	f04f 6244 	mov.w	r2, #205520896	; 0xc400000
 80018ae:	60da      	str	r2, [r3, #12]
 80018b0:	e00e      	b.n	80018d0 <DSHOT_SEND_PACKET+0x8b4>
 80018b2:	bf00      	nop
 80018b4:	40026000 	.word	0x40026000
 80018b8:	40026458 	.word	0x40026458
 80018bc:	40026400 	.word	0x40026400
 80018c0:	400260b8 	.word	0x400260b8
 80018c4:	40026058 	.word	0x40026058
 80018c8:	4b31      	ldr	r3, [pc, #196]	; (8001990 <DSHOT_SEND_PACKET+0x974>)
 80018ca:	f04f 6244 	mov.w	r2, #205520896	; 0xc400000
 80018ce:	609a      	str	r2, [r3, #8]
			__HAL_DMA_CLEAR_FLAG(escSet->DMA[3], DMA_FLAG_TCIF0_4 | DMA_FLAG_HTIF0_4 | DMA_FLAG_FEIF0_4);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b2e      	ldr	r3, [pc, #184]	; (8001994 <DSHOT_SEND_PACKET+0x978>)
 80018dc:	429a      	cmp	r2, r3
 80018de:	d903      	bls.n	80018e8 <DSHOT_SEND_PACKET+0x8cc>
 80018e0:	4b2d      	ldr	r3, [pc, #180]	; (8001998 <DSHOT_SEND_PACKET+0x97c>)
 80018e2:	2231      	movs	r2, #49	; 0x31
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	e01a      	b.n	800191e <DSHOT_SEND_PACKET+0x902>
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b2a      	ldr	r3, [pc, #168]	; (800199c <DSHOT_SEND_PACKET+0x980>)
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d903      	bls.n	8001900 <DSHOT_SEND_PACKET+0x8e4>
 80018f8:	4b27      	ldr	r3, [pc, #156]	; (8001998 <DSHOT_SEND_PACKET+0x97c>)
 80018fa:	2231      	movs	r2, #49	; 0x31
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	e00e      	b.n	800191e <DSHOT_SEND_PACKET+0x902>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	4b25      	ldr	r3, [pc, #148]	; (80019a0 <DSHOT_SEND_PACKET+0x984>)
 800190c:	429a      	cmp	r2, r3
 800190e:	d903      	bls.n	8001918 <DSHOT_SEND_PACKET+0x8fc>
 8001910:	4b1f      	ldr	r3, [pc, #124]	; (8001990 <DSHOT_SEND_PACKET+0x974>)
 8001912:	2231      	movs	r2, #49	; 0x31
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	e002      	b.n	800191e <DSHOT_SEND_PACKET+0x902>
 8001918:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <DSHOT_SEND_PACKET+0x974>)
 800191a:	2231      	movs	r2, #49	; 0x31
 800191c:	609a      	str	r2, [r3, #8]
			__HAL_DMA_ENABLE(escSet->DMA[0]);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 0201 	orr.w	r2, r2, #1
 8001934:	601a      	str	r2, [r3, #0]
			__HAL_DMA_ENABLE(escSet->DMA[1]);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f042 0201 	orr.w	r2, r2, #1
 800194c:	601a      	str	r2, [r3, #0]
			__HAL_DMA_ENABLE(escSet->DMA[2]);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f042 0201 	orr.w	r2, r2, #1
 8001964:	601a      	str	r2, [r3, #0]
			__HAL_DMA_ENABLE(escSet->DMA[3]);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f042 0201 	orr.w	r2, r2, #1
 800197c:	601a      	str	r2, [r3, #0]
			break;
 800197e:	bf00      	nop
	}
	escSet->SendingFlag = 0;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
}
 8001988:	bf00      	nop
 800198a:	3778      	adds	r7, #120	; 0x78
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40026000 	.word	0x40026000
 8001994:	40026458 	.word	0x40026458
 8001998:	40026400 	.word	0x40026400
 800199c:	400260b8 	.word	0x400260b8
 80019a0:	40026058 	.word	0x40026058

080019a4 <ESC_UPDATE_THROTTLE>:

void ESC_UPDATE_THROTTLE(ESC_CONTROLLER* escSet)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	// Throttle cannot exceed 11 bits, so max value is 2047
	DSHOT_SEND_PACKET(escSet, escSet->Throttle[0], 0, FRONT_LEFT_MOTOR);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6819      	ldr	r1, [r3, #0]
 80019b0:	2300      	movs	r3, #0
 80019b2:	2200      	movs	r2, #0
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff fb31 	bl	800101c <DSHOT_SEND_PACKET>
	DSHOT_SEND_PACKET(escSet, escSet->Throttle[1], 0, FRONT_RIGHT_MOTOR);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6859      	ldr	r1, [r3, #4]
 80019be:	2301      	movs	r3, #1
 80019c0:	2200      	movs	r2, #0
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff fb2a 	bl	800101c <DSHOT_SEND_PACKET>
	DSHOT_SEND_PACKET(escSet, escSet->Throttle[2], 0, BACK_LEFT_MOTOR);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6899      	ldr	r1, [r3, #8]
 80019cc:	2302      	movs	r3, #2
 80019ce:	2200      	movs	r2, #0
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff fb23 	bl	800101c <DSHOT_SEND_PACKET>
	DSHOT_SEND_PACKET(escSet, escSet->Throttle[3], 0, BACK_RIGHT_MOTOR);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68d9      	ldr	r1, [r3, #12]
 80019da:	2303      	movs	r3, #3
 80019dc:	2200      	movs	r2, #0
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff fb1c 	bl	800101c <DSHOT_SEND_PACKET>
}
 80019e4:	bf00      	nop
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <ESC_SEND_CMD>:

// TO DO: Commands often times do not save, need to figure out why.
// If I increase how many times it loops this send cmd then it's more likely to work.
void ESC_SEND_CMD(ESC_CONTROLLER* escSet, uint32_t cmd, uint32_t motorNum)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
	// Need to set telemetry bit to 1 if either of these commands are sent
	if (cmd == 	DSHOT_CMD_SPIN_DIRECTION_NORMAL || DSHOT_CMD_SPIN_DIRECTION_REVERSED ||
				DSHOT_CMD_SPIN_DIRECTION_1 || DSHOT_CMD_SPIN_DIRECTION_2)
	{
		for (int i = 0; i < 100; i++)
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	e008      	b.n	8001a10 <ESC_SEND_CMD+0x24>
		{
			DSHOT_SEND_PACKET(escSet, cmd, 1, motorNum);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2201      	movs	r2, #1
 8001a02:	68b9      	ldr	r1, [r7, #8]
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f7ff fb09 	bl	800101c <DSHOT_SEND_PACKET>
		for (int i = 0; i < 100; i++)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	2b63      	cmp	r3, #99	; 0x63
 8001a14:	ddf3      	ble.n	80019fe <ESC_SEND_CMD+0x12>
	}
	else
	{
		for (int i = 0; i < 100; i++) DSHOT_SEND_PACKET(escSet, cmd, 1, motorNum);
	}
}
 8001a16:	bf00      	nop
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <ESC_CALC_THROTTLE>:

void ESC_CALC_THROTTLE(ESC_CONTROLLER* escSet, RX_CONTROLLER* thisRX, uint8_t armed)
{
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b08f      	sub	sp, #60	; 0x3c
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	71fb      	strb	r3, [r7, #7]
	if (armed)
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 81a6 	beq.w	8001d82 <ESC_CALC_THROTTLE+0x362>
	{
		// Initiate array containing set of throttle values for motors
		MOTOR_THROTTLES motorSet;
		// Set the base throttle of each motor to the throttle stick value
		motorSet.FrontLeft = thisRX->throttle;
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	613b      	str	r3, [r7, #16]
		motorSet.FrontRight = thisRX->throttle;
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	617b      	str	r3, [r7, #20]
		motorSet.BackLeft = thisRX->throttle;
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	61bb      	str	r3, [r7, #24]
		motorSet.BackRight = thisRX->throttle;
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	61fb      	str	r3, [r7, #28]
		// Back side increases throttle if pitching forward, front side decreases
		if (thisRX->pitch > XYZ_NEUTRAL_VALUE)
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f240 4204 	movw	r2, #1028	; 0x404
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d932      	bls.n	8001ac0 <ESC_CALC_THROTTLE+0xa0>
		{
			uint32_t addVal = (thisRX->pitch - XYZ_NEUTRAL_VALUE) * SENSITIVITY_CONST;
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fd76 	bl	8000554 <__aeabi_ui2d>
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	4b9e      	ldr	r3, [pc, #632]	; (8001ce8 <ESC_CALC_THROTTLE+0x2c8>)
 8001a6e:	f7fe fdeb 	bl	8000648 <__aeabi_dmul>
 8001a72:	4603      	mov	r3, r0
 8001a74:	460c      	mov	r4, r1
 8001a76:	4618      	mov	r0, r3
 8001a78:	4621      	mov	r1, r4
 8001a7a:	f7ff f81f 	bl	8000abc <__aeabi_d2uiz>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	633b      	str	r3, [r7, #48]	; 0x30
			if (motorSet.FrontLeft > addVal) motorSet.FrontLeft -= addVal;
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d204      	bcs.n	8001a94 <ESC_CALC_THROTTLE+0x74>
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	e001      	b.n	8001a98 <ESC_CALC_THROTTLE+0x78>
			else motorSet.FrontLeft = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]
			if (motorSet.FrontRight > addVal) motorSet.FrontRight  -= addVal;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d204      	bcs.n	8001aaa <ESC_CALC_THROTTLE+0x8a>
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	e001      	b.n	8001aae <ESC_CALC_THROTTLE+0x8e>
			else motorSet.FrontRight  = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
			motorSet.BackLeft += addVal;
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab2:	4413      	add	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
			motorSet.BackRight += addVal;
 8001ab6:	69fa      	ldr	r2, [r7, #28]
 8001ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aba:	4413      	add	r3, r2
 8001abc:	61fb      	str	r3, [r7, #28]
 8001abe:	e038      	b.n	8001b32 <ESC_CALC_THROTTLE+0x112>
		}
		// Front side increases throttle pitching backward, back side decreases
		else if (thisRX->pitch < XYZ_NEUTRAL_VALUE)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f240 4203 	movw	r2, #1027	; 0x403
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d832      	bhi.n	8001b32 <ESC_CALC_THROTTLE+0x112>
		{
			uint32_t addVal = (XYZ_NEUTRAL_VALUE - thisRX->pitch) * SENSITIVITY_CONST;
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	f240 4304 	movw	r3, #1028	; 0x404
 8001ad4:	1a9b      	subs	r3, r3, r2
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fd3c 	bl	8000554 <__aeabi_ui2d>
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	4b81      	ldr	r3, [pc, #516]	; (8001ce8 <ESC_CALC_THROTTLE+0x2c8>)
 8001ae2:	f7fe fdb1 	bl	8000648 <__aeabi_dmul>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	460c      	mov	r4, r1
 8001aea:	4618      	mov	r0, r3
 8001aec:	4621      	mov	r1, r4
 8001aee:	f7fe ffe5 	bl	8000abc <__aeabi_d2uiz>
 8001af2:	4603      	mov	r3, r0
 8001af4:	637b      	str	r3, [r7, #52]	; 0x34
			if (motorSet.BackLeft > addVal) motorSet.BackLeft -= addVal;
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d204      	bcs.n	8001b08 <ESC_CALC_THROTTLE+0xe8>
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	61bb      	str	r3, [r7, #24]
 8001b06:	e001      	b.n	8001b0c <ESC_CALC_THROTTLE+0xec>
			else motorSet.BackLeft = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61bb      	str	r3, [r7, #24]
			if (motorSet.BackRight > addVal) motorSet.BackRight  -= addVal;
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d204      	bcs.n	8001b1e <ESC_CALC_THROTTLE+0xfe>
 8001b14:	69fa      	ldr	r2, [r7, #28]
 8001b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	61fb      	str	r3, [r7, #28]
 8001b1c:	e001      	b.n	8001b22 <ESC_CALC_THROTTLE+0x102>
			else motorSet.BackRight  = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
			motorSet.FrontLeft += addVal;
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b26:	4413      	add	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
			motorSet.FrontRight += addVal;
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b2e:	4413      	add	r3, r2
 8001b30:	617b      	str	r3, [r7, #20]
		}
		// Left side increases throttle if pitching to the right, right side decreases
		if (thisRX->roll > XYZ_NEUTRAL_VALUE)
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f240 4204 	movw	r2, #1028	; 0x404
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d932      	bls.n	8001ba4 <ESC_CALC_THROTTLE+0x184>
		{
			uint32_t addVal = (thisRX->roll - XYZ_NEUTRAL_VALUE) * SENSITIVITY_CONST;
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fd04 	bl	8000554 <__aeabi_ui2d>
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	4b65      	ldr	r3, [pc, #404]	; (8001ce8 <ESC_CALC_THROTTLE+0x2c8>)
 8001b52:	f7fe fd79 	bl	8000648 <__aeabi_dmul>
 8001b56:	4603      	mov	r3, r0
 8001b58:	460c      	mov	r4, r1
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	4621      	mov	r1, r4
 8001b5e:	f7fe ffad 	bl	8000abc <__aeabi_d2uiz>
 8001b62:	4603      	mov	r3, r0
 8001b64:	62bb      	str	r3, [r7, #40]	; 0x28
			if (motorSet.FrontRight > addVal) motorSet.FrontRight -= addVal;
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d204      	bcs.n	8001b78 <ESC_CALC_THROTTLE+0x158>
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	e001      	b.n	8001b7c <ESC_CALC_THROTTLE+0x15c>
			else motorSet.FrontRight = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
			if (motorSet.BackRight > addVal) motorSet.BackRight  -= addVal;
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d204      	bcs.n	8001b8e <ESC_CALC_THROTTLE+0x16e>
 8001b84:	69fa      	ldr	r2, [r7, #28]
 8001b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	61fb      	str	r3, [r7, #28]
 8001b8c:	e001      	b.n	8001b92 <ESC_CALC_THROTTLE+0x172>
			else motorSet.BackRight  = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
			motorSet.FrontLeft += addVal;
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b96:	4413      	add	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
			motorSet.BackLeft += addVal;
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b9e:	4413      	add	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
 8001ba2:	e038      	b.n	8001c16 <ESC_CALC_THROTTLE+0x1f6>
		}
		// Right side increases throttle if pitching to the left, left side decreases
		else if (thisRX->roll < XYZ_NEUTRAL_VALUE)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f240 4203 	movw	r2, #1027	; 0x403
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d832      	bhi.n	8001c16 <ESC_CALC_THROTTLE+0x1f6>
		{
			uint32_t addVal = (XYZ_NEUTRAL_VALUE - thisRX->roll) * SENSITIVITY_CONST;
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	f240 4304 	movw	r3, #1028	; 0x404
 8001bb8:	1a9b      	subs	r3, r3, r2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fcca 	bl	8000554 <__aeabi_ui2d>
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	4b48      	ldr	r3, [pc, #288]	; (8001ce8 <ESC_CALC_THROTTLE+0x2c8>)
 8001bc6:	f7fe fd3f 	bl	8000648 <__aeabi_dmul>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	460c      	mov	r4, r1
 8001bce:	4618      	mov	r0, r3
 8001bd0:	4621      	mov	r1, r4
 8001bd2:	f7fe ff73 	bl	8000abc <__aeabi_d2uiz>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (motorSet.FrontLeft > addVal) motorSet.FrontLeft -= addVal;
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d204      	bcs.n	8001bec <ESC_CALC_THROTTLE+0x1cc>
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	e001      	b.n	8001bf0 <ESC_CALC_THROTTLE+0x1d0>
			else motorSet.FrontLeft = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	613b      	str	r3, [r7, #16]
			if (motorSet.BackLeft > addVal) motorSet.BackLeft  -= addVal;
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d204      	bcs.n	8001c02 <ESC_CALC_THROTTLE+0x1e2>
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	61bb      	str	r3, [r7, #24]
 8001c00:	e001      	b.n	8001c06 <ESC_CALC_THROTTLE+0x1e6>
			else motorSet.BackLeft  = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61bb      	str	r3, [r7, #24]
			motorSet.FrontRight += addVal;
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0a:	4413      	add	r3, r2
 8001c0c:	617b      	str	r3, [r7, #20]
			motorSet.BackRight += addVal;
 8001c0e:	69fa      	ldr	r2, [r7, #28]
 8001c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c12:	4413      	add	r3, r2
 8001c14:	61fb      	str	r3, [r7, #28]
		}
		// Front left and back right (if spinning counter-clockwise) increase if yaw to the right
		if (thisRX->yaw > XYZ_NEUTRAL_VALUE)
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	f240 4204 	movw	r2, #1028	; 0x404
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d932      	bls.n	8001c88 <ESC_CALC_THROTTLE+0x268>
		{
			uint32_t addVal = (thisRX->yaw - XYZ_NEUTRAL_VALUE) * SENSITIVITY_CONST;
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe fc92 	bl	8000554 <__aeabi_ui2d>
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	4b2c      	ldr	r3, [pc, #176]	; (8001ce8 <ESC_CALC_THROTTLE+0x2c8>)
 8001c36:	f7fe fd07 	bl	8000648 <__aeabi_dmul>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	460c      	mov	r4, r1
 8001c3e:	4618      	mov	r0, r3
 8001c40:	4621      	mov	r1, r4
 8001c42:	f7fe ff3b 	bl	8000abc <__aeabi_d2uiz>
 8001c46:	4603      	mov	r3, r0
 8001c48:	623b      	str	r3, [r7, #32]
			if (motorSet.FrontRight > addVal) motorSet.FrontRight -= addVal;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	6a3a      	ldr	r2, [r7, #32]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d204      	bcs.n	8001c5c <ESC_CALC_THROTTLE+0x23c>
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	6a3b      	ldr	r3, [r7, #32]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	e001      	b.n	8001c60 <ESC_CALC_THROTTLE+0x240>
			else motorSet.FrontRight = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
			if (motorSet.BackLeft > addVal) motorSet.BackLeft  -= addVal;
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	6a3a      	ldr	r2, [r7, #32]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d204      	bcs.n	8001c72 <ESC_CALC_THROTTLE+0x252>
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	61bb      	str	r3, [r7, #24]
 8001c70:	e001      	b.n	8001c76 <ESC_CALC_THROTTLE+0x256>
			else motorSet.BackLeft  = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61bb      	str	r3, [r7, #24]
			motorSet.FrontLeft += addVal;
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	6a3b      	ldr	r3, [r7, #32]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
			motorSet.BackRight += addVal;
 8001c7e:	69fa      	ldr	r2, [r7, #28]
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	4413      	add	r3, r2
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	e03b      	b.n	8001d00 <ESC_CALC_THROTTLE+0x2e0>
		}
		// Front right and back left (if spinning clockwise) increase if yaw to the left
		else if (thisRX->yaw < XYZ_NEUTRAL_VALUE)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f240 4203 	movw	r2, #1027	; 0x403
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d835      	bhi.n	8001d00 <ESC_CALC_THROTTLE+0x2e0>
		{
			uint32_t addVal = (XYZ_NEUTRAL_VALUE - thisRX->yaw) * SENSITIVITY_CONST;
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	f240 4304 	movw	r3, #1028	; 0x404
 8001c9c:	1a9b      	subs	r3, r3, r2
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fc58 	bl	8000554 <__aeabi_ui2d>
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <ESC_CALC_THROTTLE+0x2c8>)
 8001caa:	f7fe fccd 	bl	8000648 <__aeabi_dmul>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	460c      	mov	r4, r1
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	4621      	mov	r1, r4
 8001cb6:	f7fe ff01 	bl	8000abc <__aeabi_d2uiz>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
			if (motorSet.FrontLeft > addVal) motorSet.FrontLeft -= addVal;
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d204      	bcs.n	8001cd0 <ESC_CALC_THROTTLE+0x2b0>
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	e001      	b.n	8001cd4 <ESC_CALC_THROTTLE+0x2b4>
			else motorSet.FrontLeft = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	613b      	str	r3, [r7, #16]
			if (motorSet.BackRight > addVal) motorSet.BackRight  -= addVal;
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d207      	bcs.n	8001cec <ESC_CALC_THROTTLE+0x2cc>
 8001cdc:	69fa      	ldr	r2, [r7, #28]
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	61fb      	str	r3, [r7, #28]
 8001ce4:	e004      	b.n	8001cf0 <ESC_CALC_THROTTLE+0x2d0>
 8001ce6:	bf00      	nop
 8001ce8:	3fd00000 	.word	0x3fd00000
			else motorSet.BackRight  = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
			motorSet.FrontRight += addVal;
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	4413      	add	r3, r2
 8001cf6:	617b      	str	r3, [r7, #20]
			motorSet.BackLeft += addVal;
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	4413      	add	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
		}
		if (motorSet.FrontLeft > DSHOT_MAX_THROTTLE) motorSet.FrontLeft = DSHOT_MAX_THROTTLE;
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d06:	d303      	bcc.n	8001d10 <ESC_CALC_THROTTLE+0x2f0>
 8001d08:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	e004      	b.n	8001d1a <ESC_CALC_THROTTLE+0x2fa>
		else if (motorSet.FrontLeft < DSHOT_MIN_IDLE) motorSet.FrontLeft = DSHOT_MIN_IDLE;
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	2bf9      	cmp	r3, #249	; 0xf9
 8001d14:	d801      	bhi.n	8001d1a <ESC_CALC_THROTTLE+0x2fa>
 8001d16:	23fa      	movs	r3, #250	; 0xfa
 8001d18:	613b      	str	r3, [r7, #16]
		if (motorSet.FrontRight > DSHOT_MAX_THROTTLE) motorSet.FrontRight = DSHOT_MAX_THROTTLE;
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d20:	d303      	bcc.n	8001d2a <ESC_CALC_THROTTLE+0x30a>
 8001d22:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	e004      	b.n	8001d34 <ESC_CALC_THROTTLE+0x314>
		else if (motorSet.FrontRight < DSHOT_MIN_IDLE) motorSet.FrontRight = DSHOT_MIN_IDLE;
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2bf9      	cmp	r3, #249	; 0xf9
 8001d2e:	d801      	bhi.n	8001d34 <ESC_CALC_THROTTLE+0x314>
 8001d30:	23fa      	movs	r3, #250	; 0xfa
 8001d32:	617b      	str	r3, [r7, #20]
		if (motorSet.BackLeft > DSHOT_MAX_THROTTLE) motorSet.BackLeft = DSHOT_MAX_THROTTLE;
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d3a:	d303      	bcc.n	8001d44 <ESC_CALC_THROTTLE+0x324>
 8001d3c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001d40:	61bb      	str	r3, [r7, #24]
 8001d42:	e004      	b.n	8001d4e <ESC_CALC_THROTTLE+0x32e>
		else if (motorSet.BackLeft < DSHOT_MIN_IDLE) motorSet.BackLeft = DSHOT_MIN_IDLE;
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	2bf9      	cmp	r3, #249	; 0xf9
 8001d48:	d801      	bhi.n	8001d4e <ESC_CALC_THROTTLE+0x32e>
 8001d4a:	23fa      	movs	r3, #250	; 0xfa
 8001d4c:	61bb      	str	r3, [r7, #24]
		if (motorSet.BackRight > DSHOT_MAX_THROTTLE) motorSet.BackRight = DSHOT_MAX_THROTTLE;
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d54:	d303      	bcc.n	8001d5e <ESC_CALC_THROTTLE+0x33e>
 8001d56:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001d5a:	61fb      	str	r3, [r7, #28]
 8001d5c:	e004      	b.n	8001d68 <ESC_CALC_THROTTLE+0x348>
		else if (motorSet.BackRight < DSHOT_MIN_IDLE) motorSet.BackRight = DSHOT_MIN_IDLE;
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	2bf9      	cmp	r3, #249	; 0xf9
 8001d62:	d801      	bhi.n	8001d68 <ESC_CALC_THROTTLE+0x348>
 8001d64:	23fa      	movs	r3, #250	; 0xfa
 8001d66:	61fb      	str	r3, [r7, #28]
		escSet->Throttle[0] = motorSet.FrontLeft;
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	601a      	str	r2, [r3, #0]
		escSet->Throttle[1] = motorSet.FrontRight;
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	605a      	str	r2, [r3, #4]
		escSet->Throttle[2] = motorSet.BackLeft;
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	609a      	str	r2, [r3, #8]
		escSet->Throttle[3] = motorSet.BackRight;
 8001d7a:	69fa      	ldr	r2, [r7, #28]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	60da      	str	r2, [r3, #12]
		escSet->Throttle[0] = 0;
		escSet->Throttle[1] = 0;
		escSet->Throttle[2] = 0;
		escSet->Throttle[3] = 0;
	}
}
 8001d80:	e00b      	b.n	8001d9a <ESC_CALC_THROTTLE+0x37a>
		escSet->Throttle[0] = 0;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
		escSet->Throttle[1] = 0;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	605a      	str	r2, [r3, #4]
		escSet->Throttle[2] = 0;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
		escSet->Throttle[3] = 0;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
}
 8001d9a:	bf00      	nop
 8001d9c:	373c      	adds	r7, #60	; 0x3c
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd90      	pop	{r4, r7, pc}
 8001da2:	bf00      	nop

08001da4 <RX_INIT>:
#define RX_OFFSET 			998
#define RX_SWITCH_OFFSET	550


RX_CONTROLLER* RX_INIT(TIM_HandleTypeDef* timerSticks, TIM_HandleTypeDef* timerSwitches)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
	RX_CONTROLLER* newRX = malloc(sizeof(RX_CONTROLLER));
 8001dae:	2024      	movs	r0, #36	; 0x24
 8001db0:	f008 f902 	bl	8009fb8 <malloc>
 8001db4:	4603      	mov	r3, r0
 8001db6:	60fb      	str	r3, [r7, #12]
	newRX->throttle = 0;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
	newRX->pitch = 0;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	605a      	str	r2, [r3, #4]
	newRX->roll = 0;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
	newRX->yaw = 0;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	60da      	str	r2, [r3, #12]
	newRX->switchA = 0;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	611a      	str	r2, [r3, #16]
	newRX->switchB = 0;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	615a      	str	r2, [r3, #20]
	newRX->timerSticks = timerSticks;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	619a      	str	r2, [r3, #24]
	newRX->timerSwitches = timerSwitches;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	61da      	str	r2, [r3, #28]
	HAL_TIM_IC_Start_IT(newRX->timerSticks, TIM_CHANNEL_1);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	2100      	movs	r1, #0
 8001dee:	4618      	mov	r0, r3
 8001df0:	f005 fe56 	bl	8007aa0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(newRX->timerSticks, TIM_CHANNEL_2);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	2104      	movs	r1, #4
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f005 fe50 	bl	8007aa0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(newRX->timerSticks, TIM_CHANNEL_3);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	2108      	movs	r1, #8
 8001e06:	4618      	mov	r0, r3
 8001e08:	f005 fe4a 	bl	8007aa0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(newRX->timerSticks, TIM_CHANNEL_4);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	210c      	movs	r1, #12
 8001e12:	4618      	mov	r0, r3
 8001e14:	f005 fe44 	bl	8007aa0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(newRX->timerSwitches, TIM_CHANNEL_1);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f005 fe3e 	bl	8007aa0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(newRX->timerSwitches, TIM_CHANNEL_4);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	210c      	movs	r1, #12
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f005 fe38 	bl	8007aa0 <HAL_TIM_IC_Start_IT>
	return newRX;
 8001e30:	68fb      	ldr	r3, [r7, #12]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	0000      	movs	r0, r0
 8001e3c:	0000      	movs	r0, r0
	...

08001e40 <RX_UPDATE>:

void RX_UPDATE(RX_CONTROLLER* thisRX)
{
 8001e40:	b590      	push	{r4, r7, lr}
 8001e42:	b089      	sub	sp, #36	; 0x24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	// Calculate RX throttle value
	uint32_t curThrottle = HAL_TIM_ReadCapturedValue(thisRX->timerSticks, TIM_CHANNEL_1);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f006 fa28 	bl	80082a4 <HAL_TIM_ReadCapturedValue>
 8001e54:	61f8      	str	r0, [r7, #28]
	if (curThrottle > RX_OFFSET - 1) curThrottle = (curThrottle - RX_OFFSET) * RX_COEFFICIENT;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	f240 32e5 	movw	r2, #997	; 0x3e5
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d912      	bls.n	8001e86 <RX_UPDATE+0x46>
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f2a3 33e6 	subw	r3, r3, #998	; 0x3e6
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fb74 	bl	8000554 <__aeabi_ui2d>
 8001e6c:	a350      	add	r3, pc, #320	; (adr r3, 8001fb0 <RX_UPDATE+0x170>)
 8001e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e72:	f7fe fbe9 	bl	8000648 <__aeabi_dmul>
 8001e76:	4603      	mov	r3, r0
 8001e78:	460c      	mov	r4, r1
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	4621      	mov	r1, r4
 8001e7e:	f7fe fe1d 	bl	8000abc <__aeabi_d2uiz>
 8001e82:	4603      	mov	r3, r0
 8001e84:	61fb      	str	r3, [r7, #28]
	thisRX->throttle = curThrottle;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69fa      	ldr	r2, [r7, #28]
 8001e8a:	601a      	str	r2, [r3, #0]
	// Calculate RX pitch value
	int32_t curPitch = HAL_TIM_ReadCapturedValue(thisRX->timerSticks, TIM_CHANNEL_2);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	2104      	movs	r1, #4
 8001e92:	4618      	mov	r0, r3
 8001e94:	f006 fa06 	bl	80082a4 <HAL_TIM_ReadCapturedValue>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	61bb      	str	r3, [r7, #24]
	if (curPitch > RX_OFFSET - 1) curPitch = (curPitch - RX_OFFSET) * RX_COEFFICIENT;
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	f240 32e5 	movw	r2, #997	; 0x3e5
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	dd12      	ble.n	8001ecc <RX_UPDATE+0x8c>
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	f2a3 33e6 	subw	r3, r3, #998	; 0x3e6
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fb61 	bl	8000574 <__aeabi_i2d>
 8001eb2:	a33f      	add	r3, pc, #252	; (adr r3, 8001fb0 <RX_UPDATE+0x170>)
 8001eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb8:	f7fe fbc6 	bl	8000648 <__aeabi_dmul>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	460c      	mov	r4, r1
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	4621      	mov	r1, r4
 8001ec4:	f7fe fdd2 	bl	8000a6c <__aeabi_d2iz>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	61bb      	str	r3, [r7, #24]
	thisRX->pitch = curPitch;
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	605a      	str	r2, [r3, #4]
	// Calculate RX roll value
	uint32_t curRoll = HAL_TIM_ReadCapturedValue(thisRX->timerSticks, TIM_CHANNEL_3);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	2108      	movs	r1, #8
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f006 f9e3 	bl	80082a4 <HAL_TIM_ReadCapturedValue>
 8001ede:	6178      	str	r0, [r7, #20]
	if (curRoll > RX_OFFSET - 1) curRoll = (curRoll - RX_OFFSET) * RX_COEFFICIENT;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f240 32e5 	movw	r2, #997	; 0x3e5
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d912      	bls.n	8001f10 <RX_UPDATE+0xd0>
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f2a3 33e6 	subw	r3, r3, #998	; 0x3e6
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe fb2f 	bl	8000554 <__aeabi_ui2d>
 8001ef6:	a32e      	add	r3, pc, #184	; (adr r3, 8001fb0 <RX_UPDATE+0x170>)
 8001ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efc:	f7fe fba4 	bl	8000648 <__aeabi_dmul>
 8001f00:	4603      	mov	r3, r0
 8001f02:	460c      	mov	r4, r1
 8001f04:	4618      	mov	r0, r3
 8001f06:	4621      	mov	r1, r4
 8001f08:	f7fe fdd8 	bl	8000abc <__aeabi_d2uiz>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	617b      	str	r3, [r7, #20]
	thisRX->roll = curRoll;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	609a      	str	r2, [r3, #8]
	// Calculate RX yaw value
	uint32_t curYaw = HAL_TIM_ReadCapturedValue(thisRX->timerSticks, TIM_CHANNEL_4);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	210c      	movs	r1, #12
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f006 f9c1 	bl	80082a4 <HAL_TIM_ReadCapturedValue>
 8001f22:	6138      	str	r0, [r7, #16]
	if (curYaw > RX_OFFSET - 1) curYaw = (curYaw - RX_OFFSET) * RX_COEFFICIENT;
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	f240 32e5 	movw	r2, #997	; 0x3e5
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d912      	bls.n	8001f54 <RX_UPDATE+0x114>
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	f2a3 33e6 	subw	r3, r3, #998	; 0x3e6
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe fb0d 	bl	8000554 <__aeabi_ui2d>
 8001f3a:	a31d      	add	r3, pc, #116	; (adr r3, 8001fb0 <RX_UPDATE+0x170>)
 8001f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f40:	f7fe fb82 	bl	8000648 <__aeabi_dmul>
 8001f44:	4603      	mov	r3, r0
 8001f46:	460c      	mov	r4, r1
 8001f48:	4618      	mov	r0, r3
 8001f4a:	4621      	mov	r1, r4
 8001f4c:	f7fe fdb6 	bl	8000abc <__aeabi_d2uiz>
 8001f50:	4603      	mov	r3, r0
 8001f52:	613b      	str	r3, [r7, #16]
	thisRX->yaw = curYaw;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	60da      	str	r2, [r3, #12]
	// Calculate Switch A state
	uint32_t curSwitchA = HAL_TIM_ReadCapturedValue(thisRX->timerSwitches, TIM_CHANNEL_1);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f006 f99f 	bl	80082a4 <HAL_TIM_ReadCapturedValue>
 8001f66:	60f8      	str	r0, [r7, #12]
	if (curSwitchA < RX_SWITCH_OFFSET) thisRX->switchA = 0;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f240 2225 	movw	r2, #549	; 0x225
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d803      	bhi.n	8001f7a <RX_UPDATE+0x13a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]
 8001f78:	e002      	b.n	8001f80 <RX_UPDATE+0x140>
	else thisRX->switchA = 1;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	611a      	str	r2, [r3, #16]
	// Calculate Switch B state
	uint32_t curSwitchB = HAL_TIM_ReadCapturedValue(thisRX->timerSwitches, TIM_CHANNEL_4);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	210c      	movs	r1, #12
 8001f86:	4618      	mov	r0, r3
 8001f88:	f006 f98c 	bl	80082a4 <HAL_TIM_ReadCapturedValue>
 8001f8c:	60b8      	str	r0, [r7, #8]
	if (curSwitchB < RX_SWITCH_OFFSET) thisRX->switchB = 0;
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	f240 2225 	movw	r2, #549	; 0x225
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d803      	bhi.n	8001fa0 <RX_UPDATE+0x160>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	615a      	str	r2, [r3, #20]
	else thisRX->switchB = 1;
}
 8001f9e:	e002      	b.n	8001fa6 <RX_UPDATE+0x166>
	else thisRX->switchB = 1;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	615a      	str	r2, [r3, #20]
}
 8001fa6:	bf00      	nop
 8001fa8:	3724      	adds	r7, #36	; 0x24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd90      	pop	{r4, r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	f5c28f5c 	.word	0xf5c28f5c
 8001fb4:	40005c28 	.word	0x40005c28

08001fb8 <RX_DISCONNECTED>:

void RX_DISCONNECTED(RX_CONTROLLER* thisRX)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
	thisRX->throttle = 0;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
	thisRX->pitch = 0;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	605a      	str	r2, [r3, #4]
	thisRX->roll = 0;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
	thisRX->yaw = 0;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	60da      	str	r2, [r3, #12]
	thisRX->switchA = 0;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	611a      	str	r2, [r3, #16]
	thisRX->switchB = 0;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	615a      	str	r2, [r3, #20]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <XLG_INIT>:
  * @param writeSize	write here
  * @retval void
  */

void XLG_INIT(I2C_HandleTypeDef* i2c)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
	uint8_t writeThis = 0b10000000;
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	73fb      	strb	r3, [r7, #15]
	XLG_WRITE(i2c, CTRL1_XL, &writeThis, 1);
 8001ffc:	f107 020f 	add.w	r2, r7, #15
 8002000:	2301      	movs	r3, #1
 8002002:	2110      	movs	r1, #16
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f80d 	bl	8002024 <XLG_WRITE>
	writeThis = 0b10001100;
 800200a:	238c      	movs	r3, #140	; 0x8c
 800200c:	73fb      	strb	r3, [r7, #15]
	XLG_WRITE(i2c, CTRL2_G, &writeThis, 1);
 800200e:	f107 020f 	add.w	r2, r7, #15
 8002012:	2301      	movs	r3, #1
 8002014:	2111      	movs	r1, #17
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f804 	bl	8002024 <XLG_WRITE>
}
 800201c:	bf00      	nop
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <XLG_WRITE>:

void XLG_WRITE(I2C_HandleTypeDef* i2c, uint8_t addr, uint8_t* writeByte, uint32_t writeSize)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af02      	add	r7, sp, #8
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	603b      	str	r3, [r7, #0]
 8002030:	460b      	mov	r3, r1
 8002032:	72fb      	strb	r3, [r7, #11]
	if (i2c->hdmatx->State == HAL_DMA_STATE_READY)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002038:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b01      	cmp	r3, #1
 8002040:	d10f      	bne.n	8002062 <XLG_WRITE+0x3e>
	{
		HAL_I2C_Mem_Write_DMA(i2c, XLG_I2C_ADDR, addr, XLG_REG_SIZE, writeByte, writeSize);
 8002042:	7afb      	ldrb	r3, [r7, #11]
 8002044:	b29a      	uxth	r2, r3
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	b29b      	uxth	r3, r3
 800204a:	9301      	str	r3, [sp, #4]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	2301      	movs	r3, #1
 8002052:	21d4      	movs	r1, #212	; 0xd4
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f002 feff 	bl	8004e58 <HAL_I2C_Mem_Write_DMA>
		i2c->State = HAL_I2C_STATE_READY;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2220      	movs	r2, #32
 800205e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}
}
 8002062:	bf00      	nop
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <XLG_READ>:

void XLG_READ(I2C_HandleTypeDef* i2c, uint8_t addr, uint8_t* readByte, uint32_t readSize)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b086      	sub	sp, #24
 800206e:	af02      	add	r7, sp, #8
 8002070:	60f8      	str	r0, [r7, #12]
 8002072:	607a      	str	r2, [r7, #4]
 8002074:	603b      	str	r3, [r7, #0]
 8002076:	460b      	mov	r3, r1
 8002078:	72fb      	strb	r3, [r7, #11]
	if (i2c->hdmarx->State == HAL_DMA_STATE_READY)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b01      	cmp	r3, #1
 8002086:	d10f      	bne.n	80020a8 <XLG_READ+0x3e>
	{
		HAL_I2C_Mem_Read_DMA(i2c, XLG_I2C_ADDR, addr, XLG_REG_SIZE, readByte, readSize);
 8002088:	7afb      	ldrb	r3, [r7, #11]
 800208a:	b29a      	uxth	r2, r3
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	b29b      	uxth	r3, r3
 8002090:	9301      	str	r3, [sp, #4]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	2301      	movs	r3, #1
 8002098:	21d4      	movs	r1, #212	; 0xd4
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f002 ffd2 	bl	8005044 <HAL_I2C_Mem_Read_DMA>
		i2c->State = HAL_I2C_STATE_READY;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2220      	movs	r2, #32
 80020a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}
}
 80020a8:	bf00      	nop
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <XLG_XL_DATA_READY>:

_Bool XLG_XL_DATA_READY(I2C_HandleTypeDef* i2c)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	73fb      	strb	r3, [r7, #15]
	XLG_READ(i2c, STATUS_REG, &status, 1);
 80020bc:	f107 020f 	add.w	r2, r7, #15
 80020c0:	2301      	movs	r3, #1
 80020c2:	211e      	movs	r1, #30
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff ffd0 	bl	800206a <XLG_READ>
	return (status & 0b1); // Mask with XLDA bit in STATUS_REG
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	bf14      	ite	ne
 80020d4:	2301      	movne	r3, #1
 80020d6:	2300      	moveq	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <XLG_G_DATA_READY>:

_Bool XLG_G_DATA_READY(I2C_HandleTypeDef* i2c)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b084      	sub	sp, #16
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	73fb      	strb	r3, [r7, #15]
	XLG_READ(i2c, STATUS_REG, &status, 1);
 80020ee:	f107 020f 	add.w	r2, r7, #15
 80020f2:	2301      	movs	r3, #1
 80020f4:	211e      	movs	r1, #30
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff ffb7 	bl	800206a <XLG_READ>
	return (status & 0b10); // Mask with DGA bit in STATUS_REG
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	bf14      	ite	ne
 8002106:	2301      	movne	r3, #1
 8002108:	2300      	moveq	r3, #0
 800210a:	b2db      	uxtb	r3, r3
}
 800210c:	4618      	mov	r0, r3
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <XLG_G_DATA_READ>:
	XLG_READ(i2c, STATUS_REG, &status, 1);
	return (status & 0b100); // Mask with TDA bit in STATUS_REG
}

void XLG_G_DATA_READ(I2C_HandleTypeDef* i2c, XLG_DATA* gData)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
	if (XLG_G_DATA_READY(i2c))
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff ffdf 	bl	80020e2 <XLG_G_DATA_READY>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d064      	beq.n	80021f4 <XLG_G_DATA_READ+0xe0>
	{
		gData->dataReady = true;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2201      	movs	r2, #1
 800212e:	719a      	strb	r2, [r3, #6]
		uint8_t readByte[6] = {0};
 8002130:	f107 0308 	add.w	r3, r7, #8
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	809a      	strh	r2, [r3, #4]
		XLG_READ(i2c, OUTX_H_G, &readByte[0], 1);
 800213a:	f107 0208 	add.w	r2, r7, #8
 800213e:	2301      	movs	r3, #1
 8002140:	2123      	movs	r1, #35	; 0x23
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff ff91 	bl	800206a <XLG_READ>
		XLG_READ(i2c, OUTX_L_G, &readByte[1], 1);
 8002148:	f107 0308 	add.w	r3, r7, #8
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	2301      	movs	r3, #1
 8002150:	2122      	movs	r1, #34	; 0x22
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff ff89 	bl	800206a <XLG_READ>
		XLG_READ(i2c, OUTY_H_G, &readByte[2], 1);
 8002158:	f107 0308 	add.w	r3, r7, #8
 800215c:	1c9a      	adds	r2, r3, #2
 800215e:	2301      	movs	r3, #1
 8002160:	2125      	movs	r1, #37	; 0x25
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff ff81 	bl	800206a <XLG_READ>
		XLG_READ(i2c, OUTY_L_G, &readByte[3], 1);
 8002168:	f107 0308 	add.w	r3, r7, #8
 800216c:	1cda      	adds	r2, r3, #3
 800216e:	2301      	movs	r3, #1
 8002170:	2124      	movs	r1, #36	; 0x24
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff ff79 	bl	800206a <XLG_READ>
		XLG_READ(i2c, OUTZ_H_G, &readByte[4], 1);
 8002178:	f107 0308 	add.w	r3, r7, #8
 800217c:	1d1a      	adds	r2, r3, #4
 800217e:	2301      	movs	r3, #1
 8002180:	2127      	movs	r1, #39	; 0x27
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff ff71 	bl	800206a <XLG_READ>
		XLG_READ(i2c, OUTZ_L_G, &readByte[5], 1);
 8002188:	f107 0308 	add.w	r3, r7, #8
 800218c:	1d5a      	adds	r2, r3, #5
 800218e:	2301      	movs	r3, #1
 8002190:	2126      	movs	r1, #38	; 0x26
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff ff69 	bl	800206a <XLG_READ>
		gData->x = readByte[0];
 8002198:	7a3b      	ldrb	r3, [r7, #8]
 800219a:	b21a      	sxth	r2, r3
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	801a      	strh	r2, [r3, #0]
		gData->x = (gData->x << 8) | readByte[1];
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021a6:	021b      	lsls	r3, r3, #8
 80021a8:	b21a      	sxth	r2, r3
 80021aa:	7a7b      	ldrb	r3, [r7, #9]
 80021ac:	b21b      	sxth	r3, r3
 80021ae:	4313      	orrs	r3, r2
 80021b0:	b21a      	sxth	r2, r3
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	801a      	strh	r2, [r3, #0]
		gData->y = readByte[2];
 80021b6:	7abb      	ldrb	r3, [r7, #10]
 80021b8:	b21a      	sxth	r2, r3
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	805a      	strh	r2, [r3, #2]
		gData->y = (gData->y << 8) | readByte[3];
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80021c4:	021b      	lsls	r3, r3, #8
 80021c6:	b21a      	sxth	r2, r3
 80021c8:	7afb      	ldrb	r3, [r7, #11]
 80021ca:	b21b      	sxth	r3, r3
 80021cc:	4313      	orrs	r3, r2
 80021ce:	b21a      	sxth	r2, r3
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	805a      	strh	r2, [r3, #2]
		gData->z = readByte[4];
 80021d4:	7b3b      	ldrb	r3, [r7, #12]
 80021d6:	b21a      	sxth	r2, r3
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	809a      	strh	r2, [r3, #4]
		gData->z = (gData->z << 8) | readByte[5];
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80021e2:	021b      	lsls	r3, r3, #8
 80021e4:	b21a      	sxth	r2, r3
 80021e6:	7b7b      	ldrb	r3, [r7, #13]
 80021e8:	b21b      	sxth	r3, r3
 80021ea:	4313      	orrs	r3, r2
 80021ec:	b21a      	sxth	r2, r3
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	809a      	strh	r2, [r3, #4]
	}
	else
	{
		gData->dataReady = false;
	}
}
 80021f2:	e002      	b.n	80021fa <XLG_G_DATA_READ+0xe6>
		gData->dataReady = false;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	2200      	movs	r2, #0
 80021f8:	719a      	strb	r2, [r3, #6]
}
 80021fa:	bf00      	nop
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <XLG_XL_DATA_READ>:

void XLG_XL_DATA_READ(I2C_HandleTypeDef* i2c, XLG_DATA* xlData)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b084      	sub	sp, #16
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	6039      	str	r1, [r7, #0]
	if (XLG_XL_DATA_READY(i2c))
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff ff4f 	bl	80020b0 <XLG_XL_DATA_READY>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d064      	beq.n	80022e2 <XLG_XL_DATA_READ+0xe0>
	{
		xlData->dataReady = true;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	2201      	movs	r2, #1
 800221c:	719a      	strb	r2, [r3, #6]
		uint8_t readByte[6] = {0};
 800221e:	f107 0308 	add.w	r3, r7, #8
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	809a      	strh	r2, [r3, #4]
		XLG_READ(i2c, OUTX_H_XL, &readByte[0], 1);
 8002228:	f107 0208 	add.w	r2, r7, #8
 800222c:	2301      	movs	r3, #1
 800222e:	2129      	movs	r1, #41	; 0x29
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff ff1a 	bl	800206a <XLG_READ>
		XLG_READ(i2c, OUTX_L_XL, &readByte[1], 1);
 8002236:	f107 0308 	add.w	r3, r7, #8
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	2301      	movs	r3, #1
 800223e:	2128      	movs	r1, #40	; 0x28
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff ff12 	bl	800206a <XLG_READ>
		XLG_READ(i2c, OUTY_H_XL, &readByte[2], 1);
 8002246:	f107 0308 	add.w	r3, r7, #8
 800224a:	1c9a      	adds	r2, r3, #2
 800224c:	2301      	movs	r3, #1
 800224e:	212b      	movs	r1, #43	; 0x2b
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7ff ff0a 	bl	800206a <XLG_READ>
		XLG_READ(i2c, OUTY_L_XL, &readByte[3], 1);
 8002256:	f107 0308 	add.w	r3, r7, #8
 800225a:	1cda      	adds	r2, r3, #3
 800225c:	2301      	movs	r3, #1
 800225e:	212a      	movs	r1, #42	; 0x2a
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff ff02 	bl	800206a <XLG_READ>
		XLG_READ(i2c, OUTZ_H_XL, &readByte[4], 1);
 8002266:	f107 0308 	add.w	r3, r7, #8
 800226a:	1d1a      	adds	r2, r3, #4
 800226c:	2301      	movs	r3, #1
 800226e:	212d      	movs	r1, #45	; 0x2d
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff fefa 	bl	800206a <XLG_READ>
		XLG_READ(i2c, OUTZ_L_XL, &readByte[5], 1);
 8002276:	f107 0308 	add.w	r3, r7, #8
 800227a:	1d5a      	adds	r2, r3, #5
 800227c:	2301      	movs	r3, #1
 800227e:	212c      	movs	r1, #44	; 0x2c
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff fef2 	bl	800206a <XLG_READ>
		xlData->x = readByte[0];
 8002286:	7a3b      	ldrb	r3, [r7, #8]
 8002288:	b21a      	sxth	r2, r3
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	801a      	strh	r2, [r3, #0]
		xlData->x = (xlData->x << 8) | readByte[1];
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002294:	021b      	lsls	r3, r3, #8
 8002296:	b21a      	sxth	r2, r3
 8002298:	7a7b      	ldrb	r3, [r7, #9]
 800229a:	b21b      	sxth	r3, r3
 800229c:	4313      	orrs	r3, r2
 800229e:	b21a      	sxth	r2, r3
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	801a      	strh	r2, [r3, #0]
		xlData->y = readByte[2];
 80022a4:	7abb      	ldrb	r3, [r7, #10]
 80022a6:	b21a      	sxth	r2, r3
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	805a      	strh	r2, [r3, #2]
		xlData->y = (xlData->y << 8) | readByte[3];
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80022b2:	021b      	lsls	r3, r3, #8
 80022b4:	b21a      	sxth	r2, r3
 80022b6:	7afb      	ldrb	r3, [r7, #11]
 80022b8:	b21b      	sxth	r3, r3
 80022ba:	4313      	orrs	r3, r2
 80022bc:	b21a      	sxth	r2, r3
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	805a      	strh	r2, [r3, #2]
		xlData->z = readByte[4];
 80022c2:	7b3b      	ldrb	r3, [r7, #12]
 80022c4:	b21a      	sxth	r2, r3
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	809a      	strh	r2, [r3, #4]
		xlData->z = (xlData->z << 8) | readByte[5];
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80022d0:	021b      	lsls	r3, r3, #8
 80022d2:	b21a      	sxth	r2, r3
 80022d4:	7b7b      	ldrb	r3, [r7, #13]
 80022d6:	b21b      	sxth	r3, r3
 80022d8:	4313      	orrs	r3, r2
 80022da:	b21a      	sxth	r2, r3
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	809a      	strh	r2, [r3, #4]
	}
	else
	{
		xlData->dataReady = false;
	}
}
 80022e0:	e002      	b.n	80022e8 <XLG_XL_DATA_READ+0xe6>
		xlData->dataReady = false;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2200      	movs	r2, #0
 80022e6:	719a      	strb	r2, [r3, #6]
}
 80022e8:	bf00      	nop
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Interrupt service routine for command line settings
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
	cmd = escCMD - '0';
 80022f8:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <HAL_UART_RxCpltCallback+0x48>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	3b30      	subs	r3, #48	; 0x30
 80022fe:	4a0f      	ldr	r2, [pc, #60]	; (800233c <HAL_UART_RxCpltCallback+0x4c>)
 8002300:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(&huart3, &escCMD, 1);
 8002302:	2201      	movs	r2, #1
 8002304:	490c      	ldr	r1, [pc, #48]	; (8002338 <HAL_UART_RxCpltCallback+0x48>)
 8002306:	480e      	ldr	r0, [pc, #56]	; (8002340 <HAL_UART_RxCpltCallback+0x50>)
 8002308:	f006 fee2 	bl	80090d0 <HAL_UART_Receive_IT>
	sprintf((char*)sendMsg, "\r\nSending command %c\r\n", escCMD);
 800230c:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <HAL_UART_RxCpltCallback+0x48>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	461a      	mov	r2, r3
 8002312:	490c      	ldr	r1, [pc, #48]	; (8002344 <HAL_UART_RxCpltCallback+0x54>)
 8002314:	480c      	ldr	r0, [pc, #48]	; (8002348 <HAL_UART_RxCpltCallback+0x58>)
 8002316:	f007 ff23 	bl	800a160 <siprintf>
	HAL_UART_Transmit_IT(&huart3, sendMsg, strlen((char*)sendMsg));
 800231a:	480b      	ldr	r0, [pc, #44]	; (8002348 <HAL_UART_RxCpltCallback+0x58>)
 800231c:	f7fd ff80 	bl	8000220 <strlen>
 8002320:	4603      	mov	r3, r0
 8002322:	b29b      	uxth	r3, r3
 8002324:	461a      	mov	r2, r3
 8002326:	4908      	ldr	r1, [pc, #32]	; (8002348 <HAL_UART_RxCpltCallback+0x58>)
 8002328:	4805      	ldr	r0, [pc, #20]	; (8002340 <HAL_UART_RxCpltCallback+0x50>)
 800232a:	f006 fe75 	bl	8009018 <HAL_UART_Transmit_IT>
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000290 	.word	0x20000290
 800233c:	20000090 	.word	0x20000090
 8002340:	20000148 	.word	0x20000148
 8002344:	0800a800 	.word	0x0800a800
 8002348:	20000360 	.word	0x20000360

0800234c <HAL_TIM_IC_CaptureCallback>:

// Interrupt service routine for RX
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
	RX_UPDATE(myRX);
 8002354:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <HAL_TIM_IC_CaptureCallback+0x34>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fd71 	bl	8001e40 <RX_UPDATE>
	ESC_CALC_THROTTLE(myESCSet, myRX, armed);
 800235e:	4b09      	ldr	r3, [pc, #36]	; (8002384 <HAL_TIM_IC_CaptureCallback+0x38>)
 8002360:	6818      	ldr	r0, [r3, #0]
 8002362:	4b07      	ldr	r3, [pc, #28]	; (8002380 <HAL_TIM_IC_CaptureCallback+0x34>)
 8002364:	6819      	ldr	r1, [r3, #0]
 8002366:	4b08      	ldr	r3, [pc, #32]	; (8002388 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	461a      	mov	r2, r3
 800236c:	f7ff fb58 	bl	8001a20 <ESC_CALC_THROTTLE>
	watchdog = 0;
 8002370:	4b06      	ldr	r3, [pc, #24]	; (800238c <HAL_TIM_IC_CaptureCallback+0x40>)
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20000314 	.word	0x20000314
 8002384:	2000028c 	.word	0x2000028c
 8002388:	20000098 	.word	0x20000098
 800238c:	20000094 	.word	0x20000094

08002390 <HAL_I2C_MasterRxCpltCallback>:

// XLG data interrrupt service routine
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	XLG_G_DATA_READ(&hi2c1, &gData);
 8002398:	4905      	ldr	r1, [pc, #20]	; (80023b0 <HAL_I2C_MasterRxCpltCallback+0x20>)
 800239a:	4806      	ldr	r0, [pc, #24]	; (80023b4 <HAL_I2C_MasterRxCpltCallback+0x24>)
 800239c:	f7ff feba 	bl	8002114 <XLG_G_DATA_READ>
	XLG_XL_DATA_READ(&hi2c1, &xlData);
 80023a0:	4905      	ldr	r1, [pc, #20]	; (80023b8 <HAL_I2C_MasterRxCpltCallback+0x28>)
 80023a2:	4804      	ldr	r0, [pc, #16]	; (80023b4 <HAL_I2C_MasterRxCpltCallback+0x24>)
 80023a4:	f7ff ff2d 	bl	8002202 <XLG_XL_DATA_READ>
}
 80023a8:	bf00      	nop
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20000390 	.word	0x20000390
 80023b4:	20000238 	.word	0x20000238
 80023b8:	20000598 	.word	0x20000598

080023bc <DMA_XferCpltCallback>:

void DMA_XferCpltCallback(DMA_HandleTypeDef *hdma)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
//	if (armed && !myESCSet->SendingFlag)
//	{
//		ESC_UPDATE_THROTTLE(myESCSet);
//	}
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023d4:	f001 faeb 	bl	80039ae <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(2000);
 80023d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80023dc:	f001 fb44 	bl	8003a68 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023e0:	f000 f8c6 	bl	8002570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023e4:	f000 fcd0 	bl	8002d88 <MX_GPIO_Init>
  MX_DMA_Init();
 80023e8:	f000 fc88 	bl	8002cfc <MX_DMA_Init>
  MX_USART3_UART_Init();
 80023ec:	f000 fc4e 	bl	8002c8c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 80023f0:	f000 fc7c 	bl	8002cec <MX_USB_OTG_FS_USB_Init>
  MX_TIM4_Init();
 80023f4:	f000 fb80 	bl	8002af8 <MX_TIM4_Init>
  MX_ADC1_Init();
 80023f8:	f000 f952 	bl	80026a0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80023fc:	f000 f9a2 	bl	8002744 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002400:	f000 fafe 	bl	8002a00 <MX_TIM3_Init>
  MX_TIM2_Init();
 8002404:	f000 fa7e 	bl	8002904 <MX_TIM2_Init>
  MX_TIM1_Init();
 8002408:	f000 f9dc 	bl	80027c4 <MX_TIM1_Init>
  MX_TIM5_Init();
 800240c:	f000 fbe4 	bl	8002bd8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
	escDMASet[0] = &hdma_tim4_ch1; 		// DMA1: Stream 0 (S0)
 8002410:	4b42      	ldr	r3, [pc, #264]	; (800251c <main+0x14c>)
 8002412:	4a43      	ldr	r2, [pc, #268]	; (8002520 <main+0x150>)
 8002414:	601a      	str	r2, [r3, #0]
	escDMASet[1] = &hdma_tim4_ch2; 		// DMA1: Stream 3 (S3)
 8002416:	4b41      	ldr	r3, [pc, #260]	; (800251c <main+0x14c>)
 8002418:	4a42      	ldr	r2, [pc, #264]	; (8002524 <main+0x154>)
 800241a:	605a      	str	r2, [r3, #4]
	escDMASet[2] = &hdma_tim4_ch3; 		// DMA1: Stream 7 (S7)
 800241c:	4b3f      	ldr	r3, [pc, #252]	; (800251c <main+0x14c>)
 800241e:	4a42      	ldr	r2, [pc, #264]	; (8002528 <main+0x158>)
 8002420:	609a      	str	r2, [r3, #8]
	escDMASet[3] = &hdma_tim5_ch2; 		// DMA1: Stream 4 (S4)
 8002422:	4b3e      	ldr	r3, [pc, #248]	; (800251c <main+0x14c>)
 8002424:	4a41      	ldr	r2, [pc, #260]	; (800252c <main+0x15c>)
 8002426:	60da      	str	r2, [r3, #12]
	dmaPwmTimers[0] = &htim4;
 8002428:	4b41      	ldr	r3, [pc, #260]	; (8002530 <main+0x160>)
 800242a:	4a42      	ldr	r2, [pc, #264]	; (8002534 <main+0x164>)
 800242c:	601a      	str	r2, [r3, #0]
	dmaPwmTimers[1] = &htim5;
 800242e:	4b40      	ldr	r3, [pc, #256]	; (8002530 <main+0x160>)
 8002430:	4a41      	ldr	r2, [pc, #260]	; (8002538 <main+0x168>)
 8002432:	605a      	str	r2, [r3, #4]
	myESCSet = ESC_INIT(dmaPwmTimers, &htim3, escDMASet);
 8002434:	4a39      	ldr	r2, [pc, #228]	; (800251c <main+0x14c>)
 8002436:	4941      	ldr	r1, [pc, #260]	; (800253c <main+0x16c>)
 8002438:	483d      	ldr	r0, [pc, #244]	; (8002530 <main+0x160>)
 800243a:	f7fe fcdf 	bl	8000dfc <ESC_INIT>
 800243e:	4602      	mov	r2, r0
 8002440:	4b3f      	ldr	r3, [pc, #252]	; (8002540 <main+0x170>)
 8002442:	601a      	str	r2, [r3, #0]
	myRX = RX_INIT(&htim1, &htim2);
 8002444:	493f      	ldr	r1, [pc, #252]	; (8002544 <main+0x174>)
 8002446:	4840      	ldr	r0, [pc, #256]	; (8002548 <main+0x178>)
 8002448:	f7ff fcac 	bl	8001da4 <RX_INIT>
 800244c:	4602      	mov	r2, r0
 800244e:	4b3f      	ldr	r3, [pc, #252]	; (800254c <main+0x17c>)
 8002450:	601a      	str	r2, [r3, #0]
	XLG_INIT(&hi2c1);
 8002452:	483f      	ldr	r0, [pc, #252]	; (8002550 <main+0x180>)
 8002454:	f7ff fdcc 	bl	8001ff0 <XLG_INIT>
	XLG_G_DATA_READ(&hi2c1, &gData);
 8002458:	493e      	ldr	r1, [pc, #248]	; (8002554 <main+0x184>)
 800245a:	483d      	ldr	r0, [pc, #244]	; (8002550 <main+0x180>)
 800245c:	f7ff fe5a 	bl	8002114 <XLG_G_DATA_READ>
	XLG_XL_DATA_READ(&hi2c1, &xlData);
 8002460:	493d      	ldr	r1, [pc, #244]	; (8002558 <main+0x188>)
 8002462:	483b      	ldr	r0, [pc, #236]	; (8002550 <main+0x180>)
 8002464:	f7ff fecd 	bl	8002202 <XLG_XL_DATA_READ>
	HAL_UART_Receive_IT(&huart3, &escCMD, 1);
 8002468:	2201      	movs	r2, #1
 800246a:	493c      	ldr	r1, [pc, #240]	; (800255c <main+0x18c>)
 800246c:	483c      	ldr	r0, [pc, #240]	; (8002560 <main+0x190>)
 800246e:	f006 fe2f 	bl	80090d0 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		watchdog++;
 8002472:	4b3c      	ldr	r3, [pc, #240]	; (8002564 <main+0x194>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	3301      	adds	r3, #1
 8002478:	4a3a      	ldr	r2, [pc, #232]	; (8002564 <main+0x194>)
 800247a:	6013      	str	r3, [r2, #0]
		if (watchdog > 1000)
 800247c:	4b39      	ldr	r3, [pc, #228]	; (8002564 <main+0x194>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002484:	d91d      	bls.n	80024c2 <main+0xf2>
		{
			armed = 0;
 8002486:	4b38      	ldr	r3, [pc, #224]	; (8002568 <main+0x198>)
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
			RX_DISCONNECTED(myRX);
 800248c:	4b2f      	ldr	r3, [pc, #188]	; (800254c <main+0x17c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fd91 	bl	8001fb8 <RX_DISCONNECTED>
			ESC_CALC_THROTTLE(myESCSet, myRX, armed);
 8002496:	4b2a      	ldr	r3, [pc, #168]	; (8002540 <main+0x170>)
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	4b2c      	ldr	r3, [pc, #176]	; (800254c <main+0x17c>)
 800249c:	6819      	ldr	r1, [r3, #0]
 800249e:	4b32      	ldr	r3, [pc, #200]	; (8002568 <main+0x198>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	f7ff fabc 	bl	8001a20 <ESC_CALC_THROTTLE>
			ESC_UPDATE_THROTTLE(myESCSet);
 80024a8:	4b25      	ldr	r3, [pc, #148]	; (8002540 <main+0x170>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fa79 	bl	80019a4 <ESC_UPDATE_THROTTLE>
			ESC_SEND_CMD(myESCSet, DSHOT_CMD_BEACON3, ALL_MOTORS);
 80024b2:	4b23      	ldr	r3, [pc, #140]	; (8002540 <main+0x170>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2208      	movs	r2, #8
 80024b8:	2103      	movs	r1, #3
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fa96 	bl	80019ec <ESC_SEND_CMD>
 80024c0:	e7d7      	b.n	8002472 <main+0xa2>
		}
		else if (!myRX->switchA)
 80024c2:	4b22      	ldr	r3, [pc, #136]	; (800254c <main+0x17c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10d      	bne.n	80024e8 <main+0x118>
		{
			armed = 0;
 80024cc:	4b26      	ldr	r3, [pc, #152]	; (8002568 <main+0x198>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	701a      	strb	r2, [r3, #0]
			ESC_SEND_CMD(myESCSet, DSHOT_CMD_MOTOR_STOP, ALL_MOTORS);
 80024d2:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <main+0x170>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2208      	movs	r2, #8
 80024d8:	2100      	movs	r1, #0
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff fa86 	bl	80019ec <ESC_SEND_CMD>
			throttleHighFlag = 0;
 80024e0:	4b22      	ldr	r3, [pc, #136]	; (800256c <main+0x19c>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
 80024e6:	e7c4      	b.n	8002472 <main+0xa2>
		}
		else if ((myRX->switchA && (myRX->throttle < 50)) || throttleHighFlag)
 80024e8:	4b18      	ldr	r3, [pc, #96]	; (800254c <main+0x17c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d004      	beq.n	80024fc <main+0x12c>
 80024f2:	4b16      	ldr	r3, [pc, #88]	; (800254c <main+0x17c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b31      	cmp	r3, #49	; 0x31
 80024fa:	d903      	bls.n	8002504 <main+0x134>
 80024fc:	4b1b      	ldr	r3, [pc, #108]	; (800256c <main+0x19c>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0b6      	beq.n	8002472 <main+0xa2>
		{
			armed = 1;
 8002504:	4b18      	ldr	r3, [pc, #96]	; (8002568 <main+0x198>)
 8002506:	2201      	movs	r2, #1
 8002508:	701a      	strb	r2, [r3, #0]
			ESC_UPDATE_THROTTLE(myESCSet);
 800250a:	4b0d      	ldr	r3, [pc, #52]	; (8002540 <main+0x170>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fa48 	bl	80019a4 <ESC_UPDATE_THROTTLE>
			throttleHighFlag = 1;
 8002514:	4b15      	ldr	r3, [pc, #84]	; (800256c <main+0x19c>)
 8002516:	2201      	movs	r2, #1
 8002518:	701a      	strb	r2, [r3, #0]
		watchdog++;
 800251a:	e7aa      	b.n	8002472 <main+0xa2>
 800251c:	200001c8 	.word	0x200001c8
 8002520:	20000538 	.word	0x20000538
 8002524:	200000a8 	.word	0x200000a8
 8002528:	200003f8 	.word	0x200003f8
 800252c:	20000398 	.word	0x20000398
 8002530:	20000284 	.word	0x20000284
 8002534:	20000108 	.word	0x20000108
 8002538:	20000294 	.word	0x20000294
 800253c:	200002d4 	.word	0x200002d4
 8002540:	2000028c 	.word	0x2000028c
 8002544:	200004f8 	.word	0x200004f8
 8002548:	20000458 	.word	0x20000458
 800254c:	20000314 	.word	0x20000314
 8002550:	20000238 	.word	0x20000238
 8002554:	20000390 	.word	0x20000390
 8002558:	20000598 	.word	0x20000598
 800255c:	20000290 	.word	0x20000290
 8002560:	20000148 	.word	0x20000148
 8002564:	20000094 	.word	0x20000094
 8002568:	20000098 	.word	0x20000098
 800256c:	20000000 	.word	0x20000000

08002570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b0b4      	sub	sp, #208	; 0xd0
 8002574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002576:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800257a:	2230      	movs	r2, #48	; 0x30
 800257c:	2100      	movs	r1, #0
 800257e:	4618      	mov	r0, r3
 8002580:	f007 fd2d 	bl	8009fde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002584:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002594:	f107 030c 	add.w	r3, r7, #12
 8002598:	2280      	movs	r2, #128	; 0x80
 800259a:	2100      	movs	r1, #0
 800259c:	4618      	mov	r0, r3
 800259e:	f007 fd1e 	bl	8009fde <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80025a2:	f004 f93d 	bl	8006820 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025a6:	4b3b      	ldr	r3, [pc, #236]	; (8002694 <SystemClock_Config+0x124>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a3a      	ldr	r2, [pc, #232]	; (8002694 <SystemClock_Config+0x124>)
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
 80025b2:	4b38      	ldr	r3, [pc, #224]	; (8002694 <SystemClock_Config+0x124>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025be:	4b36      	ldr	r3, [pc, #216]	; (8002698 <SystemClock_Config+0x128>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a35      	ldr	r2, [pc, #212]	; (8002698 <SystemClock_Config+0x128>)
 80025c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	4b33      	ldr	r3, [pc, #204]	; (8002698 <SystemClock_Config+0x128>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025d2:	607b      	str	r3, [r7, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025d6:	2301      	movs	r3, #1
 80025d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80025dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80025e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025e4:	2302      	movs	r3, #2
 80025e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 80025f2:	2308      	movs	r3, #8
 80025f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 80025f8:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80025fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002600:	2302      	movs	r3, #2
 8002602:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002606:	2309      	movs	r3, #9
 8002608:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800260c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002610:	4618      	mov	r0, r3
 8002612:	f004 f965 	bl	80068e0 <HAL_RCC_OscConfig>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800261c:	f000 fcae 	bl	8002f7c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002620:	f004 f90e 	bl	8006840 <HAL_PWREx_EnableOverDrive>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800262a:	f000 fca7 	bl	8002f7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800262e:	230f      	movs	r3, #15
 8002630:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002634:	2302      	movs	r3, #2
 8002636:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800263a:	2300      	movs	r3, #0
 800263c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002640:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002644:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800264c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002650:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002654:	2107      	movs	r1, #7
 8002656:	4618      	mov	r0, r3
 8002658:	f004 fbe6 	bl	8006e28 <HAL_RCC_ClockConfig>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8002662:	f000 fc8b 	bl	8002f7c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8002666:	4b0d      	ldr	r3, [pc, #52]	; (800269c <SystemClock_Config+0x12c>)
 8002668:	60fb      	str	r3, [r7, #12]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800266a:	2300      	movs	r3, #0
 800266c:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800266e:	2300      	movs	r3, #0
 8002670:	66bb      	str	r3, [r7, #104]	; 0x68
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002672:	2300      	movs	r3, #0
 8002674:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002678:	f107 030c 	add.w	r3, r7, #12
 800267c:	4618      	mov	r0, r3
 800267e:	f004 fdcb 	bl	8007218 <HAL_RCCEx_PeriphCLKConfig>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8002688:	f000 fc78 	bl	8002f7c <Error_Handler>
  }
}
 800268c:	bf00      	nop
 800268e:	37d0      	adds	r7, #208	; 0xd0
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40023800 	.word	0x40023800
 8002698:	40007000 	.word	0x40007000
 800269c:	00204100 	.word	0x00204100

080026a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80026a6:	463b      	mov	r3, r7
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80026b2:	4b21      	ldr	r3, [pc, #132]	; (8002738 <MX_ADC1_Init+0x98>)
 80026b4:	4a21      	ldr	r2, [pc, #132]	; (800273c <MX_ADC1_Init+0x9c>)
 80026b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80026b8:	4b1f      	ldr	r3, [pc, #124]	; (8002738 <MX_ADC1_Init+0x98>)
 80026ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80026c0:	4b1d      	ldr	r3, [pc, #116]	; (8002738 <MX_ADC1_Init+0x98>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80026c6:	4b1c      	ldr	r3, [pc, #112]	; (8002738 <MX_ADC1_Init+0x98>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80026cc:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <MX_ADC1_Init+0x98>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80026d2:	4b19      	ldr	r3, [pc, #100]	; (8002738 <MX_ADC1_Init+0x98>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80026da:	4b17      	ldr	r3, [pc, #92]	; (8002738 <MX_ADC1_Init+0x98>)
 80026dc:	2200      	movs	r2, #0
 80026de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80026e0:	4b15      	ldr	r3, [pc, #84]	; (8002738 <MX_ADC1_Init+0x98>)
 80026e2:	4a17      	ldr	r2, [pc, #92]	; (8002740 <MX_ADC1_Init+0xa0>)
 80026e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026e6:	4b14      	ldr	r3, [pc, #80]	; (8002738 <MX_ADC1_Init+0x98>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80026ec:	4b12      	ldr	r3, [pc, #72]	; (8002738 <MX_ADC1_Init+0x98>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80026f2:	4b11      	ldr	r3, [pc, #68]	; (8002738 <MX_ADC1_Init+0x98>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80026fa:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <MX_ADC1_Init+0x98>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002700:	480d      	ldr	r0, [pc, #52]	; (8002738 <MX_ADC1_Init+0x98>)
 8002702:	f001 f9d3 	bl	8003aac <HAL_ADC_Init>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800270c:	f000 fc36 	bl	8002f7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002710:	2309      	movs	r3, #9
 8002712:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002714:	2301      	movs	r3, #1
 8002716:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002718:	2300      	movs	r3, #0
 800271a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800271c:	463b      	mov	r3, r7
 800271e:	4619      	mov	r1, r3
 8002720:	4805      	ldr	r0, [pc, #20]	; (8002738 <MX_ADC1_Init+0x98>)
 8002722:	f001 fa07 	bl	8003b34 <HAL_ADC_ConfigChannel>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800272c:	f000 fc26 	bl	8002f7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002730:	bf00      	nop
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	20000318 	.word	0x20000318
 800273c:	40012000 	.word	0x40012000
 8002740:	0f000001 	.word	0x0f000001

08002744 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002748:	4b1b      	ldr	r3, [pc, #108]	; (80027b8 <MX_I2C1_Init+0x74>)
 800274a:	4a1c      	ldr	r2, [pc, #112]	; (80027bc <MX_I2C1_Init+0x78>)
 800274c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800274e:	4b1a      	ldr	r3, [pc, #104]	; (80027b8 <MX_I2C1_Init+0x74>)
 8002750:	4a1b      	ldr	r2, [pc, #108]	; (80027c0 <MX_I2C1_Init+0x7c>)
 8002752:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 212;
 8002754:	4b18      	ldr	r3, [pc, #96]	; (80027b8 <MX_I2C1_Init+0x74>)
 8002756:	22d4      	movs	r2, #212	; 0xd4
 8002758:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800275a:	4b17      	ldr	r3, [pc, #92]	; (80027b8 <MX_I2C1_Init+0x74>)
 800275c:	2201      	movs	r2, #1
 800275e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002760:	4b15      	ldr	r3, [pc, #84]	; (80027b8 <MX_I2C1_Init+0x74>)
 8002762:	2200      	movs	r2, #0
 8002764:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002766:	4b14      	ldr	r3, [pc, #80]	; (80027b8 <MX_I2C1_Init+0x74>)
 8002768:	2200      	movs	r2, #0
 800276a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800276c:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <MX_I2C1_Init+0x74>)
 800276e:	2200      	movs	r2, #0
 8002770:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002772:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <MX_I2C1_Init+0x74>)
 8002774:	2200      	movs	r2, #0
 8002776:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002778:	4b0f      	ldr	r3, [pc, #60]	; (80027b8 <MX_I2C1_Init+0x74>)
 800277a:	2200      	movs	r2, #0
 800277c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800277e:	480e      	ldr	r0, [pc, #56]	; (80027b8 <MX_I2C1_Init+0x74>)
 8002780:	f002 fada 	bl	8004d38 <HAL_I2C_Init>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800278a:	f000 fbf7 	bl	8002f7c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800278e:	2100      	movs	r1, #0
 8002790:	4809      	ldr	r0, [pc, #36]	; (80027b8 <MX_I2C1_Init+0x74>)
 8002792:	f003 ffae 	bl	80066f2 <HAL_I2CEx_ConfigAnalogFilter>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800279c:	f000 fbee 	bl	8002f7c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80027a0:	2100      	movs	r1, #0
 80027a2:	4805      	ldr	r0, [pc, #20]	; (80027b8 <MX_I2C1_Init+0x74>)
 80027a4:	f003 fff0 	bl	8006788 <HAL_I2CEx_ConfigDigitalFilter>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80027ae:	f000 fbe5 	bl	8002f7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000238 	.word	0x20000238
 80027bc:	40005400 	.word	0x40005400
 80027c0:	20404768 	.word	0x20404768

080027c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08c      	sub	sp, #48	; 0x30
 80027c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80027ca:	f107 031c 	add.w	r3, r7, #28
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	605a      	str	r2, [r3, #4]
 80027d4:	609a      	str	r2, [r3, #8]
 80027d6:	60da      	str	r2, [r3, #12]
 80027d8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027da:	f107 0310 	add.w	r3, r7, #16
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	605a      	str	r2, [r3, #4]
 80027e4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80027e6:	463b      	mov	r3, r7
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027f2:	4b42      	ldr	r3, [pc, #264]	; (80028fc <MX_TIM1_Init+0x138>)
 80027f4:	4a42      	ldr	r2, [pc, #264]	; (8002900 <MX_TIM1_Init+0x13c>)
 80027f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 215;
 80027f8:	4b40      	ldr	r3, [pc, #256]	; (80028fc <MX_TIM1_Init+0x138>)
 80027fa:	22d7      	movs	r2, #215	; 0xd7
 80027fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027fe:	4b3f      	ldr	r3, [pc, #252]	; (80028fc <MX_TIM1_Init+0x138>)
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8002804:	4b3d      	ldr	r3, [pc, #244]	; (80028fc <MX_TIM1_Init+0x138>)
 8002806:	f242 720f 	movw	r2, #9999	; 0x270f
 800280a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800280c:	4b3b      	ldr	r3, [pc, #236]	; (80028fc <MX_TIM1_Init+0x138>)
 800280e:	2200      	movs	r2, #0
 8002810:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002812:	4b3a      	ldr	r3, [pc, #232]	; (80028fc <MX_TIM1_Init+0x138>)
 8002814:	2200      	movs	r2, #0
 8002816:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002818:	4b38      	ldr	r3, [pc, #224]	; (80028fc <MX_TIM1_Init+0x138>)
 800281a:	2280      	movs	r2, #128	; 0x80
 800281c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800281e:	4837      	ldr	r0, [pc, #220]	; (80028fc <MX_TIM1_Init+0x138>)
 8002820:	f005 f842 	bl	80078a8 <HAL_TIM_Base_Init>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800282a:	f000 fba7 	bl	8002f7c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800282e:	4833      	ldr	r0, [pc, #204]	; (80028fc <MX_TIM1_Init+0x138>)
 8002830:	f005 f900 	bl	8007a34 <HAL_TIM_IC_Init>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800283a:	f000 fb9f 	bl	8002f7c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800283e:	2304      	movs	r3, #4
 8002840:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8002842:	2370      	movs	r3, #112	; 0x70
 8002844:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8002846:	2300      	movs	r3, #0
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 800284a:	2300      	movs	r3, #0
 800284c:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800284e:	2300      	movs	r3, #0
 8002850:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002852:	f107 031c 	add.w	r3, r7, #28
 8002856:	4619      	mov	r1, r3
 8002858:	4828      	ldr	r0, [pc, #160]	; (80028fc <MX_TIM1_Init+0x138>)
 800285a:	f005 fce1 	bl	8008220 <HAL_TIM_SlaveConfigSynchro>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002864:	f000 fb8a 	bl	8002f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002868:	2300      	movs	r3, #0
 800286a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002870:	2300      	movs	r3, #0
 8002872:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002874:	f107 0310 	add.w	r3, r7, #16
 8002878:	4619      	mov	r1, r3
 800287a:	4820      	ldr	r0, [pc, #128]	; (80028fc <MX_TIM1_Init+0x138>)
 800287c:	f006 fad2 	bl	8008e24 <HAL_TIMEx_MasterConfigSynchronization>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8002886:	f000 fb79 	bl	8002f7c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800288a:	2302      	movs	r3, #2
 800288c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800288e:	2301      	movs	r3, #1
 8002890:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002892:	2300      	movs	r3, #0
 8002894:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800289a:	463b      	mov	r3, r7
 800289c:	2200      	movs	r2, #0
 800289e:	4619      	mov	r1, r3
 80028a0:	4816      	ldr	r0, [pc, #88]	; (80028fc <MX_TIM1_Init+0x138>)
 80028a2:	f005 fb09 	bl	8007eb8 <HAL_TIM_IC_ConfigChannel>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80028ac:	f000 fb66 	bl	8002f7c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80028b0:	463b      	mov	r3, r7
 80028b2:	2204      	movs	r2, #4
 80028b4:	4619      	mov	r1, r3
 80028b6:	4811      	ldr	r0, [pc, #68]	; (80028fc <MX_TIM1_Init+0x138>)
 80028b8:	f005 fafe 	bl	8007eb8 <HAL_TIM_IC_ConfigChannel>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 80028c2:	f000 fb5b 	bl	8002f7c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80028c6:	463b      	mov	r3, r7
 80028c8:	2208      	movs	r2, #8
 80028ca:	4619      	mov	r1, r3
 80028cc:	480b      	ldr	r0, [pc, #44]	; (80028fc <MX_TIM1_Init+0x138>)
 80028ce:	f005 faf3 	bl	8007eb8 <HAL_TIM_IC_ConfigChannel>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80028d8:	f000 fb50 	bl	8002f7c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80028dc:	463b      	mov	r3, r7
 80028de:	220c      	movs	r2, #12
 80028e0:	4619      	mov	r1, r3
 80028e2:	4806      	ldr	r0, [pc, #24]	; (80028fc <MX_TIM1_Init+0x138>)
 80028e4:	f005 fae8 	bl	8007eb8 <HAL_TIM_IC_ConfigChannel>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80028ee:	f000 fb45 	bl	8002f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80028f2:	bf00      	nop
 80028f4:	3730      	adds	r7, #48	; 0x30
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000458 	.word	0x20000458
 8002900:	40010000 	.word	0x40010000

08002904 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08c      	sub	sp, #48	; 0x30
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800290a:	f107 031c 	add.w	r3, r7, #28
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	605a      	str	r2, [r3, #4]
 8002914:	609a      	str	r2, [r3, #8]
 8002916:	60da      	str	r2, [r3, #12]
 8002918:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800291a:	f107 0310 	add.w	r3, r7, #16
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	605a      	str	r2, [r3, #4]
 8002924:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002926:	463b      	mov	r3, r7
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002932:	4b32      	ldr	r3, [pc, #200]	; (80029fc <MX_TIM2_Init+0xf8>)
 8002934:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002938:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 215;
 800293a:	4b30      	ldr	r3, [pc, #192]	; (80029fc <MX_TIM2_Init+0xf8>)
 800293c:	22d7      	movs	r2, #215	; 0xd7
 800293e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002940:	4b2e      	ldr	r3, [pc, #184]	; (80029fc <MX_TIM2_Init+0xf8>)
 8002942:	2200      	movs	r2, #0
 8002944:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8002946:	4b2d      	ldr	r3, [pc, #180]	; (80029fc <MX_TIM2_Init+0xf8>)
 8002948:	f242 720f 	movw	r2, #9999	; 0x270f
 800294c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800294e:	4b2b      	ldr	r3, [pc, #172]	; (80029fc <MX_TIM2_Init+0xf8>)
 8002950:	2200      	movs	r2, #0
 8002952:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002954:	4b29      	ldr	r3, [pc, #164]	; (80029fc <MX_TIM2_Init+0xf8>)
 8002956:	2280      	movs	r2, #128	; 0x80
 8002958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800295a:	4828      	ldr	r0, [pc, #160]	; (80029fc <MX_TIM2_Init+0xf8>)
 800295c:	f004 ffa4 	bl	80078a8 <HAL_TIM_Base_Init>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8002966:	f000 fb09 	bl	8002f7c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800296a:	4824      	ldr	r0, [pc, #144]	; (80029fc <MX_TIM2_Init+0xf8>)
 800296c:	f005 f862 	bl	8007a34 <HAL_TIM_IC_Init>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8002976:	f000 fb01 	bl	8002f7c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800297a:	2304      	movs	r3, #4
 800297c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800297e:	2300      	movs	r3, #0
 8002980:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002982:	f107 031c 	add.w	r3, r7, #28
 8002986:	4619      	mov	r1, r3
 8002988:	481c      	ldr	r0, [pc, #112]	; (80029fc <MX_TIM2_Init+0xf8>)
 800298a:	f005 fc49 	bl	8008220 <HAL_TIM_SlaveConfigSynchro>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002994:	f000 faf2 	bl	8002f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002998:	2300      	movs	r3, #0
 800299a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800299c:	2300      	movs	r3, #0
 800299e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029a0:	f107 0310 	add.w	r3, r7, #16
 80029a4:	4619      	mov	r1, r3
 80029a6:	4815      	ldr	r0, [pc, #84]	; (80029fc <MX_TIM2_Init+0xf8>)
 80029a8:	f006 fa3c 	bl	8008e24 <HAL_TIMEx_MasterConfigSynchronization>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80029b2:	f000 fae3 	bl	8002f7c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80029b6:	2302      	movs	r3, #2
 80029b8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80029ba:	2301      	movs	r3, #1
 80029bc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80029be:	2300      	movs	r3, #0
 80029c0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80029c2:	2300      	movs	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80029c6:	463b      	mov	r3, r7
 80029c8:	2200      	movs	r2, #0
 80029ca:	4619      	mov	r1, r3
 80029cc:	480b      	ldr	r0, [pc, #44]	; (80029fc <MX_TIM2_Init+0xf8>)
 80029ce:	f005 fa73 	bl	8007eb8 <HAL_TIM_IC_ConfigChannel>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80029d8:	f000 fad0 	bl	8002f7c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80029dc:	463b      	mov	r3, r7
 80029de:	220c      	movs	r2, #12
 80029e0:	4619      	mov	r1, r3
 80029e2:	4806      	ldr	r0, [pc, #24]	; (80029fc <MX_TIM2_Init+0xf8>)
 80029e4:	f005 fa68 	bl	8007eb8 <HAL_TIM_IC_ConfigChannel>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80029ee:	f000 fac5 	bl	8002f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80029f2:	bf00      	nop
 80029f4:	3730      	adds	r7, #48	; 0x30
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	200004f8 	.word	0x200004f8

08002a00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08a      	sub	sp, #40	; 0x28
 8002a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a06:	f107 031c 	add.w	r3, r7, #28
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	605a      	str	r2, [r3, #4]
 8002a10:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a12:	463b      	mov	r3, r7
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	60da      	str	r2, [r3, #12]
 8002a1e:	611a      	str	r2, [r3, #16]
 8002a20:	615a      	str	r2, [r3, #20]
 8002a22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a24:	4b32      	ldr	r3, [pc, #200]	; (8002af0 <MX_TIM3_Init+0xf0>)
 8002a26:	4a33      	ldr	r2, [pc, #204]	; (8002af4 <MX_TIM3_Init+0xf4>)
 8002a28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002a2a:	4b31      	ldr	r3, [pc, #196]	; (8002af0 <MX_TIM3_Init+0xf0>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a30:	4b2f      	ldr	r3, [pc, #188]	; (8002af0 <MX_TIM3_Init+0xf0>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 359;
 8002a36:	4b2e      	ldr	r3, [pc, #184]	; (8002af0 <MX_TIM3_Init+0xf0>)
 8002a38:	f240 1267 	movw	r2, #359	; 0x167
 8002a3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a3e:	4b2c      	ldr	r3, [pc, #176]	; (8002af0 <MX_TIM3_Init+0xf0>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a44:	4b2a      	ldr	r3, [pc, #168]	; (8002af0 <MX_TIM3_Init+0xf0>)
 8002a46:	2280      	movs	r2, #128	; 0x80
 8002a48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a4a:	4829      	ldr	r0, [pc, #164]	; (8002af0 <MX_TIM3_Init+0xf0>)
 8002a4c:	f004 ff82 	bl	8007954 <HAL_TIM_PWM_Init>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002a56:	f000 fa91 	bl	8002f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a62:	f107 031c 	add.w	r3, r7, #28
 8002a66:	4619      	mov	r1, r3
 8002a68:	4821      	ldr	r0, [pc, #132]	; (8002af0 <MX_TIM3_Init+0xf0>)
 8002a6a:	f006 f9db 	bl	8008e24 <HAL_TIMEx_MasterConfigSynchronization>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002a74:	f000 fa82 	bl	8002f7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a78:	2360      	movs	r3, #96	; 0x60
 8002a7a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a84:	2300      	movs	r3, #0
 8002a86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a88:	463b      	mov	r3, r7
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4818      	ldr	r0, [pc, #96]	; (8002af0 <MX_TIM3_Init+0xf0>)
 8002a90:	f005 faae 	bl	8007ff0 <HAL_TIM_PWM_ConfigChannel>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002a9a:	f000 fa6f 	bl	8002f7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a9e:	463b      	mov	r3, r7
 8002aa0:	2204      	movs	r2, #4
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4812      	ldr	r0, [pc, #72]	; (8002af0 <MX_TIM3_Init+0xf0>)
 8002aa6:	f005 faa3 	bl	8007ff0 <HAL_TIM_PWM_ConfigChannel>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002ab0:	f000 fa64 	bl	8002f7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ab4:	463b      	mov	r3, r7
 8002ab6:	2208      	movs	r2, #8
 8002ab8:	4619      	mov	r1, r3
 8002aba:	480d      	ldr	r0, [pc, #52]	; (8002af0 <MX_TIM3_Init+0xf0>)
 8002abc:	f005 fa98 	bl	8007ff0 <HAL_TIM_PWM_ConfigChannel>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8002ac6:	f000 fa59 	bl	8002f7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002aca:	463b      	mov	r3, r7
 8002acc:	220c      	movs	r2, #12
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4807      	ldr	r0, [pc, #28]	; (8002af0 <MX_TIM3_Init+0xf0>)
 8002ad2:	f005 fa8d 	bl	8007ff0 <HAL_TIM_PWM_ConfigChannel>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8002adc:	f000 fa4e 	bl	8002f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002ae0:	4803      	ldr	r0, [pc, #12]	; (8002af0 <MX_TIM3_Init+0xf0>)
 8002ae2:	f000 fd51 	bl	8003588 <HAL_TIM_MspPostInit>

}
 8002ae6:	bf00      	nop
 8002ae8:	3728      	adds	r7, #40	; 0x28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	200002d4 	.word	0x200002d4
 8002af4:	40000400 	.word	0x40000400

08002af8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08a      	sub	sp, #40	; 0x28
 8002afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002afe:	f107 031c 	add.w	r3, r7, #28
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	605a      	str	r2, [r3, #4]
 8002b08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b0a:	463b      	mov	r3, r7
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	611a      	str	r2, [r3, #16]
 8002b18:	615a      	str	r2, [r3, #20]
 8002b1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b1c:	4b2c      	ldr	r3, [pc, #176]	; (8002bd0 <MX_TIM4_Init+0xd8>)
 8002b1e:	4a2d      	ldr	r2, [pc, #180]	; (8002bd4 <MX_TIM4_Init+0xdc>)
 8002b20:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002b22:	4b2b      	ldr	r3, [pc, #172]	; (8002bd0 <MX_TIM4_Init+0xd8>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b28:	4b29      	ldr	r3, [pc, #164]	; (8002bd0 <MX_TIM4_Init+0xd8>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 359;
 8002b2e:	4b28      	ldr	r3, [pc, #160]	; (8002bd0 <MX_TIM4_Init+0xd8>)
 8002b30:	f240 1267 	movw	r2, #359	; 0x167
 8002b34:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b36:	4b26      	ldr	r3, [pc, #152]	; (8002bd0 <MX_TIM4_Init+0xd8>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b3c:	4b24      	ldr	r3, [pc, #144]	; (8002bd0 <MX_TIM4_Init+0xd8>)
 8002b3e:	2280      	movs	r2, #128	; 0x80
 8002b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8002b42:	4823      	ldr	r0, [pc, #140]	; (8002bd0 <MX_TIM4_Init+0xd8>)
 8002b44:	f004 fedb 	bl	80078fe <HAL_TIM_OC_Init>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002b4e:	f000 fa15 	bl	8002f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b52:	2300      	movs	r3, #0
 8002b54:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b56:	2300      	movs	r3, #0
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b5a:	f107 031c 	add.w	r3, r7, #28
 8002b5e:	4619      	mov	r1, r3
 8002b60:	481b      	ldr	r0, [pc, #108]	; (8002bd0 <MX_TIM4_Init+0xd8>)
 8002b62:	f006 f95f 	bl	8008e24 <HAL_TIMEx_MasterConfigSynchronization>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002b6c:	f000 fa06 	bl	8002f7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8002b70:	2310      	movs	r3, #16
 8002b72:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 8002b74:	2301      	movs	r3, #1
 8002b76:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b80:	463b      	mov	r3, r7
 8002b82:	2200      	movs	r2, #0
 8002b84:	4619      	mov	r1, r3
 8002b86:	4812      	ldr	r0, [pc, #72]	; (8002bd0 <MX_TIM4_Init+0xd8>)
 8002b88:	f005 f918 	bl	8007dbc <HAL_TIM_OC_ConfigChannel>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002b92:	f000 f9f3 	bl	8002f7c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b96:	463b      	mov	r3, r7
 8002b98:	2204      	movs	r2, #4
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	480c      	ldr	r0, [pc, #48]	; (8002bd0 <MX_TIM4_Init+0xd8>)
 8002b9e:	f005 f90d 	bl	8007dbc <HAL_TIM_OC_ConfigChannel>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002ba8:	f000 f9e8 	bl	8002f7c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002bac:	463b      	mov	r3, r7
 8002bae:	2208      	movs	r2, #8
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4807      	ldr	r0, [pc, #28]	; (8002bd0 <MX_TIM4_Init+0xd8>)
 8002bb4:	f005 f902 	bl	8007dbc <HAL_TIM_OC_ConfigChannel>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8002bbe:	f000 f9dd 	bl	8002f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002bc2:	4803      	ldr	r0, [pc, #12]	; (8002bd0 <MX_TIM4_Init+0xd8>)
 8002bc4:	f000 fce0 	bl	8003588 <HAL_TIM_MspPostInit>

}
 8002bc8:	bf00      	nop
 8002bca:	3728      	adds	r7, #40	; 0x28
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	20000108 	.word	0x20000108
 8002bd4:	40000800 	.word	0x40000800

08002bd8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08a      	sub	sp, #40	; 0x28
 8002bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bde:	f107 031c 	add.w	r3, r7, #28
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	605a      	str	r2, [r3, #4]
 8002be8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bea:	463b      	mov	r3, r7
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	611a      	str	r2, [r3, #16]
 8002bf8:	615a      	str	r2, [r3, #20]
 8002bfa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002bfc:	4b21      	ldr	r3, [pc, #132]	; (8002c84 <MX_TIM5_Init+0xac>)
 8002bfe:	4a22      	ldr	r2, [pc, #136]	; (8002c88 <MX_TIM5_Init+0xb0>)
 8002c00:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002c02:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <MX_TIM5_Init+0xac>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c08:	4b1e      	ldr	r3, [pc, #120]	; (8002c84 <MX_TIM5_Init+0xac>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 359;
 8002c0e:	4b1d      	ldr	r3, [pc, #116]	; (8002c84 <MX_TIM5_Init+0xac>)
 8002c10:	f240 1267 	movw	r2, #359	; 0x167
 8002c14:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c16:	4b1b      	ldr	r3, [pc, #108]	; (8002c84 <MX_TIM5_Init+0xac>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c1c:	4b19      	ldr	r3, [pc, #100]	; (8002c84 <MX_TIM5_Init+0xac>)
 8002c1e:	2280      	movs	r2, #128	; 0x80
 8002c20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8002c22:	4818      	ldr	r0, [pc, #96]	; (8002c84 <MX_TIM5_Init+0xac>)
 8002c24:	f004 fe6b 	bl	80078fe <HAL_TIM_OC_Init>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8002c2e:	f000 f9a5 	bl	8002f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c36:	2300      	movs	r3, #0
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002c3a:	f107 031c 	add.w	r3, r7, #28
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4810      	ldr	r0, [pc, #64]	; (8002c84 <MX_TIM5_Init+0xac>)
 8002c42:	f006 f8ef 	bl	8008e24 <HAL_TIMEx_MasterConfigSynchronization>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8002c4c:	f000 f996 	bl	8002f7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8002c50:	2310      	movs	r3, #16
 8002c52:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 8002c54:	2301      	movs	r3, #1
 8002c56:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c60:	463b      	mov	r3, r7
 8002c62:	2204      	movs	r2, #4
 8002c64:	4619      	mov	r1, r3
 8002c66:	4807      	ldr	r0, [pc, #28]	; (8002c84 <MX_TIM5_Init+0xac>)
 8002c68:	f005 f8a8 	bl	8007dbc <HAL_TIM_OC_ConfigChannel>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8002c72:	f000 f983 	bl	8002f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002c76:	4803      	ldr	r0, [pc, #12]	; (8002c84 <MX_TIM5_Init+0xac>)
 8002c78:	f000 fc86 	bl	8003588 <HAL_TIM_MspPostInit>

}
 8002c7c:	bf00      	nop
 8002c7e:	3728      	adds	r7, #40	; 0x28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	20000294 	.word	0x20000294
 8002c88:	40000c00 	.word	0x40000c00

08002c8c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002c90:	4b14      	ldr	r3, [pc, #80]	; (8002ce4 <MX_USART3_UART_Init+0x58>)
 8002c92:	4a15      	ldr	r2, [pc, #84]	; (8002ce8 <MX_USART3_UART_Init+0x5c>)
 8002c94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002c96:	4b13      	ldr	r3, [pc, #76]	; (8002ce4 <MX_USART3_UART_Init+0x58>)
 8002c98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c9e:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <MX_USART3_UART_Init+0x58>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ca4:	4b0f      	ldr	r3, [pc, #60]	; (8002ce4 <MX_USART3_UART_Init+0x58>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002caa:	4b0e      	ldr	r3, [pc, #56]	; (8002ce4 <MX_USART3_UART_Init+0x58>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002cb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <MX_USART3_UART_Init+0x58>)
 8002cb2:	220c      	movs	r2, #12
 8002cb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <MX_USART3_UART_Init+0x58>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cbc:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <MX_USART3_UART_Init+0x58>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cc2:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <MX_USART3_UART_Init+0x58>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cc8:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <MX_USART3_UART_Init+0x58>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002cce:	4805      	ldr	r0, [pc, #20]	; (8002ce4 <MX_USART3_UART_Init+0x58>)
 8002cd0:	f006 f954 	bl	8008f7c <HAL_UART_Init>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002cda:	f000 f94f 	bl	8002f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	20000148 	.word	0x20000148
 8002ce8:	40004800 	.word	0x40004800

08002cec <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
	...

08002cfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d02:	4b20      	ldr	r3, [pc, #128]	; (8002d84 <MX_DMA_Init+0x88>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	4a1f      	ldr	r2, [pc, #124]	; (8002d84 <MX_DMA_Init+0x88>)
 8002d08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0e:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <MX_DMA_Init+0x88>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d16:	607b      	str	r3, [r7, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	200b      	movs	r0, #11
 8002d20:	f001 fa27 	bl	8004172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002d24:	200b      	movs	r0, #11
 8002d26:	f001 fa40 	bl	80041aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	200e      	movs	r0, #14
 8002d30:	f001 fa1f 	bl	8004172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002d34:	200e      	movs	r0, #14
 8002d36:	f001 fa38 	bl	80041aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	200f      	movs	r0, #15
 8002d40:	f001 fa17 	bl	8004172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002d44:	200f      	movs	r0, #15
 8002d46:	f001 fa30 	bl	80041aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	2010      	movs	r0, #16
 8002d50:	f001 fa0f 	bl	8004172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002d54:	2010      	movs	r0, #16
 8002d56:	f001 fa28 	bl	80041aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	2011      	movs	r0, #17
 8002d60:	f001 fa07 	bl	8004172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002d64:	2011      	movs	r0, #17
 8002d66:	f001 fa20 	bl	80041aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	202f      	movs	r0, #47	; 0x2f
 8002d70:	f001 f9ff 	bl	8004172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002d74:	202f      	movs	r0, #47	; 0x2f
 8002d76:	f001 fa18 	bl	80041aa <HAL_NVIC_EnableIRQ>

}
 8002d7a:	bf00      	nop
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800

08002d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08e      	sub	sp, #56	; 0x38
 8002d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	605a      	str	r2, [r3, #4]
 8002d98:	609a      	str	r2, [r3, #8]
 8002d9a:	60da      	str	r2, [r3, #12]
 8002d9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d9e:	4b70      	ldr	r3, [pc, #448]	; (8002f60 <MX_GPIO_Init+0x1d8>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	4a6f      	ldr	r2, [pc, #444]	; (8002f60 <MX_GPIO_Init+0x1d8>)
 8002da4:	f043 0304 	orr.w	r3, r3, #4
 8002da8:	6313      	str	r3, [r2, #48]	; 0x30
 8002daa:	4b6d      	ldr	r3, [pc, #436]	; (8002f60 <MX_GPIO_Init+0x1d8>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	623b      	str	r3, [r7, #32]
 8002db4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002db6:	4b6a      	ldr	r3, [pc, #424]	; (8002f60 <MX_GPIO_Init+0x1d8>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	4a69      	ldr	r2, [pc, #420]	; (8002f60 <MX_GPIO_Init+0x1d8>)
 8002dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc2:	4b67      	ldr	r3, [pc, #412]	; (8002f60 <MX_GPIO_Init+0x1d8>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dca:	61fb      	str	r3, [r7, #28]
 8002dcc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dce:	4b64      	ldr	r3, [pc, #400]	; (8002f60 <MX_GPIO_Init+0x1d8>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	4a63      	ldr	r2, [pc, #396]	; (8002f60 <MX_GPIO_Init+0x1d8>)
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dda:	4b61      	ldr	r3, [pc, #388]	; (8002f60 <MX_GPIO_Init+0x1d8>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	61bb      	str	r3, [r7, #24]
 8002de4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de6:	4b5e      	ldr	r3, [pc, #376]	; (8002f60 <MX_GPIO_Init+0x1d8>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	4a5d      	ldr	r2, [pc, #372]	; (8002f60 <MX_GPIO_Init+0x1d8>)
 8002dec:	f043 0302 	orr.w	r3, r3, #2
 8002df0:	6313      	str	r3, [r2, #48]	; 0x30
 8002df2:	4b5b      	ldr	r3, [pc, #364]	; (8002f60 <MX_GPIO_Init+0x1d8>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dfe:	4b58      	ldr	r3, [pc, #352]	; (8002f60 <MX_GPIO_Init+0x1d8>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	4a57      	ldr	r2, [pc, #348]	; (8002f60 <MX_GPIO_Init+0x1d8>)
 8002e04:	f043 0320 	orr.w	r3, r3, #32
 8002e08:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0a:	4b55      	ldr	r3, [pc, #340]	; (8002f60 <MX_GPIO_Init+0x1d8>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	613b      	str	r3, [r7, #16]
 8002e14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e16:	4b52      	ldr	r3, [pc, #328]	; (8002f60 <MX_GPIO_Init+0x1d8>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	4a51      	ldr	r2, [pc, #324]	; (8002f60 <MX_GPIO_Init+0x1d8>)
 8002e1c:	f043 0310 	orr.w	r3, r3, #16
 8002e20:	6313      	str	r3, [r2, #48]	; 0x30
 8002e22:	4b4f      	ldr	r3, [pc, #316]	; (8002f60 <MX_GPIO_Init+0x1d8>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e2e:	4b4c      	ldr	r3, [pc, #304]	; (8002f60 <MX_GPIO_Init+0x1d8>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	4a4b      	ldr	r2, [pc, #300]	; (8002f60 <MX_GPIO_Init+0x1d8>)
 8002e34:	f043 0308 	orr.w	r3, r3, #8
 8002e38:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3a:	4b49      	ldr	r3, [pc, #292]	; (8002f60 <MX_GPIO_Init+0x1d8>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e46:	4b46      	ldr	r3, [pc, #280]	; (8002f60 <MX_GPIO_Init+0x1d8>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	4a45      	ldr	r2, [pc, #276]	; (8002f60 <MX_GPIO_Init+0x1d8>)
 8002e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e50:	6313      	str	r3, [r2, #48]	; 0x30
 8002e52:	4b43      	ldr	r3, [pc, #268]	; (8002f60 <MX_GPIO_Init+0x1d8>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5a:	607b      	str	r3, [r7, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8002e64:	483f      	ldr	r0, [pc, #252]	; (8002f64 <MX_GPIO_Init+0x1dc>)
 8002e66:	f001 ff4d 	bl	8004d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	2140      	movs	r1, #64	; 0x40
 8002e6e:	483e      	ldr	r0, [pc, #248]	; (8002f68 <MX_GPIO_Init+0x1e0>)
 8002e70:	f001 ff48 	bl	8004d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002e74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e7a:	4b3c      	ldr	r3, [pc, #240]	; (8002f6c <MX_GPIO_Init+0x1e4>)
 8002e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e86:	4619      	mov	r1, r3
 8002e88:	4839      	ldr	r0, [pc, #228]	; (8002f70 <MX_GPIO_Init+0x1e8>)
 8002e8a:	f001 fda1 	bl	80049d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002e8e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e94:	2300      	movs	r3, #0
 8002e96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4834      	ldr	r0, [pc, #208]	; (8002f74 <MX_GPIO_Init+0x1ec>)
 8002ea4:	f001 fd94 	bl	80049d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8002ea8:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4828      	ldr	r0, [pc, #160]	; (8002f64 <MX_GPIO_Init+0x1dc>)
 8002ec2:	f001 fd85 	bl	80049d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ec6:	2304      	movs	r3, #4
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ed6:	230c      	movs	r3, #12
 8002ed8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002eda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4821      	ldr	r0, [pc, #132]	; (8002f68 <MX_GPIO_Init+0x1e0>)
 8002ee2:	f001 fd75 	bl	80049d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ee6:	2340      	movs	r3, #64	; 0x40
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eea:	2301      	movs	r3, #1
 8002eec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002efa:	4619      	mov	r1, r3
 8002efc:	481a      	ldr	r0, [pc, #104]	; (8002f68 <MX_GPIO_Init+0x1e0>)
 8002efe:	f001 fd67 	bl	80049d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002f02:	2380      	movs	r3, #128	; 0x80
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f06:	2300      	movs	r3, #0
 8002f08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f12:	4619      	mov	r1, r3
 8002f14:	4814      	ldr	r0, [pc, #80]	; (8002f68 <MX_GPIO_Init+0x1e0>)
 8002f16:	f001 fd5b 	bl	80049d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin PA10 USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|GPIO_PIN_10|USB_DM_Pin|USB_DP_Pin;
 8002f1a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002f1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f20:	2302      	movs	r3, #2
 8002f22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002f2c:	230a      	movs	r3, #10
 8002f2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f34:	4619      	mov	r1, r3
 8002f36:	4810      	ldr	r0, [pc, #64]	; (8002f78 <MX_GPIO_Init+0x1f0>)
 8002f38:	f001 fd4a 	bl	80049d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f42:	2300      	movs	r3, #0
 8002f44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f46:	2300      	movs	r3, #0
 8002f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4809      	ldr	r0, [pc, #36]	; (8002f78 <MX_GPIO_Init+0x1f0>)
 8002f52:	f001 fd3d 	bl	80049d0 <HAL_GPIO_Init>

}
 8002f56:	bf00      	nop
 8002f58:	3738      	adds	r7, #56	; 0x38
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40020400 	.word	0x40020400
 8002f68:	40021800 	.word	0x40021800
 8002f6c:	10110000 	.word	0x10110000
 8002f70:	40020800 	.word	0x40020800
 8002f74:	40021400 	.word	0x40021400
 8002f78:	40020000 	.word	0x40020000

08002f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002f80:	bf00      	nop
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
	...

08002f8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f92:	4b0f      	ldr	r3, [pc, #60]	; (8002fd0 <HAL_MspInit+0x44>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	4a0e      	ldr	r2, [pc, #56]	; (8002fd0 <HAL_MspInit+0x44>)
 8002f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f9e:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <HAL_MspInit+0x44>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa6:	607b      	str	r3, [r7, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002faa:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <HAL_MspInit+0x44>)
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	4a08      	ldr	r2, [pc, #32]	; (8002fd0 <HAL_MspInit+0x44>)
 8002fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fb6:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <HAL_MspInit+0x44>)
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fbe:	603b      	str	r3, [r7, #0]
 8002fc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	40023800 	.word	0x40023800

08002fd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08a      	sub	sp, #40	; 0x28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fdc:	f107 0314 	add.w	r3, r7, #20
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	605a      	str	r2, [r3, #4]
 8002fe6:	609a      	str	r2, [r3, #8]
 8002fe8:	60da      	str	r2, [r3, #12]
 8002fea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a15      	ldr	r2, [pc, #84]	; (8003048 <HAL_ADC_MspInit+0x74>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d123      	bne.n	800303e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ff6:	4b15      	ldr	r3, [pc, #84]	; (800304c <HAL_ADC_MspInit+0x78>)
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffa:	4a14      	ldr	r2, [pc, #80]	; (800304c <HAL_ADC_MspInit+0x78>)
 8002ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003000:	6453      	str	r3, [r2, #68]	; 0x44
 8003002:	4b12      	ldr	r3, [pc, #72]	; (800304c <HAL_ADC_MspInit+0x78>)
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300a:	613b      	str	r3, [r7, #16]
 800300c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800300e:	4b0f      	ldr	r3, [pc, #60]	; (800304c <HAL_ADC_MspInit+0x78>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	4a0e      	ldr	r2, [pc, #56]	; (800304c <HAL_ADC_MspInit+0x78>)
 8003014:	f043 0302 	orr.w	r3, r3, #2
 8003018:	6313      	str	r3, [r2, #48]	; 0x30
 800301a:	4b0c      	ldr	r3, [pc, #48]	; (800304c <HAL_ADC_MspInit+0x78>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_THROTTLE_CONTROL_Pin;
 8003026:	2302      	movs	r3, #2
 8003028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800302a:	2303      	movs	r3, #3
 800302c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302e:	2300      	movs	r3, #0
 8003030:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_THROTTLE_CONTROL_GPIO_Port, &GPIO_InitStruct);
 8003032:	f107 0314 	add.w	r3, r7, #20
 8003036:	4619      	mov	r1, r3
 8003038:	4805      	ldr	r0, [pc, #20]	; (8003050 <HAL_ADC_MspInit+0x7c>)
 800303a:	f001 fcc9 	bl	80049d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800303e:	bf00      	nop
 8003040:	3728      	adds	r7, #40	; 0x28
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40012000 	.word	0x40012000
 800304c:	40023800 	.word	0x40023800
 8003050:	40020400 	.word	0x40020400

08003054 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08a      	sub	sp, #40	; 0x28
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800305c:	f107 0314 	add.w	r3, r7, #20
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	605a      	str	r2, [r3, #4]
 8003066:	609a      	str	r2, [r3, #8]
 8003068:	60da      	str	r2, [r3, #12]
 800306a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a57      	ldr	r2, [pc, #348]	; (80031d0 <HAL_I2C_MspInit+0x17c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	f040 80a7 	bne.w	80031c6 <HAL_I2C_MspInit+0x172>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003078:	4b56      	ldr	r3, [pc, #344]	; (80031d4 <HAL_I2C_MspInit+0x180>)
 800307a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307c:	4a55      	ldr	r2, [pc, #340]	; (80031d4 <HAL_I2C_MspInit+0x180>)
 800307e:	f043 0302 	orr.w	r3, r3, #2
 8003082:	6313      	str	r3, [r2, #48]	; 0x30
 8003084:	4b53      	ldr	r3, [pc, #332]	; (80031d4 <HAL_I2C_MspInit+0x180>)
 8003086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003090:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003096:	2312      	movs	r3, #18
 8003098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800309a:	2301      	movs	r3, #1
 800309c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800309e:	2303      	movs	r3, #3
 80030a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80030a2:	2304      	movs	r3, #4
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a6:	f107 0314 	add.w	r3, r7, #20
 80030aa:	4619      	mov	r1, r3
 80030ac:	484a      	ldr	r0, [pc, #296]	; (80031d8 <HAL_I2C_MspInit+0x184>)
 80030ae:	f001 fc8f 	bl	80049d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80030b2:	4b48      	ldr	r3, [pc, #288]	; (80031d4 <HAL_I2C_MspInit+0x180>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	4a47      	ldr	r2, [pc, #284]	; (80031d4 <HAL_I2C_MspInit+0x180>)
 80030b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030bc:	6413      	str	r3, [r2, #64]	; 0x40
 80030be:	4b45      	ldr	r3, [pc, #276]	; (80031d4 <HAL_I2C_MspInit+0x180>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 80030ca:	4b44      	ldr	r3, [pc, #272]	; (80031dc <HAL_I2C_MspInit+0x188>)
 80030cc:	4a44      	ldr	r2, [pc, #272]	; (80031e0 <HAL_I2C_MspInit+0x18c>)
 80030ce:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80030d0:	4b42      	ldr	r3, [pc, #264]	; (80031dc <HAL_I2C_MspInit+0x188>)
 80030d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030d6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030d8:	4b40      	ldr	r3, [pc, #256]	; (80031dc <HAL_I2C_MspInit+0x188>)
 80030da:	2200      	movs	r2, #0
 80030dc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030de:	4b3f      	ldr	r3, [pc, #252]	; (80031dc <HAL_I2C_MspInit+0x188>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030e4:	4b3d      	ldr	r3, [pc, #244]	; (80031dc <HAL_I2C_MspInit+0x188>)
 80030e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030ea:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030ec:	4b3b      	ldr	r3, [pc, #236]	; (80031dc <HAL_I2C_MspInit+0x188>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030f2:	4b3a      	ldr	r3, [pc, #232]	; (80031dc <HAL_I2C_MspInit+0x188>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80030f8:	4b38      	ldr	r3, [pc, #224]	; (80031dc <HAL_I2C_MspInit+0x188>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80030fe:	4b37      	ldr	r3, [pc, #220]	; (80031dc <HAL_I2C_MspInit+0x188>)
 8003100:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003104:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003106:	4b35      	ldr	r3, [pc, #212]	; (80031dc <HAL_I2C_MspInit+0x188>)
 8003108:	2204      	movs	r2, #4
 800310a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800310c:	4b33      	ldr	r3, [pc, #204]	; (80031dc <HAL_I2C_MspInit+0x188>)
 800310e:	2203      	movs	r2, #3
 8003110:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003112:	4b32      	ldr	r3, [pc, #200]	; (80031dc <HAL_I2C_MspInit+0x188>)
 8003114:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003118:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800311a:	4b30      	ldr	r3, [pc, #192]	; (80031dc <HAL_I2C_MspInit+0x188>)
 800311c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003120:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003122:	482e      	ldr	r0, [pc, #184]	; (80031dc <HAL_I2C_MspInit+0x188>)
 8003124:	f001 f85c 	bl	80041e0 <HAL_DMA_Init>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <HAL_I2C_MspInit+0xde>
    {
      Error_Handler();
 800312e:	f7ff ff25 	bl	8002f7c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a29      	ldr	r2, [pc, #164]	; (80031dc <HAL_I2C_MspInit+0x188>)
 8003136:	63da      	str	r2, [r3, #60]	; 0x3c
 8003138:	4a28      	ldr	r2, [pc, #160]	; (80031dc <HAL_I2C_MspInit+0x188>)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800313e:	4b29      	ldr	r3, [pc, #164]	; (80031e4 <HAL_I2C_MspInit+0x190>)
 8003140:	4a29      	ldr	r2, [pc, #164]	; (80031e8 <HAL_I2C_MspInit+0x194>)
 8003142:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8003144:	4b27      	ldr	r3, [pc, #156]	; (80031e4 <HAL_I2C_MspInit+0x190>)
 8003146:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800314a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800314c:	4b25      	ldr	r3, [pc, #148]	; (80031e4 <HAL_I2C_MspInit+0x190>)
 800314e:	2240      	movs	r2, #64	; 0x40
 8003150:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003152:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <HAL_I2C_MspInit+0x190>)
 8003154:	2200      	movs	r2, #0
 8003156:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003158:	4b22      	ldr	r3, [pc, #136]	; (80031e4 <HAL_I2C_MspInit+0x190>)
 800315a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800315e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003160:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <HAL_I2C_MspInit+0x190>)
 8003162:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003166:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003168:	4b1e      	ldr	r3, [pc, #120]	; (80031e4 <HAL_I2C_MspInit+0x190>)
 800316a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800316e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003170:	4b1c      	ldr	r3, [pc, #112]	; (80031e4 <HAL_I2C_MspInit+0x190>)
 8003172:	2200      	movs	r2, #0
 8003174:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003176:	4b1b      	ldr	r3, [pc, #108]	; (80031e4 <HAL_I2C_MspInit+0x190>)
 8003178:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800317c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800317e:	4b19      	ldr	r3, [pc, #100]	; (80031e4 <HAL_I2C_MspInit+0x190>)
 8003180:	2204      	movs	r2, #4
 8003182:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003184:	4b17      	ldr	r3, [pc, #92]	; (80031e4 <HAL_I2C_MspInit+0x190>)
 8003186:	2203      	movs	r2, #3
 8003188:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800318a:	4b16      	ldr	r3, [pc, #88]	; (80031e4 <HAL_I2C_MspInit+0x190>)
 800318c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003190:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003192:	4b14      	ldr	r3, [pc, #80]	; (80031e4 <HAL_I2C_MspInit+0x190>)
 8003194:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003198:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800319a:	4812      	ldr	r0, [pc, #72]	; (80031e4 <HAL_I2C_MspInit+0x190>)
 800319c:	f001 f820 	bl	80041e0 <HAL_DMA_Init>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_I2C_MspInit+0x156>
    {
      Error_Handler();
 80031a6:	f7ff fee9 	bl	8002f7c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a0d      	ldr	r2, [pc, #52]	; (80031e4 <HAL_I2C_MspInit+0x190>)
 80031ae:	639a      	str	r2, [r3, #56]	; 0x38
 80031b0:	4a0c      	ldr	r2, [pc, #48]	; (80031e4 <HAL_I2C_MspInit+0x190>)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80031b6:	2200      	movs	r2, #0
 80031b8:	2100      	movs	r1, #0
 80031ba:	201f      	movs	r0, #31
 80031bc:	f000 ffd9 	bl	8004172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80031c0:	201f      	movs	r0, #31
 80031c2:	f000 fff2 	bl	80041aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80031c6:	bf00      	nop
 80031c8:	3728      	adds	r7, #40	; 0x28
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40005400 	.word	0x40005400
 80031d4:	40023800 	.word	0x40023800
 80031d8:	40020400 	.word	0x40020400
 80031dc:	20000498 	.word	0x20000498
 80031e0:	40026088 	.word	0x40026088
 80031e4:	200001d8 	.word	0x200001d8
 80031e8:	400260a0 	.word	0x400260a0

080031ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08c      	sub	sp, #48	; 0x30
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f4:	f107 031c 	add.w	r3, r7, #28
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	609a      	str	r2, [r3, #8]
 8003200:	60da      	str	r2, [r3, #12]
 8003202:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a36      	ldr	r2, [pc, #216]	; (80032e4 <HAL_TIM_Base_MspInit+0xf8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d131      	bne.n	8003272 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800320e:	4b36      	ldr	r3, [pc, #216]	; (80032e8 <HAL_TIM_Base_MspInit+0xfc>)
 8003210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003212:	4a35      	ldr	r2, [pc, #212]	; (80032e8 <HAL_TIM_Base_MspInit+0xfc>)
 8003214:	f043 0301 	orr.w	r3, r3, #1
 8003218:	6453      	str	r3, [r2, #68]	; 0x44
 800321a:	4b33      	ldr	r3, [pc, #204]	; (80032e8 <HAL_TIM_Base_MspInit+0xfc>)
 800321c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	61bb      	str	r3, [r7, #24]
 8003224:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003226:	4b30      	ldr	r3, [pc, #192]	; (80032e8 <HAL_TIM_Base_MspInit+0xfc>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	4a2f      	ldr	r2, [pc, #188]	; (80032e8 <HAL_TIM_Base_MspInit+0xfc>)
 800322c:	f043 0310 	orr.w	r3, r3, #16
 8003230:	6313      	str	r3, [r2, #48]	; 0x30
 8003232:	4b2d      	ldr	r3, [pc, #180]	; (80032e8 <HAL_TIM_Base_MspInit+0xfc>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	f003 0310 	and.w	r3, r3, #16
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	697b      	ldr	r3, [r7, #20]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13
 800323e:	f44f 43d5 	mov.w	r3, #27264	; 0x6a80
 8003242:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003244:	2302      	movs	r3, #2
 8003246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003248:	2300      	movs	r3, #0
 800324a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800324c:	2300      	movs	r3, #0
 800324e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003250:	2301      	movs	r3, #1
 8003252:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003254:	f107 031c 	add.w	r3, r7, #28
 8003258:	4619      	mov	r1, r3
 800325a:	4824      	ldr	r0, [pc, #144]	; (80032ec <HAL_TIM_Base_MspInit+0x100>)
 800325c:	f001 fbb8 	bl	80049d0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003260:	2200      	movs	r2, #0
 8003262:	2100      	movs	r1, #0
 8003264:	201b      	movs	r0, #27
 8003266:	f000 ff84 	bl	8004172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800326a:	201b      	movs	r0, #27
 800326c:	f000 ff9d 	bl	80041aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003270:	e034      	b.n	80032dc <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM2)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800327a:	d12f      	bne.n	80032dc <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800327c:	4b1a      	ldr	r3, [pc, #104]	; (80032e8 <HAL_TIM_Base_MspInit+0xfc>)
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	4a19      	ldr	r2, [pc, #100]	; (80032e8 <HAL_TIM_Base_MspInit+0xfc>)
 8003282:	f043 0301 	orr.w	r3, r3, #1
 8003286:	6413      	str	r3, [r2, #64]	; 0x40
 8003288:	4b17      	ldr	r3, [pc, #92]	; (80032e8 <HAL_TIM_Base_MspInit+0xfc>)
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	613b      	str	r3, [r7, #16]
 8003292:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003294:	4b14      	ldr	r3, [pc, #80]	; (80032e8 <HAL_TIM_Base_MspInit+0xfc>)
 8003296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003298:	4a13      	ldr	r2, [pc, #76]	; (80032e8 <HAL_TIM_Base_MspInit+0xfc>)
 800329a:	f043 0301 	orr.w	r3, r3, #1
 800329e:	6313      	str	r3, [r2, #48]	; 0x30
 80032a0:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <HAL_TIM_Base_MspInit+0xfc>)
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80032ac:	2309      	movs	r3, #9
 80032ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b0:	2302      	movs	r3, #2
 80032b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b8:	2300      	movs	r3, #0
 80032ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032bc:	2301      	movs	r3, #1
 80032be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c0:	f107 031c 	add.w	r3, r7, #28
 80032c4:	4619      	mov	r1, r3
 80032c6:	480a      	ldr	r0, [pc, #40]	; (80032f0 <HAL_TIM_Base_MspInit+0x104>)
 80032c8:	f001 fb82 	bl	80049d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80032cc:	2200      	movs	r2, #0
 80032ce:	2100      	movs	r1, #0
 80032d0:	201c      	movs	r0, #28
 80032d2:	f000 ff4e 	bl	8004172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80032d6:	201c      	movs	r0, #28
 80032d8:	f000 ff67 	bl	80041aa <HAL_NVIC_EnableIRQ>
}
 80032dc:	bf00      	nop
 80032de:	3730      	adds	r7, #48	; 0x30
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40010000 	.word	0x40010000
 80032e8:	40023800 	.word	0x40023800
 80032ec:	40021000 	.word	0x40021000
 80032f0:	40020000 	.word	0x40020000

080032f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a0a      	ldr	r2, [pc, #40]	; (800332c <HAL_TIM_PWM_MspInit+0x38>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d10b      	bne.n	800331e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003306:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <HAL_TIM_PWM_MspInit+0x3c>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	4a09      	ldr	r2, [pc, #36]	; (8003330 <HAL_TIM_PWM_MspInit+0x3c>)
 800330c:	f043 0302 	orr.w	r3, r3, #2
 8003310:	6413      	str	r3, [r2, #64]	; 0x40
 8003312:	4b07      	ldr	r3, [pc, #28]	; (8003330 <HAL_TIM_PWM_MspInit+0x3c>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800331e:	bf00      	nop
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	40000400 	.word	0x40000400
 8003330:	40023800 	.word	0x40023800

08003334 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a86      	ldr	r2, [pc, #536]	; (800355c <HAL_TIM_OC_MspInit+0x228>)
 8003342:	4293      	cmp	r3, r2
 8003344:	f040 80bb 	bne.w	80034be <HAL_TIM_OC_MspInit+0x18a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003348:	4b85      	ldr	r3, [pc, #532]	; (8003560 <HAL_TIM_OC_MspInit+0x22c>)
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	4a84      	ldr	r2, [pc, #528]	; (8003560 <HAL_TIM_OC_MspInit+0x22c>)
 800334e:	f043 0304 	orr.w	r3, r3, #4
 8003352:	6413      	str	r3, [r2, #64]	; 0x40
 8003354:	4b82      	ldr	r3, [pc, #520]	; (8003560 <HAL_TIM_OC_MspInit+0x22c>)
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8003360:	4b80      	ldr	r3, [pc, #512]	; (8003564 <HAL_TIM_OC_MspInit+0x230>)
 8003362:	4a81      	ldr	r2, [pc, #516]	; (8003568 <HAL_TIM_OC_MspInit+0x234>)
 8003364:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8003366:	4b7f      	ldr	r3, [pc, #508]	; (8003564 <HAL_TIM_OC_MspInit+0x230>)
 8003368:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800336c:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800336e:	4b7d      	ldr	r3, [pc, #500]	; (8003564 <HAL_TIM_OC_MspInit+0x230>)
 8003370:	2240      	movs	r2, #64	; 0x40
 8003372:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003374:	4b7b      	ldr	r3, [pc, #492]	; (8003564 <HAL_TIM_OC_MspInit+0x230>)
 8003376:	2200      	movs	r2, #0
 8003378:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800337a:	4b7a      	ldr	r3, [pc, #488]	; (8003564 <HAL_TIM_OC_MspInit+0x230>)
 800337c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003380:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003382:	4b78      	ldr	r3, [pc, #480]	; (8003564 <HAL_TIM_OC_MspInit+0x230>)
 8003384:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003388:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800338a:	4b76      	ldr	r3, [pc, #472]	; (8003564 <HAL_TIM_OC_MspInit+0x230>)
 800338c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003390:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8003392:	4b74      	ldr	r3, [pc, #464]	; (8003564 <HAL_TIM_OC_MspInit+0x230>)
 8003394:	2200      	movs	r2, #0
 8003396:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003398:	4b72      	ldr	r3, [pc, #456]	; (8003564 <HAL_TIM_OC_MspInit+0x230>)
 800339a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800339e:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80033a0:	4b70      	ldr	r3, [pc, #448]	; (8003564 <HAL_TIM_OC_MspInit+0x230>)
 80033a2:	2204      	movs	r2, #4
 80033a4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim4_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80033a6:	4b6f      	ldr	r3, [pc, #444]	; (8003564 <HAL_TIM_OC_MspInit+0x230>)
 80033a8:	2203      	movs	r2, #3
 80033aa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim4_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 80033ac:	4b6d      	ldr	r3, [pc, #436]	; (8003564 <HAL_TIM_OC_MspInit+0x230>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim4_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80033b2:	4b6c      	ldr	r3, [pc, #432]	; (8003564 <HAL_TIM_OC_MspInit+0x230>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 80033b8:	486a      	ldr	r0, [pc, #424]	; (8003564 <HAL_TIM_OC_MspInit+0x230>)
 80033ba:	f000 ff11 	bl	80041e0 <HAL_DMA_Init>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <HAL_TIM_OC_MspInit+0x94>
    {
      Error_Handler();
 80033c4:	f7ff fdda 	bl	8002f7c <Error_Handler>
    }

    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a66      	ldr	r2, [pc, #408]	; (8003564 <HAL_TIM_OC_MspInit+0x230>)
 80033cc:	625a      	str	r2, [r3, #36]	; 0x24
 80033ce:	4a65      	ldr	r2, [pc, #404]	; (8003564 <HAL_TIM_OC_MspInit+0x230>)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM4_CH2 Init */
    hdma_tim4_ch2.Instance = DMA1_Stream3;
 80033d4:	4b65      	ldr	r3, [pc, #404]	; (800356c <HAL_TIM_OC_MspInit+0x238>)
 80033d6:	4a66      	ldr	r2, [pc, #408]	; (8003570 <HAL_TIM_OC_MspInit+0x23c>)
 80033d8:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Channel = DMA_CHANNEL_2;
 80033da:	4b64      	ldr	r3, [pc, #400]	; (800356c <HAL_TIM_OC_MspInit+0x238>)
 80033dc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80033e0:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033e2:	4b62      	ldr	r3, [pc, #392]	; (800356c <HAL_TIM_OC_MspInit+0x238>)
 80033e4:	2240      	movs	r2, #64	; 0x40
 80033e6:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80033e8:	4b60      	ldr	r3, [pc, #384]	; (800356c <HAL_TIM_OC_MspInit+0x238>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80033ee:	4b5f      	ldr	r3, [pc, #380]	; (800356c <HAL_TIM_OC_MspInit+0x238>)
 80033f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033f4:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80033f6:	4b5d      	ldr	r3, [pc, #372]	; (800356c <HAL_TIM_OC_MspInit+0x238>)
 80033f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033fc:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80033fe:	4b5b      	ldr	r3, [pc, #364]	; (800356c <HAL_TIM_OC_MspInit+0x238>)
 8003400:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003404:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_NORMAL;
 8003406:	4b59      	ldr	r3, [pc, #356]	; (800356c <HAL_TIM_OC_MspInit+0x238>)
 8003408:	2200      	movs	r2, #0
 800340a:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800340c:	4b57      	ldr	r3, [pc, #348]	; (800356c <HAL_TIM_OC_MspInit+0x238>)
 800340e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003412:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003414:	4b55      	ldr	r3, [pc, #340]	; (800356c <HAL_TIM_OC_MspInit+0x238>)
 8003416:	2204      	movs	r2, #4
 8003418:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim4_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800341a:	4b54      	ldr	r3, [pc, #336]	; (800356c <HAL_TIM_OC_MspInit+0x238>)
 800341c:	2203      	movs	r2, #3
 800341e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim4_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 8003420:	4b52      	ldr	r3, [pc, #328]	; (800356c <HAL_TIM_OC_MspInit+0x238>)
 8003422:	2200      	movs	r2, #0
 8003424:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim4_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003426:	4b51      	ldr	r3, [pc, #324]	; (800356c <HAL_TIM_OC_MspInit+0x238>)
 8003428:	2200      	movs	r2, #0
 800342a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 800342c:	484f      	ldr	r0, [pc, #316]	; (800356c <HAL_TIM_OC_MspInit+0x238>)
 800342e:	f000 fed7 	bl	80041e0 <HAL_DMA_Init>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <HAL_TIM_OC_MspInit+0x108>
    {
      Error_Handler();
 8003438:	f7ff fda0 	bl	8002f7c <Error_Handler>
    }

    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a4b      	ldr	r2, [pc, #300]	; (800356c <HAL_TIM_OC_MspInit+0x238>)
 8003440:	629a      	str	r2, [r3, #40]	; 0x28
 8003442:	4a4a      	ldr	r2, [pc, #296]	; (800356c <HAL_TIM_OC_MspInit+0x238>)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8003448:	4b4a      	ldr	r3, [pc, #296]	; (8003574 <HAL_TIM_OC_MspInit+0x240>)
 800344a:	4a4b      	ldr	r2, [pc, #300]	; (8003578 <HAL_TIM_OC_MspInit+0x244>)
 800344c:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 800344e:	4b49      	ldr	r3, [pc, #292]	; (8003574 <HAL_TIM_OC_MspInit+0x240>)
 8003450:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003454:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003456:	4b47      	ldr	r3, [pc, #284]	; (8003574 <HAL_TIM_OC_MspInit+0x240>)
 8003458:	2240      	movs	r2, #64	; 0x40
 800345a:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800345c:	4b45      	ldr	r3, [pc, #276]	; (8003574 <HAL_TIM_OC_MspInit+0x240>)
 800345e:	2200      	movs	r2, #0
 8003460:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003462:	4b44      	ldr	r3, [pc, #272]	; (8003574 <HAL_TIM_OC_MspInit+0x240>)
 8003464:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003468:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800346a:	4b42      	ldr	r3, [pc, #264]	; (8003574 <HAL_TIM_OC_MspInit+0x240>)
 800346c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003470:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003472:	4b40      	ldr	r3, [pc, #256]	; (8003574 <HAL_TIM_OC_MspInit+0x240>)
 8003474:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003478:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 800347a:	4b3e      	ldr	r3, [pc, #248]	; (8003574 <HAL_TIM_OC_MspInit+0x240>)
 800347c:	2200      	movs	r2, #0
 800347e:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003480:	4b3c      	ldr	r3, [pc, #240]	; (8003574 <HAL_TIM_OC_MspInit+0x240>)
 8003482:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003486:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003488:	4b3a      	ldr	r3, [pc, #232]	; (8003574 <HAL_TIM_OC_MspInit+0x240>)
 800348a:	2204      	movs	r2, #4
 800348c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim4_ch3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800348e:	4b39      	ldr	r3, [pc, #228]	; (8003574 <HAL_TIM_OC_MspInit+0x240>)
 8003490:	2203      	movs	r2, #3
 8003492:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim4_ch3.Init.MemBurst = DMA_MBURST_SINGLE;
 8003494:	4b37      	ldr	r3, [pc, #220]	; (8003574 <HAL_TIM_OC_MspInit+0x240>)
 8003496:	2200      	movs	r2, #0
 8003498:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim4_ch3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800349a:	4b36      	ldr	r3, [pc, #216]	; (8003574 <HAL_TIM_OC_MspInit+0x240>)
 800349c:	2200      	movs	r2, #0
 800349e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80034a0:	4834      	ldr	r0, [pc, #208]	; (8003574 <HAL_TIM_OC_MspInit+0x240>)
 80034a2:	f000 fe9d 	bl	80041e0 <HAL_DMA_Init>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <HAL_TIM_OC_MspInit+0x17c>
    {
      Error_Handler();
 80034ac:	f7ff fd66 	bl	8002f7c <Error_Handler>
    }

    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a30      	ldr	r2, [pc, #192]	; (8003574 <HAL_TIM_OC_MspInit+0x240>)
 80034b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80034b6:	4a2f      	ldr	r2, [pc, #188]	; (8003574 <HAL_TIM_OC_MspInit+0x240>)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80034bc:	e04a      	b.n	8003554 <HAL_TIM_OC_MspInit+0x220>
  else if(htim_oc->Instance==TIM5)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a2e      	ldr	r2, [pc, #184]	; (800357c <HAL_TIM_OC_MspInit+0x248>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d145      	bne.n	8003554 <HAL_TIM_OC_MspInit+0x220>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80034c8:	4b25      	ldr	r3, [pc, #148]	; (8003560 <HAL_TIM_OC_MspInit+0x22c>)
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	4a24      	ldr	r2, [pc, #144]	; (8003560 <HAL_TIM_OC_MspInit+0x22c>)
 80034ce:	f043 0308 	orr.w	r3, r3, #8
 80034d2:	6413      	str	r3, [r2, #64]	; 0x40
 80034d4:	4b22      	ldr	r3, [pc, #136]	; (8003560 <HAL_TIM_OC_MspInit+0x22c>)
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	60bb      	str	r3, [r7, #8]
 80034de:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 80034e0:	4b27      	ldr	r3, [pc, #156]	; (8003580 <HAL_TIM_OC_MspInit+0x24c>)
 80034e2:	4a28      	ldr	r2, [pc, #160]	; (8003584 <HAL_TIM_OC_MspInit+0x250>)
 80034e4:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 80034e6:	4b26      	ldr	r3, [pc, #152]	; (8003580 <HAL_TIM_OC_MspInit+0x24c>)
 80034e8:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80034ec:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034ee:	4b24      	ldr	r3, [pc, #144]	; (8003580 <HAL_TIM_OC_MspInit+0x24c>)
 80034f0:	2240      	movs	r2, #64	; 0x40
 80034f2:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80034f4:	4b22      	ldr	r3, [pc, #136]	; (8003580 <HAL_TIM_OC_MspInit+0x24c>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80034fa:	4b21      	ldr	r3, [pc, #132]	; (8003580 <HAL_TIM_OC_MspInit+0x24c>)
 80034fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003500:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003502:	4b1f      	ldr	r3, [pc, #124]	; (8003580 <HAL_TIM_OC_MspInit+0x24c>)
 8003504:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003508:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800350a:	4b1d      	ldr	r3, [pc, #116]	; (8003580 <HAL_TIM_OC_MspInit+0x24c>)
 800350c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003510:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8003512:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <HAL_TIM_OC_MspInit+0x24c>)
 8003514:	2200      	movs	r2, #0
 8003516:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003518:	4b19      	ldr	r3, [pc, #100]	; (8003580 <HAL_TIM_OC_MspInit+0x24c>)
 800351a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800351e:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003520:	4b17      	ldr	r3, [pc, #92]	; (8003580 <HAL_TIM_OC_MspInit+0x24c>)
 8003522:	2204      	movs	r2, #4
 8003524:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003526:	4b16      	ldr	r3, [pc, #88]	; (8003580 <HAL_TIM_OC_MspInit+0x24c>)
 8003528:	2203      	movs	r2, #3
 800352a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 800352c:	4b14      	ldr	r3, [pc, #80]	; (8003580 <HAL_TIM_OC_MspInit+0x24c>)
 800352e:	2200      	movs	r2, #0
 8003530:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003532:	4b13      	ldr	r3, [pc, #76]	; (8003580 <HAL_TIM_OC_MspInit+0x24c>)
 8003534:	2200      	movs	r2, #0
 8003536:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8003538:	4811      	ldr	r0, [pc, #68]	; (8003580 <HAL_TIM_OC_MspInit+0x24c>)
 800353a:	f000 fe51 	bl	80041e0 <HAL_DMA_Init>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <HAL_TIM_OC_MspInit+0x214>
      Error_Handler();
 8003544:	f7ff fd1a 	bl	8002f7c <Error_Handler>
    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a0d      	ldr	r2, [pc, #52]	; (8003580 <HAL_TIM_OC_MspInit+0x24c>)
 800354c:	629a      	str	r2, [r3, #40]	; 0x28
 800354e:	4a0c      	ldr	r2, [pc, #48]	; (8003580 <HAL_TIM_OC_MspInit+0x24c>)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003554:	bf00      	nop
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40000800 	.word	0x40000800
 8003560:	40023800 	.word	0x40023800
 8003564:	20000538 	.word	0x20000538
 8003568:	40026010 	.word	0x40026010
 800356c:	200000a8 	.word	0x200000a8
 8003570:	40026058 	.word	0x40026058
 8003574:	200003f8 	.word	0x200003f8
 8003578:	400260b8 	.word	0x400260b8
 800357c:	40000c00 	.word	0x40000c00
 8003580:	20000398 	.word	0x20000398
 8003584:	40026070 	.word	0x40026070

08003588 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08c      	sub	sp, #48	; 0x30
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003590:	f107 031c 	add.w	r3, r7, #28
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	605a      	str	r2, [r3, #4]
 800359a:	609a      	str	r2, [r3, #8]
 800359c:	60da      	str	r2, [r3, #12]
 800359e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a50      	ldr	r2, [pc, #320]	; (80036e8 <HAL_TIM_MspPostInit+0x160>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d155      	bne.n	8003656 <HAL_TIM_MspPostInit+0xce>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035aa:	4b50      	ldr	r3, [pc, #320]	; (80036ec <HAL_TIM_MspPostInit+0x164>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	4a4f      	ldr	r2, [pc, #316]	; (80036ec <HAL_TIM_MspPostInit+0x164>)
 80035b0:	f043 0301 	orr.w	r3, r3, #1
 80035b4:	6313      	str	r3, [r2, #48]	; 0x30
 80035b6:	4b4d      	ldr	r3, [pc, #308]	; (80036ec <HAL_TIM_MspPostInit+0x164>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	61bb      	str	r3, [r7, #24]
 80035c0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035c2:	4b4a      	ldr	r3, [pc, #296]	; (80036ec <HAL_TIM_MspPostInit+0x164>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	4a49      	ldr	r2, [pc, #292]	; (80036ec <HAL_TIM_MspPostInit+0x164>)
 80035c8:	f043 0302 	orr.w	r3, r3, #2
 80035cc:	6313      	str	r3, [r2, #48]	; 0x30
 80035ce:	4b47      	ldr	r3, [pc, #284]	; (80036ec <HAL_TIM_MspPostInit+0x164>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	617b      	str	r3, [r7, #20]
 80035d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035da:	4b44      	ldr	r3, [pc, #272]	; (80036ec <HAL_TIM_MspPostInit+0x164>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	4a43      	ldr	r2, [pc, #268]	; (80036ec <HAL_TIM_MspPostInit+0x164>)
 80035e0:	f043 0304 	orr.w	r3, r3, #4
 80035e4:	6313      	str	r3, [r2, #48]	; 0x30
 80035e6:	4b41      	ldr	r3, [pc, #260]	; (80036ec <HAL_TIM_MspPostInit+0x164>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	613b      	str	r3, [r7, #16]
 80035f0:	693b      	ldr	r3, [r7, #16]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM_3_CH1_MOTOR_1_Pin|TIM_3_CH1_MOTOR_2_Pin;
 80035f2:	23c0      	movs	r3, #192	; 0xc0
 80035f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f6:	2302      	movs	r3, #2
 80035f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fa:	2300      	movs	r3, #0
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fe:	2300      	movs	r3, #0
 8003600:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003602:	2302      	movs	r3, #2
 8003604:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003606:	f107 031c 	add.w	r3, r7, #28
 800360a:	4619      	mov	r1, r3
 800360c:	4838      	ldr	r0, [pc, #224]	; (80036f0 <HAL_TIM_MspPostInit+0x168>)
 800360e:	f001 f9df 	bl	80049d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM_3_CH1_MOTOR_3_Pin;
 8003612:	2301      	movs	r3, #1
 8003614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003616:	2302      	movs	r3, #2
 8003618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361a:	2300      	movs	r3, #0
 800361c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800361e:	2300      	movs	r3, #0
 8003620:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003622:	2302      	movs	r3, #2
 8003624:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM_3_CH1_MOTOR_3_GPIO_Port, &GPIO_InitStruct);
 8003626:	f107 031c 	add.w	r3, r7, #28
 800362a:	4619      	mov	r1, r3
 800362c:	4831      	ldr	r0, [pc, #196]	; (80036f4 <HAL_TIM_MspPostInit+0x16c>)
 800362e:	f001 f9cf 	bl	80049d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM_3_CH1_MOTOR_4_Pin;
 8003632:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003638:	2302      	movs	r3, #2
 800363a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363c:	2300      	movs	r3, #0
 800363e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003640:	2300      	movs	r3, #0
 8003642:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003644:	2302      	movs	r3, #2
 8003646:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM_3_CH1_MOTOR_4_GPIO_Port, &GPIO_InitStruct);
 8003648:	f107 031c 	add.w	r3, r7, #28
 800364c:	4619      	mov	r1, r3
 800364e:	482a      	ldr	r0, [pc, #168]	; (80036f8 <HAL_TIM_MspPostInit+0x170>)
 8003650:	f001 f9be 	bl	80049d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003654:	e043      	b.n	80036de <HAL_TIM_MspPostInit+0x156>
  else if(htim->Instance==TIM4)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a28      	ldr	r2, [pc, #160]	; (80036fc <HAL_TIM_MspPostInit+0x174>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d11d      	bne.n	800369c <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003660:	4b22      	ldr	r3, [pc, #136]	; (80036ec <HAL_TIM_MspPostInit+0x164>)
 8003662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003664:	4a21      	ldr	r2, [pc, #132]	; (80036ec <HAL_TIM_MspPostInit+0x164>)
 8003666:	f043 0308 	orr.w	r3, r3, #8
 800366a:	6313      	str	r3, [r2, #48]	; 0x30
 800366c:	4b1f      	ldr	r3, [pc, #124]	; (80036ec <HAL_TIM_MspPostInit+0x164>)
 800366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_DMA_LATCH_Pin|TIM4_CH2_MOTOR_1_Pin|GPIO_PIN_14;
 8003678:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800367c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367e:	2302      	movs	r3, #2
 8003680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003682:	2300      	movs	r3, #0
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003686:	2300      	movs	r3, #0
 8003688:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800368a:	2302      	movs	r3, #2
 800368c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800368e:	f107 031c 	add.w	r3, r7, #28
 8003692:	4619      	mov	r1, r3
 8003694:	481a      	ldr	r0, [pc, #104]	; (8003700 <HAL_TIM_MspPostInit+0x178>)
 8003696:	f001 f99b 	bl	80049d0 <HAL_GPIO_Init>
}
 800369a:	e020      	b.n	80036de <HAL_TIM_MspPostInit+0x156>
  else if(htim->Instance==TIM5)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a18      	ldr	r2, [pc, #96]	; (8003704 <HAL_TIM_MspPostInit+0x17c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d11b      	bne.n	80036de <HAL_TIM_MspPostInit+0x156>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a6:	4b11      	ldr	r3, [pc, #68]	; (80036ec <HAL_TIM_MspPostInit+0x164>)
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	4a10      	ldr	r2, [pc, #64]	; (80036ec <HAL_TIM_MspPostInit+0x164>)
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	6313      	str	r3, [r2, #48]	; 0x30
 80036b2:	4b0e      	ldr	r3, [pc, #56]	; (80036ec <HAL_TIM_MspPostInit+0x164>)
 80036b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	60bb      	str	r3, [r7, #8]
 80036bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80036be:	2302      	movs	r3, #2
 80036c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c2:	2302      	movs	r3, #2
 80036c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ca:	2300      	movs	r3, #0
 80036cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80036ce:	2302      	movs	r3, #2
 80036d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d2:	f107 031c 	add.w	r3, r7, #28
 80036d6:	4619      	mov	r1, r3
 80036d8:	4805      	ldr	r0, [pc, #20]	; (80036f0 <HAL_TIM_MspPostInit+0x168>)
 80036da:	f001 f979 	bl	80049d0 <HAL_GPIO_Init>
}
 80036de:	bf00      	nop
 80036e0:	3730      	adds	r7, #48	; 0x30
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40000400 	.word	0x40000400
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40020000 	.word	0x40020000
 80036f4:	40020400 	.word	0x40020400
 80036f8:	40020800 	.word	0x40020800
 80036fc:	40000800 	.word	0x40000800
 8003700:	40020c00 	.word	0x40020c00
 8003704:	40000c00 	.word	0x40000c00

08003708 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b08a      	sub	sp, #40	; 0x28
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003710:	f107 0314 	add.w	r3, r7, #20
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	609a      	str	r2, [r3, #8]
 800371c:	60da      	str	r2, [r3, #12]
 800371e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a1b      	ldr	r2, [pc, #108]	; (8003794 <HAL_UART_MspInit+0x8c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d130      	bne.n	800378c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800372a:	4b1b      	ldr	r3, [pc, #108]	; (8003798 <HAL_UART_MspInit+0x90>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	4a1a      	ldr	r2, [pc, #104]	; (8003798 <HAL_UART_MspInit+0x90>)
 8003730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003734:	6413      	str	r3, [r2, #64]	; 0x40
 8003736:	4b18      	ldr	r3, [pc, #96]	; (8003798 <HAL_UART_MspInit+0x90>)
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003742:	4b15      	ldr	r3, [pc, #84]	; (8003798 <HAL_UART_MspInit+0x90>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	4a14      	ldr	r2, [pc, #80]	; (8003798 <HAL_UART_MspInit+0x90>)
 8003748:	f043 0308 	orr.w	r3, r3, #8
 800374c:	6313      	str	r3, [r2, #48]	; 0x30
 800374e:	4b12      	ldr	r3, [pc, #72]	; (8003798 <HAL_UART_MspInit+0x90>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800375a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800375e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003760:	2302      	movs	r3, #2
 8003762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003764:	2300      	movs	r3, #0
 8003766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003768:	2303      	movs	r3, #3
 800376a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800376c:	2307      	movs	r3, #7
 800376e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003770:	f107 0314 	add.w	r3, r7, #20
 8003774:	4619      	mov	r1, r3
 8003776:	4809      	ldr	r0, [pc, #36]	; (800379c <HAL_UART_MspInit+0x94>)
 8003778:	f001 f92a 	bl	80049d0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800377c:	2200      	movs	r2, #0
 800377e:	2100      	movs	r1, #0
 8003780:	2027      	movs	r0, #39	; 0x27
 8003782:	f000 fcf6 	bl	8004172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003786:	2027      	movs	r0, #39	; 0x27
 8003788:	f000 fd0f 	bl	80041aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800378c:	bf00      	nop
 800378e:	3728      	adds	r7, #40	; 0x28
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40004800 	.word	0x40004800
 8003798:	40023800 	.word	0x40023800
 800379c:	40020c00 	.word	0x40020c00

080037a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80037a4:	bf00      	nop
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037ae:	b480      	push	{r7}
 80037b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037b2:	e7fe      	b.n	80037b2 <HardFault_Handler+0x4>

080037b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037b8:	e7fe      	b.n	80037b8 <MemManage_Handler+0x4>

080037ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037ba:	b480      	push	{r7}
 80037bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037be:	e7fe      	b.n	80037be <BusFault_Handler+0x4>

080037c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037c4:	e7fe      	b.n	80037c4 <UsageFault_Handler+0x4>

080037c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037c6:	b480      	push	{r7}
 80037c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037ca:	bf00      	nop
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037d8:	bf00      	nop
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037e2:	b480      	push	{r7}
 80037e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037e6:	bf00      	nop
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037f4:	f000 f918 	bl	8003a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037f8:	bf00      	nop
 80037fa:	bd80      	pop	{r7, pc}

080037fc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8003800:	4802      	ldr	r0, [pc, #8]	; (800380c <DMA1_Stream0_IRQHandler+0x10>)
 8003802:	f000 fe1d 	bl	8004440 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003806:	bf00      	nop
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	20000538 	.word	0x20000538

08003810 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 8003814:	4802      	ldr	r0, [pc, #8]	; (8003820 <DMA1_Stream3_IRQHandler+0x10>)
 8003816:	f000 fe13 	bl	8004440 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800381a:	bf00      	nop
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	200000a8 	.word	0x200000a8

08003824 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8003828:	4802      	ldr	r0, [pc, #8]	; (8003834 <DMA1_Stream4_IRQHandler+0x10>)
 800382a:	f000 fe09 	bl	8004440 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800382e:	bf00      	nop
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20000398 	.word	0x20000398

08003838 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800383c:	4802      	ldr	r0, [pc, #8]	; (8003848 <DMA1_Stream5_IRQHandler+0x10>)
 800383e:	f000 fdff 	bl	8004440 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003842:	bf00      	nop
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	20000498 	.word	0x20000498

0800384c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003850:	4802      	ldr	r0, [pc, #8]	; (800385c <DMA1_Stream6_IRQHandler+0x10>)
 8003852:	f000 fdf5 	bl	8004440 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003856:	bf00      	nop
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	200001d8 	.word	0x200001d8

08003860 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003864:	4802      	ldr	r0, [pc, #8]	; (8003870 <TIM1_CC_IRQHandler+0x10>)
 8003866:	f004 f989 	bl	8007b7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800386a:	bf00      	nop
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	20000458 	.word	0x20000458

08003874 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003878:	4802      	ldr	r0, [pc, #8]	; (8003884 <TIM2_IRQHandler+0x10>)
 800387a:	f004 f97f 	bl	8007b7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800387e:	bf00      	nop
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	200004f8 	.word	0x200004f8

08003888 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800388c:	4802      	ldr	r0, [pc, #8]	; (8003898 <I2C1_EV_IRQHandler+0x10>)
 800388e:	f001 fcd1 	bl	8005234 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003892:	bf00      	nop
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	20000238 	.word	0x20000238

0800389c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80038a0:	4802      	ldr	r0, [pc, #8]	; (80038ac <USART3_IRQHandler+0x10>)
 80038a2:	f005 fcb7 	bl	8009214 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80038a6:	bf00      	nop
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20000148 	.word	0x20000148

080038b0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 80038b4:	4802      	ldr	r0, [pc, #8]	; (80038c0 <DMA1_Stream7_IRQHandler+0x10>)
 80038b6:	f000 fdc3 	bl	8004440 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	200003f8 	.word	0x200003f8

080038c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038cc:	4a14      	ldr	r2, [pc, #80]	; (8003920 <_sbrk+0x5c>)
 80038ce:	4b15      	ldr	r3, [pc, #84]	; (8003924 <_sbrk+0x60>)
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038d8:	4b13      	ldr	r3, [pc, #76]	; (8003928 <_sbrk+0x64>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d102      	bne.n	80038e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038e0:	4b11      	ldr	r3, [pc, #68]	; (8003928 <_sbrk+0x64>)
 80038e2:	4a12      	ldr	r2, [pc, #72]	; (800392c <_sbrk+0x68>)
 80038e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038e6:	4b10      	ldr	r3, [pc, #64]	; (8003928 <_sbrk+0x64>)
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4413      	add	r3, r2
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d207      	bcs.n	8003904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038f4:	f006 fb36 	bl	8009f64 <__errno>
 80038f8:	4602      	mov	r2, r0
 80038fa:	230c      	movs	r3, #12
 80038fc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80038fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003902:	e009      	b.n	8003918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003904:	4b08      	ldr	r3, [pc, #32]	; (8003928 <_sbrk+0x64>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800390a:	4b07      	ldr	r3, [pc, #28]	; (8003928 <_sbrk+0x64>)
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4413      	add	r3, r2
 8003912:	4a05      	ldr	r2, [pc, #20]	; (8003928 <_sbrk+0x64>)
 8003914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003916:	68fb      	ldr	r3, [r7, #12]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	20040000 	.word	0x20040000
 8003924:	00000400 	.word	0x00000400
 8003928:	2000009c 	.word	0x2000009c
 800392c:	200005a8 	.word	0x200005a8

08003930 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003934:	4b08      	ldr	r3, [pc, #32]	; (8003958 <SystemInit+0x28>)
 8003936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393a:	4a07      	ldr	r2, [pc, #28]	; (8003958 <SystemInit+0x28>)
 800393c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003940:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003944:	4b04      	ldr	r3, [pc, #16]	; (8003958 <SystemInit+0x28>)
 8003946:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800394a:	609a      	str	r2, [r3, #8]
#endif

}
 800394c:	bf00      	nop
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	e000ed00 	.word	0xe000ed00

0800395c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800395c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003994 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003960:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003962:	e003      	b.n	800396c <LoopCopyDataInit>

08003964 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003964:	4b0c      	ldr	r3, [pc, #48]	; (8003998 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003966:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003968:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800396a:	3104      	adds	r1, #4

0800396c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800396c:	480b      	ldr	r0, [pc, #44]	; (800399c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800396e:	4b0c      	ldr	r3, [pc, #48]	; (80039a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003970:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003972:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003974:	d3f6      	bcc.n	8003964 <CopyDataInit>
  ldr  r2, =_sbss
 8003976:	4a0b      	ldr	r2, [pc, #44]	; (80039a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003978:	e002      	b.n	8003980 <LoopFillZerobss>

0800397a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800397a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800397c:	f842 3b04 	str.w	r3, [r2], #4

08003980 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003980:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003982:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003984:	d3f9      	bcc.n	800397a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003986:	f7ff ffd3 	bl	8003930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800398a:	f006 faf1 	bl	8009f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800398e:	f7fe fd1f 	bl	80023d0 <main>
  bx  lr    
 8003992:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003994:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8003998:	0800a87c 	.word	0x0800a87c
  ldr  r0, =_sdata
 800399c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80039a0:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80039a4:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80039a8:	200005a8 	.word	0x200005a8

080039ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039ac:	e7fe      	b.n	80039ac <ADC_IRQHandler>

080039ae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039b2:	2003      	movs	r0, #3
 80039b4:	f000 fbd2 	bl	800415c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039b8:	2000      	movs	r0, #0
 80039ba:	f000 f805 	bl	80039c8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80039be:	f7ff fae5 	bl	8002f8c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039d0:	4b12      	ldr	r3, [pc, #72]	; (8003a1c <HAL_InitTick+0x54>)
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	4b12      	ldr	r3, [pc, #72]	; (8003a20 <HAL_InitTick+0x58>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	4619      	mov	r1, r3
 80039da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039de:	fbb3 f3f1 	udiv	r3, r3, r1
 80039e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 fbed 	bl	80041c6 <HAL_SYSTICK_Config>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e00e      	b.n	8003a14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b0f      	cmp	r3, #15
 80039fa:	d80a      	bhi.n	8003a12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039fc:	2200      	movs	r2, #0
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	f04f 30ff 	mov.w	r0, #4294967295
 8003a04:	f000 fbb5 	bl	8004172 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a08:	4a06      	ldr	r2, [pc, #24]	; (8003a24 <HAL_InitTick+0x5c>)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	e000      	b.n	8003a14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	20000004 	.word	0x20000004
 8003a20:	2000000c 	.word	0x2000000c
 8003a24:	20000008 	.word	0x20000008

08003a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a2c:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <HAL_IncTick+0x20>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	461a      	mov	r2, r3
 8003a32:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <HAL_IncTick+0x24>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4413      	add	r3, r2
 8003a38:	4a04      	ldr	r2, [pc, #16]	; (8003a4c <HAL_IncTick+0x24>)
 8003a3a:	6013      	str	r3, [r2, #0]
}
 8003a3c:	bf00      	nop
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	2000000c 	.word	0x2000000c
 8003a4c:	200005a0 	.word	0x200005a0

08003a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  return uwTick;
 8003a54:	4b03      	ldr	r3, [pc, #12]	; (8003a64 <HAL_GetTick+0x14>)
 8003a56:	681b      	ldr	r3, [r3, #0]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	200005a0 	.word	0x200005a0

08003a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a70:	f7ff ffee 	bl	8003a50 <HAL_GetTick>
 8003a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a80:	d005      	beq.n	8003a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a82:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <HAL_Delay+0x40>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	461a      	mov	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a8e:	bf00      	nop
 8003a90:	f7ff ffde 	bl	8003a50 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d8f7      	bhi.n	8003a90 <HAL_Delay+0x28>
  {
  }
}
 8003aa0:	bf00      	nop
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	2000000c 	.word	0x2000000c

08003aac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e031      	b.n	8003b26 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d109      	bne.n	8003ade <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff fa82 	bl	8002fd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	f003 0310 	and.w	r3, r3, #16
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d116      	bne.n	8003b18 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aee:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <HAL_ADC_Init+0x84>)
 8003af0:	4013      	ands	r3, r2
 8003af2:	f043 0202 	orr.w	r2, r3, #2
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f964 	bl	8003dc8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	f023 0303 	bic.w	r3, r3, #3
 8003b0e:	f043 0201 	orr.w	r2, r3, #1
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	641a      	str	r2, [r3, #64]	; 0x40
 8003b16:	e001      	b.n	8003b1c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	ffffeefd 	.word	0xffffeefd

08003b34 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d101      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0x1c>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	e12a      	b.n	8003da6 <HAL_ADC_ConfigChannel+0x272>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b09      	cmp	r3, #9
 8003b5e:	d93a      	bls.n	8003bd6 <HAL_ADC_ConfigChannel+0xa2>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b68:	d035      	beq.n	8003bd6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68d9      	ldr	r1, [r3, #12]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	461a      	mov	r2, r3
 8003b78:	4613      	mov	r3, r2
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	4413      	add	r3, r2
 8003b7e:	3b1e      	subs	r3, #30
 8003b80:	2207      	movs	r2, #7
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	43da      	mvns	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	400a      	ands	r2, r1
 8003b8e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a87      	ldr	r2, [pc, #540]	; (8003db4 <HAL_ADC_ConfigChannel+0x280>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d10a      	bne.n	8003bb0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68d9      	ldr	r1, [r3, #12]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	061a      	lsls	r2, r3, #24
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bae:	e035      	b.n	8003c1c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68d9      	ldr	r1, [r3, #12]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	4403      	add	r3, r0
 8003bc8:	3b1e      	subs	r3, #30
 8003bca:	409a      	lsls	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bd4:	e022      	b.n	8003c1c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6919      	ldr	r1, [r3, #16]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	461a      	mov	r2, r3
 8003be4:	4613      	mov	r3, r2
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	4413      	add	r3, r2
 8003bea:	2207      	movs	r2, #7
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	43da      	mvns	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	400a      	ands	r2, r1
 8003bf8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6919      	ldr	r1, [r3, #16]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	4403      	add	r3, r0
 8003c12:	409a      	lsls	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2b06      	cmp	r3, #6
 8003c22:	d824      	bhi.n	8003c6e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	3b05      	subs	r3, #5
 8003c36:	221f      	movs	r2, #31
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	43da      	mvns	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	400a      	ands	r2, r1
 8003c44:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	4618      	mov	r0, r3
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4413      	add	r3, r2
 8003c5e:	3b05      	subs	r3, #5
 8003c60:	fa00 f203 	lsl.w	r2, r0, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	635a      	str	r2, [r3, #52]	; 0x34
 8003c6c:	e04c      	b.n	8003d08 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b0c      	cmp	r3, #12
 8003c74:	d824      	bhi.n	8003cc0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	4613      	mov	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	3b23      	subs	r3, #35	; 0x23
 8003c88:	221f      	movs	r2, #31
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	43da      	mvns	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	400a      	ands	r2, r1
 8003c96:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	3b23      	subs	r3, #35	; 0x23
 8003cb2:	fa00 f203 	lsl.w	r2, r0, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	631a      	str	r2, [r3, #48]	; 0x30
 8003cbe:	e023      	b.n	8003d08 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	3b41      	subs	r3, #65	; 0x41
 8003cd2:	221f      	movs	r2, #31
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	43da      	mvns	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	400a      	ands	r2, r1
 8003ce0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	4618      	mov	r0, r3
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	3b41      	subs	r3, #65	; 0x41
 8003cfc:	fa00 f203 	lsl.w	r2, r0, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a2a      	ldr	r2, [pc, #168]	; (8003db8 <HAL_ADC_ConfigChannel+0x284>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d10a      	bne.n	8003d28 <HAL_ADC_ConfigChannel+0x1f4>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d1a:	d105      	bne.n	8003d28 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003d1c:	4b27      	ldr	r3, [pc, #156]	; (8003dbc <HAL_ADC_ConfigChannel+0x288>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	4a26      	ldr	r2, [pc, #152]	; (8003dbc <HAL_ADC_ConfigChannel+0x288>)
 8003d22:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003d26:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a22      	ldr	r2, [pc, #136]	; (8003db8 <HAL_ADC_ConfigChannel+0x284>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d109      	bne.n	8003d46 <HAL_ADC_ConfigChannel+0x212>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b12      	cmp	r3, #18
 8003d38:	d105      	bne.n	8003d46 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003d3a:	4b20      	ldr	r3, [pc, #128]	; (8003dbc <HAL_ADC_ConfigChannel+0x288>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	4a1f      	ldr	r2, [pc, #124]	; (8003dbc <HAL_ADC_ConfigChannel+0x288>)
 8003d40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d44:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a1b      	ldr	r2, [pc, #108]	; (8003db8 <HAL_ADC_ConfigChannel+0x284>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d125      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x268>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a17      	ldr	r2, [pc, #92]	; (8003db4 <HAL_ADC_ConfigChannel+0x280>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d003      	beq.n	8003d62 <HAL_ADC_ConfigChannel+0x22e>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b11      	cmp	r3, #17
 8003d60:	d11c      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003d62:	4b16      	ldr	r3, [pc, #88]	; (8003dbc <HAL_ADC_ConfigChannel+0x288>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	4a15      	ldr	r2, [pc, #84]	; (8003dbc <HAL_ADC_ConfigChannel+0x288>)
 8003d68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d6c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a10      	ldr	r2, [pc, #64]	; (8003db4 <HAL_ADC_ConfigChannel+0x280>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d111      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003d78:	4b11      	ldr	r3, [pc, #68]	; (8003dc0 <HAL_ADC_ConfigChannel+0x28c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a11      	ldr	r2, [pc, #68]	; (8003dc4 <HAL_ADC_ConfigChannel+0x290>)
 8003d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d82:	0c9a      	lsrs	r2, r3, #18
 8003d84:	4613      	mov	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003d8e:	e002      	b.n	8003d96 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1f9      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	10000012 	.word	0x10000012
 8003db8:	40012000 	.word	0x40012000
 8003dbc:	40012300 	.word	0x40012300
 8003dc0:	20000004 	.word	0x20000004
 8003dc4:	431bde83 	.word	0x431bde83

08003dc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003dd0:	4b78      	ldr	r3, [pc, #480]	; (8003fb4 <ADC_Init+0x1ec>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	4a77      	ldr	r2, [pc, #476]	; (8003fb4 <ADC_Init+0x1ec>)
 8003dd6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003dda:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003ddc:	4b75      	ldr	r3, [pc, #468]	; (8003fb4 <ADC_Init+0x1ec>)
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	4973      	ldr	r1, [pc, #460]	; (8003fb4 <ADC_Init+0x1ec>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003df8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6859      	ldr	r1, [r3, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	021a      	lsls	r2, r3, #8
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003e1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6859      	ldr	r1, [r3, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6899      	ldr	r1, [r3, #8]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e56:	4a58      	ldr	r2, [pc, #352]	; (8003fb8 <ADC_Init+0x1f0>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d022      	beq.n	8003ea2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6899      	ldr	r1, [r3, #8]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6899      	ldr	r1, [r3, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	609a      	str	r2, [r3, #8]
 8003ea0:	e00f      	b.n	8003ec2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003eb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ec0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0202 	bic.w	r2, r2, #2
 8003ed0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6899      	ldr	r1, [r3, #8]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	005a      	lsls	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d01b      	beq.n	8003f28 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003efe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003f0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6859      	ldr	r1, [r3, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	035a      	lsls	r2, r3, #13
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	605a      	str	r2, [r3, #4]
 8003f26:	e007      	b.n	8003f38 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003f46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	051a      	lsls	r2, r3, #20
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6899      	ldr	r1, [r3, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f7a:	025a      	lsls	r2, r3, #9
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689a      	ldr	r2, [r3, #8]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6899      	ldr	r1, [r3, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	029a      	lsls	r2, r3, #10
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	609a      	str	r2, [r3, #8]
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	40012300 	.word	0x40012300
 8003fb8:	0f000001 	.word	0x0f000001

08003fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <__NVIC_SetPriorityGrouping+0x40>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fd8:	4013      	ands	r3, r2
 8003fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003fe4:	4b06      	ldr	r3, [pc, #24]	; (8004000 <__NVIC_SetPriorityGrouping+0x44>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fea:	4a04      	ldr	r2, [pc, #16]	; (8003ffc <__NVIC_SetPriorityGrouping+0x40>)
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	60d3      	str	r3, [r2, #12]
}
 8003ff0:	bf00      	nop
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	e000ed00 	.word	0xe000ed00
 8004000:	05fa0000 	.word	0x05fa0000

08004004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004008:	4b04      	ldr	r3, [pc, #16]	; (800401c <__NVIC_GetPriorityGrouping+0x18>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	0a1b      	lsrs	r3, r3, #8
 800400e:	f003 0307 	and.w	r3, r3, #7
}
 8004012:	4618      	mov	r0, r3
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	e000ed00 	.word	0xe000ed00

08004020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	4603      	mov	r3, r0
 8004028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800402a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402e:	2b00      	cmp	r3, #0
 8004030:	db0b      	blt.n	800404a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004032:	79fb      	ldrb	r3, [r7, #7]
 8004034:	f003 021f 	and.w	r2, r3, #31
 8004038:	4907      	ldr	r1, [pc, #28]	; (8004058 <__NVIC_EnableIRQ+0x38>)
 800403a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	2001      	movs	r0, #1
 8004042:	fa00 f202 	lsl.w	r2, r0, r2
 8004046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	e000e100 	.word	0xe000e100

0800405c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	6039      	str	r1, [r7, #0]
 8004066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406c:	2b00      	cmp	r3, #0
 800406e:	db0a      	blt.n	8004086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	b2da      	uxtb	r2, r3
 8004074:	490c      	ldr	r1, [pc, #48]	; (80040a8 <__NVIC_SetPriority+0x4c>)
 8004076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407a:	0112      	lsls	r2, r2, #4
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	440b      	add	r3, r1
 8004080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004084:	e00a      	b.n	800409c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	b2da      	uxtb	r2, r3
 800408a:	4908      	ldr	r1, [pc, #32]	; (80040ac <__NVIC_SetPriority+0x50>)
 800408c:	79fb      	ldrb	r3, [r7, #7]
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	3b04      	subs	r3, #4
 8004094:	0112      	lsls	r2, r2, #4
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	440b      	add	r3, r1
 800409a:	761a      	strb	r2, [r3, #24]
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	e000e100 	.word	0xe000e100
 80040ac:	e000ed00 	.word	0xe000ed00

080040b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b089      	sub	sp, #36	; 0x24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f1c3 0307 	rsb	r3, r3, #7
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	bf28      	it	cs
 80040ce:	2304      	movcs	r3, #4
 80040d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	3304      	adds	r3, #4
 80040d6:	2b06      	cmp	r3, #6
 80040d8:	d902      	bls.n	80040e0 <NVIC_EncodePriority+0x30>
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	3b03      	subs	r3, #3
 80040de:	e000      	b.n	80040e2 <NVIC_EncodePriority+0x32>
 80040e0:	2300      	movs	r3, #0
 80040e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e4:	f04f 32ff 	mov.w	r2, #4294967295
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43da      	mvns	r2, r3
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	401a      	ands	r2, r3
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040f8:	f04f 31ff 	mov.w	r1, #4294967295
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004102:	43d9      	mvns	r1, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004108:	4313      	orrs	r3, r2
         );
}
 800410a:	4618      	mov	r0, r3
 800410c:	3724      	adds	r7, #36	; 0x24
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
	...

08004118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3b01      	subs	r3, #1
 8004124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004128:	d301      	bcc.n	800412e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800412a:	2301      	movs	r3, #1
 800412c:	e00f      	b.n	800414e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800412e:	4a0a      	ldr	r2, [pc, #40]	; (8004158 <SysTick_Config+0x40>)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3b01      	subs	r3, #1
 8004134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004136:	210f      	movs	r1, #15
 8004138:	f04f 30ff 	mov.w	r0, #4294967295
 800413c:	f7ff ff8e 	bl	800405c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004140:	4b05      	ldr	r3, [pc, #20]	; (8004158 <SysTick_Config+0x40>)
 8004142:	2200      	movs	r2, #0
 8004144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004146:	4b04      	ldr	r3, [pc, #16]	; (8004158 <SysTick_Config+0x40>)
 8004148:	2207      	movs	r2, #7
 800414a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	e000e010 	.word	0xe000e010

0800415c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff ff29 	bl	8003fbc <__NVIC_SetPriorityGrouping>
}
 800416a:	bf00      	nop
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004172:	b580      	push	{r7, lr}
 8004174:	b086      	sub	sp, #24
 8004176:	af00      	add	r7, sp, #0
 8004178:	4603      	mov	r3, r0
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	607a      	str	r2, [r7, #4]
 800417e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004180:	2300      	movs	r3, #0
 8004182:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004184:	f7ff ff3e 	bl	8004004 <__NVIC_GetPriorityGrouping>
 8004188:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	68b9      	ldr	r1, [r7, #8]
 800418e:	6978      	ldr	r0, [r7, #20]
 8004190:	f7ff ff8e 	bl	80040b0 <NVIC_EncodePriority>
 8004194:	4602      	mov	r2, r0
 8004196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800419a:	4611      	mov	r1, r2
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff ff5d 	bl	800405c <__NVIC_SetPriority>
}
 80041a2:	bf00      	nop
 80041a4:	3718      	adds	r7, #24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b082      	sub	sp, #8
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	4603      	mov	r3, r0
 80041b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff ff31 	bl	8004020 <__NVIC_EnableIRQ>
}
 80041be:	bf00      	nop
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b082      	sub	sp, #8
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7ff ffa2 	bl	8004118 <SysTick_Config>
 80041d4:	4603      	mov	r3, r0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
	...

080041e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80041ec:	f7ff fc30 	bl	8003a50 <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e099      	b.n	8004330 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0201 	bic.w	r2, r2, #1
 800421a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800421c:	e00f      	b.n	800423e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800421e:	f7ff fc17 	bl	8003a50 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b05      	cmp	r3, #5
 800422a:	d908      	bls.n	800423e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2220      	movs	r2, #32
 8004230:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2203      	movs	r2, #3
 8004236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e078      	b.n	8004330 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1e8      	bne.n	800421e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	4b38      	ldr	r3, [pc, #224]	; (8004338 <HAL_DMA_Init+0x158>)
 8004258:	4013      	ands	r3, r2
 800425a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800426a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004276:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004282:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	2b04      	cmp	r3, #4
 8004296:	d107      	bne.n	80042a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a0:	4313      	orrs	r3, r2
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f023 0307 	bic.w	r3, r3, #7
 80042be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d117      	bne.n	8004302 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	4313      	orrs	r3, r2
 80042da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00e      	beq.n	8004302 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 faf9 	bl	80048dc <DMA_CheckFifoParam>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d008      	beq.n	8004302 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2240      	movs	r2, #64	; 0x40
 80042f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80042fe:	2301      	movs	r3, #1
 8004300:	e016      	b.n	8004330 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 fab0 	bl	8004870 <DMA_CalcBaseAndBitshift>
 8004310:	4603      	mov	r3, r0
 8004312:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004318:	223f      	movs	r2, #63	; 0x3f
 800431a:	409a      	lsls	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3718      	adds	r7, #24
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	e010803f 	.word	0xe010803f

0800433c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
 8004348:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800434a:	2300      	movs	r3, #0
 800434c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004352:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800435a:	2b01      	cmp	r3, #1
 800435c:	d101      	bne.n	8004362 <HAL_DMA_Start_IT+0x26>
 800435e:	2302      	movs	r3, #2
 8004360:	e048      	b.n	80043f4 <HAL_DMA_Start_IT+0xb8>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b01      	cmp	r3, #1
 8004374:	d137      	bne.n	80043e6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2202      	movs	r2, #2
 800437a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	68b9      	ldr	r1, [r7, #8]
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f000 fa42 	bl	8004814 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004394:	223f      	movs	r2, #63	; 0x3f
 8004396:	409a      	lsls	r2, r3
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0216 	orr.w	r2, r2, #22
 80043aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695a      	ldr	r2, [r3, #20]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043ba:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d007      	beq.n	80043d4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0208 	orr.w	r2, r2, #8
 80043d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	e005      	b.n	80043f2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80043ee:	2302      	movs	r3, #2
 80043f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80043f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3718      	adds	r7, #24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d004      	beq.n	800441a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2280      	movs	r2, #128	; 0x80
 8004414:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e00c      	b.n	8004434 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2205      	movs	r2, #5
 800441e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0201 	bic.w	r2, r2, #1
 8004430:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004448:	2300      	movs	r3, #0
 800444a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800444c:	4b92      	ldr	r3, [pc, #584]	; (8004698 <HAL_DMA_IRQHandler+0x258>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a92      	ldr	r2, [pc, #584]	; (800469c <HAL_DMA_IRQHandler+0x25c>)
 8004452:	fba2 2303 	umull	r2, r3, r2, r3
 8004456:	0a9b      	lsrs	r3, r3, #10
 8004458:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446a:	2208      	movs	r2, #8
 800446c:	409a      	lsls	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	4013      	ands	r3, r2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d01a      	beq.n	80044ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b00      	cmp	r3, #0
 8004482:	d013      	beq.n	80044ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0204 	bic.w	r2, r2, #4
 8004492:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004498:	2208      	movs	r2, #8
 800449a:	409a      	lsls	r2, r3
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a4:	f043 0201 	orr.w	r2, r3, #1
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b0:	2201      	movs	r2, #1
 80044b2:	409a      	lsls	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4013      	ands	r3, r2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d012      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00b      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ce:	2201      	movs	r2, #1
 80044d0:	409a      	lsls	r2, r3
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044da:	f043 0202 	orr.w	r2, r3, #2
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e6:	2204      	movs	r2, #4
 80044e8:	409a      	lsls	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4013      	ands	r3, r2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d012      	beq.n	8004518 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00b      	beq.n	8004518 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004504:	2204      	movs	r2, #4
 8004506:	409a      	lsls	r2, r3
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004510:	f043 0204 	orr.w	r2, r3, #4
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451c:	2210      	movs	r2, #16
 800451e:	409a      	lsls	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4013      	ands	r3, r2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d043      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	d03c      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800453a:	2210      	movs	r2, #16
 800453c:	409a      	lsls	r2, r3
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d018      	beq.n	8004582 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d108      	bne.n	8004570 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	2b00      	cmp	r3, #0
 8004564:	d024      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	4798      	blx	r3
 800456e:	e01f      	b.n	80045b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004574:	2b00      	cmp	r3, #0
 8004576:	d01b      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	4798      	blx	r3
 8004580:	e016      	b.n	80045b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458c:	2b00      	cmp	r3, #0
 800458e:	d107      	bne.n	80045a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0208 	bic.w	r2, r2, #8
 800459e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b4:	2220      	movs	r2, #32
 80045b6:	409a      	lsls	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4013      	ands	r3, r2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 808e 	beq.w	80046de <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0310 	and.w	r3, r3, #16
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f000 8086 	beq.w	80046de <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d6:	2220      	movs	r2, #32
 80045d8:	409a      	lsls	r2, r3
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b05      	cmp	r3, #5
 80045e8:	d136      	bne.n	8004658 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0216 	bic.w	r2, r2, #22
 80045f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695a      	ldr	r2, [r3, #20]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004608:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	2b00      	cmp	r3, #0
 8004610:	d103      	bne.n	800461a <HAL_DMA_IRQHandler+0x1da>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004616:	2b00      	cmp	r3, #0
 8004618:	d007      	beq.n	800462a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0208 	bic.w	r2, r2, #8
 8004628:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800462e:	223f      	movs	r2, #63	; 0x3f
 8004630:	409a      	lsls	r2, r3
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800464a:	2b00      	cmp	r3, #0
 800464c:	d07d      	beq.n	800474a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	4798      	blx	r3
        }
        return;
 8004656:	e078      	b.n	800474a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d01c      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d108      	bne.n	8004686 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004678:	2b00      	cmp	r3, #0
 800467a:	d030      	beq.n	80046de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	4798      	blx	r3
 8004684:	e02b      	b.n	80046de <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468a:	2b00      	cmp	r3, #0
 800468c:	d027      	beq.n	80046de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	4798      	blx	r3
 8004696:	e022      	b.n	80046de <HAL_DMA_IRQHandler+0x29e>
 8004698:	20000004 	.word	0x20000004
 800469c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10f      	bne.n	80046ce <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0210 	bic.w	r2, r2, #16
 80046bc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d032      	beq.n	800474c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d022      	beq.n	8004738 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2205      	movs	r2, #5
 80046f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0201 	bic.w	r2, r2, #1
 8004708:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	3301      	adds	r3, #1
 800470e:	60bb      	str	r3, [r7, #8]
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	429a      	cmp	r2, r3
 8004714:	d307      	bcc.n	8004726 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1f2      	bne.n	800470a <HAL_DMA_IRQHandler+0x2ca>
 8004724:	e000      	b.n	8004728 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004726:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800473c:	2b00      	cmp	r3, #0
 800473e:	d005      	beq.n	800474c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	4798      	blx	r3
 8004748:	e000      	b.n	800474c <HAL_DMA_IRQHandler+0x30c>
        return;
 800474a:	bf00      	nop
    }
  }
}
 800474c:	3718      	adds	r7, #24
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop

08004754 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	460b      	mov	r3, r1
 800475e:	607a      	str	r2, [r7, #4]
 8004760:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8004762:	2300      	movs	r3, #0
 8004764:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800476c:	2b01      	cmp	r3, #1
 800476e:	d101      	bne.n	8004774 <HAL_DMA_RegisterCallback+0x20>
 8004770:	2302      	movs	r3, #2
 8004772:	e03c      	b.n	80047ee <HAL_DMA_RegisterCallback+0x9a>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b01      	cmp	r3, #1
 8004786:	d129      	bne.n	80047dc <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 8004788:	7afb      	ldrb	r3, [r7, #11]
 800478a:	2b05      	cmp	r3, #5
 800478c:	d829      	bhi.n	80047e2 <HAL_DMA_RegisterCallback+0x8e>
 800478e:	a201      	add	r2, pc, #4	; (adr r2, 8004794 <HAL_DMA_RegisterCallback+0x40>)
 8004790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004794:	080047ad 	.word	0x080047ad
 8004798:	080047b5 	.word	0x080047b5
 800479c:	080047bd 	.word	0x080047bd
 80047a0:	080047c5 	.word	0x080047c5
 80047a4:	080047cd 	.word	0x080047cd
 80047a8:	080047d5 	.word	0x080047d5
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 80047b2:	e017      	b.n	80047e4 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80047ba:	e013      	b.n	80047e4 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80047c2:	e00f      	b.n	80047e4 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80047ca:	e00b      	b.n	80047e4 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80047d2:	e007      	b.n	80047e4 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80047da:	e003      	b.n	80047e4 <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	75fb      	strb	r3, [r7, #23]
 80047e0:	e000      	b.n	80047e4 <HAL_DMA_RegisterCallback+0x90>
      break;
 80047e2:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 80047ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	371c      	adds	r7, #28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop

080047fc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004808:	4618      	mov	r0, r3
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
 8004820:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004830:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	2b40      	cmp	r3, #64	; 0x40
 8004840:	d108      	bne.n	8004854 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004852:	e007      	b.n	8004864 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	60da      	str	r2, [r3, #12]
}
 8004864:	bf00      	nop
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	b2db      	uxtb	r3, r3
 800487e:	3b10      	subs	r3, #16
 8004880:	4a13      	ldr	r2, [pc, #76]	; (80048d0 <DMA_CalcBaseAndBitshift+0x60>)
 8004882:	fba2 2303 	umull	r2, r3, r2, r3
 8004886:	091b      	lsrs	r3, r3, #4
 8004888:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800488a:	4a12      	ldr	r2, [pc, #72]	; (80048d4 <DMA_CalcBaseAndBitshift+0x64>)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4413      	add	r3, r2
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	461a      	mov	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b03      	cmp	r3, #3
 800489c:	d908      	bls.n	80048b0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	461a      	mov	r2, r3
 80048a4:	4b0c      	ldr	r3, [pc, #48]	; (80048d8 <DMA_CalcBaseAndBitshift+0x68>)
 80048a6:	4013      	ands	r3, r2
 80048a8:	1d1a      	adds	r2, r3, #4
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	659a      	str	r2, [r3, #88]	; 0x58
 80048ae:	e006      	b.n	80048be <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	461a      	mov	r2, r3
 80048b6:	4b08      	ldr	r3, [pc, #32]	; (80048d8 <DMA_CalcBaseAndBitshift+0x68>)
 80048b8:	4013      	ands	r3, r2
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	aaaaaaab 	.word	0xaaaaaaab
 80048d4:	0800a830 	.word	0x0800a830
 80048d8:	fffffc00 	.word	0xfffffc00

080048dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048e4:	2300      	movs	r3, #0
 80048e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d11f      	bne.n	8004936 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	2b03      	cmp	r3, #3
 80048fa:	d855      	bhi.n	80049a8 <DMA_CheckFifoParam+0xcc>
 80048fc:	a201      	add	r2, pc, #4	; (adr r2, 8004904 <DMA_CheckFifoParam+0x28>)
 80048fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004902:	bf00      	nop
 8004904:	08004915 	.word	0x08004915
 8004908:	08004927 	.word	0x08004927
 800490c:	08004915 	.word	0x08004915
 8004910:	080049a9 	.word	0x080049a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004918:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d045      	beq.n	80049ac <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004924:	e042      	b.n	80049ac <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800492e:	d13f      	bne.n	80049b0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004934:	e03c      	b.n	80049b0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800493e:	d121      	bne.n	8004984 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2b03      	cmp	r3, #3
 8004944:	d836      	bhi.n	80049b4 <DMA_CheckFifoParam+0xd8>
 8004946:	a201      	add	r2, pc, #4	; (adr r2, 800494c <DMA_CheckFifoParam+0x70>)
 8004948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494c:	0800495d 	.word	0x0800495d
 8004950:	08004963 	.word	0x08004963
 8004954:	0800495d 	.word	0x0800495d
 8004958:	08004975 	.word	0x08004975
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	73fb      	strb	r3, [r7, #15]
      break;
 8004960:	e02f      	b.n	80049c2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004966:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d024      	beq.n	80049b8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004972:	e021      	b.n	80049b8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800497c:	d11e      	bne.n	80049bc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004982:	e01b      	b.n	80049bc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b02      	cmp	r3, #2
 8004988:	d902      	bls.n	8004990 <DMA_CheckFifoParam+0xb4>
 800498a:	2b03      	cmp	r3, #3
 800498c:	d003      	beq.n	8004996 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800498e:	e018      	b.n	80049c2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	73fb      	strb	r3, [r7, #15]
      break;
 8004994:	e015      	b.n	80049c2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00e      	beq.n	80049c0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	73fb      	strb	r3, [r7, #15]
      break;
 80049a6:	e00b      	b.n	80049c0 <DMA_CheckFifoParam+0xe4>
      break;
 80049a8:	bf00      	nop
 80049aa:	e00a      	b.n	80049c2 <DMA_CheckFifoParam+0xe6>
      break;
 80049ac:	bf00      	nop
 80049ae:	e008      	b.n	80049c2 <DMA_CheckFifoParam+0xe6>
      break;
 80049b0:	bf00      	nop
 80049b2:	e006      	b.n	80049c2 <DMA_CheckFifoParam+0xe6>
      break;
 80049b4:	bf00      	nop
 80049b6:	e004      	b.n	80049c2 <DMA_CheckFifoParam+0xe6>
      break;
 80049b8:	bf00      	nop
 80049ba:	e002      	b.n	80049c2 <DMA_CheckFifoParam+0xe6>
      break;   
 80049bc:	bf00      	nop
 80049be:	e000      	b.n	80049c2 <DMA_CheckFifoParam+0xe6>
      break;
 80049c0:	bf00      	nop
    }
  } 
  
  return status; 
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b089      	sub	sp, #36	; 0x24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80049da:	2300      	movs	r3, #0
 80049dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80049de:	2300      	movs	r3, #0
 80049e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80049e2:	2300      	movs	r3, #0
 80049e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80049e6:	2300      	movs	r3, #0
 80049e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80049ea:	2300      	movs	r3, #0
 80049ec:	61fb      	str	r3, [r7, #28]
 80049ee:	e169      	b.n	8004cc4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80049f0:	2201      	movs	r2, #1
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	fa02 f303 	lsl.w	r3, r2, r3
 80049f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	4013      	ands	r3, r2
 8004a02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	f040 8158 	bne.w	8004cbe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d00b      	beq.n	8004a2e <HAL_GPIO_Init+0x5e>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d007      	beq.n	8004a2e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a22:	2b11      	cmp	r3, #17
 8004a24:	d003      	beq.n	8004a2e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2b12      	cmp	r3, #18
 8004a2c:	d130      	bne.n	8004a90 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	2203      	movs	r2, #3
 8004a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3e:	43db      	mvns	r3, r3
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	4013      	ands	r3, r2
 8004a44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a64:	2201      	movs	r2, #1
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6c:	43db      	mvns	r3, r3
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	4013      	ands	r3, r2
 8004a72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	091b      	lsrs	r3, r3, #4
 8004a7a:	f003 0201 	and.w	r2, r3, #1
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	fa02 f303 	lsl.w	r3, r2, r3
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	2203      	movs	r2, #3
 8004a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa0:	43db      	mvns	r3, r3
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d003      	beq.n	8004ad0 <HAL_GPIO_Init+0x100>
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	2b12      	cmp	r3, #18
 8004ace:	d123      	bne.n	8004b18 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	08da      	lsrs	r2, r3, #3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	3208      	adds	r2, #8
 8004ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	f003 0307 	and.w	r3, r3, #7
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	220f      	movs	r2, #15
 8004ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aec:	43db      	mvns	r3, r3
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	4013      	ands	r3, r2
 8004af2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	691a      	ldr	r2, [r3, #16]
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	fa02 f303 	lsl.w	r3, r2, r3
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	08da      	lsrs	r2, r3, #3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	3208      	adds	r2, #8
 8004b12:	69b9      	ldr	r1, [r7, #24]
 8004b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	2203      	movs	r2, #3
 8004b24:	fa02 f303 	lsl.w	r3, r2, r3
 8004b28:	43db      	mvns	r3, r3
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f003 0203 	and.w	r2, r3, #3
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 80b2 	beq.w	8004cbe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b5a:	4b5f      	ldr	r3, [pc, #380]	; (8004cd8 <HAL_GPIO_Init+0x308>)
 8004b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5e:	4a5e      	ldr	r2, [pc, #376]	; (8004cd8 <HAL_GPIO_Init+0x308>)
 8004b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b64:	6453      	str	r3, [r2, #68]	; 0x44
 8004b66:	4b5c      	ldr	r3, [pc, #368]	; (8004cd8 <HAL_GPIO_Init+0x308>)
 8004b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b6e:	60fb      	str	r3, [r7, #12]
 8004b70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004b72:	4a5a      	ldr	r2, [pc, #360]	; (8004cdc <HAL_GPIO_Init+0x30c>)
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	089b      	lsrs	r3, r3, #2
 8004b78:	3302      	adds	r3, #2
 8004b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	220f      	movs	r2, #15
 8004b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8e:	43db      	mvns	r3, r3
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	4013      	ands	r3, r2
 8004b94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a51      	ldr	r2, [pc, #324]	; (8004ce0 <HAL_GPIO_Init+0x310>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d02b      	beq.n	8004bf6 <HAL_GPIO_Init+0x226>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a50      	ldr	r2, [pc, #320]	; (8004ce4 <HAL_GPIO_Init+0x314>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d025      	beq.n	8004bf2 <HAL_GPIO_Init+0x222>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a4f      	ldr	r2, [pc, #316]	; (8004ce8 <HAL_GPIO_Init+0x318>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d01f      	beq.n	8004bee <HAL_GPIO_Init+0x21e>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a4e      	ldr	r2, [pc, #312]	; (8004cec <HAL_GPIO_Init+0x31c>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d019      	beq.n	8004bea <HAL_GPIO_Init+0x21a>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a4d      	ldr	r2, [pc, #308]	; (8004cf0 <HAL_GPIO_Init+0x320>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d013      	beq.n	8004be6 <HAL_GPIO_Init+0x216>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a4c      	ldr	r2, [pc, #304]	; (8004cf4 <HAL_GPIO_Init+0x324>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d00d      	beq.n	8004be2 <HAL_GPIO_Init+0x212>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a4b      	ldr	r2, [pc, #300]	; (8004cf8 <HAL_GPIO_Init+0x328>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d007      	beq.n	8004bde <HAL_GPIO_Init+0x20e>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a4a      	ldr	r2, [pc, #296]	; (8004cfc <HAL_GPIO_Init+0x32c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d101      	bne.n	8004bda <HAL_GPIO_Init+0x20a>
 8004bd6:	2307      	movs	r3, #7
 8004bd8:	e00e      	b.n	8004bf8 <HAL_GPIO_Init+0x228>
 8004bda:	2308      	movs	r3, #8
 8004bdc:	e00c      	b.n	8004bf8 <HAL_GPIO_Init+0x228>
 8004bde:	2306      	movs	r3, #6
 8004be0:	e00a      	b.n	8004bf8 <HAL_GPIO_Init+0x228>
 8004be2:	2305      	movs	r3, #5
 8004be4:	e008      	b.n	8004bf8 <HAL_GPIO_Init+0x228>
 8004be6:	2304      	movs	r3, #4
 8004be8:	e006      	b.n	8004bf8 <HAL_GPIO_Init+0x228>
 8004bea:	2303      	movs	r3, #3
 8004bec:	e004      	b.n	8004bf8 <HAL_GPIO_Init+0x228>
 8004bee:	2302      	movs	r3, #2
 8004bf0:	e002      	b.n	8004bf8 <HAL_GPIO_Init+0x228>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e000      	b.n	8004bf8 <HAL_GPIO_Init+0x228>
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	69fa      	ldr	r2, [r7, #28]
 8004bfa:	f002 0203 	and.w	r2, r2, #3
 8004bfe:	0092      	lsls	r2, r2, #2
 8004c00:	4093      	lsls	r3, r2
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004c08:	4934      	ldr	r1, [pc, #208]	; (8004cdc <HAL_GPIO_Init+0x30c>)
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	089b      	lsrs	r3, r3, #2
 8004c0e:	3302      	adds	r3, #2
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c16:	4b3a      	ldr	r3, [pc, #232]	; (8004d00 <HAL_GPIO_Init+0x330>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	43db      	mvns	r3, r3
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	4013      	ands	r3, r2
 8004c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004c32:	69ba      	ldr	r2, [r7, #24]
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c3a:	4a31      	ldr	r2, [pc, #196]	; (8004d00 <HAL_GPIO_Init+0x330>)
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004c40:	4b2f      	ldr	r3, [pc, #188]	; (8004d00 <HAL_GPIO_Init+0x330>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	43db      	mvns	r3, r3
 8004c4a:	69ba      	ldr	r2, [r7, #24]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c64:	4a26      	ldr	r2, [pc, #152]	; (8004d00 <HAL_GPIO_Init+0x330>)
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c6a:	4b25      	ldr	r3, [pc, #148]	; (8004d00 <HAL_GPIO_Init+0x330>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	43db      	mvns	r3, r3
 8004c74:	69ba      	ldr	r2, [r7, #24]
 8004c76:	4013      	ands	r3, r2
 8004c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c8e:	4a1c      	ldr	r2, [pc, #112]	; (8004d00 <HAL_GPIO_Init+0x330>)
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c94:	4b1a      	ldr	r3, [pc, #104]	; (8004d00 <HAL_GPIO_Init+0x330>)
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	43db      	mvns	r3, r3
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004cb8:	4a11      	ldr	r2, [pc, #68]	; (8004d00 <HAL_GPIO_Init+0x330>)
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	61fb      	str	r3, [r7, #28]
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	2b0f      	cmp	r3, #15
 8004cc8:	f67f ae92 	bls.w	80049f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004ccc:	bf00      	nop
 8004cce:	3724      	adds	r7, #36	; 0x24
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	40013800 	.word	0x40013800
 8004ce0:	40020000 	.word	0x40020000
 8004ce4:	40020400 	.word	0x40020400
 8004ce8:	40020800 	.word	0x40020800
 8004cec:	40020c00 	.word	0x40020c00
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	40021400 	.word	0x40021400
 8004cf8:	40021800 	.word	0x40021800
 8004cfc:	40021c00 	.word	0x40021c00
 8004d00:	40013c00 	.word	0x40013c00

08004d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	807b      	strh	r3, [r7, #2]
 8004d10:	4613      	mov	r3, r2
 8004d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d14:	787b      	ldrb	r3, [r7, #1]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d1a:	887a      	ldrh	r2, [r7, #2]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004d20:	e003      	b.n	8004d2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004d22:	887b      	ldrh	r3, [r7, #2]
 8004d24:	041a      	lsls	r2, r3, #16
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	619a      	str	r2, [r3, #24]
}
 8004d2a:	bf00      	nop
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
	...

08004d38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e07f      	b.n	8004e4a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d106      	bne.n	8004d64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7fe f978 	bl	8003054 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2224      	movs	r2, #36	; 0x24
 8004d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 0201 	bic.w	r2, r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d107      	bne.n	8004db2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689a      	ldr	r2, [r3, #8]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dae:	609a      	str	r2, [r3, #8]
 8004db0:	e006      	b.n	8004dc0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689a      	ldr	r2, [r3, #8]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004dbe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d104      	bne.n	8004dd2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dd0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6859      	ldr	r1, [r3, #4]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	4b1d      	ldr	r3, [pc, #116]	; (8004e54 <HAL_I2C_Init+0x11c>)
 8004dde:	430b      	orrs	r3, r1
 8004de0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68da      	ldr	r2, [r3, #12]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004df0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691a      	ldr	r2, [r3, #16]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	ea42 0103 	orr.w	r1, r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	021a      	lsls	r2, r3, #8
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	69d9      	ldr	r1, [r3, #28]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a1a      	ldr	r2, [r3, #32]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f042 0201 	orr.w	r2, r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2220      	movs	r2, #32
 8004e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	02008000 	.word	0x02008000

08004e58 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08a      	sub	sp, #40	; 0x28
 8004e5c:	af02      	add	r7, sp, #8
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	4608      	mov	r0, r1
 8004e62:	4611      	mov	r1, r2
 8004e64:	461a      	mov	r2, r3
 8004e66:	4603      	mov	r3, r0
 8004e68:	817b      	strh	r3, [r7, #10]
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	813b      	strh	r3, [r7, #8]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b20      	cmp	r3, #32
 8004e7c:	f040 80d5 	bne.w	800502a <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d002      	beq.n	8004e8c <HAL_I2C_Mem_Write_DMA+0x34>
 8004e86:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d105      	bne.n	8004e98 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e92:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e0c9      	b.n	800502c <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ea6:	d101      	bne.n	8004eac <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e0bf      	b.n	800502c <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d101      	bne.n	8004eba <HAL_I2C_Mem_Write_DMA+0x62>
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	e0b8      	b.n	800502c <HAL_I2C_Mem_Write_DMA+0x1d4>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ec2:	f7fe fdc5 	bl	8003a50 <HAL_GetTick>
 8004ec6:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2221      	movs	r2, #33	; 0x21
 8004ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2240      	movs	r2, #64	; 0x40
 8004ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ee2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4a51      	ldr	r2, [pc, #324]	; (8005034 <HAL_I2C_Mem_Write_DMA+0x1dc>)
 8004eee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4a51      	ldr	r2, [pc, #324]	; (8005038 <HAL_I2C_Mem_Write_DMA+0x1e0>)
 8004ef4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	2bff      	cmp	r3, #255	; 0xff
 8004efe:	d906      	bls.n	8004f0e <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	22ff      	movs	r2, #255	; 0xff
 8004f04:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004f06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f0a:	61fb      	str	r3, [r7, #28]
 8004f0c:	e007      	b.n	8004f1e <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004f18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f1c:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004f1e:	88f8      	ldrh	r0, [r7, #6]
 8004f20:	893a      	ldrh	r2, [r7, #8]
 8004f22:	8979      	ldrh	r1, [r7, #10]
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	9301      	str	r3, [sp, #4]
 8004f28:	2319      	movs	r3, #25
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 fcb6 	bl	80058a0 <I2C_RequestMemoryWrite>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d005      	beq.n	8004f46 <HAL_I2C_Mem_Write_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e072      	b.n	800502c <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d020      	beq.n	8004f90 <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f52:	4a3a      	ldr	r2, [pc, #232]	; (800503c <HAL_I2C_Mem_Write_DMA+0x1e4>)
 8004f54:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5a:	4a39      	ldr	r2, [pc, #228]	; (8005040 <HAL_I2C_Mem_Write_DMA+0x1e8>)
 8004f5c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f62:	2200      	movs	r2, #0
 8004f64:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004f72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3328      	adds	r3, #40	; 0x28
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f80:	f7ff f9dc 	bl	800433c <HAL_DMA_Start_IT>
 8004f84:	4603      	mov	r3, r0
 8004f86:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8004f88:	7dfb      	ldrb	r3, [r7, #23]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d139      	bne.n	8005002 <HAL_I2C_Mem_Write_DMA+0x1aa>
 8004f8e:	e013      	b.n	8004fb8 <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e039      	b.n	800502c <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	8979      	ldrh	r1, [r7, #10]
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	9300      	str	r3, [sp, #0]
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f001 fa92 	bl	80064f0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004fe6:	2111      	movs	r1, #17
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f001 faaf 	bl	800654c <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ffc:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	e014      	b.n	800502c <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2220      	movs	r2, #32
 8005006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005016:	f043 0210 	orr.w	r2, r3, #16
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e000      	b.n	800502c <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 800502a:	2302      	movs	r3, #2
  }
}
 800502c:	4618      	mov	r0, r3
 800502e:	3720      	adds	r7, #32
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	ffff0000 	.word	0xffff0000
 8005038:	0800552b 	.word	0x0800552b
 800503c:	0800613d 	.word	0x0800613d
 8005040:	08006269 	.word	0x08006269

08005044 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b08a      	sub	sp, #40	; 0x28
 8005048:	af02      	add	r7, sp, #8
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	4608      	mov	r0, r1
 800504e:	4611      	mov	r1, r2
 8005050:	461a      	mov	r2, r3
 8005052:	4603      	mov	r3, r0
 8005054:	817b      	strh	r3, [r7, #10]
 8005056:	460b      	mov	r3, r1
 8005058:	813b      	strh	r3, [r7, #8]
 800505a:	4613      	mov	r3, r2
 800505c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b20      	cmp	r3, #32
 8005068:	f040 80d5 	bne.w	8005216 <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 800506c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <HAL_I2C_Mem_Read_DMA+0x34>
 8005072:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005074:	2b00      	cmp	r3, #0
 8005076:	d105      	bne.n	8005084 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800507e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e0c9      	b.n	8005218 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800508e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005092:	d101      	bne.n	8005098 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8005094:	2302      	movs	r3, #2
 8005096:	e0bf      	b.n	8005218 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d101      	bne.n	80050a6 <HAL_I2C_Mem_Read_DMA+0x62>
 80050a2:	2302      	movs	r3, #2
 80050a4:	e0b8      	b.n	8005218 <HAL_I2C_Mem_Read_DMA+0x1d4>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80050ae:	f7fe fccf 	bl	8003a50 <HAL_GetTick>
 80050b2:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2222      	movs	r2, #34	; 0x22
 80050b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2240      	movs	r2, #64	; 0x40
 80050c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80050d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4a51      	ldr	r2, [pc, #324]	; (8005220 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 80050da:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4a51      	ldr	r2, [pc, #324]	; (8005224 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 80050e0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	2bff      	cmp	r3, #255	; 0xff
 80050ea:	d906      	bls.n	80050fa <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	22ff      	movs	r2, #255	; 0xff
 80050f0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80050f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050f6:	61fb      	str	r3, [r7, #28]
 80050f8:	e007      	b.n	800510a <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fe:	b29a      	uxth	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005104:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005108:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800510a:	88f8      	ldrh	r0, [r7, #6]
 800510c:	893a      	ldrh	r2, [r7, #8]
 800510e:	8979      	ldrh	r1, [r7, #10]
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	9301      	str	r3, [sp, #4]
 8005114:	2319      	movs	r3, #25
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	4603      	mov	r3, r0
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f000 fc14 	bl	8005948 <I2C_RequestMemoryRead>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d005      	beq.n	8005132 <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e072      	b.n	8005218 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005136:	2b00      	cmp	r3, #0
 8005138:	d020      	beq.n	800517c <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513e:	4a3a      	ldr	r2, [pc, #232]	; (8005228 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 8005140:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005146:	4a39      	ldr	r2, [pc, #228]	; (800522c <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8005148:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514e:	2200      	movs	r2, #0
 8005150:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005156:	2200      	movs	r2, #0
 8005158:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3324      	adds	r3, #36	; 0x24
 8005164:	4619      	mov	r1, r3
 8005166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516c:	f7ff f8e6 	bl	800433c <HAL_DMA_Start_IT>
 8005170:	4603      	mov	r3, r0
 8005172:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8005174:	7dfb      	ldrb	r3, [r7, #23]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d139      	bne.n	80051ee <HAL_I2C_Mem_Read_DMA+0x1aa>
 800517a:	e013      	b.n	80051a4 <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2220      	movs	r2, #32
 8005180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005190:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e039      	b.n	8005218 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	8979      	ldrh	r1, [r7, #10]
 80051ac:	4b20      	ldr	r3, [pc, #128]	; (8005230 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f001 f99c 	bl	80064f0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051bc:	b29a      	uxth	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80051d2:	2111      	movs	r1, #17
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f001 f9b9 	bl	800654c <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051e8:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80051ea:	2300      	movs	r3, #0
 80051ec:	e014      	b.n	8005218 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2220      	movs	r2, #32
 80051f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005202:	f043 0210 	orr.w	r2, r3, #16
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e000      	b.n	8005218 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8005216:	2302      	movs	r3, #2
  }
}
 8005218:	4618      	mov	r0, r3
 800521a:	3720      	adds	r7, #32
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	ffff0000 	.word	0xffff0000
 8005224:	0800552b 	.word	0x0800552b
 8005228:	080061d3 	.word	0x080061d3
 800522c:	08006269 	.word	0x08006269
 8005230:	80002400 	.word	0x80002400

08005234 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005250:	2b00      	cmp	r3, #0
 8005252:	d005      	beq.n	8005260 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	68f9      	ldr	r1, [r7, #12]
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	4798      	blx	r3
  }
}
 8005260:	bf00      	nop
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	460b      	mov	r3, r1
 80052ae:	70fb      	strb	r3, [r7, #3]
 80052b0:	4613      	mov	r3, r2
 80052b2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005340:	2b01      	cmp	r3, #1
 8005342:	d101      	bne.n	8005348 <I2C_Slave_ISR_IT+0x24>
 8005344:	2302      	movs	r3, #2
 8005346:	e0ec      	b.n	8005522 <I2C_Slave_ISR_IT+0x1fe>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	095b      	lsrs	r3, r3, #5
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b00      	cmp	r3, #0
 800535a:	d009      	beq.n	8005370 <I2C_Slave_ISR_IT+0x4c>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	095b      	lsrs	r3, r3, #5
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005368:	6939      	ldr	r1, [r7, #16]
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f000 fcd8 	bl	8005d20 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	091b      	lsrs	r3, r3, #4
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d04d      	beq.n	8005418 <I2C_Slave_ISR_IT+0xf4>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	091b      	lsrs	r3, r3, #4
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b00      	cmp	r3, #0
 8005386:	d047      	beq.n	8005418 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800538c:	b29b      	uxth	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d128      	bne.n	80053e4 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b28      	cmp	r3, #40	; 0x28
 800539c:	d108      	bne.n	80053b0 <I2C_Slave_ISR_IT+0x8c>
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053a4:	d104      	bne.n	80053b0 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80053a6:	6939      	ldr	r1, [r7, #16]
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 fd8f 	bl	8005ecc <I2C_ITListenCplt>
 80053ae:	e032      	b.n	8005416 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b29      	cmp	r3, #41	; 0x29
 80053ba:	d10e      	bne.n	80053da <I2C_Slave_ISR_IT+0xb6>
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053c2:	d00a      	beq.n	80053da <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2210      	movs	r2, #16
 80053ca:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 fe91 	bl	80060f4 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f000 fbcb 	bl	8005b6e <I2C_ITSlaveSeqCplt>
 80053d8:	e01d      	b.n	8005416 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2210      	movs	r2, #16
 80053e0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80053e2:	e096      	b.n	8005512 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2210      	movs	r2, #16
 80053ea:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f0:	f043 0204 	orr.w	r2, r3, #4
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d004      	beq.n	8005408 <I2C_Slave_ISR_IT+0xe4>
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005404:	f040 8085 	bne.w	8005512 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540c:	4619      	mov	r1, r3
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f000 fdb0 	bl	8005f74 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005414:	e07d      	b.n	8005512 <I2C_Slave_ISR_IT+0x1ee>
 8005416:	e07c      	b.n	8005512 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	089b      	lsrs	r3, r3, #2
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	2b00      	cmp	r3, #0
 8005422:	d030      	beq.n	8005486 <I2C_Slave_ISR_IT+0x162>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	089b      	lsrs	r3, r3, #2
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d02a      	beq.n	8005486 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005434:	b29b      	uxth	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d018      	beq.n	800546c <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	b2d2      	uxtb	r2, r2
 8005446:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005456:	3b01      	subs	r3, #1
 8005458:	b29a      	uxth	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005462:	b29b      	uxth	r3, r3
 8005464:	3b01      	subs	r3, #1
 8005466:	b29a      	uxth	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005470:	b29b      	uxth	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d14f      	bne.n	8005516 <I2C_Slave_ISR_IT+0x1f2>
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800547c:	d04b      	beq.n	8005516 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f000 fb75 	bl	8005b6e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005484:	e047      	b.n	8005516 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	08db      	lsrs	r3, r3, #3
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00a      	beq.n	80054a8 <I2C_Slave_ISR_IT+0x184>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	08db      	lsrs	r3, r3, #3
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d004      	beq.n	80054a8 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800549e:	6939      	ldr	r1, [r7, #16]
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f000 faa5 	bl	80059f0 <I2C_ITAddrCplt>
 80054a6:	e037      	b.n	8005518 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	085b      	lsrs	r3, r3, #1
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d031      	beq.n	8005518 <I2C_Slave_ISR_IT+0x1f4>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	085b      	lsrs	r3, r3, #1
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d02b      	beq.n	8005518 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d018      	beq.n	80054fc <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ce:	781a      	ldrb	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	1c5a      	adds	r2, r3, #1
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	3b01      	subs	r3, #1
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	851a      	strh	r2, [r3, #40]	; 0x28
 80054fa:	e00d      	b.n	8005518 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005502:	d002      	beq.n	800550a <I2C_Slave_ISR_IT+0x1e6>
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d106      	bne.n	8005518 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f000 fb2f 	bl	8005b6e <I2C_ITSlaveSeqCplt>
 8005510:	e002      	b.n	8005518 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005512:	bf00      	nop
 8005514:	e000      	b.n	8005518 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005516:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b088      	sub	sp, #32
 800552e:	af02      	add	r7, sp, #8
 8005530:	60f8      	str	r0, [r7, #12]
 8005532:	60b9      	str	r1, [r7, #8]
 8005534:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800553c:	2b01      	cmp	r3, #1
 800553e:	d101      	bne.n	8005544 <I2C_Master_ISR_DMA+0x1a>
 8005540:	2302      	movs	r3, #2
 8005542:	e0e1      	b.n	8005708 <I2C_Master_ISR_DMA+0x1de>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	091b      	lsrs	r3, r3, #4
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b00      	cmp	r3, #0
 8005556:	d017      	beq.n	8005588 <I2C_Master_ISR_DMA+0x5e>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	091b      	lsrs	r3, r3, #4
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b00      	cmp	r3, #0
 8005562:	d011      	beq.n	8005588 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2210      	movs	r2, #16
 800556a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005570:	f043 0204 	orr.w	r2, r3, #4
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005578:	2112      	movs	r1, #18
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f000 ffe6 	bl	800654c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f000 fdb7 	bl	80060f4 <I2C_Flush_TXDR>
 8005586:	e0ba      	b.n	80056fe <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	09db      	lsrs	r3, r3, #7
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b00      	cmp	r3, #0
 8005592:	d072      	beq.n	800567a <I2C_Master_ISR_DMA+0x150>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	099b      	lsrs	r3, r3, #6
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b00      	cmp	r3, #0
 800559e:	d06c      	beq.n	800567a <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055ae:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d04e      	beq.n	8005658 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055c6:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	2bff      	cmp	r3, #255	; 0xff
 80055d0:	d906      	bls.n	80055e0 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	22ff      	movs	r2, #255	; 0xff
 80055d6:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80055d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055dc:	617b      	str	r3, [r7, #20]
 80055de:	e010      	b.n	8005602 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055f2:	d003      	beq.n	80055fc <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f8:	617b      	str	r3, [r7, #20]
 80055fa:	e002      	b.n	8005602 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80055fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005600:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005606:	b2da      	uxtb	r2, r3
 8005608:	8a79      	ldrh	r1, [r7, #18]
 800560a:	2300      	movs	r3, #0
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 ff6d 	bl	80064f0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800561a:	b29a      	uxth	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	b29a      	uxth	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b22      	cmp	r3, #34	; 0x22
 8005632:	d108      	bne.n	8005646 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005642:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005644:	e05b      	b.n	80056fe <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005654:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005656:	e052      	b.n	80056fe <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005662:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005666:	d003      	beq.n	8005670 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f000 fa43 	bl	8005af4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800566e:	e046      	b.n	80056fe <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005670:	2140      	movs	r1, #64	; 0x40
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f000 fc7e 	bl	8005f74 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005678:	e041      	b.n	80056fe <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	099b      	lsrs	r3, r3, #6
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	2b00      	cmp	r3, #0
 8005684:	d029      	beq.n	80056da <I2C_Master_ISR_DMA+0x1b0>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	099b      	lsrs	r3, r3, #6
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b00      	cmp	r3, #0
 8005690:	d023      	beq.n	80056da <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005696:	b29b      	uxth	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	d119      	bne.n	80056d0 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056aa:	d027      	beq.n	80056fc <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056b4:	d108      	bne.n	80056c8 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056c4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80056c6:	e019      	b.n	80056fc <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 fa13 	bl	8005af4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80056ce:	e015      	b.n	80056fc <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80056d0:	2140      	movs	r1, #64	; 0x40
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f000 fc4e 	bl	8005f74 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80056d8:	e010      	b.n	80056fc <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	095b      	lsrs	r3, r3, #5
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00b      	beq.n	80056fe <I2C_Master_ISR_DMA+0x1d4>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	095b      	lsrs	r3, r3, #5
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d005      	beq.n	80056fe <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80056f2:	68b9      	ldr	r1, [r7, #8]
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 fa77 	bl	8005be8 <I2C_ITMasterCplt>
 80056fa:	e000      	b.n	80056fe <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80056fc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3718      	adds	r7, #24
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005720:	613b      	str	r3, [r7, #16]
  uint32_t treatdmanack = 0U;
 8005722:	2300      	movs	r3, #0
 8005724:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800572c:	2b01      	cmp	r3, #1
 800572e:	d101      	bne.n	8005734 <I2C_Slave_ISR_DMA+0x24>
 8005730:	2302      	movs	r3, #2
 8005732:	e0b1      	b.n	8005898 <I2C_Slave_ISR_DMA+0x188>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	095b      	lsrs	r3, r3, #5
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b00      	cmp	r3, #0
 8005746:	d009      	beq.n	800575c <I2C_Slave_ISR_DMA+0x4c>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	095b      	lsrs	r3, r3, #5
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	d003      	beq.n	800575c <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005754:	68b9      	ldr	r1, [r7, #8]
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 fae2 	bl	8005d20 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	091b      	lsrs	r3, r3, #4
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 8082 	beq.w	800586e <I2C_Slave_ISR_DMA+0x15e>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	091b      	lsrs	r3, r3, #4
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d07b      	beq.n	800586e <I2C_Slave_ISR_DMA+0x15e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	0b9b      	lsrs	r3, r3, #14
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d105      	bne.n	800578e <I2C_Slave_ISR_DMA+0x7e>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	0bdb      	lsrs	r3, r3, #15
 8005786:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800578a:	2b00      	cmp	r3, #0
 800578c:	d068      	beq.n	8005860 <I2C_Slave_ISR_DMA+0x150>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00d      	beq.n	80057b2 <I2C_Slave_ISR_DMA+0xa2>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	0bdb      	lsrs	r3, r3, #15
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d007      	beq.n	80057b2 <I2C_Slave_ISR_DMA+0xa2>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <I2C_Slave_ISR_DMA+0xa2>
          {
            treatdmanack = 1U;
 80057ae:	2301      	movs	r3, #1
 80057b0:	617b      	str	r3, [r7, #20]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00d      	beq.n	80057d6 <I2C_Slave_ISR_DMA+0xc6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	0b9b      	lsrs	r3, r3, #14
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d007      	beq.n	80057d6 <I2C_Slave_ISR_DMA+0xc6>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <I2C_Slave_ISR_DMA+0xc6>
          {
            treatdmanack = 1U;
 80057d2:	2301      	movs	r3, #1
 80057d4:	617b      	str	r3, [r7, #20]
          }
        }
      }

      if (treatdmanack == 1U)
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d128      	bne.n	800582e <I2C_Slave_ISR_DMA+0x11e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	2b28      	cmp	r3, #40	; 0x28
 80057e6:	d108      	bne.n	80057fa <I2C_Slave_ISR_DMA+0xea>
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057ee:	d104      	bne.n	80057fa <I2C_Slave_ISR_DMA+0xea>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80057f0:	68b9      	ldr	r1, [r7, #8]
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f000 fb6a 	bl	8005ecc <I2C_ITListenCplt>
 80057f8:	e031      	b.n	800585e <I2C_Slave_ISR_DMA+0x14e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b29      	cmp	r3, #41	; 0x29
 8005804:	d10e      	bne.n	8005824 <I2C_Slave_ISR_DMA+0x114>
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800580c:	d00a      	beq.n	8005824 <I2C_Slave_ISR_DMA+0x114>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2210      	movs	r2, #16
 8005814:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f000 fc6c 	bl	80060f4 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f000 f9a6 	bl	8005b6e <I2C_ITSlaveSeqCplt>
 8005822:	e01c      	b.n	800585e <I2C_Slave_ISR_DMA+0x14e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2210      	movs	r2, #16
 800582a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800582c:	e01d      	b.n	800586a <I2C_Slave_ISR_DMA+0x15a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2210      	movs	r2, #16
 8005834:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800583a:	f043 0204 	orr.w	r2, r3, #4
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	645a      	str	r2, [r3, #68]	; 0x44

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d003      	beq.n	8005850 <I2C_Slave_ISR_DMA+0x140>
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800584e:	d10c      	bne.n	800586a <I2C_Slave_ISR_DMA+0x15a>
        {
          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005854:	4619      	mov	r1, r3
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f000 fb8c 	bl	8005f74 <I2C_ITError>
      if (treatdmanack == 1U)
 800585c:	e005      	b.n	800586a <I2C_Slave_ISR_DMA+0x15a>
 800585e:	e004      	b.n	800586a <I2C_Slave_ISR_DMA+0x15a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2210      	movs	r2, #16
 8005866:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005868:	e011      	b.n	800588e <I2C_Slave_ISR_DMA+0x17e>
      if (treatdmanack == 1U)
 800586a:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800586c:	e00f      	b.n	800588e <I2C_Slave_ISR_DMA+0x17e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	08db      	lsrs	r3, r3, #3
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b00      	cmp	r3, #0
 8005878:	d009      	beq.n	800588e <I2C_Slave_ISR_DMA+0x17e>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	08db      	lsrs	r3, r3, #3
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <I2C_Slave_ISR_DMA+0x17e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005886:	68b9      	ldr	r1, [r7, #8]
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f000 f8b1 	bl	80059f0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3718      	adds	r7, #24
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af02      	add	r7, sp, #8
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	4608      	mov	r0, r1
 80058aa:	4611      	mov	r1, r2
 80058ac:	461a      	mov	r2, r3
 80058ae:	4603      	mov	r3, r0
 80058b0:	817b      	strh	r3, [r7, #10]
 80058b2:	460b      	mov	r3, r1
 80058b4:	813b      	strh	r3, [r7, #8]
 80058b6:	4613      	mov	r3, r2
 80058b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80058ba:	88fb      	ldrh	r3, [r7, #6]
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	8979      	ldrh	r1, [r7, #10]
 80058c0:	4b20      	ldr	r3, [pc, #128]	; (8005944 <I2C_RequestMemoryWrite+0xa4>)
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 fe11 	bl	80064f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058ce:	69fa      	ldr	r2, [r7, #28]
 80058d0:	69b9      	ldr	r1, [r7, #24]
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f000 fd66 	bl	80063a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e02c      	b.n	800593c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058e2:	88fb      	ldrh	r3, [r7, #6]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d105      	bne.n	80058f4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058e8:	893b      	ldrh	r3, [r7, #8]
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	629a      	str	r2, [r3, #40]	; 0x28
 80058f2:	e015      	b.n	8005920 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80058f4:	893b      	ldrh	r3, [r7, #8]
 80058f6:	0a1b      	lsrs	r3, r3, #8
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005902:	69fa      	ldr	r2, [r7, #28]
 8005904:	69b9      	ldr	r1, [r7, #24]
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f000 fd4c 	bl	80063a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e012      	b.n	800593c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005916:	893b      	ldrh	r3, [r7, #8]
 8005918:	b2da      	uxtb	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	2200      	movs	r2, #0
 8005928:	2180      	movs	r1, #128	; 0x80
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f000 fcfa 	bl	8006324 <I2C_WaitOnFlagUntilTimeout>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e000      	b.n	800593c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	80002000 	.word	0x80002000

08005948 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af02      	add	r7, sp, #8
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	4608      	mov	r0, r1
 8005952:	4611      	mov	r1, r2
 8005954:	461a      	mov	r2, r3
 8005956:	4603      	mov	r3, r0
 8005958:	817b      	strh	r3, [r7, #10]
 800595a:	460b      	mov	r3, r1
 800595c:	813b      	strh	r3, [r7, #8]
 800595e:	4613      	mov	r3, r2
 8005960:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005962:	88fb      	ldrh	r3, [r7, #6]
 8005964:	b2da      	uxtb	r2, r3
 8005966:	8979      	ldrh	r1, [r7, #10]
 8005968:	4b20      	ldr	r3, [pc, #128]	; (80059ec <I2C_RequestMemoryRead+0xa4>)
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	2300      	movs	r3, #0
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f000 fdbe 	bl	80064f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005974:	69fa      	ldr	r2, [r7, #28]
 8005976:	69b9      	ldr	r1, [r7, #24]
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 fd13 	bl	80063a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e02c      	b.n	80059e2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005988:	88fb      	ldrh	r3, [r7, #6]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d105      	bne.n	800599a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800598e:	893b      	ldrh	r3, [r7, #8]
 8005990:	b2da      	uxtb	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	629a      	str	r2, [r3, #40]	; 0x28
 8005998:	e015      	b.n	80059c6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800599a:	893b      	ldrh	r3, [r7, #8]
 800599c:	0a1b      	lsrs	r3, r3, #8
 800599e:	b29b      	uxth	r3, r3
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059a8:	69fa      	ldr	r2, [r7, #28]
 80059aa:	69b9      	ldr	r1, [r7, #24]
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 fcf9 	bl	80063a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d001      	beq.n	80059bc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e012      	b.n	80059e2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80059bc:	893b      	ldrh	r3, [r7, #8]
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	2200      	movs	r2, #0
 80059ce:	2140      	movs	r1, #64	; 0x40
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f000 fca7 	bl	8006324 <I2C_WaitOnFlagUntilTimeout>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d001      	beq.n	80059e0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e000      	b.n	80059e2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	80002000 	.word	0x80002000

080059f0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a06:	2b28      	cmp	r3, #40	; 0x28
 8005a08:	d168      	bne.n	8005adc <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	0c1b      	lsrs	r3, r3, #16
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	0c1b      	lsrs	r3, r3, #16
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005a28:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a36:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005a44:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d137      	bne.n	8005abe <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8005a4e:	897b      	ldrh	r3, [r7, #10]
 8005a50:	09db      	lsrs	r3, r3, #7
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	89bb      	ldrh	r3, [r7, #12]
 8005a56:	4053      	eors	r3, r2
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	f003 0306 	and.w	r3, r3, #6
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d11c      	bne.n	8005a9c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005a62:	897b      	ldrh	r3, [r7, #10]
 8005a64:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d139      	bne.n	8005aec <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2208      	movs	r2, #8
 8005a84:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005a8e:	89ba      	ldrh	r2, [r7, #12]
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
 8005a92:	4619      	mov	r1, r3
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f7ff fc05 	bl	80052a4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005a9a:	e027      	b.n	8005aec <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 8005a9c:	893b      	ldrh	r3, [r7, #8]
 8005a9e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005aa0:	2104      	movs	r1, #4
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fdc0 	bl	8006628 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005ab0:	89ba      	ldrh	r2, [r7, #12]
 8005ab2:	7bfb      	ldrb	r3, [r7, #15]
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7ff fbf4 	bl	80052a4 <HAL_I2C_AddrCallback>
}
 8005abc:	e016      	b.n	8005aec <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005abe:	2104      	movs	r1, #4
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 fdb1 	bl	8006628 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005ace:	89ba      	ldrh	r2, [r7, #12]
 8005ad0:	7bfb      	ldrb	r3, [r7, #15]
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7ff fbe5 	bl	80052a4 <HAL_I2C_AddrCallback>
}
 8005ada:	e007      	b.n	8005aec <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2208      	movs	r2, #8
 8005ae2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8005aec:	bf00      	nop
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b21      	cmp	r3, #33	; 0x21
 8005b0e:	d115      	bne.n	8005b3c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2220      	movs	r2, #32
 8005b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2211      	movs	r2, #17
 8005b1c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005b24:	2101      	movs	r1, #1
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 fd7e 	bl	8006628 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7ff fb97 	bl	8005268 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b3a:	e014      	b.n	8005b66 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2212      	movs	r2, #18
 8005b48:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005b50:	2102      	movs	r1, #2
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fd68 	bl	8006628 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f7fc fc15 	bl	8002390 <HAL_I2C_MasterRxCpltCallback>
}
 8005b66:	bf00      	nop
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b082      	sub	sp, #8
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b29      	cmp	r3, #41	; 0x29
 8005b88:	d112      	bne.n	8005bb0 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2228      	movs	r2, #40	; 0x28
 8005b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2221      	movs	r2, #33	; 0x21
 8005b96:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005b98:	2101      	movs	r1, #1
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fd44 	bl	8006628 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f7ff fb67 	bl	800527c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005bae:	e017      	b.n	8005be0 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8005bba:	d111      	bne.n	8005be0 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2228      	movs	r2, #40	; 0x28
 8005bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2222      	movs	r2, #34	; 0x22
 8005bc8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005bca:	2102      	movs	r1, #2
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 fd2b 	bl	8006628 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7ff fb58 	bl	8005290 <HAL_I2C_SlaveRxCpltCallback>
}
 8005be0:	bf00      	nop
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6859      	ldr	r1, [r3, #4]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	4b44      	ldr	r3, [pc, #272]	; (8005d18 <I2C_ITMasterCplt+0x130>)
 8005c06:	400b      	ands	r3, r1
 8005c08:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a40      	ldr	r2, [pc, #256]	; (8005d1c <I2C_ITMasterCplt+0x134>)
 8005c1a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	091b      	lsrs	r3, r3, #4
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d009      	beq.n	8005c3c <I2C_ITMasterCplt+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2210      	movs	r2, #16
 8005c2e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c34:	f043 0204 	orr.w	r2, r3, #4
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fa59 	bl	80060f4 <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005c42:	2103      	movs	r1, #3
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 fcef 	bl	8006628 <I2C_Disable_IRQ>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	2b60      	cmp	r3, #96	; 0x60
 8005c5a:	d002      	beq.n	8005c62 <I2C_ITMasterCplt+0x7a>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d006      	beq.n	8005c70 <I2C_ITMasterCplt+0x88>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c66:	4619      	mov	r1, r3
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f983 	bl	8005f74 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005c6e:	e04e      	b.n	8005d0e <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b21      	cmp	r3, #33	; 0x21
 8005c7a:	d121      	bne.n	8005cc0 <I2C_ITMasterCplt+0xd8>
    hi2c->State = HAL_I2C_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	2b40      	cmp	r3, #64	; 0x40
 8005c8e:	d10b      	bne.n	8005ca8 <I2C_ITMasterCplt+0xc0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7ff fb17 	bl	80052d4 <HAL_I2C_MemTxCpltCallback>
}
 8005ca6:	e032      	b.n	8005d0e <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7ff fad5 	bl	8005268 <HAL_I2C_MasterTxCpltCallback>
}
 8005cbe:	e026      	b.n	8005d0e <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b22      	cmp	r3, #34	; 0x22
 8005cca:	d120      	bne.n	8005d0e <I2C_ITMasterCplt+0x126>
    hi2c->State = HAL_I2C_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b40      	cmp	r3, #64	; 0x40
 8005cde:	d10b      	bne.n	8005cf8 <I2C_ITMasterCplt+0x110>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7ff faf9 	bl	80052e8 <HAL_I2C_MemRxCpltCallback>
}
 8005cf6:	e00a      	b.n	8005d0e <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7fc fb41 	bl	8002390 <HAL_I2C_MasterRxCpltCallback>
}
 8005d0e:	bf00      	nop
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	fe00e800 	.word	0xfe00e800
 8005d1c:	ffff0000 	.word	0xffff0000

08005d20 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005d3e:	2107      	movs	r1, #7
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 fc71 	bl	8006628 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d54:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6859      	ldr	r1, [r3, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	4b58      	ldr	r3, [pc, #352]	; (8005ec4 <I2C_ITSlaveCplt+0x1a4>)
 8005d62:	400b      	ands	r3, r1
 8005d64:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f9c4 	bl	80060f4 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	0b9b      	lsrs	r3, r3, #14
 8005d70:	f003 0301 	and.w	r3, r3, #1
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00b      	beq.n	8005d90 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d018      	beq.n	8005db2 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d8e:	e010      	b.n	8005db2 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	0bdb      	lsrs	r3, r3, #15
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00a      	beq.n	8005db2 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d006      	beq.n	8005db2 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	089b      	lsrs	r3, r3, #2
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d020      	beq.n	8005e00 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f023 0304 	bic.w	r3, r3, #4
 8005dc4:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	b2d2      	uxtb	r2, r2
 8005dd2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	1c5a      	adds	r2, r3, #1
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00c      	beq.n	8005e00 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dea:	3b01      	subs	r3, #1
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d005      	beq.n	8005e16 <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e0e:	f043 0204 	orr.w	r2, r3, #4
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d010      	beq.n	8005e54 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e36:	4619      	mov	r1, r3
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f89b 	bl	8005f74 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b28      	cmp	r3, #40	; 0x28
 8005e48:	d138      	bne.n	8005ebc <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005e4a:	68f9      	ldr	r1, [r7, #12]
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 f83d 	bl	8005ecc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e52:	e033      	b.n	8005ebc <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e5c:	d011      	beq.n	8005e82 <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7ff fe85 	bl	8005b6e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a18      	ldr	r2, [pc, #96]	; (8005ec8 <I2C_ITSlaveCplt+0x1a8>)
 8005e68:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7ff fa20 	bl	80052c0 <HAL_I2C_ListenCpltCallback>
}
 8005e80:	e01c      	b.n	8005ebc <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b22      	cmp	r3, #34	; 0x22
 8005e8c:	d10b      	bne.n	8005ea6 <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2220      	movs	r2, #32
 8005e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7ff f9f6 	bl	8005290 <HAL_I2C_SlaveRxCpltCallback>
}
 8005ea4:	e00a      	b.n	8005ebc <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f7ff f9e0 	bl	800527c <HAL_I2C_SlaveTxCpltCallback>
}
 8005ebc:	bf00      	nop
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	fe00e800 	.word	0xfe00e800
 8005ec8:	ffff0000 	.word	0xffff0000

08005ecc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a25      	ldr	r2, [pc, #148]	; (8005f70 <I2C_ITListenCplt+0xa4>)
 8005eda:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	089b      	lsrs	r3, r3, #2
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d022      	beq.n	8005f4a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0e:	b2d2      	uxtb	r2, r2
 8005f10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f16:	1c5a      	adds	r2, r3, #1
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d012      	beq.n	8005f4a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	3b01      	subs	r3, #1
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f42:	f043 0204 	orr.w	r2, r3, #4
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005f4a:	2107      	movs	r1, #7
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fb6b 	bl	8006628 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2210      	movs	r2, #16
 8005f58:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7ff f9ac 	bl	80052c0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005f68:	bf00      	nop
 8005f6a:	3708      	adds	r7, #8
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	ffff0000 	.word	0xffff0000

08005f74 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f84:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a55      	ldr	r2, [pc, #340]	; (80060e8 <I2C_ITError+0x174>)
 8005f92:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	431a      	orrs	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005fa6:	7bfb      	ldrb	r3, [r7, #15]
 8005fa8:	2b28      	cmp	r3, #40	; 0x28
 8005faa:	d005      	beq.n	8005fb8 <I2C_ITError+0x44>
 8005fac:	7bfb      	ldrb	r3, [r7, #15]
 8005fae:	2b29      	cmp	r3, #41	; 0x29
 8005fb0:	d002      	beq.n	8005fb8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
 8005fb4:	2b2a      	cmp	r3, #42	; 0x2a
 8005fb6:	d10e      	bne.n	8005fd6 <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005fb8:	2103      	movs	r1, #3
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fb34 	bl	8006628 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2228      	movs	r2, #40	; 0x28
 8005fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a46      	ldr	r2, [pc, #280]	; (80060ec <I2C_ITError+0x178>)
 8005fd2:	635a      	str	r2, [r3, #52]	; 0x34
 8005fd4:	e013      	b.n	8005ffe <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005fd6:	2107      	movs	r1, #7
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 fb25 	bl	8006628 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b60      	cmp	r3, #96	; 0x60
 8005fe8:	d003      	beq.n	8005ff2 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2220      	movs	r2, #32
 8005fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006008:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800600c:	d123      	bne.n	8006056 <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800601c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006022:	2b00      	cmp	r3, #0
 8006024:	d05c      	beq.n	80060e0 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602a:	4a31      	ldr	r2, [pc, #196]	; (80060f0 <I2C_ITError+0x17c>)
 800602c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603a:	4618      	mov	r0, r3
 800603c:	f7fe f9de 	bl	80043fc <HAL_DMA_Abort_IT>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d04c      	beq.n	80060e0 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006050:	4610      	mov	r0, r2
 8006052:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006054:	e044      	b.n	80060e0 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006064:	d123      	bne.n	80060ae <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006074:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800607a:	2b00      	cmp	r3, #0
 800607c:	d030      	beq.n	80060e0 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006082:	4a1b      	ldr	r2, [pc, #108]	; (80060f0 <I2C_ITError+0x17c>)
 8006084:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006092:	4618      	mov	r0, r3
 8006094:	f7fe f9b2 	bl	80043fc <HAL_DMA_Abort_IT>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d020      	beq.n	80060e0 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80060a8:	4610      	mov	r0, r2
 80060aa:	4798      	blx	r3
}
 80060ac:	e018      	b.n	80060e0 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b60      	cmp	r3, #96	; 0x60
 80060b8:	d10b      	bne.n	80060d2 <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2220      	movs	r2, #32
 80060be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7ff f920 	bl	8005310 <HAL_I2C_AbortCpltCallback>
}
 80060d0:	e006      	b.n	80060e0 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f7ff f90e 	bl	80052fc <HAL_I2C_ErrorCallback>
}
 80060e0:	bf00      	nop
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	ffff0000 	.word	0xffff0000
 80060ec:	08005325 	.word	0x08005325
 80060f0:	080062dd 	.word	0x080062dd

080060f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	f003 0302 	and.w	r3, r3, #2
 8006106:	2b02      	cmp	r3, #2
 8006108:	d103      	bne.n	8006112 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2200      	movs	r2, #0
 8006110:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	2b01      	cmp	r3, #1
 800611e:	d007      	beq.n	8006130 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	699a      	ldr	r2, [r3, #24]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f042 0201 	orr.w	r2, r2, #1
 800612e:	619a      	str	r2, [r3, #24]
  }
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006148:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006158:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800615e:	b29b      	uxth	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	d104      	bne.n	800616e <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006164:	2112      	movs	r1, #18
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f000 f9f0 	bl	800654c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800616c:	e02d      	b.n	80061ca <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006176:	441a      	add	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006180:	b29b      	uxth	r3, r3
 8006182:	2bff      	cmp	r3, #255	; 0xff
 8006184:	d903      	bls.n	800618e <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	22ff      	movs	r2, #255	; 0xff
 800618a:	851a      	strh	r2, [r3, #40]	; 0x28
 800618c:	e004      	b.n	8006198 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006192:	b29a      	uxth	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	4619      	mov	r1, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3328      	adds	r3, #40	; 0x28
 80061a8:	461a      	mov	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ae:	f7fe f8c5 	bl	800433c <HAL_DMA_Start_IT>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d004      	beq.n	80061c2 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80061b8:	2110      	movs	r1, #16
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f7ff feda 	bl	8005f74 <I2C_ITError>
}
 80061c0:	e003      	b.n	80061ca <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80061c2:	2112      	movs	r1, #18
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 f9c1 	bl	800654c <I2C_Enable_IRQ>
}
 80061ca:	bf00      	nop
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b084      	sub	sp, #16
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061de:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061ee:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d104      	bne.n	8006204 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80061fa:	2112      	movs	r1, #18
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f000 f9a5 	bl	800654c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006202:	e02d      	b.n	8006260 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800620c:	441a      	add	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006216:	b29b      	uxth	r3, r3
 8006218:	2bff      	cmp	r3, #255	; 0xff
 800621a:	d903      	bls.n	8006224 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	22ff      	movs	r2, #255	; 0xff
 8006220:	851a      	strh	r2, [r3, #40]	; 0x28
 8006222:	e004      	b.n	800622e <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006228:	b29a      	uxth	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3324      	adds	r3, #36	; 0x24
 8006238:	4619      	mov	r1, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	461a      	mov	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006244:	f7fe f87a 	bl	800433c <HAL_DMA_Start_IT>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d004      	beq.n	8006258 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800624e:	2110      	movs	r1, #16
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f7ff fe8f 	bl	8005f74 <I2C_ITError>
}
 8006256:	e003      	b.n	8006260 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006258:	2112      	movs	r1, #18
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f000 f976 	bl	800654c <I2C_Enable_IRQ>
}
 8006260:	bf00      	nop
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8006270:	2300      	movs	r3, #0
 8006272:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006278:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627e:	2b00      	cmp	r3, #0
 8006280:	d007      	beq.n	8006292 <I2C_DMAError+0x2a>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 800628e:	2301      	movs	r3, #1
 8006290:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006296:	2b00      	cmp	r3, #0
 8006298:	d007      	beq.n	80062aa <I2C_DMAError+0x42>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 80062a6:	2301      	movs	r3, #1
 80062a8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7fe faa6 	bl	80047fc <HAL_DMA_GetError>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d00e      	beq.n	80062d4 <I2C_DMAError+0x6c>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00b      	beq.n	80062d4 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062ca:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80062cc:	2110      	movs	r1, #16
 80062ce:	68b8      	ldr	r0, [r7, #8]
 80062d0:	f7ff fe50 	bl	8005f74 <I2C_ITError>
  }
}
 80062d4:	bf00      	nop
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ee:	2200      	movs	r2, #0
 80062f0:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f6:	2200      	movs	r2, #0
 80062f8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b60      	cmp	r3, #96	; 0x60
 8006304:	d107      	bne.n	8006316 <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2220      	movs	r2, #32
 800630a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f7fe fffe 	bl	8005310 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006314:	e002      	b.n	800631c <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f7fe fff0 	bl	80052fc <HAL_I2C_ErrorCallback>
}
 800631c:	bf00      	nop
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	603b      	str	r3, [r7, #0]
 8006330:	4613      	mov	r3, r2
 8006332:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006334:	e022      	b.n	800637c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633c:	d01e      	beq.n	800637c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800633e:	f7fd fb87 	bl	8003a50 <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	429a      	cmp	r2, r3
 800634c:	d302      	bcc.n	8006354 <I2C_WaitOnFlagUntilTimeout+0x30>
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d113      	bne.n	800637c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006358:	f043 0220 	orr.w	r2, r3, #32
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2220      	movs	r2, #32
 8006364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e00f      	b.n	800639c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	699a      	ldr	r2, [r3, #24]
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	4013      	ands	r3, r2
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	429a      	cmp	r2, r3
 800638a:	bf0c      	ite	eq
 800638c:	2301      	moveq	r3, #1
 800638e:	2300      	movne	r3, #0
 8006390:	b2db      	uxtb	r3, r3
 8006392:	461a      	mov	r2, r3
 8006394:	79fb      	ldrb	r3, [r7, #7]
 8006396:	429a      	cmp	r2, r3
 8006398:	d0cd      	beq.n	8006336 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80063b0:	e02c      	b.n	800640c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	68b9      	ldr	r1, [r7, #8]
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f000 f834 	bl	8006424 <I2C_IsAcknowledgeFailed>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e02a      	b.n	800641c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063cc:	d01e      	beq.n	800640c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ce:	f7fd fb3f 	bl	8003a50 <HAL_GetTick>
 80063d2:	4602      	mov	r2, r0
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d302      	bcc.n	80063e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d113      	bne.n	800640c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e8:	f043 0220 	orr.w	r2, r3, #32
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2220      	movs	r2, #32
 80063f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e007      	b.n	800641c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	f003 0302 	and.w	r3, r3, #2
 8006416:	2b02      	cmp	r3, #2
 8006418:	d1cb      	bne.n	80063b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	f003 0310 	and.w	r3, r3, #16
 800643a:	2b10      	cmp	r3, #16
 800643c:	d151      	bne.n	80064e2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800643e:	e022      	b.n	8006486 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006446:	d01e      	beq.n	8006486 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006448:	f7fd fb02 	bl	8003a50 <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	429a      	cmp	r2, r3
 8006456:	d302      	bcc.n	800645e <I2C_IsAcknowledgeFailed+0x3a>
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d113      	bne.n	8006486 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006462:	f043 0220 	orr.w	r2, r3, #32
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2220      	movs	r2, #32
 800646e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e02e      	b.n	80064e4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	f003 0320 	and.w	r3, r3, #32
 8006490:	2b20      	cmp	r3, #32
 8006492:	d1d5      	bne.n	8006440 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2210      	movs	r2, #16
 800649a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2220      	movs	r2, #32
 80064a2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f7ff fe25 	bl	80060f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	6859      	ldr	r1, [r3, #4]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	4b0d      	ldr	r3, [pc, #52]	; (80064ec <I2C_IsAcknowledgeFailed+0xc8>)
 80064b6:	400b      	ands	r3, r1
 80064b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064be:	f043 0204 	orr.w	r2, r3, #4
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2220      	movs	r2, #32
 80064ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e000      	b.n	80064e4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	fe00e800 	.word	0xfe00e800

080064f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	607b      	str	r3, [r7, #4]
 80064fa:	460b      	mov	r3, r1
 80064fc:	817b      	strh	r3, [r7, #10]
 80064fe:	4613      	mov	r3, r2
 8006500:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	0d5b      	lsrs	r3, r3, #21
 800650c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006510:	4b0d      	ldr	r3, [pc, #52]	; (8006548 <I2C_TransferConfig+0x58>)
 8006512:	430b      	orrs	r3, r1
 8006514:	43db      	mvns	r3, r3
 8006516:	ea02 0103 	and.w	r1, r2, r3
 800651a:	897b      	ldrh	r3, [r7, #10]
 800651c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006520:	7a7b      	ldrb	r3, [r7, #9]
 8006522:	041b      	lsls	r3, r3, #16
 8006524:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006528:	431a      	orrs	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	431a      	orrs	r2, r3
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	431a      	orrs	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	430a      	orrs	r2, r1
 8006538:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800653a:	bf00      	nop
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	03ff63ff 	.word	0x03ff63ff

0800654c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	460b      	mov	r3, r1
 8006556:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006558:	2300      	movs	r3, #0
 800655a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006560:	4a2f      	ldr	r2, [pc, #188]	; (8006620 <I2C_Enable_IRQ+0xd4>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d004      	beq.n	8006570 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800656a:	4a2e      	ldr	r2, [pc, #184]	; (8006624 <I2C_Enable_IRQ+0xd8>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d124      	bne.n	80065ba <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006570:	887b      	ldrh	r3, [r7, #2]
 8006572:	f003 0304 	and.w	r3, r3, #4
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006580:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8006582:	887b      	ldrh	r3, [r7, #2]
 8006584:	f003 0311 	and.w	r3, r3, #17
 8006588:	2b11      	cmp	r3, #17
 800658a:	d103      	bne.n	8006594 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006592:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8006594:	887b      	ldrh	r3, [r7, #2]
 8006596:	f003 0312 	and.w	r3, r3, #18
 800659a:	2b12      	cmp	r3, #18
 800659c:	d103      	bne.n	80065a6 <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f043 0320 	orr.w	r3, r3, #32
 80065a4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 80065a6:	887b      	ldrh	r3, [r7, #2]
 80065a8:	f003 0312 	and.w	r3, r3, #18
 80065ac:	2b12      	cmp	r3, #18
 80065ae:	d128      	bne.n	8006602 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065b6:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 80065b8:	e023      	b.n	8006602 <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80065ba:	887b      	ldrh	r3, [r7, #2]
 80065bc:	f003 0304 	and.w	r3, r3, #4
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d003      	beq.n	80065cc <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80065ca:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80065cc:	887b      	ldrh	r3, [r7, #2]
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d003      	beq.n	80065de <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80065dc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80065de:	887b      	ldrh	r3, [r7, #2]
 80065e0:	f003 0302 	and.w	r3, r3, #2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d003      	beq.n	80065f0 <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80065ee:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80065f0:	887b      	ldrh	r3, [r7, #2]
 80065f2:	f003 0312 	and.w	r3, r3, #18
 80065f6:	2b12      	cmp	r3, #18
 80065f8:	d103      	bne.n	8006602 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f043 0320 	orr.w	r3, r3, #32
 8006600:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	6819      	ldr	r1, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	430a      	orrs	r2, r1
 8006610:	601a      	str	r2, [r3, #0]
}
 8006612:	bf00      	nop
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	0800552b 	.word	0x0800552b
 8006624:	08005711 	.word	0x08005711

08006628 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	460b      	mov	r3, r1
 8006632:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006638:	887b      	ldrh	r3, [r7, #2]
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00f      	beq.n	8006662 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8006648:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006650:	b2db      	uxtb	r3, r3
 8006652:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006656:	2b28      	cmp	r3, #40	; 0x28
 8006658:	d003      	beq.n	8006662 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006660:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006662:	887b      	ldrh	r3, [r7, #2]
 8006664:	f003 0302 	and.w	r3, r3, #2
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00f      	beq.n	800668c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8006672:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800667a:	b2db      	uxtb	r3, r3
 800667c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006680:	2b28      	cmp	r3, #40	; 0x28
 8006682:	d003      	beq.n	800668c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800668a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800668c:	887b      	ldrh	r3, [r7, #2]
 800668e:	f003 0304 	and.w	r3, r3, #4
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800669c:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800669e:	887b      	ldrh	r3, [r7, #2]
 80066a0:	f003 0311 	and.w	r3, r3, #17
 80066a4:	2b11      	cmp	r3, #17
 80066a6:	d103      	bne.n	80066b0 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80066ae:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80066b0:	887b      	ldrh	r3, [r7, #2]
 80066b2:	f003 0312 	and.w	r3, r3, #18
 80066b6:	2b12      	cmp	r3, #18
 80066b8:	d103      	bne.n	80066c2 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f043 0320 	orr.w	r3, r3, #32
 80066c0:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 80066c2:	887b      	ldrh	r3, [r7, #2]
 80066c4:	f003 0312 	and.w	r3, r3, #18
 80066c8:	2b12      	cmp	r3, #18
 80066ca:	d103      	bne.n	80066d4 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066d2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6819      	ldr	r1, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	43da      	mvns	r2, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	400a      	ands	r2, r1
 80066e4:	601a      	str	r2, [r3, #0]
}
 80066e6:	bf00      	nop
 80066e8:	3714      	adds	r7, #20
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b083      	sub	sp, #12
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b20      	cmp	r3, #32
 8006706:	d138      	bne.n	800677a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800670e:	2b01      	cmp	r3, #1
 8006710:	d101      	bne.n	8006716 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006712:	2302      	movs	r3, #2
 8006714:	e032      	b.n	800677c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2224      	movs	r2, #36	; 0x24
 8006722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0201 	bic.w	r2, r2, #1
 8006734:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006744:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	6819      	ldr	r1, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	683a      	ldr	r2, [r7, #0]
 8006752:	430a      	orrs	r2, r1
 8006754:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f042 0201 	orr.w	r2, r2, #1
 8006764:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2220      	movs	r2, #32
 800676a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006776:	2300      	movs	r3, #0
 8006778:	e000      	b.n	800677c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800677a:	2302      	movs	r3, #2
  }
}
 800677c:	4618      	mov	r0, r3
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b20      	cmp	r3, #32
 800679c:	d139      	bne.n	8006812 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d101      	bne.n	80067ac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80067a8:	2302      	movs	r3, #2
 80067aa:	e033      	b.n	8006814 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2224      	movs	r2, #36	; 0x24
 80067b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f022 0201 	bic.w	r2, r2, #1
 80067ca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80067da:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	021b      	lsls	r3, r3, #8
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f042 0201 	orr.w	r2, r2, #1
 80067fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2220      	movs	r2, #32
 8006802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800680e:	2300      	movs	r3, #0
 8006810:	e000      	b.n	8006814 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006812:	2302      	movs	r3, #2
  }
}
 8006814:	4618      	mov	r0, r3
 8006816:	3714      	adds	r7, #20
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006820:	b480      	push	{r7}
 8006822:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006824:	4b05      	ldr	r3, [pc, #20]	; (800683c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a04      	ldr	r2, [pc, #16]	; (800683c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800682a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800682e:	6013      	str	r3, [r2, #0]
}
 8006830:	bf00      	nop
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	40007000 	.word	0x40007000

08006840 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006846:	2300      	movs	r3, #0
 8006848:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800684a:	4b23      	ldr	r3, [pc, #140]	; (80068d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800684c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684e:	4a22      	ldr	r2, [pc, #136]	; (80068d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006854:	6413      	str	r3, [r2, #64]	; 0x40
 8006856:	4b20      	ldr	r3, [pc, #128]	; (80068d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800685e:	603b      	str	r3, [r7, #0]
 8006860:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006862:	4b1e      	ldr	r3, [pc, #120]	; (80068dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a1d      	ldr	r2, [pc, #116]	; (80068dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800686c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800686e:	f7fd f8ef 	bl	8003a50 <HAL_GetTick>
 8006872:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006874:	e009      	b.n	800688a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006876:	f7fd f8eb 	bl	8003a50 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006884:	d901      	bls.n	800688a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e022      	b.n	80068d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800688a:	4b14      	ldr	r3, [pc, #80]	; (80068dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006896:	d1ee      	bne.n	8006876 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006898:	4b10      	ldr	r3, [pc, #64]	; (80068dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a0f      	ldr	r2, [pc, #60]	; (80068dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800689e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80068a4:	f7fd f8d4 	bl	8003a50 <HAL_GetTick>
 80068a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80068aa:	e009      	b.n	80068c0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80068ac:	f7fd f8d0 	bl	8003a50 <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068ba:	d901      	bls.n	80068c0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e007      	b.n	80068d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80068c0:	4b06      	ldr	r3, [pc, #24]	; (80068dc <HAL_PWREx_EnableOverDrive+0x9c>)
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068cc:	d1ee      	bne.n	80068ac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	40023800 	.word	0x40023800
 80068dc:	40007000 	.word	0x40007000

080068e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80068e8:	2300      	movs	r3, #0
 80068ea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e291      	b.n	8006e1a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f000 8087 	beq.w	8006a12 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006904:	4b96      	ldr	r3, [pc, #600]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	f003 030c 	and.w	r3, r3, #12
 800690c:	2b04      	cmp	r3, #4
 800690e:	d00c      	beq.n	800692a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006910:	4b93      	ldr	r3, [pc, #588]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	f003 030c 	and.w	r3, r3, #12
 8006918:	2b08      	cmp	r3, #8
 800691a:	d112      	bne.n	8006942 <HAL_RCC_OscConfig+0x62>
 800691c:	4b90      	ldr	r3, [pc, #576]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006924:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006928:	d10b      	bne.n	8006942 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800692a:	4b8d      	ldr	r3, [pc, #564]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d06c      	beq.n	8006a10 <HAL_RCC_OscConfig+0x130>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d168      	bne.n	8006a10 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e26b      	b.n	8006e1a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800694a:	d106      	bne.n	800695a <HAL_RCC_OscConfig+0x7a>
 800694c:	4b84      	ldr	r3, [pc, #528]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a83      	ldr	r2, [pc, #524]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 8006952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006956:	6013      	str	r3, [r2, #0]
 8006958:	e02e      	b.n	80069b8 <HAL_RCC_OscConfig+0xd8>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10c      	bne.n	800697c <HAL_RCC_OscConfig+0x9c>
 8006962:	4b7f      	ldr	r3, [pc, #508]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a7e      	ldr	r2, [pc, #504]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 8006968:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800696c:	6013      	str	r3, [r2, #0]
 800696e:	4b7c      	ldr	r3, [pc, #496]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a7b      	ldr	r2, [pc, #492]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 8006974:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006978:	6013      	str	r3, [r2, #0]
 800697a:	e01d      	b.n	80069b8 <HAL_RCC_OscConfig+0xd8>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006984:	d10c      	bne.n	80069a0 <HAL_RCC_OscConfig+0xc0>
 8006986:	4b76      	ldr	r3, [pc, #472]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a75      	ldr	r2, [pc, #468]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 800698c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006990:	6013      	str	r3, [r2, #0]
 8006992:	4b73      	ldr	r3, [pc, #460]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a72      	ldr	r2, [pc, #456]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 8006998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800699c:	6013      	str	r3, [r2, #0]
 800699e:	e00b      	b.n	80069b8 <HAL_RCC_OscConfig+0xd8>
 80069a0:	4b6f      	ldr	r3, [pc, #444]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a6e      	ldr	r2, [pc, #440]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 80069a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069aa:	6013      	str	r3, [r2, #0]
 80069ac:	4b6c      	ldr	r3, [pc, #432]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a6b      	ldr	r2, [pc, #428]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 80069b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d013      	beq.n	80069e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c0:	f7fd f846 	bl	8003a50 <HAL_GetTick>
 80069c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069c6:	e008      	b.n	80069da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069c8:	f7fd f842 	bl	8003a50 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b64      	cmp	r3, #100	; 0x64
 80069d4:	d901      	bls.n	80069da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e21f      	b.n	8006e1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069da:	4b61      	ldr	r3, [pc, #388]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d0f0      	beq.n	80069c8 <HAL_RCC_OscConfig+0xe8>
 80069e6:	e014      	b.n	8006a12 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e8:	f7fd f832 	bl	8003a50 <HAL_GetTick>
 80069ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069ee:	e008      	b.n	8006a02 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069f0:	f7fd f82e 	bl	8003a50 <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	2b64      	cmp	r3, #100	; 0x64
 80069fc:	d901      	bls.n	8006a02 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e20b      	b.n	8006e1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a02:	4b57      	ldr	r3, [pc, #348]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1f0      	bne.n	80069f0 <HAL_RCC_OscConfig+0x110>
 8006a0e:	e000      	b.n	8006a12 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d069      	beq.n	8006af2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a1e:	4b50      	ldr	r3, [pc, #320]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f003 030c 	and.w	r3, r3, #12
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00b      	beq.n	8006a42 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a2a:	4b4d      	ldr	r3, [pc, #308]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f003 030c 	and.w	r3, r3, #12
 8006a32:	2b08      	cmp	r3, #8
 8006a34:	d11c      	bne.n	8006a70 <HAL_RCC_OscConfig+0x190>
 8006a36:	4b4a      	ldr	r3, [pc, #296]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d116      	bne.n	8006a70 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a42:	4b47      	ldr	r3, [pc, #284]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0302 	and.w	r3, r3, #2
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d005      	beq.n	8006a5a <HAL_RCC_OscConfig+0x17a>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d001      	beq.n	8006a5a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e1df      	b.n	8006e1a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a5a:	4b41      	ldr	r3, [pc, #260]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	00db      	lsls	r3, r3, #3
 8006a68:	493d      	ldr	r1, [pc, #244]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a6e:	e040      	b.n	8006af2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d023      	beq.n	8006ac0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a78:	4b39      	ldr	r3, [pc, #228]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a38      	ldr	r2, [pc, #224]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 8006a7e:	f043 0301 	orr.w	r3, r3, #1
 8006a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a84:	f7fc ffe4 	bl	8003a50 <HAL_GetTick>
 8006a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a8a:	e008      	b.n	8006a9e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a8c:	f7fc ffe0 	bl	8003a50 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e1bd      	b.n	8006e1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a9e:	4b30      	ldr	r3, [pc, #192]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d0f0      	beq.n	8006a8c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aaa:	4b2d      	ldr	r3, [pc, #180]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	00db      	lsls	r3, r3, #3
 8006ab8:	4929      	ldr	r1, [pc, #164]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	600b      	str	r3, [r1, #0]
 8006abe:	e018      	b.n	8006af2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ac0:	4b27      	ldr	r3, [pc, #156]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a26      	ldr	r2, [pc, #152]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 8006ac6:	f023 0301 	bic.w	r3, r3, #1
 8006aca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006acc:	f7fc ffc0 	bl	8003a50 <HAL_GetTick>
 8006ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ad2:	e008      	b.n	8006ae6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ad4:	f7fc ffbc 	bl	8003a50 <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d901      	bls.n	8006ae6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e199      	b.n	8006e1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ae6:	4b1e      	ldr	r3, [pc, #120]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 0302 	and.w	r3, r3, #2
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1f0      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0308 	and.w	r3, r3, #8
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d038      	beq.n	8006b70 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d019      	beq.n	8006b3a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b06:	4b16      	ldr	r3, [pc, #88]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 8006b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b0a:	4a15      	ldr	r2, [pc, #84]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 8006b0c:	f043 0301 	orr.w	r3, r3, #1
 8006b10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b12:	f7fc ff9d 	bl	8003a50 <HAL_GetTick>
 8006b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b18:	e008      	b.n	8006b2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b1a:	f7fc ff99 	bl	8003a50 <HAL_GetTick>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d901      	bls.n	8006b2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e176      	b.n	8006e1a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b2c:	4b0c      	ldr	r3, [pc, #48]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 8006b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b30:	f003 0302 	and.w	r3, r3, #2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d0f0      	beq.n	8006b1a <HAL_RCC_OscConfig+0x23a>
 8006b38:	e01a      	b.n	8006b70 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b3a:	4b09      	ldr	r3, [pc, #36]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 8006b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b3e:	4a08      	ldr	r2, [pc, #32]	; (8006b60 <HAL_RCC_OscConfig+0x280>)
 8006b40:	f023 0301 	bic.w	r3, r3, #1
 8006b44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b46:	f7fc ff83 	bl	8003a50 <HAL_GetTick>
 8006b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b4c:	e00a      	b.n	8006b64 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b4e:	f7fc ff7f 	bl	8003a50 <HAL_GetTick>
 8006b52:	4602      	mov	r2, r0
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d903      	bls.n	8006b64 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e15c      	b.n	8006e1a <HAL_RCC_OscConfig+0x53a>
 8006b60:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b64:	4b91      	ldr	r3, [pc, #580]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b68:	f003 0302 	and.w	r3, r3, #2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1ee      	bne.n	8006b4e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0304 	and.w	r3, r3, #4
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 80a4 	beq.w	8006cc6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b7e:	4b8b      	ldr	r3, [pc, #556]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10d      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b8a:	4b88      	ldr	r3, [pc, #544]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8e:	4a87      	ldr	r2, [pc, #540]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b94:	6413      	str	r3, [r2, #64]	; 0x40
 8006b96:	4b85      	ldr	r3, [pc, #532]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b9e:	60bb      	str	r3, [r7, #8]
 8006ba0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ba6:	4b82      	ldr	r3, [pc, #520]	; (8006db0 <HAL_RCC_OscConfig+0x4d0>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d118      	bne.n	8006be4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006bb2:	4b7f      	ldr	r3, [pc, #508]	; (8006db0 <HAL_RCC_OscConfig+0x4d0>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a7e      	ldr	r2, [pc, #504]	; (8006db0 <HAL_RCC_OscConfig+0x4d0>)
 8006bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bbe:	f7fc ff47 	bl	8003a50 <HAL_GetTick>
 8006bc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bc4:	e008      	b.n	8006bd8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bc6:	f7fc ff43 	bl	8003a50 <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	2b64      	cmp	r3, #100	; 0x64
 8006bd2:	d901      	bls.n	8006bd8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e120      	b.n	8006e1a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bd8:	4b75      	ldr	r3, [pc, #468]	; (8006db0 <HAL_RCC_OscConfig+0x4d0>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d0f0      	beq.n	8006bc6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d106      	bne.n	8006bfa <HAL_RCC_OscConfig+0x31a>
 8006bec:	4b6f      	ldr	r3, [pc, #444]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf0:	4a6e      	ldr	r2, [pc, #440]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006bf2:	f043 0301 	orr.w	r3, r3, #1
 8006bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8006bf8:	e02d      	b.n	8006c56 <HAL_RCC_OscConfig+0x376>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10c      	bne.n	8006c1c <HAL_RCC_OscConfig+0x33c>
 8006c02:	4b6a      	ldr	r3, [pc, #424]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c06:	4a69      	ldr	r2, [pc, #420]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006c08:	f023 0301 	bic.w	r3, r3, #1
 8006c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8006c0e:	4b67      	ldr	r3, [pc, #412]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c12:	4a66      	ldr	r2, [pc, #408]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006c14:	f023 0304 	bic.w	r3, r3, #4
 8006c18:	6713      	str	r3, [r2, #112]	; 0x70
 8006c1a:	e01c      	b.n	8006c56 <HAL_RCC_OscConfig+0x376>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	2b05      	cmp	r3, #5
 8006c22:	d10c      	bne.n	8006c3e <HAL_RCC_OscConfig+0x35e>
 8006c24:	4b61      	ldr	r3, [pc, #388]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c28:	4a60      	ldr	r2, [pc, #384]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006c2a:	f043 0304 	orr.w	r3, r3, #4
 8006c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8006c30:	4b5e      	ldr	r3, [pc, #376]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c34:	4a5d      	ldr	r2, [pc, #372]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006c36:	f043 0301 	orr.w	r3, r3, #1
 8006c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c3c:	e00b      	b.n	8006c56 <HAL_RCC_OscConfig+0x376>
 8006c3e:	4b5b      	ldr	r3, [pc, #364]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c42:	4a5a      	ldr	r2, [pc, #360]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006c44:	f023 0301 	bic.w	r3, r3, #1
 8006c48:	6713      	str	r3, [r2, #112]	; 0x70
 8006c4a:	4b58      	ldr	r3, [pc, #352]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c4e:	4a57      	ldr	r2, [pc, #348]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006c50:	f023 0304 	bic.w	r3, r3, #4
 8006c54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d015      	beq.n	8006c8a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c5e:	f7fc fef7 	bl	8003a50 <HAL_GetTick>
 8006c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c64:	e00a      	b.n	8006c7c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c66:	f7fc fef3 	bl	8003a50 <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d901      	bls.n	8006c7c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e0ce      	b.n	8006e1a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c7c:	4b4b      	ldr	r3, [pc, #300]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c80:	f003 0302 	and.w	r3, r3, #2
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d0ee      	beq.n	8006c66 <HAL_RCC_OscConfig+0x386>
 8006c88:	e014      	b.n	8006cb4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c8a:	f7fc fee1 	bl	8003a50 <HAL_GetTick>
 8006c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c90:	e00a      	b.n	8006ca8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c92:	f7fc fedd 	bl	8003a50 <HAL_GetTick>
 8006c96:	4602      	mov	r2, r0
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d901      	bls.n	8006ca8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e0b8      	b.n	8006e1a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ca8:	4b40      	ldr	r3, [pc, #256]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cac:	f003 0302 	and.w	r3, r3, #2
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1ee      	bne.n	8006c92 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006cb4:	7dfb      	ldrb	r3, [r7, #23]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d105      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cba:	4b3c      	ldr	r3, [pc, #240]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbe:	4a3b      	ldr	r2, [pc, #236]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cc4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f000 80a4 	beq.w	8006e18 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006cd0:	4b36      	ldr	r3, [pc, #216]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f003 030c 	and.w	r3, r3, #12
 8006cd8:	2b08      	cmp	r3, #8
 8006cda:	d06b      	beq.n	8006db4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d149      	bne.n	8006d78 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ce4:	4b31      	ldr	r3, [pc, #196]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a30      	ldr	r2, [pc, #192]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006cea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf0:	f7fc feae 	bl	8003a50 <HAL_GetTick>
 8006cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cf6:	e008      	b.n	8006d0a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cf8:	f7fc feaa 	bl	8003a50 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d901      	bls.n	8006d0a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e087      	b.n	8006e1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d0a:	4b28      	ldr	r3, [pc, #160]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1f0      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	69da      	ldr	r2, [r3, #28]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	431a      	orrs	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d24:	019b      	lsls	r3, r3, #6
 8006d26:	431a      	orrs	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2c:	085b      	lsrs	r3, r3, #1
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	041b      	lsls	r3, r3, #16
 8006d32:	431a      	orrs	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d38:	061b      	lsls	r3, r3, #24
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	4a1b      	ldr	r2, [pc, #108]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006d3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d42:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d44:	4b19      	ldr	r3, [pc, #100]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a18      	ldr	r2, [pc, #96]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006d4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d50:	f7fc fe7e 	bl	8003a50 <HAL_GetTick>
 8006d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d56:	e008      	b.n	8006d6a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d58:	f7fc fe7a 	bl	8003a50 <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d901      	bls.n	8006d6a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e057      	b.n	8006e1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d6a:	4b10      	ldr	r3, [pc, #64]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d0f0      	beq.n	8006d58 <HAL_RCC_OscConfig+0x478>
 8006d76:	e04f      	b.n	8006e18 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d78:	4b0c      	ldr	r3, [pc, #48]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a0b      	ldr	r2, [pc, #44]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006d7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d84:	f7fc fe64 	bl	8003a50 <HAL_GetTick>
 8006d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d8a:	e008      	b.n	8006d9e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d8c:	f7fc fe60 	bl	8003a50 <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d901      	bls.n	8006d9e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e03d      	b.n	8006e1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d9e:	4b03      	ldr	r3, [pc, #12]	; (8006dac <HAL_RCC_OscConfig+0x4cc>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1f0      	bne.n	8006d8c <HAL_RCC_OscConfig+0x4ac>
 8006daa:	e035      	b.n	8006e18 <HAL_RCC_OscConfig+0x538>
 8006dac:	40023800 	.word	0x40023800
 8006db0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006db4:	4b1b      	ldr	r3, [pc, #108]	; (8006e24 <HAL_RCC_OscConfig+0x544>)
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d028      	beq.n	8006e14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d121      	bne.n	8006e14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d11a      	bne.n	8006e14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006de4:	4013      	ands	r3, r2
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006dea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d111      	bne.n	8006e14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfa:	085b      	lsrs	r3, r3, #1
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d107      	bne.n	8006e14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d001      	beq.n	8006e18 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e000      	b.n	8006e1a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3718      	adds	r7, #24
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	40023800 	.word	0x40023800

08006e28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006e32:	2300      	movs	r3, #0
 8006e34:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e0d0      	b.n	8006fe2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e40:	4b6a      	ldr	r3, [pc, #424]	; (8006fec <HAL_RCC_ClockConfig+0x1c4>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 030f 	and.w	r3, r3, #15
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d910      	bls.n	8006e70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e4e:	4b67      	ldr	r3, [pc, #412]	; (8006fec <HAL_RCC_ClockConfig+0x1c4>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f023 020f 	bic.w	r2, r3, #15
 8006e56:	4965      	ldr	r1, [pc, #404]	; (8006fec <HAL_RCC_ClockConfig+0x1c4>)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e5e:	4b63      	ldr	r3, [pc, #396]	; (8006fec <HAL_RCC_ClockConfig+0x1c4>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 030f 	and.w	r3, r3, #15
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d001      	beq.n	8006e70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e0b8      	b.n	8006fe2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0302 	and.w	r3, r3, #2
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d020      	beq.n	8006ebe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 0304 	and.w	r3, r3, #4
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d005      	beq.n	8006e94 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e88:	4b59      	ldr	r3, [pc, #356]	; (8006ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	4a58      	ldr	r2, [pc, #352]	; (8006ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8006e8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006e92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0308 	and.w	r3, r3, #8
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d005      	beq.n	8006eac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ea0:	4b53      	ldr	r3, [pc, #332]	; (8006ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	4a52      	ldr	r2, [pc, #328]	; (8006ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8006ea6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006eaa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006eac:	4b50      	ldr	r3, [pc, #320]	; (8006ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	494d      	ldr	r1, [pc, #308]	; (8006ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0301 	and.w	r3, r3, #1
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d040      	beq.n	8006f4c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d107      	bne.n	8006ee2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ed2:	4b47      	ldr	r3, [pc, #284]	; (8006ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d115      	bne.n	8006f0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e07f      	b.n	8006fe2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d107      	bne.n	8006efa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eea:	4b41      	ldr	r3, [pc, #260]	; (8006ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d109      	bne.n	8006f0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e073      	b.n	8006fe2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006efa:	4b3d      	ldr	r3, [pc, #244]	; (8006ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0302 	and.w	r3, r3, #2
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e06b      	b.n	8006fe2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f0a:	4b39      	ldr	r3, [pc, #228]	; (8006ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f023 0203 	bic.w	r2, r3, #3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	4936      	ldr	r1, [pc, #216]	; (8006ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f1c:	f7fc fd98 	bl	8003a50 <HAL_GetTick>
 8006f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f22:	e00a      	b.n	8006f3a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f24:	f7fc fd94 	bl	8003a50 <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d901      	bls.n	8006f3a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e053      	b.n	8006fe2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f3a:	4b2d      	ldr	r3, [pc, #180]	; (8006ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	f003 020c 	and.w	r2, r3, #12
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d1eb      	bne.n	8006f24 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f4c:	4b27      	ldr	r3, [pc, #156]	; (8006fec <HAL_RCC_ClockConfig+0x1c4>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 030f 	and.w	r3, r3, #15
 8006f54:	683a      	ldr	r2, [r7, #0]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d210      	bcs.n	8006f7c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f5a:	4b24      	ldr	r3, [pc, #144]	; (8006fec <HAL_RCC_ClockConfig+0x1c4>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f023 020f 	bic.w	r2, r3, #15
 8006f62:	4922      	ldr	r1, [pc, #136]	; (8006fec <HAL_RCC_ClockConfig+0x1c4>)
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f6a:	4b20      	ldr	r3, [pc, #128]	; (8006fec <HAL_RCC_ClockConfig+0x1c4>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 030f 	and.w	r3, r3, #15
 8006f72:	683a      	ldr	r2, [r7, #0]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d001      	beq.n	8006f7c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e032      	b.n	8006fe2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0304 	and.w	r3, r3, #4
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d008      	beq.n	8006f9a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f88:	4b19      	ldr	r3, [pc, #100]	; (8006ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	4916      	ldr	r1, [pc, #88]	; (8006ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0308 	and.w	r3, r3, #8
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d009      	beq.n	8006fba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006fa6:	4b12      	ldr	r3, [pc, #72]	; (8006ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	00db      	lsls	r3, r3, #3
 8006fb4:	490e      	ldr	r1, [pc, #56]	; (8006ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006fba:	f000 f821 	bl	8007000 <HAL_RCC_GetSysClockFreq>
 8006fbe:	4601      	mov	r1, r0
 8006fc0:	4b0b      	ldr	r3, [pc, #44]	; (8006ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	091b      	lsrs	r3, r3, #4
 8006fc6:	f003 030f 	and.w	r3, r3, #15
 8006fca:	4a0a      	ldr	r2, [pc, #40]	; (8006ff4 <HAL_RCC_ClockConfig+0x1cc>)
 8006fcc:	5cd3      	ldrb	r3, [r2, r3]
 8006fce:	fa21 f303 	lsr.w	r3, r1, r3
 8006fd2:	4a09      	ldr	r2, [pc, #36]	; (8006ff8 <HAL_RCC_ClockConfig+0x1d0>)
 8006fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006fd6:	4b09      	ldr	r3, [pc, #36]	; (8006ffc <HAL_RCC_ClockConfig+0x1d4>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fc fcf4 	bl	80039c8 <HAL_InitTick>

  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	40023c00 	.word	0x40023c00
 8006ff0:	40023800 	.word	0x40023800
 8006ff4:	0800a818 	.word	0x0800a818
 8006ff8:	20000004 	.word	0x20000004
 8006ffc:	20000008 	.word	0x20000008

08007000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007006:	2300      	movs	r3, #0
 8007008:	607b      	str	r3, [r7, #4]
 800700a:	2300      	movs	r3, #0
 800700c:	60fb      	str	r3, [r7, #12]
 800700e:	2300      	movs	r3, #0
 8007010:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007012:	2300      	movs	r3, #0
 8007014:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007016:	4b63      	ldr	r3, [pc, #396]	; (80071a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f003 030c 	and.w	r3, r3, #12
 800701e:	2b04      	cmp	r3, #4
 8007020:	d007      	beq.n	8007032 <HAL_RCC_GetSysClockFreq+0x32>
 8007022:	2b08      	cmp	r3, #8
 8007024:	d008      	beq.n	8007038 <HAL_RCC_GetSysClockFreq+0x38>
 8007026:	2b00      	cmp	r3, #0
 8007028:	f040 80b4 	bne.w	8007194 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800702c:	4b5e      	ldr	r3, [pc, #376]	; (80071a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800702e:	60bb      	str	r3, [r7, #8]
      break;
 8007030:	e0b3      	b.n	800719a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007032:	4b5e      	ldr	r3, [pc, #376]	; (80071ac <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007034:	60bb      	str	r3, [r7, #8]
      break;
 8007036:	e0b0      	b.n	800719a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007038:	4b5a      	ldr	r3, [pc, #360]	; (80071a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007040:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007042:	4b58      	ldr	r3, [pc, #352]	; (80071a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d04a      	beq.n	80070e4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800704e:	4b55      	ldr	r3, [pc, #340]	; (80071a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	099b      	lsrs	r3, r3, #6
 8007054:	f04f 0400 	mov.w	r4, #0
 8007058:	f240 11ff 	movw	r1, #511	; 0x1ff
 800705c:	f04f 0200 	mov.w	r2, #0
 8007060:	ea03 0501 	and.w	r5, r3, r1
 8007064:	ea04 0602 	and.w	r6, r4, r2
 8007068:	4629      	mov	r1, r5
 800706a:	4632      	mov	r2, r6
 800706c:	f04f 0300 	mov.w	r3, #0
 8007070:	f04f 0400 	mov.w	r4, #0
 8007074:	0154      	lsls	r4, r2, #5
 8007076:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800707a:	014b      	lsls	r3, r1, #5
 800707c:	4619      	mov	r1, r3
 800707e:	4622      	mov	r2, r4
 8007080:	1b49      	subs	r1, r1, r5
 8007082:	eb62 0206 	sbc.w	r2, r2, r6
 8007086:	f04f 0300 	mov.w	r3, #0
 800708a:	f04f 0400 	mov.w	r4, #0
 800708e:	0194      	lsls	r4, r2, #6
 8007090:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007094:	018b      	lsls	r3, r1, #6
 8007096:	1a5b      	subs	r3, r3, r1
 8007098:	eb64 0402 	sbc.w	r4, r4, r2
 800709c:	f04f 0100 	mov.w	r1, #0
 80070a0:	f04f 0200 	mov.w	r2, #0
 80070a4:	00e2      	lsls	r2, r4, #3
 80070a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80070aa:	00d9      	lsls	r1, r3, #3
 80070ac:	460b      	mov	r3, r1
 80070ae:	4614      	mov	r4, r2
 80070b0:	195b      	adds	r3, r3, r5
 80070b2:	eb44 0406 	adc.w	r4, r4, r6
 80070b6:	f04f 0100 	mov.w	r1, #0
 80070ba:	f04f 0200 	mov.w	r2, #0
 80070be:	0262      	lsls	r2, r4, #9
 80070c0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80070c4:	0259      	lsls	r1, r3, #9
 80070c6:	460b      	mov	r3, r1
 80070c8:	4614      	mov	r4, r2
 80070ca:	4618      	mov	r0, r3
 80070cc:	4621      	mov	r1, r4
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f04f 0400 	mov.w	r4, #0
 80070d4:	461a      	mov	r2, r3
 80070d6:	4623      	mov	r3, r4
 80070d8:	f7f9 fd10 	bl	8000afc <__aeabi_uldivmod>
 80070dc:	4603      	mov	r3, r0
 80070de:	460c      	mov	r4, r1
 80070e0:	60fb      	str	r3, [r7, #12]
 80070e2:	e049      	b.n	8007178 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070e4:	4b2f      	ldr	r3, [pc, #188]	; (80071a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	099b      	lsrs	r3, r3, #6
 80070ea:	f04f 0400 	mov.w	r4, #0
 80070ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80070f2:	f04f 0200 	mov.w	r2, #0
 80070f6:	ea03 0501 	and.w	r5, r3, r1
 80070fa:	ea04 0602 	and.w	r6, r4, r2
 80070fe:	4629      	mov	r1, r5
 8007100:	4632      	mov	r2, r6
 8007102:	f04f 0300 	mov.w	r3, #0
 8007106:	f04f 0400 	mov.w	r4, #0
 800710a:	0154      	lsls	r4, r2, #5
 800710c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007110:	014b      	lsls	r3, r1, #5
 8007112:	4619      	mov	r1, r3
 8007114:	4622      	mov	r2, r4
 8007116:	1b49      	subs	r1, r1, r5
 8007118:	eb62 0206 	sbc.w	r2, r2, r6
 800711c:	f04f 0300 	mov.w	r3, #0
 8007120:	f04f 0400 	mov.w	r4, #0
 8007124:	0194      	lsls	r4, r2, #6
 8007126:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800712a:	018b      	lsls	r3, r1, #6
 800712c:	1a5b      	subs	r3, r3, r1
 800712e:	eb64 0402 	sbc.w	r4, r4, r2
 8007132:	f04f 0100 	mov.w	r1, #0
 8007136:	f04f 0200 	mov.w	r2, #0
 800713a:	00e2      	lsls	r2, r4, #3
 800713c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007140:	00d9      	lsls	r1, r3, #3
 8007142:	460b      	mov	r3, r1
 8007144:	4614      	mov	r4, r2
 8007146:	195b      	adds	r3, r3, r5
 8007148:	eb44 0406 	adc.w	r4, r4, r6
 800714c:	f04f 0100 	mov.w	r1, #0
 8007150:	f04f 0200 	mov.w	r2, #0
 8007154:	02a2      	lsls	r2, r4, #10
 8007156:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800715a:	0299      	lsls	r1, r3, #10
 800715c:	460b      	mov	r3, r1
 800715e:	4614      	mov	r4, r2
 8007160:	4618      	mov	r0, r3
 8007162:	4621      	mov	r1, r4
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f04f 0400 	mov.w	r4, #0
 800716a:	461a      	mov	r2, r3
 800716c:	4623      	mov	r3, r4
 800716e:	f7f9 fcc5 	bl	8000afc <__aeabi_uldivmod>
 8007172:	4603      	mov	r3, r0
 8007174:	460c      	mov	r4, r1
 8007176:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007178:	4b0a      	ldr	r3, [pc, #40]	; (80071a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	0c1b      	lsrs	r3, r3, #16
 800717e:	f003 0303 	and.w	r3, r3, #3
 8007182:	3301      	adds	r3, #1
 8007184:	005b      	lsls	r3, r3, #1
 8007186:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007190:	60bb      	str	r3, [r7, #8]
      break;
 8007192:	e002      	b.n	800719a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007194:	4b04      	ldr	r3, [pc, #16]	; (80071a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007196:	60bb      	str	r3, [r7, #8]
      break;
 8007198:	bf00      	nop
    }
  }
  return sysclockfreq;
 800719a:	68bb      	ldr	r3, [r7, #8]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3714      	adds	r7, #20
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071a4:	40023800 	.word	0x40023800
 80071a8:	00f42400 	.word	0x00f42400
 80071ac:	007a1200 	.word	0x007a1200

080071b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071b0:	b480      	push	{r7}
 80071b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071b4:	4b03      	ldr	r3, [pc, #12]	; (80071c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80071b6:	681b      	ldr	r3, [r3, #0]
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	20000004 	.word	0x20000004

080071c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80071cc:	f7ff fff0 	bl	80071b0 <HAL_RCC_GetHCLKFreq>
 80071d0:	4601      	mov	r1, r0
 80071d2:	4b05      	ldr	r3, [pc, #20]	; (80071e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	0a9b      	lsrs	r3, r3, #10
 80071d8:	f003 0307 	and.w	r3, r3, #7
 80071dc:	4a03      	ldr	r2, [pc, #12]	; (80071ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80071de:	5cd3      	ldrb	r3, [r2, r3]
 80071e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	40023800 	.word	0x40023800
 80071ec:	0800a828 	.word	0x0800a828

080071f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80071f4:	f7ff ffdc 	bl	80071b0 <HAL_RCC_GetHCLKFreq>
 80071f8:	4601      	mov	r1, r0
 80071fa:	4b05      	ldr	r3, [pc, #20]	; (8007210 <HAL_RCC_GetPCLK2Freq+0x20>)
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	0b5b      	lsrs	r3, r3, #13
 8007200:	f003 0307 	and.w	r3, r3, #7
 8007204:	4a03      	ldr	r2, [pc, #12]	; (8007214 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007206:	5cd3      	ldrb	r3, [r2, r3]
 8007208:	fa21 f303 	lsr.w	r3, r1, r3
}
 800720c:	4618      	mov	r0, r3
 800720e:	bd80      	pop	{r7, pc}
 8007210:	40023800 	.word	0x40023800
 8007214:	0800a828 	.word	0x0800a828

08007218 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b088      	sub	sp, #32
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007220:	2300      	movs	r3, #0
 8007222:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007224:	2300      	movs	r3, #0
 8007226:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8007228:	2300      	movs	r3, #0
 800722a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800722c:	2300      	movs	r3, #0
 800722e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0301 	and.w	r3, r3, #1
 8007238:	2b00      	cmp	r3, #0
 800723a:	d012      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800723c:	4b65      	ldr	r3, [pc, #404]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	4a64      	ldr	r2, [pc, #400]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007242:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007246:	6093      	str	r3, [r2, #8]
 8007248:	4b62      	ldr	r3, [pc, #392]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800724a:	689a      	ldr	r2, [r3, #8]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007250:	4960      	ldr	r1, [pc, #384]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007252:	4313      	orrs	r3, r2
 8007254:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800725e:	2301      	movs	r3, #1
 8007260:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d017      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800726e:	4b59      	ldr	r3, [pc, #356]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007274:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800727c:	4955      	ldr	r1, [pc, #340]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800727e:	4313      	orrs	r3, r2
 8007280:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007288:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800728c:	d101      	bne.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800728e:	2301      	movs	r3, #1
 8007290:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800729a:	2301      	movs	r3, #1
 800729c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d017      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80072aa:	4b4a      	ldr	r3, [pc, #296]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80072ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b8:	4946      	ldr	r1, [pc, #280]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072c8:	d101      	bne.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80072ca:	2301      	movs	r3, #1
 80072cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d101      	bne.n	80072da <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80072d6:	2301      	movs	r3, #1
 80072d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0320 	and.w	r3, r3, #32
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f000 808b 	beq.w	80073fe <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80072e8:	4b3a      	ldr	r3, [pc, #232]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80072ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ec:	4a39      	ldr	r2, [pc, #228]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80072ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072f2:	6413      	str	r3, [r2, #64]	; 0x40
 80072f4:	4b37      	ldr	r3, [pc, #220]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80072f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072fc:	60fb      	str	r3, [r7, #12]
 80072fe:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007300:	4b35      	ldr	r3, [pc, #212]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a34      	ldr	r2, [pc, #208]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800730a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800730c:	f7fc fba0 	bl	8003a50 <HAL_GetTick>
 8007310:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007312:	e008      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007314:	f7fc fb9c 	bl	8003a50 <HAL_GetTick>
 8007318:	4602      	mov	r2, r0
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	2b64      	cmp	r3, #100	; 0x64
 8007320:	d901      	bls.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e2ba      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007326:	4b2c      	ldr	r3, [pc, #176]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800732e:	2b00      	cmp	r3, #0
 8007330:	d0f0      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007332:	4b28      	ldr	r3, [pc, #160]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800733a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d035      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	429a      	cmp	r2, r3
 800734e:	d02e      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007350:	4b20      	ldr	r3, [pc, #128]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007358:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800735a:	4b1e      	ldr	r3, [pc, #120]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800735c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800735e:	4a1d      	ldr	r2, [pc, #116]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007364:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007366:	4b1b      	ldr	r3, [pc, #108]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800736a:	4a1a      	ldr	r2, [pc, #104]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800736c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007370:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007372:	4a18      	ldr	r2, [pc, #96]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007378:	4b16      	ldr	r3, [pc, #88]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800737a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800737c:	f003 0301 	and.w	r3, r3, #1
 8007380:	2b01      	cmp	r3, #1
 8007382:	d114      	bne.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007384:	f7fc fb64 	bl	8003a50 <HAL_GetTick>
 8007388:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800738a:	e00a      	b.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800738c:	f7fc fb60 	bl	8003a50 <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	f241 3288 	movw	r2, #5000	; 0x1388
 800739a:	4293      	cmp	r3, r2
 800739c:	d901      	bls.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e27c      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073a2:	4b0c      	ldr	r3, [pc, #48]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80073a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a6:	f003 0302 	and.w	r3, r3, #2
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d0ee      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073ba:	d111      	bne.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80073bc:	4b05      	ldr	r3, [pc, #20]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80073c8:	4b04      	ldr	r3, [pc, #16]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80073ca:	400b      	ands	r3, r1
 80073cc:	4901      	ldr	r1, [pc, #4]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	608b      	str	r3, [r1, #8]
 80073d2:	e00b      	b.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80073d4:	40023800 	.word	0x40023800
 80073d8:	40007000 	.word	0x40007000
 80073dc:	0ffffcff 	.word	0x0ffffcff
 80073e0:	4ba3      	ldr	r3, [pc, #652]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	4aa2      	ldr	r2, [pc, #648]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80073e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80073ea:	6093      	str	r3, [r2, #8]
 80073ec:	4ba0      	ldr	r3, [pc, #640]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80073ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073f8:	499d      	ldr	r1, [pc, #628]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80073fa:	4313      	orrs	r3, r2
 80073fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 0310 	and.w	r3, r3, #16
 8007406:	2b00      	cmp	r3, #0
 8007408:	d010      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800740a:	4b99      	ldr	r3, [pc, #612]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800740c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007410:	4a97      	ldr	r2, [pc, #604]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8007412:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007416:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800741a:	4b95      	ldr	r3, [pc, #596]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800741c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007424:	4992      	ldr	r1, [pc, #584]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8007426:	4313      	orrs	r3, r2
 8007428:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00a      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007438:	4b8d      	ldr	r3, [pc, #564]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800743a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800743e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007446:	498a      	ldr	r1, [pc, #552]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8007448:	4313      	orrs	r3, r2
 800744a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00a      	beq.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800745a:	4b85      	ldr	r3, [pc, #532]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800745c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007460:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007468:	4981      	ldr	r1, [pc, #516]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800746a:	4313      	orrs	r3, r2
 800746c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00a      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800747c:	4b7c      	ldr	r3, [pc, #496]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800747e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007482:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800748a:	4979      	ldr	r1, [pc, #484]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800748c:	4313      	orrs	r3, r2
 800748e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00a      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800749e:	4b74      	ldr	r3, [pc, #464]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80074a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074a4:	f023 0203 	bic.w	r2, r3, #3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ac:	4970      	ldr	r1, [pc, #448]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00a      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80074c0:	4b6b      	ldr	r3, [pc, #428]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80074c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074c6:	f023 020c 	bic.w	r2, r3, #12
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ce:	4968      	ldr	r1, [pc, #416]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80074d0:	4313      	orrs	r3, r2
 80074d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00a      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80074e2:	4b63      	ldr	r3, [pc, #396]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80074e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074f0:	495f      	ldr	r1, [pc, #380]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80074f2:	4313      	orrs	r3, r2
 80074f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00a      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007504:	4b5a      	ldr	r3, [pc, #360]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8007506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800750a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007512:	4957      	ldr	r1, [pc, #348]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8007514:	4313      	orrs	r3, r2
 8007516:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00a      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007526:	4b52      	ldr	r3, [pc, #328]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8007528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800752c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007534:	494e      	ldr	r1, [pc, #312]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8007536:	4313      	orrs	r3, r2
 8007538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00a      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007548:	4b49      	ldr	r3, [pc, #292]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800754a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800754e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007556:	4946      	ldr	r1, [pc, #280]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8007558:	4313      	orrs	r3, r2
 800755a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00a      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800756a:	4b41      	ldr	r3, [pc, #260]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800756c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007570:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007578:	493d      	ldr	r1, [pc, #244]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800757a:	4313      	orrs	r3, r2
 800757c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00a      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800758c:	4b38      	ldr	r3, [pc, #224]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800758e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007592:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800759a:	4935      	ldr	r1, [pc, #212]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800759c:	4313      	orrs	r3, r2
 800759e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d011      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80075ae:	4b30      	ldr	r3, [pc, #192]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80075b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075bc:	492c      	ldr	r1, [pc, #176]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80075be:	4313      	orrs	r3, r2
 80075c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075cc:	d101      	bne.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80075ce:	2301      	movs	r3, #1
 80075d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00a      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075de:	4b24      	ldr	r3, [pc, #144]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80075e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075ec:	4920      	ldr	r1, [pc, #128]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80075ee:	4313      	orrs	r3, r2
 80075f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00a      	beq.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007600:	4b1b      	ldr	r3, [pc, #108]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8007602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007606:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800760e:	4918      	ldr	r1, [pc, #96]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8007610:	4313      	orrs	r3, r2
 8007612:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00a      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007622:	4b13      	ldr	r3, [pc, #76]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8007624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007628:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007630:	490f      	ldr	r1, [pc, #60]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8007632:	4313      	orrs	r3, r2
 8007634:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	2b01      	cmp	r3, #1
 800763c:	d005      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x432>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007646:	f040 809c 	bne.w	8007782 <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800764a:	4b09      	ldr	r3, [pc, #36]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a08      	ldr	r2, [pc, #32]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8007650:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007654:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007656:	f7fc f9fb 	bl	8003a50 <HAL_GetTick>
 800765a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800765c:	e00a      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800765e:	f7fc f9f7 	bl	8003a50 <HAL_GetTick>
 8007662:	4602      	mov	r2, r0
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	2b64      	cmp	r3, #100	; 0x64
 800766a:	d903      	bls.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e115      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x684>
 8007670:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007674:	4b8b      	ldr	r3, [pc, #556]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800767c:	2b00      	cmp	r3, #0
 800767e:	d1ee      	bne.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0301 	and.w	r3, r3, #1
 8007688:	2b00      	cmp	r3, #0
 800768a:	d017      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007690:	2b00      	cmp	r3, #0
 8007692:	d113      	bne.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007694:	4b83      	ldr	r3, [pc, #524]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8007696:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800769a:	0e1b      	lsrs	r3, r3, #24
 800769c:	f003 030f 	and.w	r3, r3, #15
 80076a0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	019a      	lsls	r2, r3, #6
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	061b      	lsls	r3, r3, #24
 80076ac:	431a      	orrs	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	071b      	lsls	r3, r3, #28
 80076b4:	497b      	ldr	r1, [pc, #492]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80076b6:	4313      	orrs	r3, r2
 80076b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d004      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076d0:	d00a      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d024      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076e6:	d11f      	bne.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80076e8:	4b6e      	ldr	r3, [pc, #440]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80076ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076ee:	0f1b      	lsrs	r3, r3, #28
 80076f0:	f003 0307 	and.w	r3, r3, #7
 80076f4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	019a      	lsls	r2, r3, #6
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	061b      	lsls	r3, r3, #24
 8007702:	431a      	orrs	r2, r3
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	071b      	lsls	r3, r3, #28
 8007708:	4966      	ldr	r1, [pc, #408]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800770a:	4313      	orrs	r3, r2
 800770c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007710:	4b64      	ldr	r3, [pc, #400]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8007712:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007716:	f023 021f 	bic.w	r2, r3, #31
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	69db      	ldr	r3, [r3, #28]
 800771e:	3b01      	subs	r3, #1
 8007720:	4960      	ldr	r1, [pc, #384]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8007722:	4313      	orrs	r3, r2
 8007724:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00d      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	019a      	lsls	r2, r3, #6
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	061b      	lsls	r3, r3, #24
 8007740:	431a      	orrs	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	071b      	lsls	r3, r3, #28
 8007748:	4956      	ldr	r1, [pc, #344]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800774a:	4313      	orrs	r3, r2
 800774c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007750:	4b54      	ldr	r3, [pc, #336]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a53      	ldr	r2, [pc, #332]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8007756:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800775a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800775c:	f7fc f978 	bl	8003a50 <HAL_GetTick>
 8007760:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007762:	e008      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007764:	f7fc f974 	bl	8003a50 <HAL_GetTick>
 8007768:	4602      	mov	r2, r0
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	2b64      	cmp	r3, #100	; 0x64
 8007770:	d901      	bls.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e092      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007776:	4b4b      	ldr	r3, [pc, #300]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d0f0      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	2b01      	cmp	r3, #1
 8007786:	f040 8088 	bne.w	800789a <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800778a:	4b46      	ldr	r3, [pc, #280]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a45      	ldr	r2, [pc, #276]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8007790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007794:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007796:	f7fc f95b 	bl	8003a50 <HAL_GetTick>
 800779a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800779c:	e008      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800779e:	f7fc f957 	bl	8003a50 <HAL_GetTick>
 80077a2:	4602      	mov	r2, r0
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	2b64      	cmp	r3, #100	; 0x64
 80077aa:	d901      	bls.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e075      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80077b0:	4b3c      	ldr	r3, [pc, #240]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077bc:	d0ef      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d003      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d009      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d024      	beq.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d120      	bne.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80077e6:	4b2f      	ldr	r3, [pc, #188]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80077e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ec:	0c1b      	lsrs	r3, r3, #16
 80077ee:	f003 0303 	and.w	r3, r3, #3
 80077f2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	691b      	ldr	r3, [r3, #16]
 80077f8:	019a      	lsls	r2, r3, #6
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	041b      	lsls	r3, r3, #16
 80077fe:	431a      	orrs	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	695b      	ldr	r3, [r3, #20]
 8007804:	061b      	lsls	r3, r3, #24
 8007806:	4927      	ldr	r1, [pc, #156]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8007808:	4313      	orrs	r3, r2
 800780a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800780e:	4b25      	ldr	r3, [pc, #148]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8007810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007814:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a1b      	ldr	r3, [r3, #32]
 800781c:	3b01      	subs	r3, #1
 800781e:	021b      	lsls	r3, r3, #8
 8007820:	4920      	ldr	r1, [pc, #128]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8007822:	4313      	orrs	r3, r2
 8007824:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007830:	2b00      	cmp	r3, #0
 8007832:	d018      	beq.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007838:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800783c:	d113      	bne.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800783e:	4b19      	ldr	r3, [pc, #100]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8007840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007844:	0e1b      	lsrs	r3, r3, #24
 8007846:	f003 030f 	and.w	r3, r3, #15
 800784a:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	019a      	lsls	r2, r3, #6
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	699b      	ldr	r3, [r3, #24]
 8007856:	041b      	lsls	r3, r3, #16
 8007858:	431a      	orrs	r2, r3
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	061b      	lsls	r3, r3, #24
 800785e:	4911      	ldr	r1, [pc, #68]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8007860:	4313      	orrs	r3, r2
 8007862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007866:	4b0f      	ldr	r3, [pc, #60]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a0e      	ldr	r2, [pc, #56]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800786c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007870:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007872:	f7fc f8ed 	bl	8003a50 <HAL_GetTick>
 8007876:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007878:	e008      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800787a:	f7fc f8e9 	bl	8003a50 <HAL_GetTick>
 800787e:	4602      	mov	r2, r0
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	2b64      	cmp	r3, #100	; 0x64
 8007886:	d901      	bls.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007888:	2303      	movs	r3, #3
 800788a:	e007      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800788c:	4b05      	ldr	r3, [pc, #20]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007898:	d1ef      	bne.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3720      	adds	r7, #32
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	40023800 	.word	0x40023800

080078a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d101      	bne.n	80078ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e01d      	b.n	80078f6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d106      	bne.n	80078d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7fb fc8c 	bl	80031ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2202      	movs	r2, #2
 80078d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	3304      	adds	r3, #4
 80078e4:	4619      	mov	r1, r3
 80078e6:	4610      	mov	r0, r2
 80078e8:	f000 fd48 	bl	800837c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3708      	adds	r7, #8
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b082      	sub	sp, #8
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d101      	bne.n	8007910 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e01d      	b.n	800794c <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007916:	b2db      	uxtb	r3, r3
 8007918:	2b00      	cmp	r3, #0
 800791a:	d106      	bne.n	800792a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f7fb fd05 	bl	8003334 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2202      	movs	r2, #2
 800792e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	3304      	adds	r3, #4
 800793a:	4619      	mov	r1, r3
 800793c:	4610      	mov	r0, r2
 800793e:	f000 fd1d 	bl	800837c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800794a:	2300      	movs	r3, #0
}
 800794c:	4618      	mov	r0, r3
 800794e:	3708      	adds	r7, #8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d101      	bne.n	8007966 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e01d      	b.n	80079a2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	d106      	bne.n	8007980 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7fb fcba 	bl	80032f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2202      	movs	r2, #2
 8007984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	3304      	adds	r3, #4
 8007990:	4619      	mov	r1, r3
 8007992:	4610      	mov	r0, r2
 8007994:	f000 fcf2 	bl	800837c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
	...

080079ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2201      	movs	r2, #1
 80079bc:	6839      	ldr	r1, [r7, #0]
 80079be:	4618      	mov	r0, r3
 80079c0:	f001 fa0b 	bl	8008dda <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a17      	ldr	r2, [pc, #92]	; (8007a28 <HAL_TIM_PWM_Start+0x7c>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d004      	beq.n	80079d8 <HAL_TIM_PWM_Start+0x2c>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a16      	ldr	r2, [pc, #88]	; (8007a2c <HAL_TIM_PWM_Start+0x80>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d101      	bne.n	80079dc <HAL_TIM_PWM_Start+0x30>
 80079d8:	2301      	movs	r3, #1
 80079da:	e000      	b.n	80079de <HAL_TIM_PWM_Start+0x32>
 80079dc:	2300      	movs	r3, #0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d007      	beq.n	80079f2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	689a      	ldr	r2, [r3, #8]
 80079f8:	4b0d      	ldr	r3, [pc, #52]	; (8007a30 <HAL_TIM_PWM_Start+0x84>)
 80079fa:	4013      	ands	r3, r2
 80079fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2b06      	cmp	r3, #6
 8007a02:	d00b      	beq.n	8007a1c <HAL_TIM_PWM_Start+0x70>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a0a:	d007      	beq.n	8007a1c <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f042 0201 	orr.w	r2, r2, #1
 8007a1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	40010000 	.word	0x40010000
 8007a2c:	40010400 	.word	0x40010400
 8007a30:	00010007 	.word	0x00010007

08007a34 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d101      	bne.n	8007a46 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e01d      	b.n	8007a82 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d106      	bne.n	8007a60 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f815 	bl	8007a8a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2202      	movs	r2, #2
 8007a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	3304      	adds	r3, #4
 8007a70:	4619      	mov	r1, r3
 8007a72:	4610      	mov	r0, r2
 8007a74:	f000 fc82 	bl	800837c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b083      	sub	sp, #12
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007a92:	bf00      	nop
 8007a94:	370c      	adds	r7, #12
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
	...

08007aa0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	2b0c      	cmp	r3, #12
 8007aae:	d841      	bhi.n	8007b34 <HAL_TIM_IC_Start_IT+0x94>
 8007ab0:	a201      	add	r2, pc, #4	; (adr r2, 8007ab8 <HAL_TIM_IC_Start_IT+0x18>)
 8007ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab6:	bf00      	nop
 8007ab8:	08007aed 	.word	0x08007aed
 8007abc:	08007b35 	.word	0x08007b35
 8007ac0:	08007b35 	.word	0x08007b35
 8007ac4:	08007b35 	.word	0x08007b35
 8007ac8:	08007aff 	.word	0x08007aff
 8007acc:	08007b35 	.word	0x08007b35
 8007ad0:	08007b35 	.word	0x08007b35
 8007ad4:	08007b35 	.word	0x08007b35
 8007ad8:	08007b11 	.word	0x08007b11
 8007adc:	08007b35 	.word	0x08007b35
 8007ae0:	08007b35 	.word	0x08007b35
 8007ae4:	08007b35 	.word	0x08007b35
 8007ae8:	08007b23 	.word	0x08007b23
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68da      	ldr	r2, [r3, #12]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f042 0202 	orr.w	r2, r2, #2
 8007afa:	60da      	str	r2, [r3, #12]
      break;
 8007afc:	e01b      	b.n	8007b36 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68da      	ldr	r2, [r3, #12]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f042 0204 	orr.w	r2, r2, #4
 8007b0c:	60da      	str	r2, [r3, #12]
      break;
 8007b0e:	e012      	b.n	8007b36 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68da      	ldr	r2, [r3, #12]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f042 0208 	orr.w	r2, r2, #8
 8007b1e:	60da      	str	r2, [r3, #12]
      break;
 8007b20:	e009      	b.n	8007b36 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68da      	ldr	r2, [r3, #12]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f042 0210 	orr.w	r2, r2, #16
 8007b30:	60da      	str	r2, [r3, #12]
      break;
 8007b32:	e000      	b.n	8007b36 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8007b34:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	6839      	ldr	r1, [r7, #0]
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f001 f94b 	bl	8008dda <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	689a      	ldr	r2, [r3, #8]
 8007b4a:	4b0b      	ldr	r3, [pc, #44]	; (8007b78 <HAL_TIM_IC_Start_IT+0xd8>)
 8007b4c:	4013      	ands	r3, r2
 8007b4e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2b06      	cmp	r3, #6
 8007b54:	d00b      	beq.n	8007b6e <HAL_TIM_IC_Start_IT+0xce>
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b5c:	d007      	beq.n	8007b6e <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f042 0201 	orr.w	r2, r2, #1
 8007b6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b6e:	2300      	movs	r3, #0
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	00010007 	.word	0x00010007

08007b7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	f003 0302 	and.w	r3, r3, #2
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d122      	bne.n	8007bd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	f003 0302 	and.w	r3, r3, #2
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d11b      	bne.n	8007bd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f06f 0202 	mvn.w	r2, #2
 8007ba8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2201      	movs	r2, #1
 8007bae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	f003 0303 	and.w	r3, r3, #3
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d003      	beq.n	8007bc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7fa fbc4 	bl	800234c <HAL_TIM_IC_CaptureCallback>
 8007bc4:	e005      	b.n	8007bd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fbba 	bl	8008340 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 fbc1 	bl	8008354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	f003 0304 	and.w	r3, r3, #4
 8007be2:	2b04      	cmp	r3, #4
 8007be4:	d122      	bne.n	8007c2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	f003 0304 	and.w	r3, r3, #4
 8007bf0:	2b04      	cmp	r3, #4
 8007bf2:	d11b      	bne.n	8007c2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f06f 0204 	mvn.w	r2, #4
 8007bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2202      	movs	r2, #2
 8007c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	699b      	ldr	r3, [r3, #24]
 8007c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d003      	beq.n	8007c1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7fa fb9a 	bl	800234c <HAL_TIM_IC_CaptureCallback>
 8007c18:	e005      	b.n	8007c26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fb90 	bl	8008340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 fb97 	bl	8008354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	f003 0308 	and.w	r3, r3, #8
 8007c36:	2b08      	cmp	r3, #8
 8007c38:	d122      	bne.n	8007c80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	f003 0308 	and.w	r3, r3, #8
 8007c44:	2b08      	cmp	r3, #8
 8007c46:	d11b      	bne.n	8007c80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f06f 0208 	mvn.w	r2, #8
 8007c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2204      	movs	r2, #4
 8007c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	f003 0303 	and.w	r3, r3, #3
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d003      	beq.n	8007c6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7fa fb70 	bl	800234c <HAL_TIM_IC_CaptureCallback>
 8007c6c:	e005      	b.n	8007c7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fb66 	bl	8008340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fb6d 	bl	8008354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	f003 0310 	and.w	r3, r3, #16
 8007c8a:	2b10      	cmp	r3, #16
 8007c8c:	d122      	bne.n	8007cd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f003 0310 	and.w	r3, r3, #16
 8007c98:	2b10      	cmp	r3, #16
 8007c9a:	d11b      	bne.n	8007cd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f06f 0210 	mvn.w	r2, #16
 8007ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2208      	movs	r2, #8
 8007caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	69db      	ldr	r3, [r3, #28]
 8007cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d003      	beq.n	8007cc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f7fa fb46 	bl	800234c <HAL_TIM_IC_CaptureCallback>
 8007cc0:	e005      	b.n	8007cce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 fb3c 	bl	8008340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fb43 	bl	8008354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	f003 0301 	and.w	r3, r3, #1
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d10e      	bne.n	8007d00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	f003 0301 	and.w	r3, r3, #1
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d107      	bne.n	8007d00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f06f 0201 	mvn.w	r2, #1
 8007cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 fb16 	bl	800832c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d0a:	2b80      	cmp	r3, #128	; 0x80
 8007d0c:	d10e      	bne.n	8007d2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d18:	2b80      	cmp	r3, #128	; 0x80
 8007d1a:	d107      	bne.n	8007d2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f001 f914 	bl	8008f54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d3a:	d10e      	bne.n	8007d5a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d46:	2b80      	cmp	r3, #128	; 0x80
 8007d48:	d107      	bne.n	8007d5a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f001 f907 	bl	8008f68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d64:	2b40      	cmp	r3, #64	; 0x40
 8007d66:	d10e      	bne.n	8007d86 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d72:	2b40      	cmp	r3, #64	; 0x40
 8007d74:	d107      	bne.n	8007d86 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 faf1 	bl	8008368 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	f003 0320 	and.w	r3, r3, #32
 8007d90:	2b20      	cmp	r3, #32
 8007d92:	d10e      	bne.n	8007db2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	f003 0320 	and.w	r3, r3, #32
 8007d9e:	2b20      	cmp	r3, #32
 8007da0:	d107      	bne.n	8007db2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f06f 0220 	mvn.w	r2, #32
 8007daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f001 f8c7 	bl	8008f40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007db2:	bf00      	nop
 8007db4:	3708      	adds	r7, #8
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
	...

08007dbc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d101      	bne.n	8007dd6 <HAL_TIM_OC_ConfigChannel+0x1a>
 8007dd2:	2302      	movs	r3, #2
 8007dd4:	e06c      	b.n	8007eb0 <HAL_TIM_OC_ConfigChannel+0xf4>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2202      	movs	r2, #2
 8007de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b14      	cmp	r3, #20
 8007dea:	d857      	bhi.n	8007e9c <HAL_TIM_OC_ConfigChannel+0xe0>
 8007dec:	a201      	add	r2, pc, #4	; (adr r2, 8007df4 <HAL_TIM_OC_ConfigChannel+0x38>)
 8007dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df2:	bf00      	nop
 8007df4:	08007e49 	.word	0x08007e49
 8007df8:	08007e9d 	.word	0x08007e9d
 8007dfc:	08007e9d 	.word	0x08007e9d
 8007e00:	08007e9d 	.word	0x08007e9d
 8007e04:	08007e57 	.word	0x08007e57
 8007e08:	08007e9d 	.word	0x08007e9d
 8007e0c:	08007e9d 	.word	0x08007e9d
 8007e10:	08007e9d 	.word	0x08007e9d
 8007e14:	08007e65 	.word	0x08007e65
 8007e18:	08007e9d 	.word	0x08007e9d
 8007e1c:	08007e9d 	.word	0x08007e9d
 8007e20:	08007e9d 	.word	0x08007e9d
 8007e24:	08007e73 	.word	0x08007e73
 8007e28:	08007e9d 	.word	0x08007e9d
 8007e2c:	08007e9d 	.word	0x08007e9d
 8007e30:	08007e9d 	.word	0x08007e9d
 8007e34:	08007e81 	.word	0x08007e81
 8007e38:	08007e9d 	.word	0x08007e9d
 8007e3c:	08007e9d 	.word	0x08007e9d
 8007e40:	08007e9d 	.word	0x08007e9d
 8007e44:	08007e8f 	.word	0x08007e8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68b9      	ldr	r1, [r7, #8]
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f000 fb34 	bl	80084bc <TIM_OC1_SetConfig>
      break;
 8007e54:	e023      	b.n	8007e9e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	68b9      	ldr	r1, [r7, #8]
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f000 fb9f 	bl	80085a0 <TIM_OC2_SetConfig>
      break;
 8007e62:	e01c      	b.n	8007e9e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68b9      	ldr	r1, [r7, #8]
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f000 fc10 	bl	8008690 <TIM_OC3_SetConfig>
      break;
 8007e70:	e015      	b.n	8007e9e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	68b9      	ldr	r1, [r7, #8]
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f000 fc7f 	bl	800877c <TIM_OC4_SetConfig>
      break;
 8007e7e:	e00e      	b.n	8007e9e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68b9      	ldr	r1, [r7, #8]
 8007e86:	4618      	mov	r0, r3
 8007e88:	f000 fcd0 	bl	800882c <TIM_OC5_SetConfig>
      break;
 8007e8c:	e007      	b.n	8007e9e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68b9      	ldr	r1, [r7, #8]
 8007e94:	4618      	mov	r0, r3
 8007e96:	f000 fd1b 	bl	80088d0 <TIM_OC6_SetConfig>
      break;
 8007e9a:	e000      	b.n	8007e9e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 8007e9c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d101      	bne.n	8007ed2 <HAL_TIM_IC_ConfigChannel+0x1a>
 8007ece:	2302      	movs	r3, #2
 8007ed0:	e08a      	b.n	8007fe8 <HAL_TIM_IC_ConfigChannel+0x130>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2202      	movs	r2, #2
 8007ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d11b      	bne.n	8007f20 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6818      	ldr	r0, [r3, #0]
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	6819      	ldr	r1, [r3, #0]
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	685a      	ldr	r2, [r3, #4]
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	f000 fdc6 	bl	8008a88 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	699a      	ldr	r2, [r3, #24]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f022 020c 	bic.w	r2, r2, #12
 8007f0a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6999      	ldr	r1, [r3, #24]
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	689a      	ldr	r2, [r3, #8]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	430a      	orrs	r2, r1
 8007f1c:	619a      	str	r2, [r3, #24]
 8007f1e:	e05a      	b.n	8007fd6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2b04      	cmp	r3, #4
 8007f24:	d11c      	bne.n	8007f60 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	6818      	ldr	r0, [r3, #0]
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	6819      	ldr	r1, [r3, #0]
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	685a      	ldr	r2, [r3, #4]
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	f000 fe4a 	bl	8008bce <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	699a      	ldr	r2, [r3, #24]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007f48:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	6999      	ldr	r1, [r3, #24]
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	021a      	lsls	r2, r3, #8
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	430a      	orrs	r2, r1
 8007f5c:	619a      	str	r2, [r3, #24]
 8007f5e:	e03a      	b.n	8007fd6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2b08      	cmp	r3, #8
 8007f64:	d11b      	bne.n	8007f9e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6818      	ldr	r0, [r3, #0]
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	6819      	ldr	r1, [r3, #0]
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	685a      	ldr	r2, [r3, #4]
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	f000 fe97 	bl	8008ca8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	69da      	ldr	r2, [r3, #28]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f022 020c 	bic.w	r2, r2, #12
 8007f88:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	69d9      	ldr	r1, [r3, #28]
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	689a      	ldr	r2, [r3, #8]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	430a      	orrs	r2, r1
 8007f9a:	61da      	str	r2, [r3, #28]
 8007f9c:	e01b      	b.n	8007fd6 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6818      	ldr	r0, [r3, #0]
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	6819      	ldr	r1, [r3, #0]
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	685a      	ldr	r2, [r3, #4]
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	f000 feb7 	bl	8008d20 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	69da      	ldr	r2, [r3, #28]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007fc0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	69d9      	ldr	r1, [r3, #28]
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	021a      	lsls	r2, r3, #8
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	430a      	orrs	r2, r1
 8007fd4:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008002:	2b01      	cmp	r3, #1
 8008004:	d101      	bne.n	800800a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008006:	2302      	movs	r3, #2
 8008008:	e105      	b.n	8008216 <HAL_TIM_PWM_ConfigChannel+0x226>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2201      	movs	r2, #1
 800800e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2202      	movs	r2, #2
 8008016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2b14      	cmp	r3, #20
 800801e:	f200 80f0 	bhi.w	8008202 <HAL_TIM_PWM_ConfigChannel+0x212>
 8008022:	a201      	add	r2, pc, #4	; (adr r2, 8008028 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008028:	0800807d 	.word	0x0800807d
 800802c:	08008203 	.word	0x08008203
 8008030:	08008203 	.word	0x08008203
 8008034:	08008203 	.word	0x08008203
 8008038:	080080bd 	.word	0x080080bd
 800803c:	08008203 	.word	0x08008203
 8008040:	08008203 	.word	0x08008203
 8008044:	08008203 	.word	0x08008203
 8008048:	080080ff 	.word	0x080080ff
 800804c:	08008203 	.word	0x08008203
 8008050:	08008203 	.word	0x08008203
 8008054:	08008203 	.word	0x08008203
 8008058:	0800813f 	.word	0x0800813f
 800805c:	08008203 	.word	0x08008203
 8008060:	08008203 	.word	0x08008203
 8008064:	08008203 	.word	0x08008203
 8008068:	08008181 	.word	0x08008181
 800806c:	08008203 	.word	0x08008203
 8008070:	08008203 	.word	0x08008203
 8008074:	08008203 	.word	0x08008203
 8008078:	080081c1 	.word	0x080081c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68b9      	ldr	r1, [r7, #8]
 8008082:	4618      	mov	r0, r3
 8008084:	f000 fa1a 	bl	80084bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	699a      	ldr	r2, [r3, #24]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f042 0208 	orr.w	r2, r2, #8
 8008096:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	699a      	ldr	r2, [r3, #24]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f022 0204 	bic.w	r2, r2, #4
 80080a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6999      	ldr	r1, [r3, #24]
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	691a      	ldr	r2, [r3, #16]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	430a      	orrs	r2, r1
 80080b8:	619a      	str	r2, [r3, #24]
      break;
 80080ba:	e0a3      	b.n	8008204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68b9      	ldr	r1, [r7, #8]
 80080c2:	4618      	mov	r0, r3
 80080c4:	f000 fa6c 	bl	80085a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	699a      	ldr	r2, [r3, #24]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	699a      	ldr	r2, [r3, #24]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6999      	ldr	r1, [r3, #24]
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	021a      	lsls	r2, r3, #8
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	430a      	orrs	r2, r1
 80080fa:	619a      	str	r2, [r3, #24]
      break;
 80080fc:	e082      	b.n	8008204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68b9      	ldr	r1, [r7, #8]
 8008104:	4618      	mov	r0, r3
 8008106:	f000 fac3 	bl	8008690 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	69da      	ldr	r2, [r3, #28]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f042 0208 	orr.w	r2, r2, #8
 8008118:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	69da      	ldr	r2, [r3, #28]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f022 0204 	bic.w	r2, r2, #4
 8008128:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	69d9      	ldr	r1, [r3, #28]
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	691a      	ldr	r2, [r3, #16]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	430a      	orrs	r2, r1
 800813a:	61da      	str	r2, [r3, #28]
      break;
 800813c:	e062      	b.n	8008204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68b9      	ldr	r1, [r7, #8]
 8008144:	4618      	mov	r0, r3
 8008146:	f000 fb19 	bl	800877c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	69da      	ldr	r2, [r3, #28]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008158:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	69da      	ldr	r2, [r3, #28]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008168:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	69d9      	ldr	r1, [r3, #28]
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	691b      	ldr	r3, [r3, #16]
 8008174:	021a      	lsls	r2, r3, #8
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	430a      	orrs	r2, r1
 800817c:	61da      	str	r2, [r3, #28]
      break;
 800817e:	e041      	b.n	8008204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	68b9      	ldr	r1, [r7, #8]
 8008186:	4618      	mov	r0, r3
 8008188:	f000 fb50 	bl	800882c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f042 0208 	orr.w	r2, r2, #8
 800819a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f022 0204 	bic.w	r2, r2, #4
 80081aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	691a      	ldr	r2, [r3, #16]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	430a      	orrs	r2, r1
 80081bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80081be:	e021      	b.n	8008204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68b9      	ldr	r1, [r7, #8]
 80081c6:	4618      	mov	r0, r3
 80081c8:	f000 fb82 	bl	80088d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	021a      	lsls	r2, r3, #8
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	430a      	orrs	r2, r1
 80081fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008200:	e000      	b.n	8008204 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8008202:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2200      	movs	r2, #0
 8008210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop

08008220 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008230:	2b01      	cmp	r3, #1
 8008232:	d101      	bne.n	8008238 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008234:	2302      	movs	r3, #2
 8008236:	e031      	b.n	800829c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2202      	movs	r2, #2
 8008244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008248:	6839      	ldr	r1, [r7, #0]
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fb94 	bl	8008978 <TIM_SlaveTimer_SetConfig>
 8008250:	4603      	mov	r3, r0
 8008252:	2b00      	cmp	r3, #0
 8008254:	d009      	beq.n	800826a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2201      	movs	r2, #1
 800825a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e018      	b.n	800829c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68da      	ldr	r2, [r3, #12]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008278:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	68da      	ldr	r2, [r3, #12]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008288:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2201      	movs	r2, #1
 800828e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80082ae:	2300      	movs	r3, #0
 80082b0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	2b0c      	cmp	r3, #12
 80082b6:	d831      	bhi.n	800831c <HAL_TIM_ReadCapturedValue+0x78>
 80082b8:	a201      	add	r2, pc, #4	; (adr r2, 80082c0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80082ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082be:	bf00      	nop
 80082c0:	080082f5 	.word	0x080082f5
 80082c4:	0800831d 	.word	0x0800831d
 80082c8:	0800831d 	.word	0x0800831d
 80082cc:	0800831d 	.word	0x0800831d
 80082d0:	080082ff 	.word	0x080082ff
 80082d4:	0800831d 	.word	0x0800831d
 80082d8:	0800831d 	.word	0x0800831d
 80082dc:	0800831d 	.word	0x0800831d
 80082e0:	08008309 	.word	0x08008309
 80082e4:	0800831d 	.word	0x0800831d
 80082e8:	0800831d 	.word	0x0800831d
 80082ec:	0800831d 	.word	0x0800831d
 80082f0:	08008313 	.word	0x08008313
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082fa:	60fb      	str	r3, [r7, #12]

      break;
 80082fc:	e00f      	b.n	800831e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008304:	60fb      	str	r3, [r7, #12]

      break;
 8008306:	e00a      	b.n	800831e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800830e:	60fb      	str	r3, [r7, #12]

      break;
 8008310:	e005      	b.n	800831e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008318:	60fb      	str	r3, [r7, #12]

      break;
 800831a:	e000      	b.n	800831e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800831c:	bf00      	nop
  }

  return tmpreg;
 800831e:	68fb      	ldr	r3, [r7, #12]
}
 8008320:	4618      	mov	r0, r3
 8008322:	3714      	adds	r7, #20
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008348:	bf00      	nop
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008370:	bf00      	nop
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	4a40      	ldr	r2, [pc, #256]	; (8008490 <TIM_Base_SetConfig+0x114>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d013      	beq.n	80083bc <TIM_Base_SetConfig+0x40>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800839a:	d00f      	beq.n	80083bc <TIM_Base_SetConfig+0x40>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4a3d      	ldr	r2, [pc, #244]	; (8008494 <TIM_Base_SetConfig+0x118>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d00b      	beq.n	80083bc <TIM_Base_SetConfig+0x40>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a3c      	ldr	r2, [pc, #240]	; (8008498 <TIM_Base_SetConfig+0x11c>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d007      	beq.n	80083bc <TIM_Base_SetConfig+0x40>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4a3b      	ldr	r2, [pc, #236]	; (800849c <TIM_Base_SetConfig+0x120>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d003      	beq.n	80083bc <TIM_Base_SetConfig+0x40>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a3a      	ldr	r2, [pc, #232]	; (80084a0 <TIM_Base_SetConfig+0x124>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d108      	bne.n	80083ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a2f      	ldr	r2, [pc, #188]	; (8008490 <TIM_Base_SetConfig+0x114>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d02b      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083dc:	d027      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a2c      	ldr	r2, [pc, #176]	; (8008494 <TIM_Base_SetConfig+0x118>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d023      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4a2b      	ldr	r2, [pc, #172]	; (8008498 <TIM_Base_SetConfig+0x11c>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d01f      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4a2a      	ldr	r2, [pc, #168]	; (800849c <TIM_Base_SetConfig+0x120>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d01b      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4a29      	ldr	r2, [pc, #164]	; (80084a0 <TIM_Base_SetConfig+0x124>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d017      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a28      	ldr	r2, [pc, #160]	; (80084a4 <TIM_Base_SetConfig+0x128>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d013      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a27      	ldr	r2, [pc, #156]	; (80084a8 <TIM_Base_SetConfig+0x12c>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d00f      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a26      	ldr	r2, [pc, #152]	; (80084ac <TIM_Base_SetConfig+0x130>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d00b      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a25      	ldr	r2, [pc, #148]	; (80084b0 <TIM_Base_SetConfig+0x134>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d007      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a24      	ldr	r2, [pc, #144]	; (80084b4 <TIM_Base_SetConfig+0x138>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d003      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a23      	ldr	r2, [pc, #140]	; (80084b8 <TIM_Base_SetConfig+0x13c>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d108      	bne.n	8008440 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	4313      	orrs	r3, r2
 800843e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	695b      	ldr	r3, [r3, #20]
 800844a:	4313      	orrs	r3, r2
 800844c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	689a      	ldr	r2, [r3, #8]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a0a      	ldr	r2, [pc, #40]	; (8008490 <TIM_Base_SetConfig+0x114>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d003      	beq.n	8008474 <TIM_Base_SetConfig+0xf8>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a0c      	ldr	r2, [pc, #48]	; (80084a0 <TIM_Base_SetConfig+0x124>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d103      	bne.n	800847c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	691a      	ldr	r2, [r3, #16]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	615a      	str	r2, [r3, #20]
}
 8008482:	bf00      	nop
 8008484:	3714      	adds	r7, #20
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	40010000 	.word	0x40010000
 8008494:	40000400 	.word	0x40000400
 8008498:	40000800 	.word	0x40000800
 800849c:	40000c00 	.word	0x40000c00
 80084a0:	40010400 	.word	0x40010400
 80084a4:	40014000 	.word	0x40014000
 80084a8:	40014400 	.word	0x40014400
 80084ac:	40014800 	.word	0x40014800
 80084b0:	40001800 	.word	0x40001800
 80084b4:	40001c00 	.word	0x40001c00
 80084b8:	40002000 	.word	0x40002000

080084bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084bc:	b480      	push	{r7}
 80084be:	b087      	sub	sp, #28
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a1b      	ldr	r3, [r3, #32]
 80084ca:	f023 0201 	bic.w	r2, r3, #1
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a1b      	ldr	r3, [r3, #32]
 80084d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	699b      	ldr	r3, [r3, #24]
 80084e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	4b2b      	ldr	r3, [pc, #172]	; (8008594 <TIM_OC1_SetConfig+0xd8>)
 80084e8:	4013      	ands	r3, r2
 80084ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f023 0303 	bic.w	r3, r3, #3
 80084f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	f023 0302 	bic.w	r3, r3, #2
 8008504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	697a      	ldr	r2, [r7, #20]
 800850c:	4313      	orrs	r3, r2
 800850e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a21      	ldr	r2, [pc, #132]	; (8008598 <TIM_OC1_SetConfig+0xdc>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d003      	beq.n	8008520 <TIM_OC1_SetConfig+0x64>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a20      	ldr	r2, [pc, #128]	; (800859c <TIM_OC1_SetConfig+0xe0>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d10c      	bne.n	800853a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	f023 0308 	bic.w	r3, r3, #8
 8008526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	697a      	ldr	r2, [r7, #20]
 800852e:	4313      	orrs	r3, r2
 8008530:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	f023 0304 	bic.w	r3, r3, #4
 8008538:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4a16      	ldr	r2, [pc, #88]	; (8008598 <TIM_OC1_SetConfig+0xdc>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d003      	beq.n	800854a <TIM_OC1_SetConfig+0x8e>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a15      	ldr	r2, [pc, #84]	; (800859c <TIM_OC1_SetConfig+0xe0>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d111      	bne.n	800856e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008550:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008558:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	695b      	ldr	r3, [r3, #20]
 800855e:	693a      	ldr	r2, [r7, #16]
 8008560:	4313      	orrs	r3, r2
 8008562:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	699b      	ldr	r3, [r3, #24]
 8008568:	693a      	ldr	r2, [r7, #16]
 800856a:	4313      	orrs	r3, r2
 800856c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	693a      	ldr	r2, [r7, #16]
 8008572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	685a      	ldr	r2, [r3, #4]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	697a      	ldr	r2, [r7, #20]
 8008586:	621a      	str	r2, [r3, #32]
}
 8008588:	bf00      	nop
 800858a:	371c      	adds	r7, #28
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr
 8008594:	fffeff8f 	.word	0xfffeff8f
 8008598:	40010000 	.word	0x40010000
 800859c:	40010400 	.word	0x40010400

080085a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b087      	sub	sp, #28
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a1b      	ldr	r3, [r3, #32]
 80085ae:	f023 0210 	bic.w	r2, r3, #16
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a1b      	ldr	r3, [r3, #32]
 80085ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	4b2e      	ldr	r3, [pc, #184]	; (8008684 <TIM_OC2_SetConfig+0xe4>)
 80085cc:	4013      	ands	r3, r2
 80085ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	021b      	lsls	r3, r3, #8
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	f023 0320 	bic.w	r3, r3, #32
 80085ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	011b      	lsls	r3, r3, #4
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a23      	ldr	r2, [pc, #140]	; (8008688 <TIM_OC2_SetConfig+0xe8>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d003      	beq.n	8008608 <TIM_OC2_SetConfig+0x68>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a22      	ldr	r2, [pc, #136]	; (800868c <TIM_OC2_SetConfig+0xec>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d10d      	bne.n	8008624 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800860e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	011b      	lsls	r3, r3, #4
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	4313      	orrs	r3, r2
 800861a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008622:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	4a18      	ldr	r2, [pc, #96]	; (8008688 <TIM_OC2_SetConfig+0xe8>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d003      	beq.n	8008634 <TIM_OC2_SetConfig+0x94>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4a17      	ldr	r2, [pc, #92]	; (800868c <TIM_OC2_SetConfig+0xec>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d113      	bne.n	800865c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800863a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008642:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	695b      	ldr	r3, [r3, #20]
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	693a      	ldr	r2, [r7, #16]
 800864c:	4313      	orrs	r3, r2
 800864e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	699b      	ldr	r3, [r3, #24]
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	693a      	ldr	r2, [r7, #16]
 8008658:	4313      	orrs	r3, r2
 800865a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	693a      	ldr	r2, [r7, #16]
 8008660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	685a      	ldr	r2, [r3, #4]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	621a      	str	r2, [r3, #32]
}
 8008676:	bf00      	nop
 8008678:	371c      	adds	r7, #28
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	feff8fff 	.word	0xfeff8fff
 8008688:	40010000 	.word	0x40010000
 800868c:	40010400 	.word	0x40010400

08008690 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008690:	b480      	push	{r7}
 8008692:	b087      	sub	sp, #28
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a1b      	ldr	r3, [r3, #32]
 800869e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a1b      	ldr	r3, [r3, #32]
 80086aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	69db      	ldr	r3, [r3, #28]
 80086b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	4b2d      	ldr	r3, [pc, #180]	; (8008770 <TIM_OC3_SetConfig+0xe0>)
 80086bc:	4013      	ands	r3, r2
 80086be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f023 0303 	bic.w	r3, r3, #3
 80086c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	021b      	lsls	r3, r3, #8
 80086e0:	697a      	ldr	r2, [r7, #20]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4a22      	ldr	r2, [pc, #136]	; (8008774 <TIM_OC3_SetConfig+0xe4>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d003      	beq.n	80086f6 <TIM_OC3_SetConfig+0x66>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	4a21      	ldr	r2, [pc, #132]	; (8008778 <TIM_OC3_SetConfig+0xe8>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d10d      	bne.n	8008712 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	021b      	lsls	r3, r3, #8
 8008704:	697a      	ldr	r2, [r7, #20]
 8008706:	4313      	orrs	r3, r2
 8008708:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008710:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a17      	ldr	r2, [pc, #92]	; (8008774 <TIM_OC3_SetConfig+0xe4>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d003      	beq.n	8008722 <TIM_OC3_SetConfig+0x92>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a16      	ldr	r2, [pc, #88]	; (8008778 <TIM_OC3_SetConfig+0xe8>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d113      	bne.n	800874a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008728:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008730:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	695b      	ldr	r3, [r3, #20]
 8008736:	011b      	lsls	r3, r3, #4
 8008738:	693a      	ldr	r2, [r7, #16]
 800873a:	4313      	orrs	r3, r2
 800873c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	699b      	ldr	r3, [r3, #24]
 8008742:	011b      	lsls	r3, r3, #4
 8008744:	693a      	ldr	r2, [r7, #16]
 8008746:	4313      	orrs	r3, r2
 8008748:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	693a      	ldr	r2, [r7, #16]
 800874e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	685a      	ldr	r2, [r3, #4]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	697a      	ldr	r2, [r7, #20]
 8008762:	621a      	str	r2, [r3, #32]
}
 8008764:	bf00      	nop
 8008766:	371c      	adds	r7, #28
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr
 8008770:	fffeff8f 	.word	0xfffeff8f
 8008774:	40010000 	.word	0x40010000
 8008778:	40010400 	.word	0x40010400

0800877c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800877c:	b480      	push	{r7}
 800877e:	b087      	sub	sp, #28
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6a1b      	ldr	r3, [r3, #32]
 800878a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6a1b      	ldr	r3, [r3, #32]
 8008796:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	69db      	ldr	r3, [r3, #28]
 80087a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	4b1e      	ldr	r3, [pc, #120]	; (8008820 <TIM_OC4_SetConfig+0xa4>)
 80087a8:	4013      	ands	r3, r2
 80087aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	021b      	lsls	r3, r3, #8
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	4313      	orrs	r3, r2
 80087be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	031b      	lsls	r3, r3, #12
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4a13      	ldr	r2, [pc, #76]	; (8008824 <TIM_OC4_SetConfig+0xa8>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d003      	beq.n	80087e4 <TIM_OC4_SetConfig+0x68>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4a12      	ldr	r2, [pc, #72]	; (8008828 <TIM_OC4_SetConfig+0xac>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d109      	bne.n	80087f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	695b      	ldr	r3, [r3, #20]
 80087f0:	019b      	lsls	r3, r3, #6
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	697a      	ldr	r2, [r7, #20]
 80087fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	685a      	ldr	r2, [r3, #4]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	693a      	ldr	r2, [r7, #16]
 8008810:	621a      	str	r2, [r3, #32]
}
 8008812:	bf00      	nop
 8008814:	371c      	adds	r7, #28
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	feff8fff 	.word	0xfeff8fff
 8008824:	40010000 	.word	0x40010000
 8008828:	40010400 	.word	0x40010400

0800882c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800882c:	b480      	push	{r7}
 800882e:	b087      	sub	sp, #28
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a1b      	ldr	r3, [r3, #32]
 800883a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a1b      	ldr	r3, [r3, #32]
 8008846:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	4b1b      	ldr	r3, [pc, #108]	; (80088c4 <TIM_OC5_SetConfig+0x98>)
 8008858:	4013      	ands	r3, r2
 800885a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	4313      	orrs	r3, r2
 8008864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800886c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	041b      	lsls	r3, r3, #16
 8008874:	693a      	ldr	r2, [r7, #16]
 8008876:	4313      	orrs	r3, r2
 8008878:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a12      	ldr	r2, [pc, #72]	; (80088c8 <TIM_OC5_SetConfig+0x9c>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d003      	beq.n	800888a <TIM_OC5_SetConfig+0x5e>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a11      	ldr	r2, [pc, #68]	; (80088cc <TIM_OC5_SetConfig+0xa0>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d109      	bne.n	800889e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008890:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	695b      	ldr	r3, [r3, #20]
 8008896:	021b      	lsls	r3, r3, #8
 8008898:	697a      	ldr	r2, [r7, #20]
 800889a:	4313      	orrs	r3, r2
 800889c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	697a      	ldr	r2, [r7, #20]
 80088a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	68fa      	ldr	r2, [r7, #12]
 80088a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	685a      	ldr	r2, [r3, #4]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	693a      	ldr	r2, [r7, #16]
 80088b6:	621a      	str	r2, [r3, #32]
}
 80088b8:	bf00      	nop
 80088ba:	371c      	adds	r7, #28
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr
 80088c4:	fffeff8f 	.word	0xfffeff8f
 80088c8:	40010000 	.word	0x40010000
 80088cc:	40010400 	.word	0x40010400

080088d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b087      	sub	sp, #28
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a1b      	ldr	r3, [r3, #32]
 80088de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a1b      	ldr	r3, [r3, #32]
 80088ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	4b1c      	ldr	r3, [pc, #112]	; (800896c <TIM_OC6_SetConfig+0x9c>)
 80088fc:	4013      	ands	r3, r2
 80088fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	021b      	lsls	r3, r3, #8
 8008906:	68fa      	ldr	r2, [r7, #12]
 8008908:	4313      	orrs	r3, r2
 800890a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008912:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	051b      	lsls	r3, r3, #20
 800891a:	693a      	ldr	r2, [r7, #16]
 800891c:	4313      	orrs	r3, r2
 800891e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a13      	ldr	r2, [pc, #76]	; (8008970 <TIM_OC6_SetConfig+0xa0>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d003      	beq.n	8008930 <TIM_OC6_SetConfig+0x60>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a12      	ldr	r2, [pc, #72]	; (8008974 <TIM_OC6_SetConfig+0xa4>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d109      	bne.n	8008944 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008936:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	695b      	ldr	r3, [r3, #20]
 800893c:	029b      	lsls	r3, r3, #10
 800893e:	697a      	ldr	r2, [r7, #20]
 8008940:	4313      	orrs	r3, r2
 8008942:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	685a      	ldr	r2, [r3, #4]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	693a      	ldr	r2, [r7, #16]
 800895c:	621a      	str	r2, [r3, #32]
}
 800895e:	bf00      	nop
 8008960:	371c      	adds	r7, #28
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop
 800896c:	feff8fff 	.word	0xfeff8fff
 8008970:	40010000 	.word	0x40010000
 8008974:	40010400 	.word	0x40010400

08008978 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b086      	sub	sp, #24
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008990:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	697a      	ldr	r2, [r7, #20]
 8008998:	4313      	orrs	r3, r2
 800899a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800899c:	697a      	ldr	r2, [r7, #20]
 800899e:	4b39      	ldr	r3, [pc, #228]	; (8008a84 <TIM_SlaveTimer_SetConfig+0x10c>)
 80089a0:	4013      	ands	r3, r2
 80089a2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	697a      	ldr	r2, [r7, #20]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	697a      	ldr	r2, [r7, #20]
 80089b4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	2b30      	cmp	r3, #48	; 0x30
 80089bc:	d05c      	beq.n	8008a78 <TIM_SlaveTimer_SetConfig+0x100>
 80089be:	2b30      	cmp	r3, #48	; 0x30
 80089c0:	d806      	bhi.n	80089d0 <TIM_SlaveTimer_SetConfig+0x58>
 80089c2:	2b10      	cmp	r3, #16
 80089c4:	d058      	beq.n	8008a78 <TIM_SlaveTimer_SetConfig+0x100>
 80089c6:	2b20      	cmp	r3, #32
 80089c8:	d056      	beq.n	8008a78 <TIM_SlaveTimer_SetConfig+0x100>
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d054      	beq.n	8008a78 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80089ce:	e054      	b.n	8008a7a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80089d0:	2b50      	cmp	r3, #80	; 0x50
 80089d2:	d03d      	beq.n	8008a50 <TIM_SlaveTimer_SetConfig+0xd8>
 80089d4:	2b50      	cmp	r3, #80	; 0x50
 80089d6:	d802      	bhi.n	80089de <TIM_SlaveTimer_SetConfig+0x66>
 80089d8:	2b40      	cmp	r3, #64	; 0x40
 80089da:	d010      	beq.n	80089fe <TIM_SlaveTimer_SetConfig+0x86>
      break;
 80089dc:	e04d      	b.n	8008a7a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80089de:	2b60      	cmp	r3, #96	; 0x60
 80089e0:	d040      	beq.n	8008a64 <TIM_SlaveTimer_SetConfig+0xec>
 80089e2:	2b70      	cmp	r3, #112	; 0x70
 80089e4:	d000      	beq.n	80089e8 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 80089e6:	e048      	b.n	8008a7a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6818      	ldr	r0, [r3, #0]
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	68d9      	ldr	r1, [r3, #12]
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	689a      	ldr	r2, [r3, #8]
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	691b      	ldr	r3, [r3, #16]
 80089f8:	f000 f9cf 	bl	8008d9a <TIM_ETR_SetConfig>
      break;
 80089fc:	e03d      	b.n	8008a7a <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2b05      	cmp	r3, #5
 8008a04:	d101      	bne.n	8008a0a <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	e038      	b.n	8008a7c <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	6a1b      	ldr	r3, [r3, #32]
 8008a10:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	6a1a      	ldr	r2, [r3, #32]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f022 0201 	bic.w	r2, r2, #1
 8008a20:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a30:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	011b      	lsls	r3, r3, #4
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68fa      	ldr	r2, [r7, #12]
 8008a44:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	693a      	ldr	r2, [r7, #16]
 8008a4c:	621a      	str	r2, [r3, #32]
      break;
 8008a4e:	e014      	b.n	8008a7a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6818      	ldr	r0, [r3, #0]
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	6899      	ldr	r1, [r3, #8]
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	f000 f887 	bl	8008b70 <TIM_TI1_ConfigInputStage>
      break;
 8008a62:	e00a      	b.n	8008a7a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6818      	ldr	r0, [r3, #0]
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	6899      	ldr	r1, [r3, #8]
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	691b      	ldr	r3, [r3, #16]
 8008a70:	461a      	mov	r2, r3
 8008a72:	f000 f8e9 	bl	8008c48 <TIM_TI2_ConfigInputStage>
      break;
 8008a76:	e000      	b.n	8008a7a <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8008a78:	bf00      	nop
  }
  return HAL_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3718      	adds	r7, #24
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	fffefff8 	.word	0xfffefff8

08008a88 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b087      	sub	sp, #28
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	607a      	str	r2, [r7, #4]
 8008a94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6a1b      	ldr	r3, [r3, #32]
 8008a9a:	f023 0201 	bic.w	r2, r3, #1
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	699b      	ldr	r3, [r3, #24]
 8008aa6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6a1b      	ldr	r3, [r3, #32]
 8008aac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	4a28      	ldr	r2, [pc, #160]	; (8008b54 <TIM_TI1_SetConfig+0xcc>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d01b      	beq.n	8008aee <TIM_TI1_SetConfig+0x66>
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008abc:	d017      	beq.n	8008aee <TIM_TI1_SetConfig+0x66>
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	4a25      	ldr	r2, [pc, #148]	; (8008b58 <TIM_TI1_SetConfig+0xd0>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d013      	beq.n	8008aee <TIM_TI1_SetConfig+0x66>
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	4a24      	ldr	r2, [pc, #144]	; (8008b5c <TIM_TI1_SetConfig+0xd4>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d00f      	beq.n	8008aee <TIM_TI1_SetConfig+0x66>
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	4a23      	ldr	r2, [pc, #140]	; (8008b60 <TIM_TI1_SetConfig+0xd8>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d00b      	beq.n	8008aee <TIM_TI1_SetConfig+0x66>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	4a22      	ldr	r2, [pc, #136]	; (8008b64 <TIM_TI1_SetConfig+0xdc>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d007      	beq.n	8008aee <TIM_TI1_SetConfig+0x66>
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	4a21      	ldr	r2, [pc, #132]	; (8008b68 <TIM_TI1_SetConfig+0xe0>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d003      	beq.n	8008aee <TIM_TI1_SetConfig+0x66>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	4a20      	ldr	r2, [pc, #128]	; (8008b6c <TIM_TI1_SetConfig+0xe4>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d101      	bne.n	8008af2 <TIM_TI1_SetConfig+0x6a>
 8008aee:	2301      	movs	r3, #1
 8008af0:	e000      	b.n	8008af4 <TIM_TI1_SetConfig+0x6c>
 8008af2:	2300      	movs	r3, #0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d008      	beq.n	8008b0a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	f023 0303 	bic.w	r3, r3, #3
 8008afe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008b00:	697a      	ldr	r2, [r7, #20]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	617b      	str	r3, [r7, #20]
 8008b08:	e003      	b.n	8008b12 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	f043 0301 	orr.w	r3, r3, #1
 8008b10:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	011b      	lsls	r3, r3, #4
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	697a      	ldr	r2, [r7, #20]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	f023 030a 	bic.w	r3, r3, #10
 8008b2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	f003 030a 	and.w	r3, r3, #10
 8008b34:	693a      	ldr	r2, [r7, #16]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	697a      	ldr	r2, [r7, #20]
 8008b3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	621a      	str	r2, [r3, #32]
}
 8008b46:	bf00      	nop
 8008b48:	371c      	adds	r7, #28
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop
 8008b54:	40010000 	.word	0x40010000
 8008b58:	40000400 	.word	0x40000400
 8008b5c:	40000800 	.word	0x40000800
 8008b60:	40000c00 	.word	0x40000c00
 8008b64:	40010400 	.word	0x40010400
 8008b68:	40014000 	.word	0x40014000
 8008b6c:	40001800 	.word	0x40001800

08008b70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b087      	sub	sp, #28
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6a1b      	ldr	r3, [r3, #32]
 8008b80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6a1b      	ldr	r3, [r3, #32]
 8008b86:	f023 0201 	bic.w	r2, r3, #1
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	699b      	ldr	r3, [r3, #24]
 8008b92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	011b      	lsls	r3, r3, #4
 8008ba0:	693a      	ldr	r2, [r7, #16]
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	f023 030a 	bic.w	r3, r3, #10
 8008bac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008bae:	697a      	ldr	r2, [r7, #20]
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	693a      	ldr	r2, [r7, #16]
 8008bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	697a      	ldr	r2, [r7, #20]
 8008bc0:	621a      	str	r2, [r3, #32]
}
 8008bc2:	bf00      	nop
 8008bc4:	371c      	adds	r7, #28
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008bce:	b480      	push	{r7}
 8008bd0:	b087      	sub	sp, #28
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	60f8      	str	r0, [r7, #12]
 8008bd6:	60b9      	str	r1, [r7, #8]
 8008bd8:	607a      	str	r2, [r7, #4]
 8008bda:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6a1b      	ldr	r3, [r3, #32]
 8008be0:	f023 0210 	bic.w	r2, r3, #16
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	699b      	ldr	r3, [r3, #24]
 8008bec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6a1b      	ldr	r3, [r3, #32]
 8008bf2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bfa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	021b      	lsls	r3, r3, #8
 8008c00:	697a      	ldr	r2, [r7, #20]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	031b      	lsls	r3, r3, #12
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	697a      	ldr	r2, [r7, #20]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c20:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	011b      	lsls	r3, r3, #4
 8008c26:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008c2a:	693a      	ldr	r2, [r7, #16]
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	697a      	ldr	r2, [r7, #20]
 8008c34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	693a      	ldr	r2, [r7, #16]
 8008c3a:	621a      	str	r2, [r3, #32]
}
 8008c3c:	bf00      	nop
 8008c3e:	371c      	adds	r7, #28
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b087      	sub	sp, #28
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6a1b      	ldr	r3, [r3, #32]
 8008c58:	f023 0210 	bic.w	r2, r3, #16
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6a1b      	ldr	r3, [r3, #32]
 8008c6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c72:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	031b      	lsls	r3, r3, #12
 8008c78:	697a      	ldr	r2, [r7, #20]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	011b      	lsls	r3, r3, #4
 8008c8a:	693a      	ldr	r2, [r7, #16]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	697a      	ldr	r2, [r7, #20]
 8008c94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	693a      	ldr	r2, [r7, #16]
 8008c9a:	621a      	str	r2, [r3, #32]
}
 8008c9c:	bf00      	nop
 8008c9e:	371c      	adds	r7, #28
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b087      	sub	sp, #28
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]
 8008cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6a1b      	ldr	r3, [r3, #32]
 8008cba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	69db      	ldr	r3, [r3, #28]
 8008cc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6a1b      	ldr	r3, [r3, #32]
 8008ccc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	f023 0303 	bic.w	r3, r3, #3
 8008cd4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008cd6:	697a      	ldr	r2, [r7, #20]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ce4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	011b      	lsls	r3, r3, #4
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	697a      	ldr	r2, [r7, #20]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008cf8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	021b      	lsls	r3, r3, #8
 8008cfe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008d02:	693a      	ldr	r2, [r7, #16]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	697a      	ldr	r2, [r7, #20]
 8008d0c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	693a      	ldr	r2, [r7, #16]
 8008d12:	621a      	str	r2, [r3, #32]
}
 8008d14:	bf00      	nop
 8008d16:	371c      	adds	r7, #28
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b087      	sub	sp, #28
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	607a      	str	r2, [r7, #4]
 8008d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6a1b      	ldr	r3, [r3, #32]
 8008d32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	69db      	ldr	r3, [r3, #28]
 8008d3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6a1b      	ldr	r3, [r3, #32]
 8008d44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d4c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	021b      	lsls	r3, r3, #8
 8008d52:	697a      	ldr	r2, [r7, #20]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d5e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	031b      	lsls	r3, r3, #12
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	697a      	ldr	r2, [r7, #20]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008d72:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	031b      	lsls	r3, r3, #12
 8008d78:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008d7c:	693a      	ldr	r2, [r7, #16]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	697a      	ldr	r2, [r7, #20]
 8008d86:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	693a      	ldr	r2, [r7, #16]
 8008d8c:	621a      	str	r2, [r3, #32]
}
 8008d8e:	bf00      	nop
 8008d90:	371c      	adds	r7, #28
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr

08008d9a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d9a:	b480      	push	{r7}
 8008d9c:	b087      	sub	sp, #28
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	60f8      	str	r0, [r7, #12]
 8008da2:	60b9      	str	r1, [r7, #8]
 8008da4:	607a      	str	r2, [r7, #4]
 8008da6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008db4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	021a      	lsls	r2, r3, #8
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	431a      	orrs	r2, r3
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	697a      	ldr	r2, [r7, #20]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	697a      	ldr	r2, [r7, #20]
 8008dcc:	609a      	str	r2, [r3, #8]
}
 8008dce:	bf00      	nop
 8008dd0:	371c      	adds	r7, #28
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr

08008dda <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008dda:	b480      	push	{r7}
 8008ddc:	b087      	sub	sp, #28
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	60f8      	str	r0, [r7, #12]
 8008de2:	60b9      	str	r1, [r7, #8]
 8008de4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	f003 031f 	and.w	r3, r3, #31
 8008dec:	2201      	movs	r2, #1
 8008dee:	fa02 f303 	lsl.w	r3, r2, r3
 8008df2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6a1a      	ldr	r2, [r3, #32]
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	43db      	mvns	r3, r3
 8008dfc:	401a      	ands	r2, r3
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	6a1a      	ldr	r2, [r3, #32]
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	f003 031f 	and.w	r3, r3, #31
 8008e0c:	6879      	ldr	r1, [r7, #4]
 8008e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8008e12:	431a      	orrs	r2, r3
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	621a      	str	r2, [r3, #32]
}
 8008e18:	bf00      	nop
 8008e1a:	371c      	adds	r7, #28
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d101      	bne.n	8008e3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e38:	2302      	movs	r3, #2
 8008e3a:	e06d      	b.n	8008f18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2202      	movs	r2, #2
 8008e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a30      	ldr	r2, [pc, #192]	; (8008f24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d004      	beq.n	8008e70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a2f      	ldr	r2, [pc, #188]	; (8008f28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d108      	bne.n	8008e82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008e76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	68fa      	ldr	r2, [r7, #12]
 8008e90:	4313      	orrs	r3, r2
 8008e92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a20      	ldr	r2, [pc, #128]	; (8008f24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d022      	beq.n	8008eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eae:	d01d      	beq.n	8008eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a1d      	ldr	r2, [pc, #116]	; (8008f2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d018      	beq.n	8008eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a1c      	ldr	r2, [pc, #112]	; (8008f30 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d013      	beq.n	8008eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a1a      	ldr	r2, [pc, #104]	; (8008f34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d00e      	beq.n	8008eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a15      	ldr	r2, [pc, #84]	; (8008f28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d009      	beq.n	8008eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a16      	ldr	r2, [pc, #88]	; (8008f38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d004      	beq.n	8008eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a15      	ldr	r2, [pc, #84]	; (8008f3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d10c      	bne.n	8008f06 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ef2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	68ba      	ldr	r2, [r7, #8]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f16:	2300      	movs	r3, #0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3714      	adds	r7, #20
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr
 8008f24:	40010000 	.word	0x40010000
 8008f28:	40010400 	.word	0x40010400
 8008f2c:	40000400 	.word	0x40000400
 8008f30:	40000800 	.word	0x40000800
 8008f34:	40000c00 	.word	0x40000c00
 8008f38:	40014000 	.word	0x40014000
 8008f3c:	40001800 	.word	0x40001800

08008f40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f48:	bf00      	nop
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f5c:	bf00      	nop
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008f70:	bf00      	nop
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d101      	bne.n	8008f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e040      	b.n	8009010 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d106      	bne.n	8008fa4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7fa fbb2 	bl	8003708 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2224      	movs	r2, #36	; 0x24
 8008fa8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f022 0201 	bic.w	r2, r2, #1
 8008fb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 fa70 	bl	80094a0 <UART_SetConfig>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d101      	bne.n	8008fca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e022      	b.n	8009010 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d002      	beq.n	8008fd8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 fd0e 	bl	80099f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	685a      	ldr	r2, [r3, #4]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008fe6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	689a      	ldr	r2, [r3, #8]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ff6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f042 0201 	orr.w	r2, r2, #1
 8009006:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 fd95 	bl	8009b38 <UART_CheckIdleState>
 800900e:	4603      	mov	r3, r0
}
 8009010:	4618      	mov	r0, r3
 8009012:	3708      	adds	r7, #8
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	4613      	mov	r3, r2
 8009024:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800902a:	2b20      	cmp	r3, #32
 800902c:	d144      	bne.n	80090b8 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d002      	beq.n	800903a <HAL_UART_Transmit_IT+0x22>
 8009034:	88fb      	ldrh	r3, [r7, #6]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d101      	bne.n	800903e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800903a:	2301      	movs	r3, #1
 800903c:	e03d      	b.n	80090ba <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009044:	2b01      	cmp	r3, #1
 8009046:	d101      	bne.n	800904c <HAL_UART_Transmit_IT+0x34>
 8009048:	2302      	movs	r3, #2
 800904a:	e036      	b.n	80090ba <HAL_UART_Transmit_IT+0xa2>
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2201      	movs	r2, #1
 8009050:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	68ba      	ldr	r2, [r7, #8]
 8009058:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	88fa      	ldrh	r2, [r7, #6]
 800905e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	88fa      	ldrh	r2, [r7, #6]
 8009066:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2200      	movs	r2, #0
 800906e:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2200      	movs	r2, #0
 8009074:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2221      	movs	r2, #33	; 0x21
 800907a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009084:	d107      	bne.n	8009096 <HAL_UART_Transmit_IT+0x7e>
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	691b      	ldr	r3, [r3, #16]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d103      	bne.n	8009096 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	4a0d      	ldr	r2, [pc, #52]	; (80090c8 <HAL_UART_Transmit_IT+0xb0>)
 8009092:	665a      	str	r2, [r3, #100]	; 0x64
 8009094:	e002      	b.n	800909c <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	4a0c      	ldr	r2, [pc, #48]	; (80090cc <HAL_UART_Transmit_IT+0xb4>)
 800909a:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2200      	movs	r2, #0
 80090a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80090b2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80090b4:	2300      	movs	r3, #0
 80090b6:	e000      	b.n	80090ba <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 80090b8:	2302      	movs	r3, #2
  }
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3714      	adds	r7, #20
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr
 80090c6:	bf00      	nop
 80090c8:	08009d6b 	.word	0x08009d6b
 80090cc:	08009cf9 	.word	0x08009cf9

080090d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b085      	sub	sp, #20
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	4613      	mov	r3, r2
 80090dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090e2:	2b20      	cmp	r3, #32
 80090e4:	f040 808a 	bne.w	80091fc <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d002      	beq.n	80090f4 <HAL_UART_Receive_IT+0x24>
 80090ee:	88fb      	ldrh	r3, [r7, #6]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d101      	bne.n	80090f8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	e082      	b.n	80091fe <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d101      	bne.n	8009106 <HAL_UART_Receive_IT+0x36>
 8009102:	2302      	movs	r3, #2
 8009104:	e07b      	b.n	80091fe <HAL_UART_Receive_IT+0x12e>
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2201      	movs	r2, #1
 800910a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	68ba      	ldr	r2, [r7, #8]
 8009112:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	88fa      	ldrh	r2, [r7, #6]
 8009118:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	88fa      	ldrh	r2, [r7, #6]
 8009120:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009132:	d10e      	bne.n	8009152 <HAL_UART_Receive_IT+0x82>
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d105      	bne.n	8009148 <HAL_UART_Receive_IT+0x78>
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009142:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009146:	e02d      	b.n	80091a4 <HAL_UART_Receive_IT+0xd4>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	22ff      	movs	r2, #255	; 0xff
 800914c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009150:	e028      	b.n	80091a4 <HAL_UART_Receive_IT+0xd4>
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d10d      	bne.n	8009176 <HAL_UART_Receive_IT+0xa6>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d104      	bne.n	800916c <HAL_UART_Receive_IT+0x9c>
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	22ff      	movs	r2, #255	; 0xff
 8009166:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800916a:	e01b      	b.n	80091a4 <HAL_UART_Receive_IT+0xd4>
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	227f      	movs	r2, #127	; 0x7f
 8009170:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009174:	e016      	b.n	80091a4 <HAL_UART_Receive_IT+0xd4>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800917e:	d10d      	bne.n	800919c <HAL_UART_Receive_IT+0xcc>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d104      	bne.n	8009192 <HAL_UART_Receive_IT+0xc2>
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	227f      	movs	r2, #127	; 0x7f
 800918c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009190:	e008      	b.n	80091a4 <HAL_UART_Receive_IT+0xd4>
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	223f      	movs	r2, #63	; 0x3f
 8009196:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800919a:	e003      	b.n	80091a4 <HAL_UART_Receive_IT+0xd4>
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2200      	movs	r2, #0
 80091a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2200      	movs	r2, #0
 80091a8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2222      	movs	r2, #34	; 0x22
 80091ae:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	689a      	ldr	r2, [r3, #8]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f042 0201 	orr.w	r2, r2, #1
 80091be:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091c8:	d107      	bne.n	80091da <HAL_UART_Receive_IT+0x10a>
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	691b      	ldr	r3, [r3, #16]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d103      	bne.n	80091da <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	4a0d      	ldr	r2, [pc, #52]	; (800920c <HAL_UART_Receive_IT+0x13c>)
 80091d6:	661a      	str	r2, [r3, #96]	; 0x60
 80091d8:	e002      	b.n	80091e0 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	4a0c      	ldr	r2, [pc, #48]	; (8009210 <HAL_UART_Receive_IT+0x140>)
 80091de:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80091f6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80091f8:	2300      	movs	r3, #0
 80091fa:	e000      	b.n	80091fe <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80091fc:	2302      	movs	r3, #2
  }
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3714      	adds	r7, #20
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	08009ebf 	.word	0x08009ebf
 8009210:	08009e19 	.word	0x08009e19

08009214 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b088      	sub	sp, #32
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	69db      	ldr	r3, [r3, #28]
 8009222:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009234:	69fa      	ldr	r2, [r7, #28]
 8009236:	f640 030f 	movw	r3, #2063	; 0x80f
 800923a:	4013      	ands	r3, r2
 800923c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d113      	bne.n	800926c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	f003 0320 	and.w	r3, r3, #32
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00e      	beq.n	800926c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	f003 0320 	and.w	r3, r3, #32
 8009254:	2b00      	cmp	r3, #0
 8009256:	d009      	beq.n	800926c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800925c:	2b00      	cmp	r3, #0
 800925e:	f000 8100 	beq.w	8009462 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	4798      	blx	r3
      }
      return;
 800926a:	e0fa      	b.n	8009462 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	2b00      	cmp	r3, #0
 8009270:	f000 80d5 	beq.w	800941e <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	f003 0301 	and.w	r3, r3, #1
 800927a:	2b00      	cmp	r3, #0
 800927c:	d105      	bne.n	800928a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800927e:	69bb      	ldr	r3, [r7, #24]
 8009280:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009284:	2b00      	cmp	r3, #0
 8009286:	f000 80ca 	beq.w	800941e <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	f003 0301 	and.w	r3, r3, #1
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00e      	beq.n	80092b2 <HAL_UART_IRQHandler+0x9e>
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800929a:	2b00      	cmp	r3, #0
 800929c:	d009      	beq.n	80092b2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2201      	movs	r2, #1
 80092a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092aa:	f043 0201 	orr.w	r2, r3, #1
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092b2:	69fb      	ldr	r3, [r7, #28]
 80092b4:	f003 0302 	and.w	r3, r3, #2
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00e      	beq.n	80092da <HAL_UART_IRQHandler+0xc6>
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	f003 0301 	and.w	r3, r3, #1
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d009      	beq.n	80092da <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2202      	movs	r2, #2
 80092cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092d2:	f043 0204 	orr.w	r2, r3, #4
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	f003 0304 	and.w	r3, r3, #4
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d00e      	beq.n	8009302 <HAL_UART_IRQHandler+0xee>
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	f003 0301 	and.w	r3, r3, #1
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d009      	beq.n	8009302 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2204      	movs	r2, #4
 80092f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092fa:	f043 0202 	orr.w	r2, r3, #2
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009302:	69fb      	ldr	r3, [r7, #28]
 8009304:	f003 0308 	and.w	r3, r3, #8
 8009308:	2b00      	cmp	r3, #0
 800930a:	d013      	beq.n	8009334 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	f003 0320 	and.w	r3, r3, #32
 8009312:	2b00      	cmp	r3, #0
 8009314:	d104      	bne.n	8009320 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800931c:	2b00      	cmp	r3, #0
 800931e:	d009      	beq.n	8009334 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2208      	movs	r2, #8
 8009326:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800932c:	f043 0208 	orr.w	r2, r3, #8
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00f      	beq.n	800935e <HAL_UART_IRQHandler+0x14a>
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009344:	2b00      	cmp	r3, #0
 8009346:	d00a      	beq.n	800935e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009350:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009356:	f043 0220 	orr.w	r2, r3, #32
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009362:	2b00      	cmp	r3, #0
 8009364:	d07f      	beq.n	8009466 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	f003 0320 	and.w	r3, r3, #32
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00c      	beq.n	800938a <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009370:	69bb      	ldr	r3, [r7, #24]
 8009372:	f003 0320 	and.w	r3, r3, #32
 8009376:	2b00      	cmp	r3, #0
 8009378:	d007      	beq.n	800938a <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800937e:	2b00      	cmp	r3, #0
 8009380:	d003      	beq.n	800938a <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800938e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800939a:	2b40      	cmp	r3, #64	; 0x40
 800939c:	d004      	beq.n	80093a8 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d031      	beq.n	800940c <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 fc6f 	bl	8009c8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093b8:	2b40      	cmp	r3, #64	; 0x40
 80093ba:	d123      	bne.n	8009404 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	689a      	ldr	r2, [r3, #8]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093ca:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d013      	beq.n	80093fc <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093d8:	4a26      	ldr	r2, [pc, #152]	; (8009474 <HAL_UART_IRQHandler+0x260>)
 80093da:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7fb f80b 	bl	80043fc <HAL_DMA_Abort_IT>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d016      	beq.n	800941a <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80093f6:	4610      	mov	r0, r2
 80093f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093fa:	e00e      	b.n	800941a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 f845 	bl	800948c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009402:	e00a      	b.n	800941a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 f841 	bl	800948c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800940a:	e006      	b.n	800941a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 f83d 	bl	800948c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8009418:	e025      	b.n	8009466 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800941a:	bf00      	nop
    return;
 800941c:	e023      	b.n	8009466 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009424:	2b00      	cmp	r3, #0
 8009426:	d00d      	beq.n	8009444 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009428:	69bb      	ldr	r3, [r7, #24]
 800942a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800942e:	2b00      	cmp	r3, #0
 8009430:	d008      	beq.n	8009444 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009436:	2b00      	cmp	r3, #0
 8009438:	d017      	beq.n	800946a <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	4798      	blx	r3
    }
    return;
 8009442:	e012      	b.n	800946a <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00e      	beq.n	800946c <HAL_UART_IRQHandler+0x258>
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009454:	2b00      	cmp	r3, #0
 8009456:	d009      	beq.n	800946c <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 fcc4 	bl	8009de6 <UART_EndTransmit_IT>
    return;
 800945e:	bf00      	nop
 8009460:	e004      	b.n	800946c <HAL_UART_IRQHandler+0x258>
      return;
 8009462:	bf00      	nop
 8009464:	e002      	b.n	800946c <HAL_UART_IRQHandler+0x258>
    return;
 8009466:	bf00      	nop
 8009468:	e000      	b.n	800946c <HAL_UART_IRQHandler+0x258>
    return;
 800946a:	bf00      	nop
  }

}
 800946c:	3720      	adds	r7, #32
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	08009ccd 	.word	0x08009ccd

08009478 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009480:	bf00      	nop
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009494:	bf00      	nop
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b088      	sub	sp, #32
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80094a8:	2300      	movs	r3, #0
 80094aa:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80094ac:	2300      	movs	r3, #0
 80094ae:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	689a      	ldr	r2, [r3, #8]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	691b      	ldr	r3, [r3, #16]
 80094b8:	431a      	orrs	r2, r3
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	695b      	ldr	r3, [r3, #20]
 80094be:	431a      	orrs	r2, r3
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	69db      	ldr	r3, [r3, #28]
 80094c4:	4313      	orrs	r3, r2
 80094c6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	4bb1      	ldr	r3, [pc, #708]	; (8009794 <UART_SetConfig+0x2f4>)
 80094d0:	4013      	ands	r3, r2
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	6812      	ldr	r2, [r2, #0]
 80094d6:	6939      	ldr	r1, [r7, #16]
 80094d8:	430b      	orrs	r3, r1
 80094da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	68da      	ldr	r2, [r3, #12]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	430a      	orrs	r2, r1
 80094f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	699b      	ldr	r3, [r3, #24]
 80094f6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a1b      	ldr	r3, [r3, #32]
 80094fc:	693a      	ldr	r2, [r7, #16]
 80094fe:	4313      	orrs	r3, r2
 8009500:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	693a      	ldr	r2, [r7, #16]
 8009512:	430a      	orrs	r2, r1
 8009514:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a9f      	ldr	r2, [pc, #636]	; (8009798 <UART_SetConfig+0x2f8>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d121      	bne.n	8009564 <UART_SetConfig+0xc4>
 8009520:	4b9e      	ldr	r3, [pc, #632]	; (800979c <UART_SetConfig+0x2fc>)
 8009522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009526:	f003 0303 	and.w	r3, r3, #3
 800952a:	2b03      	cmp	r3, #3
 800952c:	d816      	bhi.n	800955c <UART_SetConfig+0xbc>
 800952e:	a201      	add	r2, pc, #4	; (adr r2, 8009534 <UART_SetConfig+0x94>)
 8009530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009534:	08009545 	.word	0x08009545
 8009538:	08009551 	.word	0x08009551
 800953c:	0800954b 	.word	0x0800954b
 8009540:	08009557 	.word	0x08009557
 8009544:	2301      	movs	r3, #1
 8009546:	77fb      	strb	r3, [r7, #31]
 8009548:	e151      	b.n	80097ee <UART_SetConfig+0x34e>
 800954a:	2302      	movs	r3, #2
 800954c:	77fb      	strb	r3, [r7, #31]
 800954e:	e14e      	b.n	80097ee <UART_SetConfig+0x34e>
 8009550:	2304      	movs	r3, #4
 8009552:	77fb      	strb	r3, [r7, #31]
 8009554:	e14b      	b.n	80097ee <UART_SetConfig+0x34e>
 8009556:	2308      	movs	r3, #8
 8009558:	77fb      	strb	r3, [r7, #31]
 800955a:	e148      	b.n	80097ee <UART_SetConfig+0x34e>
 800955c:	2310      	movs	r3, #16
 800955e:	77fb      	strb	r3, [r7, #31]
 8009560:	bf00      	nop
 8009562:	e144      	b.n	80097ee <UART_SetConfig+0x34e>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a8d      	ldr	r2, [pc, #564]	; (80097a0 <UART_SetConfig+0x300>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d134      	bne.n	80095d8 <UART_SetConfig+0x138>
 800956e:	4b8b      	ldr	r3, [pc, #556]	; (800979c <UART_SetConfig+0x2fc>)
 8009570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009574:	f003 030c 	and.w	r3, r3, #12
 8009578:	2b0c      	cmp	r3, #12
 800957a:	d829      	bhi.n	80095d0 <UART_SetConfig+0x130>
 800957c:	a201      	add	r2, pc, #4	; (adr r2, 8009584 <UART_SetConfig+0xe4>)
 800957e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009582:	bf00      	nop
 8009584:	080095b9 	.word	0x080095b9
 8009588:	080095d1 	.word	0x080095d1
 800958c:	080095d1 	.word	0x080095d1
 8009590:	080095d1 	.word	0x080095d1
 8009594:	080095c5 	.word	0x080095c5
 8009598:	080095d1 	.word	0x080095d1
 800959c:	080095d1 	.word	0x080095d1
 80095a0:	080095d1 	.word	0x080095d1
 80095a4:	080095bf 	.word	0x080095bf
 80095a8:	080095d1 	.word	0x080095d1
 80095ac:	080095d1 	.word	0x080095d1
 80095b0:	080095d1 	.word	0x080095d1
 80095b4:	080095cb 	.word	0x080095cb
 80095b8:	2300      	movs	r3, #0
 80095ba:	77fb      	strb	r3, [r7, #31]
 80095bc:	e117      	b.n	80097ee <UART_SetConfig+0x34e>
 80095be:	2302      	movs	r3, #2
 80095c0:	77fb      	strb	r3, [r7, #31]
 80095c2:	e114      	b.n	80097ee <UART_SetConfig+0x34e>
 80095c4:	2304      	movs	r3, #4
 80095c6:	77fb      	strb	r3, [r7, #31]
 80095c8:	e111      	b.n	80097ee <UART_SetConfig+0x34e>
 80095ca:	2308      	movs	r3, #8
 80095cc:	77fb      	strb	r3, [r7, #31]
 80095ce:	e10e      	b.n	80097ee <UART_SetConfig+0x34e>
 80095d0:	2310      	movs	r3, #16
 80095d2:	77fb      	strb	r3, [r7, #31]
 80095d4:	bf00      	nop
 80095d6:	e10a      	b.n	80097ee <UART_SetConfig+0x34e>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a71      	ldr	r2, [pc, #452]	; (80097a4 <UART_SetConfig+0x304>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d120      	bne.n	8009624 <UART_SetConfig+0x184>
 80095e2:	4b6e      	ldr	r3, [pc, #440]	; (800979c <UART_SetConfig+0x2fc>)
 80095e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80095ec:	2b10      	cmp	r3, #16
 80095ee:	d00f      	beq.n	8009610 <UART_SetConfig+0x170>
 80095f0:	2b10      	cmp	r3, #16
 80095f2:	d802      	bhi.n	80095fa <UART_SetConfig+0x15a>
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d005      	beq.n	8009604 <UART_SetConfig+0x164>
 80095f8:	e010      	b.n	800961c <UART_SetConfig+0x17c>
 80095fa:	2b20      	cmp	r3, #32
 80095fc:	d005      	beq.n	800960a <UART_SetConfig+0x16a>
 80095fe:	2b30      	cmp	r3, #48	; 0x30
 8009600:	d009      	beq.n	8009616 <UART_SetConfig+0x176>
 8009602:	e00b      	b.n	800961c <UART_SetConfig+0x17c>
 8009604:	2300      	movs	r3, #0
 8009606:	77fb      	strb	r3, [r7, #31]
 8009608:	e0f1      	b.n	80097ee <UART_SetConfig+0x34e>
 800960a:	2302      	movs	r3, #2
 800960c:	77fb      	strb	r3, [r7, #31]
 800960e:	e0ee      	b.n	80097ee <UART_SetConfig+0x34e>
 8009610:	2304      	movs	r3, #4
 8009612:	77fb      	strb	r3, [r7, #31]
 8009614:	e0eb      	b.n	80097ee <UART_SetConfig+0x34e>
 8009616:	2308      	movs	r3, #8
 8009618:	77fb      	strb	r3, [r7, #31]
 800961a:	e0e8      	b.n	80097ee <UART_SetConfig+0x34e>
 800961c:	2310      	movs	r3, #16
 800961e:	77fb      	strb	r3, [r7, #31]
 8009620:	bf00      	nop
 8009622:	e0e4      	b.n	80097ee <UART_SetConfig+0x34e>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a5f      	ldr	r2, [pc, #380]	; (80097a8 <UART_SetConfig+0x308>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d120      	bne.n	8009670 <UART_SetConfig+0x1d0>
 800962e:	4b5b      	ldr	r3, [pc, #364]	; (800979c <UART_SetConfig+0x2fc>)
 8009630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009634:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009638:	2b40      	cmp	r3, #64	; 0x40
 800963a:	d00f      	beq.n	800965c <UART_SetConfig+0x1bc>
 800963c:	2b40      	cmp	r3, #64	; 0x40
 800963e:	d802      	bhi.n	8009646 <UART_SetConfig+0x1a6>
 8009640:	2b00      	cmp	r3, #0
 8009642:	d005      	beq.n	8009650 <UART_SetConfig+0x1b0>
 8009644:	e010      	b.n	8009668 <UART_SetConfig+0x1c8>
 8009646:	2b80      	cmp	r3, #128	; 0x80
 8009648:	d005      	beq.n	8009656 <UART_SetConfig+0x1b6>
 800964a:	2bc0      	cmp	r3, #192	; 0xc0
 800964c:	d009      	beq.n	8009662 <UART_SetConfig+0x1c2>
 800964e:	e00b      	b.n	8009668 <UART_SetConfig+0x1c8>
 8009650:	2300      	movs	r3, #0
 8009652:	77fb      	strb	r3, [r7, #31]
 8009654:	e0cb      	b.n	80097ee <UART_SetConfig+0x34e>
 8009656:	2302      	movs	r3, #2
 8009658:	77fb      	strb	r3, [r7, #31]
 800965a:	e0c8      	b.n	80097ee <UART_SetConfig+0x34e>
 800965c:	2304      	movs	r3, #4
 800965e:	77fb      	strb	r3, [r7, #31]
 8009660:	e0c5      	b.n	80097ee <UART_SetConfig+0x34e>
 8009662:	2308      	movs	r3, #8
 8009664:	77fb      	strb	r3, [r7, #31]
 8009666:	e0c2      	b.n	80097ee <UART_SetConfig+0x34e>
 8009668:	2310      	movs	r3, #16
 800966a:	77fb      	strb	r3, [r7, #31]
 800966c:	bf00      	nop
 800966e:	e0be      	b.n	80097ee <UART_SetConfig+0x34e>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a4d      	ldr	r2, [pc, #308]	; (80097ac <UART_SetConfig+0x30c>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d124      	bne.n	80096c4 <UART_SetConfig+0x224>
 800967a:	4b48      	ldr	r3, [pc, #288]	; (800979c <UART_SetConfig+0x2fc>)
 800967c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009680:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009688:	d012      	beq.n	80096b0 <UART_SetConfig+0x210>
 800968a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800968e:	d802      	bhi.n	8009696 <UART_SetConfig+0x1f6>
 8009690:	2b00      	cmp	r3, #0
 8009692:	d007      	beq.n	80096a4 <UART_SetConfig+0x204>
 8009694:	e012      	b.n	80096bc <UART_SetConfig+0x21c>
 8009696:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800969a:	d006      	beq.n	80096aa <UART_SetConfig+0x20a>
 800969c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096a0:	d009      	beq.n	80096b6 <UART_SetConfig+0x216>
 80096a2:	e00b      	b.n	80096bc <UART_SetConfig+0x21c>
 80096a4:	2300      	movs	r3, #0
 80096a6:	77fb      	strb	r3, [r7, #31]
 80096a8:	e0a1      	b.n	80097ee <UART_SetConfig+0x34e>
 80096aa:	2302      	movs	r3, #2
 80096ac:	77fb      	strb	r3, [r7, #31]
 80096ae:	e09e      	b.n	80097ee <UART_SetConfig+0x34e>
 80096b0:	2304      	movs	r3, #4
 80096b2:	77fb      	strb	r3, [r7, #31]
 80096b4:	e09b      	b.n	80097ee <UART_SetConfig+0x34e>
 80096b6:	2308      	movs	r3, #8
 80096b8:	77fb      	strb	r3, [r7, #31]
 80096ba:	e098      	b.n	80097ee <UART_SetConfig+0x34e>
 80096bc:	2310      	movs	r3, #16
 80096be:	77fb      	strb	r3, [r7, #31]
 80096c0:	bf00      	nop
 80096c2:	e094      	b.n	80097ee <UART_SetConfig+0x34e>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a39      	ldr	r2, [pc, #228]	; (80097b0 <UART_SetConfig+0x310>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d124      	bne.n	8009718 <UART_SetConfig+0x278>
 80096ce:	4b33      	ldr	r3, [pc, #204]	; (800979c <UART_SetConfig+0x2fc>)
 80096d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80096d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096dc:	d012      	beq.n	8009704 <UART_SetConfig+0x264>
 80096de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096e2:	d802      	bhi.n	80096ea <UART_SetConfig+0x24a>
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d007      	beq.n	80096f8 <UART_SetConfig+0x258>
 80096e8:	e012      	b.n	8009710 <UART_SetConfig+0x270>
 80096ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096ee:	d006      	beq.n	80096fe <UART_SetConfig+0x25e>
 80096f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80096f4:	d009      	beq.n	800970a <UART_SetConfig+0x26a>
 80096f6:	e00b      	b.n	8009710 <UART_SetConfig+0x270>
 80096f8:	2301      	movs	r3, #1
 80096fa:	77fb      	strb	r3, [r7, #31]
 80096fc:	e077      	b.n	80097ee <UART_SetConfig+0x34e>
 80096fe:	2302      	movs	r3, #2
 8009700:	77fb      	strb	r3, [r7, #31]
 8009702:	e074      	b.n	80097ee <UART_SetConfig+0x34e>
 8009704:	2304      	movs	r3, #4
 8009706:	77fb      	strb	r3, [r7, #31]
 8009708:	e071      	b.n	80097ee <UART_SetConfig+0x34e>
 800970a:	2308      	movs	r3, #8
 800970c:	77fb      	strb	r3, [r7, #31]
 800970e:	e06e      	b.n	80097ee <UART_SetConfig+0x34e>
 8009710:	2310      	movs	r3, #16
 8009712:	77fb      	strb	r3, [r7, #31]
 8009714:	bf00      	nop
 8009716:	e06a      	b.n	80097ee <UART_SetConfig+0x34e>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a25      	ldr	r2, [pc, #148]	; (80097b4 <UART_SetConfig+0x314>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d124      	bne.n	800976c <UART_SetConfig+0x2cc>
 8009722:	4b1e      	ldr	r3, [pc, #120]	; (800979c <UART_SetConfig+0x2fc>)
 8009724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009728:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800972c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009730:	d012      	beq.n	8009758 <UART_SetConfig+0x2b8>
 8009732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009736:	d802      	bhi.n	800973e <UART_SetConfig+0x29e>
 8009738:	2b00      	cmp	r3, #0
 800973a:	d007      	beq.n	800974c <UART_SetConfig+0x2ac>
 800973c:	e012      	b.n	8009764 <UART_SetConfig+0x2c4>
 800973e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009742:	d006      	beq.n	8009752 <UART_SetConfig+0x2b2>
 8009744:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009748:	d009      	beq.n	800975e <UART_SetConfig+0x2be>
 800974a:	e00b      	b.n	8009764 <UART_SetConfig+0x2c4>
 800974c:	2300      	movs	r3, #0
 800974e:	77fb      	strb	r3, [r7, #31]
 8009750:	e04d      	b.n	80097ee <UART_SetConfig+0x34e>
 8009752:	2302      	movs	r3, #2
 8009754:	77fb      	strb	r3, [r7, #31]
 8009756:	e04a      	b.n	80097ee <UART_SetConfig+0x34e>
 8009758:	2304      	movs	r3, #4
 800975a:	77fb      	strb	r3, [r7, #31]
 800975c:	e047      	b.n	80097ee <UART_SetConfig+0x34e>
 800975e:	2308      	movs	r3, #8
 8009760:	77fb      	strb	r3, [r7, #31]
 8009762:	e044      	b.n	80097ee <UART_SetConfig+0x34e>
 8009764:	2310      	movs	r3, #16
 8009766:	77fb      	strb	r3, [r7, #31]
 8009768:	bf00      	nop
 800976a:	e040      	b.n	80097ee <UART_SetConfig+0x34e>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a11      	ldr	r2, [pc, #68]	; (80097b8 <UART_SetConfig+0x318>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d139      	bne.n	80097ea <UART_SetConfig+0x34a>
 8009776:	4b09      	ldr	r3, [pc, #36]	; (800979c <UART_SetConfig+0x2fc>)
 8009778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800977c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009780:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009784:	d027      	beq.n	80097d6 <UART_SetConfig+0x336>
 8009786:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800978a:	d817      	bhi.n	80097bc <UART_SetConfig+0x31c>
 800978c:	2b00      	cmp	r3, #0
 800978e:	d01c      	beq.n	80097ca <UART_SetConfig+0x32a>
 8009790:	e027      	b.n	80097e2 <UART_SetConfig+0x342>
 8009792:	bf00      	nop
 8009794:	efff69f3 	.word	0xefff69f3
 8009798:	40011000 	.word	0x40011000
 800979c:	40023800 	.word	0x40023800
 80097a0:	40004400 	.word	0x40004400
 80097a4:	40004800 	.word	0x40004800
 80097a8:	40004c00 	.word	0x40004c00
 80097ac:	40005000 	.word	0x40005000
 80097b0:	40011400 	.word	0x40011400
 80097b4:	40007800 	.word	0x40007800
 80097b8:	40007c00 	.word	0x40007c00
 80097bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097c0:	d006      	beq.n	80097d0 <UART_SetConfig+0x330>
 80097c2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80097c6:	d009      	beq.n	80097dc <UART_SetConfig+0x33c>
 80097c8:	e00b      	b.n	80097e2 <UART_SetConfig+0x342>
 80097ca:	2300      	movs	r3, #0
 80097cc:	77fb      	strb	r3, [r7, #31]
 80097ce:	e00e      	b.n	80097ee <UART_SetConfig+0x34e>
 80097d0:	2302      	movs	r3, #2
 80097d2:	77fb      	strb	r3, [r7, #31]
 80097d4:	e00b      	b.n	80097ee <UART_SetConfig+0x34e>
 80097d6:	2304      	movs	r3, #4
 80097d8:	77fb      	strb	r3, [r7, #31]
 80097da:	e008      	b.n	80097ee <UART_SetConfig+0x34e>
 80097dc:	2308      	movs	r3, #8
 80097de:	77fb      	strb	r3, [r7, #31]
 80097e0:	e005      	b.n	80097ee <UART_SetConfig+0x34e>
 80097e2:	2310      	movs	r3, #16
 80097e4:	77fb      	strb	r3, [r7, #31]
 80097e6:	bf00      	nop
 80097e8:	e001      	b.n	80097ee <UART_SetConfig+0x34e>
 80097ea:	2310      	movs	r3, #16
 80097ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	69db      	ldr	r3, [r3, #28]
 80097f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097f6:	d17f      	bne.n	80098f8 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80097f8:	7ffb      	ldrb	r3, [r7, #31]
 80097fa:	2b08      	cmp	r3, #8
 80097fc:	d85c      	bhi.n	80098b8 <UART_SetConfig+0x418>
 80097fe:	a201      	add	r2, pc, #4	; (adr r2, 8009804 <UART_SetConfig+0x364>)
 8009800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009804:	08009829 	.word	0x08009829
 8009808:	08009849 	.word	0x08009849
 800980c:	08009869 	.word	0x08009869
 8009810:	080098b9 	.word	0x080098b9
 8009814:	08009881 	.word	0x08009881
 8009818:	080098b9 	.word	0x080098b9
 800981c:	080098b9 	.word	0x080098b9
 8009820:	080098b9 	.word	0x080098b9
 8009824:	080098a1 	.word	0x080098a1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009828:	f7fd fcce 	bl	80071c8 <HAL_RCC_GetPCLK1Freq>
 800982c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	005a      	lsls	r2, r3, #1
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	085b      	lsrs	r3, r3, #1
 8009838:	441a      	add	r2, r3
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009842:	b29b      	uxth	r3, r3
 8009844:	61bb      	str	r3, [r7, #24]
        break;
 8009846:	e03a      	b.n	80098be <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009848:	f7fd fcd2 	bl	80071f0 <HAL_RCC_GetPCLK2Freq>
 800984c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	005a      	lsls	r2, r3, #1
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	085b      	lsrs	r3, r3, #1
 8009858:	441a      	add	r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009862:	b29b      	uxth	r3, r3
 8009864:	61bb      	str	r3, [r7, #24]
        break;
 8009866:	e02a      	b.n	80098be <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	085a      	lsrs	r2, r3, #1
 800986e:	4b5f      	ldr	r3, [pc, #380]	; (80099ec <UART_SetConfig+0x54c>)
 8009870:	4413      	add	r3, r2
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	6852      	ldr	r2, [r2, #4]
 8009876:	fbb3 f3f2 	udiv	r3, r3, r2
 800987a:	b29b      	uxth	r3, r3
 800987c:	61bb      	str	r3, [r7, #24]
        break;
 800987e:	e01e      	b.n	80098be <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009880:	f7fd fbbe 	bl	8007000 <HAL_RCC_GetSysClockFreq>
 8009884:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	005a      	lsls	r2, r3, #1
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	085b      	lsrs	r3, r3, #1
 8009890:	441a      	add	r2, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	fbb2 f3f3 	udiv	r3, r2, r3
 800989a:	b29b      	uxth	r3, r3
 800989c:	61bb      	str	r3, [r7, #24]
        break;
 800989e:	e00e      	b.n	80098be <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	085b      	lsrs	r3, r3, #1
 80098a6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	61bb      	str	r3, [r7, #24]
        break;
 80098b6:	e002      	b.n	80098be <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	75fb      	strb	r3, [r7, #23]
        break;
 80098bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	2b0f      	cmp	r3, #15
 80098c2:	d916      	bls.n	80098f2 <UART_SetConfig+0x452>
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098ca:	d212      	bcs.n	80098f2 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80098cc:	69bb      	ldr	r3, [r7, #24]
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	f023 030f 	bic.w	r3, r3, #15
 80098d4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80098d6:	69bb      	ldr	r3, [r7, #24]
 80098d8:	085b      	lsrs	r3, r3, #1
 80098da:	b29b      	uxth	r3, r3
 80098dc:	f003 0307 	and.w	r3, r3, #7
 80098e0:	b29a      	uxth	r2, r3
 80098e2:	897b      	ldrh	r3, [r7, #10]
 80098e4:	4313      	orrs	r3, r2
 80098e6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	897a      	ldrh	r2, [r7, #10]
 80098ee:	60da      	str	r2, [r3, #12]
 80098f0:	e070      	b.n	80099d4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80098f2:	2301      	movs	r3, #1
 80098f4:	75fb      	strb	r3, [r7, #23]
 80098f6:	e06d      	b.n	80099d4 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80098f8:	7ffb      	ldrb	r3, [r7, #31]
 80098fa:	2b08      	cmp	r3, #8
 80098fc:	d859      	bhi.n	80099b2 <UART_SetConfig+0x512>
 80098fe:	a201      	add	r2, pc, #4	; (adr r2, 8009904 <UART_SetConfig+0x464>)
 8009900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009904:	08009929 	.word	0x08009929
 8009908:	08009947 	.word	0x08009947
 800990c:	08009965 	.word	0x08009965
 8009910:	080099b3 	.word	0x080099b3
 8009914:	0800997d 	.word	0x0800997d
 8009918:	080099b3 	.word	0x080099b3
 800991c:	080099b3 	.word	0x080099b3
 8009920:	080099b3 	.word	0x080099b3
 8009924:	0800999b 	.word	0x0800999b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009928:	f7fd fc4e 	bl	80071c8 <HAL_RCC_GetPCLK1Freq>
 800992c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	085a      	lsrs	r2, r3, #1
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	441a      	add	r2, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009940:	b29b      	uxth	r3, r3
 8009942:	61bb      	str	r3, [r7, #24]
        break;
 8009944:	e038      	b.n	80099b8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009946:	f7fd fc53 	bl	80071f0 <HAL_RCC_GetPCLK2Freq>
 800994a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	085a      	lsrs	r2, r3, #1
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	441a      	add	r2, r3
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	fbb2 f3f3 	udiv	r3, r2, r3
 800995e:	b29b      	uxth	r3, r3
 8009960:	61bb      	str	r3, [r7, #24]
        break;
 8009962:	e029      	b.n	80099b8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	085a      	lsrs	r2, r3, #1
 800996a:	4b21      	ldr	r3, [pc, #132]	; (80099f0 <UART_SetConfig+0x550>)
 800996c:	4413      	add	r3, r2
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	6852      	ldr	r2, [r2, #4]
 8009972:	fbb3 f3f2 	udiv	r3, r3, r2
 8009976:	b29b      	uxth	r3, r3
 8009978:	61bb      	str	r3, [r7, #24]
        break;
 800997a:	e01d      	b.n	80099b8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800997c:	f7fd fb40 	bl	8007000 <HAL_RCC_GetSysClockFreq>
 8009980:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	085a      	lsrs	r2, r3, #1
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	441a      	add	r2, r3
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	fbb2 f3f3 	udiv	r3, r2, r3
 8009994:	b29b      	uxth	r3, r3
 8009996:	61bb      	str	r3, [r7, #24]
        break;
 8009998:	e00e      	b.n	80099b8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	085b      	lsrs	r3, r3, #1
 80099a0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	61bb      	str	r3, [r7, #24]
        break;
 80099b0:	e002      	b.n	80099b8 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80099b2:	2301      	movs	r3, #1
 80099b4:	75fb      	strb	r3, [r7, #23]
        break;
 80099b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099b8:	69bb      	ldr	r3, [r7, #24]
 80099ba:	2b0f      	cmp	r3, #15
 80099bc:	d908      	bls.n	80099d0 <UART_SetConfig+0x530>
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099c4:	d204      	bcs.n	80099d0 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	69ba      	ldr	r2, [r7, #24]
 80099cc:	60da      	str	r2, [r3, #12]
 80099ce:	e001      	b.n	80099d4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80099d0:	2301      	movs	r3, #1
 80099d2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80099e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3720      	adds	r7, #32
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	01e84800 	.word	0x01e84800
 80099f0:	00f42400 	.word	0x00f42400

080099f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a00:	f003 0301 	and.w	r3, r3, #1
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d00a      	beq.n	8009a1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	430a      	orrs	r2, r1
 8009a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a22:	f003 0302 	and.w	r3, r3, #2
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00a      	beq.n	8009a40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	430a      	orrs	r2, r1
 8009a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a44:	f003 0304 	and.w	r3, r3, #4
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00a      	beq.n	8009a62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	430a      	orrs	r2, r1
 8009a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a66:	f003 0308 	and.w	r3, r3, #8
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00a      	beq.n	8009a84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	430a      	orrs	r2, r1
 8009a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a88:	f003 0310 	and.w	r3, r3, #16
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d00a      	beq.n	8009aa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	430a      	orrs	r2, r1
 8009aa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aaa:	f003 0320 	and.w	r3, r3, #32
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d00a      	beq.n	8009ac8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	430a      	orrs	r2, r1
 8009ac6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d01a      	beq.n	8009b0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	430a      	orrs	r2, r1
 8009ae8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009af2:	d10a      	bne.n	8009b0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	430a      	orrs	r2, r1
 8009b08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00a      	beq.n	8009b2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	430a      	orrs	r2, r1
 8009b2a:	605a      	str	r2, [r3, #4]
  }
}
 8009b2c:	bf00      	nop
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b086      	sub	sp, #24
 8009b3c:	af02      	add	r7, sp, #8
 8009b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009b46:	f7f9 ff83 	bl	8003a50 <HAL_GetTick>
 8009b4a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f003 0308 	and.w	r3, r3, #8
 8009b56:	2b08      	cmp	r3, #8
 8009b58:	d10e      	bne.n	8009b78 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b5e:	9300      	str	r3, [sp, #0]
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2200      	movs	r2, #0
 8009b64:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 f814 	bl	8009b96 <UART_WaitOnFlagUntilTimeout>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d001      	beq.n	8009b78 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b74:	2303      	movs	r3, #3
 8009b76:	e00a      	b.n	8009b8e <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2220      	movs	r2, #32
 8009b7c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2220      	movs	r2, #32
 8009b82:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009b8c:	2300      	movs	r3, #0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b084      	sub	sp, #16
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	60f8      	str	r0, [r7, #12]
 8009b9e:	60b9      	str	r1, [r7, #8]
 8009ba0:	603b      	str	r3, [r7, #0]
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ba6:	e05d      	b.n	8009c64 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bae:	d059      	beq.n	8009c64 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bb0:	f7f9 ff4e 	bl	8003a50 <HAL_GetTick>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	1ad3      	subs	r3, r2, r3
 8009bba:	69ba      	ldr	r2, [r7, #24]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d302      	bcc.n	8009bc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d11b      	bne.n	8009bfe <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009bd4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	689a      	ldr	r2, [r3, #8]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f022 0201 	bic.w	r2, r2, #1
 8009be4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2220      	movs	r2, #32
 8009bea:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2220      	movs	r2, #32
 8009bf0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8009bfa:	2303      	movs	r3, #3
 8009bfc:	e042      	b.n	8009c84 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f003 0304 	and.w	r3, r3, #4
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d02b      	beq.n	8009c64 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	69db      	ldr	r3, [r3, #28]
 8009c12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c1a:	d123      	bne.n	8009c64 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c24:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009c34:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	689a      	ldr	r2, [r3, #8]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f022 0201 	bic.w	r2, r2, #1
 8009c44:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2220      	movs	r2, #32
 8009c4a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2220      	movs	r2, #32
 8009c50:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2220      	movs	r2, #32
 8009c56:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8009c60:	2303      	movs	r3, #3
 8009c62:	e00f      	b.n	8009c84 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	69da      	ldr	r2, [r3, #28]
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	4013      	ands	r3, r2
 8009c6e:	68ba      	ldr	r2, [r7, #8]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	bf0c      	ite	eq
 8009c74:	2301      	moveq	r3, #1
 8009c76:	2300      	movne	r3, #0
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	79fb      	ldrb	r3, [r7, #7]
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d092      	beq.n	8009ba8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c82:	2300      	movs	r3, #0
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3710      	adds	r7, #16
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009ca2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	689a      	ldr	r2, [r3, #8]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f022 0201 	bic.w	r2, r2, #1
 8009cb2:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2220      	movs	r2, #32
 8009cb8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	661a      	str	r2, [r3, #96]	; 0x60
}
 8009cc0:	bf00      	nop
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f7ff fbce 	bl	800948c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009cf0:	bf00      	nop
 8009cf2:	3710      	adds	r7, #16
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d04:	2b21      	cmp	r3, #33	; 0x21
 8009d06:	d12a      	bne.n	8009d5e <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d110      	bne.n	8009d36 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d22:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d32:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009d34:	e013      	b.n	8009d5e <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d3a:	781a      	ldrb	r2, [r3, #0]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d46:	1c5a      	adds	r2, r3, #1
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	3b01      	subs	r3, #1
 8009d56:	b29a      	uxth	r2, r3
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009d5e:	bf00      	nop
 8009d60:	370c      	adds	r7, #12
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr

08009d6a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009d6a:	b480      	push	{r7}
 8009d6c:	b085      	sub	sp, #20
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d76:	2b21      	cmp	r3, #33	; 0x21
 8009d78:	d12f      	bne.n	8009dda <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d110      	bne.n	8009da8 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d94:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009da4:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009da6:	e018      	b.n	8009dda <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dac:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	881b      	ldrh	r3, [r3, #0]
 8009db2:	461a      	mov	r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009dbc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dc2:	1c9a      	adds	r2, r3, #2
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	b29a      	uxth	r2, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009dda:	bf00      	nop
 8009ddc:	3714      	adds	r7, #20
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr

08009de6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b082      	sub	sp, #8
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009dfc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2220      	movs	r2, #32
 8009e02:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f7ff fb34 	bl	8009478 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e10:	bf00      	nop
 8009e12:	3708      	adds	r7, #8
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009e26:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e2c:	2b22      	cmp	r3, #34	; 0x22
 8009e2e:	d13a      	bne.n	8009ea6 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e36:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009e38:	89bb      	ldrh	r3, [r7, #12]
 8009e3a:	b2d9      	uxtb	r1, r3
 8009e3c:	89fb      	ldrh	r3, [r7, #14]
 8009e3e:	b2da      	uxtb	r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e44:	400a      	ands	r2, r1
 8009e46:	b2d2      	uxtb	r2, r2
 8009e48:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e4e:	1c5a      	adds	r2, r3, #1
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	b29a      	uxth	r2, r3
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d121      	bne.n	8009eb6 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009e80:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	689a      	ldr	r2, [r3, #8]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f022 0201 	bic.w	r2, r2, #1
 8009e90:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2220      	movs	r2, #32
 8009e96:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f7f8 fa26 	bl	80022f0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ea4:	e007      	b.n	8009eb6 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	699a      	ldr	r2, [r3, #24]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f042 0208 	orr.w	r2, r2, #8
 8009eb4:	619a      	str	r2, [r3, #24]
}
 8009eb6:	bf00      	nop
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b084      	sub	sp, #16
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009ecc:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ed2:	2b22      	cmp	r3, #34	; 0x22
 8009ed4:	d13a      	bne.n	8009f4c <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009edc:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ee2:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8009ee4:	89ba      	ldrh	r2, [r7, #12]
 8009ee6:	89fb      	ldrh	r3, [r7, #14]
 8009ee8:	4013      	ands	r3, r2
 8009eea:	b29a      	uxth	r2, r3
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ef4:	1c9a      	adds	r2, r3, #2
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	3b01      	subs	r3, #1
 8009f04:	b29a      	uxth	r2, r3
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d121      	bne.n	8009f5c <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009f26:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	689a      	ldr	r2, [r3, #8]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f022 0201 	bic.w	r2, r2, #1
 8009f36:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2220      	movs	r2, #32
 8009f3c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f7f8 f9d3 	bl	80022f0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009f4a:	e007      	b.n	8009f5c <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	699a      	ldr	r2, [r3, #24]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f042 0208 	orr.w	r2, r2, #8
 8009f5a:	619a      	str	r2, [r3, #24]
}
 8009f5c:	bf00      	nop
 8009f5e:	3710      	adds	r7, #16
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <__errno>:
 8009f64:	4b01      	ldr	r3, [pc, #4]	; (8009f6c <__errno+0x8>)
 8009f66:	6818      	ldr	r0, [r3, #0]
 8009f68:	4770      	bx	lr
 8009f6a:	bf00      	nop
 8009f6c:	20000010 	.word	0x20000010

08009f70 <__libc_init_array>:
 8009f70:	b570      	push	{r4, r5, r6, lr}
 8009f72:	4e0d      	ldr	r6, [pc, #52]	; (8009fa8 <__libc_init_array+0x38>)
 8009f74:	4c0d      	ldr	r4, [pc, #52]	; (8009fac <__libc_init_array+0x3c>)
 8009f76:	1ba4      	subs	r4, r4, r6
 8009f78:	10a4      	asrs	r4, r4, #2
 8009f7a:	2500      	movs	r5, #0
 8009f7c:	42a5      	cmp	r5, r4
 8009f7e:	d109      	bne.n	8009f94 <__libc_init_array+0x24>
 8009f80:	4e0b      	ldr	r6, [pc, #44]	; (8009fb0 <__libc_init_array+0x40>)
 8009f82:	4c0c      	ldr	r4, [pc, #48]	; (8009fb4 <__libc_init_array+0x44>)
 8009f84:	f000 fc30 	bl	800a7e8 <_init>
 8009f88:	1ba4      	subs	r4, r4, r6
 8009f8a:	10a4      	asrs	r4, r4, #2
 8009f8c:	2500      	movs	r5, #0
 8009f8e:	42a5      	cmp	r5, r4
 8009f90:	d105      	bne.n	8009f9e <__libc_init_array+0x2e>
 8009f92:	bd70      	pop	{r4, r5, r6, pc}
 8009f94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f98:	4798      	blx	r3
 8009f9a:	3501      	adds	r5, #1
 8009f9c:	e7ee      	b.n	8009f7c <__libc_init_array+0xc>
 8009f9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009fa2:	4798      	blx	r3
 8009fa4:	3501      	adds	r5, #1
 8009fa6:	e7f2      	b.n	8009f8e <__libc_init_array+0x1e>
 8009fa8:	0800a874 	.word	0x0800a874
 8009fac:	0800a874 	.word	0x0800a874
 8009fb0:	0800a874 	.word	0x0800a874
 8009fb4:	0800a878 	.word	0x0800a878

08009fb8 <malloc>:
 8009fb8:	4b02      	ldr	r3, [pc, #8]	; (8009fc4 <malloc+0xc>)
 8009fba:	4601      	mov	r1, r0
 8009fbc:	6818      	ldr	r0, [r3, #0]
 8009fbe:	f000 b865 	b.w	800a08c <_malloc_r>
 8009fc2:	bf00      	nop
 8009fc4:	20000010 	.word	0x20000010

08009fc8 <memcpy>:
 8009fc8:	b510      	push	{r4, lr}
 8009fca:	1e43      	subs	r3, r0, #1
 8009fcc:	440a      	add	r2, r1
 8009fce:	4291      	cmp	r1, r2
 8009fd0:	d100      	bne.n	8009fd4 <memcpy+0xc>
 8009fd2:	bd10      	pop	{r4, pc}
 8009fd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fdc:	e7f7      	b.n	8009fce <memcpy+0x6>

08009fde <memset>:
 8009fde:	4402      	add	r2, r0
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d100      	bne.n	8009fe8 <memset+0xa>
 8009fe6:	4770      	bx	lr
 8009fe8:	f803 1b01 	strb.w	r1, [r3], #1
 8009fec:	e7f9      	b.n	8009fe2 <memset+0x4>
	...

08009ff0 <_free_r>:
 8009ff0:	b538      	push	{r3, r4, r5, lr}
 8009ff2:	4605      	mov	r5, r0
 8009ff4:	2900      	cmp	r1, #0
 8009ff6:	d045      	beq.n	800a084 <_free_r+0x94>
 8009ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ffc:	1f0c      	subs	r4, r1, #4
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	bfb8      	it	lt
 800a002:	18e4      	addlt	r4, r4, r3
 800a004:	f000 f8cc 	bl	800a1a0 <__malloc_lock>
 800a008:	4a1f      	ldr	r2, [pc, #124]	; (800a088 <_free_r+0x98>)
 800a00a:	6813      	ldr	r3, [r2, #0]
 800a00c:	4610      	mov	r0, r2
 800a00e:	b933      	cbnz	r3, 800a01e <_free_r+0x2e>
 800a010:	6063      	str	r3, [r4, #4]
 800a012:	6014      	str	r4, [r2, #0]
 800a014:	4628      	mov	r0, r5
 800a016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a01a:	f000 b8c2 	b.w	800a1a2 <__malloc_unlock>
 800a01e:	42a3      	cmp	r3, r4
 800a020:	d90c      	bls.n	800a03c <_free_r+0x4c>
 800a022:	6821      	ldr	r1, [r4, #0]
 800a024:	1862      	adds	r2, r4, r1
 800a026:	4293      	cmp	r3, r2
 800a028:	bf04      	itt	eq
 800a02a:	681a      	ldreq	r2, [r3, #0]
 800a02c:	685b      	ldreq	r3, [r3, #4]
 800a02e:	6063      	str	r3, [r4, #4]
 800a030:	bf04      	itt	eq
 800a032:	1852      	addeq	r2, r2, r1
 800a034:	6022      	streq	r2, [r4, #0]
 800a036:	6004      	str	r4, [r0, #0]
 800a038:	e7ec      	b.n	800a014 <_free_r+0x24>
 800a03a:	4613      	mov	r3, r2
 800a03c:	685a      	ldr	r2, [r3, #4]
 800a03e:	b10a      	cbz	r2, 800a044 <_free_r+0x54>
 800a040:	42a2      	cmp	r2, r4
 800a042:	d9fa      	bls.n	800a03a <_free_r+0x4a>
 800a044:	6819      	ldr	r1, [r3, #0]
 800a046:	1858      	adds	r0, r3, r1
 800a048:	42a0      	cmp	r0, r4
 800a04a:	d10b      	bne.n	800a064 <_free_r+0x74>
 800a04c:	6820      	ldr	r0, [r4, #0]
 800a04e:	4401      	add	r1, r0
 800a050:	1858      	adds	r0, r3, r1
 800a052:	4282      	cmp	r2, r0
 800a054:	6019      	str	r1, [r3, #0]
 800a056:	d1dd      	bne.n	800a014 <_free_r+0x24>
 800a058:	6810      	ldr	r0, [r2, #0]
 800a05a:	6852      	ldr	r2, [r2, #4]
 800a05c:	605a      	str	r2, [r3, #4]
 800a05e:	4401      	add	r1, r0
 800a060:	6019      	str	r1, [r3, #0]
 800a062:	e7d7      	b.n	800a014 <_free_r+0x24>
 800a064:	d902      	bls.n	800a06c <_free_r+0x7c>
 800a066:	230c      	movs	r3, #12
 800a068:	602b      	str	r3, [r5, #0]
 800a06a:	e7d3      	b.n	800a014 <_free_r+0x24>
 800a06c:	6820      	ldr	r0, [r4, #0]
 800a06e:	1821      	adds	r1, r4, r0
 800a070:	428a      	cmp	r2, r1
 800a072:	bf04      	itt	eq
 800a074:	6811      	ldreq	r1, [r2, #0]
 800a076:	6852      	ldreq	r2, [r2, #4]
 800a078:	6062      	str	r2, [r4, #4]
 800a07a:	bf04      	itt	eq
 800a07c:	1809      	addeq	r1, r1, r0
 800a07e:	6021      	streq	r1, [r4, #0]
 800a080:	605c      	str	r4, [r3, #4]
 800a082:	e7c7      	b.n	800a014 <_free_r+0x24>
 800a084:	bd38      	pop	{r3, r4, r5, pc}
 800a086:	bf00      	nop
 800a088:	200000a0 	.word	0x200000a0

0800a08c <_malloc_r>:
 800a08c:	b570      	push	{r4, r5, r6, lr}
 800a08e:	1ccd      	adds	r5, r1, #3
 800a090:	f025 0503 	bic.w	r5, r5, #3
 800a094:	3508      	adds	r5, #8
 800a096:	2d0c      	cmp	r5, #12
 800a098:	bf38      	it	cc
 800a09a:	250c      	movcc	r5, #12
 800a09c:	2d00      	cmp	r5, #0
 800a09e:	4606      	mov	r6, r0
 800a0a0:	db01      	blt.n	800a0a6 <_malloc_r+0x1a>
 800a0a2:	42a9      	cmp	r1, r5
 800a0a4:	d903      	bls.n	800a0ae <_malloc_r+0x22>
 800a0a6:	230c      	movs	r3, #12
 800a0a8:	6033      	str	r3, [r6, #0]
 800a0aa:	2000      	movs	r0, #0
 800a0ac:	bd70      	pop	{r4, r5, r6, pc}
 800a0ae:	f000 f877 	bl	800a1a0 <__malloc_lock>
 800a0b2:	4a21      	ldr	r2, [pc, #132]	; (800a138 <_malloc_r+0xac>)
 800a0b4:	6814      	ldr	r4, [r2, #0]
 800a0b6:	4621      	mov	r1, r4
 800a0b8:	b991      	cbnz	r1, 800a0e0 <_malloc_r+0x54>
 800a0ba:	4c20      	ldr	r4, [pc, #128]	; (800a13c <_malloc_r+0xb0>)
 800a0bc:	6823      	ldr	r3, [r4, #0]
 800a0be:	b91b      	cbnz	r3, 800a0c8 <_malloc_r+0x3c>
 800a0c0:	4630      	mov	r0, r6
 800a0c2:	f000 f83d 	bl	800a140 <_sbrk_r>
 800a0c6:	6020      	str	r0, [r4, #0]
 800a0c8:	4629      	mov	r1, r5
 800a0ca:	4630      	mov	r0, r6
 800a0cc:	f000 f838 	bl	800a140 <_sbrk_r>
 800a0d0:	1c43      	adds	r3, r0, #1
 800a0d2:	d124      	bne.n	800a11e <_malloc_r+0x92>
 800a0d4:	230c      	movs	r3, #12
 800a0d6:	6033      	str	r3, [r6, #0]
 800a0d8:	4630      	mov	r0, r6
 800a0da:	f000 f862 	bl	800a1a2 <__malloc_unlock>
 800a0de:	e7e4      	b.n	800a0aa <_malloc_r+0x1e>
 800a0e0:	680b      	ldr	r3, [r1, #0]
 800a0e2:	1b5b      	subs	r3, r3, r5
 800a0e4:	d418      	bmi.n	800a118 <_malloc_r+0x8c>
 800a0e6:	2b0b      	cmp	r3, #11
 800a0e8:	d90f      	bls.n	800a10a <_malloc_r+0x7e>
 800a0ea:	600b      	str	r3, [r1, #0]
 800a0ec:	50cd      	str	r5, [r1, r3]
 800a0ee:	18cc      	adds	r4, r1, r3
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	f000 f856 	bl	800a1a2 <__malloc_unlock>
 800a0f6:	f104 000b 	add.w	r0, r4, #11
 800a0fa:	1d23      	adds	r3, r4, #4
 800a0fc:	f020 0007 	bic.w	r0, r0, #7
 800a100:	1ac3      	subs	r3, r0, r3
 800a102:	d0d3      	beq.n	800a0ac <_malloc_r+0x20>
 800a104:	425a      	negs	r2, r3
 800a106:	50e2      	str	r2, [r4, r3]
 800a108:	e7d0      	b.n	800a0ac <_malloc_r+0x20>
 800a10a:	428c      	cmp	r4, r1
 800a10c:	684b      	ldr	r3, [r1, #4]
 800a10e:	bf16      	itet	ne
 800a110:	6063      	strne	r3, [r4, #4]
 800a112:	6013      	streq	r3, [r2, #0]
 800a114:	460c      	movne	r4, r1
 800a116:	e7eb      	b.n	800a0f0 <_malloc_r+0x64>
 800a118:	460c      	mov	r4, r1
 800a11a:	6849      	ldr	r1, [r1, #4]
 800a11c:	e7cc      	b.n	800a0b8 <_malloc_r+0x2c>
 800a11e:	1cc4      	adds	r4, r0, #3
 800a120:	f024 0403 	bic.w	r4, r4, #3
 800a124:	42a0      	cmp	r0, r4
 800a126:	d005      	beq.n	800a134 <_malloc_r+0xa8>
 800a128:	1a21      	subs	r1, r4, r0
 800a12a:	4630      	mov	r0, r6
 800a12c:	f000 f808 	bl	800a140 <_sbrk_r>
 800a130:	3001      	adds	r0, #1
 800a132:	d0cf      	beq.n	800a0d4 <_malloc_r+0x48>
 800a134:	6025      	str	r5, [r4, #0]
 800a136:	e7db      	b.n	800a0f0 <_malloc_r+0x64>
 800a138:	200000a0 	.word	0x200000a0
 800a13c:	200000a4 	.word	0x200000a4

0800a140 <_sbrk_r>:
 800a140:	b538      	push	{r3, r4, r5, lr}
 800a142:	4c06      	ldr	r4, [pc, #24]	; (800a15c <_sbrk_r+0x1c>)
 800a144:	2300      	movs	r3, #0
 800a146:	4605      	mov	r5, r0
 800a148:	4608      	mov	r0, r1
 800a14a:	6023      	str	r3, [r4, #0]
 800a14c:	f7f9 fbba 	bl	80038c4 <_sbrk>
 800a150:	1c43      	adds	r3, r0, #1
 800a152:	d102      	bne.n	800a15a <_sbrk_r+0x1a>
 800a154:	6823      	ldr	r3, [r4, #0]
 800a156:	b103      	cbz	r3, 800a15a <_sbrk_r+0x1a>
 800a158:	602b      	str	r3, [r5, #0]
 800a15a:	bd38      	pop	{r3, r4, r5, pc}
 800a15c:	200005a4 	.word	0x200005a4

0800a160 <siprintf>:
 800a160:	b40e      	push	{r1, r2, r3}
 800a162:	b500      	push	{lr}
 800a164:	b09c      	sub	sp, #112	; 0x70
 800a166:	ab1d      	add	r3, sp, #116	; 0x74
 800a168:	9002      	str	r0, [sp, #8]
 800a16a:	9006      	str	r0, [sp, #24]
 800a16c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a170:	4809      	ldr	r0, [pc, #36]	; (800a198 <siprintf+0x38>)
 800a172:	9107      	str	r1, [sp, #28]
 800a174:	9104      	str	r1, [sp, #16]
 800a176:	4909      	ldr	r1, [pc, #36]	; (800a19c <siprintf+0x3c>)
 800a178:	f853 2b04 	ldr.w	r2, [r3], #4
 800a17c:	9105      	str	r1, [sp, #20]
 800a17e:	6800      	ldr	r0, [r0, #0]
 800a180:	9301      	str	r3, [sp, #4]
 800a182:	a902      	add	r1, sp, #8
 800a184:	f000 f868 	bl	800a258 <_svfiprintf_r>
 800a188:	9b02      	ldr	r3, [sp, #8]
 800a18a:	2200      	movs	r2, #0
 800a18c:	701a      	strb	r2, [r3, #0]
 800a18e:	b01c      	add	sp, #112	; 0x70
 800a190:	f85d eb04 	ldr.w	lr, [sp], #4
 800a194:	b003      	add	sp, #12
 800a196:	4770      	bx	lr
 800a198:	20000010 	.word	0x20000010
 800a19c:	ffff0208 	.word	0xffff0208

0800a1a0 <__malloc_lock>:
 800a1a0:	4770      	bx	lr

0800a1a2 <__malloc_unlock>:
 800a1a2:	4770      	bx	lr

0800a1a4 <__ssputs_r>:
 800a1a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1a8:	688e      	ldr	r6, [r1, #8]
 800a1aa:	429e      	cmp	r6, r3
 800a1ac:	4682      	mov	sl, r0
 800a1ae:	460c      	mov	r4, r1
 800a1b0:	4690      	mov	r8, r2
 800a1b2:	4699      	mov	r9, r3
 800a1b4:	d837      	bhi.n	800a226 <__ssputs_r+0x82>
 800a1b6:	898a      	ldrh	r2, [r1, #12]
 800a1b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a1bc:	d031      	beq.n	800a222 <__ssputs_r+0x7e>
 800a1be:	6825      	ldr	r5, [r4, #0]
 800a1c0:	6909      	ldr	r1, [r1, #16]
 800a1c2:	1a6f      	subs	r7, r5, r1
 800a1c4:	6965      	ldr	r5, [r4, #20]
 800a1c6:	2302      	movs	r3, #2
 800a1c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a1cc:	fb95 f5f3 	sdiv	r5, r5, r3
 800a1d0:	f109 0301 	add.w	r3, r9, #1
 800a1d4:	443b      	add	r3, r7
 800a1d6:	429d      	cmp	r5, r3
 800a1d8:	bf38      	it	cc
 800a1da:	461d      	movcc	r5, r3
 800a1dc:	0553      	lsls	r3, r2, #21
 800a1de:	d530      	bpl.n	800a242 <__ssputs_r+0x9e>
 800a1e0:	4629      	mov	r1, r5
 800a1e2:	f7ff ff53 	bl	800a08c <_malloc_r>
 800a1e6:	4606      	mov	r6, r0
 800a1e8:	b950      	cbnz	r0, 800a200 <__ssputs_r+0x5c>
 800a1ea:	230c      	movs	r3, #12
 800a1ec:	f8ca 3000 	str.w	r3, [sl]
 800a1f0:	89a3      	ldrh	r3, [r4, #12]
 800a1f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1f6:	81a3      	strh	r3, [r4, #12]
 800a1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a200:	463a      	mov	r2, r7
 800a202:	6921      	ldr	r1, [r4, #16]
 800a204:	f7ff fee0 	bl	8009fc8 <memcpy>
 800a208:	89a3      	ldrh	r3, [r4, #12]
 800a20a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a20e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a212:	81a3      	strh	r3, [r4, #12]
 800a214:	6126      	str	r6, [r4, #16]
 800a216:	6165      	str	r5, [r4, #20]
 800a218:	443e      	add	r6, r7
 800a21a:	1bed      	subs	r5, r5, r7
 800a21c:	6026      	str	r6, [r4, #0]
 800a21e:	60a5      	str	r5, [r4, #8]
 800a220:	464e      	mov	r6, r9
 800a222:	454e      	cmp	r6, r9
 800a224:	d900      	bls.n	800a228 <__ssputs_r+0x84>
 800a226:	464e      	mov	r6, r9
 800a228:	4632      	mov	r2, r6
 800a22a:	4641      	mov	r1, r8
 800a22c:	6820      	ldr	r0, [r4, #0]
 800a22e:	f000 fa93 	bl	800a758 <memmove>
 800a232:	68a3      	ldr	r3, [r4, #8]
 800a234:	1b9b      	subs	r3, r3, r6
 800a236:	60a3      	str	r3, [r4, #8]
 800a238:	6823      	ldr	r3, [r4, #0]
 800a23a:	441e      	add	r6, r3
 800a23c:	6026      	str	r6, [r4, #0]
 800a23e:	2000      	movs	r0, #0
 800a240:	e7dc      	b.n	800a1fc <__ssputs_r+0x58>
 800a242:	462a      	mov	r2, r5
 800a244:	f000 faa1 	bl	800a78a <_realloc_r>
 800a248:	4606      	mov	r6, r0
 800a24a:	2800      	cmp	r0, #0
 800a24c:	d1e2      	bne.n	800a214 <__ssputs_r+0x70>
 800a24e:	6921      	ldr	r1, [r4, #16]
 800a250:	4650      	mov	r0, sl
 800a252:	f7ff fecd 	bl	8009ff0 <_free_r>
 800a256:	e7c8      	b.n	800a1ea <__ssputs_r+0x46>

0800a258 <_svfiprintf_r>:
 800a258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a25c:	461d      	mov	r5, r3
 800a25e:	898b      	ldrh	r3, [r1, #12]
 800a260:	061f      	lsls	r7, r3, #24
 800a262:	b09d      	sub	sp, #116	; 0x74
 800a264:	4680      	mov	r8, r0
 800a266:	460c      	mov	r4, r1
 800a268:	4616      	mov	r6, r2
 800a26a:	d50f      	bpl.n	800a28c <_svfiprintf_r+0x34>
 800a26c:	690b      	ldr	r3, [r1, #16]
 800a26e:	b96b      	cbnz	r3, 800a28c <_svfiprintf_r+0x34>
 800a270:	2140      	movs	r1, #64	; 0x40
 800a272:	f7ff ff0b 	bl	800a08c <_malloc_r>
 800a276:	6020      	str	r0, [r4, #0]
 800a278:	6120      	str	r0, [r4, #16]
 800a27a:	b928      	cbnz	r0, 800a288 <_svfiprintf_r+0x30>
 800a27c:	230c      	movs	r3, #12
 800a27e:	f8c8 3000 	str.w	r3, [r8]
 800a282:	f04f 30ff 	mov.w	r0, #4294967295
 800a286:	e0c8      	b.n	800a41a <_svfiprintf_r+0x1c2>
 800a288:	2340      	movs	r3, #64	; 0x40
 800a28a:	6163      	str	r3, [r4, #20]
 800a28c:	2300      	movs	r3, #0
 800a28e:	9309      	str	r3, [sp, #36]	; 0x24
 800a290:	2320      	movs	r3, #32
 800a292:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a296:	2330      	movs	r3, #48	; 0x30
 800a298:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a29c:	9503      	str	r5, [sp, #12]
 800a29e:	f04f 0b01 	mov.w	fp, #1
 800a2a2:	4637      	mov	r7, r6
 800a2a4:	463d      	mov	r5, r7
 800a2a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a2aa:	b10b      	cbz	r3, 800a2b0 <_svfiprintf_r+0x58>
 800a2ac:	2b25      	cmp	r3, #37	; 0x25
 800a2ae:	d13e      	bne.n	800a32e <_svfiprintf_r+0xd6>
 800a2b0:	ebb7 0a06 	subs.w	sl, r7, r6
 800a2b4:	d00b      	beq.n	800a2ce <_svfiprintf_r+0x76>
 800a2b6:	4653      	mov	r3, sl
 800a2b8:	4632      	mov	r2, r6
 800a2ba:	4621      	mov	r1, r4
 800a2bc:	4640      	mov	r0, r8
 800a2be:	f7ff ff71 	bl	800a1a4 <__ssputs_r>
 800a2c2:	3001      	adds	r0, #1
 800a2c4:	f000 80a4 	beq.w	800a410 <_svfiprintf_r+0x1b8>
 800a2c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2ca:	4453      	add	r3, sl
 800a2cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a2ce:	783b      	ldrb	r3, [r7, #0]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	f000 809d 	beq.w	800a410 <_svfiprintf_r+0x1b8>
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a2dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2e0:	9304      	str	r3, [sp, #16]
 800a2e2:	9307      	str	r3, [sp, #28]
 800a2e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2e8:	931a      	str	r3, [sp, #104]	; 0x68
 800a2ea:	462f      	mov	r7, r5
 800a2ec:	2205      	movs	r2, #5
 800a2ee:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a2f2:	4850      	ldr	r0, [pc, #320]	; (800a434 <_svfiprintf_r+0x1dc>)
 800a2f4:	f7f5 ff9c 	bl	8000230 <memchr>
 800a2f8:	9b04      	ldr	r3, [sp, #16]
 800a2fa:	b9d0      	cbnz	r0, 800a332 <_svfiprintf_r+0xda>
 800a2fc:	06d9      	lsls	r1, r3, #27
 800a2fe:	bf44      	itt	mi
 800a300:	2220      	movmi	r2, #32
 800a302:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a306:	071a      	lsls	r2, r3, #28
 800a308:	bf44      	itt	mi
 800a30a:	222b      	movmi	r2, #43	; 0x2b
 800a30c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a310:	782a      	ldrb	r2, [r5, #0]
 800a312:	2a2a      	cmp	r2, #42	; 0x2a
 800a314:	d015      	beq.n	800a342 <_svfiprintf_r+0xea>
 800a316:	9a07      	ldr	r2, [sp, #28]
 800a318:	462f      	mov	r7, r5
 800a31a:	2000      	movs	r0, #0
 800a31c:	250a      	movs	r5, #10
 800a31e:	4639      	mov	r1, r7
 800a320:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a324:	3b30      	subs	r3, #48	; 0x30
 800a326:	2b09      	cmp	r3, #9
 800a328:	d94d      	bls.n	800a3c6 <_svfiprintf_r+0x16e>
 800a32a:	b1b8      	cbz	r0, 800a35c <_svfiprintf_r+0x104>
 800a32c:	e00f      	b.n	800a34e <_svfiprintf_r+0xf6>
 800a32e:	462f      	mov	r7, r5
 800a330:	e7b8      	b.n	800a2a4 <_svfiprintf_r+0x4c>
 800a332:	4a40      	ldr	r2, [pc, #256]	; (800a434 <_svfiprintf_r+0x1dc>)
 800a334:	1a80      	subs	r0, r0, r2
 800a336:	fa0b f000 	lsl.w	r0, fp, r0
 800a33a:	4318      	orrs	r0, r3
 800a33c:	9004      	str	r0, [sp, #16]
 800a33e:	463d      	mov	r5, r7
 800a340:	e7d3      	b.n	800a2ea <_svfiprintf_r+0x92>
 800a342:	9a03      	ldr	r2, [sp, #12]
 800a344:	1d11      	adds	r1, r2, #4
 800a346:	6812      	ldr	r2, [r2, #0]
 800a348:	9103      	str	r1, [sp, #12]
 800a34a:	2a00      	cmp	r2, #0
 800a34c:	db01      	blt.n	800a352 <_svfiprintf_r+0xfa>
 800a34e:	9207      	str	r2, [sp, #28]
 800a350:	e004      	b.n	800a35c <_svfiprintf_r+0x104>
 800a352:	4252      	negs	r2, r2
 800a354:	f043 0302 	orr.w	r3, r3, #2
 800a358:	9207      	str	r2, [sp, #28]
 800a35a:	9304      	str	r3, [sp, #16]
 800a35c:	783b      	ldrb	r3, [r7, #0]
 800a35e:	2b2e      	cmp	r3, #46	; 0x2e
 800a360:	d10c      	bne.n	800a37c <_svfiprintf_r+0x124>
 800a362:	787b      	ldrb	r3, [r7, #1]
 800a364:	2b2a      	cmp	r3, #42	; 0x2a
 800a366:	d133      	bne.n	800a3d0 <_svfiprintf_r+0x178>
 800a368:	9b03      	ldr	r3, [sp, #12]
 800a36a:	1d1a      	adds	r2, r3, #4
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	9203      	str	r2, [sp, #12]
 800a370:	2b00      	cmp	r3, #0
 800a372:	bfb8      	it	lt
 800a374:	f04f 33ff 	movlt.w	r3, #4294967295
 800a378:	3702      	adds	r7, #2
 800a37a:	9305      	str	r3, [sp, #20]
 800a37c:	4d2e      	ldr	r5, [pc, #184]	; (800a438 <_svfiprintf_r+0x1e0>)
 800a37e:	7839      	ldrb	r1, [r7, #0]
 800a380:	2203      	movs	r2, #3
 800a382:	4628      	mov	r0, r5
 800a384:	f7f5 ff54 	bl	8000230 <memchr>
 800a388:	b138      	cbz	r0, 800a39a <_svfiprintf_r+0x142>
 800a38a:	2340      	movs	r3, #64	; 0x40
 800a38c:	1b40      	subs	r0, r0, r5
 800a38e:	fa03 f000 	lsl.w	r0, r3, r0
 800a392:	9b04      	ldr	r3, [sp, #16]
 800a394:	4303      	orrs	r3, r0
 800a396:	3701      	adds	r7, #1
 800a398:	9304      	str	r3, [sp, #16]
 800a39a:	7839      	ldrb	r1, [r7, #0]
 800a39c:	4827      	ldr	r0, [pc, #156]	; (800a43c <_svfiprintf_r+0x1e4>)
 800a39e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3a2:	2206      	movs	r2, #6
 800a3a4:	1c7e      	adds	r6, r7, #1
 800a3a6:	f7f5 ff43 	bl	8000230 <memchr>
 800a3aa:	2800      	cmp	r0, #0
 800a3ac:	d038      	beq.n	800a420 <_svfiprintf_r+0x1c8>
 800a3ae:	4b24      	ldr	r3, [pc, #144]	; (800a440 <_svfiprintf_r+0x1e8>)
 800a3b0:	bb13      	cbnz	r3, 800a3f8 <_svfiprintf_r+0x1a0>
 800a3b2:	9b03      	ldr	r3, [sp, #12]
 800a3b4:	3307      	adds	r3, #7
 800a3b6:	f023 0307 	bic.w	r3, r3, #7
 800a3ba:	3308      	adds	r3, #8
 800a3bc:	9303      	str	r3, [sp, #12]
 800a3be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3c0:	444b      	add	r3, r9
 800a3c2:	9309      	str	r3, [sp, #36]	; 0x24
 800a3c4:	e76d      	b.n	800a2a2 <_svfiprintf_r+0x4a>
 800a3c6:	fb05 3202 	mla	r2, r5, r2, r3
 800a3ca:	2001      	movs	r0, #1
 800a3cc:	460f      	mov	r7, r1
 800a3ce:	e7a6      	b.n	800a31e <_svfiprintf_r+0xc6>
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	3701      	adds	r7, #1
 800a3d4:	9305      	str	r3, [sp, #20]
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	250a      	movs	r5, #10
 800a3da:	4638      	mov	r0, r7
 800a3dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3e0:	3a30      	subs	r2, #48	; 0x30
 800a3e2:	2a09      	cmp	r2, #9
 800a3e4:	d903      	bls.n	800a3ee <_svfiprintf_r+0x196>
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d0c8      	beq.n	800a37c <_svfiprintf_r+0x124>
 800a3ea:	9105      	str	r1, [sp, #20]
 800a3ec:	e7c6      	b.n	800a37c <_svfiprintf_r+0x124>
 800a3ee:	fb05 2101 	mla	r1, r5, r1, r2
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	4607      	mov	r7, r0
 800a3f6:	e7f0      	b.n	800a3da <_svfiprintf_r+0x182>
 800a3f8:	ab03      	add	r3, sp, #12
 800a3fa:	9300      	str	r3, [sp, #0]
 800a3fc:	4622      	mov	r2, r4
 800a3fe:	4b11      	ldr	r3, [pc, #68]	; (800a444 <_svfiprintf_r+0x1ec>)
 800a400:	a904      	add	r1, sp, #16
 800a402:	4640      	mov	r0, r8
 800a404:	f3af 8000 	nop.w
 800a408:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a40c:	4681      	mov	r9, r0
 800a40e:	d1d6      	bne.n	800a3be <_svfiprintf_r+0x166>
 800a410:	89a3      	ldrh	r3, [r4, #12]
 800a412:	065b      	lsls	r3, r3, #25
 800a414:	f53f af35 	bmi.w	800a282 <_svfiprintf_r+0x2a>
 800a418:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a41a:	b01d      	add	sp, #116	; 0x74
 800a41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a420:	ab03      	add	r3, sp, #12
 800a422:	9300      	str	r3, [sp, #0]
 800a424:	4622      	mov	r2, r4
 800a426:	4b07      	ldr	r3, [pc, #28]	; (800a444 <_svfiprintf_r+0x1ec>)
 800a428:	a904      	add	r1, sp, #16
 800a42a:	4640      	mov	r0, r8
 800a42c:	f000 f882 	bl	800a534 <_printf_i>
 800a430:	e7ea      	b.n	800a408 <_svfiprintf_r+0x1b0>
 800a432:	bf00      	nop
 800a434:	0800a838 	.word	0x0800a838
 800a438:	0800a83e 	.word	0x0800a83e
 800a43c:	0800a842 	.word	0x0800a842
 800a440:	00000000 	.word	0x00000000
 800a444:	0800a1a5 	.word	0x0800a1a5

0800a448 <_printf_common>:
 800a448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a44c:	4691      	mov	r9, r2
 800a44e:	461f      	mov	r7, r3
 800a450:	688a      	ldr	r2, [r1, #8]
 800a452:	690b      	ldr	r3, [r1, #16]
 800a454:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a458:	4293      	cmp	r3, r2
 800a45a:	bfb8      	it	lt
 800a45c:	4613      	movlt	r3, r2
 800a45e:	f8c9 3000 	str.w	r3, [r9]
 800a462:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a466:	4606      	mov	r6, r0
 800a468:	460c      	mov	r4, r1
 800a46a:	b112      	cbz	r2, 800a472 <_printf_common+0x2a>
 800a46c:	3301      	adds	r3, #1
 800a46e:	f8c9 3000 	str.w	r3, [r9]
 800a472:	6823      	ldr	r3, [r4, #0]
 800a474:	0699      	lsls	r1, r3, #26
 800a476:	bf42      	ittt	mi
 800a478:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a47c:	3302      	addmi	r3, #2
 800a47e:	f8c9 3000 	strmi.w	r3, [r9]
 800a482:	6825      	ldr	r5, [r4, #0]
 800a484:	f015 0506 	ands.w	r5, r5, #6
 800a488:	d107      	bne.n	800a49a <_printf_common+0x52>
 800a48a:	f104 0a19 	add.w	sl, r4, #25
 800a48e:	68e3      	ldr	r3, [r4, #12]
 800a490:	f8d9 2000 	ldr.w	r2, [r9]
 800a494:	1a9b      	subs	r3, r3, r2
 800a496:	42ab      	cmp	r3, r5
 800a498:	dc28      	bgt.n	800a4ec <_printf_common+0xa4>
 800a49a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a49e:	6822      	ldr	r2, [r4, #0]
 800a4a0:	3300      	adds	r3, #0
 800a4a2:	bf18      	it	ne
 800a4a4:	2301      	movne	r3, #1
 800a4a6:	0692      	lsls	r2, r2, #26
 800a4a8:	d42d      	bmi.n	800a506 <_printf_common+0xbe>
 800a4aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4ae:	4639      	mov	r1, r7
 800a4b0:	4630      	mov	r0, r6
 800a4b2:	47c0      	blx	r8
 800a4b4:	3001      	adds	r0, #1
 800a4b6:	d020      	beq.n	800a4fa <_printf_common+0xb2>
 800a4b8:	6823      	ldr	r3, [r4, #0]
 800a4ba:	68e5      	ldr	r5, [r4, #12]
 800a4bc:	f8d9 2000 	ldr.w	r2, [r9]
 800a4c0:	f003 0306 	and.w	r3, r3, #6
 800a4c4:	2b04      	cmp	r3, #4
 800a4c6:	bf08      	it	eq
 800a4c8:	1aad      	subeq	r5, r5, r2
 800a4ca:	68a3      	ldr	r3, [r4, #8]
 800a4cc:	6922      	ldr	r2, [r4, #16]
 800a4ce:	bf0c      	ite	eq
 800a4d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4d4:	2500      	movne	r5, #0
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	bfc4      	itt	gt
 800a4da:	1a9b      	subgt	r3, r3, r2
 800a4dc:	18ed      	addgt	r5, r5, r3
 800a4de:	f04f 0900 	mov.w	r9, #0
 800a4e2:	341a      	adds	r4, #26
 800a4e4:	454d      	cmp	r5, r9
 800a4e6:	d11a      	bne.n	800a51e <_printf_common+0xd6>
 800a4e8:	2000      	movs	r0, #0
 800a4ea:	e008      	b.n	800a4fe <_printf_common+0xb6>
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	4652      	mov	r2, sl
 800a4f0:	4639      	mov	r1, r7
 800a4f2:	4630      	mov	r0, r6
 800a4f4:	47c0      	blx	r8
 800a4f6:	3001      	adds	r0, #1
 800a4f8:	d103      	bne.n	800a502 <_printf_common+0xba>
 800a4fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a4fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a502:	3501      	adds	r5, #1
 800a504:	e7c3      	b.n	800a48e <_printf_common+0x46>
 800a506:	18e1      	adds	r1, r4, r3
 800a508:	1c5a      	adds	r2, r3, #1
 800a50a:	2030      	movs	r0, #48	; 0x30
 800a50c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a510:	4422      	add	r2, r4
 800a512:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a516:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a51a:	3302      	adds	r3, #2
 800a51c:	e7c5      	b.n	800a4aa <_printf_common+0x62>
 800a51e:	2301      	movs	r3, #1
 800a520:	4622      	mov	r2, r4
 800a522:	4639      	mov	r1, r7
 800a524:	4630      	mov	r0, r6
 800a526:	47c0      	blx	r8
 800a528:	3001      	adds	r0, #1
 800a52a:	d0e6      	beq.n	800a4fa <_printf_common+0xb2>
 800a52c:	f109 0901 	add.w	r9, r9, #1
 800a530:	e7d8      	b.n	800a4e4 <_printf_common+0x9c>
	...

0800a534 <_printf_i>:
 800a534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a538:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a53c:	460c      	mov	r4, r1
 800a53e:	7e09      	ldrb	r1, [r1, #24]
 800a540:	b085      	sub	sp, #20
 800a542:	296e      	cmp	r1, #110	; 0x6e
 800a544:	4617      	mov	r7, r2
 800a546:	4606      	mov	r6, r0
 800a548:	4698      	mov	r8, r3
 800a54a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a54c:	f000 80b3 	beq.w	800a6b6 <_printf_i+0x182>
 800a550:	d822      	bhi.n	800a598 <_printf_i+0x64>
 800a552:	2963      	cmp	r1, #99	; 0x63
 800a554:	d036      	beq.n	800a5c4 <_printf_i+0x90>
 800a556:	d80a      	bhi.n	800a56e <_printf_i+0x3a>
 800a558:	2900      	cmp	r1, #0
 800a55a:	f000 80b9 	beq.w	800a6d0 <_printf_i+0x19c>
 800a55e:	2958      	cmp	r1, #88	; 0x58
 800a560:	f000 8083 	beq.w	800a66a <_printf_i+0x136>
 800a564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a568:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a56c:	e032      	b.n	800a5d4 <_printf_i+0xa0>
 800a56e:	2964      	cmp	r1, #100	; 0x64
 800a570:	d001      	beq.n	800a576 <_printf_i+0x42>
 800a572:	2969      	cmp	r1, #105	; 0x69
 800a574:	d1f6      	bne.n	800a564 <_printf_i+0x30>
 800a576:	6820      	ldr	r0, [r4, #0]
 800a578:	6813      	ldr	r3, [r2, #0]
 800a57a:	0605      	lsls	r5, r0, #24
 800a57c:	f103 0104 	add.w	r1, r3, #4
 800a580:	d52a      	bpl.n	800a5d8 <_printf_i+0xa4>
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	6011      	str	r1, [r2, #0]
 800a586:	2b00      	cmp	r3, #0
 800a588:	da03      	bge.n	800a592 <_printf_i+0x5e>
 800a58a:	222d      	movs	r2, #45	; 0x2d
 800a58c:	425b      	negs	r3, r3
 800a58e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a592:	486f      	ldr	r0, [pc, #444]	; (800a750 <_printf_i+0x21c>)
 800a594:	220a      	movs	r2, #10
 800a596:	e039      	b.n	800a60c <_printf_i+0xd8>
 800a598:	2973      	cmp	r1, #115	; 0x73
 800a59a:	f000 809d 	beq.w	800a6d8 <_printf_i+0x1a4>
 800a59e:	d808      	bhi.n	800a5b2 <_printf_i+0x7e>
 800a5a0:	296f      	cmp	r1, #111	; 0x6f
 800a5a2:	d020      	beq.n	800a5e6 <_printf_i+0xb2>
 800a5a4:	2970      	cmp	r1, #112	; 0x70
 800a5a6:	d1dd      	bne.n	800a564 <_printf_i+0x30>
 800a5a8:	6823      	ldr	r3, [r4, #0]
 800a5aa:	f043 0320 	orr.w	r3, r3, #32
 800a5ae:	6023      	str	r3, [r4, #0]
 800a5b0:	e003      	b.n	800a5ba <_printf_i+0x86>
 800a5b2:	2975      	cmp	r1, #117	; 0x75
 800a5b4:	d017      	beq.n	800a5e6 <_printf_i+0xb2>
 800a5b6:	2978      	cmp	r1, #120	; 0x78
 800a5b8:	d1d4      	bne.n	800a564 <_printf_i+0x30>
 800a5ba:	2378      	movs	r3, #120	; 0x78
 800a5bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a5c0:	4864      	ldr	r0, [pc, #400]	; (800a754 <_printf_i+0x220>)
 800a5c2:	e055      	b.n	800a670 <_printf_i+0x13c>
 800a5c4:	6813      	ldr	r3, [r2, #0]
 800a5c6:	1d19      	adds	r1, r3, #4
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	6011      	str	r1, [r2, #0]
 800a5cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	e08c      	b.n	800a6f2 <_printf_i+0x1be>
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	6011      	str	r1, [r2, #0]
 800a5dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a5e0:	bf18      	it	ne
 800a5e2:	b21b      	sxthne	r3, r3
 800a5e4:	e7cf      	b.n	800a586 <_printf_i+0x52>
 800a5e6:	6813      	ldr	r3, [r2, #0]
 800a5e8:	6825      	ldr	r5, [r4, #0]
 800a5ea:	1d18      	adds	r0, r3, #4
 800a5ec:	6010      	str	r0, [r2, #0]
 800a5ee:	0628      	lsls	r0, r5, #24
 800a5f0:	d501      	bpl.n	800a5f6 <_printf_i+0xc2>
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	e002      	b.n	800a5fc <_printf_i+0xc8>
 800a5f6:	0668      	lsls	r0, r5, #25
 800a5f8:	d5fb      	bpl.n	800a5f2 <_printf_i+0xbe>
 800a5fa:	881b      	ldrh	r3, [r3, #0]
 800a5fc:	4854      	ldr	r0, [pc, #336]	; (800a750 <_printf_i+0x21c>)
 800a5fe:	296f      	cmp	r1, #111	; 0x6f
 800a600:	bf14      	ite	ne
 800a602:	220a      	movne	r2, #10
 800a604:	2208      	moveq	r2, #8
 800a606:	2100      	movs	r1, #0
 800a608:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a60c:	6865      	ldr	r5, [r4, #4]
 800a60e:	60a5      	str	r5, [r4, #8]
 800a610:	2d00      	cmp	r5, #0
 800a612:	f2c0 8095 	blt.w	800a740 <_printf_i+0x20c>
 800a616:	6821      	ldr	r1, [r4, #0]
 800a618:	f021 0104 	bic.w	r1, r1, #4
 800a61c:	6021      	str	r1, [r4, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d13d      	bne.n	800a69e <_printf_i+0x16a>
 800a622:	2d00      	cmp	r5, #0
 800a624:	f040 808e 	bne.w	800a744 <_printf_i+0x210>
 800a628:	4665      	mov	r5, ip
 800a62a:	2a08      	cmp	r2, #8
 800a62c:	d10b      	bne.n	800a646 <_printf_i+0x112>
 800a62e:	6823      	ldr	r3, [r4, #0]
 800a630:	07db      	lsls	r3, r3, #31
 800a632:	d508      	bpl.n	800a646 <_printf_i+0x112>
 800a634:	6923      	ldr	r3, [r4, #16]
 800a636:	6862      	ldr	r2, [r4, #4]
 800a638:	429a      	cmp	r2, r3
 800a63a:	bfde      	ittt	le
 800a63c:	2330      	movle	r3, #48	; 0x30
 800a63e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a642:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a646:	ebac 0305 	sub.w	r3, ip, r5
 800a64a:	6123      	str	r3, [r4, #16]
 800a64c:	f8cd 8000 	str.w	r8, [sp]
 800a650:	463b      	mov	r3, r7
 800a652:	aa03      	add	r2, sp, #12
 800a654:	4621      	mov	r1, r4
 800a656:	4630      	mov	r0, r6
 800a658:	f7ff fef6 	bl	800a448 <_printf_common>
 800a65c:	3001      	adds	r0, #1
 800a65e:	d14d      	bne.n	800a6fc <_printf_i+0x1c8>
 800a660:	f04f 30ff 	mov.w	r0, #4294967295
 800a664:	b005      	add	sp, #20
 800a666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a66a:	4839      	ldr	r0, [pc, #228]	; (800a750 <_printf_i+0x21c>)
 800a66c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a670:	6813      	ldr	r3, [r2, #0]
 800a672:	6821      	ldr	r1, [r4, #0]
 800a674:	1d1d      	adds	r5, r3, #4
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	6015      	str	r5, [r2, #0]
 800a67a:	060a      	lsls	r2, r1, #24
 800a67c:	d50b      	bpl.n	800a696 <_printf_i+0x162>
 800a67e:	07ca      	lsls	r2, r1, #31
 800a680:	bf44      	itt	mi
 800a682:	f041 0120 	orrmi.w	r1, r1, #32
 800a686:	6021      	strmi	r1, [r4, #0]
 800a688:	b91b      	cbnz	r3, 800a692 <_printf_i+0x15e>
 800a68a:	6822      	ldr	r2, [r4, #0]
 800a68c:	f022 0220 	bic.w	r2, r2, #32
 800a690:	6022      	str	r2, [r4, #0]
 800a692:	2210      	movs	r2, #16
 800a694:	e7b7      	b.n	800a606 <_printf_i+0xd2>
 800a696:	064d      	lsls	r5, r1, #25
 800a698:	bf48      	it	mi
 800a69a:	b29b      	uxthmi	r3, r3
 800a69c:	e7ef      	b.n	800a67e <_printf_i+0x14a>
 800a69e:	4665      	mov	r5, ip
 800a6a0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a6a4:	fb02 3311 	mls	r3, r2, r1, r3
 800a6a8:	5cc3      	ldrb	r3, [r0, r3]
 800a6aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	2900      	cmp	r1, #0
 800a6b2:	d1f5      	bne.n	800a6a0 <_printf_i+0x16c>
 800a6b4:	e7b9      	b.n	800a62a <_printf_i+0xf6>
 800a6b6:	6813      	ldr	r3, [r2, #0]
 800a6b8:	6825      	ldr	r5, [r4, #0]
 800a6ba:	6961      	ldr	r1, [r4, #20]
 800a6bc:	1d18      	adds	r0, r3, #4
 800a6be:	6010      	str	r0, [r2, #0]
 800a6c0:	0628      	lsls	r0, r5, #24
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	d501      	bpl.n	800a6ca <_printf_i+0x196>
 800a6c6:	6019      	str	r1, [r3, #0]
 800a6c8:	e002      	b.n	800a6d0 <_printf_i+0x19c>
 800a6ca:	066a      	lsls	r2, r5, #25
 800a6cc:	d5fb      	bpl.n	800a6c6 <_printf_i+0x192>
 800a6ce:	8019      	strh	r1, [r3, #0]
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	6123      	str	r3, [r4, #16]
 800a6d4:	4665      	mov	r5, ip
 800a6d6:	e7b9      	b.n	800a64c <_printf_i+0x118>
 800a6d8:	6813      	ldr	r3, [r2, #0]
 800a6da:	1d19      	adds	r1, r3, #4
 800a6dc:	6011      	str	r1, [r2, #0]
 800a6de:	681d      	ldr	r5, [r3, #0]
 800a6e0:	6862      	ldr	r2, [r4, #4]
 800a6e2:	2100      	movs	r1, #0
 800a6e4:	4628      	mov	r0, r5
 800a6e6:	f7f5 fda3 	bl	8000230 <memchr>
 800a6ea:	b108      	cbz	r0, 800a6f0 <_printf_i+0x1bc>
 800a6ec:	1b40      	subs	r0, r0, r5
 800a6ee:	6060      	str	r0, [r4, #4]
 800a6f0:	6863      	ldr	r3, [r4, #4]
 800a6f2:	6123      	str	r3, [r4, #16]
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6fa:	e7a7      	b.n	800a64c <_printf_i+0x118>
 800a6fc:	6923      	ldr	r3, [r4, #16]
 800a6fe:	462a      	mov	r2, r5
 800a700:	4639      	mov	r1, r7
 800a702:	4630      	mov	r0, r6
 800a704:	47c0      	blx	r8
 800a706:	3001      	adds	r0, #1
 800a708:	d0aa      	beq.n	800a660 <_printf_i+0x12c>
 800a70a:	6823      	ldr	r3, [r4, #0]
 800a70c:	079b      	lsls	r3, r3, #30
 800a70e:	d413      	bmi.n	800a738 <_printf_i+0x204>
 800a710:	68e0      	ldr	r0, [r4, #12]
 800a712:	9b03      	ldr	r3, [sp, #12]
 800a714:	4298      	cmp	r0, r3
 800a716:	bfb8      	it	lt
 800a718:	4618      	movlt	r0, r3
 800a71a:	e7a3      	b.n	800a664 <_printf_i+0x130>
 800a71c:	2301      	movs	r3, #1
 800a71e:	464a      	mov	r2, r9
 800a720:	4639      	mov	r1, r7
 800a722:	4630      	mov	r0, r6
 800a724:	47c0      	blx	r8
 800a726:	3001      	adds	r0, #1
 800a728:	d09a      	beq.n	800a660 <_printf_i+0x12c>
 800a72a:	3501      	adds	r5, #1
 800a72c:	68e3      	ldr	r3, [r4, #12]
 800a72e:	9a03      	ldr	r2, [sp, #12]
 800a730:	1a9b      	subs	r3, r3, r2
 800a732:	42ab      	cmp	r3, r5
 800a734:	dcf2      	bgt.n	800a71c <_printf_i+0x1e8>
 800a736:	e7eb      	b.n	800a710 <_printf_i+0x1dc>
 800a738:	2500      	movs	r5, #0
 800a73a:	f104 0919 	add.w	r9, r4, #25
 800a73e:	e7f5      	b.n	800a72c <_printf_i+0x1f8>
 800a740:	2b00      	cmp	r3, #0
 800a742:	d1ac      	bne.n	800a69e <_printf_i+0x16a>
 800a744:	7803      	ldrb	r3, [r0, #0]
 800a746:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a74a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a74e:	e76c      	b.n	800a62a <_printf_i+0xf6>
 800a750:	0800a849 	.word	0x0800a849
 800a754:	0800a85a 	.word	0x0800a85a

0800a758 <memmove>:
 800a758:	4288      	cmp	r0, r1
 800a75a:	b510      	push	{r4, lr}
 800a75c:	eb01 0302 	add.w	r3, r1, r2
 800a760:	d807      	bhi.n	800a772 <memmove+0x1a>
 800a762:	1e42      	subs	r2, r0, #1
 800a764:	4299      	cmp	r1, r3
 800a766:	d00a      	beq.n	800a77e <memmove+0x26>
 800a768:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a76c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a770:	e7f8      	b.n	800a764 <memmove+0xc>
 800a772:	4283      	cmp	r3, r0
 800a774:	d9f5      	bls.n	800a762 <memmove+0xa>
 800a776:	1881      	adds	r1, r0, r2
 800a778:	1ad2      	subs	r2, r2, r3
 800a77a:	42d3      	cmn	r3, r2
 800a77c:	d100      	bne.n	800a780 <memmove+0x28>
 800a77e:	bd10      	pop	{r4, pc}
 800a780:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a784:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a788:	e7f7      	b.n	800a77a <memmove+0x22>

0800a78a <_realloc_r>:
 800a78a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a78c:	4607      	mov	r7, r0
 800a78e:	4614      	mov	r4, r2
 800a790:	460e      	mov	r6, r1
 800a792:	b921      	cbnz	r1, 800a79e <_realloc_r+0x14>
 800a794:	4611      	mov	r1, r2
 800a796:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a79a:	f7ff bc77 	b.w	800a08c <_malloc_r>
 800a79e:	b922      	cbnz	r2, 800a7aa <_realloc_r+0x20>
 800a7a0:	f7ff fc26 	bl	8009ff0 <_free_r>
 800a7a4:	4625      	mov	r5, r4
 800a7a6:	4628      	mov	r0, r5
 800a7a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7aa:	f000 f814 	bl	800a7d6 <_malloc_usable_size_r>
 800a7ae:	42a0      	cmp	r0, r4
 800a7b0:	d20f      	bcs.n	800a7d2 <_realloc_r+0x48>
 800a7b2:	4621      	mov	r1, r4
 800a7b4:	4638      	mov	r0, r7
 800a7b6:	f7ff fc69 	bl	800a08c <_malloc_r>
 800a7ba:	4605      	mov	r5, r0
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	d0f2      	beq.n	800a7a6 <_realloc_r+0x1c>
 800a7c0:	4631      	mov	r1, r6
 800a7c2:	4622      	mov	r2, r4
 800a7c4:	f7ff fc00 	bl	8009fc8 <memcpy>
 800a7c8:	4631      	mov	r1, r6
 800a7ca:	4638      	mov	r0, r7
 800a7cc:	f7ff fc10 	bl	8009ff0 <_free_r>
 800a7d0:	e7e9      	b.n	800a7a6 <_realloc_r+0x1c>
 800a7d2:	4635      	mov	r5, r6
 800a7d4:	e7e7      	b.n	800a7a6 <_realloc_r+0x1c>

0800a7d6 <_malloc_usable_size_r>:
 800a7d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7da:	1f18      	subs	r0, r3, #4
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	bfbc      	itt	lt
 800a7e0:	580b      	ldrlt	r3, [r1, r0]
 800a7e2:	18c0      	addlt	r0, r0, r3
 800a7e4:	4770      	bx	lr
	...

0800a7e8 <_init>:
 800a7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ea:	bf00      	nop
 800a7ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ee:	bc08      	pop	{r3}
 800a7f0:	469e      	mov	lr, r3
 800a7f2:	4770      	bx	lr

0800a7f4 <_fini>:
 800a7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7f6:	bf00      	nop
 800a7f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7fa:	bc08      	pop	{r3}
 800a7fc:	469e      	mov	lr, r3
 800a7fe:	4770      	bx	lr
