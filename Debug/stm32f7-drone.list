
stm32f7-drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072e0  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080074c0  080074c0  000174c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074e0  080074e0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080074e0  080074e0  000174e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074e8  080074e8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074e8  080074e8  000174e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074ec  080074ec  000174ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080074f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  20000070  08007560  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  08007560  000203f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014263  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a2e  00000000  00000000  00034303  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001250  00000000  00000000  00036d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010e8  00000000  00000000  00037f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002494a  00000000  00000000  00039070  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f34f  00000000  00000000  0005d9ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e1ca5  00000000  00000000  0006cd09  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014e9ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d7c  00000000  00000000  0014ea2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	080074a8 	.word	0x080074a8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	080074a8 	.word	0x080074a8

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <ADC_INIT>:
/* Function Summary: The input from the ADC handler will be piped directly to the inputVar via DMA.
 * Parameters: hadc - ADC handler for particular ADC pin. inputVar - Variable you want ADC values stored into.
 */

void ADC_INIT(ADC_HandleTypeDef* hadc, uint32_t* inputVar)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc, inputVar, sizeof(*inputVar));
 800052a:	2204      	movs	r2, #4
 800052c:	6839      	ldr	r1, [r7, #0]
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f001 fbc8 	bl	8001cc4 <HAL_ADC_Start_DMA>
	HAL_ADC_Start(hadc);
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f001 fb05 	bl	8001b44 <HAL_ADC_Start>
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <ESC_INIT_CONTROLLER>:
#if defined(DSHOT150) || defined(DSHOT300) || defined(DSHOT600) || defined(DSHOT1200)

#define __DSHOT_MAKE_BYTE(__DSHOT_BYTE__, __BIT__) (__DSHOT_BYTE__ = (((__BIT__ & 0b1) == 0b1) ? DSHOT_HIGH_BIT : DSHOT_LOW_BIT))

ESC_CONTROLLER* ESC_INIT_CONTROLLER(TIM_HandleTypeDef* timer, DMA_HandleTypeDef* dma)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b084      	sub	sp, #16
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
 800054a:	6039      	str	r1, [r7, #0]
	timer->Instance->ARR = TIMER_ARR - 1;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000554:	62da      	str	r2, [r3, #44]	; 0x2c
	ESC_CONTROLLER* ESC_CONTROLLER = malloc(sizeof(ESC_CONTROLLER) * ESC_COUNT);
 8000556:	2010      	movs	r0, #16
 8000558:	f006 ff2a 	bl	80073b0 <malloc>
 800055c:	4603      	mov	r3, r0
 800055e:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < ESC_COUNT; i++)
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	e060      	b.n	8000628 <ESC_INIT_CONTROLLER+0xe6>
	{
		ESC_CONTROLLER[i].Throttle = 0;
 8000566:	68fa      	ldr	r2, [r7, #12]
 8000568:	4613      	mov	r3, r2
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	4413      	add	r3, r2
 800056e:	00db      	lsls	r3, r3, #3
 8000570:	461a      	mov	r2, r3
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	4413      	add	r3, r2
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
		ESC_CONTROLLER[i].Channel = 4*i;
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	0099      	lsls	r1, r3, #2
 800057e:	68fa      	ldr	r2, [r7, #12]
 8000580:	4613      	mov	r3, r2
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	4413      	add	r3, r2
 8000586:	00db      	lsls	r3, r3, #3
 8000588:	461a      	mov	r2, r3
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	4413      	add	r3, r2
 800058e:	460a      	mov	r2, r1
 8000590:	605a      	str	r2, [r3, #4]
		ESC_CONTROLLER[i].Number = i;
 8000592:	68fa      	ldr	r2, [r7, #12]
 8000594:	4613      	mov	r3, r2
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	4413      	add	r3, r2
 800059a:	00db      	lsls	r3, r3, #3
 800059c:	461a      	mov	r2, r3
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	4413      	add	r3, r2
 80005a2:	68fa      	ldr	r2, [r7, #12]
 80005a4:	609a      	str	r2, [r3, #8]
		ESC_CONTROLLER[i].Timer = timer;
 80005a6:	68fa      	ldr	r2, [r7, #12]
 80005a8:	4613      	mov	r3, r2
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	4413      	add	r3, r2
 80005ae:	00db      	lsls	r3, r3, #3
 80005b0:	461a      	mov	r2, r3
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	4413      	add	r3, r2
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	60da      	str	r2, [r3, #12]
		ESC_CONTROLLER[i].DMA = dma;
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	4613      	mov	r3, r2
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	4413      	add	r3, r2
 80005c2:	00db      	lsls	r3, r3, #3
 80005c4:	461a      	mov	r2, r3
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4413      	add	r3, r2
 80005ca:	683a      	ldr	r2, [r7, #0]
 80005cc:	611a      	str	r2, [r3, #16]
		ESC_CONTROLLER[i].CCR = (uint32_t) &(timer->Instance->CCR1) + (4*i);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	3334      	adds	r3, #52	; 0x34
 80005d4:	4618      	mov	r0, r3
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	4619      	mov	r1, r3
 80005dc:	68fa      	ldr	r2, [r7, #12]
 80005de:	4613      	mov	r3, r2
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	4413      	add	r3, r2
 80005e4:	00db      	lsls	r3, r3, #3
 80005e6:	461a      	mov	r2, r3
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	4413      	add	r3, r2
 80005ec:	1842      	adds	r2, r0, r1
 80005ee:	615a      	str	r2, [r3, #20]
		*((uint32_t *) ESC_CONTROLLER[i].CCR) = 0;
 80005f0:	68fa      	ldr	r2, [r7, #12]
 80005f2:	4613      	mov	r3, r2
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	4413      	add	r3, r2
 80005f8:	00db      	lsls	r3, r3, #3
 80005fa:	461a      	mov	r2, r3
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	4413      	add	r3, r2
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	461a      	mov	r2, r3
 8000604:	2300      	movs	r3, #0
 8000606:	6013      	str	r3, [r2, #0]
		HAL_TIM_PWM_Start(timer, ESC_CONTROLLER[i].Channel);
 8000608:	68fa      	ldr	r2, [r7, #12]
 800060a:	4613      	mov	r3, r2
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	4413      	add	r3, r2
 8000610:	00db      	lsls	r3, r3, #3
 8000612:	461a      	mov	r2, r3
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4413      	add	r3, r2
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	4619      	mov	r1, r3
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f005 fccd 	bl	8005fbc <HAL_TIM_PWM_Start>
	for (int i = 0; i < ESC_COUNT; i++)
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	3301      	adds	r3, #1
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	2b03      	cmp	r3, #3
 800062c:	dd9b      	ble.n	8000566 <ESC_INIT_CONTROLLER+0x24>
	}
	return ESC_CONTROLLER;
 800062e:	68bb      	ldr	r3, [r7, #8]
}
 8000630:	4618      	mov	r0, r3
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <ESC_UPDATE_THROTTLE>:

void ESC_UPDATE_THROTTLE(ESC_CONTROLLER* ESC, uint32_t throttle, uint8_t telemetry, uint8_t checksum)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b098      	sub	sp, #96	; 0x60
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	4611      	mov	r1, r2
 8000644:	461a      	mov	r2, r3
 8000646:	460b      	mov	r3, r1
 8000648:	71fb      	strb	r3, [r7, #7]
 800064a:	4613      	mov	r3, r2
 800064c:	71bb      	strb	r3, [r7, #6]
	if(!telemetry) checksum = 0;
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d101      	bne.n	8000658 <ESC_UPDATE_THROTTLE+0x20>
 8000654:	2300      	movs	r3, #0
 8000656:	71bb      	strb	r3, [r7, #6]
	// Throttle cannot exceed 11 bits, so max value is 2047
	if (throttle >= 2048) throttle = 2047;
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800065e:	d302      	bcc.n	8000666 <ESC_UPDATE_THROTTLE+0x2e>
 8000660:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000664:	60bb      	str	r3, [r7, #8]
	// 17th bit is to set CCR to 0 to keep it low between packets
	uint32_t dshotPacket[17] = {0};
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	2244      	movs	r2, #68	; 0x44
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f006 fea6 	bl	80073c0 <memset>
	dshotPacket[16] = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	657b      	str	r3, [r7, #84]	; 0x54
	// Populate checksum bits
	for (int checksumBits = 15; checksumBits >= 11; checksumBits--)
 8000678:	230f      	movs	r3, #15
 800067a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800067c:	e016      	b.n	80006ac <ESC_UPDATE_THROTTLE+0x74>
	{
		__DSHOT_MAKE_BYTE(dshotPacket[checksumBits], checksum);
 800067e:	79bb      	ldrb	r3, [r7, #6]
 8000680:	f003 0301 	and.w	r3, r3, #1
 8000684:	2b00      	cmp	r3, #0
 8000686:	d002      	beq.n	800068e <ESC_UPDATE_THROTTLE+0x56>
 8000688:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800068c:	e001      	b.n	8000692 <ESC_UPDATE_THROTTLE+0x5a>
 800068e:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8000692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800069a:	440b      	add	r3, r1
 800069c:	f843 2c4c 	str.w	r2, [r3, #-76]
		checksum = checksum >> 1;
 80006a0:	79bb      	ldrb	r3, [r7, #6]
 80006a2:	085b      	lsrs	r3, r3, #1
 80006a4:	71bb      	strb	r3, [r7, #6]
	for (int checksumBits = 15; checksumBits >= 11; checksumBits--)
 80006a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006a8:	3b01      	subs	r3, #1
 80006aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80006ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006ae:	2b0a      	cmp	r3, #10
 80006b0:	dce5      	bgt.n	800067e <ESC_UPDATE_THROTTLE+0x46>
	}
	// Populate telemetry bit
	//__DSHOT_MAKE_BYTE(dshotPacket[11], telemetry);
	// Populate throttle bits
	for (int throttleBits = 10; throttleBits >=0; throttleBits--)	{
 80006b2:	230a      	movs	r3, #10
 80006b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80006b6:	e016      	b.n	80006e6 <ESC_UPDATE_THROTTLE+0xae>
		__DSHOT_MAKE_BYTE(dshotPacket[throttleBits], throttle);
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d002      	beq.n	80006c8 <ESC_UPDATE_THROTTLE+0x90>
 80006c2:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80006c6:	e001      	b.n	80006cc <ESC_UPDATE_THROTTLE+0x94>
 80006c8:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80006cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80006d4:	440b      	add	r3, r1
 80006d6:	f843 2c4c 	str.w	r2, [r3, #-76]
		throttle = throttle >> 1;
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	085b      	lsrs	r3, r3, #1
 80006de:	60bb      	str	r3, [r7, #8]
	for (int throttleBits = 10; throttleBits >=0; throttleBits--)	{
 80006e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006e2:	3b01      	subs	r3, #1
 80006e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80006e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	dae5      	bge.n	80006b8 <ESC_UPDATE_THROTTLE+0x80>
	}
	// Setup the DMA stream to send the dshotPacket bytes to the CCR
	// Clear transfer and half transfer complete flags
	__HAL_DMA_CLEAR_FLAG(ESC->DMA, (DMA_FLAG_TCIF0_4 | DMA_FLAG_HTIF0_4 | DMA_FLAG_FEIF0_4));
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	691b      	ldr	r3, [r3, #16]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	461a      	mov	r2, r3
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <ESC_UPDATE_THROTTLE+0x14c>)
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d903      	bls.n	8000702 <ESC_UPDATE_THROTTLE+0xca>
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <ESC_UPDATE_THROTTLE+0x150>)
 80006fc:	2231      	movs	r2, #49	; 0x31
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	e018      	b.n	8000734 <ESC_UPDATE_THROTTLE+0xfc>
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	691b      	ldr	r3, [r3, #16]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	461a      	mov	r2, r3
 800070a:	4b20      	ldr	r3, [pc, #128]	; (800078c <ESC_UPDATE_THROTTLE+0x154>)
 800070c:	429a      	cmp	r2, r3
 800070e:	d903      	bls.n	8000718 <ESC_UPDATE_THROTTLE+0xe0>
 8000710:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <ESC_UPDATE_THROTTLE+0x150>)
 8000712:	2231      	movs	r2, #49	; 0x31
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	e00d      	b.n	8000734 <ESC_UPDATE_THROTTLE+0xfc>
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	691b      	ldr	r3, [r3, #16]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	461a      	mov	r2, r3
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <ESC_UPDATE_THROTTLE+0x158>)
 8000722:	429a      	cmp	r2, r3
 8000724:	d903      	bls.n	800072e <ESC_UPDATE_THROTTLE+0xf6>
 8000726:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <ESC_UPDATE_THROTTLE+0x15c>)
 8000728:	2231      	movs	r2, #49	; 0x31
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	e002      	b.n	8000734 <ESC_UPDATE_THROTTLE+0xfc>
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <ESC_UPDATE_THROTTLE+0x15c>)
 8000730:	2231      	movs	r2, #49	; 0x31
 8000732:	609a      	str	r2, [r3, #8]
	ESC->DMA->Instance->NDTR = 17;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	691b      	ldr	r3, [r3, #16]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	2211      	movs	r2, #17
 800073c:	605a      	str	r2, [r3, #4]
	ESC->DMA->Instance->M0AR = (uint32_t) &dshotPacket;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	691b      	ldr	r3, [r3, #16]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f107 0214 	add.w	r2, r7, #20
 8000748:	60da      	str	r2, [r3, #12]
	ESC->DMA->Instance->PAR = ESC->CCR;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	691b      	ldr	r3, [r3, #16]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	68fa      	ldr	r2, [r7, #12]
 8000752:	6952      	ldr	r2, [r2, #20]
 8000754:	609a      	str	r2, [r3, #8]
	__HAL_DMA_ENABLE(ESC->DMA);
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	691b      	ldr	r3, [r3, #16]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	691b      	ldr	r3, [r3, #16]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f042 0201 	orr.w	r2, r2, #1
 8000768:	601a      	str	r2, [r3, #0]
	while(ESC->DMA->Instance->CR & 0x1);
 800076a:	bf00      	nop
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	691b      	ldr	r3, [r3, #16]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f003 0301 	and.w	r3, r3, #1
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1f7      	bne.n	800076c <ESC_UPDATE_THROTTLE+0x134>
}
 800077c:	bf00      	nop
 800077e:	3760      	adds	r7, #96	; 0x60
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40026458 	.word	0x40026458
 8000788:	40026400 	.word	0x40026400
 800078c:	400260b8 	.word	0x400260b8
 8000790:	40026058 	.word	0x40026058
 8000794:	40026000 	.word	0x40026000

08000798 <XLG_INIT>:
  * @param writeSize	write here
  * @retval void
  */

void XLG_INIT(I2C_HandleTypeDef* i2c)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	uint8_t writeThis = 0b10100000;
 80007a0:	23a0      	movs	r3, #160	; 0xa0
 80007a2:	73fb      	strb	r3, [r7, #15]
	XLG_WRITE(i2c, CTRL1_XL, &writeThis, 1);
 80007a4:	f107 020f 	add.w	r2, r7, #15
 80007a8:	2301      	movs	r3, #1
 80007aa:	2110      	movs	r1, #16
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f000 f80d 	bl	80007cc <XLG_WRITE>
	writeThis = 0b10001100;
 80007b2:	238c      	movs	r3, #140	; 0x8c
 80007b4:	73fb      	strb	r3, [r7, #15]
	XLG_WRITE(i2c, CTRL2_G, &writeThis, 1);
 80007b6:	f107 020f 	add.w	r2, r7, #15
 80007ba:	2301      	movs	r3, #1
 80007bc:	2111      	movs	r1, #17
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f000 f804 	bl	80007cc <XLG_WRITE>
}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <XLG_WRITE>:

void XLG_WRITE(I2C_HandleTypeDef* i2c, uint8_t addr, uint8_t* writeByte, uint32_t writeSize)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af02      	add	r7, sp, #8
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	607a      	str	r2, [r7, #4]
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	460b      	mov	r3, r1
 80007da:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write_DMA(i2c, XLG_I2C_ADDR, addr, XLG_REG_SIZE, writeByte, writeSize);
 80007dc:	7afb      	ldrb	r3, [r7, #11]
 80007de:	b29a      	uxth	r2, r3
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	9301      	str	r3, [sp, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	2301      	movs	r3, #1
 80007ec:	21d4      	movs	r1, #212	; 0xd4
 80007ee:	68f8      	ldr	r0, [r7, #12]
 80007f0:	f002 fe3a 	bl	8003468 <HAL_I2C_Mem_Write_DMA>
	while(i2c->hdmatx->State != HAL_DMA_STATE_READY);
 80007f4:	bf00      	nop
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b01      	cmp	r3, #1
 8000802:	d1f8      	bne.n	80007f6 <XLG_WRITE+0x2a>
	i2c->State = HAL_I2C_STATE_READY;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	2220      	movs	r2, #32
 8000808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800080c:	bf00      	nop
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <XLG_READ>:

void XLG_READ(I2C_HandleTypeDef* i2c, uint8_t addr, uint8_t* readByte, uint32_t readSize)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b088      	sub	sp, #32
 8000818:	af04      	add	r7, sp, #16
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	607a      	str	r2, [r7, #4]
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	460b      	mov	r3, r1
 8000822:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Read_DMA(i2c, XLG_I2C_ADDR, addr, XLG_REG_SIZE, readByte, readSize);
 8000824:	7afb      	ldrb	r3, [r7, #11]
 8000826:	b29a      	uxth	r2, r3
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	b29b      	uxth	r3, r3
 800082c:	9301      	str	r3, [sp, #4]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	2301      	movs	r3, #1
 8000834:	21d4      	movs	r1, #212	; 0xd4
 8000836:	68f8      	ldr	r0, [r7, #12]
 8000838:	f002 ff0c 	bl	8003654 <HAL_I2C_Mem_Read_DMA>
	HAL_I2C_Mem_Read(i2c, XLG_I2C_ADDR, addr, XLG_REG_SIZE, readByte, readSize, HAL_MAX_DELAY);
 800083c:	7afb      	ldrb	r3, [r7, #11]
 800083e:	b299      	uxth	r1, r3
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	b29b      	uxth	r3, r3
 8000844:	f04f 32ff 	mov.w	r2, #4294967295
 8000848:	9202      	str	r2, [sp, #8]
 800084a:	9301      	str	r3, [sp, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	2301      	movs	r3, #1
 8000852:	460a      	mov	r2, r1
 8000854:	21d4      	movs	r1, #212	; 0xd4
 8000856:	68f8      	ldr	r0, [r7, #12]
 8000858:	f002 fcec 	bl	8003234 <HAL_I2C_Mem_Read>
	while(i2c->hdmarx->State != HAL_DMA_STATE_READY);
 800085c:	bf00      	nop
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000862:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000866:	b2db      	uxtb	r3, r3
 8000868:	2b01      	cmp	r3, #1
 800086a:	d1f8      	bne.n	800085e <XLG_READ+0x4a>
	i2c->State = HAL_I2C_STATE_READY;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	2220      	movs	r2, #32
 8000870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8000874:	bf00      	nop
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <XLG_XL_DATA_READY>:

_Bool XLG_XL_DATA_READY(I2C_HandleTypeDef* i2c)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	73fb      	strb	r3, [r7, #15]
	XLG_READ(i2c, STATUS_REG, &status, 1);
 8000888:	f107 020f 	add.w	r2, r7, #15
 800088c:	2301      	movs	r3, #1
 800088e:	211e      	movs	r1, #30
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff ffbf 	bl	8000814 <XLG_READ>
	return (status & 0b1); // Mask with XLDA bit in STATUS_REG
 8000896:	7bfb      	ldrb	r3, [r7, #15]
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	2b00      	cmp	r3, #0
 800089e:	bf14      	ite	ne
 80008a0:	2301      	movne	r3, #1
 80008a2:	2300      	moveq	r3, #0
 80008a4:	b2db      	uxtb	r3, r3
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <XLG_G_DATA_READY>:

_Bool XLG_G_DATA_READY(I2C_HandleTypeDef* i2c)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b084      	sub	sp, #16
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	73fb      	strb	r3, [r7, #15]
	XLG_READ(i2c, STATUS_REG, &status, 1);
 80008ba:	f107 020f 	add.w	r2, r7, #15
 80008be:	2301      	movs	r3, #1
 80008c0:	211e      	movs	r1, #30
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f7ff ffa6 	bl	8000814 <XLG_READ>
	return (status & 0b10); // Mask with DGA bit in STATUS_REG
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	bf14      	ite	ne
 80008d2:	2301      	movne	r3, #1
 80008d4:	2300      	moveq	r3, #0
 80008d6:	b2db      	uxtb	r3, r3
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <XLG_G_DATA_READ>:
	XLG_READ(i2c, STATUS_REG, &status, 1);
	return (status & 0b100); // Mask with TDA bit in STATUS_REG
}

void XLG_G_DATA_READ(I2C_HandleTypeDef* i2c, XLG_DATA* gData)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
	if (XLG_G_DATA_READY(i2c))
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f7ff ffdf 	bl	80008ae <XLG_G_DATA_READY>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d064      	beq.n	80009c0 <XLG_G_DATA_READ+0xe0>
	{
		gData->dataReady = true;
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	2201      	movs	r2, #1
 80008fa:	719a      	strb	r2, [r3, #6]
		uint8_t readByte[6] = {0};
 80008fc:	f107 0308 	add.w	r3, r7, #8
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	809a      	strh	r2, [r3, #4]
		XLG_READ(i2c, OUTX_H_G, &readByte[0], 1);
 8000906:	f107 0208 	add.w	r2, r7, #8
 800090a:	2301      	movs	r3, #1
 800090c:	2123      	movs	r1, #35	; 0x23
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff ff80 	bl	8000814 <XLG_READ>
		XLG_READ(i2c, OUTX_L_G, &readByte[1], 1);
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	1c5a      	adds	r2, r3, #1
 800091a:	2301      	movs	r3, #1
 800091c:	2122      	movs	r1, #34	; 0x22
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff ff78 	bl	8000814 <XLG_READ>
		XLG_READ(i2c, OUTY_H_G, &readByte[2], 1);
 8000924:	f107 0308 	add.w	r3, r7, #8
 8000928:	1c9a      	adds	r2, r3, #2
 800092a:	2301      	movs	r3, #1
 800092c:	2125      	movs	r1, #37	; 0x25
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f7ff ff70 	bl	8000814 <XLG_READ>
		XLG_READ(i2c, OUTY_L_G, &readByte[3], 1);
 8000934:	f107 0308 	add.w	r3, r7, #8
 8000938:	1cda      	adds	r2, r3, #3
 800093a:	2301      	movs	r3, #1
 800093c:	2124      	movs	r1, #36	; 0x24
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f7ff ff68 	bl	8000814 <XLG_READ>
		XLG_READ(i2c, OUTZ_H_G, &readByte[4], 1);
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	1d1a      	adds	r2, r3, #4
 800094a:	2301      	movs	r3, #1
 800094c:	2127      	movs	r1, #39	; 0x27
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff ff60 	bl	8000814 <XLG_READ>
		XLG_READ(i2c, OUTZ_L_G, &readByte[5], 1);
 8000954:	f107 0308 	add.w	r3, r7, #8
 8000958:	1d5a      	adds	r2, r3, #5
 800095a:	2301      	movs	r3, #1
 800095c:	2126      	movs	r1, #38	; 0x26
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f7ff ff58 	bl	8000814 <XLG_READ>
		gData->x = readByte[0];
 8000964:	7a3b      	ldrb	r3, [r7, #8]
 8000966:	b21a      	sxth	r2, r3
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	801a      	strh	r2, [r3, #0]
		gData->x = (gData->x << 8) | readByte[1];
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000972:	021b      	lsls	r3, r3, #8
 8000974:	b21a      	sxth	r2, r3
 8000976:	7a7b      	ldrb	r3, [r7, #9]
 8000978:	b21b      	sxth	r3, r3
 800097a:	4313      	orrs	r3, r2
 800097c:	b21a      	sxth	r2, r3
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	801a      	strh	r2, [r3, #0]
		gData->y = readByte[2];
 8000982:	7abb      	ldrb	r3, [r7, #10]
 8000984:	b21a      	sxth	r2, r3
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	805a      	strh	r2, [r3, #2]
		gData->y = (gData->y << 8) | readByte[3];
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000990:	021b      	lsls	r3, r3, #8
 8000992:	b21a      	sxth	r2, r3
 8000994:	7afb      	ldrb	r3, [r7, #11]
 8000996:	b21b      	sxth	r3, r3
 8000998:	4313      	orrs	r3, r2
 800099a:	b21a      	sxth	r2, r3
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	805a      	strh	r2, [r3, #2]
		gData->z = readByte[4];
 80009a0:	7b3b      	ldrb	r3, [r7, #12]
 80009a2:	b21a      	sxth	r2, r3
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	809a      	strh	r2, [r3, #4]
		gData->z = (gData->z << 8) | readByte[5];
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80009ae:	021b      	lsls	r3, r3, #8
 80009b0:	b21a      	sxth	r2, r3
 80009b2:	7b7b      	ldrb	r3, [r7, #13]
 80009b4:	b21b      	sxth	r3, r3
 80009b6:	4313      	orrs	r3, r2
 80009b8:	b21a      	sxth	r2, r3
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	809a      	strh	r2, [r3, #4]
	}
	else
	{
		gData->dataReady = false;
	}
}
 80009be:	e002      	b.n	80009c6 <XLG_G_DATA_READ+0xe6>
		gData->dataReady = false;
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	2200      	movs	r2, #0
 80009c4:	719a      	strb	r2, [r3, #6]
}
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <XLG_XL_DATA_READ>:

void XLG_XL_DATA_READ(I2C_HandleTypeDef* i2c, XLG_DATA* xlData)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b084      	sub	sp, #16
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
 80009d6:	6039      	str	r1, [r7, #0]
	if (XLG_XL_DATA_READY(i2c))
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f7ff ff4f 	bl	800087c <XLG_XL_DATA_READY>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d064      	beq.n	8000aae <XLG_XL_DATA_READ+0xe0>
	{
		xlData->dataReady = true;
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	2201      	movs	r2, #1
 80009e8:	719a      	strb	r2, [r3, #6]
		uint8_t readByte[6] = {0};
 80009ea:	f107 0308 	add.w	r3, r7, #8
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	809a      	strh	r2, [r3, #4]
		XLG_READ(i2c, OUTX_H_XL, &readByte[0], 1);
 80009f4:	f107 0208 	add.w	r2, r7, #8
 80009f8:	2301      	movs	r3, #1
 80009fa:	2129      	movs	r1, #41	; 0x29
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff ff09 	bl	8000814 <XLG_READ>
		XLG_READ(i2c, OUTX_L_XL, &readByte[1], 1);
 8000a02:	f107 0308 	add.w	r3, r7, #8
 8000a06:	1c5a      	adds	r2, r3, #1
 8000a08:	2301      	movs	r3, #1
 8000a0a:	2128      	movs	r1, #40	; 0x28
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f7ff ff01 	bl	8000814 <XLG_READ>
		XLG_READ(i2c, OUTY_H_XL, &readByte[2], 1);
 8000a12:	f107 0308 	add.w	r3, r7, #8
 8000a16:	1c9a      	adds	r2, r3, #2
 8000a18:	2301      	movs	r3, #1
 8000a1a:	212b      	movs	r1, #43	; 0x2b
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f7ff fef9 	bl	8000814 <XLG_READ>
		XLG_READ(i2c, OUTY_L_XL, &readByte[3], 1);
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	1cda      	adds	r2, r3, #3
 8000a28:	2301      	movs	r3, #1
 8000a2a:	212a      	movs	r1, #42	; 0x2a
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f7ff fef1 	bl	8000814 <XLG_READ>
		XLG_READ(i2c, OUTZ_H_XL, &readByte[4], 1);
 8000a32:	f107 0308 	add.w	r3, r7, #8
 8000a36:	1d1a      	adds	r2, r3, #4
 8000a38:	2301      	movs	r3, #1
 8000a3a:	212d      	movs	r1, #45	; 0x2d
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff fee9 	bl	8000814 <XLG_READ>
		XLG_READ(i2c, OUTZ_L_XL, &readByte[5], 1);
 8000a42:	f107 0308 	add.w	r3, r7, #8
 8000a46:	1d5a      	adds	r2, r3, #5
 8000a48:	2301      	movs	r3, #1
 8000a4a:	212c      	movs	r1, #44	; 0x2c
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff fee1 	bl	8000814 <XLG_READ>
		xlData->x = readByte[0];
 8000a52:	7a3b      	ldrb	r3, [r7, #8]
 8000a54:	b21a      	sxth	r2, r3
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	801a      	strh	r2, [r3, #0]
		xlData->x = (xlData->x << 8) | readByte[1];
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a60:	021b      	lsls	r3, r3, #8
 8000a62:	b21a      	sxth	r2, r3
 8000a64:	7a7b      	ldrb	r3, [r7, #9]
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	b21a      	sxth	r2, r3
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	801a      	strh	r2, [r3, #0]
		xlData->y = readByte[2];
 8000a70:	7abb      	ldrb	r3, [r7, #10]
 8000a72:	b21a      	sxth	r2, r3
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	805a      	strh	r2, [r3, #2]
		xlData->y = (xlData->y << 8) | readByte[3];
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a7e:	021b      	lsls	r3, r3, #8
 8000a80:	b21a      	sxth	r2, r3
 8000a82:	7afb      	ldrb	r3, [r7, #11]
 8000a84:	b21b      	sxth	r3, r3
 8000a86:	4313      	orrs	r3, r2
 8000a88:	b21a      	sxth	r2, r3
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	805a      	strh	r2, [r3, #2]
		xlData->z = readByte[4];
 8000a8e:	7b3b      	ldrb	r3, [r7, #12]
 8000a90:	b21a      	sxth	r2, r3
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	809a      	strh	r2, [r3, #4]
		xlData->z = (xlData->z << 8) | readByte[5];
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a9c:	021b      	lsls	r3, r3, #8
 8000a9e:	b21a      	sxth	r2, r3
 8000aa0:	7b7b      	ldrb	r3, [r7, #13]
 8000aa2:	b21b      	sxth	r3, r3
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	b21a      	sxth	r2, r3
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	809a      	strh	r2, [r3, #4]
	}
	else
	{
		xlData->dataReady = false;
	}
}
 8000aac:	e002      	b.n	8000ab4 <XLG_XL_DATA_READ+0xe6>
		xlData->dataReady = false;
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	719a      	strb	r2, [r3, #6]
}
 8000ab4:	bf00      	nop
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac2:	f000 ff9e 	bl	8001a02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac6:	f000 f86f 	bl	8000ba8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aca:	f000 fb1f 	bl	800110c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ace:	f000 fadb 	bl	8001088 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000ad2:	f000 faa1 	bl	8001018 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8000ad6:	f000 facf 	bl	8001078 <MX_USB_OTG_FS_USB_Init>
  MX_TIM4_Init();
 8000ada:	f000 fa0b 	bl	8000ef4 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000ade:	f000 f8fb 	bl	8000cd8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000ae2:	f000 f94b 	bl	8000d7c <MX_I2C1_Init>
  MX_TIM3_Init();
 8000ae6:	f000 f989 	bl	8000dfc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  ADC_INIT(&hadc1, &throttlePot);
 8000aea:	4923      	ldr	r1, [pc, #140]	; (8000b78 <main+0xbc>)
 8000aec:	4823      	ldr	r0, [pc, #140]	; (8000b7c <main+0xc0>)
 8000aee:	f7ff fd17 	bl	8000520 <ADC_INIT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000af2:	2100      	movs	r1, #0
 8000af4:	4822      	ldr	r0, [pc, #136]	; (8000b80 <main+0xc4>)
 8000af6:	f005 fa61 	bl	8005fbc <HAL_TIM_PWM_Start>
  ESC_CONTROLLER* myESCSet = ESC_INIT_CONTROLLER(&htim3, &hdma_tim4_ch1);
 8000afa:	4922      	ldr	r1, [pc, #136]	; (8000b84 <main+0xc8>)
 8000afc:	4822      	ldr	r0, [pc, #136]	; (8000b88 <main+0xcc>)
 8000afe:	f7ff fd20 	bl	8000542 <ESC_INIT_CONTROLLER>
 8000b02:	6078      	str	r0, [r7, #4]
  XLG_INIT(&hi2c1);
 8000b04:	4821      	ldr	r0, [pc, #132]	; (8000b8c <main+0xd0>)
 8000b06:	f7ff fe47 	bl	8000798 <XLG_INIT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  XLG_G_DATA_READ(&hi2c1, &gData);
 8000b0a:	4921      	ldr	r1, [pc, #132]	; (8000b90 <main+0xd4>)
 8000b0c:	481f      	ldr	r0, [pc, #124]	; (8000b8c <main+0xd0>)
 8000b0e:	f7ff fee7 	bl	80008e0 <XLG_G_DATA_READ>
	  XLG_XL_DATA_READ(&hi2c1, &xlData);
 8000b12:	4920      	ldr	r1, [pc, #128]	; (8000b94 <main+0xd8>)
 8000b14:	481d      	ldr	r0, [pc, #116]	; (8000b8c <main+0xd0>)
 8000b16:	f7ff ff5a 	bl	80009ce <XLG_XL_DATA_READ>
//		  sprintf((char*)buf, "%i %i %i %i %i %i\r\n", xlData.x, xlData.y, xlData.z,
//		  	  	  	  	  	  	  	  	  	  	  	   gData.x, gData.y, gData.z);
//		  HAL_UART_Transmit(&huart3, buf, strlen((char*)buf), HAL_MAX_DELAY);
//	  }
//	  DSHOT_ADC_CONV(throttle, throttlePot);
	  throttle++;
 8000b1a:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <main+0xdc>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	4a1d      	ldr	r2, [pc, #116]	; (8000b98 <main+0xdc>)
 8000b22:	6013      	str	r3, [r2, #0]
	  if(throttle > 3000) throttle = 0;
 8000b24:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <main+0xdc>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d902      	bls.n	8000b36 <main+0x7a>
 8000b30:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <main+0xdc>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
	  ESC_UPDATE_THROTTLE(&myESCSet[motorNum], throttle, telemetry, checksum);
 8000b36:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <main+0xe0>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	4413      	add	r3, r2
 8000b42:	00db      	lsls	r3, r3, #3
 8000b44:	461a      	mov	r2, r3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	1898      	adds	r0, r3, r2
 8000b4a:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <main+0xdc>)
 8000b4c:	6819      	ldr	r1, [r3, #0]
 8000b4e:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <main+0xe4>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <main+0xe8>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	f7ff fd6e 	bl	8000638 <ESC_UPDATE_THROTTLE>
	  motorNum++;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <main+0xe0>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	3301      	adds	r3, #1
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <main+0xe0>)
 8000b66:	701a      	strb	r2, [r3, #0]
	  if (motorNum > 3) motorNum = 0;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <main+0xe0>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b03      	cmp	r3, #3
 8000b6e:	d9cc      	bls.n	8000b0a <main+0x4e>
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <main+0xe0>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]
	  XLG_G_DATA_READ(&hi2c1, &gData);
 8000b76:	e7c8      	b.n	8000b0a <main+0x4e>
 8000b78:	200003dc 	.word	0x200003dc
 8000b7c:	20000254 	.word	0x20000254
 8000b80:	200000a8 	.word	0x200000a8
 8000b84:	2000037c 	.word	0x2000037c
 8000b88:	20000214 	.word	0x20000214
 8000b8c:	200001c8 	.word	0x200001c8
 8000b90:	2000029c 	.word	0x2000029c
 8000b94:	200003e0 	.word	0x200003e0
 8000b98:	2000008c 	.word	0x2000008c
 8000b9c:	20000098 	.word	0x20000098
 8000ba0:	20000094 	.word	0x20000094
 8000ba4:	20000090 	.word	0x20000090

08000ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b0b4      	sub	sp, #208	; 0xd0
 8000bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000bb2:	2230      	movs	r2, #48	; 0x30
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f006 fc02 	bl	80073c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bbc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	2280      	movs	r2, #128	; 0x80
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f006 fbf3 	bl	80073c0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000bda:	f004 f955 	bl	8004e88 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bde:	4b3b      	ldr	r3, [pc, #236]	; (8000ccc <SystemClock_Config+0x124>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	4a3a      	ldr	r2, [pc, #232]	; (8000ccc <SystemClock_Config+0x124>)
 8000be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bea:	4b38      	ldr	r3, [pc, #224]	; (8000ccc <SystemClock_Config+0x124>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bf6:	4b36      	ldr	r3, [pc, #216]	; (8000cd0 <SystemClock_Config+0x128>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a35      	ldr	r2, [pc, #212]	; (8000cd0 <SystemClock_Config+0x128>)
 8000bfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c00:	6013      	str	r3, [r2, #0]
 8000c02:	4b33      	ldr	r3, [pc, #204]	; (8000cd0 <SystemClock_Config+0x128>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c14:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c2a:	2308      	movs	r3, #8
 8000c2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000c30:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000c34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000c3e:	2309      	movs	r3, #9
 8000c40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c44:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f004 f97d 	bl	8004f48 <HAL_RCC_OscConfig>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000c54:	f000 fb4e 	bl	80012f4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c58:	f004 f926 	bl	8004ea8 <HAL_PWREx_EnableOverDrive>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000c62:	f000 fb47 	bl	80012f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c66:	230f      	movs	r3, #15
 8000c68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c78:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000c88:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000c8c:	2107      	movs	r1, #7
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f004 fbfe 	bl	8005490 <HAL_RCC_ClockConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000c9a:	f000 fb2b 	bl	80012f4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <SystemClock_Config+0x12c>)
 8000ca0:	60fb      	str	r3, [r7, #12]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	66bb      	str	r3, [r7, #104]	; 0x68
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f004 fde3 	bl	8005880 <HAL_RCCEx_PeriphCLKConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000cc0:	f000 fb18 	bl	80012f4 <Error_Handler>
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	37d0      	adds	r7, #208	; 0xd0
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40007000 	.word	0x40007000
 8000cd4:	00204100 	.word	0x00204100

08000cd8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cde:	463b      	mov	r3, r7
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000cea:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <MX_ADC1_Init+0x98>)
 8000cec:	4a21      	ldr	r2, [pc, #132]	; (8000d74 <MX_ADC1_Init+0x9c>)
 8000cee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000cf0:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <MX_ADC1_Init+0x98>)
 8000cf2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000cf6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cf8:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <MX_ADC1_Init+0x98>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <MX_ADC1_Init+0x98>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d04:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <MX_ADC1_Init+0x98>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d0a:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <MX_ADC1_Init+0x98>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <MX_ADC1_Init+0x98>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <MX_ADC1_Init+0x98>)
 8000d1a:	4a17      	ldr	r2, [pc, #92]	; (8000d78 <MX_ADC1_Init+0xa0>)
 8000d1c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <MX_ADC1_Init+0x98>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <MX_ADC1_Init+0x98>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <MX_ADC1_Init+0x98>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <MX_ADC1_Init+0x98>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d38:	480d      	ldr	r0, [pc, #52]	; (8000d70 <MX_ADC1_Init+0x98>)
 8000d3a:	f000 febf 	bl	8001abc <HAL_ADC_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d44:	f000 fad6 	bl	80012f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000d48:	2309      	movs	r3, #9
 8000d4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d54:	463b      	mov	r3, r7
 8000d56:	4619      	mov	r1, r3
 8000d58:	4805      	ldr	r0, [pc, #20]	; (8000d70 <MX_ADC1_Init+0x98>)
 8000d5a:	f001 f8ab 	bl	8001eb4 <HAL_ADC_ConfigChannel>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d64:	f000 fac6 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000254 	.word	0x20000254
 8000d74:	40012000 	.word	0x40012000
 8000d78:	0f000001 	.word	0x0f000001

08000d7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d80:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000d82:	4a1c      	ldr	r2, [pc, #112]	; (8000df4 <MX_I2C1_Init+0x78>)
 8000d84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000d86:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000d88:	4a1b      	ldr	r2, [pc, #108]	; (8000df8 <MX_I2C1_Init+0x7c>)
 8000d8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 212;
 8000d8c:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000d8e:	22d4      	movs	r2, #212	; 0xd4
 8000d90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d92:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d98:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d9e:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000db6:	480e      	ldr	r0, [pc, #56]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000db8:	f002 f9ac 	bl	8003114 <HAL_I2C_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dc2:	f000 fa97 	bl	80012f4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4809      	ldr	r0, [pc, #36]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000dca:	f003 ffc6 	bl	8004d5a <HAL_I2CEx_ConfigAnalogFilter>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000dd4:	f000 fa8e 	bl	80012f4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4805      	ldr	r0, [pc, #20]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000ddc:	f004 f808 	bl	8004df0 <HAL_I2CEx_ConfigDigitalFilter>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000de6:	f000 fa85 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200001c8 	.word	0x200001c8
 8000df4:	40005400 	.word	0x40005400
 8000df8:	20404768 	.word	0x20404768

08000dfc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e0e:	463b      	mov	r3, r7
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
 8000e1c:	615a      	str	r2, [r3, #20]
 8000e1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e20:	4b32      	ldr	r3, [pc, #200]	; (8000eec <MX_TIM3_Init+0xf0>)
 8000e22:	4a33      	ldr	r2, [pc, #204]	; (8000ef0 <MX_TIM3_Init+0xf4>)
 8000e24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e26:	4b31      	ldr	r3, [pc, #196]	; (8000eec <MX_TIM3_Init+0xf0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2c:	4b2f      	ldr	r3, [pc, #188]	; (8000eec <MX_TIM3_Init+0xf0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 359;
 8000e32:	4b2e      	ldr	r3, [pc, #184]	; (8000eec <MX_TIM3_Init+0xf0>)
 8000e34:	f240 1267 	movw	r2, #359	; 0x167
 8000e38:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3a:	4b2c      	ldr	r3, [pc, #176]	; (8000eec <MX_TIM3_Init+0xf0>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e40:	4b2a      	ldr	r3, [pc, #168]	; (8000eec <MX_TIM3_Init+0xf0>)
 8000e42:	2280      	movs	r2, #128	; 0x80
 8000e44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e46:	4829      	ldr	r0, [pc, #164]	; (8000eec <MX_TIM3_Init+0xf0>)
 8000e48:	f005 f88d 	bl	8005f66 <HAL_TIM_PWM_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000e52:	f000 fa4f 	bl	80012f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	4619      	mov	r1, r3
 8000e64:	4821      	ldr	r0, [pc, #132]	; (8000eec <MX_TIM3_Init+0xf0>)
 8000e66:	f005 fda7 	bl	80069b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000e70:	f000 fa40 	bl	80012f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e74:	2360      	movs	r3, #96	; 0x60
 8000e76:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e84:	463b      	mov	r3, r7
 8000e86:	2200      	movs	r2, #0
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4818      	ldr	r0, [pc, #96]	; (8000eec <MX_TIM3_Init+0xf0>)
 8000e8c:	f005 f958 	bl	8006140 <HAL_TIM_PWM_ConfigChannel>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000e96:	f000 fa2d 	bl	80012f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	2204      	movs	r2, #4
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4812      	ldr	r0, [pc, #72]	; (8000eec <MX_TIM3_Init+0xf0>)
 8000ea2:	f005 f94d 	bl	8006140 <HAL_TIM_PWM_ConfigChannel>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000eac:	f000 fa22 	bl	80012f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	2208      	movs	r2, #8
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	480d      	ldr	r0, [pc, #52]	; (8000eec <MX_TIM3_Init+0xf0>)
 8000eb8:	f005 f942 	bl	8006140 <HAL_TIM_PWM_ConfigChannel>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8000ec2:	f000 fa17 	bl	80012f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	220c      	movs	r2, #12
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4807      	ldr	r0, [pc, #28]	; (8000eec <MX_TIM3_Init+0xf0>)
 8000ece:	f005 f937 	bl	8006140 <HAL_TIM_PWM_ConfigChannel>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8000ed8:	f000 fa0c 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000edc:	4803      	ldr	r0, [pc, #12]	; (8000eec <MX_TIM3_Init+0xf0>)
 8000ede:	f000 fbe5 	bl	80016ac <HAL_TIM_MspPostInit>

}
 8000ee2:	bf00      	nop
 8000ee4:	3728      	adds	r7, #40	; 0x28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000214 	.word	0x20000214
 8000ef0:	40000400 	.word	0x40000400

08000ef4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f06:	463b      	mov	r3, r7
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
 8000f14:	615a      	str	r2, [r3, #20]
 8000f16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f18:	4b3d      	ldr	r3, [pc, #244]	; (8001010 <MX_TIM4_Init+0x11c>)
 8000f1a:	4a3e      	ldr	r2, [pc, #248]	; (8001014 <MX_TIM4_Init+0x120>)
 8000f1c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f1e:	4b3c      	ldr	r3, [pc, #240]	; (8001010 <MX_TIM4_Init+0x11c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f24:	4b3a      	ldr	r3, [pc, #232]	; (8001010 <MX_TIM4_Init+0x11c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 359;
 8000f2a:	4b39      	ldr	r3, [pc, #228]	; (8001010 <MX_TIM4_Init+0x11c>)
 8000f2c:	f240 1267 	movw	r2, #359	; 0x167
 8000f30:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f32:	4b37      	ldr	r3, [pc, #220]	; (8001010 <MX_TIM4_Init+0x11c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f38:	4b35      	ldr	r3, [pc, #212]	; (8001010 <MX_TIM4_Init+0x11c>)
 8000f3a:	2280      	movs	r2, #128	; 0x80
 8000f3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000f3e:	4834      	ldr	r0, [pc, #208]	; (8001010 <MX_TIM4_Init+0x11c>)
 8000f40:	f004 ffe6 	bl	8005f10 <HAL_TIM_OC_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000f4a:	f000 f9d3 	bl	80012f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f4e:	4830      	ldr	r0, [pc, #192]	; (8001010 <MX_TIM4_Init+0x11c>)
 8000f50:	f005 f809 	bl	8005f66 <HAL_TIM_PWM_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8000f5a:	f000 f9cb 	bl	80012f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f66:	f107 031c 	add.w	r3, r7, #28
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4828      	ldr	r0, [pc, #160]	; (8001010 <MX_TIM4_Init+0x11c>)
 8000f6e:	f005 fd23 	bl	80069b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8000f78:	f000 f9bc 	bl	80012f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000f7c:	2310      	movs	r3, #16
 8000f7e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 8000f80:	2301      	movs	r3, #1
 8000f82:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	2200      	movs	r2, #0
 8000f90:	4619      	mov	r1, r3
 8000f92:	481f      	ldr	r0, [pc, #124]	; (8001010 <MX_TIM4_Init+0x11c>)
 8000f94:	f005 f856 	bl	8006044 <HAL_TIM_OC_ConfigChannel>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000f9e:	f000 f9a9 	bl	80012f4 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_1);
 8000fa2:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <MX_TIM4_Init+0x11c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	699a      	ldr	r2, [r3, #24]
 8000fa8:	4b19      	ldr	r3, [pc, #100]	; (8001010 <MX_TIM4_Init+0x11c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f042 0208 	orr.w	r2, r2, #8
 8000fb0:	619a      	str	r2, [r3, #24]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fb2:	2360      	movs	r3, #96	; 0x60
 8000fb4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fba:	463b      	mov	r3, r7
 8000fbc:	2204      	movs	r2, #4
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4813      	ldr	r0, [pc, #76]	; (8001010 <MX_TIM4_Init+0x11c>)
 8000fc2:	f005 f8bd 	bl	8006140 <HAL_TIM_PWM_ConfigChannel>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8000fcc:	f000 f992 	bl	80012f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	2208      	movs	r2, #8
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	480e      	ldr	r0, [pc, #56]	; (8001010 <MX_TIM4_Init+0x11c>)
 8000fd8:	f005 f8b2 	bl	8006140 <HAL_TIM_PWM_ConfigChannel>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 8000fe2:	f000 f987 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  // Set DMA Transfers to 17 with DBL and destination to CCR1 (15) with DBA
  htim4.Instance->DCR =  TIM_DCR_DBA_1 | TIM_DCR_DBA_2 | TIM_DCR_DBA_3; // Transfer at CCR2, 1 transfer
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <MX_TIM4_Init+0x11c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	220e      	movs	r2, #14
 8000fec:	649a      	str	r2, [r3, #72]	; 0x48
  // Enable Update DMA Request
  htim4.Instance->DIER = TIM_DIER_UDE;
 8000fee:	4b08      	ldr	r3, [pc, #32]	; (8001010 <MX_TIM4_Init+0x11c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ff6:	60da      	str	r2, [r3, #12]
  // Enable DMA requests on CH1
  htim4.Instance->DIER = TIM_DIER_CC1DE;
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <MX_TIM4_Init+0x11c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001000:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001002:	4803      	ldr	r0, [pc, #12]	; (8001010 <MX_TIM4_Init+0x11c>)
 8001004:	f000 fb52 	bl	80016ac <HAL_TIM_MspPostInit>

}
 8001008:	bf00      	nop
 800100a:	3728      	adds	r7, #40	; 0x28
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200000a8 	.word	0x200000a8
 8001014:	40000800 	.word	0x40000800

08001018 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <MX_USART3_UART_Init+0x58>)
 800101e:	4a15      	ldr	r2, [pc, #84]	; (8001074 <MX_USART3_UART_Init+0x5c>)
 8001020:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001022:	4b13      	ldr	r3, [pc, #76]	; (8001070 <MX_USART3_UART_Init+0x58>)
 8001024:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001028:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MX_USART3_UART_Init+0x58>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001030:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <MX_USART3_UART_Init+0x58>)
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <MX_USART3_UART_Init+0x58>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <MX_USART3_UART_Init+0x58>)
 800103e:	220c      	movs	r2, #12
 8001040:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <MX_USART3_UART_Init+0x58>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <MX_USART3_UART_Init+0x58>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <MX_USART3_UART_Init+0x58>)
 8001050:	2200      	movs	r2, #0
 8001052:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <MX_USART3_UART_Init+0x58>)
 8001056:	2200      	movs	r2, #0
 8001058:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_USART3_UART_Init+0x58>)
 800105c:	f005 fd3a 	bl	8006ad4 <HAL_UART_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001066:	f000 f945 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200000e8 	.word	0x200000e8
 8001074:	40004800 	.word	0x40004800

08001078 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800108e:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <MX_DMA_Init+0x80>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a1d      	ldr	r2, [pc, #116]	; (8001108 <MX_DMA_Init+0x80>)
 8001094:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <MX_DMA_Init+0x80>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010a6:	4b18      	ldr	r3, [pc, #96]	; (8001108 <MX_DMA_Init+0x80>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a17      	ldr	r2, [pc, #92]	; (8001108 <MX_DMA_Init+0x80>)
 80010ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <MX_DMA_Init+0x80>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	200b      	movs	r0, #11
 80010c4:	f001 fa97 	bl	80025f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80010c8:	200b      	movs	r0, #11
 80010ca:	f001 fab0 	bl	800262e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	2010      	movs	r0, #16
 80010d4:	f001 fa8f 	bl	80025f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80010d8:	2010      	movs	r0, #16
 80010da:	f001 faa8 	bl	800262e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	2011      	movs	r0, #17
 80010e4:	f001 fa87 	bl	80025f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80010e8:	2011      	movs	r0, #17
 80010ea:	f001 faa0 	bl	800262e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	203c      	movs	r0, #60	; 0x3c
 80010f4:	f001 fa7f 	bl	80025f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80010f8:	203c      	movs	r0, #60	; 0x3c
 80010fa:	f001 fa98 	bl	800262e <HAL_NVIC_EnableIRQ>

}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800

0800110c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08c      	sub	sp, #48	; 0x30
 8001110:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001122:	4b62      	ldr	r3, [pc, #392]	; (80012ac <MX_GPIO_Init+0x1a0>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a61      	ldr	r2, [pc, #388]	; (80012ac <MX_GPIO_Init+0x1a0>)
 8001128:	f043 0304 	orr.w	r3, r3, #4
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b5f      	ldr	r3, [pc, #380]	; (80012ac <MX_GPIO_Init+0x1a0>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	61bb      	str	r3, [r7, #24]
 8001138:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800113a:	4b5c      	ldr	r3, [pc, #368]	; (80012ac <MX_GPIO_Init+0x1a0>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a5b      	ldr	r2, [pc, #364]	; (80012ac <MX_GPIO_Init+0x1a0>)
 8001140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b59      	ldr	r3, [pc, #356]	; (80012ac <MX_GPIO_Init+0x1a0>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	4b56      	ldr	r3, [pc, #344]	; (80012ac <MX_GPIO_Init+0x1a0>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a55      	ldr	r2, [pc, #340]	; (80012ac <MX_GPIO_Init+0x1a0>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b53      	ldr	r3, [pc, #332]	; (80012ac <MX_GPIO_Init+0x1a0>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800116a:	4b50      	ldr	r3, [pc, #320]	; (80012ac <MX_GPIO_Init+0x1a0>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a4f      	ldr	r2, [pc, #316]	; (80012ac <MX_GPIO_Init+0x1a0>)
 8001170:	f043 0302 	orr.w	r3, r3, #2
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b4d      	ldr	r3, [pc, #308]	; (80012ac <MX_GPIO_Init+0x1a0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001182:	4b4a      	ldr	r3, [pc, #296]	; (80012ac <MX_GPIO_Init+0x1a0>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a49      	ldr	r2, [pc, #292]	; (80012ac <MX_GPIO_Init+0x1a0>)
 8001188:	f043 0320 	orr.w	r3, r3, #32
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b47      	ldr	r3, [pc, #284]	; (80012ac <MX_GPIO_Init+0x1a0>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0320 	and.w	r3, r3, #32
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800119a:	4b44      	ldr	r3, [pc, #272]	; (80012ac <MX_GPIO_Init+0x1a0>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a43      	ldr	r2, [pc, #268]	; (80012ac <MX_GPIO_Init+0x1a0>)
 80011a0:	f043 0308 	orr.w	r3, r3, #8
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b41      	ldr	r3, [pc, #260]	; (80012ac <MX_GPIO_Init+0x1a0>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011b2:	4b3e      	ldr	r3, [pc, #248]	; (80012ac <MX_GPIO_Init+0x1a0>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a3d      	ldr	r2, [pc, #244]	; (80012ac <MX_GPIO_Init+0x1a0>)
 80011b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b3b      	ldr	r3, [pc, #236]	; (80012ac <MX_GPIO_Init+0x1a0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80011d0:	4837      	ldr	r0, [pc, #220]	; (80012b0 <MX_GPIO_Init+0x1a4>)
 80011d2:	f001 ff85 	bl	80030e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2140      	movs	r1, #64	; 0x40
 80011da:	4836      	ldr	r0, [pc, #216]	; (80012b4 <MX_GPIO_Init+0x1a8>)
 80011dc:	f001 ff80 	bl	80030e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011e6:	4b34      	ldr	r3, [pc, #208]	; (80012b8 <MX_GPIO_Init+0x1ac>)
 80011e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	4619      	mov	r1, r3
 80011f4:	4831      	ldr	r0, [pc, #196]	; (80012bc <MX_GPIO_Init+0x1b0>)
 80011f6:	f001 fdd9 	bl	8002dac <HAL_GPIO_Init>

  /*Configure GPIO pins : PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80011fa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80011fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001208:	f107 031c 	add.w	r3, r7, #28
 800120c:	4619      	mov	r1, r3
 800120e:	482c      	ldr	r0, [pc, #176]	; (80012c0 <MX_GPIO_Init+0x1b4>)
 8001210:	f001 fdcc 	bl	8002dac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001214:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121a:	2301      	movs	r3, #1
 800121c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001226:	f107 031c 	add.w	r3, r7, #28
 800122a:	4619      	mov	r1, r3
 800122c:	4820      	ldr	r0, [pc, #128]	; (80012b0 <MX_GPIO_Init+0x1a4>)
 800122e:	f001 fdbd 	bl	8002dac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001232:	2340      	movs	r3, #64	; 0x40
 8001234:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001236:	2301      	movs	r3, #1
 8001238:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001242:	f107 031c 	add.w	r3, r7, #28
 8001246:	4619      	mov	r1, r3
 8001248:	481a      	ldr	r0, [pc, #104]	; (80012b4 <MX_GPIO_Init+0x1a8>)
 800124a:	f001 fdaf 	bl	8002dac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800124e:	2380      	movs	r3, #128	; 0x80
 8001250:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	4619      	mov	r1, r3
 8001260:	4814      	ldr	r0, [pc, #80]	; (80012b4 <MX_GPIO_Init+0x1a8>)
 8001262:	f001 fda3 	bl	8002dac <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin PA10 USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|GPIO_PIN_10|USB_DM_Pin|USB_DP_Pin;
 8001266:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800126a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001274:	2303      	movs	r3, #3
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001278:	230a      	movs	r3, #10
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127c:	f107 031c 	add.w	r3, r7, #28
 8001280:	4619      	mov	r1, r3
 8001282:	4810      	ldr	r0, [pc, #64]	; (80012c4 <MX_GPIO_Init+0x1b8>)
 8001284:	f001 fd92 	bl	8002dac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001288:	f44f 7300 	mov.w	r3, #512	; 0x200
 800128c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128e:	2300      	movs	r3, #0
 8001290:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	4619      	mov	r1, r3
 800129c:	4809      	ldr	r0, [pc, #36]	; (80012c4 <MX_GPIO_Init+0x1b8>)
 800129e:	f001 fd85 	bl	8002dac <HAL_GPIO_Init>

}
 80012a2:	bf00      	nop
 80012a4:	3730      	adds	r7, #48	; 0x30
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020400 	.word	0x40020400
 80012b4:	40021800 	.word	0x40021800
 80012b8:	10110000 	.word	0x10110000
 80012bc:	40020800 	.word	0x40020800
 80012c0:	40021400 	.word	0x40021400
 80012c4:	40020000 	.word	0x40020000

080012c8 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
    void HAL_ADC_ConvHalfCpltCallback (ADC_HandleTypeDef* hadc)
    {
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	__NOP();
 80012d0:	bf00      	nop
    }
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <HAL_ADC_ConvCpltCallback>:

    void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef* hadc)
    {
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
    __NOP();
 80012e6:	bf00      	nop
    }
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800130a:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <HAL_MspInit+0x44>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <HAL_MspInit+0x44>)
 8001310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001314:	6413      	str	r3, [r2, #64]	; 0x40
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <HAL_MspInit+0x44>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <HAL_MspInit+0x44>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	4a08      	ldr	r2, [pc, #32]	; (8001348 <HAL_MspInit+0x44>)
 8001328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800132c:	6453      	str	r3, [r2, #68]	; 0x44
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_MspInit+0x44>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800

0800134c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a31      	ldr	r2, [pc, #196]	; (8001430 <HAL_ADC_MspInit+0xe4>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d15c      	bne.n	8001428 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800136e:	4b31      	ldr	r3, [pc, #196]	; (8001434 <HAL_ADC_MspInit+0xe8>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	4a30      	ldr	r2, [pc, #192]	; (8001434 <HAL_ADC_MspInit+0xe8>)
 8001374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001378:	6453      	str	r3, [r2, #68]	; 0x44
 800137a:	4b2e      	ldr	r3, [pc, #184]	; (8001434 <HAL_ADC_MspInit+0xe8>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	4b2b      	ldr	r3, [pc, #172]	; (8001434 <HAL_ADC_MspInit+0xe8>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a2a      	ldr	r2, [pc, #168]	; (8001434 <HAL_ADC_MspInit+0xe8>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b28      	ldr	r3, [pc, #160]	; (8001434 <HAL_ADC_MspInit+0xe8>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_THROTTLE_CONTROL_Pin;
 800139e:	2302      	movs	r3, #2
 80013a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a2:	2303      	movs	r3, #3
 80013a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_THROTTLE_CONTROL_GPIO_Port, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	4821      	ldr	r0, [pc, #132]	; (8001438 <HAL_ADC_MspInit+0xec>)
 80013b2:	f001 fcfb 	bl	8002dac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80013b6:	4b21      	ldr	r3, [pc, #132]	; (800143c <HAL_ADC_MspInit+0xf0>)
 80013b8:	4a21      	ldr	r2, [pc, #132]	; (8001440 <HAL_ADC_MspInit+0xf4>)
 80013ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80013bc:	4b1f      	ldr	r3, [pc, #124]	; (800143c <HAL_ADC_MspInit+0xf0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013c2:	4b1e      	ldr	r3, [pc, #120]	; (800143c <HAL_ADC_MspInit+0xf0>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c8:	4b1c      	ldr	r3, [pc, #112]	; (800143c <HAL_ADC_MspInit+0xf0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 80013ce:	4b1b      	ldr	r3, [pc, #108]	; (800143c <HAL_ADC_MspInit+0xf0>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013d4:	4b19      	ldr	r3, [pc, #100]	; (800143c <HAL_ADC_MspInit+0xf0>)
 80013d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013da:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <HAL_ADC_MspInit+0xf0>)
 80013de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013e2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80013e4:	4b15      	ldr	r3, [pc, #84]	; (800143c <HAL_ADC_MspInit+0xf0>)
 80013e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ea:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80013ec:	4b13      	ldr	r3, [pc, #76]	; (800143c <HAL_ADC_MspInit+0xf0>)
 80013ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013f2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <HAL_ADC_MspInit+0xf0>)
 80013f6:	2204      	movs	r2, #4
 80013f8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <HAL_ADC_MspInit+0xf0>)
 80013fc:	2203      	movs	r2, #3
 80013fe:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001400:	4b0e      	ldr	r3, [pc, #56]	; (800143c <HAL_ADC_MspInit+0xf0>)
 8001402:	2200      	movs	r2, #0
 8001404:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001406:	4b0d      	ldr	r3, [pc, #52]	; (800143c <HAL_ADC_MspInit+0xf0>)
 8001408:	2200      	movs	r2, #0
 800140a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800140c:	480b      	ldr	r0, [pc, #44]	; (800143c <HAL_ADC_MspInit+0xf0>)
 800140e:	f001 f929 	bl	8002664 <HAL_DMA_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <HAL_ADC_MspInit+0xd0>
    {
      Error_Handler();
 8001418:	f7ff ff6c 	bl	80012f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a07      	ldr	r2, [pc, #28]	; (800143c <HAL_ADC_MspInit+0xf0>)
 8001420:	639a      	str	r2, [r3, #56]	; 0x38
 8001422:	4a06      	ldr	r2, [pc, #24]	; (800143c <HAL_ADC_MspInit+0xf0>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001428:	bf00      	nop
 800142a:	3728      	adds	r7, #40	; 0x28
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40012000 	.word	0x40012000
 8001434:	40023800 	.word	0x40023800
 8001438:	40020400 	.word	0x40020400
 800143c:	200002a4 	.word	0x200002a4
 8001440:	40026470 	.word	0x40026470

08001444 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a52      	ldr	r2, [pc, #328]	; (80015ac <HAL_I2C_MspInit+0x168>)
 8001462:	4293      	cmp	r3, r2
 8001464:	f040 809d 	bne.w	80015a2 <HAL_I2C_MspInit+0x15e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001468:	4b51      	ldr	r3, [pc, #324]	; (80015b0 <HAL_I2C_MspInit+0x16c>)
 800146a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146c:	4a50      	ldr	r2, [pc, #320]	; (80015b0 <HAL_I2C_MspInit+0x16c>)
 800146e:	f043 0302 	orr.w	r3, r3, #2
 8001472:	6313      	str	r3, [r2, #48]	; 0x30
 8001474:	4b4e      	ldr	r3, [pc, #312]	; (80015b0 <HAL_I2C_MspInit+0x16c>)
 8001476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001480:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001486:	2312      	movs	r3, #18
 8001488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800148a:	2301      	movs	r3, #1
 800148c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001492:	2304      	movs	r3, #4
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	4845      	ldr	r0, [pc, #276]	; (80015b4 <HAL_I2C_MspInit+0x170>)
 800149e:	f001 fc85 	bl	8002dac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014a2:	4b43      	ldr	r3, [pc, #268]	; (80015b0 <HAL_I2C_MspInit+0x16c>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	4a42      	ldr	r2, [pc, #264]	; (80015b0 <HAL_I2C_MspInit+0x16c>)
 80014a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ac:	6413      	str	r3, [r2, #64]	; 0x40
 80014ae:	4b40      	ldr	r3, [pc, #256]	; (80015b0 <HAL_I2C_MspInit+0x16c>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 80014ba:	4b3f      	ldr	r3, [pc, #252]	; (80015b8 <HAL_I2C_MspInit+0x174>)
 80014bc:	4a3f      	ldr	r2, [pc, #252]	; (80015bc <HAL_I2C_MspInit+0x178>)
 80014be:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80014c0:	4b3d      	ldr	r3, [pc, #244]	; (80015b8 <HAL_I2C_MspInit+0x174>)
 80014c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014c6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014c8:	4b3b      	ldr	r3, [pc, #236]	; (80015b8 <HAL_I2C_MspInit+0x174>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ce:	4b3a      	ldr	r3, [pc, #232]	; (80015b8 <HAL_I2C_MspInit+0x174>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014d4:	4b38      	ldr	r3, [pc, #224]	; (80015b8 <HAL_I2C_MspInit+0x174>)
 80014d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014da:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014dc:	4b36      	ldr	r3, [pc, #216]	; (80015b8 <HAL_I2C_MspInit+0x174>)
 80014de:	2200      	movs	r2, #0
 80014e0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014e2:	4b35      	ldr	r3, [pc, #212]	; (80015b8 <HAL_I2C_MspInit+0x174>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80014e8:	4b33      	ldr	r3, [pc, #204]	; (80015b8 <HAL_I2C_MspInit+0x174>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80014ee:	4b32      	ldr	r3, [pc, #200]	; (80015b8 <HAL_I2C_MspInit+0x174>)
 80014f0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80014f4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80014f6:	4b30      	ldr	r3, [pc, #192]	; (80015b8 <HAL_I2C_MspInit+0x174>)
 80014f8:	2204      	movs	r2, #4
 80014fa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80014fc:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <HAL_I2C_MspInit+0x174>)
 80014fe:	2203      	movs	r2, #3
 8001500:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001502:	4b2d      	ldr	r3, [pc, #180]	; (80015b8 <HAL_I2C_MspInit+0x174>)
 8001504:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001508:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800150a:	4b2b      	ldr	r3, [pc, #172]	; (80015b8 <HAL_I2C_MspInit+0x174>)
 800150c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001510:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001512:	4829      	ldr	r0, [pc, #164]	; (80015b8 <HAL_I2C_MspInit+0x174>)
 8001514:	f001 f8a6 	bl	8002664 <HAL_DMA_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_I2C_MspInit+0xde>
    {
      Error_Handler();
 800151e:	f7ff fee9 	bl	80012f4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a24      	ldr	r2, [pc, #144]	; (80015b8 <HAL_I2C_MspInit+0x174>)
 8001526:	63da      	str	r2, [r3, #60]	; 0x3c
 8001528:	4a23      	ldr	r2, [pc, #140]	; (80015b8 <HAL_I2C_MspInit+0x174>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800152e:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <HAL_I2C_MspInit+0x17c>)
 8001530:	4a24      	ldr	r2, [pc, #144]	; (80015c4 <HAL_I2C_MspInit+0x180>)
 8001532:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001534:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <HAL_I2C_MspInit+0x17c>)
 8001536:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800153a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800153c:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <HAL_I2C_MspInit+0x17c>)
 800153e:	2240      	movs	r2, #64	; 0x40
 8001540:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001542:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <HAL_I2C_MspInit+0x17c>)
 8001544:	2200      	movs	r2, #0
 8001546:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001548:	4b1d      	ldr	r3, [pc, #116]	; (80015c0 <HAL_I2C_MspInit+0x17c>)
 800154a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800154e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001550:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <HAL_I2C_MspInit+0x17c>)
 8001552:	2200      	movs	r2, #0
 8001554:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001556:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <HAL_I2C_MspInit+0x17c>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800155c:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <HAL_I2C_MspInit+0x17c>)
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001562:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <HAL_I2C_MspInit+0x17c>)
 8001564:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001568:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800156a:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <HAL_I2C_MspInit+0x17c>)
 800156c:	2204      	movs	r2, #4
 800156e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <HAL_I2C_MspInit+0x17c>)
 8001572:	2203      	movs	r2, #3
 8001574:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001576:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_I2C_MspInit+0x17c>)
 8001578:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800157c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <HAL_I2C_MspInit+0x17c>)
 8001580:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001584:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001586:	480e      	ldr	r0, [pc, #56]	; (80015c0 <HAL_I2C_MspInit+0x17c>)
 8001588:	f001 f86c 	bl	8002664 <HAL_DMA_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_I2C_MspInit+0x152>
    {
      Error_Handler();
 8001592:	f7ff feaf 	bl	80012f4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <HAL_I2C_MspInit+0x17c>)
 800159a:	639a      	str	r2, [r3, #56]	; 0x38
 800159c:	4a08      	ldr	r2, [pc, #32]	; (80015c0 <HAL_I2C_MspInit+0x17c>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015a2:	bf00      	nop
 80015a4:	3728      	adds	r7, #40	; 0x28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40005400 	.word	0x40005400
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40020400 	.word	0x40020400
 80015b8:	20000304 	.word	0x20000304
 80015bc:	40026088 	.word	0x40026088
 80015c0:	20000168 	.word	0x20000168
 80015c4:	400260a0 	.word	0x400260a0

080015c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <HAL_TIM_PWM_MspInit+0x38>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d10b      	bne.n	80015f2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015da:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <HAL_TIM_PWM_MspInit+0x3c>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	4a09      	ldr	r2, [pc, #36]	; (8001604 <HAL_TIM_PWM_MspInit+0x3c>)
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	6413      	str	r3, [r2, #64]	; 0x40
 80015e6:	4b07      	ldr	r3, [pc, #28]	; (8001604 <HAL_TIM_PWM_MspInit+0x3c>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015f2:	bf00      	nop
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40000400 	.word	0x40000400
 8001604:	40023800 	.word	0x40023800

08001608 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a21      	ldr	r2, [pc, #132]	; (800169c <HAL_TIM_OC_MspInit+0x94>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d13c      	bne.n	8001694 <HAL_TIM_OC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800161a:	4b21      	ldr	r3, [pc, #132]	; (80016a0 <HAL_TIM_OC_MspInit+0x98>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	4a20      	ldr	r2, [pc, #128]	; (80016a0 <HAL_TIM_OC_MspInit+0x98>)
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	6413      	str	r3, [r2, #64]	; 0x40
 8001626:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <HAL_TIM_OC_MspInit+0x98>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8001632:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <HAL_TIM_OC_MspInit+0x9c>)
 8001634:	4a1c      	ldr	r2, [pc, #112]	; (80016a8 <HAL_TIM_OC_MspInit+0xa0>)
 8001636:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8001638:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <HAL_TIM_OC_MspInit+0x9c>)
 800163a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800163e:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001640:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <HAL_TIM_OC_MspInit+0x9c>)
 8001642:	2240      	movs	r2, #64	; 0x40
 8001644:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001646:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <HAL_TIM_OC_MspInit+0x9c>)
 8001648:	2200      	movs	r2, #0
 800164a:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800164c:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <HAL_TIM_OC_MspInit+0x9c>)
 800164e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001652:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001654:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <HAL_TIM_OC_MspInit+0x9c>)
 8001656:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800165a:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_TIM_OC_MspInit+0x9c>)
 800165e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001662:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8001664:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <HAL_TIM_OC_MspInit+0x9c>)
 8001666:	2200      	movs	r2, #0
 8001668:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <HAL_TIM_OC_MspInit+0x9c>)
 800166c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001670:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001672:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <HAL_TIM_OC_MspInit+0x9c>)
 8001674:	2200      	movs	r2, #0
 8001676:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8001678:	480a      	ldr	r0, [pc, #40]	; (80016a4 <HAL_TIM_OC_MspInit+0x9c>)
 800167a:	f000 fff3 	bl	8002664 <HAL_DMA_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <HAL_TIM_OC_MspInit+0x80>
    {
      Error_Handler();
 8001684:	f7ff fe36 	bl	80012f4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a06      	ldr	r2, [pc, #24]	; (80016a4 <HAL_TIM_OC_MspInit+0x9c>)
 800168c:	625a      	str	r2, [r3, #36]	; 0x24
 800168e:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <HAL_TIM_OC_MspInit+0x9c>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001694:	bf00      	nop
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40000800 	.word	0x40000800
 80016a0:	40023800 	.word	0x40023800
 80016a4:	2000037c 	.word	0x2000037c
 80016a8:	40026010 	.word	0x40026010

080016ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08c      	sub	sp, #48	; 0x30
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a3f      	ldr	r2, [pc, #252]	; (80017c8 <HAL_TIM_MspPostInit+0x11c>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d155      	bne.n	800177a <HAL_TIM_MspPostInit+0xce>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	4b3f      	ldr	r3, [pc, #252]	; (80017cc <HAL_TIM_MspPostInit+0x120>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a3e      	ldr	r2, [pc, #248]	; (80017cc <HAL_TIM_MspPostInit+0x120>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b3c      	ldr	r3, [pc, #240]	; (80017cc <HAL_TIM_MspPostInit+0x120>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	61bb      	str	r3, [r7, #24]
 80016e4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e6:	4b39      	ldr	r3, [pc, #228]	; (80017cc <HAL_TIM_MspPostInit+0x120>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a38      	ldr	r2, [pc, #224]	; (80017cc <HAL_TIM_MspPostInit+0x120>)
 80016ec:	f043 0302 	orr.w	r3, r3, #2
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b36      	ldr	r3, [pc, #216]	; (80017cc <HAL_TIM_MspPostInit+0x120>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016fe:	4b33      	ldr	r3, [pc, #204]	; (80017cc <HAL_TIM_MspPostInit+0x120>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a32      	ldr	r2, [pc, #200]	; (80017cc <HAL_TIM_MspPostInit+0x120>)
 8001704:	f043 0304 	orr.w	r3, r3, #4
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b30      	ldr	r3, [pc, #192]	; (80017cc <HAL_TIM_MspPostInit+0x120>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM_3_CH1_MOTOR_1_Pin|TIM_3_CH1_MOTOR_2_Pin;
 8001716:	23c0      	movs	r3, #192	; 0xc0
 8001718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001726:	2302      	movs	r3, #2
 8001728:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	f107 031c 	add.w	r3, r7, #28
 800172e:	4619      	mov	r1, r3
 8001730:	4827      	ldr	r0, [pc, #156]	; (80017d0 <HAL_TIM_MspPostInit+0x124>)
 8001732:	f001 fb3b 	bl	8002dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM_3_CH1_MOTOR_3_Pin;
 8001736:	2301      	movs	r3, #1
 8001738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	2302      	movs	r3, #2
 800173c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001742:	2300      	movs	r3, #0
 8001744:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001746:	2302      	movs	r3, #2
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM_3_CH1_MOTOR_3_GPIO_Port, &GPIO_InitStruct);
 800174a:	f107 031c 	add.w	r3, r7, #28
 800174e:	4619      	mov	r1, r3
 8001750:	4820      	ldr	r0, [pc, #128]	; (80017d4 <HAL_TIM_MspPostInit+0x128>)
 8001752:	f001 fb2b 	bl	8002dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM_3_CH1_MOTOR_4_Pin;
 8001756:	f44f 7300 	mov.w	r3, #512	; 0x200
 800175a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175c:	2302      	movs	r3, #2
 800175e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001764:	2300      	movs	r3, #0
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001768:	2302      	movs	r3, #2
 800176a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM_3_CH1_MOTOR_4_GPIO_Port, &GPIO_InitStruct);
 800176c:	f107 031c 	add.w	r3, r7, #28
 8001770:	4619      	mov	r1, r3
 8001772:	4819      	ldr	r0, [pc, #100]	; (80017d8 <HAL_TIM_MspPostInit+0x12c>)
 8001774:	f001 fb1a 	bl	8002dac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001778:	e021      	b.n	80017be <HAL_TIM_MspPostInit+0x112>
  else if(htim->Instance==TIM4)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a17      	ldr	r2, [pc, #92]	; (80017dc <HAL_TIM_MspPostInit+0x130>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d11c      	bne.n	80017be <HAL_TIM_MspPostInit+0x112>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <HAL_TIM_MspPostInit+0x120>)
 8001786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001788:	4a10      	ldr	r2, [pc, #64]	; (80017cc <HAL_TIM_MspPostInit+0x120>)
 800178a:	f043 0308 	orr.w	r3, r3, #8
 800178e:	6313      	str	r3, [r2, #48]	; 0x30
 8001790:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <HAL_TIM_MspPostInit+0x120>)
 8001792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_DMA_LATCH_Pin|TIM4_CH2_MOTOR_1_Pin|TIM4_CH3_MOTOR_2_Pin;
 800179c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80017a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a2:	2302      	movs	r3, #2
 80017a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017aa:	2300      	movs	r3, #0
 80017ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80017ae:	2302      	movs	r3, #2
 80017b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017b2:	f107 031c 	add.w	r3, r7, #28
 80017b6:	4619      	mov	r1, r3
 80017b8:	4809      	ldr	r0, [pc, #36]	; (80017e0 <HAL_TIM_MspPostInit+0x134>)
 80017ba:	f001 faf7 	bl	8002dac <HAL_GPIO_Init>
}
 80017be:	bf00      	nop
 80017c0:	3730      	adds	r7, #48	; 0x30
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40000400 	.word	0x40000400
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020000 	.word	0x40020000
 80017d4:	40020400 	.word	0x40020400
 80017d8:	40020800 	.word	0x40020800
 80017dc:	40000800 	.word	0x40000800
 80017e0:	40020c00 	.word	0x40020c00

080017e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	; 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a17      	ldr	r2, [pc, #92]	; (8001860 <HAL_UART_MspInit+0x7c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d128      	bne.n	8001858 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001806:	4b17      	ldr	r3, [pc, #92]	; (8001864 <HAL_UART_MspInit+0x80>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a16      	ldr	r2, [pc, #88]	; (8001864 <HAL_UART_MspInit+0x80>)
 800180c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001810:	6413      	str	r3, [r2, #64]	; 0x40
 8001812:	4b14      	ldr	r3, [pc, #80]	; (8001864 <HAL_UART_MspInit+0x80>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800181e:	4b11      	ldr	r3, [pc, #68]	; (8001864 <HAL_UART_MspInit+0x80>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a10      	ldr	r2, [pc, #64]	; (8001864 <HAL_UART_MspInit+0x80>)
 8001824:	f043 0308 	orr.w	r3, r3, #8
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <HAL_UART_MspInit+0x80>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001836:	f44f 7340 	mov.w	r3, #768	; 0x300
 800183a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001844:	2303      	movs	r3, #3
 8001846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001848:	2307      	movs	r3, #7
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4619      	mov	r1, r3
 8001852:	4805      	ldr	r0, [pc, #20]	; (8001868 <HAL_UART_MspInit+0x84>)
 8001854:	f001 faaa 	bl	8002dac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001858:	bf00      	nop
 800185a:	3728      	adds	r7, #40	; 0x28
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40004800 	.word	0x40004800
 8001864:	40023800 	.word	0x40023800
 8001868:	40020c00 	.word	0x40020c00

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <HardFault_Handler+0x4>

08001880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <MemManage_Handler+0x4>

08001886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188a:	e7fe      	b.n	800188a <BusFault_Handler+0x4>

0800188c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <UsageFault_Handler+0x4>

08001892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c0:	f000 f8dc 	bl	8001a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <DMA1_Stream0_IRQHandler+0x10>)
 80018ce:	f000 fff9 	bl	80028c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	2000037c 	.word	0x2000037c

080018dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <DMA1_Stream5_IRQHandler+0x10>)
 80018e2:	f000 ffef 	bl	80028c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000304 	.word	0x20000304

080018f0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <DMA1_Stream6_IRQHandler+0x10>)
 80018f6:	f000 ffe5 	bl	80028c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000168 	.word	0x20000168

08001904 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <DMA2_Stream4_IRQHandler+0x10>)
 800190a:	f000 ffdb 	bl	80028c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200002a4 	.word	0x200002a4

08001918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001920:	4a14      	ldr	r2, [pc, #80]	; (8001974 <_sbrk+0x5c>)
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <_sbrk+0x60>)
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800192c:	4b13      	ldr	r3, [pc, #76]	; (800197c <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d102      	bne.n	800193a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001934:	4b11      	ldr	r3, [pc, #68]	; (800197c <_sbrk+0x64>)
 8001936:	4a12      	ldr	r2, [pc, #72]	; (8001980 <_sbrk+0x68>)
 8001938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <_sbrk+0x64>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	429a      	cmp	r2, r3
 8001946:	d207      	bcs.n	8001958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001948:	f005 fd08 	bl	800735c <__errno>
 800194c:	4602      	mov	r2, r0
 800194e:	230c      	movs	r3, #12
 8001950:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001952:	f04f 33ff 	mov.w	r3, #4294967295
 8001956:	e009      	b.n	800196c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <_sbrk+0x64>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800195e:	4b07      	ldr	r3, [pc, #28]	; (800197c <_sbrk+0x64>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	4a05      	ldr	r2, [pc, #20]	; (800197c <_sbrk+0x64>)
 8001968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800196a:	68fb      	ldr	r3, [r7, #12]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20040000 	.word	0x20040000
 8001978:	00000400 	.word	0x00000400
 800197c:	2000009c 	.word	0x2000009c
 8001980:	200003f0 	.word	0x200003f0

08001984 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <SystemInit+0x28>)
 800198a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800198e:	4a07      	ldr	r2, [pc, #28]	; (80019ac <SystemInit+0x28>)
 8001990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001994:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001998:	4b04      	ldr	r3, [pc, #16]	; (80019ac <SystemInit+0x28>)
 800199a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800199e:	609a      	str	r2, [r3, #8]
#endif
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019b6:	e003      	b.n	80019c0 <LoopCopyDataInit>

080019b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019be:	3104      	adds	r1, #4

080019c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019c0:	480b      	ldr	r0, [pc, #44]	; (80019f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019c8:	d3f6      	bcc.n	80019b8 <CopyDataInit>
  ldr  r2, =_sbss
 80019ca:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019cc:	e002      	b.n	80019d4 <LoopFillZerobss>

080019ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019d0:	f842 3b04 	str.w	r3, [r2], #4

080019d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019d8:	d3f9      	bcc.n	80019ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019da:	f7ff ffd3 	bl	8001984 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019de:	f005 fcc3 	bl	8007368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019e2:	f7ff f86b 	bl	8000abc <main>
  bx  lr    
 80019e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019e8:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 80019ec:	080074f0 	.word	0x080074f0
  ldr  r0, =_sdata
 80019f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019f4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80019f8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80019fc:	200003f0 	.word	0x200003f0

08001a00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a00:	e7fe      	b.n	8001a00 <ADC_IRQHandler>

08001a02 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a06:	2003      	movs	r0, #3
 8001a08:	f000 fdea 	bl	80025e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f000 f805 	bl	8001a1c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001a12:	f7ff fc77 	bl	8001304 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_InitTick+0x54>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <HAL_InitTick+0x58>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 fe05 	bl	800264a <HAL_SYSTICK_Config>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e00e      	b.n	8001a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b0f      	cmp	r3, #15
 8001a4e:	d80a      	bhi.n	8001a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a50:	2200      	movs	r2, #0
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	f04f 30ff 	mov.w	r0, #4294967295
 8001a58:	f000 fdcd 	bl	80025f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a5c:	4a06      	ldr	r2, [pc, #24]	; (8001a78 <HAL_InitTick+0x5c>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	e000      	b.n	8001a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000000 	.word	0x20000000
 8001a74:	20000008 	.word	0x20000008
 8001a78:	20000004 	.word	0x20000004

08001a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_IncTick+0x20>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_IncTick+0x24>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <HAL_IncTick+0x24>)
 8001a8e:	6013      	str	r3, [r2, #0]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000008 	.word	0x20000008
 8001aa0:	200003e8 	.word	0x200003e8

08001aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <HAL_GetTick+0x14>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	200003e8 	.word	0x200003e8

08001abc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e031      	b.n	8001b36 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d109      	bne.n	8001aee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fc36 	bl	800134c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f003 0310 	and.w	r3, r3, #16
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d116      	bne.n	8001b28 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <HAL_ADC_Init+0x84>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	f043 0202 	orr.w	r2, r3, #2
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 fb1c 	bl	8002148 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f023 0303 	bic.w	r3, r3, #3
 8001b1e:	f043 0201 	orr.w	r2, r3, #1
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	641a      	str	r2, [r3, #64]	; 0x40
 8001b26:	e001      	b.n	8001b2c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	ffffeefd 	.word	0xffffeefd

08001b44 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d101      	bne.n	8001b5e <HAL_ADC_Start+0x1a>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e0a0      	b.n	8001ca0 <HAL_ADC_Start+0x15c>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d018      	beq.n	8001ba6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0201 	orr.w	r2, r2, #1
 8001b82:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001b84:	4b49      	ldr	r3, [pc, #292]	; (8001cac <HAL_ADC_Start+0x168>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a49      	ldr	r2, [pc, #292]	; (8001cb0 <HAL_ADC_Start+0x16c>)
 8001b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8e:	0c9a      	lsrs	r2, r3, #18
 8001b90:	4613      	mov	r3, r2
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4413      	add	r3, r2
 8001b96:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001b98:	e002      	b.n	8001ba0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f9      	bne.n	8001b9a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d174      	bne.n	8001c9e <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bb8:	4b3e      	ldr	r3, [pc, #248]	; (8001cb4 <HAL_ADC_Start+0x170>)
 8001bba:	4013      	ands	r3, r2
 8001bbc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d007      	beq.n	8001be2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bda:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bee:	d106      	bne.n	8001bfe <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf4:	f023 0206 	bic.w	r2, r3, #6
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	645a      	str	r2, [r3, #68]	; 0x44
 8001bfc:	e002      	b.n	8001c04 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c14:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001c16:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <HAL_ADC_Start+0x174>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 031f 	and.w	r3, r3, #31
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10f      	bne.n	8001c42 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d136      	bne.n	8001c9e <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	e02d      	b.n	8001c9e <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a1d      	ldr	r2, [pc, #116]	; (8001cbc <HAL_ADC_Start+0x178>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d10e      	bne.n	8001c6a <HAL_ADC_Start+0x126>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d107      	bne.n	8001c6a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c68:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001c6a:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <HAL_ADC_Start+0x174>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 0310 	and.w	r3, r3, #16
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d113      	bne.n	8001c9e <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a11      	ldr	r2, [pc, #68]	; (8001cc0 <HAL_ADC_Start+0x17c>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d10e      	bne.n	8001c9e <HAL_ADC_Start+0x15a>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d107      	bne.n	8001c9e <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c9c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	431bde83 	.word	0x431bde83
 8001cb4:	fffff8fe 	.word	0xfffff8fe
 8001cb8:	40012300 	.word	0x40012300
 8001cbc:	40012000 	.word	0x40012000
 8001cc0:	40012200 	.word	0x40012200

08001cc4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d101      	bne.n	8001ce2 <HAL_ADC_Start_DMA+0x1e>
 8001cde:	2302      	movs	r3, #2
 8001ce0:	e0c7      	b.n	8001e72 <HAL_ADC_Start_DMA+0x1ae>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d018      	beq.n	8001d2a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0201 	orr.w	r2, r2, #1
 8001d06:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001d08:	4b5c      	ldr	r3, [pc, #368]	; (8001e7c <HAL_ADC_Start_DMA+0x1b8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a5c      	ldr	r2, [pc, #368]	; (8001e80 <HAL_ADC_Start_DMA+0x1bc>)
 8001d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d12:	0c9a      	lsrs	r2, r3, #18
 8001d14:	4613      	mov	r3, r2
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	4413      	add	r3, r2
 8001d1a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001d1c:	e002      	b.n	8001d24 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	3b01      	subs	r3, #1
 8001d22:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f9      	bne.n	8001d1e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	f040 809b 	bne.w	8001e70 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d3e:	4b51      	ldr	r3, [pc, #324]	; (8001e84 <HAL_ADC_Start_DMA+0x1c0>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d007      	beq.n	8001d68 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d74:	d106      	bne.n	8001d84 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	f023 0206 	bic.w	r2, r3, #6
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	645a      	str	r2, [r3, #68]	; 0x44
 8001d82:	e002      	b.n	8001d8a <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d96:	4a3c      	ldr	r2, [pc, #240]	; (8001e88 <HAL_ADC_Start_DMA+0x1c4>)
 8001d98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9e:	4a3b      	ldr	r2, [pc, #236]	; (8001e8c <HAL_ADC_Start_DMA+0x1c8>)
 8001da0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da6:	4a3a      	ldr	r2, [pc, #232]	; (8001e90 <HAL_ADC_Start_DMA+0x1cc>)
 8001da8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001db2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001dc2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dd2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	334c      	adds	r3, #76	; 0x4c
 8001dde:	4619      	mov	r1, r3
 8001de0:	68ba      	ldr	r2, [r7, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f000 fcec 	bl	80027c0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001de8:	4b2a      	ldr	r3, [pc, #168]	; (8001e94 <HAL_ADC_Start_DMA+0x1d0>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 031f 	and.w	r3, r3, #31
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10f      	bne.n	8001e14 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d136      	bne.n	8001e70 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e10:	609a      	str	r2, [r3, #8]
 8001e12:	e02d      	b.n	8001e70 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a1f      	ldr	r2, [pc, #124]	; (8001e98 <HAL_ADC_Start_DMA+0x1d4>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d10e      	bne.n	8001e3c <HAL_ADC_Start_DMA+0x178>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d107      	bne.n	8001e3c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e3a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001e3c:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <HAL_ADC_Start_DMA+0x1d0>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0310 	and.w	r3, r3, #16
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d113      	bne.n	8001e70 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a13      	ldr	r2, [pc, #76]	; (8001e9c <HAL_ADC_Start_DMA+0x1d8>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d10e      	bne.n	8001e70 <HAL_ADC_Start_DMA+0x1ac>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d107      	bne.n	8001e70 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e6e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	431bde83 	.word	0x431bde83
 8001e84:	fffff8fe 	.word	0xfffff8fe
 8001e88:	0800233d 	.word	0x0800233d
 8001e8c:	080023f7 	.word	0x080023f7
 8001e90:	08002413 	.word	0x08002413
 8001e94:	40012300 	.word	0x40012300
 8001e98:	40012000 	.word	0x40012000
 8001e9c:	40012200 	.word	0x40012200

08001ea0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d101      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x1c>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	e12a      	b.n	8002126 <HAL_ADC_ConfigChannel+0x272>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b09      	cmp	r3, #9
 8001ede:	d93a      	bls.n	8001f56 <HAL_ADC_ConfigChannel+0xa2>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ee8:	d035      	beq.n	8001f56 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68d9      	ldr	r1, [r3, #12]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	4613      	mov	r3, r2
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	4413      	add	r3, r2
 8001efe:	3b1e      	subs	r3, #30
 8001f00:	2207      	movs	r2, #7
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43da      	mvns	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	400a      	ands	r2, r1
 8001f0e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a87      	ldr	r2, [pc, #540]	; (8002134 <HAL_ADC_ConfigChannel+0x280>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d10a      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68d9      	ldr	r1, [r3, #12]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	061a      	lsls	r2, r3, #24
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f2e:	e035      	b.n	8001f9c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68d9      	ldr	r1, [r3, #12]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	4618      	mov	r0, r3
 8001f42:	4603      	mov	r3, r0
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	4403      	add	r3, r0
 8001f48:	3b1e      	subs	r3, #30
 8001f4a:	409a      	lsls	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f54:	e022      	b.n	8001f9c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6919      	ldr	r1, [r3, #16]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	461a      	mov	r2, r3
 8001f64:	4613      	mov	r3, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4413      	add	r3, r2
 8001f6a:	2207      	movs	r2, #7
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43da      	mvns	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	400a      	ands	r2, r1
 8001f78:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6919      	ldr	r1, [r3, #16]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4403      	add	r3, r0
 8001f92:	409a      	lsls	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b06      	cmp	r3, #6
 8001fa2:	d824      	bhi.n	8001fee <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3b05      	subs	r3, #5
 8001fb6:	221f      	movs	r2, #31
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43da      	mvns	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	400a      	ands	r2, r1
 8001fc4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	3b05      	subs	r3, #5
 8001fe0:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	635a      	str	r2, [r3, #52]	; 0x34
 8001fec:	e04c      	b.n	8002088 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b0c      	cmp	r3, #12
 8001ff4:	d824      	bhi.n	8002040 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	3b23      	subs	r3, #35	; 0x23
 8002008:	221f      	movs	r2, #31
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43da      	mvns	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	400a      	ands	r2, r1
 8002016:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	b29b      	uxth	r3, r3
 8002024:	4618      	mov	r0, r3
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	3b23      	subs	r3, #35	; 0x23
 8002032:	fa00 f203 	lsl.w	r2, r0, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	430a      	orrs	r2, r1
 800203c:	631a      	str	r2, [r3, #48]	; 0x30
 800203e:	e023      	b.n	8002088 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	3b41      	subs	r3, #65	; 0x41
 8002052:	221f      	movs	r2, #31
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43da      	mvns	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	400a      	ands	r2, r1
 8002060:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	b29b      	uxth	r3, r3
 800206e:	4618      	mov	r0, r3
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	3b41      	subs	r3, #65	; 0x41
 800207c:	fa00 f203 	lsl.w	r2, r0, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a2a      	ldr	r2, [pc, #168]	; (8002138 <HAL_ADC_ConfigChannel+0x284>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d10a      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x1f4>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800209a:	d105      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800209c:	4b27      	ldr	r3, [pc, #156]	; (800213c <HAL_ADC_ConfigChannel+0x288>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	4a26      	ldr	r2, [pc, #152]	; (800213c <HAL_ADC_ConfigChannel+0x288>)
 80020a2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80020a6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a22      	ldr	r2, [pc, #136]	; (8002138 <HAL_ADC_ConfigChannel+0x284>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d109      	bne.n	80020c6 <HAL_ADC_ConfigChannel+0x212>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2b12      	cmp	r3, #18
 80020b8:	d105      	bne.n	80020c6 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80020ba:	4b20      	ldr	r3, [pc, #128]	; (800213c <HAL_ADC_ConfigChannel+0x288>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	4a1f      	ldr	r2, [pc, #124]	; (800213c <HAL_ADC_ConfigChannel+0x288>)
 80020c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020c4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a1b      	ldr	r2, [pc, #108]	; (8002138 <HAL_ADC_ConfigChannel+0x284>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d125      	bne.n	800211c <HAL_ADC_ConfigChannel+0x268>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a17      	ldr	r2, [pc, #92]	; (8002134 <HAL_ADC_ConfigChannel+0x280>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d003      	beq.n	80020e2 <HAL_ADC_ConfigChannel+0x22e>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b11      	cmp	r3, #17
 80020e0:	d11c      	bne.n	800211c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80020e2:	4b16      	ldr	r3, [pc, #88]	; (800213c <HAL_ADC_ConfigChannel+0x288>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	4a15      	ldr	r2, [pc, #84]	; (800213c <HAL_ADC_ConfigChannel+0x288>)
 80020e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020ec:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a10      	ldr	r2, [pc, #64]	; (8002134 <HAL_ADC_ConfigChannel+0x280>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d111      	bne.n	800211c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80020f8:	4b11      	ldr	r3, [pc, #68]	; (8002140 <HAL_ADC_ConfigChannel+0x28c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a11      	ldr	r2, [pc, #68]	; (8002144 <HAL_ADC_ConfigChannel+0x290>)
 80020fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002102:	0c9a      	lsrs	r2, r3, #18
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800210e:	e002      	b.n	8002116 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	3b01      	subs	r3, #1
 8002114:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1f9      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	10000012 	.word	0x10000012
 8002138:	40012000 	.word	0x40012000
 800213c:	40012300 	.word	0x40012300
 8002140:	20000000 	.word	0x20000000
 8002144:	431bde83 	.word	0x431bde83

08002148 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002150:	4b78      	ldr	r3, [pc, #480]	; (8002334 <ADC_Init+0x1ec>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	4a77      	ldr	r2, [pc, #476]	; (8002334 <ADC_Init+0x1ec>)
 8002156:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800215a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800215c:	4b75      	ldr	r3, [pc, #468]	; (8002334 <ADC_Init+0x1ec>)
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	4973      	ldr	r1, [pc, #460]	; (8002334 <ADC_Init+0x1ec>)
 8002166:	4313      	orrs	r3, r2
 8002168:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002178:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6859      	ldr	r1, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	021a      	lsls	r2, r3, #8
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800219c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6859      	ldr	r1, [r3, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6899      	ldr	r1, [r3, #8]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d6:	4a58      	ldr	r2, [pc, #352]	; (8002338 <ADC_Init+0x1f0>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d022      	beq.n	8002222 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6899      	ldr	r1, [r3, #8]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800220c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6899      	ldr	r1, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	e00f      	b.n	8002242 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002230:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002240:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0202 	bic.w	r2, r2, #2
 8002250:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6899      	ldr	r1, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	005a      	lsls	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d01b      	beq.n	80022a8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800227e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800228e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6859      	ldr	r1, [r3, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	3b01      	subs	r3, #1
 800229c:	035a      	lsls	r2, r3, #13
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	e007      	b.n	80022b8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	051a      	lsls	r2, r3, #20
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6899      	ldr	r1, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022fa:	025a      	lsls	r2, r3, #9
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002312:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6899      	ldr	r1, [r3, #8]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	029a      	lsls	r2, r3, #10
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	609a      	str	r2, [r3, #8]
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	40012300 	.word	0x40012300
 8002338:	0f000001 	.word	0x0f000001

0800233c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002348:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002352:	2b00      	cmp	r3, #0
 8002354:	d13c      	bne.n	80023d0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d12b      	bne.n	80023c8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002374:	2b00      	cmp	r3, #0
 8002376:	d127      	bne.n	80023c8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002382:	2b00      	cmp	r3, #0
 8002384:	d006      	beq.n	8002394 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002390:	2b00      	cmp	r3, #0
 8002392:	d119      	bne.n	80023c8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0220 	bic.w	r2, r2, #32
 80023a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d105      	bne.n	80023c8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	f043 0201 	orr.w	r2, r3, #1
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f7fe ff88 	bl	80012de <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80023ce:	e00e      	b.n	80023ee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	f003 0310 	and.w	r3, r3, #16
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f7ff fd5f 	bl	8001ea0 <HAL_ADC_ErrorCallback>
}
 80023e2:	e004      	b.n	80023ee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	4798      	blx	r3
}
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002402:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f7fe ff5f 	bl	80012c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800240a:	bf00      	nop
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b084      	sub	sp, #16
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2240      	movs	r2, #64	; 0x40
 8002424:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	f043 0204 	orr.w	r2, r3, #4
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f7ff fd34 	bl	8001ea0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002438:	bf00      	nop
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <__NVIC_SetPriorityGrouping+0x40>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800245c:	4013      	ands	r3, r2
 800245e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <__NVIC_SetPriorityGrouping+0x44>)
 800246a:	4313      	orrs	r3, r2
 800246c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800246e:	4a04      	ldr	r2, [pc, #16]	; (8002480 <__NVIC_SetPriorityGrouping+0x40>)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	60d3      	str	r3, [r2, #12]
}
 8002474:	bf00      	nop
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	e000ed00 	.word	0xe000ed00
 8002484:	05fa0000 	.word	0x05fa0000

08002488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800248c:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <__NVIC_GetPriorityGrouping+0x18>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	f003 0307 	and.w	r3, r3, #7
}
 8002496:	4618      	mov	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	db0b      	blt.n	80024ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	f003 021f 	and.w	r2, r3, #31
 80024bc:	4907      	ldr	r1, [pc, #28]	; (80024dc <__NVIC_EnableIRQ+0x38>)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	2001      	movs	r0, #1
 80024c6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	e000e100 	.word	0xe000e100

080024e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	6039      	str	r1, [r7, #0]
 80024ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	db0a      	blt.n	800250a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	490c      	ldr	r1, [pc, #48]	; (800252c <__NVIC_SetPriority+0x4c>)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	0112      	lsls	r2, r2, #4
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	440b      	add	r3, r1
 8002504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002508:	e00a      	b.n	8002520 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	b2da      	uxtb	r2, r3
 800250e:	4908      	ldr	r1, [pc, #32]	; (8002530 <__NVIC_SetPriority+0x50>)
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	3b04      	subs	r3, #4
 8002518:	0112      	lsls	r2, r2, #4
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	440b      	add	r3, r1
 800251e:	761a      	strb	r2, [r3, #24]
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	e000e100 	.word	0xe000e100
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002534:	b480      	push	{r7}
 8002536:	b089      	sub	sp, #36	; 0x24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f1c3 0307 	rsb	r3, r3, #7
 800254e:	2b04      	cmp	r3, #4
 8002550:	bf28      	it	cs
 8002552:	2304      	movcs	r3, #4
 8002554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3304      	adds	r3, #4
 800255a:	2b06      	cmp	r3, #6
 800255c:	d902      	bls.n	8002564 <NVIC_EncodePriority+0x30>
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	3b03      	subs	r3, #3
 8002562:	e000      	b.n	8002566 <NVIC_EncodePriority+0x32>
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002568:	f04f 32ff 	mov.w	r2, #4294967295
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43da      	mvns	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	401a      	ands	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800257c:	f04f 31ff 	mov.w	r1, #4294967295
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	fa01 f303 	lsl.w	r3, r1, r3
 8002586:	43d9      	mvns	r1, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800258c:	4313      	orrs	r3, r2
         );
}
 800258e:	4618      	mov	r0, r3
 8002590:	3724      	adds	r7, #36	; 0x24
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025ac:	d301      	bcc.n	80025b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ae:	2301      	movs	r3, #1
 80025b0:	e00f      	b.n	80025d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025b2:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <SysTick_Config+0x40>)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ba:	210f      	movs	r1, #15
 80025bc:	f04f 30ff 	mov.w	r0, #4294967295
 80025c0:	f7ff ff8e 	bl	80024e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025c4:	4b05      	ldr	r3, [pc, #20]	; (80025dc <SysTick_Config+0x40>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ca:	4b04      	ldr	r3, [pc, #16]	; (80025dc <SysTick_Config+0x40>)
 80025cc:	2207      	movs	r2, #7
 80025ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	e000e010 	.word	0xe000e010

080025e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff ff29 	bl	8002440 <__NVIC_SetPriorityGrouping>
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b086      	sub	sp, #24
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	4603      	mov	r3, r0
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	607a      	str	r2, [r7, #4]
 8002602:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002608:	f7ff ff3e 	bl	8002488 <__NVIC_GetPriorityGrouping>
 800260c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68b9      	ldr	r1, [r7, #8]
 8002612:	6978      	ldr	r0, [r7, #20]
 8002614:	f7ff ff8e 	bl	8002534 <NVIC_EncodePriority>
 8002618:	4602      	mov	r2, r0
 800261a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800261e:	4611      	mov	r1, r2
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff ff5d 	bl	80024e0 <__NVIC_SetPriority>
}
 8002626:	bf00      	nop
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	4603      	mov	r3, r0
 8002636:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff ff31 	bl	80024a4 <__NVIC_EnableIRQ>
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff ffa2 	bl	800259c <SysTick_Config>
 8002658:	4603      	mov	r3, r0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002670:	f7ff fa18 	bl	8001aa4 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e099      	b.n	80027b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2202      	movs	r2, #2
 800268c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0201 	bic.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026a0:	e00f      	b.n	80026c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026a2:	f7ff f9ff 	bl	8001aa4 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b05      	cmp	r3, #5
 80026ae:	d908      	bls.n	80026c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2220      	movs	r2, #32
 80026b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2203      	movs	r2, #3
 80026ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e078      	b.n	80027b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1e8      	bne.n	80026a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	4b38      	ldr	r3, [pc, #224]	; (80027bc <HAL_DMA_Init+0x158>)
 80026dc:	4013      	ands	r3, r2
 80026de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002706:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4313      	orrs	r3, r2
 8002712:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	2b04      	cmp	r3, #4
 800271a:	d107      	bne.n	800272c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	4313      	orrs	r3, r2
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	4313      	orrs	r3, r2
 800272a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f023 0307 	bic.w	r3, r3, #7
 8002742:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	4313      	orrs	r3, r2
 800274c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	2b04      	cmp	r3, #4
 8002754:	d117      	bne.n	8002786 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	4313      	orrs	r3, r2
 800275e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00e      	beq.n	8002786 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 faa5 	bl	8002cb8 <DMA_CheckFifoParam>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2240      	movs	r2, #64	; 0x40
 8002778:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002782:	2301      	movs	r3, #1
 8002784:	e016      	b.n	80027b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 fa5c 	bl	8002c4c <DMA_CalcBaseAndBitshift>
 8002794:	4603      	mov	r3, r0
 8002796:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279c:	223f      	movs	r2, #63	; 0x3f
 800279e:	409a      	lsls	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	e010803f 	.word	0xe010803f

080027c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
 80027cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d101      	bne.n	80027e6 <HAL_DMA_Start_IT+0x26>
 80027e2:	2302      	movs	r3, #2
 80027e4:	e048      	b.n	8002878 <HAL_DMA_Start_IT+0xb8>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d137      	bne.n	800286a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2202      	movs	r2, #2
 80027fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	68b9      	ldr	r1, [r7, #8]
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 f9ee 	bl	8002bf0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002818:	223f      	movs	r2, #63	; 0x3f
 800281a:	409a      	lsls	r2, r3
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0216 	orr.w	r2, r2, #22
 800282e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695a      	ldr	r2, [r3, #20]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800283e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	2b00      	cmp	r3, #0
 8002846:	d007      	beq.n	8002858 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0208 	orr.w	r2, r2, #8
 8002856:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	e005      	b.n	8002876 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002872:	2302      	movs	r3, #2
 8002874:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002876:	7dfb      	ldrb	r3, [r7, #23]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d004      	beq.n	800289e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2280      	movs	r2, #128	; 0x80
 8002898:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e00c      	b.n	80028b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2205      	movs	r2, #5
 80028a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0201 	bic.w	r2, r2, #1
 80028b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80028d0:	4b92      	ldr	r3, [pc, #584]	; (8002b1c <HAL_DMA_IRQHandler+0x258>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a92      	ldr	r2, [pc, #584]	; (8002b20 <HAL_DMA_IRQHandler+0x25c>)
 80028d6:	fba2 2303 	umull	r2, r3, r2, r3
 80028da:	0a9b      	lsrs	r3, r3, #10
 80028dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ee:	2208      	movs	r2, #8
 80028f0:	409a      	lsls	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	4013      	ands	r3, r2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d01a      	beq.n	8002930 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d013      	beq.n	8002930 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0204 	bic.w	r2, r2, #4
 8002916:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291c:	2208      	movs	r2, #8
 800291e:	409a      	lsls	r2, r3
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002928:	f043 0201 	orr.w	r2, r3, #1
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002934:	2201      	movs	r2, #1
 8002936:	409a      	lsls	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4013      	ands	r3, r2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d012      	beq.n	8002966 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00b      	beq.n	8002966 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002952:	2201      	movs	r2, #1
 8002954:	409a      	lsls	r2, r3
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295e:	f043 0202 	orr.w	r2, r3, #2
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296a:	2204      	movs	r2, #4
 800296c:	409a      	lsls	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4013      	ands	r3, r2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d012      	beq.n	800299c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00b      	beq.n	800299c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002988:	2204      	movs	r2, #4
 800298a:	409a      	lsls	r2, r3
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002994:	f043 0204 	orr.w	r2, r3, #4
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a0:	2210      	movs	r2, #16
 80029a2:	409a      	lsls	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d043      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d03c      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029be:	2210      	movs	r2, #16
 80029c0:	409a      	lsls	r2, r3
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d018      	beq.n	8002a06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d108      	bne.n	80029f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d024      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	4798      	blx	r3
 80029f2:	e01f      	b.n	8002a34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d01b      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	4798      	blx	r3
 8002a04:	e016      	b.n	8002a34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d107      	bne.n	8002a24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0208 	bic.w	r2, r2, #8
 8002a22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a38:	2220      	movs	r2, #32
 8002a3a:	409a      	lsls	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 808e 	beq.w	8002b62 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0310 	and.w	r3, r3, #16
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 8086 	beq.w	8002b62 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	409a      	lsls	r2, r3
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b05      	cmp	r3, #5
 8002a6c:	d136      	bne.n	8002adc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0216 	bic.w	r2, r2, #22
 8002a7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	695a      	ldr	r2, [r3, #20]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d103      	bne.n	8002a9e <HAL_DMA_IRQHandler+0x1da>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d007      	beq.n	8002aae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0208 	bic.w	r2, r2, #8
 8002aac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab2:	223f      	movs	r2, #63	; 0x3f
 8002ab4:	409a      	lsls	r2, r3
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d07d      	beq.n	8002bce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	4798      	blx	r3
        }
        return;
 8002ada:	e078      	b.n	8002bce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d01c      	beq.n	8002b24 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d108      	bne.n	8002b0a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d030      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	4798      	blx	r3
 8002b08:	e02b      	b.n	8002b62 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d027      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	4798      	blx	r3
 8002b1a:	e022      	b.n	8002b62 <HAL_DMA_IRQHandler+0x29e>
 8002b1c:	20000000 	.word	0x20000000
 8002b20:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10f      	bne.n	8002b52 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0210 	bic.w	r2, r2, #16
 8002b40:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d032      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d022      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2205      	movs	r2, #5
 8002b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0201 	bic.w	r2, r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	3301      	adds	r3, #1
 8002b92:	60bb      	str	r3, [r7, #8]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d307      	bcc.n	8002baa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1f2      	bne.n	8002b8e <HAL_DMA_IRQHandler+0x2ca>
 8002ba8:	e000      	b.n	8002bac <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002baa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	4798      	blx	r3
 8002bcc:	e000      	b.n	8002bd0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002bce:	bf00      	nop
    }
  }
}
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop

08002bd8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
 8002bfc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c0c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	2b40      	cmp	r3, #64	; 0x40
 8002c1c:	d108      	bne.n	8002c30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c2e:	e007      	b.n	8002c40 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	60da      	str	r2, [r3, #12]
}
 8002c40:	bf00      	nop
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	3b10      	subs	r3, #16
 8002c5c:	4a13      	ldr	r2, [pc, #76]	; (8002cac <DMA_CalcBaseAndBitshift+0x60>)
 8002c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c62:	091b      	lsrs	r3, r3, #4
 8002c64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c66:	4a12      	ldr	r2, [pc, #72]	; (8002cb0 <DMA_CalcBaseAndBitshift+0x64>)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d908      	bls.n	8002c8c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <DMA_CalcBaseAndBitshift+0x68>)
 8002c82:	4013      	ands	r3, r2
 8002c84:	1d1a      	adds	r2, r3, #4
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	659a      	str	r2, [r3, #88]	; 0x58
 8002c8a:	e006      	b.n	8002c9a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	461a      	mov	r2, r3
 8002c92:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <DMA_CalcBaseAndBitshift+0x68>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	aaaaaaab 	.word	0xaaaaaaab
 8002cb0:	080074d8 	.word	0x080074d8
 8002cb4:	fffffc00 	.word	0xfffffc00

08002cb8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d11f      	bne.n	8002d12 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d855      	bhi.n	8002d84 <DMA_CheckFifoParam+0xcc>
 8002cd8:	a201      	add	r2, pc, #4	; (adr r2, 8002ce0 <DMA_CheckFifoParam+0x28>)
 8002cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cde:	bf00      	nop
 8002ce0:	08002cf1 	.word	0x08002cf1
 8002ce4:	08002d03 	.word	0x08002d03
 8002ce8:	08002cf1 	.word	0x08002cf1
 8002cec:	08002d85 	.word	0x08002d85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d045      	beq.n	8002d88 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d00:	e042      	b.n	8002d88 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d0a:	d13f      	bne.n	8002d8c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d10:	e03c      	b.n	8002d8c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d1a:	d121      	bne.n	8002d60 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b03      	cmp	r3, #3
 8002d20:	d836      	bhi.n	8002d90 <DMA_CheckFifoParam+0xd8>
 8002d22:	a201      	add	r2, pc, #4	; (adr r2, 8002d28 <DMA_CheckFifoParam+0x70>)
 8002d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d28:	08002d39 	.word	0x08002d39
 8002d2c:	08002d3f 	.word	0x08002d3f
 8002d30:	08002d39 	.word	0x08002d39
 8002d34:	08002d51 	.word	0x08002d51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d3c:	e02f      	b.n	8002d9e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d024      	beq.n	8002d94 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d4e:	e021      	b.n	8002d94 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d58:	d11e      	bne.n	8002d98 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d5e:	e01b      	b.n	8002d98 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d902      	bls.n	8002d6c <DMA_CheckFifoParam+0xb4>
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d003      	beq.n	8002d72 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d6a:	e018      	b.n	8002d9e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d70:	e015      	b.n	8002d9e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00e      	beq.n	8002d9c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	73fb      	strb	r3, [r7, #15]
      break;
 8002d82:	e00b      	b.n	8002d9c <DMA_CheckFifoParam+0xe4>
      break;
 8002d84:	bf00      	nop
 8002d86:	e00a      	b.n	8002d9e <DMA_CheckFifoParam+0xe6>
      break;
 8002d88:	bf00      	nop
 8002d8a:	e008      	b.n	8002d9e <DMA_CheckFifoParam+0xe6>
      break;
 8002d8c:	bf00      	nop
 8002d8e:	e006      	b.n	8002d9e <DMA_CheckFifoParam+0xe6>
      break;
 8002d90:	bf00      	nop
 8002d92:	e004      	b.n	8002d9e <DMA_CheckFifoParam+0xe6>
      break;
 8002d94:	bf00      	nop
 8002d96:	e002      	b.n	8002d9e <DMA_CheckFifoParam+0xe6>
      break;   
 8002d98:	bf00      	nop
 8002d9a:	e000      	b.n	8002d9e <DMA_CheckFifoParam+0xe6>
      break;
 8002d9c:	bf00      	nop
    }
  } 
  
  return status; 
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b089      	sub	sp, #36	; 0x24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61fb      	str	r3, [r7, #28]
 8002dca:	e169      	b.n	80030a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002dcc:	2201      	movs	r2, #1
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	f040 8158 	bne.w	800309a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d00b      	beq.n	8002e0a <HAL_GPIO_Init+0x5e>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d007      	beq.n	8002e0a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dfe:	2b11      	cmp	r3, #17
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b12      	cmp	r3, #18
 8002e08:	d130      	bne.n	8002e6c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	2203      	movs	r2, #3
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e40:	2201      	movs	r2, #1
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	091b      	lsrs	r3, r3, #4
 8002e56:	f003 0201 	and.w	r2, r3, #1
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	2203      	movs	r2, #3
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4013      	ands	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d003      	beq.n	8002eac <HAL_GPIO_Init+0x100>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b12      	cmp	r3, #18
 8002eaa:	d123      	bne.n	8002ef4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	08da      	lsrs	r2, r3, #3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3208      	adds	r2, #8
 8002eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	220f      	movs	r2, #15
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	691a      	ldr	r2, [r3, #16]
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f003 0307 	and.w	r3, r3, #7
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	08da      	lsrs	r2, r3, #3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3208      	adds	r2, #8
 8002eee:	69b9      	ldr	r1, [r7, #24]
 8002ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	2203      	movs	r2, #3
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	43db      	mvns	r3, r3
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f003 0203 	and.w	r2, r3, #3
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 80b2 	beq.w	800309a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f36:	4b5f      	ldr	r3, [pc, #380]	; (80030b4 <HAL_GPIO_Init+0x308>)
 8002f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3a:	4a5e      	ldr	r2, [pc, #376]	; (80030b4 <HAL_GPIO_Init+0x308>)
 8002f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f40:	6453      	str	r3, [r2, #68]	; 0x44
 8002f42:	4b5c      	ldr	r3, [pc, #368]	; (80030b4 <HAL_GPIO_Init+0x308>)
 8002f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f4e:	4a5a      	ldr	r2, [pc, #360]	; (80030b8 <HAL_GPIO_Init+0x30c>)
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	089b      	lsrs	r3, r3, #2
 8002f54:	3302      	adds	r3, #2
 8002f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	220f      	movs	r2, #15
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a51      	ldr	r2, [pc, #324]	; (80030bc <HAL_GPIO_Init+0x310>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d02b      	beq.n	8002fd2 <HAL_GPIO_Init+0x226>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a50      	ldr	r2, [pc, #320]	; (80030c0 <HAL_GPIO_Init+0x314>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d025      	beq.n	8002fce <HAL_GPIO_Init+0x222>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a4f      	ldr	r2, [pc, #316]	; (80030c4 <HAL_GPIO_Init+0x318>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d01f      	beq.n	8002fca <HAL_GPIO_Init+0x21e>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a4e      	ldr	r2, [pc, #312]	; (80030c8 <HAL_GPIO_Init+0x31c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d019      	beq.n	8002fc6 <HAL_GPIO_Init+0x21a>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a4d      	ldr	r2, [pc, #308]	; (80030cc <HAL_GPIO_Init+0x320>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d013      	beq.n	8002fc2 <HAL_GPIO_Init+0x216>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a4c      	ldr	r2, [pc, #304]	; (80030d0 <HAL_GPIO_Init+0x324>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00d      	beq.n	8002fbe <HAL_GPIO_Init+0x212>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a4b      	ldr	r2, [pc, #300]	; (80030d4 <HAL_GPIO_Init+0x328>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d007      	beq.n	8002fba <HAL_GPIO_Init+0x20e>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a4a      	ldr	r2, [pc, #296]	; (80030d8 <HAL_GPIO_Init+0x32c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d101      	bne.n	8002fb6 <HAL_GPIO_Init+0x20a>
 8002fb2:	2307      	movs	r3, #7
 8002fb4:	e00e      	b.n	8002fd4 <HAL_GPIO_Init+0x228>
 8002fb6:	2308      	movs	r3, #8
 8002fb8:	e00c      	b.n	8002fd4 <HAL_GPIO_Init+0x228>
 8002fba:	2306      	movs	r3, #6
 8002fbc:	e00a      	b.n	8002fd4 <HAL_GPIO_Init+0x228>
 8002fbe:	2305      	movs	r3, #5
 8002fc0:	e008      	b.n	8002fd4 <HAL_GPIO_Init+0x228>
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	e006      	b.n	8002fd4 <HAL_GPIO_Init+0x228>
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e004      	b.n	8002fd4 <HAL_GPIO_Init+0x228>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e002      	b.n	8002fd4 <HAL_GPIO_Init+0x228>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <HAL_GPIO_Init+0x228>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	69fa      	ldr	r2, [r7, #28]
 8002fd6:	f002 0203 	and.w	r2, r2, #3
 8002fda:	0092      	lsls	r2, r2, #2
 8002fdc:	4093      	lsls	r3, r2
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002fe4:	4934      	ldr	r1, [pc, #208]	; (80030b8 <HAL_GPIO_Init+0x30c>)
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	089b      	lsrs	r3, r3, #2
 8002fea:	3302      	adds	r3, #2
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ff2:	4b3a      	ldr	r3, [pc, #232]	; (80030dc <HAL_GPIO_Init+0x330>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4013      	ands	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4313      	orrs	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003016:	4a31      	ldr	r2, [pc, #196]	; (80030dc <HAL_GPIO_Init+0x330>)
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800301c:	4b2f      	ldr	r3, [pc, #188]	; (80030dc <HAL_GPIO_Init+0x330>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003040:	4a26      	ldr	r2, [pc, #152]	; (80030dc <HAL_GPIO_Init+0x330>)
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003046:	4b25      	ldr	r3, [pc, #148]	; (80030dc <HAL_GPIO_Init+0x330>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	43db      	mvns	r3, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4013      	ands	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	4313      	orrs	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800306a:	4a1c      	ldr	r2, [pc, #112]	; (80030dc <HAL_GPIO_Init+0x330>)
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003070:	4b1a      	ldr	r3, [pc, #104]	; (80030dc <HAL_GPIO_Init+0x330>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	43db      	mvns	r3, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4013      	ands	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	4313      	orrs	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003094:	4a11      	ldr	r2, [pc, #68]	; (80030dc <HAL_GPIO_Init+0x330>)
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3301      	adds	r3, #1
 800309e:	61fb      	str	r3, [r7, #28]
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	2b0f      	cmp	r3, #15
 80030a4:	f67f ae92 	bls.w	8002dcc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80030a8:	bf00      	nop
 80030aa:	3724      	adds	r7, #36	; 0x24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	40023800 	.word	0x40023800
 80030b8:	40013800 	.word	0x40013800
 80030bc:	40020000 	.word	0x40020000
 80030c0:	40020400 	.word	0x40020400
 80030c4:	40020800 	.word	0x40020800
 80030c8:	40020c00 	.word	0x40020c00
 80030cc:	40021000 	.word	0x40021000
 80030d0:	40021400 	.word	0x40021400
 80030d4:	40021800 	.word	0x40021800
 80030d8:	40021c00 	.word	0x40021c00
 80030dc:	40013c00 	.word	0x40013c00

080030e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	807b      	strh	r3, [r7, #2]
 80030ec:	4613      	mov	r3, r2
 80030ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030f0:	787b      	ldrb	r3, [r7, #1]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030f6:	887a      	ldrh	r2, [r7, #2]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80030fc:	e003      	b.n	8003106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80030fe:	887b      	ldrh	r3, [r7, #2]
 8003100:	041a      	lsls	r2, r3, #16
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	619a      	str	r2, [r3, #24]
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
	...

08003114 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e07f      	b.n	8003226 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d106      	bne.n	8003140 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7fe f982 	bl	8001444 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2224      	movs	r2, #36	; 0x24
 8003144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 0201 	bic.w	r2, r2, #1
 8003156:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003164:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003174:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d107      	bne.n	800318e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800318a:	609a      	str	r2, [r3, #8]
 800318c:	e006      	b.n	800319c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800319a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d104      	bne.n	80031ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6859      	ldr	r1, [r3, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <HAL_I2C_Init+0x11c>)
 80031ba:	430b      	orrs	r3, r1
 80031bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691a      	ldr	r2, [r3, #16]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	ea42 0103 	orr.w	r1, r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	021a      	lsls	r2, r3, #8
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	69d9      	ldr	r1, [r3, #28]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a1a      	ldr	r2, [r3, #32]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 0201 	orr.w	r2, r2, #1
 8003206:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	02008000 	.word	0x02008000

08003234 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b088      	sub	sp, #32
 8003238:	af02      	add	r7, sp, #8
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	4608      	mov	r0, r1
 800323e:	4611      	mov	r1, r2
 8003240:	461a      	mov	r2, r3
 8003242:	4603      	mov	r3, r0
 8003244:	817b      	strh	r3, [r7, #10]
 8003246:	460b      	mov	r3, r1
 8003248:	813b      	strh	r3, [r7, #8]
 800324a:	4613      	mov	r3, r2
 800324c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b20      	cmp	r3, #32
 8003258:	f040 80fd 	bne.w	8003456 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d002      	beq.n	8003268 <HAL_I2C_Mem_Read+0x34>
 8003262:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003264:	2b00      	cmp	r3, #0
 8003266:	d105      	bne.n	8003274 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800326e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e0f1      	b.n	8003458 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800327a:	2b01      	cmp	r3, #1
 800327c:	d101      	bne.n	8003282 <HAL_I2C_Mem_Read+0x4e>
 800327e:	2302      	movs	r3, #2
 8003280:	e0ea      	b.n	8003458 <HAL_I2C_Mem_Read+0x224>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800328a:	f7fe fc0b 	bl	8001aa4 <HAL_GetTick>
 800328e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	2319      	movs	r3, #25
 8003296:	2201      	movs	r2, #1
 8003298:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f001 fb39 	bl	8004914 <I2C_WaitOnFlagUntilTimeout>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e0d5      	b.n	8003458 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2222      	movs	r2, #34	; 0x22
 80032b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2240      	movs	r2, #64	; 0x40
 80032b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6a3a      	ldr	r2, [r7, #32]
 80032c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032d4:	88f8      	ldrh	r0, [r7, #6]
 80032d6:	893a      	ldrh	r2, [r7, #8]
 80032d8:	8979      	ldrh	r1, [r7, #10]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	9301      	str	r3, [sp, #4]
 80032de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	4603      	mov	r3, r0
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 fe27 	bl	8003f38 <I2C_RequestMemoryRead>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e0ad      	b.n	8003458 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003300:	b29b      	uxth	r3, r3
 8003302:	2bff      	cmp	r3, #255	; 0xff
 8003304:	d90e      	bls.n	8003324 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	22ff      	movs	r2, #255	; 0xff
 800330a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003310:	b2da      	uxtb	r2, r3
 8003312:	8979      	ldrh	r1, [r7, #10]
 8003314:	4b52      	ldr	r3, [pc, #328]	; (8003460 <HAL_I2C_Mem_Read+0x22c>)
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f001 fc1b 	bl	8004b58 <I2C_TransferConfig>
 8003322:	e00f      	b.n	8003344 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003328:	b29a      	uxth	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003332:	b2da      	uxtb	r2, r3
 8003334:	8979      	ldrh	r1, [r7, #10]
 8003336:	4b4a      	ldr	r3, [pc, #296]	; (8003460 <HAL_I2C_Mem_Read+0x22c>)
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f001 fc0a 	bl	8004b58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334a:	2200      	movs	r2, #0
 800334c:	2104      	movs	r1, #4
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f001 fae0 	bl	8004914 <I2C_WaitOnFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e07c      	b.n	8003458 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	1c5a      	adds	r2, r3, #1
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337a:	3b01      	subs	r3, #1
 800337c:	b29a      	uxth	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003386:	b29b      	uxth	r3, r3
 8003388:	3b01      	subs	r3, #1
 800338a:	b29a      	uxth	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003394:	b29b      	uxth	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d034      	beq.n	8003404 <HAL_I2C_Mem_Read+0x1d0>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d130      	bne.n	8003404 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a8:	2200      	movs	r2, #0
 80033aa:	2180      	movs	r1, #128	; 0x80
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f001 fab1 	bl	8004914 <I2C_WaitOnFlagUntilTimeout>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e04d      	b.n	8003458 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	2bff      	cmp	r3, #255	; 0xff
 80033c4:	d90e      	bls.n	80033e4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	22ff      	movs	r2, #255	; 0xff
 80033ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	8979      	ldrh	r1, [r7, #10]
 80033d4:	2300      	movs	r3, #0
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f001 fbbb 	bl	8004b58 <I2C_TransferConfig>
 80033e2:	e00f      	b.n	8003404 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	8979      	ldrh	r1, [r7, #10]
 80033f6:	2300      	movs	r3, #0
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f001 fbaa 	bl	8004b58 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d19a      	bne.n	8003344 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f001 fafe 	bl	8004a14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e01a      	b.n	8003458 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2220      	movs	r2, #32
 8003428:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6859      	ldr	r1, [r3, #4]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <HAL_I2C_Mem_Read+0x230>)
 8003436:	400b      	ands	r3, r1
 8003438:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2220      	movs	r2, #32
 800343e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	e000      	b.n	8003458 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003456:	2302      	movs	r3, #2
  }
}
 8003458:	4618      	mov	r0, r3
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	80002400 	.word	0x80002400
 8003464:	fe00e800 	.word	0xfe00e800

08003468 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08a      	sub	sp, #40	; 0x28
 800346c:	af02      	add	r7, sp, #8
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	4608      	mov	r0, r1
 8003472:	4611      	mov	r1, r2
 8003474:	461a      	mov	r2, r3
 8003476:	4603      	mov	r3, r0
 8003478:	817b      	strh	r3, [r7, #10]
 800347a:	460b      	mov	r3, r1
 800347c:	813b      	strh	r3, [r7, #8]
 800347e:	4613      	mov	r3, r2
 8003480:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b20      	cmp	r3, #32
 800348c:	f040 80d5 	bne.w	800363a <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003492:	2b00      	cmp	r3, #0
 8003494:	d002      	beq.n	800349c <HAL_I2C_Mem_Write_DMA+0x34>
 8003496:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003498:	2b00      	cmp	r3, #0
 800349a:	d105      	bne.n	80034a8 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e0c9      	b.n	800363c <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034b6:	d101      	bne.n	80034bc <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 80034b8:	2302      	movs	r3, #2
 80034ba:	e0bf      	b.n	800363c <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_I2C_Mem_Write_DMA+0x62>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e0b8      	b.n	800363c <HAL_I2C_Mem_Write_DMA+0x1d4>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034d2:	f7fe fae7 	bl	8001aa4 <HAL_GetTick>
 80034d6:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2221      	movs	r2, #33	; 0x21
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2240      	movs	r2, #64	; 0x40
 80034e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80034f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	4a51      	ldr	r2, [pc, #324]	; (8003644 <HAL_I2C_Mem_Write_DMA+0x1dc>)
 80034fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4a51      	ldr	r2, [pc, #324]	; (8003648 <HAL_I2C_Mem_Write_DMA+0x1e0>)
 8003504:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350a:	b29b      	uxth	r3, r3
 800350c:	2bff      	cmp	r3, #255	; 0xff
 800350e:	d906      	bls.n	800351e <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	22ff      	movs	r2, #255	; 0xff
 8003514:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003516:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800351a:	61fb      	str	r3, [r7, #28]
 800351c:	e007      	b.n	800352e <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003522:	b29a      	uxth	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003528:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800352c:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800352e:	88f8      	ldrh	r0, [r7, #6]
 8003530:	893a      	ldrh	r2, [r7, #8]
 8003532:	8979      	ldrh	r1, [r7, #10]
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	9301      	str	r3, [sp, #4]
 8003538:	2319      	movs	r3, #25
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	4603      	mov	r3, r0
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 fca6 	bl	8003e90 <I2C_RequestMemoryWrite>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d005      	beq.n	8003556 <HAL_I2C_Mem_Write_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e072      	b.n	800363c <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355a:	2b00      	cmp	r3, #0
 800355c:	d020      	beq.n	80035a0 <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003562:	4a3a      	ldr	r2, [pc, #232]	; (800364c <HAL_I2C_Mem_Write_DMA+0x1e4>)
 8003564:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356a:	4a39      	ldr	r2, [pc, #228]	; (8003650 <HAL_I2C_Mem_Write_DMA+0x1e8>)
 800356c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003572:	2200      	movs	r2, #0
 8003574:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357a:	2200      	movs	r2, #0
 800357c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003582:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3328      	adds	r3, #40	; 0x28
 800358a:	461a      	mov	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003590:	f7ff f916 	bl	80027c0 <HAL_DMA_Start_IT>
 8003594:	4603      	mov	r3, r0
 8003596:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8003598:	7dfb      	ldrb	r3, [r7, #23]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d139      	bne.n	8003612 <HAL_I2C_Mem_Write_DMA+0x1aa>
 800359e:	e013      	b.n	80035c8 <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e039      	b.n	800363c <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	8979      	ldrh	r1, [r7, #10]
 80035d0:	2300      	movs	r3, #0
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f001 fabe 	bl	8004b58 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80035f6:	2111      	movs	r1, #17
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f001 fadb 	bl	8004bb4 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800360c:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	e014      	b.n	800363c <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2220      	movs	r2, #32
 8003616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003626:	f043 0210 	orr.w	r2, r3, #16
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 800363a:	2302      	movs	r3, #2
  }
}
 800363c:	4618      	mov	r0, r3
 800363e:	3720      	adds	r7, #32
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	ffff0000 	.word	0xffff0000
 8003648:	08003b1b 	.word	0x08003b1b
 800364c:	0800472d 	.word	0x0800472d
 8003650:	08004859 	.word	0x08004859

08003654 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08a      	sub	sp, #40	; 0x28
 8003658:	af02      	add	r7, sp, #8
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	4608      	mov	r0, r1
 800365e:	4611      	mov	r1, r2
 8003660:	461a      	mov	r2, r3
 8003662:	4603      	mov	r3, r0
 8003664:	817b      	strh	r3, [r7, #10]
 8003666:	460b      	mov	r3, r1
 8003668:	813b      	strh	r3, [r7, #8]
 800366a:	4613      	mov	r3, r2
 800366c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b20      	cmp	r3, #32
 8003678:	f040 80d5 	bne.w	8003826 <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 800367c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <HAL_I2C_Mem_Read_DMA+0x34>
 8003682:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003684:	2b00      	cmp	r3, #0
 8003686:	d105      	bne.n	8003694 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800368e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0c9      	b.n	8003828 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800369e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036a2:	d101      	bne.n	80036a8 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 80036a4:	2302      	movs	r3, #2
 80036a6:	e0bf      	b.n	8003828 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d101      	bne.n	80036b6 <HAL_I2C_Mem_Read_DMA+0x62>
 80036b2:	2302      	movs	r3, #2
 80036b4:	e0b8      	b.n	8003828 <HAL_I2C_Mem_Read_DMA+0x1d4>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036be:	f7fe f9f1 	bl	8001aa4 <HAL_GetTick>
 80036c2:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2222      	movs	r2, #34	; 0x22
 80036c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2240      	movs	r2, #64	; 0x40
 80036d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80036e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	4a51      	ldr	r2, [pc, #324]	; (8003830 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 80036ea:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4a51      	ldr	r2, [pc, #324]	; (8003834 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 80036f0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	2bff      	cmp	r3, #255	; 0xff
 80036fa:	d906      	bls.n	800370a <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	22ff      	movs	r2, #255	; 0xff
 8003700:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003702:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003706:	61fb      	str	r3, [r7, #28]
 8003708:	e007      	b.n	800371a <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003714:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003718:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800371a:	88f8      	ldrh	r0, [r7, #6]
 800371c:	893a      	ldrh	r2, [r7, #8]
 800371e:	8979      	ldrh	r1, [r7, #10]
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	9301      	str	r3, [sp, #4]
 8003724:	2319      	movs	r3, #25
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	4603      	mov	r3, r0
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 fc04 	bl	8003f38 <I2C_RequestMemoryRead>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d005      	beq.n	8003742 <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e072      	b.n	8003828 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003746:	2b00      	cmp	r3, #0
 8003748:	d020      	beq.n	800378c <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374e:	4a3a      	ldr	r2, [pc, #232]	; (8003838 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 8003750:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003756:	4a39      	ldr	r2, [pc, #228]	; (800383c <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8003758:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375e:	2200      	movs	r2, #0
 8003760:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003766:	2200      	movs	r2, #0
 8003768:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	3324      	adds	r3, #36	; 0x24
 8003774:	4619      	mov	r1, r3
 8003776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800377c:	f7ff f820 	bl	80027c0 <HAL_DMA_Start_IT>
 8003780:	4603      	mov	r3, r0
 8003782:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8003784:	7dfb      	ldrb	r3, [r7, #23]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d139      	bne.n	80037fe <HAL_I2C_Mem_Read_DMA+0x1aa>
 800378a:	e013      	b.n	80037b4 <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e039      	b.n	8003828 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	8979      	ldrh	r1, [r7, #10]
 80037bc:	4b20      	ldr	r3, [pc, #128]	; (8003840 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f001 f9c8 	bl	8004b58 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80037e2:	2111      	movs	r1, #17
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f001 f9e5 	bl	8004bb4 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037f8:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	e014      	b.n	8003828 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2220      	movs	r2, #32
 8003802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003812:	f043 0210 	orr.w	r2, r3, #16
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e000      	b.n	8003828 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8003826:	2302      	movs	r3, #2
  }
}
 8003828:	4618      	mov	r0, r3
 800382a:	3720      	adds	r7, #32
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	ffff0000 	.word	0xffff0000
 8003834:	08003b1b 	.word	0x08003b1b
 8003838:	080047c3 	.word	0x080047c3
 800383c:	08004859 	.word	0x08004859
 8003840:	80002400 	.word	0x80002400

08003844 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	460b      	mov	r3, r1
 800389e:	70fb      	strb	r3, [r7, #3]
 80038a0:	4613      	mov	r3, r2
 80038a2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003924:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <I2C_Slave_ISR_IT+0x24>
 8003934:	2302      	movs	r3, #2
 8003936:	e0ec      	b.n	8003b12 <I2C_Slave_ISR_IT+0x1fe>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	095b      	lsrs	r3, r3, #5
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d009      	beq.n	8003960 <I2C_Slave_ISR_IT+0x4c>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	095b      	lsrs	r3, r3, #5
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003958:	6939      	ldr	r1, [r7, #16]
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 fcd8 	bl	8004310 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	091b      	lsrs	r3, r3, #4
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b00      	cmp	r3, #0
 800396a:	d04d      	beq.n	8003a08 <I2C_Slave_ISR_IT+0xf4>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	091b      	lsrs	r3, r3, #4
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d047      	beq.n	8003a08 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397c:	b29b      	uxth	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d128      	bne.n	80039d4 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b28      	cmp	r3, #40	; 0x28
 800398c:	d108      	bne.n	80039a0 <I2C_Slave_ISR_IT+0x8c>
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003994:	d104      	bne.n	80039a0 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003996:	6939      	ldr	r1, [r7, #16]
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 fd8f 	bl	80044bc <I2C_ITListenCplt>
 800399e:	e032      	b.n	8003a06 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b29      	cmp	r3, #41	; 0x29
 80039aa:	d10e      	bne.n	80039ca <I2C_Slave_ISR_IT+0xb6>
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039b2:	d00a      	beq.n	80039ca <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2210      	movs	r2, #16
 80039ba:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f000 fe91 	bl	80046e4 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 fbcb 	bl	800415e <I2C_ITSlaveSeqCplt>
 80039c8:	e01d      	b.n	8003a06 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2210      	movs	r2, #16
 80039d0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80039d2:	e096      	b.n	8003b02 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2210      	movs	r2, #16
 80039da:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e0:	f043 0204 	orr.w	r2, r3, #4
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d004      	beq.n	80039f8 <I2C_Slave_ISR_IT+0xe4>
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039f4:	f040 8085 	bne.w	8003b02 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fc:	4619      	mov	r1, r3
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 fdb0 	bl	8004564 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003a04:	e07d      	b.n	8003b02 <I2C_Slave_ISR_IT+0x1ee>
 8003a06:	e07c      	b.n	8003b02 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	089b      	lsrs	r3, r3, #2
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d030      	beq.n	8003a76 <I2C_Slave_ISR_IT+0x162>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	089b      	lsrs	r3, r3, #2
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d02a      	beq.n	8003a76 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d018      	beq.n	8003a5c <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a46:	3b01      	subs	r3, #1
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d14f      	bne.n	8003b06 <I2C_Slave_ISR_IT+0x1f2>
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a6c:	d04b      	beq.n	8003b06 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 fb75 	bl	800415e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003a74:	e047      	b.n	8003b06 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	08db      	lsrs	r3, r3, #3
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <I2C_Slave_ISR_IT+0x184>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	08db      	lsrs	r3, r3, #3
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d004      	beq.n	8003a98 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003a8e:	6939      	ldr	r1, [r7, #16]
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 faa5 	bl	8003fe0 <I2C_ITAddrCplt>
 8003a96:	e037      	b.n	8003b08 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	085b      	lsrs	r3, r3, #1
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d031      	beq.n	8003b08 <I2C_Slave_ISR_IT+0x1f4>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	085b      	lsrs	r3, r3, #1
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d02b      	beq.n	8003b08 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d018      	beq.n	8003aec <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	781a      	ldrb	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	851a      	strh	r2, [r3, #40]	; 0x28
 8003aea:	e00d      	b.n	8003b08 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003af2:	d002      	beq.n	8003afa <I2C_Slave_ISR_IT+0x1e6>
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d106      	bne.n	8003b08 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 fb2f 	bl	800415e <I2C_ITSlaveSeqCplt>
 8003b00:	e002      	b.n	8003b08 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003b02:	bf00      	nop
 8003b04:	e000      	b.n	8003b08 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003b06:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b088      	sub	sp, #32
 8003b1e:	af02      	add	r7, sp, #8
 8003b20:	60f8      	str	r0, [r7, #12]
 8003b22:	60b9      	str	r1, [r7, #8]
 8003b24:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d101      	bne.n	8003b34 <I2C_Master_ISR_DMA+0x1a>
 8003b30:	2302      	movs	r3, #2
 8003b32:	e0e1      	b.n	8003cf8 <I2C_Master_ISR_DMA+0x1de>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	091b      	lsrs	r3, r3, #4
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d017      	beq.n	8003b78 <I2C_Master_ISR_DMA+0x5e>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	091b      	lsrs	r3, r3, #4
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d011      	beq.n	8003b78 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2210      	movs	r2, #16
 8003b5a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b60:	f043 0204 	orr.w	r2, r3, #4
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003b68:	2112      	movs	r1, #18
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f001 f822 	bl	8004bb4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 fdb7 	bl	80046e4 <I2C_Flush_TXDR>
 8003b76:	e0ba      	b.n	8003cee <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	09db      	lsrs	r3, r3, #7
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d072      	beq.n	8003c6a <I2C_Master_ISR_DMA+0x150>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	099b      	lsrs	r3, r3, #6
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d06c      	beq.n	8003c6a <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b9e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d04e      	beq.n	8003c48 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bb6:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	2bff      	cmp	r3, #255	; 0xff
 8003bc0:	d906      	bls.n	8003bd0 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	22ff      	movs	r2, #255	; 0xff
 8003bc6:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003bc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bcc:	617b      	str	r3, [r7, #20]
 8003bce:	e010      	b.n	8003bf2 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bde:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003be2:	d003      	beq.n	8003bec <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be8:	617b      	str	r3, [r7, #20]
 8003bea:	e002      	b.n	8003bf2 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003bec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bf0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	8a79      	ldrh	r1, [r7, #18]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 ffa9 	bl	8004b58 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b22      	cmp	r3, #34	; 0x22
 8003c22:	d108      	bne.n	8003c36 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c32:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003c34:	e05b      	b.n	8003cee <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c44:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003c46:	e052      	b.n	8003cee <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c56:	d003      	beq.n	8003c60 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 fa43 	bl	80040e4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003c5e:	e046      	b.n	8003cee <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003c60:	2140      	movs	r1, #64	; 0x40
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 fc7e 	bl	8004564 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003c68:	e041      	b.n	8003cee <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	099b      	lsrs	r3, r3, #6
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d029      	beq.n	8003cca <I2C_Master_ISR_DMA+0x1b0>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	099b      	lsrs	r3, r3, #6
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d023      	beq.n	8003cca <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d119      	bne.n	8003cc0 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c9a:	d027      	beq.n	8003cec <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ca4:	d108      	bne.n	8003cb8 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cb4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003cb6:	e019      	b.n	8003cec <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 fa13 	bl	80040e4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003cbe:	e015      	b.n	8003cec <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003cc0:	2140      	movs	r1, #64	; 0x40
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 fc4e 	bl	8004564 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003cc8:	e010      	b.n	8003cec <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	095b      	lsrs	r3, r3, #5
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00b      	beq.n	8003cee <I2C_Master_ISR_DMA+0x1d4>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	095b      	lsrs	r3, r3, #5
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d005      	beq.n	8003cee <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003ce2:	68b9      	ldr	r1, [r7, #8]
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 fa77 	bl	80041d8 <I2C_ITMasterCplt>
 8003cea:	e000      	b.n	8003cee <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003cec:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3718      	adds	r7, #24
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d10:	613b      	str	r3, [r7, #16]
  uint32_t treatdmanack = 0U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d101      	bne.n	8003d24 <I2C_Slave_ISR_DMA+0x24>
 8003d20:	2302      	movs	r3, #2
 8003d22:	e0b1      	b.n	8003e88 <I2C_Slave_ISR_DMA+0x188>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	095b      	lsrs	r3, r3, #5
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d009      	beq.n	8003d4c <I2C_Slave_ISR_DMA+0x4c>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	095b      	lsrs	r3, r3, #5
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 fae2 	bl	8004310 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	091b      	lsrs	r3, r3, #4
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 8082 	beq.w	8003e5e <I2C_Slave_ISR_DMA+0x15e>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	091b      	lsrs	r3, r3, #4
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d07b      	beq.n	8003e5e <I2C_Slave_ISR_DMA+0x15e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	0b9b      	lsrs	r3, r3, #14
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d105      	bne.n	8003d7e <I2C_Slave_ISR_DMA+0x7e>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	0bdb      	lsrs	r3, r3, #15
 8003d76:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d068      	beq.n	8003e50 <I2C_Slave_ISR_DMA+0x150>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00d      	beq.n	8003da2 <I2C_Slave_ISR_DMA+0xa2>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	0bdb      	lsrs	r3, r3, #15
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d007      	beq.n	8003da2 <I2C_Slave_ISR_DMA+0xa2>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <I2C_Slave_ISR_DMA+0xa2>
          {
            treatdmanack = 1U;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	617b      	str	r3, [r7, #20]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00d      	beq.n	8003dc6 <I2C_Slave_ISR_DMA+0xc6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	0b9b      	lsrs	r3, r3, #14
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d007      	beq.n	8003dc6 <I2C_Slave_ISR_DMA+0xc6>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <I2C_Slave_ISR_DMA+0xc6>
          {
            treatdmanack = 1U;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	617b      	str	r3, [r7, #20]
          }
        }
      }

      if (treatdmanack == 1U)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d128      	bne.n	8003e1e <I2C_Slave_ISR_DMA+0x11e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b28      	cmp	r3, #40	; 0x28
 8003dd6:	d108      	bne.n	8003dea <I2C_Slave_ISR_DMA+0xea>
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003dde:	d104      	bne.n	8003dea <I2C_Slave_ISR_DMA+0xea>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003de0:	68b9      	ldr	r1, [r7, #8]
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 fb6a 	bl	80044bc <I2C_ITListenCplt>
 8003de8:	e031      	b.n	8003e4e <I2C_Slave_ISR_DMA+0x14e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b29      	cmp	r3, #41	; 0x29
 8003df4:	d10e      	bne.n	8003e14 <I2C_Slave_ISR_DMA+0x114>
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dfc:	d00a      	beq.n	8003e14 <I2C_Slave_ISR_DMA+0x114>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2210      	movs	r2, #16
 8003e04:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 fc6c 	bl	80046e4 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 f9a6 	bl	800415e <I2C_ITSlaveSeqCplt>
 8003e12:	e01c      	b.n	8003e4e <I2C_Slave_ISR_DMA+0x14e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2210      	movs	r2, #16
 8003e1a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003e1c:	e01d      	b.n	8003e5a <I2C_Slave_ISR_DMA+0x15a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2210      	movs	r2, #16
 8003e24:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2a:	f043 0204 	orr.w	r2, r3, #4
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	645a      	str	r2, [r3, #68]	; 0x44

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <I2C_Slave_ISR_DMA+0x140>
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e3e:	d10c      	bne.n	8003e5a <I2C_Slave_ISR_DMA+0x15a>
        {
          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e44:	4619      	mov	r1, r3
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 fb8c 	bl	8004564 <I2C_ITError>
      if (treatdmanack == 1U)
 8003e4c:	e005      	b.n	8003e5a <I2C_Slave_ISR_DMA+0x15a>
 8003e4e:	e004      	b.n	8003e5a <I2C_Slave_ISR_DMA+0x15a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2210      	movs	r2, #16
 8003e56:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003e58:	e011      	b.n	8003e7e <I2C_Slave_ISR_DMA+0x17e>
      if (treatdmanack == 1U)
 8003e5a:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003e5c:	e00f      	b.n	8003e7e <I2C_Slave_ISR_DMA+0x17e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	08db      	lsrs	r3, r3, #3
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d009      	beq.n	8003e7e <I2C_Slave_ISR_DMA+0x17e>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	08db      	lsrs	r3, r3, #3
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <I2C_Slave_ISR_DMA+0x17e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003e76:	68b9      	ldr	r1, [r7, #8]
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 f8b1 	bl	8003fe0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af02      	add	r7, sp, #8
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	4608      	mov	r0, r1
 8003e9a:	4611      	mov	r1, r2
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	817b      	strh	r3, [r7, #10]
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	813b      	strh	r3, [r7, #8]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003eaa:	88fb      	ldrh	r3, [r7, #6]
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	8979      	ldrh	r1, [r7, #10]
 8003eb0:	4b20      	ldr	r3, [pc, #128]	; (8003f34 <I2C_RequestMemoryWrite+0xa4>)
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 fe4d 	bl	8004b58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ebe:	69fa      	ldr	r2, [r7, #28]
 8003ec0:	69b9      	ldr	r1, [r7, #24]
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 fd66 	bl	8004994 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e02c      	b.n	8003f2c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ed2:	88fb      	ldrh	r3, [r7, #6]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d105      	bne.n	8003ee4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ed8:	893b      	ldrh	r3, [r7, #8]
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	629a      	str	r2, [r3, #40]	; 0x28
 8003ee2:	e015      	b.n	8003f10 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ee4:	893b      	ldrh	r3, [r7, #8]
 8003ee6:	0a1b      	lsrs	r3, r3, #8
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ef2:	69fa      	ldr	r2, [r7, #28]
 8003ef4:	69b9      	ldr	r1, [r7, #24]
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 fd4c 	bl	8004994 <I2C_WaitOnTXISFlagUntilTimeout>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e012      	b.n	8003f2c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f06:	893b      	ldrh	r3, [r7, #8]
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	2200      	movs	r2, #0
 8003f18:	2180      	movs	r1, #128	; 0x80
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 fcfa 	bl	8004914 <I2C_WaitOnFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e000      	b.n	8003f2c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	80002000 	.word	0x80002000

08003f38 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af02      	add	r7, sp, #8
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	4608      	mov	r0, r1
 8003f42:	4611      	mov	r1, r2
 8003f44:	461a      	mov	r2, r3
 8003f46:	4603      	mov	r3, r0
 8003f48:	817b      	strh	r3, [r7, #10]
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	813b      	strh	r3, [r7, #8]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003f52:	88fb      	ldrh	r3, [r7, #6]
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	8979      	ldrh	r1, [r7, #10]
 8003f58:	4b20      	ldr	r3, [pc, #128]	; (8003fdc <I2C_RequestMemoryRead+0xa4>)
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 fdfa 	bl	8004b58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f64:	69fa      	ldr	r2, [r7, #28]
 8003f66:	69b9      	ldr	r1, [r7, #24]
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 fd13 	bl	8004994 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e02c      	b.n	8003fd2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f78:	88fb      	ldrh	r3, [r7, #6]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d105      	bne.n	8003f8a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f7e:	893b      	ldrh	r3, [r7, #8]
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	629a      	str	r2, [r3, #40]	; 0x28
 8003f88:	e015      	b.n	8003fb6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f8a:	893b      	ldrh	r3, [r7, #8]
 8003f8c:	0a1b      	lsrs	r3, r3, #8
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f98:	69fa      	ldr	r2, [r7, #28]
 8003f9a:	69b9      	ldr	r1, [r7, #24]
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 fcf9 	bl	8004994 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e012      	b.n	8003fd2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fac:	893b      	ldrh	r3, [r7, #8]
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	2140      	movs	r1, #64	; 0x40
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 fca7 	bl	8004914 <I2C_WaitOnFlagUntilTimeout>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e000      	b.n	8003fd2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	80002000 	.word	0x80002000

08003fe0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ff6:	2b28      	cmp	r3, #40	; 0x28
 8003ff8:	d168      	bne.n	80040cc <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	0c1b      	lsrs	r3, r3, #16
 8004002:	b2db      	uxtb	r3, r3
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	0c1b      	lsrs	r3, r3, #16
 8004012:	b29b      	uxth	r3, r3
 8004014:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004018:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	b29b      	uxth	r3, r3
 8004022:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004026:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	b29b      	uxth	r3, r3
 8004030:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004034:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	2b02      	cmp	r3, #2
 800403c:	d137      	bne.n	80040ae <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800403e:	897b      	ldrh	r3, [r7, #10]
 8004040:	09db      	lsrs	r3, r3, #7
 8004042:	b29a      	uxth	r2, r3
 8004044:	89bb      	ldrh	r3, [r7, #12]
 8004046:	4053      	eors	r3, r2
 8004048:	b29b      	uxth	r3, r3
 800404a:	f003 0306 	and.w	r3, r3, #6
 800404e:	2b00      	cmp	r3, #0
 8004050:	d11c      	bne.n	800408c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004052:	897b      	ldrh	r3, [r7, #10]
 8004054:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004064:	2b02      	cmp	r3, #2
 8004066:	d139      	bne.n	80040dc <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2208      	movs	r2, #8
 8004074:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800407e:	89ba      	ldrh	r2, [r7, #12]
 8004080:	7bfb      	ldrb	r3, [r7, #15]
 8004082:	4619      	mov	r1, r3
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7ff fc05 	bl	8003894 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800408a:	e027      	b.n	80040dc <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 800408c:	893b      	ldrh	r3, [r7, #8]
 800408e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004090:	2104      	movs	r1, #4
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 fdfc 	bl	8004c90 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80040a0:	89ba      	ldrh	r2, [r7, #12]
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
 80040a4:	4619      	mov	r1, r3
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff fbf4 	bl	8003894 <HAL_I2C_AddrCallback>
}
 80040ac:	e016      	b.n	80040dc <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80040ae:	2104      	movs	r1, #4
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 fded 	bl	8004c90 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80040be:	89ba      	ldrh	r2, [r7, #12]
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
 80040c2:	4619      	mov	r1, r3
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7ff fbe5 	bl	8003894 <HAL_I2C_AddrCallback>
}
 80040ca:	e007      	b.n	80040dc <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2208      	movs	r2, #8
 80040d2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80040dc:	bf00      	nop
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b21      	cmp	r3, #33	; 0x21
 80040fe:	d115      	bne.n	800412c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2220      	movs	r2, #32
 8004104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2211      	movs	r2, #17
 800410c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004114:	2101      	movs	r1, #1
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 fdba 	bl	8004c90 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7ff fb8d 	bl	8003844 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800412a:	e014      	b.n	8004156 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2220      	movs	r2, #32
 8004130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2212      	movs	r2, #18
 8004138:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004140:	2102      	movs	r1, #2
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 fda4 	bl	8004c90 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7ff fb81 	bl	8003858 <HAL_I2C_MasterRxCpltCallback>
}
 8004156:	bf00      	nop
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b082      	sub	sp, #8
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b29      	cmp	r3, #41	; 0x29
 8004178:	d112      	bne.n	80041a0 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2228      	movs	r2, #40	; 0x28
 800417e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2221      	movs	r2, #33	; 0x21
 8004186:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004188:	2101      	movs	r1, #1
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 fd80 	bl	8004c90 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7ff fb67 	bl	800386c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800419e:	e017      	b.n	80041d0 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b2a      	cmp	r3, #42	; 0x2a
 80041aa:	d111      	bne.n	80041d0 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2228      	movs	r2, #40	; 0x28
 80041b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2222      	movs	r2, #34	; 0x22
 80041b8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80041ba:	2102      	movs	r1, #2
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 fd67 	bl	8004c90 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7ff fb58 	bl	8003880 <HAL_I2C_SlaveRxCpltCallback>
}
 80041d0:	bf00      	nop
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2220      	movs	r2, #32
 80041e8:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6859      	ldr	r1, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	4b44      	ldr	r3, [pc, #272]	; (8004308 <I2C_ITMasterCplt+0x130>)
 80041f6:	400b      	ands	r3, r1
 80041f8:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a40      	ldr	r2, [pc, #256]	; (800430c <I2C_ITMasterCplt+0x134>)
 800420a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	091b      	lsrs	r3, r3, #4
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b00      	cmp	r3, #0
 8004216:	d009      	beq.n	800422c <I2C_ITMasterCplt+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2210      	movs	r2, #16
 800421e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004224:	f043 0204 	orr.w	r2, r3, #4
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 fa59 	bl	80046e4 <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004232:	2103      	movs	r1, #3
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 fd2b 	bl	8004c90 <I2C_Disable_IRQ>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423e:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b60      	cmp	r3, #96	; 0x60
 800424a:	d002      	beq.n	8004252 <I2C_ITMasterCplt+0x7a>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d006      	beq.n	8004260 <I2C_ITMasterCplt+0x88>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004256:	4619      	mov	r1, r3
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f983 	bl	8004564 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800425e:	e04e      	b.n	80042fe <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b21      	cmp	r3, #33	; 0x21
 800426a:	d121      	bne.n	80042b0 <I2C_ITMasterCplt+0xd8>
    hi2c->State = HAL_I2C_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b40      	cmp	r3, #64	; 0x40
 800427e:	d10b      	bne.n	8004298 <I2C_ITMasterCplt+0xc0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7ff fb17 	bl	80038c4 <HAL_I2C_MemTxCpltCallback>
}
 8004296:	e032      	b.n	80042fe <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7ff facb 	bl	8003844 <HAL_I2C_MasterTxCpltCallback>
}
 80042ae:	e026      	b.n	80042fe <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b22      	cmp	r3, #34	; 0x22
 80042ba:	d120      	bne.n	80042fe <I2C_ITMasterCplt+0x126>
    hi2c->State = HAL_I2C_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2220      	movs	r2, #32
 80042c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b40      	cmp	r3, #64	; 0x40
 80042ce:	d10b      	bne.n	80042e8 <I2C_ITMasterCplt+0x110>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7ff faf9 	bl	80038d8 <HAL_I2C_MemRxCpltCallback>
}
 80042e6:	e00a      	b.n	80042fe <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7ff faad 	bl	8003858 <HAL_I2C_MasterRxCpltCallback>
}
 80042fe:	bf00      	nop
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	fe00e800 	.word	0xfe00e800
 800430c:	ffff0000 	.word	0xffff0000

08004310 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2220      	movs	r2, #32
 800432c:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800432e:	2107      	movs	r1, #7
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 fcad 	bl	8004c90 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004344:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6859      	ldr	r1, [r3, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	4b58      	ldr	r3, [pc, #352]	; (80044b4 <I2C_ITSlaveCplt+0x1a4>)
 8004352:	400b      	ands	r3, r1
 8004354:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f9c4 	bl	80046e4 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	0b9b      	lsrs	r3, r3, #14
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00b      	beq.n	8004380 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436c:	2b00      	cmp	r3, #0
 800436e:	d018      	beq.n	80043a2 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	b29a      	uxth	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800437e:	e010      	b.n	80043a2 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	0bdb      	lsrs	r3, r3, #15
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00a      	beq.n	80043a2 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004390:	2b00      	cmp	r3, #0
 8004392:	d006      	beq.n	80043a2 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	b29a      	uxth	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	089b      	lsrs	r3, r3, #2
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d020      	beq.n	80043f0 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f023 0304 	bic.w	r3, r3, #4
 80043b4:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	1c5a      	adds	r2, r3, #1
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00c      	beq.n	80043f0 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043da:	3b01      	subs	r3, #1
 80043dc:	b29a      	uxth	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	3b01      	subs	r3, #1
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d005      	beq.n	8004406 <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fe:	f043 0204 	orr.w	r2, r3, #4
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441e:	2b00      	cmp	r3, #0
 8004420:	d010      	beq.n	8004444 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004426:	4619      	mov	r1, r3
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 f89b 	bl	8004564 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b28      	cmp	r3, #40	; 0x28
 8004438:	d138      	bne.n	80044ac <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800443a:	68f9      	ldr	r1, [r7, #12]
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f83d 	bl	80044bc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004442:	e033      	b.n	80044ac <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004448:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800444c:	d011      	beq.n	8004472 <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7ff fe85 	bl	800415e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a18      	ldr	r2, [pc, #96]	; (80044b8 <I2C_ITSlaveCplt+0x1a8>)
 8004458:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2220      	movs	r2, #32
 800445e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7ff fa20 	bl	80038b0 <HAL_I2C_ListenCpltCallback>
}
 8004470:	e01c      	b.n	80044ac <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b22      	cmp	r3, #34	; 0x22
 800447c:	d10b      	bne.n	8004496 <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7ff f9f6 	bl	8003880 <HAL_I2C_SlaveRxCpltCallback>
}
 8004494:	e00a      	b.n	80044ac <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2220      	movs	r2, #32
 800449a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7ff f9e0 	bl	800386c <HAL_I2C_SlaveTxCpltCallback>
}
 80044ac:	bf00      	nop
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	fe00e800 	.word	0xfe00e800
 80044b8:	ffff0000 	.word	0xffff0000

080044bc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a25      	ldr	r2, [pc, #148]	; (8004560 <I2C_ITListenCplt+0xa4>)
 80044ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2220      	movs	r2, #32
 80044d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	089b      	lsrs	r3, r3, #2
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d022      	beq.n	800453a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004510:	2b00      	cmp	r3, #0
 8004512:	d012      	beq.n	800453a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004518:	3b01      	subs	r3, #1
 800451a:	b29a      	uxth	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004524:	b29b      	uxth	r3, r3
 8004526:	3b01      	subs	r3, #1
 8004528:	b29a      	uxth	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004532:	f043 0204 	orr.w	r2, r3, #4
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800453a:	2107      	movs	r1, #7
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 fba7 	bl	8004c90 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2210      	movs	r2, #16
 8004548:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7ff f9ac 	bl	80038b0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004558:	bf00      	nop
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	ffff0000 	.word	0xffff0000

08004564 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004574:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a55      	ldr	r2, [pc, #340]	; (80046d8 <I2C_ITError+0x174>)
 8004582:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004596:	7bfb      	ldrb	r3, [r7, #15]
 8004598:	2b28      	cmp	r3, #40	; 0x28
 800459a:	d005      	beq.n	80045a8 <I2C_ITError+0x44>
 800459c:	7bfb      	ldrb	r3, [r7, #15]
 800459e:	2b29      	cmp	r3, #41	; 0x29
 80045a0:	d002      	beq.n	80045a8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
 80045a4:	2b2a      	cmp	r3, #42	; 0x2a
 80045a6:	d10e      	bne.n	80045c6 <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80045a8:	2103      	movs	r1, #3
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fb70 	bl	8004c90 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2228      	movs	r2, #40	; 0x28
 80045b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a46      	ldr	r2, [pc, #280]	; (80046dc <I2C_ITError+0x178>)
 80045c2:	635a      	str	r2, [r3, #52]	; 0x34
 80045c4:	e013      	b.n	80045ee <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80045c6:	2107      	movs	r1, #7
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 fb61 	bl	8004c90 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b60      	cmp	r3, #96	; 0x60
 80045d8:	d003      	beq.n	80045e2 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2220      	movs	r2, #32
 80045de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045fc:	d123      	bne.n	8004646 <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800460c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004612:	2b00      	cmp	r3, #0
 8004614:	d05c      	beq.n	80046d0 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461a:	4a31      	ldr	r2, [pc, #196]	; (80046e0 <I2C_ITError+0x17c>)
 800461c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462a:	4618      	mov	r0, r3
 800462c:	f7fe f928 	bl	8002880 <HAL_DMA_Abort_IT>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d04c      	beq.n	80046d0 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004640:	4610      	mov	r0, r2
 8004642:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004644:	e044      	b.n	80046d0 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004654:	d123      	bne.n	800469e <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004664:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466a:	2b00      	cmp	r3, #0
 800466c:	d030      	beq.n	80046d0 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004672:	4a1b      	ldr	r2, [pc, #108]	; (80046e0 <I2C_ITError+0x17c>)
 8004674:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004682:	4618      	mov	r0, r3
 8004684:	f7fe f8fc 	bl	8002880 <HAL_DMA_Abort_IT>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d020      	beq.n	80046d0 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004698:	4610      	mov	r0, r2
 800469a:	4798      	blx	r3
}
 800469c:	e018      	b.n	80046d0 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b60      	cmp	r3, #96	; 0x60
 80046a8:	d10b      	bne.n	80046c2 <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2220      	movs	r2, #32
 80046ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7ff f920 	bl	8003900 <HAL_I2C_AbortCpltCallback>
}
 80046c0:	e006      	b.n	80046d0 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7ff f90e 	bl	80038ec <HAL_I2C_ErrorCallback>
}
 80046d0:	bf00      	nop
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	ffff0000 	.word	0xffff0000
 80046dc:	08003915 	.word	0x08003915
 80046e0:	080048cd 	.word	0x080048cd

080046e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d103      	bne.n	8004702 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2200      	movs	r2, #0
 8004700:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b01      	cmp	r3, #1
 800470e:	d007      	beq.n	8004720 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699a      	ldr	r2, [r3, #24]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0201 	orr.w	r2, r2, #1
 800471e:	619a      	str	r2, [r3, #24]
  }
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004738:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004748:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800474e:	b29b      	uxth	r3, r3
 8004750:	2b00      	cmp	r3, #0
 8004752:	d104      	bne.n	800475e <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004754:	2112      	movs	r1, #18
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 fa2c 	bl	8004bb4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800475c:	e02d      	b.n	80047ba <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8004766:	441a      	add	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004770:	b29b      	uxth	r3, r3
 8004772:	2bff      	cmp	r3, #255	; 0xff
 8004774:	d903      	bls.n	800477e <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	22ff      	movs	r2, #255	; 0xff
 800477a:	851a      	strh	r2, [r3, #40]	; 0x28
 800477c:	e004      	b.n	8004788 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004782:	b29a      	uxth	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	4619      	mov	r1, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3328      	adds	r3, #40	; 0x28
 8004798:	461a      	mov	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800479e:	f7fe f80f 	bl	80027c0 <HAL_DMA_Start_IT>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d004      	beq.n	80047b2 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80047a8:	2110      	movs	r1, #16
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f7ff feda 	bl	8004564 <I2C_ITError>
}
 80047b0:	e003      	b.n	80047ba <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80047b2:	2112      	movs	r1, #18
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f000 f9fd 	bl	8004bb4 <I2C_Enable_IRQ>
}
 80047ba:	bf00      	nop
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b084      	sub	sp, #16
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047de:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d104      	bne.n	80047f4 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80047ea:	2112      	movs	r1, #18
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 f9e1 	bl	8004bb4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80047f2:	e02d      	b.n	8004850 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80047fc:	441a      	add	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004806:	b29b      	uxth	r3, r3
 8004808:	2bff      	cmp	r3, #255	; 0xff
 800480a:	d903      	bls.n	8004814 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	22ff      	movs	r2, #255	; 0xff
 8004810:	851a      	strh	r2, [r3, #40]	; 0x28
 8004812:	e004      	b.n	800481e <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004818:	b29a      	uxth	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3324      	adds	r3, #36	; 0x24
 8004828:	4619      	mov	r1, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482e:	461a      	mov	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004834:	f7fd ffc4 	bl	80027c0 <HAL_DMA_Start_IT>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d004      	beq.n	8004848 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800483e:	2110      	movs	r1, #16
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f7ff fe8f 	bl	8004564 <I2C_ITError>
}
 8004846:	e003      	b.n	8004850 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004848:	2112      	movs	r1, #18
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 f9b2 	bl	8004bb4 <I2C_Enable_IRQ>
}
 8004850:	bf00      	nop
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8004860:	2300      	movs	r3, #0
 8004862:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004868:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486e:	2b00      	cmp	r3, #0
 8004870:	d007      	beq.n	8004882 <I2C_DMAError+0x2a>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 800487e:	2301      	movs	r3, #1
 8004880:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004886:	2b00      	cmp	r3, #0
 8004888:	d007      	beq.n	800489a <I2C_DMAError+0x42>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8004896:	2301      	movs	r3, #1
 8004898:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7fe f99c 	bl	8002bd8 <HAL_DMA_GetError>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d00e      	beq.n	80048c4 <I2C_DMAError+0x6c>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00b      	beq.n	80048c4 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048ba:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80048bc:	2110      	movs	r1, #16
 80048be:	68b8      	ldr	r0, [r7, #8]
 80048c0:	f7ff fe50 	bl	8004564 <I2C_ITError>
  }
}
 80048c4:	bf00      	nop
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048de:	2200      	movs	r2, #0
 80048e0:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e6:	2200      	movs	r2, #0
 80048e8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b60      	cmp	r3, #96	; 0x60
 80048f4:	d107      	bne.n	8004906 <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f7fe fffe 	bl	8003900 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004904:	e002      	b.n	800490c <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f7fe fff0 	bl	80038ec <HAL_I2C_ErrorCallback>
}
 800490c:	bf00      	nop
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	603b      	str	r3, [r7, #0]
 8004920:	4613      	mov	r3, r2
 8004922:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004924:	e022      	b.n	800496c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492c:	d01e      	beq.n	800496c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800492e:	f7fd f8b9 	bl	8001aa4 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d302      	bcc.n	8004944 <I2C_WaitOnFlagUntilTimeout+0x30>
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d113      	bne.n	800496c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004948:	f043 0220 	orr.w	r2, r3, #32
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2220      	movs	r2, #32
 8004954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e00f      	b.n	800498c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699a      	ldr	r2, [r3, #24]
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	4013      	ands	r3, r2
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	429a      	cmp	r2, r3
 800497a:	bf0c      	ite	eq
 800497c:	2301      	moveq	r3, #1
 800497e:	2300      	movne	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	461a      	mov	r2, r3
 8004984:	79fb      	ldrb	r3, [r7, #7]
 8004986:	429a      	cmp	r2, r3
 8004988:	d0cd      	beq.n	8004926 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049a0:	e02c      	b.n	80049fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	68b9      	ldr	r1, [r7, #8]
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f000 f870 	bl	8004a8c <I2C_IsAcknowledgeFailed>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e02a      	b.n	8004a0c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049bc:	d01e      	beq.n	80049fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049be:	f7fd f871 	bl	8001aa4 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d302      	bcc.n	80049d4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d113      	bne.n	80049fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d8:	f043 0220 	orr.w	r2, r3, #32
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2220      	movs	r2, #32
 80049e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e007      	b.n	8004a0c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d1cb      	bne.n	80049a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a20:	e028      	b.n	8004a74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	68b9      	ldr	r1, [r7, #8]
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 f830 	bl	8004a8c <I2C_IsAcknowledgeFailed>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e026      	b.n	8004a84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a36:	f7fd f835 	bl	8001aa4 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d302      	bcc.n	8004a4c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d113      	bne.n	8004a74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a50:	f043 0220 	orr.w	r2, r3, #32
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e007      	b.n	8004a84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	f003 0320 	and.w	r3, r3, #32
 8004a7e:	2b20      	cmp	r3, #32
 8004a80:	d1cf      	bne.n	8004a22 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	f003 0310 	and.w	r3, r3, #16
 8004aa2:	2b10      	cmp	r3, #16
 8004aa4:	d151      	bne.n	8004b4a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004aa6:	e022      	b.n	8004aee <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aae:	d01e      	beq.n	8004aee <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ab0:	f7fc fff8 	bl	8001aa4 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d302      	bcc.n	8004ac6 <I2C_IsAcknowledgeFailed+0x3a>
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d113      	bne.n	8004aee <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aca:	f043 0220 	orr.w	r2, r3, #32
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e02e      	b.n	8004b4c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	f003 0320 	and.w	r3, r3, #32
 8004af8:	2b20      	cmp	r3, #32
 8004afa:	d1d5      	bne.n	8004aa8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2210      	movs	r2, #16
 8004b02:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f7ff fde9 	bl	80046e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6859      	ldr	r1, [r3, #4]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	4b0d      	ldr	r3, [pc, #52]	; (8004b54 <I2C_IsAcknowledgeFailed+0xc8>)
 8004b1e:	400b      	ands	r3, r1
 8004b20:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b26:	f043 0204 	orr.w	r2, r3, #4
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e000      	b.n	8004b4c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	fe00e800 	.word	0xfe00e800

08004b58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	607b      	str	r3, [r7, #4]
 8004b62:	460b      	mov	r3, r1
 8004b64:	817b      	strh	r3, [r7, #10]
 8004b66:	4613      	mov	r3, r2
 8004b68:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	0d5b      	lsrs	r3, r3, #21
 8004b74:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004b78:	4b0d      	ldr	r3, [pc, #52]	; (8004bb0 <I2C_TransferConfig+0x58>)
 8004b7a:	430b      	orrs	r3, r1
 8004b7c:	43db      	mvns	r3, r3
 8004b7e:	ea02 0103 	and.w	r1, r2, r3
 8004b82:	897b      	ldrh	r3, [r7, #10]
 8004b84:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b88:	7a7b      	ldrb	r3, [r7, #9]
 8004b8a:	041b      	lsls	r3, r3, #16
 8004b8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b90:	431a      	orrs	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	431a      	orrs	r2, r3
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004ba2:	bf00      	nop
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	03ff63ff 	.word	0x03ff63ff

08004bb4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc8:	4a2f      	ldr	r2, [pc, #188]	; (8004c88 <I2C_Enable_IRQ+0xd4>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d004      	beq.n	8004bd8 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004bd2:	4a2e      	ldr	r2, [pc, #184]	; (8004c8c <I2C_Enable_IRQ+0xd8>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d124      	bne.n	8004c22 <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004bd8:	887b      	ldrh	r3, [r7, #2]
 8004bda:	f003 0304 	and.w	r3, r3, #4
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004be8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8004bea:	887b      	ldrh	r3, [r7, #2]
 8004bec:	f003 0311 	and.w	r3, r3, #17
 8004bf0:	2b11      	cmp	r3, #17
 8004bf2:	d103      	bne.n	8004bfc <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004bfa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8004bfc:	887b      	ldrh	r3, [r7, #2]
 8004bfe:	f003 0312 	and.w	r3, r3, #18
 8004c02:	2b12      	cmp	r3, #18
 8004c04:	d103      	bne.n	8004c0e <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f043 0320 	orr.w	r3, r3, #32
 8004c0c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8004c0e:	887b      	ldrh	r3, [r7, #2]
 8004c10:	f003 0312 	and.w	r3, r3, #18
 8004c14:	2b12      	cmp	r3, #18
 8004c16:	d128      	bne.n	8004c6a <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c1e:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8004c20:	e023      	b.n	8004c6a <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004c22:	887b      	ldrh	r3, [r7, #2]
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004c32:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004c34:	887b      	ldrh	r3, [r7, #2]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004c44:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004c46:	887b      	ldrh	r3, [r7, #2]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8004c56:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8004c58:	887b      	ldrh	r3, [r7, #2]
 8004c5a:	f003 0312 	and.w	r3, r3, #18
 8004c5e:	2b12      	cmp	r3, #18
 8004c60:	d103      	bne.n	8004c6a <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f043 0320 	orr.w	r3, r3, #32
 8004c68:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6819      	ldr	r1, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	601a      	str	r2, [r3, #0]
}
 8004c7a:	bf00      	nop
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	08003b1b 	.word	0x08003b1b
 8004c8c:	08003d01 	.word	0x08003d01

08004c90 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004ca0:	887b      	ldrh	r3, [r7, #2]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00f      	beq.n	8004cca <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004cb0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004cbe:	2b28      	cmp	r3, #40	; 0x28
 8004cc0:	d003      	beq.n	8004cca <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004cc8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004cca:	887b      	ldrh	r3, [r7, #2]
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00f      	beq.n	8004cf4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004cda:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ce8:	2b28      	cmp	r3, #40	; 0x28
 8004cea:	d003      	beq.n	8004cf4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004cf2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004cf4:	887b      	ldrh	r3, [r7, #2]
 8004cf6:	f003 0304 	and.w	r3, r3, #4
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004d04:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8004d06:	887b      	ldrh	r3, [r7, #2]
 8004d08:	f003 0311 	and.w	r3, r3, #17
 8004d0c:	2b11      	cmp	r3, #17
 8004d0e:	d103      	bne.n	8004d18 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004d16:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8004d18:	887b      	ldrh	r3, [r7, #2]
 8004d1a:	f003 0312 	and.w	r3, r3, #18
 8004d1e:	2b12      	cmp	r3, #18
 8004d20:	d103      	bne.n	8004d2a <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f043 0320 	orr.w	r3, r3, #32
 8004d28:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8004d2a:	887b      	ldrh	r3, [r7, #2]
 8004d2c:	f003 0312 	and.w	r3, r3, #18
 8004d30:	2b12      	cmp	r3, #18
 8004d32:	d103      	bne.n	8004d3c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6819      	ldr	r1, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	43da      	mvns	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	400a      	ands	r2, r1
 8004d4c:	601a      	str	r2, [r3, #0]
}
 8004d4e:	bf00      	nop
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
 8004d62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b20      	cmp	r3, #32
 8004d6e:	d138      	bne.n	8004de2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d101      	bne.n	8004d7e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	e032      	b.n	8004de4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2224      	movs	r2, #36	; 0x24
 8004d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0201 	bic.w	r2, r2, #1
 8004d9c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004dac:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6819      	ldr	r1, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f042 0201 	orr.w	r2, r2, #1
 8004dcc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004dde:	2300      	movs	r3, #0
 8004de0:	e000      	b.n	8004de4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004de2:	2302      	movs	r3, #2
  }
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b20      	cmp	r3, #32
 8004e04:	d139      	bne.n	8004e7a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d101      	bne.n	8004e14 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e10:	2302      	movs	r3, #2
 8004e12:	e033      	b.n	8004e7c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2224      	movs	r2, #36	; 0x24
 8004e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0201 	bic.w	r2, r2, #1
 8004e32:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e42:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	021b      	lsls	r3, r3, #8
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f042 0201 	orr.w	r2, r2, #1
 8004e64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e76:	2300      	movs	r3, #0
 8004e78:	e000      	b.n	8004e7c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e7a:	2302      	movs	r3, #2
  }
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e8c:	4b05      	ldr	r3, [pc, #20]	; (8004ea4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a04      	ldr	r2, [pc, #16]	; (8004ea4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e96:	6013      	str	r3, [r2, #0]
}
 8004e98:	bf00      	nop
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	40007000 	.word	0x40007000

08004ea8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004eb2:	4b23      	ldr	r3, [pc, #140]	; (8004f40 <HAL_PWREx_EnableOverDrive+0x98>)
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	4a22      	ldr	r2, [pc, #136]	; (8004f40 <HAL_PWREx_EnableOverDrive+0x98>)
 8004eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ebe:	4b20      	ldr	r3, [pc, #128]	; (8004f40 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec6:	603b      	str	r3, [r7, #0]
 8004ec8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004eca:	4b1e      	ldr	r3, [pc, #120]	; (8004f44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a1d      	ldr	r2, [pc, #116]	; (8004f44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ed6:	f7fc fde5 	bl	8001aa4 <HAL_GetTick>
 8004eda:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004edc:	e009      	b.n	8004ef2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ede:	f7fc fde1 	bl	8001aa4 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004eec:	d901      	bls.n	8004ef2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e022      	b.n	8004f38 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ef2:	4b14      	ldr	r3, [pc, #80]	; (8004f44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004efe:	d1ee      	bne.n	8004ede <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004f00:	4b10      	ldr	r3, [pc, #64]	; (8004f44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a0f      	ldr	r2, [pc, #60]	; (8004f44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f0a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f0c:	f7fc fdca 	bl	8001aa4 <HAL_GetTick>
 8004f10:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f12:	e009      	b.n	8004f28 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004f14:	f7fc fdc6 	bl	8001aa4 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f22:	d901      	bls.n	8004f28 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e007      	b.n	8004f38 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f28:	4b06      	ldr	r3, [pc, #24]	; (8004f44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f34:	d1ee      	bne.n	8004f14 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40023800 	.word	0x40023800
 8004f44:	40007000 	.word	0x40007000

08004f48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004f50:	2300      	movs	r3, #0
 8004f52:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e291      	b.n	8005482 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 8087 	beq.w	800507a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f6c:	4b96      	ldr	r3, [pc, #600]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f003 030c 	and.w	r3, r3, #12
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d00c      	beq.n	8004f92 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f78:	4b93      	ldr	r3, [pc, #588]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f003 030c 	and.w	r3, r3, #12
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	d112      	bne.n	8004faa <HAL_RCC_OscConfig+0x62>
 8004f84:	4b90      	ldr	r3, [pc, #576]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f90:	d10b      	bne.n	8004faa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f92:	4b8d      	ldr	r3, [pc, #564]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d06c      	beq.n	8005078 <HAL_RCC_OscConfig+0x130>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d168      	bne.n	8005078 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e26b      	b.n	8005482 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb2:	d106      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x7a>
 8004fb4:	4b84      	ldr	r3, [pc, #528]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a83      	ldr	r2, [pc, #524]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 8004fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fbe:	6013      	str	r3, [r2, #0]
 8004fc0:	e02e      	b.n	8005020 <HAL_RCC_OscConfig+0xd8>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10c      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x9c>
 8004fca:	4b7f      	ldr	r3, [pc, #508]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a7e      	ldr	r2, [pc, #504]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 8004fd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fd4:	6013      	str	r3, [r2, #0]
 8004fd6:	4b7c      	ldr	r3, [pc, #496]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a7b      	ldr	r2, [pc, #492]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 8004fdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fe0:	6013      	str	r3, [r2, #0]
 8004fe2:	e01d      	b.n	8005020 <HAL_RCC_OscConfig+0xd8>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fec:	d10c      	bne.n	8005008 <HAL_RCC_OscConfig+0xc0>
 8004fee:	4b76      	ldr	r3, [pc, #472]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a75      	ldr	r2, [pc, #468]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 8004ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ff8:	6013      	str	r3, [r2, #0]
 8004ffa:	4b73      	ldr	r3, [pc, #460]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a72      	ldr	r2, [pc, #456]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 8005000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005004:	6013      	str	r3, [r2, #0]
 8005006:	e00b      	b.n	8005020 <HAL_RCC_OscConfig+0xd8>
 8005008:	4b6f      	ldr	r3, [pc, #444]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a6e      	ldr	r2, [pc, #440]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 800500e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005012:	6013      	str	r3, [r2, #0]
 8005014:	4b6c      	ldr	r3, [pc, #432]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a6b      	ldr	r2, [pc, #428]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 800501a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800501e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d013      	beq.n	8005050 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005028:	f7fc fd3c 	bl	8001aa4 <HAL_GetTick>
 800502c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800502e:	e008      	b.n	8005042 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005030:	f7fc fd38 	bl	8001aa4 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b64      	cmp	r3, #100	; 0x64
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e21f      	b.n	8005482 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005042:	4b61      	ldr	r3, [pc, #388]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d0f0      	beq.n	8005030 <HAL_RCC_OscConfig+0xe8>
 800504e:	e014      	b.n	800507a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005050:	f7fc fd28 	bl	8001aa4 <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005058:	f7fc fd24 	bl	8001aa4 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b64      	cmp	r3, #100	; 0x64
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e20b      	b.n	8005482 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800506a:	4b57      	ldr	r3, [pc, #348]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1f0      	bne.n	8005058 <HAL_RCC_OscConfig+0x110>
 8005076:	e000      	b.n	800507a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d069      	beq.n	800515a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005086:	4b50      	ldr	r3, [pc, #320]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f003 030c 	and.w	r3, r3, #12
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00b      	beq.n	80050aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005092:	4b4d      	ldr	r3, [pc, #308]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 030c 	and.w	r3, r3, #12
 800509a:	2b08      	cmp	r3, #8
 800509c:	d11c      	bne.n	80050d8 <HAL_RCC_OscConfig+0x190>
 800509e:	4b4a      	ldr	r3, [pc, #296]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d116      	bne.n	80050d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050aa:	4b47      	ldr	r3, [pc, #284]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d005      	beq.n	80050c2 <HAL_RCC_OscConfig+0x17a>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d001      	beq.n	80050c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e1df      	b.n	8005482 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c2:	4b41      	ldr	r3, [pc, #260]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	493d      	ldr	r1, [pc, #244]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050d6:	e040      	b.n	800515a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d023      	beq.n	8005128 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050e0:	4b39      	ldr	r3, [pc, #228]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a38      	ldr	r2, [pc, #224]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 80050e6:	f043 0301 	orr.w	r3, r3, #1
 80050ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ec:	f7fc fcda 	bl	8001aa4 <HAL_GetTick>
 80050f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050f4:	f7fc fcd6 	bl	8001aa4 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e1bd      	b.n	8005482 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005106:	4b30      	ldr	r3, [pc, #192]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0f0      	beq.n	80050f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005112:	4b2d      	ldr	r3, [pc, #180]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	4929      	ldr	r1, [pc, #164]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 8005122:	4313      	orrs	r3, r2
 8005124:	600b      	str	r3, [r1, #0]
 8005126:	e018      	b.n	800515a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005128:	4b27      	ldr	r3, [pc, #156]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a26      	ldr	r2, [pc, #152]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 800512e:	f023 0301 	bic.w	r3, r3, #1
 8005132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005134:	f7fc fcb6 	bl	8001aa4 <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800513c:	f7fc fcb2 	bl	8001aa4 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e199      	b.n	8005482 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800514e:	4b1e      	ldr	r3, [pc, #120]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1f0      	bne.n	800513c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d038      	beq.n	80051d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d019      	beq.n	80051a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800516e:	4b16      	ldr	r3, [pc, #88]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 8005170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005172:	4a15      	ldr	r2, [pc, #84]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 8005174:	f043 0301 	orr.w	r3, r3, #1
 8005178:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800517a:	f7fc fc93 	bl	8001aa4 <HAL_GetTick>
 800517e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005180:	e008      	b.n	8005194 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005182:	f7fc fc8f 	bl	8001aa4 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d901      	bls.n	8005194 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e176      	b.n	8005482 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005194:	4b0c      	ldr	r3, [pc, #48]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 8005196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0f0      	beq.n	8005182 <HAL_RCC_OscConfig+0x23a>
 80051a0:	e01a      	b.n	80051d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051a2:	4b09      	ldr	r3, [pc, #36]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 80051a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051a6:	4a08      	ldr	r2, [pc, #32]	; (80051c8 <HAL_RCC_OscConfig+0x280>)
 80051a8:	f023 0301 	bic.w	r3, r3, #1
 80051ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ae:	f7fc fc79 	bl	8001aa4 <HAL_GetTick>
 80051b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051b4:	e00a      	b.n	80051cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051b6:	f7fc fc75 	bl	8001aa4 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d903      	bls.n	80051cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e15c      	b.n	8005482 <HAL_RCC_OscConfig+0x53a>
 80051c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051cc:	4b91      	ldr	r3, [pc, #580]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 80051ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1ee      	bne.n	80051b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0304 	and.w	r3, r3, #4
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 80a4 	beq.w	800532e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051e6:	4b8b      	ldr	r3, [pc, #556]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10d      	bne.n	800520e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80051f2:	4b88      	ldr	r3, [pc, #544]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	4a87      	ldr	r2, [pc, #540]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 80051f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051fc:	6413      	str	r3, [r2, #64]	; 0x40
 80051fe:	4b85      	ldr	r3, [pc, #532]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005206:	60bb      	str	r3, [r7, #8]
 8005208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800520a:	2301      	movs	r3, #1
 800520c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800520e:	4b82      	ldr	r3, [pc, #520]	; (8005418 <HAL_RCC_OscConfig+0x4d0>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005216:	2b00      	cmp	r3, #0
 8005218:	d118      	bne.n	800524c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800521a:	4b7f      	ldr	r3, [pc, #508]	; (8005418 <HAL_RCC_OscConfig+0x4d0>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a7e      	ldr	r2, [pc, #504]	; (8005418 <HAL_RCC_OscConfig+0x4d0>)
 8005220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005226:	f7fc fc3d 	bl	8001aa4 <HAL_GetTick>
 800522a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800522c:	e008      	b.n	8005240 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800522e:	f7fc fc39 	bl	8001aa4 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b64      	cmp	r3, #100	; 0x64
 800523a:	d901      	bls.n	8005240 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e120      	b.n	8005482 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005240:	4b75      	ldr	r3, [pc, #468]	; (8005418 <HAL_RCC_OscConfig+0x4d0>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005248:	2b00      	cmp	r3, #0
 800524a:	d0f0      	beq.n	800522e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d106      	bne.n	8005262 <HAL_RCC_OscConfig+0x31a>
 8005254:	4b6f      	ldr	r3, [pc, #444]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 8005256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005258:	4a6e      	ldr	r2, [pc, #440]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 800525a:	f043 0301 	orr.w	r3, r3, #1
 800525e:	6713      	str	r3, [r2, #112]	; 0x70
 8005260:	e02d      	b.n	80052be <HAL_RCC_OscConfig+0x376>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10c      	bne.n	8005284 <HAL_RCC_OscConfig+0x33c>
 800526a:	4b6a      	ldr	r3, [pc, #424]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 800526c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526e:	4a69      	ldr	r2, [pc, #420]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 8005270:	f023 0301 	bic.w	r3, r3, #1
 8005274:	6713      	str	r3, [r2, #112]	; 0x70
 8005276:	4b67      	ldr	r3, [pc, #412]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 8005278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527a:	4a66      	ldr	r2, [pc, #408]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 800527c:	f023 0304 	bic.w	r3, r3, #4
 8005280:	6713      	str	r3, [r2, #112]	; 0x70
 8005282:	e01c      	b.n	80052be <HAL_RCC_OscConfig+0x376>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	2b05      	cmp	r3, #5
 800528a:	d10c      	bne.n	80052a6 <HAL_RCC_OscConfig+0x35e>
 800528c:	4b61      	ldr	r3, [pc, #388]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 800528e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005290:	4a60      	ldr	r2, [pc, #384]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 8005292:	f043 0304 	orr.w	r3, r3, #4
 8005296:	6713      	str	r3, [r2, #112]	; 0x70
 8005298:	4b5e      	ldr	r3, [pc, #376]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 800529a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529c:	4a5d      	ldr	r2, [pc, #372]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 800529e:	f043 0301 	orr.w	r3, r3, #1
 80052a2:	6713      	str	r3, [r2, #112]	; 0x70
 80052a4:	e00b      	b.n	80052be <HAL_RCC_OscConfig+0x376>
 80052a6:	4b5b      	ldr	r3, [pc, #364]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 80052a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052aa:	4a5a      	ldr	r2, [pc, #360]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 80052ac:	f023 0301 	bic.w	r3, r3, #1
 80052b0:	6713      	str	r3, [r2, #112]	; 0x70
 80052b2:	4b58      	ldr	r3, [pc, #352]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 80052b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b6:	4a57      	ldr	r2, [pc, #348]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 80052b8:	f023 0304 	bic.w	r3, r3, #4
 80052bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d015      	beq.n	80052f2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c6:	f7fc fbed 	bl	8001aa4 <HAL_GetTick>
 80052ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052cc:	e00a      	b.n	80052e4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ce:	f7fc fbe9 	bl	8001aa4 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052dc:	4293      	cmp	r3, r2
 80052de:	d901      	bls.n	80052e4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e0ce      	b.n	8005482 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052e4:	4b4b      	ldr	r3, [pc, #300]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 80052e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e8:	f003 0302 	and.w	r3, r3, #2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d0ee      	beq.n	80052ce <HAL_RCC_OscConfig+0x386>
 80052f0:	e014      	b.n	800531c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f2:	f7fc fbd7 	bl	8001aa4 <HAL_GetTick>
 80052f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052f8:	e00a      	b.n	8005310 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052fa:	f7fc fbd3 	bl	8001aa4 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	f241 3288 	movw	r2, #5000	; 0x1388
 8005308:	4293      	cmp	r3, r2
 800530a:	d901      	bls.n	8005310 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e0b8      	b.n	8005482 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005310:	4b40      	ldr	r3, [pc, #256]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 8005312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1ee      	bne.n	80052fa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800531c:	7dfb      	ldrb	r3, [r7, #23]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d105      	bne.n	800532e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005322:	4b3c      	ldr	r3, [pc, #240]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	4a3b      	ldr	r2, [pc, #236]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 8005328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800532c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	2b00      	cmp	r3, #0
 8005334:	f000 80a4 	beq.w	8005480 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005338:	4b36      	ldr	r3, [pc, #216]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f003 030c 	and.w	r3, r3, #12
 8005340:	2b08      	cmp	r3, #8
 8005342:	d06b      	beq.n	800541c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	2b02      	cmp	r3, #2
 800534a:	d149      	bne.n	80053e0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800534c:	4b31      	ldr	r3, [pc, #196]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a30      	ldr	r2, [pc, #192]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 8005352:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005358:	f7fc fba4 	bl	8001aa4 <HAL_GetTick>
 800535c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005360:	f7fc fba0 	bl	8001aa4 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b02      	cmp	r3, #2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e087      	b.n	8005482 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005372:	4b28      	ldr	r3, [pc, #160]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1f0      	bne.n	8005360 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	69da      	ldr	r2, [r3, #28]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538c:	019b      	lsls	r3, r3, #6
 800538e:	431a      	orrs	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005394:	085b      	lsrs	r3, r3, #1
 8005396:	3b01      	subs	r3, #1
 8005398:	041b      	lsls	r3, r3, #16
 800539a:	431a      	orrs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a0:	061b      	lsls	r3, r3, #24
 80053a2:	4313      	orrs	r3, r2
 80053a4:	4a1b      	ldr	r2, [pc, #108]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 80053a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053aa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053ac:	4b19      	ldr	r3, [pc, #100]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a18      	ldr	r2, [pc, #96]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 80053b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b8:	f7fc fb74 	bl	8001aa4 <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053c0:	f7fc fb70 	bl	8001aa4 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e057      	b.n	8005482 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053d2:	4b10      	ldr	r3, [pc, #64]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d0f0      	beq.n	80053c0 <HAL_RCC_OscConfig+0x478>
 80053de:	e04f      	b.n	8005480 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053e0:	4b0c      	ldr	r3, [pc, #48]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a0b      	ldr	r2, [pc, #44]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 80053e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ec:	f7fc fb5a 	bl	8001aa4 <HAL_GetTick>
 80053f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053f2:	e008      	b.n	8005406 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053f4:	f7fc fb56 	bl	8001aa4 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d901      	bls.n	8005406 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e03d      	b.n	8005482 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005406:	4b03      	ldr	r3, [pc, #12]	; (8005414 <HAL_RCC_OscConfig+0x4cc>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1f0      	bne.n	80053f4 <HAL_RCC_OscConfig+0x4ac>
 8005412:	e035      	b.n	8005480 <HAL_RCC_OscConfig+0x538>
 8005414:	40023800 	.word	0x40023800
 8005418:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800541c:	4b1b      	ldr	r3, [pc, #108]	; (800548c <HAL_RCC_OscConfig+0x544>)
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d028      	beq.n	800547c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005434:	429a      	cmp	r2, r3
 8005436:	d121      	bne.n	800547c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005442:	429a      	cmp	r2, r3
 8005444:	d11a      	bne.n	800547c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800544c:	4013      	ands	r3, r2
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005452:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005454:	4293      	cmp	r3, r2
 8005456:	d111      	bne.n	800547c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005462:	085b      	lsrs	r3, r3, #1
 8005464:	3b01      	subs	r3, #1
 8005466:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005468:	429a      	cmp	r2, r3
 800546a:	d107      	bne.n	800547c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005476:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005478:	429a      	cmp	r2, r3
 800547a:	d001      	beq.n	8005480 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e000      	b.n	8005482 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3718      	adds	r7, #24
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	40023800 	.word	0x40023800

08005490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800549a:	2300      	movs	r3, #0
 800549c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d101      	bne.n	80054a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e0d0      	b.n	800564a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054a8:	4b6a      	ldr	r3, [pc, #424]	; (8005654 <HAL_RCC_ClockConfig+0x1c4>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 030f 	and.w	r3, r3, #15
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d910      	bls.n	80054d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054b6:	4b67      	ldr	r3, [pc, #412]	; (8005654 <HAL_RCC_ClockConfig+0x1c4>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f023 020f 	bic.w	r2, r3, #15
 80054be:	4965      	ldr	r1, [pc, #404]	; (8005654 <HAL_RCC_ClockConfig+0x1c4>)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054c6:	4b63      	ldr	r3, [pc, #396]	; (8005654 <HAL_RCC_ClockConfig+0x1c4>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d001      	beq.n	80054d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e0b8      	b.n	800564a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d020      	beq.n	8005526 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d005      	beq.n	80054fc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054f0:	4b59      	ldr	r3, [pc, #356]	; (8005658 <HAL_RCC_ClockConfig+0x1c8>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	4a58      	ldr	r2, [pc, #352]	; (8005658 <HAL_RCC_ClockConfig+0x1c8>)
 80054f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0308 	and.w	r3, r3, #8
 8005504:	2b00      	cmp	r3, #0
 8005506:	d005      	beq.n	8005514 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005508:	4b53      	ldr	r3, [pc, #332]	; (8005658 <HAL_RCC_ClockConfig+0x1c8>)
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	4a52      	ldr	r2, [pc, #328]	; (8005658 <HAL_RCC_ClockConfig+0x1c8>)
 800550e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005512:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005514:	4b50      	ldr	r3, [pc, #320]	; (8005658 <HAL_RCC_ClockConfig+0x1c8>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	494d      	ldr	r1, [pc, #308]	; (8005658 <HAL_RCC_ClockConfig+0x1c8>)
 8005522:	4313      	orrs	r3, r2
 8005524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	d040      	beq.n	80055b4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d107      	bne.n	800554a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800553a:	4b47      	ldr	r3, [pc, #284]	; (8005658 <HAL_RCC_ClockConfig+0x1c8>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d115      	bne.n	8005572 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e07f      	b.n	800564a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	2b02      	cmp	r3, #2
 8005550:	d107      	bne.n	8005562 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005552:	4b41      	ldr	r3, [pc, #260]	; (8005658 <HAL_RCC_ClockConfig+0x1c8>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d109      	bne.n	8005572 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e073      	b.n	800564a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005562:	4b3d      	ldr	r3, [pc, #244]	; (8005658 <HAL_RCC_ClockConfig+0x1c8>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e06b      	b.n	800564a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005572:	4b39      	ldr	r3, [pc, #228]	; (8005658 <HAL_RCC_ClockConfig+0x1c8>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f023 0203 	bic.w	r2, r3, #3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	4936      	ldr	r1, [pc, #216]	; (8005658 <HAL_RCC_ClockConfig+0x1c8>)
 8005580:	4313      	orrs	r3, r2
 8005582:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005584:	f7fc fa8e 	bl	8001aa4 <HAL_GetTick>
 8005588:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800558a:	e00a      	b.n	80055a2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800558c:	f7fc fa8a 	bl	8001aa4 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	f241 3288 	movw	r2, #5000	; 0x1388
 800559a:	4293      	cmp	r3, r2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e053      	b.n	800564a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055a2:	4b2d      	ldr	r3, [pc, #180]	; (8005658 <HAL_RCC_ClockConfig+0x1c8>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 020c 	and.w	r2, r3, #12
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d1eb      	bne.n	800558c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055b4:	4b27      	ldr	r3, [pc, #156]	; (8005654 <HAL_RCC_ClockConfig+0x1c4>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 030f 	and.w	r3, r3, #15
 80055bc:	683a      	ldr	r2, [r7, #0]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d210      	bcs.n	80055e4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055c2:	4b24      	ldr	r3, [pc, #144]	; (8005654 <HAL_RCC_ClockConfig+0x1c4>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f023 020f 	bic.w	r2, r3, #15
 80055ca:	4922      	ldr	r1, [pc, #136]	; (8005654 <HAL_RCC_ClockConfig+0x1c4>)
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055d2:	4b20      	ldr	r3, [pc, #128]	; (8005654 <HAL_RCC_ClockConfig+0x1c4>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 030f 	and.w	r3, r3, #15
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d001      	beq.n	80055e4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e032      	b.n	800564a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d008      	beq.n	8005602 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055f0:	4b19      	ldr	r3, [pc, #100]	; (8005658 <HAL_RCC_ClockConfig+0x1c8>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	4916      	ldr	r1, [pc, #88]	; (8005658 <HAL_RCC_ClockConfig+0x1c8>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d009      	beq.n	8005622 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800560e:	4b12      	ldr	r3, [pc, #72]	; (8005658 <HAL_RCC_ClockConfig+0x1c8>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	490e      	ldr	r1, [pc, #56]	; (8005658 <HAL_RCC_ClockConfig+0x1c8>)
 800561e:	4313      	orrs	r3, r2
 8005620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005622:	f000 f821 	bl	8005668 <HAL_RCC_GetSysClockFreq>
 8005626:	4601      	mov	r1, r0
 8005628:	4b0b      	ldr	r3, [pc, #44]	; (8005658 <HAL_RCC_ClockConfig+0x1c8>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	091b      	lsrs	r3, r3, #4
 800562e:	f003 030f 	and.w	r3, r3, #15
 8005632:	4a0a      	ldr	r2, [pc, #40]	; (800565c <HAL_RCC_ClockConfig+0x1cc>)
 8005634:	5cd3      	ldrb	r3, [r2, r3]
 8005636:	fa21 f303 	lsr.w	r3, r1, r3
 800563a:	4a09      	ldr	r2, [pc, #36]	; (8005660 <HAL_RCC_ClockConfig+0x1d0>)
 800563c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800563e:	4b09      	ldr	r3, [pc, #36]	; (8005664 <HAL_RCC_ClockConfig+0x1d4>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4618      	mov	r0, r3
 8005644:	f7fc f9ea 	bl	8001a1c <HAL_InitTick>

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	40023c00 	.word	0x40023c00
 8005658:	40023800 	.word	0x40023800
 800565c:	080074c0 	.word	0x080074c0
 8005660:	20000000 	.word	0x20000000
 8005664:	20000004 	.word	0x20000004

08005668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800566e:	2300      	movs	r3, #0
 8005670:	607b      	str	r3, [r7, #4]
 8005672:	2300      	movs	r3, #0
 8005674:	60fb      	str	r3, [r7, #12]
 8005676:	2300      	movs	r3, #0
 8005678:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800567a:	2300      	movs	r3, #0
 800567c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800567e:	4b63      	ldr	r3, [pc, #396]	; (800580c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f003 030c 	and.w	r3, r3, #12
 8005686:	2b04      	cmp	r3, #4
 8005688:	d007      	beq.n	800569a <HAL_RCC_GetSysClockFreq+0x32>
 800568a:	2b08      	cmp	r3, #8
 800568c:	d008      	beq.n	80056a0 <HAL_RCC_GetSysClockFreq+0x38>
 800568e:	2b00      	cmp	r3, #0
 8005690:	f040 80b4 	bne.w	80057fc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005694:	4b5e      	ldr	r3, [pc, #376]	; (8005810 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005696:	60bb      	str	r3, [r7, #8]
      break;
 8005698:	e0b3      	b.n	8005802 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800569a:	4b5e      	ldr	r3, [pc, #376]	; (8005814 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800569c:	60bb      	str	r3, [r7, #8]
      break;
 800569e:	e0b0      	b.n	8005802 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056a0:	4b5a      	ldr	r3, [pc, #360]	; (800580c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056a8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80056aa:	4b58      	ldr	r3, [pc, #352]	; (800580c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d04a      	beq.n	800574c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056b6:	4b55      	ldr	r3, [pc, #340]	; (800580c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	099b      	lsrs	r3, r3, #6
 80056bc:	f04f 0400 	mov.w	r4, #0
 80056c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80056c4:	f04f 0200 	mov.w	r2, #0
 80056c8:	ea03 0501 	and.w	r5, r3, r1
 80056cc:	ea04 0602 	and.w	r6, r4, r2
 80056d0:	4629      	mov	r1, r5
 80056d2:	4632      	mov	r2, r6
 80056d4:	f04f 0300 	mov.w	r3, #0
 80056d8:	f04f 0400 	mov.w	r4, #0
 80056dc:	0154      	lsls	r4, r2, #5
 80056de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80056e2:	014b      	lsls	r3, r1, #5
 80056e4:	4619      	mov	r1, r3
 80056e6:	4622      	mov	r2, r4
 80056e8:	1b49      	subs	r1, r1, r5
 80056ea:	eb62 0206 	sbc.w	r2, r2, r6
 80056ee:	f04f 0300 	mov.w	r3, #0
 80056f2:	f04f 0400 	mov.w	r4, #0
 80056f6:	0194      	lsls	r4, r2, #6
 80056f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80056fc:	018b      	lsls	r3, r1, #6
 80056fe:	1a5b      	subs	r3, r3, r1
 8005700:	eb64 0402 	sbc.w	r4, r4, r2
 8005704:	f04f 0100 	mov.w	r1, #0
 8005708:	f04f 0200 	mov.w	r2, #0
 800570c:	00e2      	lsls	r2, r4, #3
 800570e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005712:	00d9      	lsls	r1, r3, #3
 8005714:	460b      	mov	r3, r1
 8005716:	4614      	mov	r4, r2
 8005718:	195b      	adds	r3, r3, r5
 800571a:	eb44 0406 	adc.w	r4, r4, r6
 800571e:	f04f 0100 	mov.w	r1, #0
 8005722:	f04f 0200 	mov.w	r2, #0
 8005726:	0262      	lsls	r2, r4, #9
 8005728:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800572c:	0259      	lsls	r1, r3, #9
 800572e:	460b      	mov	r3, r1
 8005730:	4614      	mov	r4, r2
 8005732:	4618      	mov	r0, r3
 8005734:	4621      	mov	r1, r4
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f04f 0400 	mov.w	r4, #0
 800573c:	461a      	mov	r2, r3
 800573e:	4623      	mov	r3, r4
 8005740:	f7fa fd6e 	bl	8000220 <__aeabi_uldivmod>
 8005744:	4603      	mov	r3, r0
 8005746:	460c      	mov	r4, r1
 8005748:	60fb      	str	r3, [r7, #12]
 800574a:	e049      	b.n	80057e0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800574c:	4b2f      	ldr	r3, [pc, #188]	; (800580c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	099b      	lsrs	r3, r3, #6
 8005752:	f04f 0400 	mov.w	r4, #0
 8005756:	f240 11ff 	movw	r1, #511	; 0x1ff
 800575a:	f04f 0200 	mov.w	r2, #0
 800575e:	ea03 0501 	and.w	r5, r3, r1
 8005762:	ea04 0602 	and.w	r6, r4, r2
 8005766:	4629      	mov	r1, r5
 8005768:	4632      	mov	r2, r6
 800576a:	f04f 0300 	mov.w	r3, #0
 800576e:	f04f 0400 	mov.w	r4, #0
 8005772:	0154      	lsls	r4, r2, #5
 8005774:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005778:	014b      	lsls	r3, r1, #5
 800577a:	4619      	mov	r1, r3
 800577c:	4622      	mov	r2, r4
 800577e:	1b49      	subs	r1, r1, r5
 8005780:	eb62 0206 	sbc.w	r2, r2, r6
 8005784:	f04f 0300 	mov.w	r3, #0
 8005788:	f04f 0400 	mov.w	r4, #0
 800578c:	0194      	lsls	r4, r2, #6
 800578e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005792:	018b      	lsls	r3, r1, #6
 8005794:	1a5b      	subs	r3, r3, r1
 8005796:	eb64 0402 	sbc.w	r4, r4, r2
 800579a:	f04f 0100 	mov.w	r1, #0
 800579e:	f04f 0200 	mov.w	r2, #0
 80057a2:	00e2      	lsls	r2, r4, #3
 80057a4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80057a8:	00d9      	lsls	r1, r3, #3
 80057aa:	460b      	mov	r3, r1
 80057ac:	4614      	mov	r4, r2
 80057ae:	195b      	adds	r3, r3, r5
 80057b0:	eb44 0406 	adc.w	r4, r4, r6
 80057b4:	f04f 0100 	mov.w	r1, #0
 80057b8:	f04f 0200 	mov.w	r2, #0
 80057bc:	02a2      	lsls	r2, r4, #10
 80057be:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80057c2:	0299      	lsls	r1, r3, #10
 80057c4:	460b      	mov	r3, r1
 80057c6:	4614      	mov	r4, r2
 80057c8:	4618      	mov	r0, r3
 80057ca:	4621      	mov	r1, r4
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f04f 0400 	mov.w	r4, #0
 80057d2:	461a      	mov	r2, r3
 80057d4:	4623      	mov	r3, r4
 80057d6:	f7fa fd23 	bl	8000220 <__aeabi_uldivmod>
 80057da:	4603      	mov	r3, r0
 80057dc:	460c      	mov	r4, r1
 80057de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80057e0:	4b0a      	ldr	r3, [pc, #40]	; (800580c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	0c1b      	lsrs	r3, r3, #16
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	3301      	adds	r3, #1
 80057ec:	005b      	lsls	r3, r3, #1
 80057ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f8:	60bb      	str	r3, [r7, #8]
      break;
 80057fa:	e002      	b.n	8005802 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057fc:	4b04      	ldr	r3, [pc, #16]	; (8005810 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80057fe:	60bb      	str	r3, [r7, #8]
      break;
 8005800:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005802:	68bb      	ldr	r3, [r7, #8]
}
 8005804:	4618      	mov	r0, r3
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800580c:	40023800 	.word	0x40023800
 8005810:	00f42400 	.word	0x00f42400
 8005814:	007a1200 	.word	0x007a1200

08005818 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005818:	b480      	push	{r7}
 800581a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800581c:	4b03      	ldr	r3, [pc, #12]	; (800582c <HAL_RCC_GetHCLKFreq+0x14>)
 800581e:	681b      	ldr	r3, [r3, #0]
}
 8005820:	4618      	mov	r0, r3
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	20000000 	.word	0x20000000

08005830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005834:	f7ff fff0 	bl	8005818 <HAL_RCC_GetHCLKFreq>
 8005838:	4601      	mov	r1, r0
 800583a:	4b05      	ldr	r3, [pc, #20]	; (8005850 <HAL_RCC_GetPCLK1Freq+0x20>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	0a9b      	lsrs	r3, r3, #10
 8005840:	f003 0307 	and.w	r3, r3, #7
 8005844:	4a03      	ldr	r2, [pc, #12]	; (8005854 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005846:	5cd3      	ldrb	r3, [r2, r3]
 8005848:	fa21 f303 	lsr.w	r3, r1, r3
}
 800584c:	4618      	mov	r0, r3
 800584e:	bd80      	pop	{r7, pc}
 8005850:	40023800 	.word	0x40023800
 8005854:	080074d0 	.word	0x080074d0

08005858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800585c:	f7ff ffdc 	bl	8005818 <HAL_RCC_GetHCLKFreq>
 8005860:	4601      	mov	r1, r0
 8005862:	4b05      	ldr	r3, [pc, #20]	; (8005878 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	0b5b      	lsrs	r3, r3, #13
 8005868:	f003 0307 	and.w	r3, r3, #7
 800586c:	4a03      	ldr	r2, [pc, #12]	; (800587c <HAL_RCC_GetPCLK2Freq+0x24>)
 800586e:	5cd3      	ldrb	r3, [r2, r3]
 8005870:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005874:	4618      	mov	r0, r3
 8005876:	bd80      	pop	{r7, pc}
 8005878:	40023800 	.word	0x40023800
 800587c:	080074d0 	.word	0x080074d0

08005880 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b088      	sub	sp, #32
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005888:	2300      	movs	r3, #0
 800588a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800588c:	2300      	movs	r3, #0
 800588e:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8005890:	2300      	movs	r3, #0
 8005892:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005894:	2300      	movs	r3, #0
 8005896:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d012      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80058a4:	4b65      	ldr	r3, [pc, #404]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	4a64      	ldr	r2, [pc, #400]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80058ae:	6093      	str	r3, [r2, #8]
 80058b0:	4b62      	ldr	r3, [pc, #392]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b8:	4960      	ldr	r1, [pc, #384]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 80058c6:	2301      	movs	r3, #1
 80058c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d017      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058d6:	4b59      	ldr	r3, [pc, #356]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e4:	4955      	ldr	r1, [pc, #340]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058f4:	d101      	bne.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80058f6:	2301      	movs	r3, #1
 80058f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8005902:	2301      	movs	r3, #1
 8005904:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d017      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005912:	4b4a      	ldr	r3, [pc, #296]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005918:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005920:	4946      	ldr	r1, [pc, #280]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005922:	4313      	orrs	r3, r2
 8005924:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005930:	d101      	bne.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8005932:	2301      	movs	r3, #1
 8005934:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800593e:	2301      	movs	r3, #1
 8005940:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0320 	and.w	r3, r3, #32
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 808b 	beq.w	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005950:	4b3a      	ldr	r3, [pc, #232]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005954:	4a39      	ldr	r2, [pc, #228]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800595a:	6413      	str	r3, [r2, #64]	; 0x40
 800595c:	4b37      	ldr	r3, [pc, #220]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800595e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005964:	60fb      	str	r3, [r7, #12]
 8005966:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005968:	4b35      	ldr	r3, [pc, #212]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a34      	ldr	r2, [pc, #208]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800596e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005972:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005974:	f7fc f896 	bl	8001aa4 <HAL_GetTick>
 8005978:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800597a:	e008      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800597c:	f7fc f892 	bl	8001aa4 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b64      	cmp	r3, #100	; 0x64
 8005988:	d901      	bls.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e2ba      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800598e:	4b2c      	ldr	r3, [pc, #176]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005996:	2b00      	cmp	r3, #0
 8005998:	d0f0      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800599a:	4b28      	ldr	r3, [pc, #160]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800599c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059a2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d035      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d02e      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059b8:	4b20      	ldr	r3, [pc, #128]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80059ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059c0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059c2:	4b1e      	ldr	r3, [pc, #120]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80059c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c6:	4a1d      	ldr	r2, [pc, #116]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80059c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059cc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059ce:	4b1b      	ldr	r3, [pc, #108]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80059d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d2:	4a1a      	ldr	r2, [pc, #104]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80059d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80059da:	4a18      	ldr	r2, [pc, #96]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80059e0:	4b16      	ldr	r3, [pc, #88]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80059e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d114      	bne.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ec:	f7fc f85a 	bl	8001aa4 <HAL_GetTick>
 80059f0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059f2:	e00a      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059f4:	f7fc f856 	bl	8001aa4 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d901      	bls.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e27c      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a0a:	4b0c      	ldr	r3, [pc, #48]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d0ee      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a22:	d111      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8005a24:	4b05      	ldr	r3, [pc, #20]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005a30:	4b04      	ldr	r3, [pc, #16]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005a32:	400b      	ands	r3, r1
 8005a34:	4901      	ldr	r1, [pc, #4]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	608b      	str	r3, [r1, #8]
 8005a3a:	e00b      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005a3c:	40023800 	.word	0x40023800
 8005a40:	40007000 	.word	0x40007000
 8005a44:	0ffffcff 	.word	0x0ffffcff
 8005a48:	4ba3      	ldr	r3, [pc, #652]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	4aa2      	ldr	r2, [pc, #648]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005a4e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005a52:	6093      	str	r3, [r2, #8]
 8005a54:	4ba0      	ldr	r3, [pc, #640]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005a56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a60:	499d      	ldr	r1, [pc, #628]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0310 	and.w	r3, r3, #16
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d010      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a72:	4b99      	ldr	r3, [pc, #612]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a78:	4a97      	ldr	r2, [pc, #604]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005a7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005a82:	4b95      	ldr	r3, [pc, #596]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005a84:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8c:	4992      	ldr	r1, [pc, #584]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00a      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005aa0:	4b8d      	ldr	r3, [pc, #564]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aae:	498a      	ldr	r1, [pc, #552]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00a      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ac2:	4b85      	ldr	r3, [pc, #532]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ac8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad0:	4981      	ldr	r1, [pc, #516]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00a      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ae4:	4b7c      	ldr	r3, [pc, #496]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005af2:	4979      	ldr	r1, [pc, #484]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00a      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b06:	4b74      	ldr	r3, [pc, #464]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b0c:	f023 0203 	bic.w	r2, r3, #3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b14:	4970      	ldr	r1, [pc, #448]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00a      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b28:	4b6b      	ldr	r3, [pc, #428]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b2e:	f023 020c 	bic.w	r2, r3, #12
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	4968      	ldr	r1, [pc, #416]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00a      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b4a:	4b63      	ldr	r3, [pc, #396]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b58:	495f      	ldr	r1, [pc, #380]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00a      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b6c:	4b5a      	ldr	r3, [pc, #360]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b7a:	4957      	ldr	r1, [pc, #348]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00a      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b8e:	4b52      	ldr	r3, [pc, #328]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b9c:	494e      	ldr	r1, [pc, #312]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00a      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005bb0:	4b49      	ldr	r3, [pc, #292]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bb6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bbe:	4946      	ldr	r1, [pc, #280]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00a      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005bd2:	4b41      	ldr	r3, [pc, #260]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be0:	493d      	ldr	r1, [pc, #244]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00a      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005bf4:	4b38      	ldr	r3, [pc, #224]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bfa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c02:	4935      	ldr	r1, [pc, #212]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d011      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005c16:	4b30      	ldr	r3, [pc, #192]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c24:	492c      	ldr	r1, [pc, #176]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c34:	d101      	bne.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8005c36:	2301      	movs	r3, #1
 8005c38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00a      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c46:	4b24      	ldr	r3, [pc, #144]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c54:	4920      	ldr	r1, [pc, #128]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00a      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005c68:	4b1b      	ldr	r3, [pc, #108]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c6e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c76:	4918      	ldr	r1, [pc, #96]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00a      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005c8a:	4b13      	ldr	r3, [pc, #76]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c90:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c98:	490f      	ldr	r1, [pc, #60]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d005      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cae:	f040 809c 	bne.w	8005dea <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005cb2:	4b09      	ldr	r3, [pc, #36]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a08      	ldr	r2, [pc, #32]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005cb8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005cbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cbe:	f7fb fef1 	bl	8001aa4 <HAL_GetTick>
 8005cc2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cc4:	e00a      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005cc6:	f7fb feed 	bl	8001aa4 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	2b64      	cmp	r3, #100	; 0x64
 8005cd2:	d903      	bls.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e115      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005cd8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cdc:	4b8b      	ldr	r3, [pc, #556]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1ee      	bne.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0301 	and.w	r3, r3, #1
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d017      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d113      	bne.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005cfc:	4b83      	ldr	r3, [pc, #524]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d02:	0e1b      	lsrs	r3, r3, #24
 8005d04:	f003 030f 	and.w	r3, r3, #15
 8005d08:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	019a      	lsls	r2, r3, #6
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	061b      	lsls	r3, r3, #24
 8005d14:	431a      	orrs	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	071b      	lsls	r3, r3, #28
 8005d1c:	497b      	ldr	r1, [pc, #492]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d004      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d38:	d00a      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d024      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d4e:	d11f      	bne.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d50:	4b6e      	ldr	r3, [pc, #440]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d56:	0f1b      	lsrs	r3, r3, #28
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	019a      	lsls	r2, r3, #6
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	061b      	lsls	r3, r3, #24
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	071b      	lsls	r3, r3, #28
 8005d70:	4966      	ldr	r1, [pc, #408]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005d78:	4b64      	ldr	r3, [pc, #400]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005d7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d7e:	f023 021f 	bic.w	r2, r3, #31
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	3b01      	subs	r3, #1
 8005d88:	4960      	ldr	r1, [pc, #384]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00d      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	019a      	lsls	r2, r3, #6
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	061b      	lsls	r3, r3, #24
 8005da8:	431a      	orrs	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	071b      	lsls	r3, r3, #28
 8005db0:	4956      	ldr	r1, [pc, #344]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005db8:	4b54      	ldr	r3, [pc, #336]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a53      	ldr	r2, [pc, #332]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005dbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005dc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dc4:	f7fb fe6e 	bl	8001aa4 <HAL_GetTick>
 8005dc8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005dca:	e008      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005dcc:	f7fb fe6a 	bl	8001aa4 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	2b64      	cmp	r3, #100	; 0x64
 8005dd8:	d901      	bls.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e092      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005dde:	4b4b      	ldr	r3, [pc, #300]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d0f0      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	f040 8088 	bne.w	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005df2:	4b46      	ldr	r3, [pc, #280]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a45      	ldr	r2, [pc, #276]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005df8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dfe:	f7fb fe51 	bl	8001aa4 <HAL_GetTick>
 8005e02:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e04:	e008      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e06:	f7fb fe4d 	bl	8001aa4 <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	2b64      	cmp	r3, #100	; 0x64
 8005e12:	d901      	bls.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e075      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e18:	4b3c      	ldr	r3, [pc, #240]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e24:	d0ef      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d009      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d024      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d120      	bne.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005e4e:	4b2f      	ldr	r3, [pc, #188]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e54:	0c1b      	lsrs	r3, r3, #16
 8005e56:	f003 0303 	and.w	r3, r3, #3
 8005e5a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	019a      	lsls	r2, r3, #6
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	041b      	lsls	r3, r3, #16
 8005e66:	431a      	orrs	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	061b      	lsls	r3, r3, #24
 8005e6e:	4927      	ldr	r1, [pc, #156]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005e76:	4b25      	ldr	r3, [pc, #148]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e7c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	3b01      	subs	r3, #1
 8005e86:	021b      	lsls	r3, r3, #8
 8005e88:	4920      	ldr	r1, [pc, #128]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d018      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ea0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ea4:	d113      	bne.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ea6:	4b19      	ldr	r3, [pc, #100]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eac:	0e1b      	lsrs	r3, r3, #24
 8005eae:	f003 030f 	and.w	r3, r3, #15
 8005eb2:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	019a      	lsls	r2, r3, #6
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	041b      	lsls	r3, r3, #16
 8005ec0:	431a      	orrs	r2, r3
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	061b      	lsls	r3, r3, #24
 8005ec6:	4911      	ldr	r1, [pc, #68]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005ece:	4b0f      	ldr	r3, [pc, #60]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a0e      	ldr	r2, [pc, #56]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ed8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eda:	f7fb fde3 	bl	8001aa4 <HAL_GetTick>
 8005ede:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ee0:	e008      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ee2:	f7fb fddf 	bl	8001aa4 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b64      	cmp	r3, #100	; 0x64
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e007      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ef4:	4b05      	ldr	r3, [pc, #20]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005efc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f00:	d1ef      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3720      	adds	r7, #32
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	40023800 	.word	0x40023800

08005f10 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e01d      	b.n	8005f5e <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d106      	bne.n	8005f3c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7fb fb66 	bl	8001608 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4610      	mov	r0, r2
 8005f50:	f000 fa0e 	bl	8006370 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b082      	sub	sp, #8
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e01d      	b.n	8005fb4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d106      	bne.n	8005f92 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f7fb fb1b 	bl	80015c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2202      	movs	r2, #2
 8005f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	3304      	adds	r3, #4
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	4610      	mov	r0, r2
 8005fa6:	f000 f9e3 	bl	8006370 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3708      	adds	r7, #8
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	6839      	ldr	r1, [r7, #0]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 fccc 	bl	800696c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a17      	ldr	r2, [pc, #92]	; (8006038 <HAL_TIM_PWM_Start+0x7c>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d004      	beq.n	8005fe8 <HAL_TIM_PWM_Start+0x2c>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a16      	ldr	r2, [pc, #88]	; (800603c <HAL_TIM_PWM_Start+0x80>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d101      	bne.n	8005fec <HAL_TIM_PWM_Start+0x30>
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e000      	b.n	8005fee <HAL_TIM_PWM_Start+0x32>
 8005fec:	2300      	movs	r3, #0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d007      	beq.n	8006002 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006000:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689a      	ldr	r2, [r3, #8]
 8006008:	4b0d      	ldr	r3, [pc, #52]	; (8006040 <HAL_TIM_PWM_Start+0x84>)
 800600a:	4013      	ands	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2b06      	cmp	r3, #6
 8006012:	d00b      	beq.n	800602c <HAL_TIM_PWM_Start+0x70>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800601a:	d007      	beq.n	800602c <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f042 0201 	orr.w	r2, r2, #1
 800602a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	40010000 	.word	0x40010000
 800603c:	40010400 	.word	0x40010400
 8006040:	00010007 	.word	0x00010007

08006044 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006056:	2b01      	cmp	r3, #1
 8006058:	d101      	bne.n	800605e <HAL_TIM_OC_ConfigChannel+0x1a>
 800605a:	2302      	movs	r3, #2
 800605c:	e06c      	b.n	8006138 <HAL_TIM_OC_ConfigChannel+0xf4>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2202      	movs	r2, #2
 800606a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b14      	cmp	r3, #20
 8006072:	d857      	bhi.n	8006124 <HAL_TIM_OC_ConfigChannel+0xe0>
 8006074:	a201      	add	r2, pc, #4	; (adr r2, 800607c <HAL_TIM_OC_ConfigChannel+0x38>)
 8006076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607a:	bf00      	nop
 800607c:	080060d1 	.word	0x080060d1
 8006080:	08006125 	.word	0x08006125
 8006084:	08006125 	.word	0x08006125
 8006088:	08006125 	.word	0x08006125
 800608c:	080060df 	.word	0x080060df
 8006090:	08006125 	.word	0x08006125
 8006094:	08006125 	.word	0x08006125
 8006098:	08006125 	.word	0x08006125
 800609c:	080060ed 	.word	0x080060ed
 80060a0:	08006125 	.word	0x08006125
 80060a4:	08006125 	.word	0x08006125
 80060a8:	08006125 	.word	0x08006125
 80060ac:	080060fb 	.word	0x080060fb
 80060b0:	08006125 	.word	0x08006125
 80060b4:	08006125 	.word	0x08006125
 80060b8:	08006125 	.word	0x08006125
 80060bc:	08006109 	.word	0x08006109
 80060c0:	08006125 	.word	0x08006125
 80060c4:	08006125 	.word	0x08006125
 80060c8:	08006125 	.word	0x08006125
 80060cc:	08006117 	.word	0x08006117
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68b9      	ldr	r1, [r7, #8]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 f9ea 	bl	80064b0 <TIM_OC1_SetConfig>
      break;
 80060dc:	e023      	b.n	8006126 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68b9      	ldr	r1, [r7, #8]
 80060e4:	4618      	mov	r0, r3
 80060e6:	f000 fa55 	bl	8006594 <TIM_OC2_SetConfig>
      break;
 80060ea:	e01c      	b.n	8006126 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68b9      	ldr	r1, [r7, #8]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 fac6 	bl	8006684 <TIM_OC3_SetConfig>
      break;
 80060f8:	e015      	b.n	8006126 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68b9      	ldr	r1, [r7, #8]
 8006100:	4618      	mov	r0, r3
 8006102:	f000 fb35 	bl	8006770 <TIM_OC4_SetConfig>
      break;
 8006106:	e00e      	b.n	8006126 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68b9      	ldr	r1, [r7, #8]
 800610e:	4618      	mov	r0, r3
 8006110:	f000 fb86 	bl	8006820 <TIM_OC5_SetConfig>
      break;
 8006114:	e007      	b.n	8006126 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68b9      	ldr	r1, [r7, #8]
 800611c:	4618      	mov	r0, r3
 800611e:	f000 fbd1 	bl	80068c4 <TIM_OC6_SetConfig>
      break;
 8006122:	e000      	b.n	8006126 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 8006124:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006152:	2b01      	cmp	r3, #1
 8006154:	d101      	bne.n	800615a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006156:	2302      	movs	r3, #2
 8006158:	e105      	b.n	8006366 <HAL_TIM_PWM_ConfigChannel+0x226>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2202      	movs	r2, #2
 8006166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2b14      	cmp	r3, #20
 800616e:	f200 80f0 	bhi.w	8006352 <HAL_TIM_PWM_ConfigChannel+0x212>
 8006172:	a201      	add	r2, pc, #4	; (adr r2, 8006178 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006178:	080061cd 	.word	0x080061cd
 800617c:	08006353 	.word	0x08006353
 8006180:	08006353 	.word	0x08006353
 8006184:	08006353 	.word	0x08006353
 8006188:	0800620d 	.word	0x0800620d
 800618c:	08006353 	.word	0x08006353
 8006190:	08006353 	.word	0x08006353
 8006194:	08006353 	.word	0x08006353
 8006198:	0800624f 	.word	0x0800624f
 800619c:	08006353 	.word	0x08006353
 80061a0:	08006353 	.word	0x08006353
 80061a4:	08006353 	.word	0x08006353
 80061a8:	0800628f 	.word	0x0800628f
 80061ac:	08006353 	.word	0x08006353
 80061b0:	08006353 	.word	0x08006353
 80061b4:	08006353 	.word	0x08006353
 80061b8:	080062d1 	.word	0x080062d1
 80061bc:	08006353 	.word	0x08006353
 80061c0:	08006353 	.word	0x08006353
 80061c4:	08006353 	.word	0x08006353
 80061c8:	08006311 	.word	0x08006311
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68b9      	ldr	r1, [r7, #8]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 f96c 	bl	80064b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	699a      	ldr	r2, [r3, #24]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f042 0208 	orr.w	r2, r2, #8
 80061e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	699a      	ldr	r2, [r3, #24]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f022 0204 	bic.w	r2, r2, #4
 80061f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6999      	ldr	r1, [r3, #24]
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	691a      	ldr	r2, [r3, #16]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	619a      	str	r2, [r3, #24]
      break;
 800620a:	e0a3      	b.n	8006354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68b9      	ldr	r1, [r7, #8]
 8006212:	4618      	mov	r0, r3
 8006214:	f000 f9be 	bl	8006594 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	699a      	ldr	r2, [r3, #24]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699a      	ldr	r2, [r3, #24]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6999      	ldr	r1, [r3, #24]
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	021a      	lsls	r2, r3, #8
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	619a      	str	r2, [r3, #24]
      break;
 800624c:	e082      	b.n	8006354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68b9      	ldr	r1, [r7, #8]
 8006254:	4618      	mov	r0, r3
 8006256:	f000 fa15 	bl	8006684 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	69da      	ldr	r2, [r3, #28]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f042 0208 	orr.w	r2, r2, #8
 8006268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	69da      	ldr	r2, [r3, #28]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 0204 	bic.w	r2, r2, #4
 8006278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	69d9      	ldr	r1, [r3, #28]
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	691a      	ldr	r2, [r3, #16]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	430a      	orrs	r2, r1
 800628a:	61da      	str	r2, [r3, #28]
      break;
 800628c:	e062      	b.n	8006354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68b9      	ldr	r1, [r7, #8]
 8006294:	4618      	mov	r0, r3
 8006296:	f000 fa6b 	bl	8006770 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	69da      	ldr	r2, [r3, #28]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	69da      	ldr	r2, [r3, #28]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	69d9      	ldr	r1, [r3, #28]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	021a      	lsls	r2, r3, #8
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	430a      	orrs	r2, r1
 80062cc:	61da      	str	r2, [r3, #28]
      break;
 80062ce:	e041      	b.n	8006354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68b9      	ldr	r1, [r7, #8]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 faa2 	bl	8006820 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f042 0208 	orr.w	r2, r2, #8
 80062ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f022 0204 	bic.w	r2, r2, #4
 80062fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	691a      	ldr	r2, [r3, #16]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	430a      	orrs	r2, r1
 800630c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800630e:	e021      	b.n	8006354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68b9      	ldr	r1, [r7, #8]
 8006316:	4618      	mov	r0, r3
 8006318:	f000 fad4 	bl	80068c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800632a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800633a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	021a      	lsls	r2, r3, #8
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	430a      	orrs	r2, r1
 800634e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006350:	e000      	b.n	8006354 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8006352:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop

08006370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a40      	ldr	r2, [pc, #256]	; (8006484 <TIM_Base_SetConfig+0x114>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d013      	beq.n	80063b0 <TIM_Base_SetConfig+0x40>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800638e:	d00f      	beq.n	80063b0 <TIM_Base_SetConfig+0x40>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a3d      	ldr	r2, [pc, #244]	; (8006488 <TIM_Base_SetConfig+0x118>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d00b      	beq.n	80063b0 <TIM_Base_SetConfig+0x40>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a3c      	ldr	r2, [pc, #240]	; (800648c <TIM_Base_SetConfig+0x11c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d007      	beq.n	80063b0 <TIM_Base_SetConfig+0x40>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a3b      	ldr	r2, [pc, #236]	; (8006490 <TIM_Base_SetConfig+0x120>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d003      	beq.n	80063b0 <TIM_Base_SetConfig+0x40>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a3a      	ldr	r2, [pc, #232]	; (8006494 <TIM_Base_SetConfig+0x124>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d108      	bne.n	80063c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	4313      	orrs	r3, r2
 80063c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a2f      	ldr	r2, [pc, #188]	; (8006484 <TIM_Base_SetConfig+0x114>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d02b      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d0:	d027      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a2c      	ldr	r2, [pc, #176]	; (8006488 <TIM_Base_SetConfig+0x118>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d023      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a2b      	ldr	r2, [pc, #172]	; (800648c <TIM_Base_SetConfig+0x11c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d01f      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a2a      	ldr	r2, [pc, #168]	; (8006490 <TIM_Base_SetConfig+0x120>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d01b      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a29      	ldr	r2, [pc, #164]	; (8006494 <TIM_Base_SetConfig+0x124>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d017      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a28      	ldr	r2, [pc, #160]	; (8006498 <TIM_Base_SetConfig+0x128>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d013      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a27      	ldr	r2, [pc, #156]	; (800649c <TIM_Base_SetConfig+0x12c>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d00f      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a26      	ldr	r2, [pc, #152]	; (80064a0 <TIM_Base_SetConfig+0x130>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00b      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a25      	ldr	r2, [pc, #148]	; (80064a4 <TIM_Base_SetConfig+0x134>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d007      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a24      	ldr	r2, [pc, #144]	; (80064a8 <TIM_Base_SetConfig+0x138>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d003      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a23      	ldr	r2, [pc, #140]	; (80064ac <TIM_Base_SetConfig+0x13c>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d108      	bne.n	8006434 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	4313      	orrs	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	4313      	orrs	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a0a      	ldr	r2, [pc, #40]	; (8006484 <TIM_Base_SetConfig+0x114>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d003      	beq.n	8006468 <TIM_Base_SetConfig+0xf8>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a0c      	ldr	r2, [pc, #48]	; (8006494 <TIM_Base_SetConfig+0x124>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d103      	bne.n	8006470 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	691a      	ldr	r2, [r3, #16]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	615a      	str	r2, [r3, #20]
}
 8006476:	bf00      	nop
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	40010000 	.word	0x40010000
 8006488:	40000400 	.word	0x40000400
 800648c:	40000800 	.word	0x40000800
 8006490:	40000c00 	.word	0x40000c00
 8006494:	40010400 	.word	0x40010400
 8006498:	40014000 	.word	0x40014000
 800649c:	40014400 	.word	0x40014400
 80064a0:	40014800 	.word	0x40014800
 80064a4:	40001800 	.word	0x40001800
 80064a8:	40001c00 	.word	0x40001c00
 80064ac:	40002000 	.word	0x40002000

080064b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	f023 0201 	bic.w	r2, r3, #1
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	4b2b      	ldr	r3, [pc, #172]	; (8006588 <TIM_OC1_SetConfig+0xd8>)
 80064dc:	4013      	ands	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f023 0303 	bic.w	r3, r3, #3
 80064e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f023 0302 	bic.w	r3, r3, #2
 80064f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	4313      	orrs	r3, r2
 8006502:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a21      	ldr	r2, [pc, #132]	; (800658c <TIM_OC1_SetConfig+0xdc>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d003      	beq.n	8006514 <TIM_OC1_SetConfig+0x64>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a20      	ldr	r2, [pc, #128]	; (8006590 <TIM_OC1_SetConfig+0xe0>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d10c      	bne.n	800652e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	f023 0308 	bic.w	r3, r3, #8
 800651a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	4313      	orrs	r3, r2
 8006524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	f023 0304 	bic.w	r3, r3, #4
 800652c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a16      	ldr	r2, [pc, #88]	; (800658c <TIM_OC1_SetConfig+0xdc>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d003      	beq.n	800653e <TIM_OC1_SetConfig+0x8e>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a15      	ldr	r2, [pc, #84]	; (8006590 <TIM_OC1_SetConfig+0xe0>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d111      	bne.n	8006562 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006544:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800654c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	4313      	orrs	r3, r2
 8006556:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	4313      	orrs	r3, r2
 8006560:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	685a      	ldr	r2, [r3, #4]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	621a      	str	r2, [r3, #32]
}
 800657c:	bf00      	nop
 800657e:	371c      	adds	r7, #28
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr
 8006588:	fffeff8f 	.word	0xfffeff8f
 800658c:	40010000 	.word	0x40010000
 8006590:	40010400 	.word	0x40010400

08006594 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006594:	b480      	push	{r7}
 8006596:	b087      	sub	sp, #28
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	f023 0210 	bic.w	r2, r3, #16
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	4b2e      	ldr	r3, [pc, #184]	; (8006678 <TIM_OC2_SetConfig+0xe4>)
 80065c0:	4013      	ands	r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	021b      	lsls	r3, r3, #8
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f023 0320 	bic.w	r3, r3, #32
 80065de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	011b      	lsls	r3, r3, #4
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a23      	ldr	r2, [pc, #140]	; (800667c <TIM_OC2_SetConfig+0xe8>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d003      	beq.n	80065fc <TIM_OC2_SetConfig+0x68>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a22      	ldr	r2, [pc, #136]	; (8006680 <TIM_OC2_SetConfig+0xec>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d10d      	bne.n	8006618 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	011b      	lsls	r3, r3, #4
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	4313      	orrs	r3, r2
 800660e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006616:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a18      	ldr	r2, [pc, #96]	; (800667c <TIM_OC2_SetConfig+0xe8>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d003      	beq.n	8006628 <TIM_OC2_SetConfig+0x94>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a17      	ldr	r2, [pc, #92]	; (8006680 <TIM_OC2_SetConfig+0xec>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d113      	bne.n	8006650 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800662e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006636:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	4313      	orrs	r3, r2
 8006642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	4313      	orrs	r3, r2
 800664e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	621a      	str	r2, [r3, #32]
}
 800666a:	bf00      	nop
 800666c:	371c      	adds	r7, #28
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	feff8fff 	.word	0xfeff8fff
 800667c:	40010000 	.word	0x40010000
 8006680:	40010400 	.word	0x40010400

08006684 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	4b2d      	ldr	r3, [pc, #180]	; (8006764 <TIM_OC3_SetConfig+0xe0>)
 80066b0:	4013      	ands	r3, r2
 80066b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 0303 	bic.w	r3, r3, #3
 80066ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	021b      	lsls	r3, r3, #8
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a22      	ldr	r2, [pc, #136]	; (8006768 <TIM_OC3_SetConfig+0xe4>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d003      	beq.n	80066ea <TIM_OC3_SetConfig+0x66>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a21      	ldr	r2, [pc, #132]	; (800676c <TIM_OC3_SetConfig+0xe8>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d10d      	bne.n	8006706 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	021b      	lsls	r3, r3, #8
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a17      	ldr	r2, [pc, #92]	; (8006768 <TIM_OC3_SetConfig+0xe4>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d003      	beq.n	8006716 <TIM_OC3_SetConfig+0x92>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a16      	ldr	r2, [pc, #88]	; (800676c <TIM_OC3_SetConfig+0xe8>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d113      	bne.n	800673e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800671c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	011b      	lsls	r3, r3, #4
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	4313      	orrs	r3, r2
 8006730:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	011b      	lsls	r3, r3, #4
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	4313      	orrs	r3, r2
 800673c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	685a      	ldr	r2, [r3, #4]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	621a      	str	r2, [r3, #32]
}
 8006758:	bf00      	nop
 800675a:	371c      	adds	r7, #28
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr
 8006764:	fffeff8f 	.word	0xfffeff8f
 8006768:	40010000 	.word	0x40010000
 800676c:	40010400 	.word	0x40010400

08006770 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006770:	b480      	push	{r7}
 8006772:	b087      	sub	sp, #28
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	4b1e      	ldr	r3, [pc, #120]	; (8006814 <TIM_OC4_SetConfig+0xa4>)
 800679c:	4013      	ands	r3, r2
 800679e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	021b      	lsls	r3, r3, #8
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	031b      	lsls	r3, r3, #12
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a13      	ldr	r2, [pc, #76]	; (8006818 <TIM_OC4_SetConfig+0xa8>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d003      	beq.n	80067d8 <TIM_OC4_SetConfig+0x68>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a12      	ldr	r2, [pc, #72]	; (800681c <TIM_OC4_SetConfig+0xac>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d109      	bne.n	80067ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	695b      	ldr	r3, [r3, #20]
 80067e4:	019b      	lsls	r3, r3, #6
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	621a      	str	r2, [r3, #32]
}
 8006806:	bf00      	nop
 8006808:	371c      	adds	r7, #28
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	feff8fff 	.word	0xfeff8fff
 8006818:	40010000 	.word	0x40010000
 800681c:	40010400 	.word	0x40010400

08006820 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006820:	b480      	push	{r7}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	4b1b      	ldr	r3, [pc, #108]	; (80068b8 <TIM_OC5_SetConfig+0x98>)
 800684c:	4013      	ands	r3, r2
 800684e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	4313      	orrs	r3, r2
 8006858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006860:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	041b      	lsls	r3, r3, #16
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	4313      	orrs	r3, r2
 800686c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a12      	ldr	r2, [pc, #72]	; (80068bc <TIM_OC5_SetConfig+0x9c>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d003      	beq.n	800687e <TIM_OC5_SetConfig+0x5e>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a11      	ldr	r2, [pc, #68]	; (80068c0 <TIM_OC5_SetConfig+0xa0>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d109      	bne.n	8006892 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006884:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	021b      	lsls	r3, r3, #8
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	4313      	orrs	r3, r2
 8006890:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	621a      	str	r2, [r3, #32]
}
 80068ac:	bf00      	nop
 80068ae:	371c      	adds	r7, #28
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr
 80068b8:	fffeff8f 	.word	0xfffeff8f
 80068bc:	40010000 	.word	0x40010000
 80068c0:	40010400 	.word	0x40010400

080068c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	4b1c      	ldr	r3, [pc, #112]	; (8006960 <TIM_OC6_SetConfig+0x9c>)
 80068f0:	4013      	ands	r3, r2
 80068f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	021b      	lsls	r3, r3, #8
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006906:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	051b      	lsls	r3, r3, #20
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	4313      	orrs	r3, r2
 8006912:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a13      	ldr	r2, [pc, #76]	; (8006964 <TIM_OC6_SetConfig+0xa0>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d003      	beq.n	8006924 <TIM_OC6_SetConfig+0x60>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a12      	ldr	r2, [pc, #72]	; (8006968 <TIM_OC6_SetConfig+0xa4>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d109      	bne.n	8006938 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800692a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	029b      	lsls	r3, r3, #10
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	4313      	orrs	r3, r2
 8006936:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	693a      	ldr	r2, [r7, #16]
 8006950:	621a      	str	r2, [r3, #32]
}
 8006952:	bf00      	nop
 8006954:	371c      	adds	r7, #28
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	feff8fff 	.word	0xfeff8fff
 8006964:	40010000 	.word	0x40010000
 8006968:	40010400 	.word	0x40010400

0800696c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800696c:	b480      	push	{r7}
 800696e:	b087      	sub	sp, #28
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	f003 031f 	and.w	r3, r3, #31
 800697e:	2201      	movs	r2, #1
 8006980:	fa02 f303 	lsl.w	r3, r2, r3
 8006984:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6a1a      	ldr	r2, [r3, #32]
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	43db      	mvns	r3, r3
 800698e:	401a      	ands	r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6a1a      	ldr	r2, [r3, #32]
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	f003 031f 	and.w	r3, r3, #31
 800699e:	6879      	ldr	r1, [r7, #4]
 80069a0:	fa01 f303 	lsl.w	r3, r1, r3
 80069a4:	431a      	orrs	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	621a      	str	r2, [r3, #32]
}
 80069aa:	bf00      	nop
 80069ac:	371c      	adds	r7, #28
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
	...

080069b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d101      	bne.n	80069d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069cc:	2302      	movs	r3, #2
 80069ce:	e06d      	b.n	8006aac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2202      	movs	r2, #2
 80069dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a30      	ldr	r2, [pc, #192]	; (8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d004      	beq.n	8006a04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a2f      	ldr	r2, [pc, #188]	; (8006abc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d108      	bne.n	8006a16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a20      	ldr	r2, [pc, #128]	; (8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d022      	beq.n	8006a80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a42:	d01d      	beq.n	8006a80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a1d      	ldr	r2, [pc, #116]	; (8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d018      	beq.n	8006a80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a1c      	ldr	r2, [pc, #112]	; (8006ac4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d013      	beq.n	8006a80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a1a      	ldr	r2, [pc, #104]	; (8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d00e      	beq.n	8006a80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a15      	ldr	r2, [pc, #84]	; (8006abc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d009      	beq.n	8006a80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a16      	ldr	r2, [pc, #88]	; (8006acc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d004      	beq.n	8006a80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a15      	ldr	r2, [pc, #84]	; (8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d10c      	bne.n	8006a9a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr
 8006ab8:	40010000 	.word	0x40010000
 8006abc:	40010400 	.word	0x40010400
 8006ac0:	40000400 	.word	0x40000400
 8006ac4:	40000800 	.word	0x40000800
 8006ac8:	40000c00 	.word	0x40000c00
 8006acc:	40014000 	.word	0x40014000
 8006ad0:	40001800 	.word	0x40001800

08006ad4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d101      	bne.n	8006ae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e040      	b.n	8006b68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d106      	bne.n	8006afc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7fa fe74 	bl	80017e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2224      	movs	r2, #36	; 0x24
 8006b00:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f022 0201 	bic.w	r2, r2, #1
 8006b10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f82c 	bl	8006b70 <UART_SetConfig>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d101      	bne.n	8006b22 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e022      	b.n	8006b68 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d002      	beq.n	8006b30 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 faca 	bl	80070c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	685a      	ldr	r2, [r3, #4]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	689a      	ldr	r2, [r3, #8]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f042 0201 	orr.w	r2, r2, #1
 8006b5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fb51 	bl	8007208 <UART_CheckIdleState>
 8006b66:	4603      	mov	r3, r0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3708      	adds	r7, #8
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b088      	sub	sp, #32
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	689a      	ldr	r2, [r3, #8]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	431a      	orrs	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	431a      	orrs	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	69db      	ldr	r3, [r3, #28]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	4bb1      	ldr	r3, [pc, #708]	; (8006e64 <UART_SetConfig+0x2f4>)
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	6812      	ldr	r2, [r2, #0]
 8006ba6:	6939      	ldr	r1, [r7, #16]
 8006ba8:	430b      	orrs	r3, r1
 8006baa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68da      	ldr	r2, [r3, #12]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a1b      	ldr	r3, [r3, #32]
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	430a      	orrs	r2, r1
 8006be4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a9f      	ldr	r2, [pc, #636]	; (8006e68 <UART_SetConfig+0x2f8>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d121      	bne.n	8006c34 <UART_SetConfig+0xc4>
 8006bf0:	4b9e      	ldr	r3, [pc, #632]	; (8006e6c <UART_SetConfig+0x2fc>)
 8006bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf6:	f003 0303 	and.w	r3, r3, #3
 8006bfa:	2b03      	cmp	r3, #3
 8006bfc:	d816      	bhi.n	8006c2c <UART_SetConfig+0xbc>
 8006bfe:	a201      	add	r2, pc, #4	; (adr r2, 8006c04 <UART_SetConfig+0x94>)
 8006c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c04:	08006c15 	.word	0x08006c15
 8006c08:	08006c21 	.word	0x08006c21
 8006c0c:	08006c1b 	.word	0x08006c1b
 8006c10:	08006c27 	.word	0x08006c27
 8006c14:	2301      	movs	r3, #1
 8006c16:	77fb      	strb	r3, [r7, #31]
 8006c18:	e151      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	77fb      	strb	r3, [r7, #31]
 8006c1e:	e14e      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006c20:	2304      	movs	r3, #4
 8006c22:	77fb      	strb	r3, [r7, #31]
 8006c24:	e14b      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006c26:	2308      	movs	r3, #8
 8006c28:	77fb      	strb	r3, [r7, #31]
 8006c2a:	e148      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006c2c:	2310      	movs	r3, #16
 8006c2e:	77fb      	strb	r3, [r7, #31]
 8006c30:	bf00      	nop
 8006c32:	e144      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a8d      	ldr	r2, [pc, #564]	; (8006e70 <UART_SetConfig+0x300>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d134      	bne.n	8006ca8 <UART_SetConfig+0x138>
 8006c3e:	4b8b      	ldr	r3, [pc, #556]	; (8006e6c <UART_SetConfig+0x2fc>)
 8006c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c44:	f003 030c 	and.w	r3, r3, #12
 8006c48:	2b0c      	cmp	r3, #12
 8006c4a:	d829      	bhi.n	8006ca0 <UART_SetConfig+0x130>
 8006c4c:	a201      	add	r2, pc, #4	; (adr r2, 8006c54 <UART_SetConfig+0xe4>)
 8006c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c52:	bf00      	nop
 8006c54:	08006c89 	.word	0x08006c89
 8006c58:	08006ca1 	.word	0x08006ca1
 8006c5c:	08006ca1 	.word	0x08006ca1
 8006c60:	08006ca1 	.word	0x08006ca1
 8006c64:	08006c95 	.word	0x08006c95
 8006c68:	08006ca1 	.word	0x08006ca1
 8006c6c:	08006ca1 	.word	0x08006ca1
 8006c70:	08006ca1 	.word	0x08006ca1
 8006c74:	08006c8f 	.word	0x08006c8f
 8006c78:	08006ca1 	.word	0x08006ca1
 8006c7c:	08006ca1 	.word	0x08006ca1
 8006c80:	08006ca1 	.word	0x08006ca1
 8006c84:	08006c9b 	.word	0x08006c9b
 8006c88:	2300      	movs	r3, #0
 8006c8a:	77fb      	strb	r3, [r7, #31]
 8006c8c:	e117      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006c8e:	2302      	movs	r3, #2
 8006c90:	77fb      	strb	r3, [r7, #31]
 8006c92:	e114      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006c94:	2304      	movs	r3, #4
 8006c96:	77fb      	strb	r3, [r7, #31]
 8006c98:	e111      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006c9a:	2308      	movs	r3, #8
 8006c9c:	77fb      	strb	r3, [r7, #31]
 8006c9e:	e10e      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006ca0:	2310      	movs	r3, #16
 8006ca2:	77fb      	strb	r3, [r7, #31]
 8006ca4:	bf00      	nop
 8006ca6:	e10a      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a71      	ldr	r2, [pc, #452]	; (8006e74 <UART_SetConfig+0x304>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d120      	bne.n	8006cf4 <UART_SetConfig+0x184>
 8006cb2:	4b6e      	ldr	r3, [pc, #440]	; (8006e6c <UART_SetConfig+0x2fc>)
 8006cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cb8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006cbc:	2b10      	cmp	r3, #16
 8006cbe:	d00f      	beq.n	8006ce0 <UART_SetConfig+0x170>
 8006cc0:	2b10      	cmp	r3, #16
 8006cc2:	d802      	bhi.n	8006cca <UART_SetConfig+0x15a>
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d005      	beq.n	8006cd4 <UART_SetConfig+0x164>
 8006cc8:	e010      	b.n	8006cec <UART_SetConfig+0x17c>
 8006cca:	2b20      	cmp	r3, #32
 8006ccc:	d005      	beq.n	8006cda <UART_SetConfig+0x16a>
 8006cce:	2b30      	cmp	r3, #48	; 0x30
 8006cd0:	d009      	beq.n	8006ce6 <UART_SetConfig+0x176>
 8006cd2:	e00b      	b.n	8006cec <UART_SetConfig+0x17c>
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	77fb      	strb	r3, [r7, #31]
 8006cd8:	e0f1      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006cda:	2302      	movs	r3, #2
 8006cdc:	77fb      	strb	r3, [r7, #31]
 8006cde:	e0ee      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006ce0:	2304      	movs	r3, #4
 8006ce2:	77fb      	strb	r3, [r7, #31]
 8006ce4:	e0eb      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006ce6:	2308      	movs	r3, #8
 8006ce8:	77fb      	strb	r3, [r7, #31]
 8006cea:	e0e8      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006cec:	2310      	movs	r3, #16
 8006cee:	77fb      	strb	r3, [r7, #31]
 8006cf0:	bf00      	nop
 8006cf2:	e0e4      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a5f      	ldr	r2, [pc, #380]	; (8006e78 <UART_SetConfig+0x308>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d120      	bne.n	8006d40 <UART_SetConfig+0x1d0>
 8006cfe:	4b5b      	ldr	r3, [pc, #364]	; (8006e6c <UART_SetConfig+0x2fc>)
 8006d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d04:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d08:	2b40      	cmp	r3, #64	; 0x40
 8006d0a:	d00f      	beq.n	8006d2c <UART_SetConfig+0x1bc>
 8006d0c:	2b40      	cmp	r3, #64	; 0x40
 8006d0e:	d802      	bhi.n	8006d16 <UART_SetConfig+0x1a6>
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d005      	beq.n	8006d20 <UART_SetConfig+0x1b0>
 8006d14:	e010      	b.n	8006d38 <UART_SetConfig+0x1c8>
 8006d16:	2b80      	cmp	r3, #128	; 0x80
 8006d18:	d005      	beq.n	8006d26 <UART_SetConfig+0x1b6>
 8006d1a:	2bc0      	cmp	r3, #192	; 0xc0
 8006d1c:	d009      	beq.n	8006d32 <UART_SetConfig+0x1c2>
 8006d1e:	e00b      	b.n	8006d38 <UART_SetConfig+0x1c8>
 8006d20:	2300      	movs	r3, #0
 8006d22:	77fb      	strb	r3, [r7, #31]
 8006d24:	e0cb      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006d26:	2302      	movs	r3, #2
 8006d28:	77fb      	strb	r3, [r7, #31]
 8006d2a:	e0c8      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006d2c:	2304      	movs	r3, #4
 8006d2e:	77fb      	strb	r3, [r7, #31]
 8006d30:	e0c5      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006d32:	2308      	movs	r3, #8
 8006d34:	77fb      	strb	r3, [r7, #31]
 8006d36:	e0c2      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006d38:	2310      	movs	r3, #16
 8006d3a:	77fb      	strb	r3, [r7, #31]
 8006d3c:	bf00      	nop
 8006d3e:	e0be      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a4d      	ldr	r2, [pc, #308]	; (8006e7c <UART_SetConfig+0x30c>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d124      	bne.n	8006d94 <UART_SetConfig+0x224>
 8006d4a:	4b48      	ldr	r3, [pc, #288]	; (8006e6c <UART_SetConfig+0x2fc>)
 8006d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d58:	d012      	beq.n	8006d80 <UART_SetConfig+0x210>
 8006d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d5e:	d802      	bhi.n	8006d66 <UART_SetConfig+0x1f6>
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d007      	beq.n	8006d74 <UART_SetConfig+0x204>
 8006d64:	e012      	b.n	8006d8c <UART_SetConfig+0x21c>
 8006d66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d6a:	d006      	beq.n	8006d7a <UART_SetConfig+0x20a>
 8006d6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d70:	d009      	beq.n	8006d86 <UART_SetConfig+0x216>
 8006d72:	e00b      	b.n	8006d8c <UART_SetConfig+0x21c>
 8006d74:	2300      	movs	r3, #0
 8006d76:	77fb      	strb	r3, [r7, #31]
 8006d78:	e0a1      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	77fb      	strb	r3, [r7, #31]
 8006d7e:	e09e      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006d80:	2304      	movs	r3, #4
 8006d82:	77fb      	strb	r3, [r7, #31]
 8006d84:	e09b      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006d86:	2308      	movs	r3, #8
 8006d88:	77fb      	strb	r3, [r7, #31]
 8006d8a:	e098      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006d8c:	2310      	movs	r3, #16
 8006d8e:	77fb      	strb	r3, [r7, #31]
 8006d90:	bf00      	nop
 8006d92:	e094      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a39      	ldr	r2, [pc, #228]	; (8006e80 <UART_SetConfig+0x310>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d124      	bne.n	8006de8 <UART_SetConfig+0x278>
 8006d9e:	4b33      	ldr	r3, [pc, #204]	; (8006e6c <UART_SetConfig+0x2fc>)
 8006da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dac:	d012      	beq.n	8006dd4 <UART_SetConfig+0x264>
 8006dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006db2:	d802      	bhi.n	8006dba <UART_SetConfig+0x24a>
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d007      	beq.n	8006dc8 <UART_SetConfig+0x258>
 8006db8:	e012      	b.n	8006de0 <UART_SetConfig+0x270>
 8006dba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dbe:	d006      	beq.n	8006dce <UART_SetConfig+0x25e>
 8006dc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dc4:	d009      	beq.n	8006dda <UART_SetConfig+0x26a>
 8006dc6:	e00b      	b.n	8006de0 <UART_SetConfig+0x270>
 8006dc8:	2301      	movs	r3, #1
 8006dca:	77fb      	strb	r3, [r7, #31]
 8006dcc:	e077      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006dce:	2302      	movs	r3, #2
 8006dd0:	77fb      	strb	r3, [r7, #31]
 8006dd2:	e074      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006dd4:	2304      	movs	r3, #4
 8006dd6:	77fb      	strb	r3, [r7, #31]
 8006dd8:	e071      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006dda:	2308      	movs	r3, #8
 8006ddc:	77fb      	strb	r3, [r7, #31]
 8006dde:	e06e      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006de0:	2310      	movs	r3, #16
 8006de2:	77fb      	strb	r3, [r7, #31]
 8006de4:	bf00      	nop
 8006de6:	e06a      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a25      	ldr	r2, [pc, #148]	; (8006e84 <UART_SetConfig+0x314>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d124      	bne.n	8006e3c <UART_SetConfig+0x2cc>
 8006df2:	4b1e      	ldr	r3, [pc, #120]	; (8006e6c <UART_SetConfig+0x2fc>)
 8006df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006df8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e00:	d012      	beq.n	8006e28 <UART_SetConfig+0x2b8>
 8006e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e06:	d802      	bhi.n	8006e0e <UART_SetConfig+0x29e>
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d007      	beq.n	8006e1c <UART_SetConfig+0x2ac>
 8006e0c:	e012      	b.n	8006e34 <UART_SetConfig+0x2c4>
 8006e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e12:	d006      	beq.n	8006e22 <UART_SetConfig+0x2b2>
 8006e14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e18:	d009      	beq.n	8006e2e <UART_SetConfig+0x2be>
 8006e1a:	e00b      	b.n	8006e34 <UART_SetConfig+0x2c4>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	77fb      	strb	r3, [r7, #31]
 8006e20:	e04d      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006e22:	2302      	movs	r3, #2
 8006e24:	77fb      	strb	r3, [r7, #31]
 8006e26:	e04a      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006e28:	2304      	movs	r3, #4
 8006e2a:	77fb      	strb	r3, [r7, #31]
 8006e2c:	e047      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006e2e:	2308      	movs	r3, #8
 8006e30:	77fb      	strb	r3, [r7, #31]
 8006e32:	e044      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006e34:	2310      	movs	r3, #16
 8006e36:	77fb      	strb	r3, [r7, #31]
 8006e38:	bf00      	nop
 8006e3a:	e040      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a11      	ldr	r2, [pc, #68]	; (8006e88 <UART_SetConfig+0x318>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d139      	bne.n	8006eba <UART_SetConfig+0x34a>
 8006e46:	4b09      	ldr	r3, [pc, #36]	; (8006e6c <UART_SetConfig+0x2fc>)
 8006e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006e50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e54:	d027      	beq.n	8006ea6 <UART_SetConfig+0x336>
 8006e56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e5a:	d817      	bhi.n	8006e8c <UART_SetConfig+0x31c>
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d01c      	beq.n	8006e9a <UART_SetConfig+0x32a>
 8006e60:	e027      	b.n	8006eb2 <UART_SetConfig+0x342>
 8006e62:	bf00      	nop
 8006e64:	efff69f3 	.word	0xefff69f3
 8006e68:	40011000 	.word	0x40011000
 8006e6c:	40023800 	.word	0x40023800
 8006e70:	40004400 	.word	0x40004400
 8006e74:	40004800 	.word	0x40004800
 8006e78:	40004c00 	.word	0x40004c00
 8006e7c:	40005000 	.word	0x40005000
 8006e80:	40011400 	.word	0x40011400
 8006e84:	40007800 	.word	0x40007800
 8006e88:	40007c00 	.word	0x40007c00
 8006e8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e90:	d006      	beq.n	8006ea0 <UART_SetConfig+0x330>
 8006e92:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006e96:	d009      	beq.n	8006eac <UART_SetConfig+0x33c>
 8006e98:	e00b      	b.n	8006eb2 <UART_SetConfig+0x342>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	77fb      	strb	r3, [r7, #31]
 8006e9e:	e00e      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	77fb      	strb	r3, [r7, #31]
 8006ea4:	e00b      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006ea6:	2304      	movs	r3, #4
 8006ea8:	77fb      	strb	r3, [r7, #31]
 8006eaa:	e008      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006eac:	2308      	movs	r3, #8
 8006eae:	77fb      	strb	r3, [r7, #31]
 8006eb0:	e005      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006eb2:	2310      	movs	r3, #16
 8006eb4:	77fb      	strb	r3, [r7, #31]
 8006eb6:	bf00      	nop
 8006eb8:	e001      	b.n	8006ebe <UART_SetConfig+0x34e>
 8006eba:	2310      	movs	r3, #16
 8006ebc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	69db      	ldr	r3, [r3, #28]
 8006ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ec6:	d17f      	bne.n	8006fc8 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8006ec8:	7ffb      	ldrb	r3, [r7, #31]
 8006eca:	2b08      	cmp	r3, #8
 8006ecc:	d85c      	bhi.n	8006f88 <UART_SetConfig+0x418>
 8006ece:	a201      	add	r2, pc, #4	; (adr r2, 8006ed4 <UART_SetConfig+0x364>)
 8006ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed4:	08006ef9 	.word	0x08006ef9
 8006ed8:	08006f19 	.word	0x08006f19
 8006edc:	08006f39 	.word	0x08006f39
 8006ee0:	08006f89 	.word	0x08006f89
 8006ee4:	08006f51 	.word	0x08006f51
 8006ee8:	08006f89 	.word	0x08006f89
 8006eec:	08006f89 	.word	0x08006f89
 8006ef0:	08006f89 	.word	0x08006f89
 8006ef4:	08006f71 	.word	0x08006f71
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ef8:	f7fe fc9a 	bl	8005830 <HAL_RCC_GetPCLK1Freq>
 8006efc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	005a      	lsls	r2, r3, #1
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	085b      	lsrs	r3, r3, #1
 8006f08:	441a      	add	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	61bb      	str	r3, [r7, #24]
        break;
 8006f16:	e03a      	b.n	8006f8e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f18:	f7fe fc9e 	bl	8005858 <HAL_RCC_GetPCLK2Freq>
 8006f1c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	005a      	lsls	r2, r3, #1
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	085b      	lsrs	r3, r3, #1
 8006f28:	441a      	add	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	61bb      	str	r3, [r7, #24]
        break;
 8006f36:	e02a      	b.n	8006f8e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	085a      	lsrs	r2, r3, #1
 8006f3e:	4b5f      	ldr	r3, [pc, #380]	; (80070bc <UART_SetConfig+0x54c>)
 8006f40:	4413      	add	r3, r2
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	6852      	ldr	r2, [r2, #4]
 8006f46:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	61bb      	str	r3, [r7, #24]
        break;
 8006f4e:	e01e      	b.n	8006f8e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f50:	f7fe fb8a 	bl	8005668 <HAL_RCC_GetSysClockFreq>
 8006f54:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	005a      	lsls	r2, r3, #1
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	085b      	lsrs	r3, r3, #1
 8006f60:	441a      	add	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	61bb      	str	r3, [r7, #24]
        break;
 8006f6e:	e00e      	b.n	8006f8e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	085b      	lsrs	r3, r3, #1
 8006f76:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	61bb      	str	r3, [r7, #24]
        break;
 8006f86:	e002      	b.n	8006f8e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	75fb      	strb	r3, [r7, #23]
        break;
 8006f8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	2b0f      	cmp	r3, #15
 8006f92:	d916      	bls.n	8006fc2 <UART_SetConfig+0x452>
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f9a:	d212      	bcs.n	8006fc2 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	f023 030f 	bic.w	r3, r3, #15
 8006fa4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	085b      	lsrs	r3, r3, #1
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	f003 0307 	and.w	r3, r3, #7
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	897b      	ldrh	r3, [r7, #10]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	897a      	ldrh	r2, [r7, #10]
 8006fbe:	60da      	str	r2, [r3, #12]
 8006fc0:	e070      	b.n	80070a4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	75fb      	strb	r3, [r7, #23]
 8006fc6:	e06d      	b.n	80070a4 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8006fc8:	7ffb      	ldrb	r3, [r7, #31]
 8006fca:	2b08      	cmp	r3, #8
 8006fcc:	d859      	bhi.n	8007082 <UART_SetConfig+0x512>
 8006fce:	a201      	add	r2, pc, #4	; (adr r2, 8006fd4 <UART_SetConfig+0x464>)
 8006fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd4:	08006ff9 	.word	0x08006ff9
 8006fd8:	08007017 	.word	0x08007017
 8006fdc:	08007035 	.word	0x08007035
 8006fe0:	08007083 	.word	0x08007083
 8006fe4:	0800704d 	.word	0x0800704d
 8006fe8:	08007083 	.word	0x08007083
 8006fec:	08007083 	.word	0x08007083
 8006ff0:	08007083 	.word	0x08007083
 8006ff4:	0800706b 	.word	0x0800706b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ff8:	f7fe fc1a 	bl	8005830 <HAL_RCC_GetPCLK1Freq>
 8006ffc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	085a      	lsrs	r2, r3, #1
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	441a      	add	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007010:	b29b      	uxth	r3, r3
 8007012:	61bb      	str	r3, [r7, #24]
        break;
 8007014:	e038      	b.n	8007088 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007016:	f7fe fc1f 	bl	8005858 <HAL_RCC_GetPCLK2Freq>
 800701a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	085a      	lsrs	r2, r3, #1
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	441a      	add	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	fbb2 f3f3 	udiv	r3, r2, r3
 800702e:	b29b      	uxth	r3, r3
 8007030:	61bb      	str	r3, [r7, #24]
        break;
 8007032:	e029      	b.n	8007088 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	085a      	lsrs	r2, r3, #1
 800703a:	4b21      	ldr	r3, [pc, #132]	; (80070c0 <UART_SetConfig+0x550>)
 800703c:	4413      	add	r3, r2
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	6852      	ldr	r2, [r2, #4]
 8007042:	fbb3 f3f2 	udiv	r3, r3, r2
 8007046:	b29b      	uxth	r3, r3
 8007048:	61bb      	str	r3, [r7, #24]
        break;
 800704a:	e01d      	b.n	8007088 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800704c:	f7fe fb0c 	bl	8005668 <HAL_RCC_GetSysClockFreq>
 8007050:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	085a      	lsrs	r2, r3, #1
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	441a      	add	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	fbb2 f3f3 	udiv	r3, r2, r3
 8007064:	b29b      	uxth	r3, r3
 8007066:	61bb      	str	r3, [r7, #24]
        break;
 8007068:	e00e      	b.n	8007088 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	085b      	lsrs	r3, r3, #1
 8007070:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	fbb2 f3f3 	udiv	r3, r2, r3
 800707c:	b29b      	uxth	r3, r3
 800707e:	61bb      	str	r3, [r7, #24]
        break;
 8007080:	e002      	b.n	8007088 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	75fb      	strb	r3, [r7, #23]
        break;
 8007086:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	2b0f      	cmp	r3, #15
 800708c:	d908      	bls.n	80070a0 <UART_SetConfig+0x530>
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007094:	d204      	bcs.n	80070a0 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	69ba      	ldr	r2, [r7, #24]
 800709c:	60da      	str	r2, [r3, #12]
 800709e:	e001      	b.n	80070a4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80070b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3720      	adds	r7, #32
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	01e84800 	.word	0x01e84800
 80070c0:	00f42400 	.word	0x00f42400

080070c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d0:	f003 0301 	and.w	r3, r3, #1
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00a      	beq.n	80070ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	430a      	orrs	r2, r1
 80070ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f2:	f003 0302 	and.w	r3, r3, #2
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00a      	beq.n	8007110 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	430a      	orrs	r2, r1
 800710e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007114:	f003 0304 	and.w	r3, r3, #4
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00a      	beq.n	8007132 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	430a      	orrs	r2, r1
 8007130:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007136:	f003 0308 	and.w	r3, r3, #8
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00a      	beq.n	8007154 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	430a      	orrs	r2, r1
 8007152:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007158:	f003 0310 	and.w	r3, r3, #16
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00a      	beq.n	8007176 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	430a      	orrs	r2, r1
 8007174:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717a:	f003 0320 	and.w	r3, r3, #32
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00a      	beq.n	8007198 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	430a      	orrs	r2, r1
 8007196:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d01a      	beq.n	80071da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	430a      	orrs	r2, r1
 80071b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071c2:	d10a      	bne.n	80071da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	430a      	orrs	r2, r1
 80071d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00a      	beq.n	80071fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	430a      	orrs	r2, r1
 80071fa:	605a      	str	r2, [r3, #4]
  }
}
 80071fc:	bf00      	nop
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af02      	add	r7, sp, #8
 800720e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007216:	f7fa fc45 	bl	8001aa4 <HAL_GetTick>
 800721a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0308 	and.w	r3, r3, #8
 8007226:	2b08      	cmp	r3, #8
 8007228:	d10e      	bne.n	8007248 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800722a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f814 	bl	8007266 <UART_WaitOnFlagUntilTimeout>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d001      	beq.n	8007248 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	e00a      	b.n	800725e <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2220      	movs	r2, #32
 800724c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2220      	movs	r2, #32
 8007252:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b084      	sub	sp, #16
 800726a:	af00      	add	r7, sp, #0
 800726c:	60f8      	str	r0, [r7, #12]
 800726e:	60b9      	str	r1, [r7, #8]
 8007270:	603b      	str	r3, [r7, #0]
 8007272:	4613      	mov	r3, r2
 8007274:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007276:	e05d      	b.n	8007334 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800727e:	d059      	beq.n	8007334 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007280:	f7fa fc10 	bl	8001aa4 <HAL_GetTick>
 8007284:	4602      	mov	r2, r0
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	69ba      	ldr	r2, [r7, #24]
 800728c:	429a      	cmp	r2, r3
 800728e:	d302      	bcc.n	8007296 <UART_WaitOnFlagUntilTimeout+0x30>
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d11b      	bne.n	80072ce <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80072a4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	689a      	ldr	r2, [r3, #8]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f022 0201 	bic.w	r2, r2, #1
 80072b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2220      	movs	r2, #32
 80072ba:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2220      	movs	r2, #32
 80072c0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e042      	b.n	8007354 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0304 	and.w	r3, r3, #4
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d02b      	beq.n	8007334 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	69db      	ldr	r3, [r3, #28]
 80072e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072ea:	d123      	bne.n	8007334 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072f4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007304:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	689a      	ldr	r2, [r3, #8]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f022 0201 	bic.w	r2, r2, #1
 8007314:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2220      	movs	r2, #32
 800731a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2220      	movs	r2, #32
 8007320:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2220      	movs	r2, #32
 8007326:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007330:	2303      	movs	r3, #3
 8007332:	e00f      	b.n	8007354 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	69da      	ldr	r2, [r3, #28]
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	4013      	ands	r3, r2
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	429a      	cmp	r2, r3
 8007342:	bf0c      	ite	eq
 8007344:	2301      	moveq	r3, #1
 8007346:	2300      	movne	r3, #0
 8007348:	b2db      	uxtb	r3, r3
 800734a:	461a      	mov	r2, r3
 800734c:	79fb      	ldrb	r3, [r7, #7]
 800734e:	429a      	cmp	r2, r3
 8007350:	d092      	beq.n	8007278 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <__errno>:
 800735c:	4b01      	ldr	r3, [pc, #4]	; (8007364 <__errno+0x8>)
 800735e:	6818      	ldr	r0, [r3, #0]
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	2000000c 	.word	0x2000000c

08007368 <__libc_init_array>:
 8007368:	b570      	push	{r4, r5, r6, lr}
 800736a:	4e0d      	ldr	r6, [pc, #52]	; (80073a0 <__libc_init_array+0x38>)
 800736c:	4c0d      	ldr	r4, [pc, #52]	; (80073a4 <__libc_init_array+0x3c>)
 800736e:	1ba4      	subs	r4, r4, r6
 8007370:	10a4      	asrs	r4, r4, #2
 8007372:	2500      	movs	r5, #0
 8007374:	42a5      	cmp	r5, r4
 8007376:	d109      	bne.n	800738c <__libc_init_array+0x24>
 8007378:	4e0b      	ldr	r6, [pc, #44]	; (80073a8 <__libc_init_array+0x40>)
 800737a:	4c0c      	ldr	r4, [pc, #48]	; (80073ac <__libc_init_array+0x44>)
 800737c:	f000 f894 	bl	80074a8 <_init>
 8007380:	1ba4      	subs	r4, r4, r6
 8007382:	10a4      	asrs	r4, r4, #2
 8007384:	2500      	movs	r5, #0
 8007386:	42a5      	cmp	r5, r4
 8007388:	d105      	bne.n	8007396 <__libc_init_array+0x2e>
 800738a:	bd70      	pop	{r4, r5, r6, pc}
 800738c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007390:	4798      	blx	r3
 8007392:	3501      	adds	r5, #1
 8007394:	e7ee      	b.n	8007374 <__libc_init_array+0xc>
 8007396:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800739a:	4798      	blx	r3
 800739c:	3501      	adds	r5, #1
 800739e:	e7f2      	b.n	8007386 <__libc_init_array+0x1e>
 80073a0:	080074e8 	.word	0x080074e8
 80073a4:	080074e8 	.word	0x080074e8
 80073a8:	080074e8 	.word	0x080074e8
 80073ac:	080074ec 	.word	0x080074ec

080073b0 <malloc>:
 80073b0:	4b02      	ldr	r3, [pc, #8]	; (80073bc <malloc+0xc>)
 80073b2:	4601      	mov	r1, r0
 80073b4:	6818      	ldr	r0, [r3, #0]
 80073b6:	f000 b80b 	b.w	80073d0 <_malloc_r>
 80073ba:	bf00      	nop
 80073bc:	2000000c 	.word	0x2000000c

080073c0 <memset>:
 80073c0:	4402      	add	r2, r0
 80073c2:	4603      	mov	r3, r0
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d100      	bne.n	80073ca <memset+0xa>
 80073c8:	4770      	bx	lr
 80073ca:	f803 1b01 	strb.w	r1, [r3], #1
 80073ce:	e7f9      	b.n	80073c4 <memset+0x4>

080073d0 <_malloc_r>:
 80073d0:	b570      	push	{r4, r5, r6, lr}
 80073d2:	1ccd      	adds	r5, r1, #3
 80073d4:	f025 0503 	bic.w	r5, r5, #3
 80073d8:	3508      	adds	r5, #8
 80073da:	2d0c      	cmp	r5, #12
 80073dc:	bf38      	it	cc
 80073de:	250c      	movcc	r5, #12
 80073e0:	2d00      	cmp	r5, #0
 80073e2:	4606      	mov	r6, r0
 80073e4:	db01      	blt.n	80073ea <_malloc_r+0x1a>
 80073e6:	42a9      	cmp	r1, r5
 80073e8:	d903      	bls.n	80073f2 <_malloc_r+0x22>
 80073ea:	230c      	movs	r3, #12
 80073ec:	6033      	str	r3, [r6, #0]
 80073ee:	2000      	movs	r0, #0
 80073f0:	bd70      	pop	{r4, r5, r6, pc}
 80073f2:	f000 f857 	bl	80074a4 <__malloc_lock>
 80073f6:	4a21      	ldr	r2, [pc, #132]	; (800747c <_malloc_r+0xac>)
 80073f8:	6814      	ldr	r4, [r2, #0]
 80073fa:	4621      	mov	r1, r4
 80073fc:	b991      	cbnz	r1, 8007424 <_malloc_r+0x54>
 80073fe:	4c20      	ldr	r4, [pc, #128]	; (8007480 <_malloc_r+0xb0>)
 8007400:	6823      	ldr	r3, [r4, #0]
 8007402:	b91b      	cbnz	r3, 800740c <_malloc_r+0x3c>
 8007404:	4630      	mov	r0, r6
 8007406:	f000 f83d 	bl	8007484 <_sbrk_r>
 800740a:	6020      	str	r0, [r4, #0]
 800740c:	4629      	mov	r1, r5
 800740e:	4630      	mov	r0, r6
 8007410:	f000 f838 	bl	8007484 <_sbrk_r>
 8007414:	1c43      	adds	r3, r0, #1
 8007416:	d124      	bne.n	8007462 <_malloc_r+0x92>
 8007418:	230c      	movs	r3, #12
 800741a:	6033      	str	r3, [r6, #0]
 800741c:	4630      	mov	r0, r6
 800741e:	f000 f842 	bl	80074a6 <__malloc_unlock>
 8007422:	e7e4      	b.n	80073ee <_malloc_r+0x1e>
 8007424:	680b      	ldr	r3, [r1, #0]
 8007426:	1b5b      	subs	r3, r3, r5
 8007428:	d418      	bmi.n	800745c <_malloc_r+0x8c>
 800742a:	2b0b      	cmp	r3, #11
 800742c:	d90f      	bls.n	800744e <_malloc_r+0x7e>
 800742e:	600b      	str	r3, [r1, #0]
 8007430:	50cd      	str	r5, [r1, r3]
 8007432:	18cc      	adds	r4, r1, r3
 8007434:	4630      	mov	r0, r6
 8007436:	f000 f836 	bl	80074a6 <__malloc_unlock>
 800743a:	f104 000b 	add.w	r0, r4, #11
 800743e:	1d23      	adds	r3, r4, #4
 8007440:	f020 0007 	bic.w	r0, r0, #7
 8007444:	1ac3      	subs	r3, r0, r3
 8007446:	d0d3      	beq.n	80073f0 <_malloc_r+0x20>
 8007448:	425a      	negs	r2, r3
 800744a:	50e2      	str	r2, [r4, r3]
 800744c:	e7d0      	b.n	80073f0 <_malloc_r+0x20>
 800744e:	428c      	cmp	r4, r1
 8007450:	684b      	ldr	r3, [r1, #4]
 8007452:	bf16      	itet	ne
 8007454:	6063      	strne	r3, [r4, #4]
 8007456:	6013      	streq	r3, [r2, #0]
 8007458:	460c      	movne	r4, r1
 800745a:	e7eb      	b.n	8007434 <_malloc_r+0x64>
 800745c:	460c      	mov	r4, r1
 800745e:	6849      	ldr	r1, [r1, #4]
 8007460:	e7cc      	b.n	80073fc <_malloc_r+0x2c>
 8007462:	1cc4      	adds	r4, r0, #3
 8007464:	f024 0403 	bic.w	r4, r4, #3
 8007468:	42a0      	cmp	r0, r4
 800746a:	d005      	beq.n	8007478 <_malloc_r+0xa8>
 800746c:	1a21      	subs	r1, r4, r0
 800746e:	4630      	mov	r0, r6
 8007470:	f000 f808 	bl	8007484 <_sbrk_r>
 8007474:	3001      	adds	r0, #1
 8007476:	d0cf      	beq.n	8007418 <_malloc_r+0x48>
 8007478:	6025      	str	r5, [r4, #0]
 800747a:	e7db      	b.n	8007434 <_malloc_r+0x64>
 800747c:	200000a0 	.word	0x200000a0
 8007480:	200000a4 	.word	0x200000a4

08007484 <_sbrk_r>:
 8007484:	b538      	push	{r3, r4, r5, lr}
 8007486:	4c06      	ldr	r4, [pc, #24]	; (80074a0 <_sbrk_r+0x1c>)
 8007488:	2300      	movs	r3, #0
 800748a:	4605      	mov	r5, r0
 800748c:	4608      	mov	r0, r1
 800748e:	6023      	str	r3, [r4, #0]
 8007490:	f7fa fa42 	bl	8001918 <_sbrk>
 8007494:	1c43      	adds	r3, r0, #1
 8007496:	d102      	bne.n	800749e <_sbrk_r+0x1a>
 8007498:	6823      	ldr	r3, [r4, #0]
 800749a:	b103      	cbz	r3, 800749e <_sbrk_r+0x1a>
 800749c:	602b      	str	r3, [r5, #0]
 800749e:	bd38      	pop	{r3, r4, r5, pc}
 80074a0:	200003ec 	.word	0x200003ec

080074a4 <__malloc_lock>:
 80074a4:	4770      	bx	lr

080074a6 <__malloc_unlock>:
 80074a6:	4770      	bx	lr

080074a8 <_init>:
 80074a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074aa:	bf00      	nop
 80074ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ae:	bc08      	pop	{r3}
 80074b0:	469e      	mov	lr, r3
 80074b2:	4770      	bx	lr

080074b4 <_fini>:
 80074b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074b6:	bf00      	nop
 80074b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ba:	bc08      	pop	{r3}
 80074bc:	469e      	mov	lr, r3
 80074be:	4770      	bx	lr
