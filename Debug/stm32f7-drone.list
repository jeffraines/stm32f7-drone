
stm32f7-drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007814  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080079f4  080079f4  000179f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a60  08007a60  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007a60  08007a60  00017a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a68  08007a68  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a68  08007a68  00017a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a6c  08007a6c  00017a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  20000070  08007ae0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  08007ae0  000203a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014074  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029ef  00000000  00000000  00034114  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001220  00000000  00000000  00036b08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010b8  00000000  00000000  00037d28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024a7f  00000000  00000000  00038de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f286  00000000  00000000  0005d85f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e1aed  00000000  00000000  0006cae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014e5d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004edc  00000000  00000000  0014e650  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	080079dc 	.word	0x080079dc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	080079dc 	.word	0x080079dc

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b972 	b.w	80005cc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	4688      	mov	r8, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14b      	bne.n	80003a6 <__udivmoddi4+0xa6>
 800030e:	428a      	cmp	r2, r1
 8000310:	4615      	mov	r5, r2
 8000312:	d967      	bls.n	80003e4 <__udivmoddi4+0xe4>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0720 	rsb	r7, r2, #32
 800031e:	fa01 f302 	lsl.w	r3, r1, r2
 8000322:	fa20 f707 	lsr.w	r7, r0, r7
 8000326:	4095      	lsls	r5, r2
 8000328:	ea47 0803 	orr.w	r8, r7, r3
 800032c:	4094      	lsls	r4, r2
 800032e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fbb8 f7fe 	udiv	r7, r8, lr
 8000338:	fa1f fc85 	uxth.w	ip, r5
 800033c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000340:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000344:	fb07 f10c 	mul.w	r1, r7, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x60>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000352:	f080 811b 	bcs.w	800058c <__udivmoddi4+0x28c>
 8000356:	4299      	cmp	r1, r3
 8000358:	f240 8118 	bls.w	800058c <__udivmoddi4+0x28c>
 800035c:	3f02      	subs	r7, #2
 800035e:	442b      	add	r3, r5
 8000360:	1a5b      	subs	r3, r3, r1
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb3 f0fe 	udiv	r0, r3, lr
 8000368:	fb0e 3310 	mls	r3, lr, r0, r3
 800036c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000370:	fb00 fc0c 	mul.w	ip, r0, ip
 8000374:	45a4      	cmp	ip, r4
 8000376:	d909      	bls.n	800038c <__udivmoddi4+0x8c>
 8000378:	192c      	adds	r4, r5, r4
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295
 800037e:	f080 8107 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000382:	45a4      	cmp	ip, r4
 8000384:	f240 8104 	bls.w	8000590 <__udivmoddi4+0x290>
 8000388:	3802      	subs	r0, #2
 800038a:	442c      	add	r4, r5
 800038c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	2700      	movs	r7, #0
 8000396:	b11e      	cbz	r6, 80003a0 <__udivmoddi4+0xa0>
 8000398:	40d4      	lsrs	r4, r2
 800039a:	2300      	movs	r3, #0
 800039c:	e9c6 4300 	strd	r4, r3, [r6]
 80003a0:	4639      	mov	r1, r7
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d909      	bls.n	80003be <__udivmoddi4+0xbe>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80eb 	beq.w	8000586 <__udivmoddi4+0x286>
 80003b0:	2700      	movs	r7, #0
 80003b2:	e9c6 0100 	strd	r0, r1, [r6]
 80003b6:	4638      	mov	r0, r7
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	fab3 f783 	clz	r7, r3
 80003c2:	2f00      	cmp	r7, #0
 80003c4:	d147      	bne.n	8000456 <__udivmoddi4+0x156>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xd0>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 80fa 	bhi.w	80005c4 <__udivmoddi4+0x2c4>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb61 0303 	sbc.w	r3, r1, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4698      	mov	r8, r3
 80003da:	2e00      	cmp	r6, #0
 80003dc:	d0e0      	beq.n	80003a0 <__udivmoddi4+0xa0>
 80003de:	e9c6 4800 	strd	r4, r8, [r6]
 80003e2:	e7dd      	b.n	80003a0 <__udivmoddi4+0xa0>
 80003e4:	b902      	cbnz	r2, 80003e8 <__udivmoddi4+0xe8>
 80003e6:	deff      	udf	#255	; 0xff
 80003e8:	fab2 f282 	clz	r2, r2
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f040 808f 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f2:	1b49      	subs	r1, r1, r5
 80003f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f8:	fa1f f885 	uxth.w	r8, r5
 80003fc:	2701      	movs	r7, #1
 80003fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000402:	0c23      	lsrs	r3, r4, #16
 8000404:	fb0e 111c 	mls	r1, lr, ip, r1
 8000408:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800040c:	fb08 f10c 	mul.w	r1, r8, ip
 8000410:	4299      	cmp	r1, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x124>
 8000414:	18eb      	adds	r3, r5, r3
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4299      	cmp	r1, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2bc>
 8000422:	4684      	mov	ip, r0
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000430:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x14c>
 800043c:	192c      	adds	r4, r5, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x14a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80b6 	bhi.w	80005b6 <__udivmoddi4+0x2b6>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e79f      	b.n	8000396 <__udivmoddi4+0x96>
 8000456:	f1c7 0c20 	rsb	ip, r7, #32
 800045a:	40bb      	lsls	r3, r7
 800045c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000460:	ea4e 0e03 	orr.w	lr, lr, r3
 8000464:	fa01 f407 	lsl.w	r4, r1, r7
 8000468:	fa20 f50c 	lsr.w	r5, r0, ip
 800046c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000470:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000474:	4325      	orrs	r5, r4
 8000476:	fbb3 f9f8 	udiv	r9, r3, r8
 800047a:	0c2c      	lsrs	r4, r5, #16
 800047c:	fb08 3319 	mls	r3, r8, r9, r3
 8000480:	fa1f fa8e 	uxth.w	sl, lr
 8000484:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000488:	fb09 f40a 	mul.w	r4, r9, sl
 800048c:	429c      	cmp	r4, r3
 800048e:	fa02 f207 	lsl.w	r2, r2, r7
 8000492:	fa00 f107 	lsl.w	r1, r0, r7
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1e 0303 	adds.w	r3, lr, r3
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a0:	f080 8087 	bcs.w	80005b2 <__udivmoddi4+0x2b2>
 80004a4:	429c      	cmp	r4, r3
 80004a6:	f240 8084 	bls.w	80005b2 <__udivmoddi4+0x2b2>
 80004aa:	f1a9 0902 	sub.w	r9, r9, #2
 80004ae:	4473      	add	r3, lr
 80004b0:	1b1b      	subs	r3, r3, r4
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004b8:	fb08 3310 	mls	r3, r8, r0, r3
 80004bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004c4:	45a2      	cmp	sl, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1e 0404 	adds.w	r4, lr, r4
 80004cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d0:	d26b      	bcs.n	80005aa <__udivmoddi4+0x2aa>
 80004d2:	45a2      	cmp	sl, r4
 80004d4:	d969      	bls.n	80005aa <__udivmoddi4+0x2aa>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4474      	add	r4, lr
 80004da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004de:	fba0 8902 	umull	r8, r9, r0, r2
 80004e2:	eba4 040a 	sub.w	r4, r4, sl
 80004e6:	454c      	cmp	r4, r9
 80004e8:	46c2      	mov	sl, r8
 80004ea:	464b      	mov	r3, r9
 80004ec:	d354      	bcc.n	8000598 <__udivmoddi4+0x298>
 80004ee:	d051      	beq.n	8000594 <__udivmoddi4+0x294>
 80004f0:	2e00      	cmp	r6, #0
 80004f2:	d069      	beq.n	80005c8 <__udivmoddi4+0x2c8>
 80004f4:	ebb1 050a 	subs.w	r5, r1, sl
 80004f8:	eb64 0403 	sbc.w	r4, r4, r3
 80004fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000500:	40fd      	lsrs	r5, r7
 8000502:	40fc      	lsrs	r4, r7
 8000504:	ea4c 0505 	orr.w	r5, ip, r5
 8000508:	e9c6 5400 	strd	r5, r4, [r6]
 800050c:	2700      	movs	r7, #0
 800050e:	e747      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000510:	f1c2 0320 	rsb	r3, r2, #32
 8000514:	fa20 f703 	lsr.w	r7, r0, r3
 8000518:	4095      	lsls	r5, r2
 800051a:	fa01 f002 	lsl.w	r0, r1, r2
 800051e:	fa21 f303 	lsr.w	r3, r1, r3
 8000522:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000526:	4338      	orrs	r0, r7
 8000528:	0c01      	lsrs	r1, r0, #16
 800052a:	fbb3 f7fe 	udiv	r7, r3, lr
 800052e:	fa1f f885 	uxth.w	r8, r5
 8000532:	fb0e 3317 	mls	r3, lr, r7, r3
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb07 f308 	mul.w	r3, r7, r8
 800053e:	428b      	cmp	r3, r1
 8000540:	fa04 f402 	lsl.w	r4, r4, r2
 8000544:	d907      	bls.n	8000556 <__udivmoddi4+0x256>
 8000546:	1869      	adds	r1, r5, r1
 8000548:	f107 3cff 	add.w	ip, r7, #4294967295
 800054c:	d22f      	bcs.n	80005ae <__udivmoddi4+0x2ae>
 800054e:	428b      	cmp	r3, r1
 8000550:	d92d      	bls.n	80005ae <__udivmoddi4+0x2ae>
 8000552:	3f02      	subs	r7, #2
 8000554:	4429      	add	r1, r5
 8000556:	1acb      	subs	r3, r1, r3
 8000558:	b281      	uxth	r1, r0
 800055a:	fbb3 f0fe 	udiv	r0, r3, lr
 800055e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000562:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000566:	fb00 f308 	mul.w	r3, r0, r8
 800056a:	428b      	cmp	r3, r1
 800056c:	d907      	bls.n	800057e <__udivmoddi4+0x27e>
 800056e:	1869      	adds	r1, r5, r1
 8000570:	f100 3cff 	add.w	ip, r0, #4294967295
 8000574:	d217      	bcs.n	80005a6 <__udivmoddi4+0x2a6>
 8000576:	428b      	cmp	r3, r1
 8000578:	d915      	bls.n	80005a6 <__udivmoddi4+0x2a6>
 800057a:	3802      	subs	r0, #2
 800057c:	4429      	add	r1, r5
 800057e:	1ac9      	subs	r1, r1, r3
 8000580:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000584:	e73b      	b.n	80003fe <__udivmoddi4+0xfe>
 8000586:	4637      	mov	r7, r6
 8000588:	4630      	mov	r0, r6
 800058a:	e709      	b.n	80003a0 <__udivmoddi4+0xa0>
 800058c:	4607      	mov	r7, r0
 800058e:	e6e7      	b.n	8000360 <__udivmoddi4+0x60>
 8000590:	4618      	mov	r0, r3
 8000592:	e6fb      	b.n	800038c <__udivmoddi4+0x8c>
 8000594:	4541      	cmp	r1, r8
 8000596:	d2ab      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 8000598:	ebb8 0a02 	subs.w	sl, r8, r2
 800059c:	eb69 020e 	sbc.w	r2, r9, lr
 80005a0:	3801      	subs	r0, #1
 80005a2:	4613      	mov	r3, r2
 80005a4:	e7a4      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a6:	4660      	mov	r0, ip
 80005a8:	e7e9      	b.n	800057e <__udivmoddi4+0x27e>
 80005aa:	4618      	mov	r0, r3
 80005ac:	e795      	b.n	80004da <__udivmoddi4+0x1da>
 80005ae:	4667      	mov	r7, ip
 80005b0:	e7d1      	b.n	8000556 <__udivmoddi4+0x256>
 80005b2:	4681      	mov	r9, r0
 80005b4:	e77c      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b6:	3802      	subs	r0, #2
 80005b8:	442c      	add	r4, r5
 80005ba:	e747      	b.n	800044c <__udivmoddi4+0x14c>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	442b      	add	r3, r5
 80005c2:	e72f      	b.n	8000424 <__udivmoddi4+0x124>
 80005c4:	4638      	mov	r0, r7
 80005c6:	e708      	b.n	80003da <__udivmoddi4+0xda>
 80005c8:	4637      	mov	r7, r6
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0xa0>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <ADC_INIT>:
/* Function Summary: The input from the ADC handler will be piped directly to the inputVar via DMA.
 * Parameters: hadc - ADC handler for particular ADC pin. inputVar - Variable you want ADC values stored into.
 */

void ADC_INIT(ADC_HandleTypeDef* hadc, uint32_t* inputVar)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc, inputVar, sizeof(*inputVar));
 80005da:	2204      	movs	r2, #4
 80005dc:	6839      	ldr	r1, [r7, #0]
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f001 f9d4 	bl	800198c <HAL_ADC_Start_DMA>
	HAL_ADC_Start(hadc);
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f001 f911 	bl	800180c <HAL_ADC_Start>
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <ESC_INIT_CONTROLLER>:
#if defined(DSHOT150) || defined(DSHOT300) || defined(DSHOT600) || defined(DSHOT1200)

#define __DSHOT_MAKE_BYTE(__DSHOT_BYTE__, __BIT__) (__DSHOT_BYTE__ = (((__BIT__ & 0b1) == 0b1) ? DSHOT_HIGH_BIT : DSHOT_LOW_BIT))

ESC_CONTROLLER* ESC_INIT_CONTROLLER(TIM_HandleTypeDef* timer, DMA_HandleTypeDef* dma)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b084      	sub	sp, #16
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
 80005fa:	6039      	str	r1, [r7, #0]
	timer->Instance->ARR = TIMER_ARR -1;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000604:	62da      	str	r2, [r3, #44]	; 0x2c
	ESC_CONTROLLER* ESC_CONTROLLER = malloc(sizeof(ESC_CONTROLLER) * ESC_COUNT);
 8000606:	2010      	movs	r0, #16
 8000608:	f006 fdd2 	bl	80071b0 <malloc>
 800060c:	4603      	mov	r3, r0
 800060e:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < ESC_COUNT; i++)
 8000610:	2300      	movs	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	e060      	b.n	80006d8 <ESC_INIT_CONTROLLER+0xe6>
	{
		ESC_CONTROLLER[i].Throttle = 0;
 8000616:	68fa      	ldr	r2, [r7, #12]
 8000618:	4613      	mov	r3, r2
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	4413      	add	r3, r2
 800061e:	00db      	lsls	r3, r3, #3
 8000620:	461a      	mov	r2, r3
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	4413      	add	r3, r2
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
		ESC_CONTROLLER[i].Channel = 4*i;
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	0099      	lsls	r1, r3, #2
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	4613      	mov	r3, r2
 8000632:	005b      	lsls	r3, r3, #1
 8000634:	4413      	add	r3, r2
 8000636:	00db      	lsls	r3, r3, #3
 8000638:	461a      	mov	r2, r3
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	4413      	add	r3, r2
 800063e:	460a      	mov	r2, r1
 8000640:	605a      	str	r2, [r3, #4]
		ESC_CONTROLLER[i].Number = i;
 8000642:	68fa      	ldr	r2, [r7, #12]
 8000644:	4613      	mov	r3, r2
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	4413      	add	r3, r2
 800064a:	00db      	lsls	r3, r3, #3
 800064c:	461a      	mov	r2, r3
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	4413      	add	r3, r2
 8000652:	68fa      	ldr	r2, [r7, #12]
 8000654:	609a      	str	r2, [r3, #8]
		ESC_CONTROLLER[i].Timer = timer;
 8000656:	68fa      	ldr	r2, [r7, #12]
 8000658:	4613      	mov	r3, r2
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	4413      	add	r3, r2
 800065e:	00db      	lsls	r3, r3, #3
 8000660:	461a      	mov	r2, r3
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	4413      	add	r3, r2
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	60da      	str	r2, [r3, #12]
		ESC_CONTROLLER[i].DMA = dma;
 800066a:	68fa      	ldr	r2, [r7, #12]
 800066c:	4613      	mov	r3, r2
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	4413      	add	r3, r2
 8000672:	00db      	lsls	r3, r3, #3
 8000674:	461a      	mov	r2, r3
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	4413      	add	r3, r2
 800067a:	683a      	ldr	r2, [r7, #0]
 800067c:	611a      	str	r2, [r3, #16]
		ESC_CONTROLLER[i].CCR = (uint32_t) &(timer->Instance->CCR1) + (4*i);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	3334      	adds	r3, #52	; 0x34
 8000684:	4618      	mov	r0, r3
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	4619      	mov	r1, r3
 800068c:	68fa      	ldr	r2, [r7, #12]
 800068e:	4613      	mov	r3, r2
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	4413      	add	r3, r2
 8000694:	00db      	lsls	r3, r3, #3
 8000696:	461a      	mov	r2, r3
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	4413      	add	r3, r2
 800069c:	1842      	adds	r2, r0, r1
 800069e:	615a      	str	r2, [r3, #20]
		*((uint32_t *) ESC_CONTROLLER[i].CCR) = 0;
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	4613      	mov	r3, r2
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	4413      	add	r3, r2
 80006a8:	00db      	lsls	r3, r3, #3
 80006aa:	461a      	mov	r2, r3
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	4413      	add	r3, r2
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	461a      	mov	r2, r3
 80006b4:	2300      	movs	r3, #0
 80006b6:	6013      	str	r3, [r2, #0]
		HAL_TIM_PWM_Start(timer, ESC_CONTROLLER[i].Channel);
 80006b8:	68fa      	ldr	r2, [r7, #12]
 80006ba:	4613      	mov	r3, r2
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	4413      	add	r3, r2
 80006c0:	00db      	lsls	r3, r3, #3
 80006c2:	461a      	mov	r2, r3
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	4413      	add	r3, r2
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	4619      	mov	r1, r3
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f005 fae3 	bl	8005c98 <HAL_TIM_PWM_Start>
	for (int i = 0; i < ESC_COUNT; i++)
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	3301      	adds	r3, #1
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	2b03      	cmp	r3, #3
 80006dc:	dd9b      	ble.n	8000616 <ESC_INIT_CONTROLLER+0x24>
	}
	return ESC_CONTROLLER;
 80006de:	68bb      	ldr	r3, [r7, #8]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <XLG_INIT>:
  * @param writeSize	write here
  * @retval void
  */

void XLG_INIT(I2C_HandleTypeDef* i2c)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	uint8_t writeThis = 0b10100000;
 80006f0:	23a0      	movs	r3, #160	; 0xa0
 80006f2:	73fb      	strb	r3, [r7, #15]
	XLG_WRITE(i2c, CTRL1_XL, &writeThis, 1);
 80006f4:	f107 020f 	add.w	r2, r7, #15
 80006f8:	2301      	movs	r3, #1
 80006fa:	2110      	movs	r1, #16
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f000 f80d 	bl	800071c <XLG_WRITE>
	writeThis = 0b10001100;
 8000702:	238c      	movs	r3, #140	; 0x8c
 8000704:	73fb      	strb	r3, [r7, #15]
	XLG_WRITE(i2c, CTRL2_G, &writeThis, 1);
 8000706:	f107 020f 	add.w	r2, r7, #15
 800070a:	2301      	movs	r3, #1
 800070c:	2111      	movs	r1, #17
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f000 f804 	bl	800071c <XLG_WRITE>
}
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <XLG_WRITE>:


void XLG_WRITE(I2C_HandleTypeDef* i2c, uint8_t addr, uint8_t* writeByte, uint32_t writeSize)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af02      	add	r7, sp, #8
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	607a      	str	r2, [r7, #4]
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	460b      	mov	r3, r1
 800072a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write_DMA(i2c, XLG_I2C_ADDR, addr, XLG_REG_SIZE, writeByte, writeSize);
 800072c:	7afb      	ldrb	r3, [r7, #11]
 800072e:	b29a      	uxth	r2, r3
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	b29b      	uxth	r3, r3
 8000734:	9301      	str	r3, [sp, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2301      	movs	r3, #1
 800073c:	21d4      	movs	r1, #212	; 0xd4
 800073e:	68f8      	ldr	r0, [r7, #12]
 8000740:	f002 fcf6 	bl	8003130 <HAL_I2C_Mem_Write_DMA>
	while(i2c->hdmatx->State != HAL_DMA_STATE_READY);
 8000744:	bf00      	nop
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800074a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2b01      	cmp	r3, #1
 8000752:	d1f8      	bne.n	8000746 <XLG_WRITE+0x2a>
	i2c->State = HAL_I2C_STATE_READY;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	2220      	movs	r2, #32
 8000758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <XLG_READ>:

void XLG_READ(I2C_HandleTypeDef* i2c, uint8_t addr, uint8_t* readByte, uint32_t readSize)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af04      	add	r7, sp, #16
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	607a      	str	r2, [r7, #4]
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	460b      	mov	r3, r1
 8000772:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Read_DMA(i2c, XLG_I2C_ADDR, addr, XLG_REG_SIZE, readByte, readSize);
 8000774:	7afb      	ldrb	r3, [r7, #11]
 8000776:	b29a      	uxth	r2, r3
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	b29b      	uxth	r3, r3
 800077c:	9301      	str	r3, [sp, #4]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	2301      	movs	r3, #1
 8000784:	21d4      	movs	r1, #212	; 0xd4
 8000786:	68f8      	ldr	r0, [r7, #12]
 8000788:	f002 fdc8 	bl	800331c <HAL_I2C_Mem_Read_DMA>
	HAL_I2C_Mem_Read(i2c, XLG_I2C_ADDR, addr, XLG_REG_SIZE, readByte, readSize, HAL_MAX_DELAY);
 800078c:	7afb      	ldrb	r3, [r7, #11]
 800078e:	b299      	uxth	r1, r3
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	b29b      	uxth	r3, r3
 8000794:	f04f 32ff 	mov.w	r2, #4294967295
 8000798:	9202      	str	r2, [sp, #8]
 800079a:	9301      	str	r3, [sp, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	2301      	movs	r3, #1
 80007a2:	460a      	mov	r2, r1
 80007a4:	21d4      	movs	r1, #212	; 0xd4
 80007a6:	68f8      	ldr	r0, [r7, #12]
 80007a8:	f002 fba8 	bl	8002efc <HAL_I2C_Mem_Read>
	while(i2c->hdmarx->State != HAL_DMA_STATE_READY);
 80007ac:	bf00      	nop
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d1f8      	bne.n	80007ae <XLG_READ+0x4a>
	i2c->State = HAL_I2C_STATE_READY;
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2220      	movs	r2, #32
 80007c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <XLG_G_DATA_READ>:

void XLG_G_DATA_READ(I2C_HandleTypeDef* i2c, XLG_DATA* gData)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
	uint8_t readByte[6] = {0};
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	809a      	strh	r2, [r3, #4]
	XLG_READ(i2c, OUTX_H_G, &readByte[0], 1);
 80007e0:	f107 0208 	add.w	r2, r7, #8
 80007e4:	2301      	movs	r3, #1
 80007e6:	2123      	movs	r1, #35	; 0x23
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff ffbb 	bl	8000764 <XLG_READ>
	XLG_READ(i2c, OUTX_L_G, &readByte[1], 1);
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	1c5a      	adds	r2, r3, #1
 80007f4:	2301      	movs	r3, #1
 80007f6:	2122      	movs	r1, #34	; 0x22
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff ffb3 	bl	8000764 <XLG_READ>
	XLG_READ(i2c, OUTY_H_G, &readByte[2], 1);
 80007fe:	f107 0308 	add.w	r3, r7, #8
 8000802:	1c9a      	adds	r2, r3, #2
 8000804:	2301      	movs	r3, #1
 8000806:	2125      	movs	r1, #37	; 0x25
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff ffab 	bl	8000764 <XLG_READ>
	XLG_READ(i2c, OUTY_L_G, &readByte[3], 1);
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	1cda      	adds	r2, r3, #3
 8000814:	2301      	movs	r3, #1
 8000816:	2124      	movs	r1, #36	; 0x24
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff ffa3 	bl	8000764 <XLG_READ>
	XLG_READ(i2c, OUTZ_H_G, &readByte[4], 1);
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	1d1a      	adds	r2, r3, #4
 8000824:	2301      	movs	r3, #1
 8000826:	2127      	movs	r1, #39	; 0x27
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f7ff ff9b 	bl	8000764 <XLG_READ>
	XLG_READ(i2c, OUTZ_L_G, &readByte[5], 1);
 800082e:	f107 0308 	add.w	r3, r7, #8
 8000832:	1d5a      	adds	r2, r3, #5
 8000834:	2301      	movs	r3, #1
 8000836:	2126      	movs	r1, #38	; 0x26
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f7ff ff93 	bl	8000764 <XLG_READ>
	gData->x = readByte[0];
 800083e:	7a3b      	ldrb	r3, [r7, #8]
 8000840:	b21a      	sxth	r2, r3
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	801a      	strh	r2, [r3, #0]
	gData->x = (gData->x << 8) | readByte[1];
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	f9b3 3000 	ldrsh.w	r3, [r3]
 800084c:	021b      	lsls	r3, r3, #8
 800084e:	b21a      	sxth	r2, r3
 8000850:	7a7b      	ldrb	r3, [r7, #9]
 8000852:	b21b      	sxth	r3, r3
 8000854:	4313      	orrs	r3, r2
 8000856:	b21a      	sxth	r2, r3
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	801a      	strh	r2, [r3, #0]
	gData->y = readByte[2];
 800085c:	7abb      	ldrb	r3, [r7, #10]
 800085e:	b21a      	sxth	r2, r3
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	805a      	strh	r2, [r3, #2]
	gData->y = (gData->x << 8) | readByte[3];
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	f9b3 3000 	ldrsh.w	r3, [r3]
 800086a:	021b      	lsls	r3, r3, #8
 800086c:	b21a      	sxth	r2, r3
 800086e:	7afb      	ldrb	r3, [r7, #11]
 8000870:	b21b      	sxth	r3, r3
 8000872:	4313      	orrs	r3, r2
 8000874:	b21a      	sxth	r2, r3
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	805a      	strh	r2, [r3, #2]
	gData->z = readByte[4];
 800087a:	7b3b      	ldrb	r3, [r7, #12]
 800087c:	b21a      	sxth	r2, r3
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	809a      	strh	r2, [r3, #4]
	gData->z = (gData->x << 8) | readByte[5];
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000888:	021b      	lsls	r3, r3, #8
 800088a:	b21a      	sxth	r2, r3
 800088c:	7b7b      	ldrb	r3, [r7, #13]
 800088e:	b21b      	sxth	r3, r3
 8000890:	4313      	orrs	r3, r2
 8000892:	b21a      	sxth	r2, r3
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	809a      	strh	r2, [r3, #4]
}
 8000898:	bf00      	nop
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <XLG_XL_DATA_READ>:

void XLG_XL_DATA_READ(I2C_HandleTypeDef* i2c, XLG_DATA* xlData)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
	uint8_t readByte[6] = {0};
 80008aa:	f107 0308 	add.w	r3, r7, #8
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	809a      	strh	r2, [r3, #4]
	XLG_READ(i2c, OUTX_H_XL, &readByte[0], 1);
 80008b4:	f107 0208 	add.w	r2, r7, #8
 80008b8:	2301      	movs	r3, #1
 80008ba:	2129      	movs	r1, #41	; 0x29
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f7ff ff51 	bl	8000764 <XLG_READ>
	XLG_READ(i2c, OUTX_L_XL, &readByte[1], 1);
 80008c2:	f107 0308 	add.w	r3, r7, #8
 80008c6:	1c5a      	adds	r2, r3, #1
 80008c8:	2301      	movs	r3, #1
 80008ca:	2128      	movs	r1, #40	; 0x28
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff ff49 	bl	8000764 <XLG_READ>
	XLG_READ(i2c, OUTY_H_XL, &readByte[2], 1);
 80008d2:	f107 0308 	add.w	r3, r7, #8
 80008d6:	1c9a      	adds	r2, r3, #2
 80008d8:	2301      	movs	r3, #1
 80008da:	212b      	movs	r1, #43	; 0x2b
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ff41 	bl	8000764 <XLG_READ>
	XLG_READ(i2c, OUTY_L_XL, &readByte[3], 1);
 80008e2:	f107 0308 	add.w	r3, r7, #8
 80008e6:	1cda      	adds	r2, r3, #3
 80008e8:	2301      	movs	r3, #1
 80008ea:	212a      	movs	r1, #42	; 0x2a
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f7ff ff39 	bl	8000764 <XLG_READ>
	XLG_READ(i2c, OUTZ_H_XL, &readByte[4], 1);
 80008f2:	f107 0308 	add.w	r3, r7, #8
 80008f6:	1d1a      	adds	r2, r3, #4
 80008f8:	2301      	movs	r3, #1
 80008fa:	212d      	movs	r1, #45	; 0x2d
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff ff31 	bl	8000764 <XLG_READ>
	XLG_READ(i2c, OUTZ_L_XL, &readByte[5], 1);
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	1d5a      	adds	r2, r3, #5
 8000908:	2301      	movs	r3, #1
 800090a:	212c      	movs	r1, #44	; 0x2c
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f7ff ff29 	bl	8000764 <XLG_READ>
	xlData->x = readByte[0];
 8000912:	7a3b      	ldrb	r3, [r7, #8]
 8000914:	b21a      	sxth	r2, r3
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	801a      	strh	r2, [r3, #0]
	xlData->x = (xlData->x << 8) | readByte[1];
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000920:	021b      	lsls	r3, r3, #8
 8000922:	b21a      	sxth	r2, r3
 8000924:	7a7b      	ldrb	r3, [r7, #9]
 8000926:	b21b      	sxth	r3, r3
 8000928:	4313      	orrs	r3, r2
 800092a:	b21a      	sxth	r2, r3
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	801a      	strh	r2, [r3, #0]
	xlData->y = readByte[2];
 8000930:	7abb      	ldrb	r3, [r7, #10]
 8000932:	b21a      	sxth	r2, r3
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	805a      	strh	r2, [r3, #2]
	xlData->y = (xlData->x << 8) | readByte[3];
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800093e:	021b      	lsls	r3, r3, #8
 8000940:	b21a      	sxth	r2, r3
 8000942:	7afb      	ldrb	r3, [r7, #11]
 8000944:	b21b      	sxth	r3, r3
 8000946:	4313      	orrs	r3, r2
 8000948:	b21a      	sxth	r2, r3
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	805a      	strh	r2, [r3, #2]
	xlData->z = readByte[4];
 800094e:	7b3b      	ldrb	r3, [r7, #12]
 8000950:	b21a      	sxth	r2, r3
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	809a      	strh	r2, [r3, #4]
	xlData->z = (xlData->x << 8) | readByte[5];
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	f9b3 3000 	ldrsh.w	r3, [r3]
 800095c:	021b      	lsls	r3, r3, #8
 800095e:	b21a      	sxth	r2, r3
 8000960:	7b7b      	ldrb	r3, [r7, #13]
 8000962:	b21b      	sxth	r3, r3
 8000964:	4313      	orrs	r3, r2
 8000966:	b21a      	sxth	r2, r3
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	809a      	strh	r2, [r3, #4]
}
 800096c:	bf00      	nop
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097a:	f000 fe84 	bl	8001686 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097e:	f000 f857 	bl	8000a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000982:	f000 fa89 	bl	8000e98 <MX_GPIO_Init>
  MX_DMA_Init();
 8000986:	f000 fa45 	bl	8000e14 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800098a:	f000 fa0b 	bl	8000da4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 800098e:	f000 fa39 	bl	8000e04 <MX_USB_OTG_FS_USB_Init>
  MX_TIM4_Init();
 8000992:	f000 f977 	bl	8000c84 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000996:	f000 f8e3 	bl	8000b60 <MX_ADC1_Init>
  MX_I2C1_Init();
 800099a:	f000 f933 	bl	8000c04 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ADC_INIT(&hadc1, &throttlePot);
 800099e:	491a      	ldr	r1, [pc, #104]	; (8000a08 <main+0x94>)
 80009a0:	481a      	ldr	r0, [pc, #104]	; (8000a0c <main+0x98>)
 80009a2:	f7ff fe15 	bl	80005d0 <ADC_INIT>
  ESC_CONTROLLER* myESCSet = ESC_INIT_CONTROLLER(&htim4, &hdma_tim4_ch1);
 80009a6:	491a      	ldr	r1, [pc, #104]	; (8000a10 <main+0x9c>)
 80009a8:	481a      	ldr	r0, [pc, #104]	; (8000a14 <main+0xa0>)
 80009aa:	f7ff fe22 	bl	80005f2 <ESC_INIT_CONTROLLER>
 80009ae:	6078      	str	r0, [r7, #4]
  XLG_INIT(&hi2c1);
 80009b0:	4819      	ldr	r0, [pc, #100]	; (8000a18 <main+0xa4>)
 80009b2:	f7ff fe99 	bl	80006e8 <XLG_INIT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  XLG_G_DATA_READ(&hi2c1, &gData);
 80009b6:	4919      	ldr	r1, [pc, #100]	; (8000a1c <main+0xa8>)
 80009b8:	4817      	ldr	r0, [pc, #92]	; (8000a18 <main+0xa4>)
 80009ba:	f7ff ff07 	bl	80007cc <XLG_G_DATA_READ>
	  XLG_XL_DATA_READ(&hi2c1, &xlData);
 80009be:	4918      	ldr	r1, [pc, #96]	; (8000a20 <main+0xac>)
 80009c0:	4815      	ldr	r0, [pc, #84]	; (8000a18 <main+0xa4>)
 80009c2:	f7ff ff6d 	bl	80008a0 <XLG_XL_DATA_READ>
//	  sprintf((char*)buf, "XL = X:%i Y:%i Z:%i\n\r", xlData.x, xlData.y, xlData.z);
//	  HAL_UART_Transmit(&huart3, buf, strlen((char*)buf), HAL_MAX_DELAY);
	  sprintf((char*)buf, "G = X:%i Y:%i Z:%i\n\r", gData.x, gData.y, gData.z);
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <main+0xa8>)
 80009c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <main+0xa8>)
 80009d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80009d4:	4619      	mov	r1, r3
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <main+0xa8>)
 80009d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80009dc:	9300      	str	r3, [sp, #0]
 80009de:	460b      	mov	r3, r1
 80009e0:	4910      	ldr	r1, [pc, #64]	; (8000a24 <main+0xb0>)
 80009e2:	4811      	ldr	r0, [pc, #68]	; (8000a28 <main+0xb4>)
 80009e4:	f006 fcac 	bl	8007340 <siprintf>
	  HAL_UART_Transmit(&huart3, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80009e8:	480f      	ldr	r0, [pc, #60]	; (8000a28 <main+0xb4>)
 80009ea:	f7ff fc19 	bl	8000220 <strlen>
 80009ee:	4603      	mov	r3, r0
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
 80009f6:	490c      	ldr	r1, [pc, #48]	; (8000a28 <main+0xb4>)
 80009f8:	480c      	ldr	r0, [pc, #48]	; (8000a2c <main+0xb8>)
 80009fa:	f005 ff27 	bl	800684c <HAL_UART_Transmit>
	  HAL_Delay(100);
 80009fe:	2064      	movs	r0, #100	; 0x64
 8000a00:	f000 fe9e 	bl	8001740 <HAL_Delay>
	  XLG_G_DATA_READ(&hi2c1, &gData);
 8000a04:	e7d7      	b.n	80009b6 <main+0x42>
 8000a06:	bf00      	nop
 8000a08:	2000038c 	.word	0x2000038c
 8000a0c:	20000204 	.word	0x20000204
 8000a10:	2000032c 	.word	0x2000032c
 8000a14:	20000098 	.word	0x20000098
 8000a18:	200001b8 	.word	0x200001b8
 8000a1c:	2000024c 	.word	0x2000024c
 8000a20:	20000390 	.word	0x20000390
 8000a24:	080079f4 	.word	0x080079f4
 8000a28:	20000314 	.word	0x20000314
 8000a2c:	200000d8 	.word	0x200000d8

08000a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b0b4      	sub	sp, #208	; 0xd0
 8000a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a36:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000a3a:	2230      	movs	r2, #48	; 0x30
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f006 fbbe 	bl	80071c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a44:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	2280      	movs	r2, #128	; 0x80
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f006 fbaf 	bl	80071c0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a62:	f004 f875 	bl	8004b50 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	4b3b      	ldr	r3, [pc, #236]	; (8000b54 <SystemClock_Config+0x124>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	4a3a      	ldr	r2, [pc, #232]	; (8000b54 <SystemClock_Config+0x124>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a70:	6413      	str	r3, [r2, #64]	; 0x40
 8000a72:	4b38      	ldr	r3, [pc, #224]	; (8000b54 <SystemClock_Config+0x124>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a7e:	4b36      	ldr	r3, [pc, #216]	; (8000b58 <SystemClock_Config+0x128>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a35      	ldr	r2, [pc, #212]	; (8000b58 <SystemClock_Config+0x128>)
 8000a84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a88:	6013      	str	r3, [r2, #0]
 8000a8a:	4b33      	ldr	r3, [pc, #204]	; (8000b58 <SystemClock_Config+0x128>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a96:	2301      	movs	r3, #1
 8000a98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a9c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000aa0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aaa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ab2:	2308      	movs	r3, #8
 8000ab4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000ab8:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000abc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000ac6:	2309      	movs	r3, #9
 8000ac8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000acc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f004 f89d 	bl	8004c10 <HAL_RCC_OscConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000adc:	f000 fad0 	bl	8001080 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ae0:	f004 f846 	bl	8004b70 <HAL_PWREx_EnableOverDrive>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000aea:	f000 fac9 	bl	8001080 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aee:	230f      	movs	r3, #15
 8000af0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af4:	2302      	movs	r3, #2
 8000af6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b00:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000b10:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b14:	2107      	movs	r1, #7
 8000b16:	4618      	mov	r0, r3
 8000b18:	f004 fb1e 	bl	8005158 <HAL_RCC_ClockConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000b22:	f000 faad 	bl	8001080 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8000b26:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <SystemClock_Config+0x12c>)
 8000b28:	60fb      	str	r3, [r7, #12]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	66bb      	str	r3, [r7, #104]	; 0x68
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f004 fd03 	bl	8005548 <HAL_RCCEx_PeriphCLKConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000b48:	f000 fa9a 	bl	8001080 <Error_Handler>
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	37d0      	adds	r7, #208	; 0xd0
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40007000 	.word	0x40007000
 8000b5c:	00204100 	.word	0x00204100

08000b60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b66:	463b      	mov	r3, r7
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b72:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b74:	4a21      	ldr	r2, [pc, #132]	; (8000bfc <MX_ADC1_Init+0x9c>)
 8000b76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000b78:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b7a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b80:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b92:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b9a:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ba0:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000ba2:	4a17      	ldr	r2, [pc, #92]	; (8000c00 <MX_ADC1_Init+0xa0>)
 8000ba4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ba6:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bba:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000bc2:	f000 fddf 	bl	8001784 <HAL_ADC_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000bcc:	f000 fa58 	bl	8001080 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000bd0:	2309      	movs	r3, #9
 8000bd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bdc:	463b      	mov	r3, r7
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000be2:	f000 ffcb 	bl	8001b7c <HAL_ADC_ConfigChannel>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000bec:	f000 fa48 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000204 	.word	0x20000204
 8000bfc:	40012000 	.word	0x40012000
 8000c00:	0f000001 	.word	0x0f000001

08000c04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c08:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c0a:	4a1c      	ldr	r2, [pc, #112]	; (8000c7c <MX_I2C1_Init+0x78>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c10:	4a1b      	ldr	r2, [pc, #108]	; (8000c80 <MX_I2C1_Init+0x7c>)
 8000c12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 212;
 8000c14:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c16:	22d4      	movs	r2, #212	; 0xd4
 8000c18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c20:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c26:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c3e:	480e      	ldr	r0, [pc, #56]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c40:	f002 f8cc 	bl	8002ddc <HAL_I2C_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c4a:	f000 fa19 	bl	8001080 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4809      	ldr	r0, [pc, #36]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c52:	f003 fee6 	bl	8004a22 <HAL_I2CEx_ConfigAnalogFilter>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c5c:	f000 fa10 	bl	8001080 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c60:	2100      	movs	r1, #0
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_I2C1_Init+0x74>)
 8000c64:	f003 ff28 	bl	8004ab8 <HAL_I2CEx_ConfigDigitalFilter>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c6e:	f000 fa07 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200001b8 	.word	0x200001b8
 8000c7c:	40005400 	.word	0x40005400
 8000c80:	20404768 	.word	0x20404768

08000c84 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c96:	463b      	mov	r3, r7
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
 8000ca4:	615a      	str	r2, [r3, #20]
 8000ca6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ca8:	4b3c      	ldr	r3, [pc, #240]	; (8000d9c <MX_TIM4_Init+0x118>)
 8000caa:	4a3d      	ldr	r2, [pc, #244]	; (8000da0 <MX_TIM4_Init+0x11c>)
 8000cac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000cae:	4b3b      	ldr	r3, [pc, #236]	; (8000d9c <MX_TIM4_Init+0x118>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb4:	4b39      	ldr	r3, [pc, #228]	; (8000d9c <MX_TIM4_Init+0x118>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 359;
 8000cba:	4b38      	ldr	r3, [pc, #224]	; (8000d9c <MX_TIM4_Init+0x118>)
 8000cbc:	f240 1267 	movw	r2, #359	; 0x167
 8000cc0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc2:	4b36      	ldr	r3, [pc, #216]	; (8000d9c <MX_TIM4_Init+0x118>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cc8:	4b34      	ldr	r3, [pc, #208]	; (8000d9c <MX_TIM4_Init+0x118>)
 8000cca:	2280      	movs	r2, #128	; 0x80
 8000ccc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000cce:	4833      	ldr	r0, [pc, #204]	; (8000d9c <MX_TIM4_Init+0x118>)
 8000cd0:	f004 ff82 	bl	8005bd8 <HAL_TIM_OC_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000cda:	f000 f9d1 	bl	8001080 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000cde:	482f      	ldr	r0, [pc, #188]	; (8000d9c <MX_TIM4_Init+0x118>)
 8000ce0:	f004 ffa5 	bl	8005c2e <HAL_TIM_PWM_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8000cea:	f000 f9c9 	bl	8001080 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cf6:	f107 031c 	add.w	r3, r7, #28
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4827      	ldr	r0, [pc, #156]	; (8000d9c <MX_TIM4_Init+0x118>)
 8000cfe:	f005 fcc9 	bl	8006694 <HAL_TIMEx_MasterConfigSynchronization>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8000d08:	f000 f9ba 	bl	8001080 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000d0c:	2310      	movs	r3, #16
 8000d0e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	2200      	movs	r2, #0
 8000d20:	4619      	mov	r1, r3
 8000d22:	481e      	ldr	r0, [pc, #120]	; (8000d9c <MX_TIM4_Init+0x118>)
 8000d24:	f004 fffc 	bl	8005d20 <HAL_TIM_OC_ConfigChannel>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000d2e:	f000 f9a7 	bl	8001080 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_1);
 8000d32:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <MX_TIM4_Init+0x118>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	699a      	ldr	r2, [r3, #24]
 8000d38:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <MX_TIM4_Init+0x118>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f042 0208 	orr.w	r2, r2, #8
 8000d40:	619a      	str	r2, [r3, #24]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d42:	2360      	movs	r3, #96	; 0x60
 8000d44:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d46:	463b      	mov	r3, r7
 8000d48:	2204      	movs	r2, #4
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4813      	ldr	r0, [pc, #76]	; (8000d9c <MX_TIM4_Init+0x118>)
 8000d4e:	f005 f865 	bl	8005e1c <HAL_TIM_PWM_ConfigChannel>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000d58:	f000 f992 	bl	8001080 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	2208      	movs	r2, #8
 8000d60:	4619      	mov	r1, r3
 8000d62:	480e      	ldr	r0, [pc, #56]	; (8000d9c <MX_TIM4_Init+0x118>)
 8000d64:	f005 f85a 	bl	8005e1c <HAL_TIM_PWM_ConfigChannel>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000d6e:	f000 f987 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  // Set DMA Transfers to 17 with DBL and destination to CCR1 (15) with DBA
  htim4.Instance->DCR =  TIM_DCR_DBA_1 | TIM_DCR_DBA_2 | TIM_DCR_DBA_3; // Transfer at CCR2, 1 transfer
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <MX_TIM4_Init+0x118>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	220e      	movs	r2, #14
 8000d78:	649a      	str	r2, [r3, #72]	; 0x48
  // Enable Update DMA Request
  htim4.Instance->DIER = TIM_DIER_UDE;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <MX_TIM4_Init+0x118>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d82:	60da      	str	r2, [r3, #12]
  // Enable DMA requests on CH1
  htim4.Instance->DIER = TIM_DIER_CC1DE;
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <MX_TIM4_Init+0x118>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d8c:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d8e:	4803      	ldr	r0, [pc, #12]	; (8000d9c <MX_TIM4_Init+0x118>)
 8000d90:	f000 fb32 	bl	80013f8 <HAL_TIM_MspPostInit>

}
 8000d94:	bf00      	nop
 8000d96:	3728      	adds	r7, #40	; 0x28
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000098 	.word	0x20000098
 8000da0:	40000800 	.word	0x40000800

08000da4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000daa:	4a15      	ldr	r2, [pc, #84]	; (8000e00 <MX_USART3_UART_Init+0x5c>)
 8000dac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000db0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000dca:	220c      	movs	r2, #12
 8000dcc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000de8:	f005 fce2 	bl	80067b0 <HAL_UART_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000df2:	f000 f945 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200000d8 	.word	0x200000d8
 8000e00:	40004800 	.word	0x40004800

08000e04 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
	...

08000e14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <MX_DMA_Init+0x80>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a1d      	ldr	r2, [pc, #116]	; (8000e94 <MX_DMA_Init+0x80>)
 8000e20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <MX_DMA_Init+0x80>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <MX_DMA_Init+0x80>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a17      	ldr	r2, [pc, #92]	; (8000e94 <MX_DMA_Init+0x80>)
 8000e38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <MX_DMA_Init+0x80>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	200b      	movs	r0, #11
 8000e50:	f001 fa35 	bl	80022be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e54:	200b      	movs	r0, #11
 8000e56:	f001 fa4e 	bl	80022f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	2010      	movs	r0, #16
 8000e60:	f001 fa2d 	bl	80022be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e64:	2010      	movs	r0, #16
 8000e66:	f001 fa46 	bl	80022f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2011      	movs	r0, #17
 8000e70:	f001 fa25 	bl	80022be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000e74:	2011      	movs	r0, #17
 8000e76:	f001 fa3e 	bl	80022f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	203c      	movs	r0, #60	; 0x3c
 8000e80:	f001 fa1d 	bl	80022be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000e84:	203c      	movs	r0, #60	; 0x3c
 8000e86:	f001 fa36 	bl	80022f6 <HAL_NVIC_EnableIRQ>

}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800

08000e98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08c      	sub	sp, #48	; 0x30
 8000e9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eae:	4b62      	ldr	r3, [pc, #392]	; (8001038 <MX_GPIO_Init+0x1a0>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a61      	ldr	r2, [pc, #388]	; (8001038 <MX_GPIO_Init+0x1a0>)
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b5f      	ldr	r3, [pc, #380]	; (8001038 <MX_GPIO_Init+0x1a0>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0304 	and.w	r3, r3, #4
 8000ec2:	61bb      	str	r3, [r7, #24]
 8000ec4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ec6:	4b5c      	ldr	r3, [pc, #368]	; (8001038 <MX_GPIO_Init+0x1a0>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a5b      	ldr	r2, [pc, #364]	; (8001038 <MX_GPIO_Init+0x1a0>)
 8000ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b59      	ldr	r3, [pc, #356]	; (8001038 <MX_GPIO_Init+0x1a0>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ede:	4b56      	ldr	r3, [pc, #344]	; (8001038 <MX_GPIO_Init+0x1a0>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a55      	ldr	r2, [pc, #340]	; (8001038 <MX_GPIO_Init+0x1a0>)
 8000ee4:	f043 0302 	orr.w	r3, r3, #2
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b53      	ldr	r3, [pc, #332]	; (8001038 <MX_GPIO_Init+0x1a0>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ef6:	4b50      	ldr	r3, [pc, #320]	; (8001038 <MX_GPIO_Init+0x1a0>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a4f      	ldr	r2, [pc, #316]	; (8001038 <MX_GPIO_Init+0x1a0>)
 8000efc:	f043 0320 	orr.w	r3, r3, #32
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b4d      	ldr	r3, [pc, #308]	; (8001038 <MX_GPIO_Init+0x1a0>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0320 	and.w	r3, r3, #32
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f0e:	4b4a      	ldr	r3, [pc, #296]	; (8001038 <MX_GPIO_Init+0x1a0>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a49      	ldr	r2, [pc, #292]	; (8001038 <MX_GPIO_Init+0x1a0>)
 8000f14:	f043 0308 	orr.w	r3, r3, #8
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b47      	ldr	r3, [pc, #284]	; (8001038 <MX_GPIO_Init+0x1a0>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0308 	and.w	r3, r3, #8
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f26:	4b44      	ldr	r3, [pc, #272]	; (8001038 <MX_GPIO_Init+0x1a0>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a43      	ldr	r2, [pc, #268]	; (8001038 <MX_GPIO_Init+0x1a0>)
 8000f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b41      	ldr	r3, [pc, #260]	; (8001038 <MX_GPIO_Init+0x1a0>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	4b3e      	ldr	r3, [pc, #248]	; (8001038 <MX_GPIO_Init+0x1a0>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a3d      	ldr	r2, [pc, #244]	; (8001038 <MX_GPIO_Init+0x1a0>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b3b      	ldr	r3, [pc, #236]	; (8001038 <MX_GPIO_Init+0x1a0>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000f5c:	4837      	ldr	r0, [pc, #220]	; (800103c <MX_GPIO_Init+0x1a4>)
 8000f5e:	f001 ff23 	bl	8002da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2140      	movs	r1, #64	; 0x40
 8000f66:	4836      	ldr	r0, [pc, #216]	; (8001040 <MX_GPIO_Init+0x1a8>)
 8000f68:	f001 ff1e 	bl	8002da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f72:	4b34      	ldr	r3, [pc, #208]	; (8001044 <MX_GPIO_Init+0x1ac>)
 8000f74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4831      	ldr	r0, [pc, #196]	; (8001048 <MX_GPIO_Init+0x1b0>)
 8000f82:	f001 fd77 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000f86:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	482c      	ldr	r0, [pc, #176]	; (800104c <MX_GPIO_Init+0x1b4>)
 8000f9c:	f001 fd6a 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000fa0:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4820      	ldr	r0, [pc, #128]	; (800103c <MX_GPIO_Init+0x1a4>)
 8000fba:	f001 fd5b 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000fbe:	2340      	movs	r3, #64	; 0x40
 8000fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	481a      	ldr	r0, [pc, #104]	; (8001040 <MX_GPIO_Init+0x1a8>)
 8000fd6:	f001 fd4d 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000fda:	2380      	movs	r3, #128	; 0x80
 8000fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	4619      	mov	r1, r3
 8000fec:	4814      	ldr	r0, [pc, #80]	; (8001040 <MX_GPIO_Init+0x1a8>)
 8000fee:	f001 fd41 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin PA10 USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|GPIO_PIN_10|USB_DM_Pin|USB_DP_Pin;
 8000ff2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001000:	2303      	movs	r3, #3
 8001002:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001004:	230a      	movs	r3, #10
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	4619      	mov	r1, r3
 800100e:	4810      	ldr	r0, [pc, #64]	; (8001050 <MX_GPIO_Init+0x1b8>)
 8001010:	f001 fd30 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001014:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101a:	2300      	movs	r3, #0
 800101c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	4619      	mov	r1, r3
 8001028:	4809      	ldr	r0, [pc, #36]	; (8001050 <MX_GPIO_Init+0x1b8>)
 800102a:	f001 fd23 	bl	8002a74 <HAL_GPIO_Init>

}
 800102e:	bf00      	nop
 8001030:	3730      	adds	r7, #48	; 0x30
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40023800 	.word	0x40023800
 800103c:	40020400 	.word	0x40020400
 8001040:	40021800 	.word	0x40021800
 8001044:	10110000 	.word	0x10110000
 8001048:	40020800 	.word	0x40020800
 800104c:	40021400 	.word	0x40021400
 8001050:	40020000 	.word	0x40020000

08001054 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
    void HAL_ADC_ConvHalfCpltCallback (ADC_HandleTypeDef* hadc)
    {
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	__NOP();
 800105c:	bf00      	nop
    }
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <HAL_ADC_ConvCpltCallback>:

    void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef* hadc)
    {
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
    __NOP();
 8001072:	bf00      	nop
    }
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001096:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <HAL_MspInit+0x44>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	4a0e      	ldr	r2, [pc, #56]	; (80010d4 <HAL_MspInit+0x44>)
 800109c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a0:	6413      	str	r3, [r2, #64]	; 0x40
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <HAL_MspInit+0x44>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <HAL_MspInit+0x44>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <HAL_MspInit+0x44>)
 80010b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_MspInit+0x44>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800

080010d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a31      	ldr	r2, [pc, #196]	; (80011bc <HAL_ADC_MspInit+0xe4>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d15c      	bne.n	80011b4 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010fa:	4b31      	ldr	r3, [pc, #196]	; (80011c0 <HAL_ADC_MspInit+0xe8>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	4a30      	ldr	r2, [pc, #192]	; (80011c0 <HAL_ADC_MspInit+0xe8>)
 8001100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001104:	6453      	str	r3, [r2, #68]	; 0x44
 8001106:	4b2e      	ldr	r3, [pc, #184]	; (80011c0 <HAL_ADC_MspInit+0xe8>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001112:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <HAL_ADC_MspInit+0xe8>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a2a      	ldr	r2, [pc, #168]	; (80011c0 <HAL_ADC_MspInit+0xe8>)
 8001118:	f043 0302 	orr.w	r3, r3, #2
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <HAL_ADC_MspInit+0xe8>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_THROTTLE_CONTROL_Pin;
 800112a:	2302      	movs	r3, #2
 800112c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800112e:	2303      	movs	r3, #3
 8001130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_THROTTLE_CONTROL_GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	4821      	ldr	r0, [pc, #132]	; (80011c4 <HAL_ADC_MspInit+0xec>)
 800113e:	f001 fc99 	bl	8002a74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8001142:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <HAL_ADC_MspInit+0xf0>)
 8001144:	4a21      	ldr	r2, [pc, #132]	; (80011cc <HAL_ADC_MspInit+0xf4>)
 8001146:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001148:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <HAL_ADC_MspInit+0xf0>)
 800114a:	2200      	movs	r2, #0
 800114c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800114e:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <HAL_ADC_MspInit+0xf0>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001154:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <HAL_ADC_MspInit+0xf0>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 800115a:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <HAL_ADC_MspInit+0xf0>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <HAL_ADC_MspInit+0xf0>)
 8001162:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001166:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <HAL_ADC_MspInit+0xf0>)
 800116a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800116e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <HAL_ADC_MspInit+0xf0>)
 8001172:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001176:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001178:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <HAL_ADC_MspInit+0xf0>)
 800117a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800117e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <HAL_ADC_MspInit+0xf0>)
 8001182:	2204      	movs	r2, #4
 8001184:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <HAL_ADC_MspInit+0xf0>)
 8001188:	2203      	movs	r2, #3
 800118a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <HAL_ADC_MspInit+0xf0>)
 800118e:	2200      	movs	r2, #0
 8001190:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001192:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <HAL_ADC_MspInit+0xf0>)
 8001194:	2200      	movs	r2, #0
 8001196:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001198:	480b      	ldr	r0, [pc, #44]	; (80011c8 <HAL_ADC_MspInit+0xf0>)
 800119a:	f001 f8c7 	bl	800232c <HAL_DMA_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <HAL_ADC_MspInit+0xd0>
    {
      Error_Handler();
 80011a4:	f7ff ff6c 	bl	8001080 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a07      	ldr	r2, [pc, #28]	; (80011c8 <HAL_ADC_MspInit+0xf0>)
 80011ac:	639a      	str	r2, [r3, #56]	; 0x38
 80011ae:	4a06      	ldr	r2, [pc, #24]	; (80011c8 <HAL_ADC_MspInit+0xf0>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011b4:	bf00      	nop
 80011b6:	3728      	adds	r7, #40	; 0x28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40012000 	.word	0x40012000
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40020400 	.word	0x40020400
 80011c8:	20000254 	.word	0x20000254
 80011cc:	40026470 	.word	0x40026470

080011d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a52      	ldr	r2, [pc, #328]	; (8001338 <HAL_I2C_MspInit+0x168>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	f040 809d 	bne.w	800132e <HAL_I2C_MspInit+0x15e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f4:	4b51      	ldr	r3, [pc, #324]	; (800133c <HAL_I2C_MspInit+0x16c>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f8:	4a50      	ldr	r2, [pc, #320]	; (800133c <HAL_I2C_MspInit+0x16c>)
 80011fa:	f043 0302 	orr.w	r3, r3, #2
 80011fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001200:	4b4e      	ldr	r3, [pc, #312]	; (800133c <HAL_I2C_MspInit+0x16c>)
 8001202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800120c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001212:	2312      	movs	r3, #18
 8001214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001216:	2301      	movs	r3, #1
 8001218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121a:	2303      	movs	r3, #3
 800121c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800121e:	2304      	movs	r3, #4
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4619      	mov	r1, r3
 8001228:	4845      	ldr	r0, [pc, #276]	; (8001340 <HAL_I2C_MspInit+0x170>)
 800122a:	f001 fc23 	bl	8002a74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800122e:	4b43      	ldr	r3, [pc, #268]	; (800133c <HAL_I2C_MspInit+0x16c>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	4a42      	ldr	r2, [pc, #264]	; (800133c <HAL_I2C_MspInit+0x16c>)
 8001234:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001238:	6413      	str	r3, [r2, #64]	; 0x40
 800123a:	4b40      	ldr	r3, [pc, #256]	; (800133c <HAL_I2C_MspInit+0x16c>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8001246:	4b3f      	ldr	r3, [pc, #252]	; (8001344 <HAL_I2C_MspInit+0x174>)
 8001248:	4a3f      	ldr	r2, [pc, #252]	; (8001348 <HAL_I2C_MspInit+0x178>)
 800124a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800124c:	4b3d      	ldr	r3, [pc, #244]	; (8001344 <HAL_I2C_MspInit+0x174>)
 800124e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001252:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001254:	4b3b      	ldr	r3, [pc, #236]	; (8001344 <HAL_I2C_MspInit+0x174>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800125a:	4b3a      	ldr	r3, [pc, #232]	; (8001344 <HAL_I2C_MspInit+0x174>)
 800125c:	2200      	movs	r2, #0
 800125e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001260:	4b38      	ldr	r3, [pc, #224]	; (8001344 <HAL_I2C_MspInit+0x174>)
 8001262:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001266:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001268:	4b36      	ldr	r3, [pc, #216]	; (8001344 <HAL_I2C_MspInit+0x174>)
 800126a:	2200      	movs	r2, #0
 800126c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800126e:	4b35      	ldr	r3, [pc, #212]	; (8001344 <HAL_I2C_MspInit+0x174>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001274:	4b33      	ldr	r3, [pc, #204]	; (8001344 <HAL_I2C_MspInit+0x174>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800127a:	4b32      	ldr	r3, [pc, #200]	; (8001344 <HAL_I2C_MspInit+0x174>)
 800127c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001280:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001282:	4b30      	ldr	r3, [pc, #192]	; (8001344 <HAL_I2C_MspInit+0x174>)
 8001284:	2204      	movs	r2, #4
 8001286:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001288:	4b2e      	ldr	r3, [pc, #184]	; (8001344 <HAL_I2C_MspInit+0x174>)
 800128a:	2203      	movs	r2, #3
 800128c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_rx.Init.MemBurst = DMA_MBURST_INC4;
 800128e:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <HAL_I2C_MspInit+0x174>)
 8001290:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001294:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001296:	4b2b      	ldr	r3, [pc, #172]	; (8001344 <HAL_I2C_MspInit+0x174>)
 8001298:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800129c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800129e:	4829      	ldr	r0, [pc, #164]	; (8001344 <HAL_I2C_MspInit+0x174>)
 80012a0:	f001 f844 	bl	800232c <HAL_DMA_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_I2C_MspInit+0xde>
    {
      Error_Handler();
 80012aa:	f7ff fee9 	bl	8001080 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a24      	ldr	r2, [pc, #144]	; (8001344 <HAL_I2C_MspInit+0x174>)
 80012b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80012b4:	4a23      	ldr	r2, [pc, #140]	; (8001344 <HAL_I2C_MspInit+0x174>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80012ba:	4b24      	ldr	r3, [pc, #144]	; (800134c <HAL_I2C_MspInit+0x17c>)
 80012bc:	4a24      	ldr	r2, [pc, #144]	; (8001350 <HAL_I2C_MspInit+0x180>)
 80012be:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80012c0:	4b22      	ldr	r3, [pc, #136]	; (800134c <HAL_I2C_MspInit+0x17c>)
 80012c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012c6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012c8:	4b20      	ldr	r3, [pc, #128]	; (800134c <HAL_I2C_MspInit+0x17c>)
 80012ca:	2240      	movs	r2, #64	; 0x40
 80012cc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ce:	4b1f      	ldr	r3, [pc, #124]	; (800134c <HAL_I2C_MspInit+0x17c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012d4:	4b1d      	ldr	r3, [pc, #116]	; (800134c <HAL_I2C_MspInit+0x17c>)
 80012d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012da:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <HAL_I2C_MspInit+0x17c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012e2:	4b1a      	ldr	r3, [pc, #104]	; (800134c <HAL_I2C_MspInit+0x17c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80012e8:	4b18      	ldr	r3, [pc, #96]	; (800134c <HAL_I2C_MspInit+0x17c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <HAL_I2C_MspInit+0x17c>)
 80012f0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80012f4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <HAL_I2C_MspInit+0x17c>)
 80012f8:	2204      	movs	r2, #4
 80012fa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80012fc:	4b13      	ldr	r3, [pc, #76]	; (800134c <HAL_I2C_MspInit+0x17c>)
 80012fe:	2203      	movs	r2, #3
 8001300:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001302:	4b12      	ldr	r3, [pc, #72]	; (800134c <HAL_I2C_MspInit+0x17c>)
 8001304:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001308:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <HAL_I2C_MspInit+0x17c>)
 800130c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001310:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001312:	480e      	ldr	r0, [pc, #56]	; (800134c <HAL_I2C_MspInit+0x17c>)
 8001314:	f001 f80a 	bl	800232c <HAL_DMA_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_I2C_MspInit+0x152>
    {
      Error_Handler();
 800131e:	f7ff feaf 	bl	8001080 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a09      	ldr	r2, [pc, #36]	; (800134c <HAL_I2C_MspInit+0x17c>)
 8001326:	639a      	str	r2, [r3, #56]	; 0x38
 8001328:	4a08      	ldr	r2, [pc, #32]	; (800134c <HAL_I2C_MspInit+0x17c>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800132e:	bf00      	nop
 8001330:	3728      	adds	r7, #40	; 0x28
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40005400 	.word	0x40005400
 800133c:	40023800 	.word	0x40023800
 8001340:	40020400 	.word	0x40020400
 8001344:	200002b4 	.word	0x200002b4
 8001348:	40026088 	.word	0x40026088
 800134c:	20000158 	.word	0x20000158
 8001350:	400260a0 	.word	0x400260a0

08001354 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a21      	ldr	r2, [pc, #132]	; (80013e8 <HAL_TIM_OC_MspInit+0x94>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d13c      	bne.n	80013e0 <HAL_TIM_OC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001366:	4b21      	ldr	r3, [pc, #132]	; (80013ec <HAL_TIM_OC_MspInit+0x98>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	4a20      	ldr	r2, [pc, #128]	; (80013ec <HAL_TIM_OC_MspInit+0x98>)
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	6413      	str	r3, [r2, #64]	; 0x40
 8001372:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <HAL_TIM_OC_MspInit+0x98>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <HAL_TIM_OC_MspInit+0x9c>)
 8001380:	4a1c      	ldr	r2, [pc, #112]	; (80013f4 <HAL_TIM_OC_MspInit+0xa0>)
 8001382:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8001384:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <HAL_TIM_OC_MspInit+0x9c>)
 8001386:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800138a:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800138c:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <HAL_TIM_OC_MspInit+0x9c>)
 800138e:	2240      	movs	r2, #64	; 0x40
 8001390:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001392:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <HAL_TIM_OC_MspInit+0x9c>)
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <HAL_TIM_OC_MspInit+0x9c>)
 800139a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800139e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013a0:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <HAL_TIM_OC_MspInit+0x9c>)
 80013a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013a6:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <HAL_TIM_OC_MspInit+0x9c>)
 80013aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ae:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <HAL_TIM_OC_MspInit+0x9c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <HAL_TIM_OC_MspInit+0x9c>)
 80013b8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80013bc:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <HAL_TIM_OC_MspInit+0x9c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 80013c4:	480a      	ldr	r0, [pc, #40]	; (80013f0 <HAL_TIM_OC_MspInit+0x9c>)
 80013c6:	f000 ffb1 	bl	800232c <HAL_DMA_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <HAL_TIM_OC_MspInit+0x80>
    {
      Error_Handler();
 80013d0:	f7ff fe56 	bl	8001080 <Error_Handler>
    }

    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a06      	ldr	r2, [pc, #24]	; (80013f0 <HAL_TIM_OC_MspInit+0x9c>)
 80013d8:	625a      	str	r2, [r3, #36]	; 0x24
 80013da:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <HAL_TIM_OC_MspInit+0x9c>)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80013e0:	bf00      	nop
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40000800 	.word	0x40000800
 80013ec:	40023800 	.word	0x40023800
 80013f0:	2000032c 	.word	0x2000032c
 80013f4:	40026010 	.word	0x40026010

080013f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a11      	ldr	r2, [pc, #68]	; (800145c <HAL_TIM_MspPostInit+0x64>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d11c      	bne.n	8001454 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800141a:	4b11      	ldr	r3, [pc, #68]	; (8001460 <HAL_TIM_MspPostInit+0x68>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a10      	ldr	r2, [pc, #64]	; (8001460 <HAL_TIM_MspPostInit+0x68>)
 8001420:	f043 0308 	orr.w	r3, r3, #8
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <HAL_TIM_MspPostInit+0x68>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = TIM4_CH1_DMA_LATCH_Pin|TIM4_CH2_MOTOR_1_Pin|TIM4_CH3_MOTOR_2_Pin;
 8001432:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001436:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001444:	2302      	movs	r3, #2
 8001446:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	4619      	mov	r1, r3
 800144e:	4805      	ldr	r0, [pc, #20]	; (8001464 <HAL_TIM_MspPostInit+0x6c>)
 8001450:	f001 fb10 	bl	8002a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001454:	bf00      	nop
 8001456:	3720      	adds	r7, #32
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40000800 	.word	0x40000800
 8001460:	40023800 	.word	0x40023800
 8001464:	40020c00 	.word	0x40020c00

08001468 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	; 0x28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a17      	ldr	r2, [pc, #92]	; (80014e4 <HAL_UART_MspInit+0x7c>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d128      	bne.n	80014dc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800148a:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <HAL_UART_MspInit+0x80>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	4a16      	ldr	r2, [pc, #88]	; (80014e8 <HAL_UART_MspInit+0x80>)
 8001490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001494:	6413      	str	r3, [r2, #64]	; 0x40
 8001496:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <HAL_UART_MspInit+0x80>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <HAL_UART_MspInit+0x80>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a10      	ldr	r2, [pc, #64]	; (80014e8 <HAL_UART_MspInit+0x80>)
 80014a8:	f043 0308 	orr.w	r3, r3, #8
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <HAL_UART_MspInit+0x80>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80014ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c8:	2303      	movs	r3, #3
 80014ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014cc:	2307      	movs	r3, #7
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <HAL_UART_MspInit+0x84>)
 80014d8:	f001 facc 	bl	8002a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014dc:	bf00      	nop
 80014de:	3728      	adds	r7, #40	; 0x28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40004800 	.word	0x40004800
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020c00 	.word	0x40020c00

080014f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001502:	e7fe      	b.n	8001502 <HardFault_Handler+0x4>

08001504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <MemManage_Handler+0x4>

0800150a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150e:	e7fe      	b.n	800150e <BusFault_Handler+0x4>

08001510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <UsageFault_Handler+0x4>

08001516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001544:	f000 f8dc 	bl	8001700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}

0800154c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <DMA1_Stream0_IRQHandler+0x10>)
 8001552:	f001 f81b 	bl	800258c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	2000032c 	.word	0x2000032c

08001560 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001564:	4802      	ldr	r0, [pc, #8]	; (8001570 <DMA1_Stream5_IRQHandler+0x10>)
 8001566:	f001 f811 	bl	800258c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200002b4 	.word	0x200002b4

08001574 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001578:	4802      	ldr	r0, [pc, #8]	; (8001584 <DMA1_Stream6_IRQHandler+0x10>)
 800157a:	f001 f807 	bl	800258c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000158 	.word	0x20000158

08001588 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800158c:	4802      	ldr	r0, [pc, #8]	; (8001598 <DMA2_Stream4_IRQHandler+0x10>)
 800158e:	f000 fffd 	bl	800258c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000254 	.word	0x20000254

0800159c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a4:	4a14      	ldr	r2, [pc, #80]	; (80015f8 <_sbrk+0x5c>)
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <_sbrk+0x60>)
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d102      	bne.n	80015be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <_sbrk+0x64>)
 80015ba:	4a12      	ldr	r2, [pc, #72]	; (8001604 <_sbrk+0x68>)
 80015bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d207      	bcs.n	80015dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015cc:	f005 fdc6 	bl	800715c <__errno>
 80015d0:	4602      	mov	r2, r0
 80015d2:	230c      	movs	r3, #12
 80015d4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	e009      	b.n	80015f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015e2:	4b07      	ldr	r3, [pc, #28]	; (8001600 <_sbrk+0x64>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	4a05      	ldr	r2, [pc, #20]	; (8001600 <_sbrk+0x64>)
 80015ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ee:	68fb      	ldr	r3, [r7, #12]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20040000 	.word	0x20040000
 80015fc:	00000400 	.word	0x00000400
 8001600:	2000008c 	.word	0x2000008c
 8001604:	200003a0 	.word	0x200003a0

08001608 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <SystemInit+0x28>)
 800160e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001612:	4a07      	ldr	r2, [pc, #28]	; (8001630 <SystemInit+0x28>)
 8001614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800161c:	4b04      	ldr	r3, [pc, #16]	; (8001630 <SystemInit+0x28>)
 800161e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001622:	609a      	str	r2, [r3, #8]
#endif
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001634:	f8df d034 	ldr.w	sp, [pc, #52]	; 800166c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001638:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800163a:	e003      	b.n	8001644 <LoopCopyDataInit>

0800163c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800163e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001640:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001642:	3104      	adds	r1, #4

08001644 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001644:	480b      	ldr	r0, [pc, #44]	; (8001674 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001648:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800164a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800164c:	d3f6      	bcc.n	800163c <CopyDataInit>
  ldr  r2, =_sbss
 800164e:	4a0b      	ldr	r2, [pc, #44]	; (800167c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001650:	e002      	b.n	8001658 <LoopFillZerobss>

08001652 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001652:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001654:	f842 3b04 	str.w	r3, [r2], #4

08001658 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800165a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800165c:	d3f9      	bcc.n	8001652 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800165e:	f7ff ffd3 	bl	8001608 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001662:	f005 fd81 	bl	8007168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001666:	f7ff f985 	bl	8000974 <main>
  bx  lr    
 800166a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800166c:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8001670:	08007a70 	.word	0x08007a70
  ldr  r0, =_sdata
 8001674:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001678:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800167c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001680:	200003a0 	.word	0x200003a0

08001684 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001684:	e7fe      	b.n	8001684 <ADC_IRQHandler>

08001686 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800168a:	2003      	movs	r0, #3
 800168c:	f000 fe0c 	bl	80022a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001690:	2000      	movs	r0, #0
 8001692:	f000 f805 	bl	80016a0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001696:	f7ff fcfb 	bl	8001090 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <HAL_InitTick+0x54>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_InitTick+0x58>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	4619      	mov	r1, r3
 80016b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 fe27 	bl	8002312 <HAL_SYSTICK_Config>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e00e      	b.n	80016ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b0f      	cmp	r3, #15
 80016d2:	d80a      	bhi.n	80016ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d4:	2200      	movs	r2, #0
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295
 80016dc:	f000 fdef 	bl	80022be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e0:	4a06      	ldr	r2, [pc, #24]	; (80016fc <HAL_InitTick+0x5c>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e000      	b.n	80016ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000000 	.word	0x20000000
 80016f8:	20000008 	.word	0x20000008
 80016fc:	20000004 	.word	0x20000004

08001700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_IncTick+0x20>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_IncTick+0x24>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4413      	add	r3, r2
 8001710:	4a04      	ldr	r2, [pc, #16]	; (8001724 <HAL_IncTick+0x24>)
 8001712:	6013      	str	r3, [r2, #0]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20000008 	.word	0x20000008
 8001724:	20000398 	.word	0x20000398

08001728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return uwTick;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <HAL_GetTick+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20000398 	.word	0x20000398

08001740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001748:	f7ff ffee 	bl	8001728 <HAL_GetTick>
 800174c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001758:	d005      	beq.n	8001766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <HAL_Delay+0x40>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4413      	add	r3, r2
 8001764:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001766:	bf00      	nop
 8001768:	f7ff ffde 	bl	8001728 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	429a      	cmp	r2, r3
 8001776:	d8f7      	bhi.n	8001768 <HAL_Delay+0x28>
  {
  }
}
 8001778:	bf00      	nop
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000008 	.word	0x20000008

08001784 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800178c:	2300      	movs	r3, #0
 800178e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e031      	b.n	80017fe <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d109      	bne.n	80017b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff fc98 	bl	80010d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 0310 	and.w	r3, r3, #16
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d116      	bne.n	80017f0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <HAL_ADC_Init+0x84>)
 80017c8:	4013      	ands	r3, r2
 80017ca:	f043 0202 	orr.w	r2, r3, #2
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 fb1c 	bl	8001e10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f023 0303 	bic.w	r3, r3, #3
 80017e6:	f043 0201 	orr.w	r2, r3, #1
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	641a      	str	r2, [r3, #64]	; 0x40
 80017ee:	e001      	b.n	80017f4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	ffffeefd 	.word	0xffffeefd

0800180c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800181e:	2b01      	cmp	r3, #1
 8001820:	d101      	bne.n	8001826 <HAL_ADC_Start+0x1a>
 8001822:	2302      	movs	r3, #2
 8001824:	e0a0      	b.n	8001968 <HAL_ADC_Start+0x15c>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b01      	cmp	r3, #1
 800183a:	d018      	beq.n	800186e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f042 0201 	orr.w	r2, r2, #1
 800184a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800184c:	4b49      	ldr	r3, [pc, #292]	; (8001974 <HAL_ADC_Start+0x168>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a49      	ldr	r2, [pc, #292]	; (8001978 <HAL_ADC_Start+0x16c>)
 8001852:	fba2 2303 	umull	r2, r3, r2, r3
 8001856:	0c9a      	lsrs	r2, r3, #18
 8001858:	4613      	mov	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001860:	e002      	b.n	8001868 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	3b01      	subs	r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f9      	bne.n	8001862 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b01      	cmp	r3, #1
 800187a:	d174      	bne.n	8001966 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001880:	4b3e      	ldr	r3, [pc, #248]	; (800197c <HAL_ADC_Start+0x170>)
 8001882:	4013      	ands	r3, r2
 8001884:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001896:	2b00      	cmp	r3, #0
 8001898:	d007      	beq.n	80018aa <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018b6:	d106      	bne.n	80018c6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018bc:	f023 0206 	bic.w	r2, r3, #6
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	645a      	str	r2, [r3, #68]	; 0x44
 80018c4:	e002      	b.n	80018cc <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018dc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80018de:	4b28      	ldr	r3, [pc, #160]	; (8001980 <HAL_ADC_Start+0x174>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 031f 	and.w	r3, r3, #31
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10f      	bne.n	800190a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d136      	bne.n	8001966 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	e02d      	b.n	8001966 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a1d      	ldr	r2, [pc, #116]	; (8001984 <HAL_ADC_Start+0x178>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d10e      	bne.n	8001932 <HAL_ADC_Start+0x126>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d107      	bne.n	8001932 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001930:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001932:	4b13      	ldr	r3, [pc, #76]	; (8001980 <HAL_ADC_Start+0x174>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 0310 	and.w	r3, r3, #16
 800193a:	2b00      	cmp	r3, #0
 800193c:	d113      	bne.n	8001966 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a11      	ldr	r2, [pc, #68]	; (8001988 <HAL_ADC_Start+0x17c>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d10e      	bne.n	8001966 <HAL_ADC_Start+0x15a>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d107      	bne.n	8001966 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001964:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	20000000 	.word	0x20000000
 8001978:	431bde83 	.word	0x431bde83
 800197c:	fffff8fe 	.word	0xfffff8fe
 8001980:	40012300 	.word	0x40012300
 8001984:	40012000 	.word	0x40012000
 8001988:	40012200 	.word	0x40012200

0800198c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d101      	bne.n	80019aa <HAL_ADC_Start_DMA+0x1e>
 80019a6:	2302      	movs	r3, #2
 80019a8:	e0c7      	b.n	8001b3a <HAL_ADC_Start_DMA+0x1ae>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d018      	beq.n	80019f2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f042 0201 	orr.w	r2, r2, #1
 80019ce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80019d0:	4b5c      	ldr	r3, [pc, #368]	; (8001b44 <HAL_ADC_Start_DMA+0x1b8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a5c      	ldr	r2, [pc, #368]	; (8001b48 <HAL_ADC_Start_DMA+0x1bc>)
 80019d6:	fba2 2303 	umull	r2, r3, r2, r3
 80019da:	0c9a      	lsrs	r2, r3, #18
 80019dc:	4613      	mov	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	4413      	add	r3, r2
 80019e2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80019e4:	e002      	b.n	80019ec <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	3b01      	subs	r3, #1
 80019ea:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f9      	bne.n	80019e6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	f040 809b 	bne.w	8001b38 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a06:	4b51      	ldr	r3, [pc, #324]	; (8001b4c <HAL_ADC_Start_DMA+0x1c0>)
 8001a08:	4013      	ands	r3, r2
 8001a0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d007      	beq.n	8001a30 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a28:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a3c:	d106      	bne.n	8001a4c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	f023 0206 	bic.w	r2, r3, #6
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	645a      	str	r2, [r3, #68]	; 0x44
 8001a4a:	e002      	b.n	8001a52 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a5e:	4a3c      	ldr	r2, [pc, #240]	; (8001b50 <HAL_ADC_Start_DMA+0x1c4>)
 8001a60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a66:	4a3b      	ldr	r2, [pc, #236]	; (8001b54 <HAL_ADC_Start_DMA+0x1c8>)
 8001a68:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6e:	4a3a      	ldr	r2, [pc, #232]	; (8001b58 <HAL_ADC_Start_DMA+0x1cc>)
 8001a70:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a7a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001a8a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a9a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	334c      	adds	r3, #76	; 0x4c
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f000 fcec 	bl	8002488 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001ab0:	4b2a      	ldr	r3, [pc, #168]	; (8001b5c <HAL_ADC_Start_DMA+0x1d0>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 031f 	and.w	r3, r3, #31
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10f      	bne.n	8001adc <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d136      	bne.n	8001b38 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	e02d      	b.n	8001b38 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a1f      	ldr	r2, [pc, #124]	; (8001b60 <HAL_ADC_Start_DMA+0x1d4>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d10e      	bne.n	8001b04 <HAL_ADC_Start_DMA+0x178>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d107      	bne.n	8001b04 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b02:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001b04:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <HAL_ADC_Start_DMA+0x1d0>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0310 	and.w	r3, r3, #16
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d113      	bne.n	8001b38 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a13      	ldr	r2, [pc, #76]	; (8001b64 <HAL_ADC_Start_DMA+0x1d8>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d10e      	bne.n	8001b38 <HAL_ADC_Start_DMA+0x1ac>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d107      	bne.n	8001b38 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b36:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000000 	.word	0x20000000
 8001b48:	431bde83 	.word	0x431bde83
 8001b4c:	fffff8fe 	.word	0xfffff8fe
 8001b50:	08002005 	.word	0x08002005
 8001b54:	080020bf 	.word	0x080020bf
 8001b58:	080020db 	.word	0x080020db
 8001b5c:	40012300 	.word	0x40012300
 8001b60:	40012000 	.word	0x40012000
 8001b64:	40012200 	.word	0x40012200

08001b68 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d101      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x1c>
 8001b94:	2302      	movs	r3, #2
 8001b96:	e12a      	b.n	8001dee <HAL_ADC_ConfigChannel+0x272>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b09      	cmp	r3, #9
 8001ba6:	d93a      	bls.n	8001c1e <HAL_ADC_ConfigChannel+0xa2>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001bb0:	d035      	beq.n	8001c1e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68d9      	ldr	r1, [r3, #12]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3b1e      	subs	r3, #30
 8001bc8:	2207      	movs	r2, #7
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	400a      	ands	r2, r1
 8001bd6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a87      	ldr	r2, [pc, #540]	; (8001dfc <HAL_ADC_ConfigChannel+0x280>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d10a      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68d9      	ldr	r1, [r3, #12]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	061a      	lsls	r2, r3, #24
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bf6:	e035      	b.n	8001c64 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68d9      	ldr	r1, [r3, #12]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	4618      	mov	r0, r3
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	4403      	add	r3, r0
 8001c10:	3b1e      	subs	r3, #30
 8001c12:	409a      	lsls	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c1c:	e022      	b.n	8001c64 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6919      	ldr	r1, [r3, #16]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	4413      	add	r3, r2
 8001c32:	2207      	movs	r2, #7
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43da      	mvns	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	400a      	ands	r2, r1
 8001c40:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6919      	ldr	r1, [r3, #16]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	4618      	mov	r0, r3
 8001c54:	4603      	mov	r3, r0
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	4403      	add	r3, r0
 8001c5a:	409a      	lsls	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b06      	cmp	r3, #6
 8001c6a:	d824      	bhi.n	8001cb6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	4613      	mov	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	3b05      	subs	r3, #5
 8001c7e:	221f      	movs	r2, #31
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43da      	mvns	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	400a      	ands	r2, r1
 8001c8c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3b05      	subs	r3, #5
 8001ca8:	fa00 f203 	lsl.w	r2, r0, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	635a      	str	r2, [r3, #52]	; 0x34
 8001cb4:	e04c      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b0c      	cmp	r3, #12
 8001cbc:	d824      	bhi.n	8001d08 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	3b23      	subs	r3, #35	; 0x23
 8001cd0:	221f      	movs	r2, #31
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43da      	mvns	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	400a      	ands	r2, r1
 8001cde:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	4618      	mov	r0, r3
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3b23      	subs	r3, #35	; 0x23
 8001cfa:	fa00 f203 	lsl.w	r2, r0, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	631a      	str	r2, [r3, #48]	; 0x30
 8001d06:	e023      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	3b41      	subs	r3, #65	; 0x41
 8001d1a:	221f      	movs	r2, #31
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43da      	mvns	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	400a      	ands	r2, r1
 8001d28:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	4618      	mov	r0, r3
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	3b41      	subs	r3, #65	; 0x41
 8001d44:	fa00 f203 	lsl.w	r2, r0, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a2a      	ldr	r2, [pc, #168]	; (8001e00 <HAL_ADC_ConfigChannel+0x284>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d10a      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x1f4>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d62:	d105      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001d64:	4b27      	ldr	r3, [pc, #156]	; (8001e04 <HAL_ADC_ConfigChannel+0x288>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	4a26      	ldr	r2, [pc, #152]	; (8001e04 <HAL_ADC_ConfigChannel+0x288>)
 8001d6a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001d6e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a22      	ldr	r2, [pc, #136]	; (8001e00 <HAL_ADC_ConfigChannel+0x284>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d109      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x212>
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2b12      	cmp	r3, #18
 8001d80:	d105      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001d82:	4b20      	ldr	r3, [pc, #128]	; (8001e04 <HAL_ADC_ConfigChannel+0x288>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	4a1f      	ldr	r2, [pc, #124]	; (8001e04 <HAL_ADC_ConfigChannel+0x288>)
 8001d88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d8c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a1b      	ldr	r2, [pc, #108]	; (8001e00 <HAL_ADC_ConfigChannel+0x284>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d125      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x268>
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a17      	ldr	r2, [pc, #92]	; (8001dfc <HAL_ADC_ConfigChannel+0x280>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d003      	beq.n	8001daa <HAL_ADC_ConfigChannel+0x22e>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2b11      	cmp	r3, #17
 8001da8:	d11c      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001daa:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <HAL_ADC_ConfigChannel+0x288>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	4a15      	ldr	r2, [pc, #84]	; (8001e04 <HAL_ADC_ConfigChannel+0x288>)
 8001db0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001db4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a10      	ldr	r2, [pc, #64]	; (8001dfc <HAL_ADC_ConfigChannel+0x280>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d111      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001dc0:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <HAL_ADC_ConfigChannel+0x28c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a11      	ldr	r2, [pc, #68]	; (8001e0c <HAL_ADC_ConfigChannel+0x290>)
 8001dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dca:	0c9a      	lsrs	r2, r3, #18
 8001dcc:	4613      	mov	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001dd6:	e002      	b.n	8001dde <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f9      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	10000012 	.word	0x10000012
 8001e00:	40012000 	.word	0x40012000
 8001e04:	40012300 	.word	0x40012300
 8001e08:	20000000 	.word	0x20000000
 8001e0c:	431bde83 	.word	0x431bde83

08001e10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001e18:	4b78      	ldr	r3, [pc, #480]	; (8001ffc <ADC_Init+0x1ec>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	4a77      	ldr	r2, [pc, #476]	; (8001ffc <ADC_Init+0x1ec>)
 8001e1e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001e22:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001e24:	4b75      	ldr	r3, [pc, #468]	; (8001ffc <ADC_Init+0x1ec>)
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	4973      	ldr	r1, [pc, #460]	; (8001ffc <ADC_Init+0x1ec>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6859      	ldr	r1, [r3, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	021a      	lsls	r2, r3, #8
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6859      	ldr	r1, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6899      	ldr	r1, [r3, #8]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9e:	4a58      	ldr	r2, [pc, #352]	; (8002000 <ADC_Init+0x1f0>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d022      	beq.n	8001eea <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001eb2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6899      	ldr	r1, [r3, #8]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ed4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6899      	ldr	r1, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	e00f      	b.n	8001f0a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ef8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0202 	bic.w	r2, r2, #2
 8001f18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6899      	ldr	r1, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	005a      	lsls	r2, r3, #1
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d01b      	beq.n	8001f70 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6859      	ldr	r1, [r3, #4]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	3b01      	subs	r3, #1
 8001f64:	035a      	lsls	r2, r3, #13
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	e007      	b.n	8001f80 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	051a      	lsls	r2, r3, #20
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6899      	ldr	r1, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fc2:	025a      	lsls	r2, r3, #9
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6899      	ldr	r1, [r3, #8]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	029a      	lsls	r2, r3, #10
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	609a      	str	r2, [r3, #8]
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	40012300 	.word	0x40012300
 8002000:	0f000001 	.word	0x0f000001

08002004 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002010:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800201a:	2b00      	cmp	r3, #0
 800201c:	d13c      	bne.n	8002098 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d12b      	bne.n	8002090 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800203c:	2b00      	cmp	r3, #0
 800203e:	d127      	bne.n	8002090 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002046:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800204a:	2b00      	cmp	r3, #0
 800204c:	d006      	beq.n	800205c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002058:	2b00      	cmp	r3, #0
 800205a:	d119      	bne.n	8002090 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0220 	bic.w	r2, r2, #32
 800206a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002070:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d105      	bne.n	8002090 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	f043 0201 	orr.w	r2, r3, #1
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f7fe ffea 	bl	800106a <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002096:	e00e      	b.n	80020b6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	f003 0310 	and.w	r3, r3, #16
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f7ff fd5f 	bl	8001b68 <HAL_ADC_ErrorCallback>
}
 80020aa:	e004      	b.n	80020b6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	4798      	blx	r3
}
 80020b6:	bf00      	nop
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b084      	sub	sp, #16
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ca:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f7fe ffc1 	bl	8001054 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020d2:	bf00      	nop
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b084      	sub	sp, #16
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2240      	movs	r2, #64	; 0x40
 80020ec:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	f043 0204 	orr.w	r2, r3, #4
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f7ff fd34 	bl	8001b68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002100:	bf00      	nop
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <__NVIC_SetPriorityGrouping+0x40>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002124:	4013      	ands	r3, r2
 8002126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <__NVIC_SetPriorityGrouping+0x44>)
 8002132:	4313      	orrs	r3, r2
 8002134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002136:	4a04      	ldr	r2, [pc, #16]	; (8002148 <__NVIC_SetPriorityGrouping+0x40>)
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	60d3      	str	r3, [r2, #12]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	e000ed00 	.word	0xe000ed00
 800214c:	05fa0000 	.word	0x05fa0000

08002150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002154:	4b04      	ldr	r3, [pc, #16]	; (8002168 <__NVIC_GetPriorityGrouping+0x18>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	0a1b      	lsrs	r3, r3, #8
 800215a:	f003 0307 	and.w	r3, r3, #7
}
 800215e:	4618      	mov	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	2b00      	cmp	r3, #0
 800217c:	db0b      	blt.n	8002196 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	f003 021f 	and.w	r2, r3, #31
 8002184:	4907      	ldr	r1, [pc, #28]	; (80021a4 <__NVIC_EnableIRQ+0x38>)
 8002186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218a:	095b      	lsrs	r3, r3, #5
 800218c:	2001      	movs	r0, #1
 800218e:	fa00 f202 	lsl.w	r2, r0, r2
 8002192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	e000e100 	.word	0xe000e100

080021a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	6039      	str	r1, [r7, #0]
 80021b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	db0a      	blt.n	80021d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	490c      	ldr	r1, [pc, #48]	; (80021f4 <__NVIC_SetPriority+0x4c>)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	0112      	lsls	r2, r2, #4
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	440b      	add	r3, r1
 80021cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d0:	e00a      	b.n	80021e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4908      	ldr	r1, [pc, #32]	; (80021f8 <__NVIC_SetPriority+0x50>)
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	3b04      	subs	r3, #4
 80021e0:	0112      	lsls	r2, r2, #4
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	440b      	add	r3, r1
 80021e6:	761a      	strb	r2, [r3, #24]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000e100 	.word	0xe000e100
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b089      	sub	sp, #36	; 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f1c3 0307 	rsb	r3, r3, #7
 8002216:	2b04      	cmp	r3, #4
 8002218:	bf28      	it	cs
 800221a:	2304      	movcs	r3, #4
 800221c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3304      	adds	r3, #4
 8002222:	2b06      	cmp	r3, #6
 8002224:	d902      	bls.n	800222c <NVIC_EncodePriority+0x30>
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3b03      	subs	r3, #3
 800222a:	e000      	b.n	800222e <NVIC_EncodePriority+0x32>
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002230:	f04f 32ff 	mov.w	r2, #4294967295
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43da      	mvns	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	401a      	ands	r2, r3
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002244:	f04f 31ff 	mov.w	r1, #4294967295
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	fa01 f303 	lsl.w	r3, r1, r3
 800224e:	43d9      	mvns	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002254:	4313      	orrs	r3, r2
         );
}
 8002256:	4618      	mov	r0, r3
 8002258:	3724      	adds	r7, #36	; 0x24
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3b01      	subs	r3, #1
 8002270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002274:	d301      	bcc.n	800227a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002276:	2301      	movs	r3, #1
 8002278:	e00f      	b.n	800229a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800227a:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <SysTick_Config+0x40>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002282:	210f      	movs	r1, #15
 8002284:	f04f 30ff 	mov.w	r0, #4294967295
 8002288:	f7ff ff8e 	bl	80021a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <SysTick_Config+0x40>)
 800228e:	2200      	movs	r2, #0
 8002290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002292:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <SysTick_Config+0x40>)
 8002294:	2207      	movs	r2, #7
 8002296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	e000e010 	.word	0xe000e010

080022a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff ff29 	bl	8002108 <__NVIC_SetPriorityGrouping>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022be:	b580      	push	{r7, lr}
 80022c0:	b086      	sub	sp, #24
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	607a      	str	r2, [r7, #4]
 80022ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022d0:	f7ff ff3e 	bl	8002150 <__NVIC_GetPriorityGrouping>
 80022d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68b9      	ldr	r1, [r7, #8]
 80022da:	6978      	ldr	r0, [r7, #20]
 80022dc:	f7ff ff8e 	bl	80021fc <NVIC_EncodePriority>
 80022e0:	4602      	mov	r2, r0
 80022e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ff5d 	bl	80021a8 <__NVIC_SetPriority>
}
 80022ee:	bf00      	nop
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	4603      	mov	r3, r0
 80022fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff31 	bl	800216c <__NVIC_EnableIRQ>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff ffa2 	bl	8002264 <SysTick_Config>
 8002320:	4603      	mov	r3, r0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002338:	f7ff f9f6 	bl	8001728 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e099      	b.n	800247c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2202      	movs	r2, #2
 8002354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0201 	bic.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002368:	e00f      	b.n	800238a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800236a:	f7ff f9dd 	bl	8001728 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b05      	cmp	r3, #5
 8002376:	d908      	bls.n	800238a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2220      	movs	r2, #32
 800237c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2203      	movs	r2, #3
 8002382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e078      	b.n	800247c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1e8      	bne.n	800236a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	4b38      	ldr	r3, [pc, #224]	; (8002484 <HAL_DMA_Init+0x158>)
 80023a4:	4013      	ands	r3, r2
 80023a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	4313      	orrs	r3, r2
 80023da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d107      	bne.n	80023f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	4313      	orrs	r3, r2
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f023 0307 	bic.w	r3, r3, #7
 800240a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	4313      	orrs	r3, r2
 8002414:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	2b04      	cmp	r3, #4
 800241c:	d117      	bne.n	800244e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	4313      	orrs	r3, r2
 8002426:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00e      	beq.n	800244e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 faa5 	bl	8002980 <DMA_CheckFifoParam>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d008      	beq.n	800244e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2240      	movs	r2, #64	; 0x40
 8002440:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800244a:	2301      	movs	r3, #1
 800244c:	e016      	b.n	800247c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 fa5c 	bl	8002914 <DMA_CalcBaseAndBitshift>
 800245c:	4603      	mov	r3, r0
 800245e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002464:	223f      	movs	r2, #63	; 0x3f
 8002466:	409a      	lsls	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	e010803f 	.word	0xe010803f

08002488 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
 8002494:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <HAL_DMA_Start_IT+0x26>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e048      	b.n	8002540 <HAL_DMA_Start_IT+0xb8>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d137      	bne.n	8002532 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2202      	movs	r2, #2
 80024c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	68b9      	ldr	r1, [r7, #8]
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 f9ee 	bl	80028b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e0:	223f      	movs	r2, #63	; 0x3f
 80024e2:	409a      	lsls	r2, r3
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0216 	orr.w	r2, r2, #22
 80024f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695a      	ldr	r2, [r3, #20]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002506:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	2b00      	cmp	r3, #0
 800250e:	d007      	beq.n	8002520 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0208 	orr.w	r2, r2, #8
 800251e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	e005      	b.n	800253e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800253a:	2302      	movs	r3, #2
 800253c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800253e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d004      	beq.n	8002566 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2280      	movs	r2, #128	; 0x80
 8002560:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e00c      	b.n	8002580 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2205      	movs	r2, #5
 800256a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0201 	bic.w	r2, r2, #1
 800257c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002598:	4b92      	ldr	r3, [pc, #584]	; (80027e4 <HAL_DMA_IRQHandler+0x258>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a92      	ldr	r2, [pc, #584]	; (80027e8 <HAL_DMA_IRQHandler+0x25c>)
 800259e:	fba2 2303 	umull	r2, r3, r2, r3
 80025a2:	0a9b      	lsrs	r3, r3, #10
 80025a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b6:	2208      	movs	r2, #8
 80025b8:	409a      	lsls	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4013      	ands	r3, r2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d01a      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d013      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0204 	bic.w	r2, r2, #4
 80025de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e4:	2208      	movs	r2, #8
 80025e6:	409a      	lsls	r2, r3
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f0:	f043 0201 	orr.w	r2, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fc:	2201      	movs	r2, #1
 80025fe:	409a      	lsls	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4013      	ands	r3, r2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d012      	beq.n	800262e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00b      	beq.n	800262e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261a:	2201      	movs	r2, #1
 800261c:	409a      	lsls	r2, r3
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002626:	f043 0202 	orr.w	r2, r3, #2
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002632:	2204      	movs	r2, #4
 8002634:	409a      	lsls	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4013      	ands	r3, r2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d012      	beq.n	8002664 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00b      	beq.n	8002664 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002650:	2204      	movs	r2, #4
 8002652:	409a      	lsls	r2, r3
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265c:	f043 0204 	orr.w	r2, r3, #4
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002668:	2210      	movs	r2, #16
 800266a:	409a      	lsls	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4013      	ands	r3, r2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d043      	beq.n	80026fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d03c      	beq.n	80026fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002686:	2210      	movs	r2, #16
 8002688:	409a      	lsls	r2, r3
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d018      	beq.n	80026ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d108      	bne.n	80026bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d024      	beq.n	80026fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	4798      	blx	r3
 80026ba:	e01f      	b.n	80026fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d01b      	beq.n	80026fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	4798      	blx	r3
 80026cc:	e016      	b.n	80026fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d107      	bne.n	80026ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0208 	bic.w	r2, r2, #8
 80026ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002700:	2220      	movs	r2, #32
 8002702:	409a      	lsls	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 808e 	beq.w	800282a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0310 	and.w	r3, r3, #16
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 8086 	beq.w	800282a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002722:	2220      	movs	r2, #32
 8002724:	409a      	lsls	r2, r3
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b05      	cmp	r3, #5
 8002734:	d136      	bne.n	80027a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0216 	bic.w	r2, r2, #22
 8002744:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695a      	ldr	r2, [r3, #20]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002754:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	2b00      	cmp	r3, #0
 800275c:	d103      	bne.n	8002766 <HAL_DMA_IRQHandler+0x1da>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002762:	2b00      	cmp	r3, #0
 8002764:	d007      	beq.n	8002776 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0208 	bic.w	r2, r2, #8
 8002774:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277a:	223f      	movs	r2, #63	; 0x3f
 800277c:	409a      	lsls	r2, r3
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002796:	2b00      	cmp	r3, #0
 8002798:	d07d      	beq.n	8002896 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	4798      	blx	r3
        }
        return;
 80027a2:	e078      	b.n	8002896 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d01c      	beq.n	80027ec <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d108      	bne.n	80027d2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d030      	beq.n	800282a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	4798      	blx	r3
 80027d0:	e02b      	b.n	800282a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d027      	beq.n	800282a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	4798      	blx	r3
 80027e2:	e022      	b.n	800282a <HAL_DMA_IRQHandler+0x29e>
 80027e4:	20000000 	.word	0x20000000
 80027e8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10f      	bne.n	800281a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0210 	bic.w	r2, r2, #16
 8002808:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282e:	2b00      	cmp	r3, #0
 8002830:	d032      	beq.n	8002898 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d022      	beq.n	8002884 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2205      	movs	r2, #5
 8002842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0201 	bic.w	r2, r2, #1
 8002854:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	3301      	adds	r3, #1
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	429a      	cmp	r2, r3
 8002860:	d307      	bcc.n	8002872 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1f2      	bne.n	8002856 <HAL_DMA_IRQHandler+0x2ca>
 8002870:	e000      	b.n	8002874 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002872:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002888:	2b00      	cmp	r3, #0
 800288a:	d005      	beq.n	8002898 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	4798      	blx	r3
 8002894:	e000      	b.n	8002898 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002896:	bf00      	nop
    }
  }
}
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop

080028a0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
 80028c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2b40      	cmp	r3, #64	; 0x40
 80028e4:	d108      	bne.n	80028f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028f6:	e007      	b.n	8002908 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	60da      	str	r2, [r3, #12]
}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	3b10      	subs	r3, #16
 8002924:	4a13      	ldr	r2, [pc, #76]	; (8002974 <DMA_CalcBaseAndBitshift+0x60>)
 8002926:	fba2 2303 	umull	r2, r3, r2, r3
 800292a:	091b      	lsrs	r3, r3, #4
 800292c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800292e:	4a12      	ldr	r2, [pc, #72]	; (8002978 <DMA_CalcBaseAndBitshift+0x64>)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4413      	add	r3, r2
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	461a      	mov	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2b03      	cmp	r3, #3
 8002940:	d908      	bls.n	8002954 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	461a      	mov	r2, r3
 8002948:	4b0c      	ldr	r3, [pc, #48]	; (800297c <DMA_CalcBaseAndBitshift+0x68>)
 800294a:	4013      	ands	r3, r2
 800294c:	1d1a      	adds	r2, r3, #4
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	659a      	str	r2, [r3, #88]	; 0x58
 8002952:	e006      	b.n	8002962 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	461a      	mov	r2, r3
 800295a:	4b08      	ldr	r3, [pc, #32]	; (800297c <DMA_CalcBaseAndBitshift+0x68>)
 800295c:	4013      	ands	r3, r2
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002966:	4618      	mov	r0, r3
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	aaaaaaab 	.word	0xaaaaaaab
 8002978:	08007a24 	.word	0x08007a24
 800297c:	fffffc00 	.word	0xfffffc00

08002980 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002988:	2300      	movs	r3, #0
 800298a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d11f      	bne.n	80029da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b03      	cmp	r3, #3
 800299e:	d855      	bhi.n	8002a4c <DMA_CheckFifoParam+0xcc>
 80029a0:	a201      	add	r2, pc, #4	; (adr r2, 80029a8 <DMA_CheckFifoParam+0x28>)
 80029a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a6:	bf00      	nop
 80029a8:	080029b9 	.word	0x080029b9
 80029ac:	080029cb 	.word	0x080029cb
 80029b0:	080029b9 	.word	0x080029b9
 80029b4:	08002a4d 	.word	0x08002a4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d045      	beq.n	8002a50 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029c8:	e042      	b.n	8002a50 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029d2:	d13f      	bne.n	8002a54 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d8:	e03c      	b.n	8002a54 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029e2:	d121      	bne.n	8002a28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d836      	bhi.n	8002a58 <DMA_CheckFifoParam+0xd8>
 80029ea:	a201      	add	r2, pc, #4	; (adr r2, 80029f0 <DMA_CheckFifoParam+0x70>)
 80029ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f0:	08002a01 	.word	0x08002a01
 80029f4:	08002a07 	.word	0x08002a07
 80029f8:	08002a01 	.word	0x08002a01
 80029fc:	08002a19 	.word	0x08002a19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
      break;
 8002a04:	e02f      	b.n	8002a66 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d024      	beq.n	8002a5c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a16:	e021      	b.n	8002a5c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a20:	d11e      	bne.n	8002a60 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a26:	e01b      	b.n	8002a60 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d902      	bls.n	8002a34 <DMA_CheckFifoParam+0xb4>
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d003      	beq.n	8002a3a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a32:	e018      	b.n	8002a66 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
      break;
 8002a38:	e015      	b.n	8002a66 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00e      	beq.n	8002a64 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	73fb      	strb	r3, [r7, #15]
      break;
 8002a4a:	e00b      	b.n	8002a64 <DMA_CheckFifoParam+0xe4>
      break;
 8002a4c:	bf00      	nop
 8002a4e:	e00a      	b.n	8002a66 <DMA_CheckFifoParam+0xe6>
      break;
 8002a50:	bf00      	nop
 8002a52:	e008      	b.n	8002a66 <DMA_CheckFifoParam+0xe6>
      break;
 8002a54:	bf00      	nop
 8002a56:	e006      	b.n	8002a66 <DMA_CheckFifoParam+0xe6>
      break;
 8002a58:	bf00      	nop
 8002a5a:	e004      	b.n	8002a66 <DMA_CheckFifoParam+0xe6>
      break;
 8002a5c:	bf00      	nop
 8002a5e:	e002      	b.n	8002a66 <DMA_CheckFifoParam+0xe6>
      break;   
 8002a60:	bf00      	nop
 8002a62:	e000      	b.n	8002a66 <DMA_CheckFifoParam+0xe6>
      break;
 8002a64:	bf00      	nop
    }
  } 
  
  return status; 
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	; 0x24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a86:	2300      	movs	r3, #0
 8002a88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
 8002a92:	e169      	b.n	8002d68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a94:	2201      	movs	r2, #1
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	f040 8158 	bne.w	8002d62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d00b      	beq.n	8002ad2 <HAL_GPIO_Init+0x5e>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d007      	beq.n	8002ad2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ac6:	2b11      	cmp	r3, #17
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b12      	cmp	r3, #18
 8002ad0:	d130      	bne.n	8002b34 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	2203      	movs	r2, #3
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b08:	2201      	movs	r2, #1
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	091b      	lsrs	r3, r3, #4
 8002b1e:	f003 0201 	and.w	r2, r3, #1
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	2203      	movs	r2, #3
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d003      	beq.n	8002b74 <HAL_GPIO_Init+0x100>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b12      	cmp	r3, #18
 8002b72:	d123      	bne.n	8002bbc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	08da      	lsrs	r2, r3, #3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3208      	adds	r2, #8
 8002b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	220f      	movs	r2, #15
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	08da      	lsrs	r2, r3, #3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3208      	adds	r2, #8
 8002bb6:	69b9      	ldr	r1, [r7, #24]
 8002bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 0203 	and.w	r2, r3, #3
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 80b2 	beq.w	8002d62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bfe:	4b5f      	ldr	r3, [pc, #380]	; (8002d7c <HAL_GPIO_Init+0x308>)
 8002c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c02:	4a5e      	ldr	r2, [pc, #376]	; (8002d7c <HAL_GPIO_Init+0x308>)
 8002c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c08:	6453      	str	r3, [r2, #68]	; 0x44
 8002c0a:	4b5c      	ldr	r3, [pc, #368]	; (8002d7c <HAL_GPIO_Init+0x308>)
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c16:	4a5a      	ldr	r2, [pc, #360]	; (8002d80 <HAL_GPIO_Init+0x30c>)
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	089b      	lsrs	r3, r3, #2
 8002c1c:	3302      	adds	r3, #2
 8002c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	220f      	movs	r2, #15
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43db      	mvns	r3, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4013      	ands	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a51      	ldr	r2, [pc, #324]	; (8002d84 <HAL_GPIO_Init+0x310>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d02b      	beq.n	8002c9a <HAL_GPIO_Init+0x226>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a50      	ldr	r2, [pc, #320]	; (8002d88 <HAL_GPIO_Init+0x314>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d025      	beq.n	8002c96 <HAL_GPIO_Init+0x222>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a4f      	ldr	r2, [pc, #316]	; (8002d8c <HAL_GPIO_Init+0x318>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d01f      	beq.n	8002c92 <HAL_GPIO_Init+0x21e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a4e      	ldr	r2, [pc, #312]	; (8002d90 <HAL_GPIO_Init+0x31c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d019      	beq.n	8002c8e <HAL_GPIO_Init+0x21a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a4d      	ldr	r2, [pc, #308]	; (8002d94 <HAL_GPIO_Init+0x320>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d013      	beq.n	8002c8a <HAL_GPIO_Init+0x216>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a4c      	ldr	r2, [pc, #304]	; (8002d98 <HAL_GPIO_Init+0x324>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00d      	beq.n	8002c86 <HAL_GPIO_Init+0x212>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a4b      	ldr	r2, [pc, #300]	; (8002d9c <HAL_GPIO_Init+0x328>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d007      	beq.n	8002c82 <HAL_GPIO_Init+0x20e>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a4a      	ldr	r2, [pc, #296]	; (8002da0 <HAL_GPIO_Init+0x32c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d101      	bne.n	8002c7e <HAL_GPIO_Init+0x20a>
 8002c7a:	2307      	movs	r3, #7
 8002c7c:	e00e      	b.n	8002c9c <HAL_GPIO_Init+0x228>
 8002c7e:	2308      	movs	r3, #8
 8002c80:	e00c      	b.n	8002c9c <HAL_GPIO_Init+0x228>
 8002c82:	2306      	movs	r3, #6
 8002c84:	e00a      	b.n	8002c9c <HAL_GPIO_Init+0x228>
 8002c86:	2305      	movs	r3, #5
 8002c88:	e008      	b.n	8002c9c <HAL_GPIO_Init+0x228>
 8002c8a:	2304      	movs	r3, #4
 8002c8c:	e006      	b.n	8002c9c <HAL_GPIO_Init+0x228>
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e004      	b.n	8002c9c <HAL_GPIO_Init+0x228>
 8002c92:	2302      	movs	r3, #2
 8002c94:	e002      	b.n	8002c9c <HAL_GPIO_Init+0x228>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <HAL_GPIO_Init+0x228>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	69fa      	ldr	r2, [r7, #28]
 8002c9e:	f002 0203 	and.w	r2, r2, #3
 8002ca2:	0092      	lsls	r2, r2, #2
 8002ca4:	4093      	lsls	r3, r2
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002cac:	4934      	ldr	r1, [pc, #208]	; (8002d80 <HAL_GPIO_Init+0x30c>)
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	089b      	lsrs	r3, r3, #2
 8002cb2:	3302      	adds	r3, #2
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cba:	4b3a      	ldr	r3, [pc, #232]	; (8002da4 <HAL_GPIO_Init+0x330>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cde:	4a31      	ldr	r2, [pc, #196]	; (8002da4 <HAL_GPIO_Init+0x330>)
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ce4:	4b2f      	ldr	r3, [pc, #188]	; (8002da4 <HAL_GPIO_Init+0x330>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d08:	4a26      	ldr	r2, [pc, #152]	; (8002da4 <HAL_GPIO_Init+0x330>)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d0e:	4b25      	ldr	r3, [pc, #148]	; (8002da4 <HAL_GPIO_Init+0x330>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	43db      	mvns	r3, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d32:	4a1c      	ldr	r2, [pc, #112]	; (8002da4 <HAL_GPIO_Init+0x330>)
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d38:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <HAL_GPIO_Init+0x330>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	43db      	mvns	r3, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4013      	ands	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d5c:	4a11      	ldr	r2, [pc, #68]	; (8002da4 <HAL_GPIO_Init+0x330>)
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	3301      	adds	r3, #1
 8002d66:	61fb      	str	r3, [r7, #28]
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	2b0f      	cmp	r3, #15
 8002d6c:	f67f ae92 	bls.w	8002a94 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d70:	bf00      	nop
 8002d72:	3724      	adds	r7, #36	; 0x24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	40013800 	.word	0x40013800
 8002d84:	40020000 	.word	0x40020000
 8002d88:	40020400 	.word	0x40020400
 8002d8c:	40020800 	.word	0x40020800
 8002d90:	40020c00 	.word	0x40020c00
 8002d94:	40021000 	.word	0x40021000
 8002d98:	40021400 	.word	0x40021400
 8002d9c:	40021800 	.word	0x40021800
 8002da0:	40021c00 	.word	0x40021c00
 8002da4:	40013c00 	.word	0x40013c00

08002da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	807b      	strh	r3, [r7, #2]
 8002db4:	4613      	mov	r3, r2
 8002db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002db8:	787b      	ldrb	r3, [r7, #1]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dbe:	887a      	ldrh	r2, [r7, #2]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002dc4:	e003      	b.n	8002dce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002dc6:	887b      	ldrh	r3, [r7, #2]
 8002dc8:	041a      	lsls	r2, r3, #16
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	619a      	str	r2, [r3, #24]
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
	...

08002ddc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e07f      	b.n	8002eee <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7fe f9e4 	bl	80011d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2224      	movs	r2, #36	; 0x24
 8002e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0201 	bic.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d107      	bne.n	8002e56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e52:	609a      	str	r2, [r3, #8]
 8002e54:	e006      	b.n	8002e64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d104      	bne.n	8002e76 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6859      	ldr	r1, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	4b1d      	ldr	r3, [pc, #116]	; (8002ef8 <HAL_I2C_Init+0x11c>)
 8002e82:	430b      	orrs	r3, r1
 8002e84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691a      	ldr	r2, [r3, #16]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	ea42 0103 	orr.w	r1, r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	021a      	lsls	r2, r3, #8
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	69d9      	ldr	r1, [r3, #28]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a1a      	ldr	r2, [r3, #32]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0201 	orr.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	02008000 	.word	0x02008000

08002efc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	4608      	mov	r0, r1
 8002f06:	4611      	mov	r1, r2
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	817b      	strh	r3, [r7, #10]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	813b      	strh	r3, [r7, #8]
 8002f12:	4613      	mov	r3, r2
 8002f14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b20      	cmp	r3, #32
 8002f20:	f040 80fd 	bne.w	800311e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d002      	beq.n	8002f30 <HAL_I2C_Mem_Read+0x34>
 8002f2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d105      	bne.n	8002f3c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0f1      	b.n	8003120 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_I2C_Mem_Read+0x4e>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e0ea      	b.n	8003120 <HAL_I2C_Mem_Read+0x224>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f52:	f7fe fbe9 	bl	8001728 <HAL_GetTick>
 8002f56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	2319      	movs	r3, #25
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f001 fb39 	bl	80045dc <I2C_WaitOnFlagUntilTimeout>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e0d5      	b.n	8003120 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2222      	movs	r2, #34	; 0x22
 8002f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2240      	movs	r2, #64	; 0x40
 8002f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a3a      	ldr	r2, [r7, #32]
 8002f8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f9c:	88f8      	ldrh	r0, [r7, #6]
 8002f9e:	893a      	ldrh	r2, [r7, #8]
 8002fa0:	8979      	ldrh	r1, [r7, #10]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	9301      	str	r3, [sp, #4]
 8002fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	4603      	mov	r3, r0
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 fe27 	bl	8003c00 <I2C_RequestMemoryRead>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0ad      	b.n	8003120 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	2bff      	cmp	r3, #255	; 0xff
 8002fcc:	d90e      	bls.n	8002fec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	22ff      	movs	r2, #255	; 0xff
 8002fd2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	8979      	ldrh	r1, [r7, #10]
 8002fdc:	4b52      	ldr	r3, [pc, #328]	; (8003128 <HAL_I2C_Mem_Read+0x22c>)
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f001 fc1b 	bl	8004820 <I2C_TransferConfig>
 8002fea:	e00f      	b.n	800300c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	8979      	ldrh	r1, [r7, #10]
 8002ffe:	4b4a      	ldr	r3, [pc, #296]	; (8003128 <HAL_I2C_Mem_Read+0x22c>)
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f001 fc0a 	bl	8004820 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003012:	2200      	movs	r2, #0
 8003014:	2104      	movs	r1, #4
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f001 fae0 	bl	80045dc <I2C_WaitOnFlagUntilTimeout>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e07c      	b.n	8003120 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003042:	3b01      	subs	r3, #1
 8003044:	b29a      	uxth	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304e:	b29b      	uxth	r3, r3
 8003050:	3b01      	subs	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305c:	b29b      	uxth	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d034      	beq.n	80030cc <HAL_I2C_Mem_Read+0x1d0>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003066:	2b00      	cmp	r3, #0
 8003068:	d130      	bne.n	80030cc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003070:	2200      	movs	r2, #0
 8003072:	2180      	movs	r1, #128	; 0x80
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f001 fab1 	bl	80045dc <I2C_WaitOnFlagUntilTimeout>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e04d      	b.n	8003120 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003088:	b29b      	uxth	r3, r3
 800308a:	2bff      	cmp	r3, #255	; 0xff
 800308c:	d90e      	bls.n	80030ac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	22ff      	movs	r2, #255	; 0xff
 8003092:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003098:	b2da      	uxtb	r2, r3
 800309a:	8979      	ldrh	r1, [r7, #10]
 800309c:	2300      	movs	r3, #0
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f001 fbbb 	bl	8004820 <I2C_TransferConfig>
 80030aa:	e00f      	b.n	80030cc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	8979      	ldrh	r1, [r7, #10]
 80030be:	2300      	movs	r3, #0
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f001 fbaa 	bl	8004820 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d19a      	bne.n	800300c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f001 fafe 	bl	80046dc <I2C_WaitOnSTOPFlagUntilTimeout>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e01a      	b.n	8003120 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2220      	movs	r2, #32
 80030f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6859      	ldr	r1, [r3, #4]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	4b0b      	ldr	r3, [pc, #44]	; (800312c <HAL_I2C_Mem_Read+0x230>)
 80030fe:	400b      	ands	r3, r1
 8003100:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2220      	movs	r2, #32
 8003106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	e000      	b.n	8003120 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800311e:	2302      	movs	r3, #2
  }
}
 8003120:	4618      	mov	r0, r3
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	80002400 	.word	0x80002400
 800312c:	fe00e800 	.word	0xfe00e800

08003130 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b08a      	sub	sp, #40	; 0x28
 8003134:	af02      	add	r7, sp, #8
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	4608      	mov	r0, r1
 800313a:	4611      	mov	r1, r2
 800313c:	461a      	mov	r2, r3
 800313e:	4603      	mov	r3, r0
 8003140:	817b      	strh	r3, [r7, #10]
 8003142:	460b      	mov	r3, r1
 8003144:	813b      	strh	r3, [r7, #8]
 8003146:	4613      	mov	r3, r2
 8003148:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b20      	cmp	r3, #32
 8003154:	f040 80d5 	bne.w	8003302 <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <HAL_I2C_Mem_Write_DMA+0x34>
 800315e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003160:	2b00      	cmp	r3, #0
 8003162:	d105      	bne.n	8003170 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f44f 7200 	mov.w	r2, #512	; 0x200
 800316a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0c9      	b.n	8003304 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800317a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800317e:	d101      	bne.n	8003184 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 8003180:	2302      	movs	r3, #2
 8003182:	e0bf      	b.n	8003304 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800318a:	2b01      	cmp	r3, #1
 800318c:	d101      	bne.n	8003192 <HAL_I2C_Mem_Write_DMA+0x62>
 800318e:	2302      	movs	r3, #2
 8003190:	e0b8      	b.n	8003304 <HAL_I2C_Mem_Write_DMA+0x1d4>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800319a:	f7fe fac5 	bl	8001728 <HAL_GetTick>
 800319e:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2221      	movs	r2, #33	; 0x21
 80031a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2240      	movs	r2, #64	; 0x40
 80031ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80031c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4a51      	ldr	r2, [pc, #324]	; (800330c <HAL_I2C_Mem_Write_DMA+0x1dc>)
 80031c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4a51      	ldr	r2, [pc, #324]	; (8003310 <HAL_I2C_Mem_Write_DMA+0x1e0>)
 80031cc:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	2bff      	cmp	r3, #255	; 0xff
 80031d6:	d906      	bls.n	80031e6 <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	22ff      	movs	r2, #255	; 0xff
 80031dc:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80031de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031e2:	61fb      	str	r3, [r7, #28]
 80031e4:	e007      	b.n	80031f6 <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80031f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031f4:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80031f6:	88f8      	ldrh	r0, [r7, #6]
 80031f8:	893a      	ldrh	r2, [r7, #8]
 80031fa:	8979      	ldrh	r1, [r7, #10]
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	9301      	str	r3, [sp, #4]
 8003200:	2319      	movs	r3, #25
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	4603      	mov	r3, r0
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 fca6 	bl	8003b58 <I2C_RequestMemoryWrite>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d005      	beq.n	800321e <HAL_I2C_Mem_Write_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e072      	b.n	8003304 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	2b00      	cmp	r3, #0
 8003224:	d020      	beq.n	8003268 <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322a:	4a3a      	ldr	r2, [pc, #232]	; (8003314 <HAL_I2C_Mem_Write_DMA+0x1e4>)
 800322c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003232:	4a39      	ldr	r2, [pc, #228]	; (8003318 <HAL_I2C_Mem_Write_DMA+0x1e8>)
 8003234:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323a:	2200      	movs	r2, #0
 800323c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003242:	2200      	movs	r2, #0
 8003244:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800324a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	3328      	adds	r3, #40	; 0x28
 8003252:	461a      	mov	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003258:	f7ff f916 	bl	8002488 <HAL_DMA_Start_IT>
 800325c:	4603      	mov	r3, r0
 800325e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8003260:	7dfb      	ldrb	r3, [r7, #23]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d139      	bne.n	80032da <HAL_I2C_Mem_Write_DMA+0x1aa>
 8003266:	e013      	b.n	8003290 <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e039      	b.n	8003304 <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003294:	b2da      	uxtb	r2, r3
 8003296:	8979      	ldrh	r1, [r7, #10]
 8003298:	2300      	movs	r3, #0
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f001 fabe 	bl	8004820 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80032be:	2111      	movs	r1, #17
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f001 fadb 	bl	800487c <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032d4:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	e014      	b.n	8003304 <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2220      	movs	r2, #32
 80032de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ee:	f043 0210 	orr.w	r2, r3, #16
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8003302:	2302      	movs	r3, #2
  }
}
 8003304:	4618      	mov	r0, r3
 8003306:	3720      	adds	r7, #32
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	ffff0000 	.word	0xffff0000
 8003310:	080037e3 	.word	0x080037e3
 8003314:	080043f5 	.word	0x080043f5
 8003318:	08004521 	.word	0x08004521

0800331c <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b08a      	sub	sp, #40	; 0x28
 8003320:	af02      	add	r7, sp, #8
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	4608      	mov	r0, r1
 8003326:	4611      	mov	r1, r2
 8003328:	461a      	mov	r2, r3
 800332a:	4603      	mov	r3, r0
 800332c:	817b      	strh	r3, [r7, #10]
 800332e:	460b      	mov	r3, r1
 8003330:	813b      	strh	r3, [r7, #8]
 8003332:	4613      	mov	r3, r2
 8003334:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b20      	cmp	r3, #32
 8003340:	f040 80d5 	bne.w	80034ee <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <HAL_I2C_Mem_Read_DMA+0x34>
 800334a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800334c:	2b00      	cmp	r3, #0
 800334e:	d105      	bne.n	800335c <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003356:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e0c9      	b.n	80034f0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800336a:	d101      	bne.n	8003370 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 800336c:	2302      	movs	r3, #2
 800336e:	e0bf      	b.n	80034f0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <HAL_I2C_Mem_Read_DMA+0x62>
 800337a:	2302      	movs	r3, #2
 800337c:	e0b8      	b.n	80034f0 <HAL_I2C_Mem_Read_DMA+0x1d4>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003386:	f7fe f9cf 	bl	8001728 <HAL_GetTick>
 800338a:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2222      	movs	r2, #34	; 0x22
 8003390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2240      	movs	r2, #64	; 0x40
 8003398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80033ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4a51      	ldr	r2, [pc, #324]	; (80034f8 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 80033b2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4a51      	ldr	r2, [pc, #324]	; (80034fc <HAL_I2C_Mem_Read_DMA+0x1e0>)
 80033b8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033be:	b29b      	uxth	r3, r3
 80033c0:	2bff      	cmp	r3, #255	; 0xff
 80033c2:	d906      	bls.n	80033d2 <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	22ff      	movs	r2, #255	; 0xff
 80033c8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80033ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033ce:	61fb      	str	r3, [r7, #28]
 80033d0:	e007      	b.n	80033e2 <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80033dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033e0:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80033e2:	88f8      	ldrh	r0, [r7, #6]
 80033e4:	893a      	ldrh	r2, [r7, #8]
 80033e6:	8979      	ldrh	r1, [r7, #10]
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	9301      	str	r3, [sp, #4]
 80033ec:	2319      	movs	r3, #25
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	4603      	mov	r3, r0
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 fc04 	bl	8003c00 <I2C_RequestMemoryRead>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d005      	beq.n	800340a <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e072      	b.n	80034f0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340e:	2b00      	cmp	r3, #0
 8003410:	d020      	beq.n	8003454 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003416:	4a3a      	ldr	r2, [pc, #232]	; (8003500 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 8003418:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341e:	4a39      	ldr	r2, [pc, #228]	; (8003504 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8003420:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003426:	2200      	movs	r2, #0
 8003428:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342e:	2200      	movs	r2, #0
 8003430:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	3324      	adds	r3, #36	; 0x24
 800343c:	4619      	mov	r1, r3
 800343e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003444:	f7ff f820 	bl	8002488 <HAL_DMA_Start_IT>
 8003448:	4603      	mov	r3, r0
 800344a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800344c:	7dfb      	ldrb	r3, [r7, #23]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d139      	bne.n	80034c6 <HAL_I2C_Mem_Read_DMA+0x1aa>
 8003452:	e013      	b.n	800347c <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003468:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e039      	b.n	80034f0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003480:	b2da      	uxtb	r2, r3
 8003482:	8979      	ldrh	r1, [r7, #10]
 8003484:	4b20      	ldr	r3, [pc, #128]	; (8003508 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f001 f9c8 	bl	8004820 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80034aa:	2111      	movs	r1, #17
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f001 f9e5 	bl	800487c <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034c0:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	e014      	b.n	80034f0 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2220      	movs	r2, #32
 80034ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034da:	f043 0210 	orr.w	r2, r3, #16
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 80034ee:	2302      	movs	r3, #2
  }
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3720      	adds	r7, #32
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	ffff0000 	.word	0xffff0000
 80034fc:	080037e3 	.word	0x080037e3
 8003500:	0800448b 	.word	0x0800448b
 8003504:	08004521 	.word	0x08004521
 8003508:	80002400 	.word	0x80002400

0800350c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	70fb      	strb	r3, [r7, #3]
 8003568:	4613      	mov	r3, r2
 800356a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <I2C_Slave_ISR_IT+0x24>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e0ec      	b.n	80037da <I2C_Slave_ISR_IT+0x1fe>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	095b      	lsrs	r3, r3, #5
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b00      	cmp	r3, #0
 8003612:	d009      	beq.n	8003628 <I2C_Slave_ISR_IT+0x4c>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	095b      	lsrs	r3, r3, #5
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003620:	6939      	ldr	r1, [r7, #16]
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 fcd8 	bl	8003fd8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	091b      	lsrs	r3, r3, #4
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b00      	cmp	r3, #0
 8003632:	d04d      	beq.n	80036d0 <I2C_Slave_ISR_IT+0xf4>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	091b      	lsrs	r3, r3, #4
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d047      	beq.n	80036d0 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003644:	b29b      	uxth	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d128      	bne.n	800369c <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b28      	cmp	r3, #40	; 0x28
 8003654:	d108      	bne.n	8003668 <I2C_Slave_ISR_IT+0x8c>
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800365c:	d104      	bne.n	8003668 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800365e:	6939      	ldr	r1, [r7, #16]
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 fd8f 	bl	8004184 <I2C_ITListenCplt>
 8003666:	e032      	b.n	80036ce <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b29      	cmp	r3, #41	; 0x29
 8003672:	d10e      	bne.n	8003692 <I2C_Slave_ISR_IT+0xb6>
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800367a:	d00a      	beq.n	8003692 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2210      	movs	r2, #16
 8003682:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 fe91 	bl	80043ac <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 fbcb 	bl	8003e26 <I2C_ITSlaveSeqCplt>
 8003690:	e01d      	b.n	80036ce <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2210      	movs	r2, #16
 8003698:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800369a:	e096      	b.n	80037ca <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2210      	movs	r2, #16
 80036a2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a8:	f043 0204 	orr.w	r2, r3, #4
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d004      	beq.n	80036c0 <I2C_Slave_ISR_IT+0xe4>
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036bc:	f040 8085 	bne.w	80037ca <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c4:	4619      	mov	r1, r3
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 fdb0 	bl	800422c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80036cc:	e07d      	b.n	80037ca <I2C_Slave_ISR_IT+0x1ee>
 80036ce:	e07c      	b.n	80037ca <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	089b      	lsrs	r3, r3, #2
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d030      	beq.n	800373e <I2C_Slave_ISR_IT+0x162>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	089b      	lsrs	r3, r3, #2
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d02a      	beq.n	800373e <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d018      	beq.n	8003724 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	1c5a      	adds	r2, r3, #1
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370e:	3b01      	subs	r3, #1
 8003710:	b29a      	uxth	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371a:	b29b      	uxth	r3, r3
 800371c:	3b01      	subs	r3, #1
 800371e:	b29a      	uxth	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d14f      	bne.n	80037ce <I2C_Slave_ISR_IT+0x1f2>
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003734:	d04b      	beq.n	80037ce <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 fb75 	bl	8003e26 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800373c:	e047      	b.n	80037ce <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	08db      	lsrs	r3, r3, #3
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <I2C_Slave_ISR_IT+0x184>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	08db      	lsrs	r3, r3, #3
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d004      	beq.n	8003760 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003756:	6939      	ldr	r1, [r7, #16]
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 faa5 	bl	8003ca8 <I2C_ITAddrCplt>
 800375e:	e037      	b.n	80037d0 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	085b      	lsrs	r3, r3, #1
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b00      	cmp	r3, #0
 800376a:	d031      	beq.n	80037d0 <I2C_Slave_ISR_IT+0x1f4>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	085b      	lsrs	r3, r3, #1
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b00      	cmp	r3, #0
 8003776:	d02b      	beq.n	80037d0 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d018      	beq.n	80037b4 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	781a      	ldrb	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	851a      	strh	r2, [r3, #40]	; 0x28
 80037b2:	e00d      	b.n	80037d0 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037ba:	d002      	beq.n	80037c2 <I2C_Slave_ISR_IT+0x1e6>
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d106      	bne.n	80037d0 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 fb2f 	bl	8003e26 <I2C_ITSlaveSeqCplt>
 80037c8:	e002      	b.n	80037d0 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80037ca:	bf00      	nop
 80037cc:	e000      	b.n	80037d0 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80037ce:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b088      	sub	sp, #32
 80037e6:	af02      	add	r7, sp, #8
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d101      	bne.n	80037fc <I2C_Master_ISR_DMA+0x1a>
 80037f8:	2302      	movs	r3, #2
 80037fa:	e0e1      	b.n	80039c0 <I2C_Master_ISR_DMA+0x1de>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	091b      	lsrs	r3, r3, #4
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d017      	beq.n	8003840 <I2C_Master_ISR_DMA+0x5e>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	091b      	lsrs	r3, r3, #4
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d011      	beq.n	8003840 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2210      	movs	r2, #16
 8003822:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003828:	f043 0204 	orr.w	r2, r3, #4
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003830:	2112      	movs	r1, #18
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f001 f822 	bl	800487c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 fdb7 	bl	80043ac <I2C_Flush_TXDR>
 800383e:	e0ba      	b.n	80039b6 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	09db      	lsrs	r3, r3, #7
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b00      	cmp	r3, #0
 800384a:	d072      	beq.n	8003932 <I2C_Master_ISR_DMA+0x150>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	099b      	lsrs	r3, r3, #6
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b00      	cmp	r3, #0
 8003856:	d06c      	beq.n	8003932 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003866:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d04e      	beq.n	8003910 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	b29b      	uxth	r3, r3
 800387a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800387e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003884:	b29b      	uxth	r3, r3
 8003886:	2bff      	cmp	r3, #255	; 0xff
 8003888:	d906      	bls.n	8003898 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	22ff      	movs	r2, #255	; 0xff
 800388e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003890:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003894:	617b      	str	r3, [r7, #20]
 8003896:	e010      	b.n	80038ba <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389c:	b29a      	uxth	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038aa:	d003      	beq.n	80038b4 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	e002      	b.n	80038ba <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80038b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038b8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	8a79      	ldrh	r1, [r7, #18]
 80038c2:	2300      	movs	r3, #0
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 ffa9 	bl	8004820 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b22      	cmp	r3, #34	; 0x22
 80038ea:	d108      	bne.n	80038fe <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038fa:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80038fc:	e05b      	b.n	80039b6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800390c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800390e:	e052      	b.n	80039b6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800391e:	d003      	beq.n	8003928 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 fa43 	bl	8003dac <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003926:	e046      	b.n	80039b6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003928:	2140      	movs	r1, #64	; 0x40
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 fc7e 	bl	800422c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003930:	e041      	b.n	80039b6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	099b      	lsrs	r3, r3, #6
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d029      	beq.n	8003992 <I2C_Master_ISR_DMA+0x1b0>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	099b      	lsrs	r3, r3, #6
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d023      	beq.n	8003992 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394e:	b29b      	uxth	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d119      	bne.n	8003988 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003962:	d027      	beq.n	80039b4 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003968:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800396c:	d108      	bne.n	8003980 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800397c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800397e:	e019      	b.n	80039b4 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 fa13 	bl	8003dac <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003986:	e015      	b.n	80039b4 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003988:	2140      	movs	r1, #64	; 0x40
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 fc4e 	bl	800422c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003990:	e010      	b.n	80039b4 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	095b      	lsrs	r3, r3, #5
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00b      	beq.n	80039b6 <I2C_Master_ISR_DMA+0x1d4>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	095b      	lsrs	r3, r3, #5
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d005      	beq.n	80039b6 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80039aa:	68b9      	ldr	r1, [r7, #8]
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 fa77 	bl	8003ea0 <I2C_ITMasterCplt>
 80039b2:	e000      	b.n	80039b6 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80039b4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	613b      	str	r3, [r7, #16]
  uint32_t treatdmanack = 0U;
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <I2C_Slave_ISR_DMA+0x24>
 80039e8:	2302      	movs	r3, #2
 80039ea:	e0b1      	b.n	8003b50 <I2C_Slave_ISR_DMA+0x188>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	095b      	lsrs	r3, r3, #5
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d009      	beq.n	8003a14 <I2C_Slave_ISR_DMA+0x4c>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 fae2 	bl	8003fd8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	091b      	lsrs	r3, r3, #4
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 8082 	beq.w	8003b26 <I2C_Slave_ISR_DMA+0x15e>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	091b      	lsrs	r3, r3, #4
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d07b      	beq.n	8003b26 <I2C_Slave_ISR_DMA+0x15e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	0b9b      	lsrs	r3, r3, #14
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d105      	bne.n	8003a46 <I2C_Slave_ISR_DMA+0x7e>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	0bdb      	lsrs	r3, r3, #15
 8003a3e:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d068      	beq.n	8003b18 <I2C_Slave_ISR_DMA+0x150>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00d      	beq.n	8003a6a <I2C_Slave_ISR_DMA+0xa2>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	0bdb      	lsrs	r3, r3, #15
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d007      	beq.n	8003a6a <I2C_Slave_ISR_DMA+0xa2>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <I2C_Slave_ISR_DMA+0xa2>
          {
            treatdmanack = 1U;
 8003a66:	2301      	movs	r3, #1
 8003a68:	617b      	str	r3, [r7, #20]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00d      	beq.n	8003a8e <I2C_Slave_ISR_DMA+0xc6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	0b9b      	lsrs	r3, r3, #14
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d007      	beq.n	8003a8e <I2C_Slave_ISR_DMA+0xc6>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <I2C_Slave_ISR_DMA+0xc6>
          {
            treatdmanack = 1U;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	617b      	str	r3, [r7, #20]
          }
        }
      }

      if (treatdmanack == 1U)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d128      	bne.n	8003ae6 <I2C_Slave_ISR_DMA+0x11e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b28      	cmp	r3, #40	; 0x28
 8003a9e:	d108      	bne.n	8003ab2 <I2C_Slave_ISR_DMA+0xea>
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003aa6:	d104      	bne.n	8003ab2 <I2C_Slave_ISR_DMA+0xea>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003aa8:	68b9      	ldr	r1, [r7, #8]
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 fb6a 	bl	8004184 <I2C_ITListenCplt>
 8003ab0:	e031      	b.n	8003b16 <I2C_Slave_ISR_DMA+0x14e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b29      	cmp	r3, #41	; 0x29
 8003abc:	d10e      	bne.n	8003adc <I2C_Slave_ISR_DMA+0x114>
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ac4:	d00a      	beq.n	8003adc <I2C_Slave_ISR_DMA+0x114>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2210      	movs	r2, #16
 8003acc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 fc6c 	bl	80043ac <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f9a6 	bl	8003e26 <I2C_ITSlaveSeqCplt>
 8003ada:	e01c      	b.n	8003b16 <I2C_Slave_ISR_DMA+0x14e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2210      	movs	r2, #16
 8003ae2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003ae4:	e01d      	b.n	8003b22 <I2C_Slave_ISR_DMA+0x15a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2210      	movs	r2, #16
 8003aec:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af2:	f043 0204 	orr.w	r2, r3, #4
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	645a      	str	r2, [r3, #68]	; 0x44

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <I2C_Slave_ISR_DMA+0x140>
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b06:	d10c      	bne.n	8003b22 <I2C_Slave_ISR_DMA+0x15a>
        {
          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 fb8c 	bl	800422c <I2C_ITError>
      if (treatdmanack == 1U)
 8003b14:	e005      	b.n	8003b22 <I2C_Slave_ISR_DMA+0x15a>
 8003b16:	e004      	b.n	8003b22 <I2C_Slave_ISR_DMA+0x15a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2210      	movs	r2, #16
 8003b1e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003b20:	e011      	b.n	8003b46 <I2C_Slave_ISR_DMA+0x17e>
      if (treatdmanack == 1U)
 8003b22:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003b24:	e00f      	b.n	8003b46 <I2C_Slave_ISR_DMA+0x17e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	08db      	lsrs	r3, r3, #3
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d009      	beq.n	8003b46 <I2C_Slave_ISR_DMA+0x17e>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	08db      	lsrs	r3, r3, #3
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <I2C_Slave_ISR_DMA+0x17e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003b3e:	68b9      	ldr	r1, [r7, #8]
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 f8b1 	bl	8003ca8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af02      	add	r7, sp, #8
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	4608      	mov	r0, r1
 8003b62:	4611      	mov	r1, r2
 8003b64:	461a      	mov	r2, r3
 8003b66:	4603      	mov	r3, r0
 8003b68:	817b      	strh	r3, [r7, #10]
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	813b      	strh	r3, [r7, #8]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003b72:	88fb      	ldrh	r3, [r7, #6]
 8003b74:	b2da      	uxtb	r2, r3
 8003b76:	8979      	ldrh	r1, [r7, #10]
 8003b78:	4b20      	ldr	r3, [pc, #128]	; (8003bfc <I2C_RequestMemoryWrite+0xa4>)
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 fe4d 	bl	8004820 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b86:	69fa      	ldr	r2, [r7, #28]
 8003b88:	69b9      	ldr	r1, [r7, #24]
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 fd66 	bl	800465c <I2C_WaitOnTXISFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e02c      	b.n	8003bf4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b9a:	88fb      	ldrh	r3, [r7, #6]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d105      	bne.n	8003bac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ba0:	893b      	ldrh	r3, [r7, #8]
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	629a      	str	r2, [r3, #40]	; 0x28
 8003baa:	e015      	b.n	8003bd8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003bac:	893b      	ldrh	r3, [r7, #8]
 8003bae:	0a1b      	lsrs	r3, r3, #8
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bba:	69fa      	ldr	r2, [r7, #28]
 8003bbc:	69b9      	ldr	r1, [r7, #24]
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 fd4c 	bl	800465c <I2C_WaitOnTXISFlagUntilTimeout>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e012      	b.n	8003bf4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bce:	893b      	ldrh	r3, [r7, #8]
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	2200      	movs	r2, #0
 8003be0:	2180      	movs	r1, #128	; 0x80
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 fcfa 	bl	80045dc <I2C_WaitOnFlagUntilTimeout>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	80002000 	.word	0x80002000

08003c00 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af02      	add	r7, sp, #8
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	4608      	mov	r0, r1
 8003c0a:	4611      	mov	r1, r2
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4603      	mov	r3, r0
 8003c10:	817b      	strh	r3, [r7, #10]
 8003c12:	460b      	mov	r3, r1
 8003c14:	813b      	strh	r3, [r7, #8]
 8003c16:	4613      	mov	r3, r2
 8003c18:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003c1a:	88fb      	ldrh	r3, [r7, #6]
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	8979      	ldrh	r1, [r7, #10]
 8003c20:	4b20      	ldr	r3, [pc, #128]	; (8003ca4 <I2C_RequestMemoryRead+0xa4>)
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	2300      	movs	r3, #0
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 fdfa 	bl	8004820 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c2c:	69fa      	ldr	r2, [r7, #28]
 8003c2e:	69b9      	ldr	r1, [r7, #24]
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 fd13 	bl	800465c <I2C_WaitOnTXISFlagUntilTimeout>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e02c      	b.n	8003c9a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c40:	88fb      	ldrh	r3, [r7, #6]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d105      	bne.n	8003c52 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c46:	893b      	ldrh	r3, [r7, #8]
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	629a      	str	r2, [r3, #40]	; 0x28
 8003c50:	e015      	b.n	8003c7e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c52:	893b      	ldrh	r3, [r7, #8]
 8003c54:	0a1b      	lsrs	r3, r3, #8
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c60:	69fa      	ldr	r2, [r7, #28]
 8003c62:	69b9      	ldr	r1, [r7, #24]
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 fcf9 	bl	800465c <I2C_WaitOnTXISFlagUntilTimeout>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e012      	b.n	8003c9a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c74:	893b      	ldrh	r3, [r7, #8]
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	2200      	movs	r2, #0
 8003c86:	2140      	movs	r1, #64	; 0x40
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 fca7 	bl	80045dc <I2C_WaitOnFlagUntilTimeout>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e000      	b.n	8003c9a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	80002000 	.word	0x80002000

08003ca8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003cbe:	2b28      	cmp	r3, #40	; 0x28
 8003cc0:	d168      	bne.n	8003d94 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	0c1b      	lsrs	r3, r3, #16
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	0c1b      	lsrs	r3, r3, #16
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003ce0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cee:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003cfc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d137      	bne.n	8003d76 <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8003d06:	897b      	ldrh	r3, [r7, #10]
 8003d08:	09db      	lsrs	r3, r3, #7
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	89bb      	ldrh	r3, [r7, #12]
 8003d0e:	4053      	eors	r3, r2
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	f003 0306 	and.w	r3, r3, #6
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d11c      	bne.n	8003d54 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003d1a:	897b      	ldrh	r3, [r7, #10]
 8003d1c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d139      	bne.n	8003da4 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2208      	movs	r2, #8
 8003d3c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003d46:	89ba      	ldrh	r2, [r7, #12]
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff fc05 	bl	800355c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003d52:	e027      	b.n	8003da4 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 8003d54:	893b      	ldrh	r3, [r7, #8]
 8003d56:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003d58:	2104      	movs	r1, #4
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 fdfc 	bl	8004958 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003d68:	89ba      	ldrh	r2, [r7, #12]
 8003d6a:	7bfb      	ldrb	r3, [r7, #15]
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7ff fbf4 	bl	800355c <HAL_I2C_AddrCallback>
}
 8003d74:	e016      	b.n	8003da4 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003d76:	2104      	movs	r1, #4
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 fded 	bl	8004958 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003d86:	89ba      	ldrh	r2, [r7, #12]
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7ff fbe5 	bl	800355c <HAL_I2C_AddrCallback>
}
 8003d92:	e007      	b.n	8003da4 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2208      	movs	r2, #8
 8003d9a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003da4:	bf00      	nop
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b21      	cmp	r3, #33	; 0x21
 8003dc6:	d115      	bne.n	8003df4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2211      	movs	r2, #17
 8003dd4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003ddc:	2101      	movs	r1, #1
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 fdba 	bl	8004958 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff fb8d 	bl	800350c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003df2:	e014      	b.n	8003e1e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2212      	movs	r2, #18
 8003e00:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003e08:	2102      	movs	r1, #2
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 fda4 	bl	8004958 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7ff fb81 	bl	8003520 <HAL_I2C_MasterRxCpltCallback>
}
 8003e1e:	bf00      	nop
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b082      	sub	sp, #8
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b29      	cmp	r3, #41	; 0x29
 8003e40:	d112      	bne.n	8003e68 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2228      	movs	r2, #40	; 0x28
 8003e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2221      	movs	r2, #33	; 0x21
 8003e4e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003e50:	2101      	movs	r1, #1
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fd80 	bl	8004958 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7ff fb67 	bl	8003534 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003e66:	e017      	b.n	8003e98 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b2a      	cmp	r3, #42	; 0x2a
 8003e72:	d111      	bne.n	8003e98 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2228      	movs	r2, #40	; 0x28
 8003e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2222      	movs	r2, #34	; 0x22
 8003e80:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003e82:	2102      	movs	r1, #2
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 fd67 	bl	8004958 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7ff fb58 	bl	8003548 <HAL_I2C_SlaveRxCpltCallback>
}
 8003e98:	bf00      	nop
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6859      	ldr	r1, [r3, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	4b44      	ldr	r3, [pc, #272]	; (8003fd0 <I2C_ITMasterCplt+0x130>)
 8003ebe:	400b      	ands	r3, r1
 8003ec0:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a40      	ldr	r2, [pc, #256]	; (8003fd4 <I2C_ITMasterCplt+0x134>)
 8003ed2:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	091b      	lsrs	r3, r3, #4
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d009      	beq.n	8003ef4 <I2C_ITMasterCplt+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2210      	movs	r2, #16
 8003ee6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eec:	f043 0204 	orr.w	r2, r3, #4
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 fa59 	bl	80043ac <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003efa:	2103      	movs	r1, #3
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 fd2b 	bl	8004958 <I2C_Disable_IRQ>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b60      	cmp	r3, #96	; 0x60
 8003f12:	d002      	beq.n	8003f1a <I2C_ITMasterCplt+0x7a>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d006      	beq.n	8003f28 <I2C_ITMasterCplt+0x88>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1e:	4619      	mov	r1, r3
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f983 	bl	800422c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003f26:	e04e      	b.n	8003fc6 <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b21      	cmp	r3, #33	; 0x21
 8003f32:	d121      	bne.n	8003f78 <I2C_ITMasterCplt+0xd8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b40      	cmp	r3, #64	; 0x40
 8003f46:	d10b      	bne.n	8003f60 <I2C_ITMasterCplt+0xc0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7ff fb17 	bl	800358c <HAL_I2C_MemTxCpltCallback>
}
 8003f5e:	e032      	b.n	8003fc6 <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7ff facb 	bl	800350c <HAL_I2C_MasterTxCpltCallback>
}
 8003f76:	e026      	b.n	8003fc6 <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b22      	cmp	r3, #34	; 0x22
 8003f82:	d120      	bne.n	8003fc6 <I2C_ITMasterCplt+0x126>
    hi2c->State = HAL_I2C_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2220      	movs	r2, #32
 8003f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b40      	cmp	r3, #64	; 0x40
 8003f96:	d10b      	bne.n	8003fb0 <I2C_ITMasterCplt+0x110>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f7ff faf9 	bl	80035a0 <HAL_I2C_MemRxCpltCallback>
}
 8003fae:	e00a      	b.n	8003fc6 <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7ff faad 	bl	8003520 <HAL_I2C_MasterRxCpltCallback>
}
 8003fc6:	bf00      	nop
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	fe00e800 	.word	0xfe00e800
 8003fd4:	ffff0000 	.word	0xffff0000

08003fd8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003ff6:	2107      	movs	r1, #7
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 fcad 	bl	8004958 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800400c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6859      	ldr	r1, [r3, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	4b58      	ldr	r3, [pc, #352]	; (800417c <I2C_ITSlaveCplt+0x1a4>)
 800401a:	400b      	ands	r3, r1
 800401c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f9c4 	bl	80043ac <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	0b9b      	lsrs	r3, r3, #14
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00b      	beq.n	8004048 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004034:	2b00      	cmp	r3, #0
 8004036:	d018      	beq.n	800406a <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	b29a      	uxth	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004046:	e010      	b.n	800406a <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	0bdb      	lsrs	r3, r3, #15
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004058:	2b00      	cmp	r3, #0
 800405a:	d006      	beq.n	800406a <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	b29a      	uxth	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	089b      	lsrs	r3, r3, #2
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d020      	beq.n	80040b8 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f023 0304 	bic.w	r3, r3, #4
 800407c:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	b2d2      	uxtb	r2, r2
 800408a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00c      	beq.n	80040b8 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d005      	beq.n	80040ce <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c6:	f043 0204 	orr.w	r2, r3, #4
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d010      	beq.n	800410c <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ee:	4619      	mov	r1, r3
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f89b 	bl	800422c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b28      	cmp	r3, #40	; 0x28
 8004100:	d138      	bne.n	8004174 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004102:	68f9      	ldr	r1, [r7, #12]
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f83d 	bl	8004184 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800410a:	e033      	b.n	8004174 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004110:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004114:	d011      	beq.n	800413a <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7ff fe85 	bl	8003e26 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a18      	ldr	r2, [pc, #96]	; (8004180 <I2C_ITSlaveCplt+0x1a8>)
 8004120:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2220      	movs	r2, #32
 8004126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff fa20 	bl	8003578 <HAL_I2C_ListenCpltCallback>
}
 8004138:	e01c      	b.n	8004174 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b22      	cmp	r3, #34	; 0x22
 8004144:	d10b      	bne.n	800415e <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2220      	movs	r2, #32
 800414a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7ff f9f6 	bl	8003548 <HAL_I2C_SlaveRxCpltCallback>
}
 800415c:	e00a      	b.n	8004174 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2220      	movs	r2, #32
 8004162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7ff f9e0 	bl	8003534 <HAL_I2C_SlaveTxCpltCallback>
}
 8004174:	bf00      	nop
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	fe00e800 	.word	0xfe00e800
 8004180:	ffff0000 	.word	0xffff0000

08004184 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a25      	ldr	r2, [pc, #148]	; (8004228 <I2C_ITListenCplt+0xa4>)
 8004192:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2220      	movs	r2, #32
 800419e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	089b      	lsrs	r3, r3, #2
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d022      	beq.n	8004202 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	1c5a      	adds	r2, r3, #1
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d012      	beq.n	8004202 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e0:	3b01      	subs	r3, #1
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fa:	f043 0204 	orr.w	r2, r3, #4
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004202:	2107      	movs	r1, #7
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 fba7 	bl	8004958 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2210      	movs	r2, #16
 8004210:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7ff f9ac 	bl	8003578 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004220:	bf00      	nop
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	ffff0000 	.word	0xffff0000

0800422c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800423c:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a55      	ldr	r2, [pc, #340]	; (80043a0 <I2C_ITError+0x174>)
 800424a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	431a      	orrs	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	2b28      	cmp	r3, #40	; 0x28
 8004262:	d005      	beq.n	8004270 <I2C_ITError+0x44>
 8004264:	7bfb      	ldrb	r3, [r7, #15]
 8004266:	2b29      	cmp	r3, #41	; 0x29
 8004268:	d002      	beq.n	8004270 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800426a:	7bfb      	ldrb	r3, [r7, #15]
 800426c:	2b2a      	cmp	r3, #42	; 0x2a
 800426e:	d10e      	bne.n	800428e <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004270:	2103      	movs	r1, #3
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 fb70 	bl	8004958 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2228      	movs	r2, #40	; 0x28
 800427c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a46      	ldr	r2, [pc, #280]	; (80043a4 <I2C_ITError+0x178>)
 800428a:	635a      	str	r2, [r3, #52]	; 0x34
 800428c:	e013      	b.n	80042b6 <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800428e:	2107      	movs	r1, #7
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 fb61 	bl	8004958 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b60      	cmp	r3, #96	; 0x60
 80042a0:	d003      	beq.n	80042aa <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042c4:	d123      	bne.n	800430e <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80042d4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d05c      	beq.n	8004398 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e2:	4a31      	ldr	r2, [pc, #196]	; (80043a8 <I2C_ITError+0x17c>)
 80042e4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fe f928 	bl	8002548 <HAL_DMA_Abort_IT>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d04c      	beq.n	8004398 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004308:	4610      	mov	r0, r2
 800430a:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800430c:	e044      	b.n	8004398 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800431c:	d123      	bne.n	8004366 <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800432c:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004332:	2b00      	cmp	r3, #0
 8004334:	d030      	beq.n	8004398 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433a:	4a1b      	ldr	r2, [pc, #108]	; (80043a8 <I2C_ITError+0x17c>)
 800433c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800434a:	4618      	mov	r0, r3
 800434c:	f7fe f8fc 	bl	8002548 <HAL_DMA_Abort_IT>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d020      	beq.n	8004398 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004360:	4610      	mov	r0, r2
 8004362:	4798      	blx	r3
}
 8004364:	e018      	b.n	8004398 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b60      	cmp	r3, #96	; 0x60
 8004370:	d10b      	bne.n	800438a <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2220      	movs	r2, #32
 8004376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7ff f920 	bl	80035c8 <HAL_I2C_AbortCpltCallback>
}
 8004388:	e006      	b.n	8004398 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7ff f90e 	bl	80035b4 <HAL_I2C_ErrorCallback>
}
 8004398:	bf00      	nop
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	ffff0000 	.word	0xffff0000
 80043a4:	080035dd 	.word	0x080035dd
 80043a8:	08004595 	.word	0x08004595

080043ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d103      	bne.n	80043ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2200      	movs	r2, #0
 80043c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d007      	beq.n	80043e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699a      	ldr	r2, [r3, #24]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f042 0201 	orr.w	r2, r2, #1
 80043e6:	619a      	str	r2, [r3, #24]
  }
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004400:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004410:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004416:	b29b      	uxth	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	d104      	bne.n	8004426 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800441c:	2112      	movs	r1, #18
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 fa2c 	bl	800487c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004424:	e02d      	b.n	8004482 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800442e:	441a      	add	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004438:	b29b      	uxth	r3, r3
 800443a:	2bff      	cmp	r3, #255	; 0xff
 800443c:	d903      	bls.n	8004446 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	22ff      	movs	r2, #255	; 0xff
 8004442:	851a      	strh	r2, [r3, #40]	; 0x28
 8004444:	e004      	b.n	8004450 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444a:	b29a      	uxth	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	4619      	mov	r1, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3328      	adds	r3, #40	; 0x28
 8004460:	461a      	mov	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004466:	f7fe f80f 	bl	8002488 <HAL_DMA_Start_IT>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d004      	beq.n	800447a <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004470:	2110      	movs	r1, #16
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f7ff feda 	bl	800422c <I2C_ITError>
}
 8004478:	e003      	b.n	8004482 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800447a:	2112      	movs	r1, #18
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 f9fd 	bl	800487c <I2C_Enable_IRQ>
}
 8004482:	bf00      	nop
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b084      	sub	sp, #16
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004496:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044a6:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d104      	bne.n	80044bc <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80044b2:	2112      	movs	r1, #18
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 f9e1 	bl	800487c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80044ba:	e02d      	b.n	8004518 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80044c4:	441a      	add	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	2bff      	cmp	r3, #255	; 0xff
 80044d2:	d903      	bls.n	80044dc <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	22ff      	movs	r2, #255	; 0xff
 80044d8:	851a      	strh	r2, [r3, #40]	; 0x28
 80044da:	e004      	b.n	80044e6 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	3324      	adds	r3, #36	; 0x24
 80044f0:	4619      	mov	r1, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	461a      	mov	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fc:	f7fd ffc4 	bl	8002488 <HAL_DMA_Start_IT>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d004      	beq.n	8004510 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004506:	2110      	movs	r1, #16
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f7ff fe8f 	bl	800422c <I2C_ITError>
}
 800450e:	e003      	b.n	8004518 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004510:	2112      	movs	r1, #18
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 f9b2 	bl	800487c <I2C_Enable_IRQ>
}
 8004518:	bf00      	nop
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8004528:	2300      	movs	r3, #0
 800452a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004530:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	2b00      	cmp	r3, #0
 8004538:	d007      	beq.n	800454a <I2C_DMAError+0x2a>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 8004546:	2301      	movs	r3, #1
 8004548:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800454e:	2b00      	cmp	r3, #0
 8004550:	d007      	beq.n	8004562 <I2C_DMAError+0x42>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 800455e:	2301      	movs	r3, #1
 8004560:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7fe f99c 	bl	80028a0 <HAL_DMA_GetError>
 8004568:	4603      	mov	r3, r0
 800456a:	2b02      	cmp	r3, #2
 800456c:	d00e      	beq.n	800458c <I2C_DMAError+0x6c>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00b      	beq.n	800458c <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004582:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004584:	2110      	movs	r1, #16
 8004586:	68b8      	ldr	r0, [r7, #8]
 8004588:	f7ff fe50 	bl	800422c <I2C_ITError>
  }
}
 800458c:	bf00      	nop
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a0:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a6:	2200      	movs	r2, #0
 80045a8:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ae:	2200      	movs	r2, #0
 80045b0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b60      	cmp	r3, #96	; 0x60
 80045bc:	d107      	bne.n	80045ce <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2220      	movs	r2, #32
 80045c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f7fe fffe 	bl	80035c8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80045cc:	e002      	b.n	80045d4 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f7fe fff0 	bl	80035b4 <HAL_I2C_ErrorCallback>
}
 80045d4:	bf00      	nop
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	603b      	str	r3, [r7, #0]
 80045e8:	4613      	mov	r3, r2
 80045ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045ec:	e022      	b.n	8004634 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f4:	d01e      	beq.n	8004634 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f6:	f7fd f897 	bl	8001728 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	429a      	cmp	r2, r3
 8004604:	d302      	bcc.n	800460c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d113      	bne.n	8004634 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004610:	f043 0220 	orr.w	r2, r3, #32
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2220      	movs	r2, #32
 800461c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e00f      	b.n	8004654 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699a      	ldr	r2, [r3, #24]
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	4013      	ands	r3, r2
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	429a      	cmp	r2, r3
 8004642:	bf0c      	ite	eq
 8004644:	2301      	moveq	r3, #1
 8004646:	2300      	movne	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	461a      	mov	r2, r3
 800464c:	79fb      	ldrb	r3, [r7, #7]
 800464e:	429a      	cmp	r2, r3
 8004650:	d0cd      	beq.n	80045ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004668:	e02c      	b.n	80046c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	68b9      	ldr	r1, [r7, #8]
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 f870 	bl	8004754 <I2C_IsAcknowledgeFailed>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e02a      	b.n	80046d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004684:	d01e      	beq.n	80046c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004686:	f7fd f84f 	bl	8001728 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	429a      	cmp	r2, r3
 8004694:	d302      	bcc.n	800469c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d113      	bne.n	80046c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a0:	f043 0220 	orr.w	r2, r3, #32
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e007      	b.n	80046d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d1cb      	bne.n	800466a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046e8:	e028      	b.n	800473c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	68b9      	ldr	r1, [r7, #8]
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 f830 	bl	8004754 <I2C_IsAcknowledgeFailed>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e026      	b.n	800474c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046fe:	f7fd f813 	bl	8001728 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	429a      	cmp	r2, r3
 800470c:	d302      	bcc.n	8004714 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d113      	bne.n	800473c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004718:	f043 0220 	orr.w	r2, r3, #32
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e007      	b.n	800474c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	f003 0320 	and.w	r3, r3, #32
 8004746:	2b20      	cmp	r3, #32
 8004748:	d1cf      	bne.n	80046ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	f003 0310 	and.w	r3, r3, #16
 800476a:	2b10      	cmp	r3, #16
 800476c:	d151      	bne.n	8004812 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800476e:	e022      	b.n	80047b6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004776:	d01e      	beq.n	80047b6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004778:	f7fc ffd6 	bl	8001728 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	429a      	cmp	r2, r3
 8004786:	d302      	bcc.n	800478e <I2C_IsAcknowledgeFailed+0x3a>
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d113      	bne.n	80047b6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004792:	f043 0220 	orr.w	r2, r3, #32
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2220      	movs	r2, #32
 800479e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e02e      	b.n	8004814 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	f003 0320 	and.w	r3, r3, #32
 80047c0:	2b20      	cmp	r3, #32
 80047c2:	d1d5      	bne.n	8004770 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2210      	movs	r2, #16
 80047ca:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2220      	movs	r2, #32
 80047d2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f7ff fde9 	bl	80043ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6859      	ldr	r1, [r3, #4]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	4b0d      	ldr	r3, [pc, #52]	; (800481c <I2C_IsAcknowledgeFailed+0xc8>)
 80047e6:	400b      	ands	r3, r1
 80047e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ee:	f043 0204 	orr.w	r2, r3, #4
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2220      	movs	r2, #32
 80047fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e000      	b.n	8004814 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	fe00e800 	.word	0xfe00e800

08004820 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	607b      	str	r3, [r7, #4]
 800482a:	460b      	mov	r3, r1
 800482c:	817b      	strh	r3, [r7, #10]
 800482e:	4613      	mov	r3, r2
 8004830:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	0d5b      	lsrs	r3, r3, #21
 800483c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004840:	4b0d      	ldr	r3, [pc, #52]	; (8004878 <I2C_TransferConfig+0x58>)
 8004842:	430b      	orrs	r3, r1
 8004844:	43db      	mvns	r3, r3
 8004846:	ea02 0103 	and.w	r1, r2, r3
 800484a:	897b      	ldrh	r3, [r7, #10]
 800484c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004850:	7a7b      	ldrb	r3, [r7, #9]
 8004852:	041b      	lsls	r3, r3, #16
 8004854:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004858:	431a      	orrs	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	431a      	orrs	r2, r3
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	431a      	orrs	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800486a:	bf00      	nop
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	03ff63ff 	.word	0x03ff63ff

0800487c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	460b      	mov	r3, r1
 8004886:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004890:	4a2f      	ldr	r2, [pc, #188]	; (8004950 <I2C_Enable_IRQ+0xd4>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d004      	beq.n	80048a0 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800489a:	4a2e      	ldr	r2, [pc, #184]	; (8004954 <I2C_Enable_IRQ+0xd8>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d124      	bne.n	80048ea <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80048a0:	887b      	ldrh	r3, [r7, #2]
 80048a2:	f003 0304 	and.w	r3, r3, #4
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80048b0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80048b2:	887b      	ldrh	r3, [r7, #2]
 80048b4:	f003 0311 	and.w	r3, r3, #17
 80048b8:	2b11      	cmp	r3, #17
 80048ba:	d103      	bne.n	80048c4 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80048c2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80048c4:	887b      	ldrh	r3, [r7, #2]
 80048c6:	f003 0312 	and.w	r3, r3, #18
 80048ca:	2b12      	cmp	r3, #18
 80048cc:	d103      	bne.n	80048d6 <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f043 0320 	orr.w	r3, r3, #32
 80048d4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 80048d6:	887b      	ldrh	r3, [r7, #2]
 80048d8:	f003 0312 	and.w	r3, r3, #18
 80048dc:	2b12      	cmp	r3, #18
 80048de:	d128      	bne.n	8004932 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048e6:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 80048e8:	e023      	b.n	8004932 <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80048ea:	887b      	ldrh	r3, [r7, #2]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80048fa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80048fc:	887b      	ldrh	r3, [r7, #2]
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800490c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800490e:	887b      	ldrh	r3, [r7, #2]
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d003      	beq.n	8004920 <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800491e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8004920:	887b      	ldrh	r3, [r7, #2]
 8004922:	f003 0312 	and.w	r3, r3, #18
 8004926:	2b12      	cmp	r3, #18
 8004928:	d103      	bne.n	8004932 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f043 0320 	orr.w	r3, r3, #32
 8004930:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6819      	ldr	r1, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	430a      	orrs	r2, r1
 8004940:	601a      	str	r2, [r3, #0]
}
 8004942:	bf00      	nop
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	080037e3 	.word	0x080037e3
 8004954:	080039c9 	.word	0x080039c9

08004958 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	460b      	mov	r3, r1
 8004962:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004964:	2300      	movs	r3, #0
 8004966:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004968:	887b      	ldrh	r3, [r7, #2]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00f      	beq.n	8004992 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004978:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004980:	b2db      	uxtb	r3, r3
 8004982:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004986:	2b28      	cmp	r3, #40	; 0x28
 8004988:	d003      	beq.n	8004992 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004990:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004992:	887b      	ldrh	r3, [r7, #2]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00f      	beq.n	80049bc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80049a2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049b0:	2b28      	cmp	r3, #40	; 0x28
 80049b2:	d003      	beq.n	80049bc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80049ba:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80049bc:	887b      	ldrh	r3, [r7, #2]
 80049be:	f003 0304 	and.w	r3, r3, #4
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80049cc:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80049ce:	887b      	ldrh	r3, [r7, #2]
 80049d0:	f003 0311 	and.w	r3, r3, #17
 80049d4:	2b11      	cmp	r3, #17
 80049d6:	d103      	bne.n	80049e0 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80049de:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80049e0:	887b      	ldrh	r3, [r7, #2]
 80049e2:	f003 0312 	and.w	r3, r3, #18
 80049e6:	2b12      	cmp	r3, #18
 80049e8:	d103      	bne.n	80049f2 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f043 0320 	orr.w	r3, r3, #32
 80049f0:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 80049f2:	887b      	ldrh	r3, [r7, #2]
 80049f4:	f003 0312 	and.w	r3, r3, #18
 80049f8:	2b12      	cmp	r3, #18
 80049fa:	d103      	bne.n	8004a04 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a02:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6819      	ldr	r1, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	43da      	mvns	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	400a      	ands	r2, r1
 8004a14:	601a      	str	r2, [r3, #0]
}
 8004a16:	bf00      	nop
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b083      	sub	sp, #12
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b20      	cmp	r3, #32
 8004a36:	d138      	bne.n	8004aaa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d101      	bne.n	8004a46 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a42:	2302      	movs	r3, #2
 8004a44:	e032      	b.n	8004aac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2224      	movs	r2, #36	; 0x24
 8004a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0201 	bic.w	r2, r2, #1
 8004a64:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a74:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6819      	ldr	r1, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0201 	orr.w	r2, r2, #1
 8004a94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	e000      	b.n	8004aac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004aaa:	2302      	movs	r3, #2
  }
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b20      	cmp	r3, #32
 8004acc:	d139      	bne.n	8004b42 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d101      	bne.n	8004adc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	e033      	b.n	8004b44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2224      	movs	r2, #36	; 0x24
 8004ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0201 	bic.w	r2, r2, #1
 8004afa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004b0a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	021b      	lsls	r3, r3, #8
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f042 0201 	orr.w	r2, r2, #1
 8004b2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	e000      	b.n	8004b44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b42:	2302      	movs	r3, #2
  }
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b54:	4b05      	ldr	r3, [pc, #20]	; (8004b6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a04      	ldr	r2, [pc, #16]	; (8004b6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b5e:	6013      	str	r3, [r2, #0]
}
 8004b60:	bf00      	nop
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	40007000 	.word	0x40007000

08004b70 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004b76:	2300      	movs	r3, #0
 8004b78:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004b7a:	4b23      	ldr	r3, [pc, #140]	; (8004c08 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	4a22      	ldr	r2, [pc, #136]	; (8004c08 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b84:	6413      	str	r3, [r2, #64]	; 0x40
 8004b86:	4b20      	ldr	r3, [pc, #128]	; (8004c08 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b8e:	603b      	str	r3, [r7, #0]
 8004b90:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004b92:	4b1e      	ldr	r3, [pc, #120]	; (8004c0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a1d      	ldr	r2, [pc, #116]	; (8004c0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b9c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b9e:	f7fc fdc3 	bl	8001728 <HAL_GetTick>
 8004ba2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ba4:	e009      	b.n	8004bba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ba6:	f7fc fdbf 	bl	8001728 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bb4:	d901      	bls.n	8004bba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e022      	b.n	8004c00 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bba:	4b14      	ldr	r3, [pc, #80]	; (8004c0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc6:	d1ee      	bne.n	8004ba6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004bc8:	4b10      	ldr	r3, [pc, #64]	; (8004c0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a0f      	ldr	r2, [pc, #60]	; (8004c0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bd2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bd4:	f7fc fda8 	bl	8001728 <HAL_GetTick>
 8004bd8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004bda:	e009      	b.n	8004bf0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004bdc:	f7fc fda4 	bl	8001728 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bea:	d901      	bls.n	8004bf0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e007      	b.n	8004c00 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004bf0:	4b06      	ldr	r3, [pc, #24]	; (8004c0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bfc:	d1ee      	bne.n	8004bdc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	40007000 	.word	0x40007000

08004c10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e291      	b.n	800514a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 8087 	beq.w	8004d42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c34:	4b96      	ldr	r3, [pc, #600]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f003 030c 	and.w	r3, r3, #12
 8004c3c:	2b04      	cmp	r3, #4
 8004c3e:	d00c      	beq.n	8004c5a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c40:	4b93      	ldr	r3, [pc, #588]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f003 030c 	and.w	r3, r3, #12
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d112      	bne.n	8004c72 <HAL_RCC_OscConfig+0x62>
 8004c4c:	4b90      	ldr	r3, [pc, #576]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c58:	d10b      	bne.n	8004c72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c5a:	4b8d      	ldr	r3, [pc, #564]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d06c      	beq.n	8004d40 <HAL_RCC_OscConfig+0x130>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d168      	bne.n	8004d40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e26b      	b.n	800514a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c7a:	d106      	bne.n	8004c8a <HAL_RCC_OscConfig+0x7a>
 8004c7c:	4b84      	ldr	r3, [pc, #528]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a83      	ldr	r2, [pc, #524]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c86:	6013      	str	r3, [r2, #0]
 8004c88:	e02e      	b.n	8004ce8 <HAL_RCC_OscConfig+0xd8>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10c      	bne.n	8004cac <HAL_RCC_OscConfig+0x9c>
 8004c92:	4b7f      	ldr	r3, [pc, #508]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a7e      	ldr	r2, [pc, #504]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	4b7c      	ldr	r3, [pc, #496]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a7b      	ldr	r2, [pc, #492]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	e01d      	b.n	8004ce8 <HAL_RCC_OscConfig+0xd8>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cb4:	d10c      	bne.n	8004cd0 <HAL_RCC_OscConfig+0xc0>
 8004cb6:	4b76      	ldr	r3, [pc, #472]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a75      	ldr	r2, [pc, #468]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	4b73      	ldr	r3, [pc, #460]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a72      	ldr	r2, [pc, #456]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	e00b      	b.n	8004ce8 <HAL_RCC_OscConfig+0xd8>
 8004cd0:	4b6f      	ldr	r3, [pc, #444]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a6e      	ldr	r2, [pc, #440]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	4b6c      	ldr	r3, [pc, #432]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a6b      	ldr	r2, [pc, #428]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d013      	beq.n	8004d18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf0:	f7fc fd1a 	bl	8001728 <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cf8:	f7fc fd16 	bl	8001728 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b64      	cmp	r3, #100	; 0x64
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e21f      	b.n	800514a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d0a:	4b61      	ldr	r3, [pc, #388]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0f0      	beq.n	8004cf8 <HAL_RCC_OscConfig+0xe8>
 8004d16:	e014      	b.n	8004d42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d18:	f7fc fd06 	bl	8001728 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d20:	f7fc fd02 	bl	8001728 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b64      	cmp	r3, #100	; 0x64
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e20b      	b.n	800514a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d32:	4b57      	ldr	r3, [pc, #348]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f0      	bne.n	8004d20 <HAL_RCC_OscConfig+0x110>
 8004d3e:	e000      	b.n	8004d42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d069      	beq.n	8004e22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d4e:	4b50      	ldr	r3, [pc, #320]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 030c 	and.w	r3, r3, #12
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00b      	beq.n	8004d72 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d5a:	4b4d      	ldr	r3, [pc, #308]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 030c 	and.w	r3, r3, #12
 8004d62:	2b08      	cmp	r3, #8
 8004d64:	d11c      	bne.n	8004da0 <HAL_RCC_OscConfig+0x190>
 8004d66:	4b4a      	ldr	r3, [pc, #296]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d116      	bne.n	8004da0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d72:	4b47      	ldr	r3, [pc, #284]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d005      	beq.n	8004d8a <HAL_RCC_OscConfig+0x17a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d001      	beq.n	8004d8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e1df      	b.n	800514a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d8a:	4b41      	ldr	r3, [pc, #260]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	493d      	ldr	r1, [pc, #244]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d9e:	e040      	b.n	8004e22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d023      	beq.n	8004df0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004da8:	4b39      	ldr	r3, [pc, #228]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a38      	ldr	r2, [pc, #224]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004dae:	f043 0301 	orr.w	r3, r3, #1
 8004db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db4:	f7fc fcb8 	bl	8001728 <HAL_GetTick>
 8004db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dba:	e008      	b.n	8004dce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dbc:	f7fc fcb4 	bl	8001728 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e1bd      	b.n	800514a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dce:	4b30      	ldr	r3, [pc, #192]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d0f0      	beq.n	8004dbc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dda:	4b2d      	ldr	r3, [pc, #180]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	4929      	ldr	r1, [pc, #164]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	600b      	str	r3, [r1, #0]
 8004dee:	e018      	b.n	8004e22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004df0:	4b27      	ldr	r3, [pc, #156]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a26      	ldr	r2, [pc, #152]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004df6:	f023 0301 	bic.w	r3, r3, #1
 8004dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfc:	f7fc fc94 	bl	8001728 <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e04:	f7fc fc90 	bl	8001728 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e199      	b.n	800514a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e16:	4b1e      	ldr	r3, [pc, #120]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1f0      	bne.n	8004e04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d038      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d019      	beq.n	8004e6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e36:	4b16      	ldr	r3, [pc, #88]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e3a:	4a15      	ldr	r2, [pc, #84]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004e3c:	f043 0301 	orr.w	r3, r3, #1
 8004e40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e42:	f7fc fc71 	bl	8001728 <HAL_GetTick>
 8004e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e48:	e008      	b.n	8004e5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e4a:	f7fc fc6d 	bl	8001728 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d901      	bls.n	8004e5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e176      	b.n	800514a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e5c:	4b0c      	ldr	r3, [pc, #48]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0f0      	beq.n	8004e4a <HAL_RCC_OscConfig+0x23a>
 8004e68:	e01a      	b.n	8004ea0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e6a:	4b09      	ldr	r3, [pc, #36]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e6e:	4a08      	ldr	r2, [pc, #32]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004e70:	f023 0301 	bic.w	r3, r3, #1
 8004e74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e76:	f7fc fc57 	bl	8001728 <HAL_GetTick>
 8004e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e7c:	e00a      	b.n	8004e94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e7e:	f7fc fc53 	bl	8001728 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d903      	bls.n	8004e94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e15c      	b.n	800514a <HAL_RCC_OscConfig+0x53a>
 8004e90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e94:	4b91      	ldr	r3, [pc, #580]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1ee      	bne.n	8004e7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 80a4 	beq.w	8004ff6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eae:	4b8b      	ldr	r3, [pc, #556]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10d      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eba:	4b88      	ldr	r3, [pc, #544]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	4a87      	ldr	r2, [pc, #540]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ec6:	4b85      	ldr	r3, [pc, #532]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ece:	60bb      	str	r3, [r7, #8]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ed6:	4b82      	ldr	r3, [pc, #520]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d118      	bne.n	8004f14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004ee2:	4b7f      	ldr	r3, [pc, #508]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a7e      	ldr	r2, [pc, #504]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eee:	f7fc fc1b 	bl	8001728 <HAL_GetTick>
 8004ef2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ef4:	e008      	b.n	8004f08 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ef6:	f7fc fc17 	bl	8001728 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	2b64      	cmp	r3, #100	; 0x64
 8004f02:	d901      	bls.n	8004f08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e120      	b.n	800514a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f08:	4b75      	ldr	r3, [pc, #468]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d0f0      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d106      	bne.n	8004f2a <HAL_RCC_OscConfig+0x31a>
 8004f1c:	4b6f      	ldr	r3, [pc, #444]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f20:	4a6e      	ldr	r2, [pc, #440]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004f22:	f043 0301 	orr.w	r3, r3, #1
 8004f26:	6713      	str	r3, [r2, #112]	; 0x70
 8004f28:	e02d      	b.n	8004f86 <HAL_RCC_OscConfig+0x376>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10c      	bne.n	8004f4c <HAL_RCC_OscConfig+0x33c>
 8004f32:	4b6a      	ldr	r3, [pc, #424]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f36:	4a69      	ldr	r2, [pc, #420]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004f38:	f023 0301 	bic.w	r3, r3, #1
 8004f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f3e:	4b67      	ldr	r3, [pc, #412]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f42:	4a66      	ldr	r2, [pc, #408]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004f44:	f023 0304 	bic.w	r3, r3, #4
 8004f48:	6713      	str	r3, [r2, #112]	; 0x70
 8004f4a:	e01c      	b.n	8004f86 <HAL_RCC_OscConfig+0x376>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	2b05      	cmp	r3, #5
 8004f52:	d10c      	bne.n	8004f6e <HAL_RCC_OscConfig+0x35e>
 8004f54:	4b61      	ldr	r3, [pc, #388]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f58:	4a60      	ldr	r2, [pc, #384]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004f5a:	f043 0304 	orr.w	r3, r3, #4
 8004f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f60:	4b5e      	ldr	r3, [pc, #376]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f64:	4a5d      	ldr	r2, [pc, #372]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004f66:	f043 0301 	orr.w	r3, r3, #1
 8004f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f6c:	e00b      	b.n	8004f86 <HAL_RCC_OscConfig+0x376>
 8004f6e:	4b5b      	ldr	r3, [pc, #364]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f72:	4a5a      	ldr	r2, [pc, #360]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004f74:	f023 0301 	bic.w	r3, r3, #1
 8004f78:	6713      	str	r3, [r2, #112]	; 0x70
 8004f7a:	4b58      	ldr	r3, [pc, #352]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7e:	4a57      	ldr	r2, [pc, #348]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004f80:	f023 0304 	bic.w	r3, r3, #4
 8004f84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d015      	beq.n	8004fba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f8e:	f7fc fbcb 	bl	8001728 <HAL_GetTick>
 8004f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f94:	e00a      	b.n	8004fac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f96:	f7fc fbc7 	bl	8001728 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d901      	bls.n	8004fac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e0ce      	b.n	800514a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fac:	4b4b      	ldr	r3, [pc, #300]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d0ee      	beq.n	8004f96 <HAL_RCC_OscConfig+0x386>
 8004fb8:	e014      	b.n	8004fe4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fba:	f7fc fbb5 	bl	8001728 <HAL_GetTick>
 8004fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fc0:	e00a      	b.n	8004fd8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fc2:	f7fc fbb1 	bl	8001728 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e0b8      	b.n	800514a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fd8:	4b40      	ldr	r3, [pc, #256]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1ee      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fe4:	7dfb      	ldrb	r3, [r7, #23]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d105      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fea:	4b3c      	ldr	r3, [pc, #240]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	4a3b      	ldr	r2, [pc, #236]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ff4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 80a4 	beq.w	8005148 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005000:	4b36      	ldr	r3, [pc, #216]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f003 030c 	and.w	r3, r3, #12
 8005008:	2b08      	cmp	r3, #8
 800500a:	d06b      	beq.n	80050e4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	2b02      	cmp	r3, #2
 8005012:	d149      	bne.n	80050a8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005014:	4b31      	ldr	r3, [pc, #196]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a30      	ldr	r2, [pc, #192]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 800501a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800501e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005020:	f7fc fb82 	bl	8001728 <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005028:	f7fc fb7e 	bl	8001728 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e087      	b.n	800514a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800503a:	4b28      	ldr	r3, [pc, #160]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1f0      	bne.n	8005028 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	69da      	ldr	r2, [r3, #28]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	019b      	lsls	r3, r3, #6
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505c:	085b      	lsrs	r3, r3, #1
 800505e:	3b01      	subs	r3, #1
 8005060:	041b      	lsls	r3, r3, #16
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005068:	061b      	lsls	r3, r3, #24
 800506a:	4313      	orrs	r3, r2
 800506c:	4a1b      	ldr	r2, [pc, #108]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 800506e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005072:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005074:	4b19      	ldr	r3, [pc, #100]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a18      	ldr	r2, [pc, #96]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 800507a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800507e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005080:	f7fc fb52 	bl	8001728 <HAL_GetTick>
 8005084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005086:	e008      	b.n	800509a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005088:	f7fc fb4e 	bl	8001728 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e057      	b.n	800514a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800509a:	4b10      	ldr	r3, [pc, #64]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0f0      	beq.n	8005088 <HAL_RCC_OscConfig+0x478>
 80050a6:	e04f      	b.n	8005148 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050a8:	4b0c      	ldr	r3, [pc, #48]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a0b      	ldr	r2, [pc, #44]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 80050ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b4:	f7fc fb38 	bl	8001728 <HAL_GetTick>
 80050b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050bc:	f7fc fb34 	bl	8001728 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e03d      	b.n	800514a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ce:	4b03      	ldr	r3, [pc, #12]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1f0      	bne.n	80050bc <HAL_RCC_OscConfig+0x4ac>
 80050da:	e035      	b.n	8005148 <HAL_RCC_OscConfig+0x538>
 80050dc:	40023800 	.word	0x40023800
 80050e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80050e4:	4b1b      	ldr	r3, [pc, #108]	; (8005154 <HAL_RCC_OscConfig+0x544>)
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d028      	beq.n	8005144 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d121      	bne.n	8005144 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800510a:	429a      	cmp	r2, r3
 800510c:	d11a      	bne.n	8005144 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005114:	4013      	ands	r3, r2
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800511a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800511c:	4293      	cmp	r3, r2
 800511e:	d111      	bne.n	8005144 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512a:	085b      	lsrs	r3, r3, #1
 800512c:	3b01      	subs	r3, #1
 800512e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005130:	429a      	cmp	r2, r3
 8005132:	d107      	bne.n	8005144 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005140:	429a      	cmp	r2, r3
 8005142:	d001      	beq.n	8005148 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e000      	b.n	800514a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3718      	adds	r7, #24
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	40023800 	.word	0x40023800

08005158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005162:	2300      	movs	r3, #0
 8005164:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e0d0      	b.n	8005312 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005170:	4b6a      	ldr	r3, [pc, #424]	; (800531c <HAL_RCC_ClockConfig+0x1c4>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 030f 	and.w	r3, r3, #15
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	429a      	cmp	r2, r3
 800517c:	d910      	bls.n	80051a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800517e:	4b67      	ldr	r3, [pc, #412]	; (800531c <HAL_RCC_ClockConfig+0x1c4>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f023 020f 	bic.w	r2, r3, #15
 8005186:	4965      	ldr	r1, [pc, #404]	; (800531c <HAL_RCC_ClockConfig+0x1c4>)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	4313      	orrs	r3, r2
 800518c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800518e:	4b63      	ldr	r3, [pc, #396]	; (800531c <HAL_RCC_ClockConfig+0x1c4>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 030f 	and.w	r3, r3, #15
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	429a      	cmp	r2, r3
 800519a:	d001      	beq.n	80051a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e0b8      	b.n	8005312 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d020      	beq.n	80051ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d005      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051b8:	4b59      	ldr	r3, [pc, #356]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	4a58      	ldr	r2, [pc, #352]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80051be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0308 	and.w	r3, r3, #8
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051d0:	4b53      	ldr	r3, [pc, #332]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	4a52      	ldr	r2, [pc, #328]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80051d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051dc:	4b50      	ldr	r3, [pc, #320]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	494d      	ldr	r1, [pc, #308]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d040      	beq.n	800527c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d107      	bne.n	8005212 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005202:	4b47      	ldr	r3, [pc, #284]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d115      	bne.n	800523a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e07f      	b.n	8005312 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2b02      	cmp	r3, #2
 8005218:	d107      	bne.n	800522a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800521a:	4b41      	ldr	r3, [pc, #260]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d109      	bne.n	800523a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e073      	b.n	8005312 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800522a:	4b3d      	ldr	r3, [pc, #244]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e06b      	b.n	8005312 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800523a:	4b39      	ldr	r3, [pc, #228]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f023 0203 	bic.w	r2, r3, #3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	4936      	ldr	r1, [pc, #216]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 8005248:	4313      	orrs	r3, r2
 800524a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800524c:	f7fc fa6c 	bl	8001728 <HAL_GetTick>
 8005250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005252:	e00a      	b.n	800526a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005254:	f7fc fa68 	bl	8001728 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005262:	4293      	cmp	r3, r2
 8005264:	d901      	bls.n	800526a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e053      	b.n	8005312 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800526a:	4b2d      	ldr	r3, [pc, #180]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f003 020c 	and.w	r2, r3, #12
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	429a      	cmp	r2, r3
 800527a:	d1eb      	bne.n	8005254 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800527c:	4b27      	ldr	r3, [pc, #156]	; (800531c <HAL_RCC_ClockConfig+0x1c4>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 030f 	and.w	r3, r3, #15
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	429a      	cmp	r2, r3
 8005288:	d210      	bcs.n	80052ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800528a:	4b24      	ldr	r3, [pc, #144]	; (800531c <HAL_RCC_ClockConfig+0x1c4>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f023 020f 	bic.w	r2, r3, #15
 8005292:	4922      	ldr	r1, [pc, #136]	; (800531c <HAL_RCC_ClockConfig+0x1c4>)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	4313      	orrs	r3, r2
 8005298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800529a:	4b20      	ldr	r3, [pc, #128]	; (800531c <HAL_RCC_ClockConfig+0x1c4>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d001      	beq.n	80052ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e032      	b.n	8005312 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d008      	beq.n	80052ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052b8:	4b19      	ldr	r3, [pc, #100]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	4916      	ldr	r1, [pc, #88]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0308 	and.w	r3, r3, #8
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d009      	beq.n	80052ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052d6:	4b12      	ldr	r3, [pc, #72]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	490e      	ldr	r1, [pc, #56]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80052ea:	f000 f821 	bl	8005330 <HAL_RCC_GetSysClockFreq>
 80052ee:	4601      	mov	r1, r0
 80052f0:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	091b      	lsrs	r3, r3, #4
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	4a0a      	ldr	r2, [pc, #40]	; (8005324 <HAL_RCC_ClockConfig+0x1cc>)
 80052fc:	5cd3      	ldrb	r3, [r2, r3]
 80052fe:	fa21 f303 	lsr.w	r3, r1, r3
 8005302:	4a09      	ldr	r2, [pc, #36]	; (8005328 <HAL_RCC_ClockConfig+0x1d0>)
 8005304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005306:	4b09      	ldr	r3, [pc, #36]	; (800532c <HAL_RCC_ClockConfig+0x1d4>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	f7fc f9c8 	bl	80016a0 <HAL_InitTick>

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	40023c00 	.word	0x40023c00
 8005320:	40023800 	.word	0x40023800
 8005324:	08007a0c 	.word	0x08007a0c
 8005328:	20000000 	.word	0x20000000
 800532c:	20000004 	.word	0x20000004

08005330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005336:	2300      	movs	r3, #0
 8005338:	607b      	str	r3, [r7, #4]
 800533a:	2300      	movs	r3, #0
 800533c:	60fb      	str	r3, [r7, #12]
 800533e:	2300      	movs	r3, #0
 8005340:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005342:	2300      	movs	r3, #0
 8005344:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005346:	4b63      	ldr	r3, [pc, #396]	; (80054d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 030c 	and.w	r3, r3, #12
 800534e:	2b04      	cmp	r3, #4
 8005350:	d007      	beq.n	8005362 <HAL_RCC_GetSysClockFreq+0x32>
 8005352:	2b08      	cmp	r3, #8
 8005354:	d008      	beq.n	8005368 <HAL_RCC_GetSysClockFreq+0x38>
 8005356:	2b00      	cmp	r3, #0
 8005358:	f040 80b4 	bne.w	80054c4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800535c:	4b5e      	ldr	r3, [pc, #376]	; (80054d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800535e:	60bb      	str	r3, [r7, #8]
      break;
 8005360:	e0b3      	b.n	80054ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005362:	4b5e      	ldr	r3, [pc, #376]	; (80054dc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005364:	60bb      	str	r3, [r7, #8]
      break;
 8005366:	e0b0      	b.n	80054ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005368:	4b5a      	ldr	r3, [pc, #360]	; (80054d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005370:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005372:	4b58      	ldr	r3, [pc, #352]	; (80054d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d04a      	beq.n	8005414 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800537e:	4b55      	ldr	r3, [pc, #340]	; (80054d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	099b      	lsrs	r3, r3, #6
 8005384:	f04f 0400 	mov.w	r4, #0
 8005388:	f240 11ff 	movw	r1, #511	; 0x1ff
 800538c:	f04f 0200 	mov.w	r2, #0
 8005390:	ea03 0501 	and.w	r5, r3, r1
 8005394:	ea04 0602 	and.w	r6, r4, r2
 8005398:	4629      	mov	r1, r5
 800539a:	4632      	mov	r2, r6
 800539c:	f04f 0300 	mov.w	r3, #0
 80053a0:	f04f 0400 	mov.w	r4, #0
 80053a4:	0154      	lsls	r4, r2, #5
 80053a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80053aa:	014b      	lsls	r3, r1, #5
 80053ac:	4619      	mov	r1, r3
 80053ae:	4622      	mov	r2, r4
 80053b0:	1b49      	subs	r1, r1, r5
 80053b2:	eb62 0206 	sbc.w	r2, r2, r6
 80053b6:	f04f 0300 	mov.w	r3, #0
 80053ba:	f04f 0400 	mov.w	r4, #0
 80053be:	0194      	lsls	r4, r2, #6
 80053c0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80053c4:	018b      	lsls	r3, r1, #6
 80053c6:	1a5b      	subs	r3, r3, r1
 80053c8:	eb64 0402 	sbc.w	r4, r4, r2
 80053cc:	f04f 0100 	mov.w	r1, #0
 80053d0:	f04f 0200 	mov.w	r2, #0
 80053d4:	00e2      	lsls	r2, r4, #3
 80053d6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80053da:	00d9      	lsls	r1, r3, #3
 80053dc:	460b      	mov	r3, r1
 80053de:	4614      	mov	r4, r2
 80053e0:	195b      	adds	r3, r3, r5
 80053e2:	eb44 0406 	adc.w	r4, r4, r6
 80053e6:	f04f 0100 	mov.w	r1, #0
 80053ea:	f04f 0200 	mov.w	r2, #0
 80053ee:	0262      	lsls	r2, r4, #9
 80053f0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80053f4:	0259      	lsls	r1, r3, #9
 80053f6:	460b      	mov	r3, r1
 80053f8:	4614      	mov	r4, r2
 80053fa:	4618      	mov	r0, r3
 80053fc:	4621      	mov	r1, r4
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f04f 0400 	mov.w	r4, #0
 8005404:	461a      	mov	r2, r3
 8005406:	4623      	mov	r3, r4
 8005408:	f7fa ff62 	bl	80002d0 <__aeabi_uldivmod>
 800540c:	4603      	mov	r3, r0
 800540e:	460c      	mov	r4, r1
 8005410:	60fb      	str	r3, [r7, #12]
 8005412:	e049      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005414:	4b2f      	ldr	r3, [pc, #188]	; (80054d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	099b      	lsrs	r3, r3, #6
 800541a:	f04f 0400 	mov.w	r4, #0
 800541e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005422:	f04f 0200 	mov.w	r2, #0
 8005426:	ea03 0501 	and.w	r5, r3, r1
 800542a:	ea04 0602 	and.w	r6, r4, r2
 800542e:	4629      	mov	r1, r5
 8005430:	4632      	mov	r2, r6
 8005432:	f04f 0300 	mov.w	r3, #0
 8005436:	f04f 0400 	mov.w	r4, #0
 800543a:	0154      	lsls	r4, r2, #5
 800543c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005440:	014b      	lsls	r3, r1, #5
 8005442:	4619      	mov	r1, r3
 8005444:	4622      	mov	r2, r4
 8005446:	1b49      	subs	r1, r1, r5
 8005448:	eb62 0206 	sbc.w	r2, r2, r6
 800544c:	f04f 0300 	mov.w	r3, #0
 8005450:	f04f 0400 	mov.w	r4, #0
 8005454:	0194      	lsls	r4, r2, #6
 8005456:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800545a:	018b      	lsls	r3, r1, #6
 800545c:	1a5b      	subs	r3, r3, r1
 800545e:	eb64 0402 	sbc.w	r4, r4, r2
 8005462:	f04f 0100 	mov.w	r1, #0
 8005466:	f04f 0200 	mov.w	r2, #0
 800546a:	00e2      	lsls	r2, r4, #3
 800546c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005470:	00d9      	lsls	r1, r3, #3
 8005472:	460b      	mov	r3, r1
 8005474:	4614      	mov	r4, r2
 8005476:	195b      	adds	r3, r3, r5
 8005478:	eb44 0406 	adc.w	r4, r4, r6
 800547c:	f04f 0100 	mov.w	r1, #0
 8005480:	f04f 0200 	mov.w	r2, #0
 8005484:	02a2      	lsls	r2, r4, #10
 8005486:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800548a:	0299      	lsls	r1, r3, #10
 800548c:	460b      	mov	r3, r1
 800548e:	4614      	mov	r4, r2
 8005490:	4618      	mov	r0, r3
 8005492:	4621      	mov	r1, r4
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f04f 0400 	mov.w	r4, #0
 800549a:	461a      	mov	r2, r3
 800549c:	4623      	mov	r3, r4
 800549e:	f7fa ff17 	bl	80002d0 <__aeabi_uldivmod>
 80054a2:	4603      	mov	r3, r0
 80054a4:	460c      	mov	r4, r1
 80054a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80054a8:	4b0a      	ldr	r3, [pc, #40]	; (80054d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	0c1b      	lsrs	r3, r3, #16
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	3301      	adds	r3, #1
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c0:	60bb      	str	r3, [r7, #8]
      break;
 80054c2:	e002      	b.n	80054ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054c4:	4b04      	ldr	r3, [pc, #16]	; (80054d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80054c6:	60bb      	str	r3, [r7, #8]
      break;
 80054c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054ca:	68bb      	ldr	r3, [r7, #8]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054d4:	40023800 	.word	0x40023800
 80054d8:	00f42400 	.word	0x00f42400
 80054dc:	007a1200 	.word	0x007a1200

080054e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054e4:	4b03      	ldr	r3, [pc, #12]	; (80054f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80054e6:	681b      	ldr	r3, [r3, #0]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	20000000 	.word	0x20000000

080054f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054fc:	f7ff fff0 	bl	80054e0 <HAL_RCC_GetHCLKFreq>
 8005500:	4601      	mov	r1, r0
 8005502:	4b05      	ldr	r3, [pc, #20]	; (8005518 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	0a9b      	lsrs	r3, r3, #10
 8005508:	f003 0307 	and.w	r3, r3, #7
 800550c:	4a03      	ldr	r2, [pc, #12]	; (800551c <HAL_RCC_GetPCLK1Freq+0x24>)
 800550e:	5cd3      	ldrb	r3, [r2, r3]
 8005510:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005514:	4618      	mov	r0, r3
 8005516:	bd80      	pop	{r7, pc}
 8005518:	40023800 	.word	0x40023800
 800551c:	08007a1c 	.word	0x08007a1c

08005520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005524:	f7ff ffdc 	bl	80054e0 <HAL_RCC_GetHCLKFreq>
 8005528:	4601      	mov	r1, r0
 800552a:	4b05      	ldr	r3, [pc, #20]	; (8005540 <HAL_RCC_GetPCLK2Freq+0x20>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	0b5b      	lsrs	r3, r3, #13
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	4a03      	ldr	r2, [pc, #12]	; (8005544 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005536:	5cd3      	ldrb	r3, [r2, r3]
 8005538:	fa21 f303 	lsr.w	r3, r1, r3
}
 800553c:	4618      	mov	r0, r3
 800553e:	bd80      	pop	{r7, pc}
 8005540:	40023800 	.word	0x40023800
 8005544:	08007a1c 	.word	0x08007a1c

08005548 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b088      	sub	sp, #32
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005550:	2300      	movs	r3, #0
 8005552:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005554:	2300      	movs	r3, #0
 8005556:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8005558:	2300      	movs	r3, #0
 800555a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800555c:	2300      	movs	r3, #0
 800555e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0301 	and.w	r3, r3, #1
 8005568:	2b00      	cmp	r3, #0
 800556a:	d012      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800556c:	4b65      	ldr	r3, [pc, #404]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	4a64      	ldr	r2, [pc, #400]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005572:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005576:	6093      	str	r3, [r2, #8]
 8005578:	4b62      	ldr	r3, [pc, #392]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800557a:	689a      	ldr	r2, [r3, #8]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005580:	4960      	ldr	r1, [pc, #384]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005582:	4313      	orrs	r3, r2
 8005584:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800558e:	2301      	movs	r3, #1
 8005590:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d017      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800559e:	4b59      	ldr	r3, [pc, #356]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ac:	4955      	ldr	r1, [pc, #340]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055bc:	d101      	bne.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80055be:	2301      	movs	r3, #1
 80055c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80055ca:	2301      	movs	r3, #1
 80055cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d017      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80055da:	4b4a      	ldr	r3, [pc, #296]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e8:	4946      	ldr	r1, [pc, #280]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055f8:	d101      	bne.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80055fa:	2301      	movs	r3, #1
 80055fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8005606:	2301      	movs	r3, #1
 8005608:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0320 	and.w	r3, r3, #32
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 808b 	beq.w	800572e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005618:	4b3a      	ldr	r3, [pc, #232]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800561a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561c:	4a39      	ldr	r2, [pc, #228]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800561e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005622:	6413      	str	r3, [r2, #64]	; 0x40
 8005624:	4b37      	ldr	r3, [pc, #220]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800562c:	60fb      	str	r3, [r7, #12]
 800562e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005630:	4b35      	ldr	r3, [pc, #212]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a34      	ldr	r2, [pc, #208]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800563a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800563c:	f7fc f874 	bl	8001728 <HAL_GetTick>
 8005640:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005642:	e008      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005644:	f7fc f870 	bl	8001728 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	2b64      	cmp	r3, #100	; 0x64
 8005650:	d901      	bls.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e2ba      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005656:	4b2c      	ldr	r3, [pc, #176]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565e:	2b00      	cmp	r3, #0
 8005660:	d0f0      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005662:	4b28      	ldr	r3, [pc, #160]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800566a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d035      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	429a      	cmp	r2, r3
 800567e:	d02e      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005680:	4b20      	ldr	r3, [pc, #128]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005688:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800568a:	4b1e      	ldr	r3, [pc, #120]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800568c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568e:	4a1d      	ldr	r2, [pc, #116]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005694:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005696:	4b1b      	ldr	r3, [pc, #108]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569a:	4a1a      	ldr	r2, [pc, #104]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800569c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80056a2:	4a18      	ldr	r2, [pc, #96]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056a8:	4b16      	ldr	r3, [pc, #88]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d114      	bne.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b4:	f7fc f838 	bl	8001728 <HAL_GetTick>
 80056b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ba:	e00a      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056bc:	f7fc f834 	bl	8001728 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d901      	bls.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e27c      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056d2:	4b0c      	ldr	r3, [pc, #48]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d0ee      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056ea:	d111      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80056ec:	4b05      	ldr	r3, [pc, #20]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80056f8:	4b04      	ldr	r3, [pc, #16]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80056fa:	400b      	ands	r3, r1
 80056fc:	4901      	ldr	r1, [pc, #4]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	608b      	str	r3, [r1, #8]
 8005702:	e00b      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005704:	40023800 	.word	0x40023800
 8005708:	40007000 	.word	0x40007000
 800570c:	0ffffcff 	.word	0x0ffffcff
 8005710:	4ba3      	ldr	r3, [pc, #652]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	4aa2      	ldr	r2, [pc, #648]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005716:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800571a:	6093      	str	r3, [r2, #8]
 800571c:	4ba0      	ldr	r3, [pc, #640]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800571e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005728:	499d      	ldr	r1, [pc, #628]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800572a:	4313      	orrs	r3, r2
 800572c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0310 	and.w	r3, r3, #16
 8005736:	2b00      	cmp	r3, #0
 8005738:	d010      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800573a:	4b99      	ldr	r3, [pc, #612]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800573c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005740:	4a97      	ldr	r2, [pc, #604]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005742:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005746:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800574a:	4b95      	ldr	r3, [pc, #596]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800574c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005754:	4992      	ldr	r1, [pc, #584]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005756:	4313      	orrs	r3, r2
 8005758:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00a      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005768:	4b8d      	ldr	r3, [pc, #564]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800576a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800576e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005776:	498a      	ldr	r1, [pc, #552]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005778:	4313      	orrs	r3, r2
 800577a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00a      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800578a:	4b85      	ldr	r3, [pc, #532]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800578c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005790:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005798:	4981      	ldr	r1, [pc, #516]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800579a:	4313      	orrs	r3, r2
 800579c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00a      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057ac:	4b7c      	ldr	r3, [pc, #496]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80057ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057ba:	4979      	ldr	r1, [pc, #484]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00a      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057ce:	4b74      	ldr	r3, [pc, #464]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80057d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d4:	f023 0203 	bic.w	r2, r3, #3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057dc:	4970      	ldr	r1, [pc, #448]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00a      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057f0:	4b6b      	ldr	r3, [pc, #428]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80057f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f6:	f023 020c 	bic.w	r2, r3, #12
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	4968      	ldr	r1, [pc, #416]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005800:	4313      	orrs	r3, r2
 8005802:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00a      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005812:	4b63      	ldr	r3, [pc, #396]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005818:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005820:	495f      	ldr	r1, [pc, #380]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005822:	4313      	orrs	r3, r2
 8005824:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00a      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005834:	4b5a      	ldr	r3, [pc, #360]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005842:	4957      	ldr	r1, [pc, #348]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005844:	4313      	orrs	r3, r2
 8005846:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005856:	4b52      	ldr	r3, [pc, #328]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005864:	494e      	ldr	r1, [pc, #312]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005866:	4313      	orrs	r3, r2
 8005868:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00a      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005878:	4b49      	ldr	r3, [pc, #292]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800587a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800587e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005886:	4946      	ldr	r1, [pc, #280]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005888:	4313      	orrs	r3, r2
 800588a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800589a:	4b41      	ldr	r3, [pc, #260]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800589c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a8:	493d      	ldr	r1, [pc, #244]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00a      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80058bc:	4b38      	ldr	r3, [pc, #224]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80058be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ca:	4935      	ldr	r1, [pc, #212]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d011      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80058de:	4b30      	ldr	r3, [pc, #192]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80058e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058ec:	492c      	ldr	r1, [pc, #176]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058fc:	d101      	bne.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80058fe:	2301      	movs	r3, #1
 8005900:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00a      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800590e:	4b24      	ldr	r3, [pc, #144]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005914:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800591c:	4920      	ldr	r1, [pc, #128]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800591e:	4313      	orrs	r3, r2
 8005920:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00a      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005930:	4b1b      	ldr	r3, [pc, #108]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005936:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800593e:	4918      	ldr	r1, [pc, #96]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005940:	4313      	orrs	r3, r2
 8005942:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00a      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005952:	4b13      	ldr	r3, [pc, #76]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005958:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005960:	490f      	ldr	r1, [pc, #60]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005962:	4313      	orrs	r3, r2
 8005964:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d005      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x432>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005976:	f040 809c 	bne.w	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800597a:	4b09      	ldr	r3, [pc, #36]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a08      	ldr	r2, [pc, #32]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005980:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005984:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005986:	f7fb fecf 	bl	8001728 <HAL_GetTick>
 800598a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800598c:	e00a      	b.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800598e:	f7fb fecb 	bl	8001728 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b64      	cmp	r3, #100	; 0x64
 800599a:	d903      	bls.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e115      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x684>
 80059a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059a4:	4b8b      	ldr	r3, [pc, #556]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1ee      	bne.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d017      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d113      	bne.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80059c4:	4b83      	ldr	r3, [pc, #524]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80059c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ca:	0e1b      	lsrs	r3, r3, #24
 80059cc:	f003 030f 	and.w	r3, r3, #15
 80059d0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	019a      	lsls	r2, r3, #6
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	061b      	lsls	r3, r3, #24
 80059dc:	431a      	orrs	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	071b      	lsls	r3, r3, #28
 80059e4:	497b      	ldr	r1, [pc, #492]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d004      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a00:	d00a      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d024      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a16:	d11f      	bne.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a18:	4b6e      	ldr	r3, [pc, #440]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a1e:	0f1b      	lsrs	r3, r3, #28
 8005a20:	f003 0307 	and.w	r3, r3, #7
 8005a24:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	019a      	lsls	r2, r3, #6
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	061b      	lsls	r3, r3, #24
 8005a32:	431a      	orrs	r2, r3
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	071b      	lsls	r3, r3, #28
 8005a38:	4966      	ldr	r1, [pc, #408]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005a40:	4b64      	ldr	r3, [pc, #400]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005a42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a46:	f023 021f 	bic.w	r2, r3, #31
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	4960      	ldr	r1, [pc, #384]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00d      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	019a      	lsls	r2, r3, #6
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	061b      	lsls	r3, r3, #24
 8005a70:	431a      	orrs	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	071b      	lsls	r3, r3, #28
 8005a78:	4956      	ldr	r1, [pc, #344]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a80:	4b54      	ldr	r3, [pc, #336]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a53      	ldr	r2, [pc, #332]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005a86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a8c:	f7fb fe4c 	bl	8001728 <HAL_GetTick>
 8005a90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a92:	e008      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a94:	f7fb fe48 	bl	8001728 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	2b64      	cmp	r3, #100	; 0x64
 8005aa0:	d901      	bls.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e092      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005aa6:	4b4b      	ldr	r3, [pc, #300]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d0f0      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	f040 8088 	bne.w	8005bca <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005aba:	4b46      	ldr	r3, [pc, #280]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a45      	ldr	r2, [pc, #276]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005ac0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ac4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ac6:	f7fb fe2f 	bl	8001728 <HAL_GetTick>
 8005aca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005acc:	e008      	b.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ace:	f7fb fe2b 	bl	8001728 <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	2b64      	cmp	r3, #100	; 0x64
 8005ada:	d901      	bls.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e075      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ae0:	4b3c      	ldr	r3, [pc, #240]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005aec:	d0ef      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d009      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d024      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d120      	bne.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b16:	4b2f      	ldr	r3, [pc, #188]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b1c:	0c1b      	lsrs	r3, r3, #16
 8005b1e:	f003 0303 	and.w	r3, r3, #3
 8005b22:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	019a      	lsls	r2, r3, #6
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	041b      	lsls	r3, r3, #16
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	061b      	lsls	r3, r3, #24
 8005b36:	4927      	ldr	r1, [pc, #156]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005b3e:	4b25      	ldr	r3, [pc, #148]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b44:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	021b      	lsls	r3, r3, #8
 8005b50:	4920      	ldr	r1, [pc, #128]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d018      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b6c:	d113      	bne.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b6e:	4b19      	ldr	r3, [pc, #100]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b74:	0e1b      	lsrs	r3, r3, #24
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	019a      	lsls	r2, r3, #6
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	041b      	lsls	r3, r3, #16
 8005b88:	431a      	orrs	r2, r3
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	061b      	lsls	r3, r3, #24
 8005b8e:	4911      	ldr	r1, [pc, #68]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005b96:	4b0f      	ldr	r3, [pc, #60]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a0e      	ldr	r2, [pc, #56]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ba0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ba2:	f7fb fdc1 	bl	8001728 <HAL_GetTick>
 8005ba6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ba8:	e008      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005baa:	f7fb fdbd 	bl	8001728 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	2b64      	cmp	r3, #100	; 0x64
 8005bb6:	d901      	bls.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e007      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005bbc:	4b05      	ldr	r3, [pc, #20]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bc8:	d1ef      	bne.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3720      	adds	r7, #32
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	40023800 	.word	0x40023800

08005bd8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e01d      	b.n	8005c26 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d106      	bne.n	8005c04 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7fb fba8 	bl	8001354 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	3304      	adds	r3, #4
 8005c14:	4619      	mov	r1, r3
 8005c16:	4610      	mov	r0, r2
 8005c18:	f000 fa18 	bl	800604c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b082      	sub	sp, #8
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e01d      	b.n	8005c7c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d106      	bne.n	8005c5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 f815 	bl	8005c84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	3304      	adds	r3, #4
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	f000 f9ed 	bl	800604c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	6839      	ldr	r1, [r7, #0]
 8005caa:	4618      	mov	r0, r3
 8005cac:	f000 fccc 	bl	8006648 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a17      	ldr	r2, [pc, #92]	; (8005d14 <HAL_TIM_PWM_Start+0x7c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d004      	beq.n	8005cc4 <HAL_TIM_PWM_Start+0x2c>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a16      	ldr	r2, [pc, #88]	; (8005d18 <HAL_TIM_PWM_Start+0x80>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d101      	bne.n	8005cc8 <HAL_TIM_PWM_Start+0x30>
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e000      	b.n	8005cca <HAL_TIM_PWM_Start+0x32>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d007      	beq.n	8005cde <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cdc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	689a      	ldr	r2, [r3, #8]
 8005ce4:	4b0d      	ldr	r3, [pc, #52]	; (8005d1c <HAL_TIM_PWM_Start+0x84>)
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2b06      	cmp	r3, #6
 8005cee:	d00b      	beq.n	8005d08 <HAL_TIM_PWM_Start+0x70>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cf6:	d007      	beq.n	8005d08 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f042 0201 	orr.w	r2, r2, #1
 8005d06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	40010000 	.word	0x40010000
 8005d18:	40010400 	.word	0x40010400
 8005d1c:	00010007 	.word	0x00010007

08005d20 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d101      	bne.n	8005d3a <HAL_TIM_OC_ConfigChannel+0x1a>
 8005d36:	2302      	movs	r3, #2
 8005d38:	e06c      	b.n	8005e14 <HAL_TIM_OC_ConfigChannel+0xf4>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2202      	movs	r2, #2
 8005d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b14      	cmp	r3, #20
 8005d4e:	d857      	bhi.n	8005e00 <HAL_TIM_OC_ConfigChannel+0xe0>
 8005d50:	a201      	add	r2, pc, #4	; (adr r2, 8005d58 <HAL_TIM_OC_ConfigChannel+0x38>)
 8005d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d56:	bf00      	nop
 8005d58:	08005dad 	.word	0x08005dad
 8005d5c:	08005e01 	.word	0x08005e01
 8005d60:	08005e01 	.word	0x08005e01
 8005d64:	08005e01 	.word	0x08005e01
 8005d68:	08005dbb 	.word	0x08005dbb
 8005d6c:	08005e01 	.word	0x08005e01
 8005d70:	08005e01 	.word	0x08005e01
 8005d74:	08005e01 	.word	0x08005e01
 8005d78:	08005dc9 	.word	0x08005dc9
 8005d7c:	08005e01 	.word	0x08005e01
 8005d80:	08005e01 	.word	0x08005e01
 8005d84:	08005e01 	.word	0x08005e01
 8005d88:	08005dd7 	.word	0x08005dd7
 8005d8c:	08005e01 	.word	0x08005e01
 8005d90:	08005e01 	.word	0x08005e01
 8005d94:	08005e01 	.word	0x08005e01
 8005d98:	08005de5 	.word	0x08005de5
 8005d9c:	08005e01 	.word	0x08005e01
 8005da0:	08005e01 	.word	0x08005e01
 8005da4:	08005e01 	.word	0x08005e01
 8005da8:	08005df3 	.word	0x08005df3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68b9      	ldr	r1, [r7, #8]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 f9ea 	bl	800618c <TIM_OC1_SetConfig>
      break;
 8005db8:	e023      	b.n	8005e02 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68b9      	ldr	r1, [r7, #8]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f000 fa55 	bl	8006270 <TIM_OC2_SetConfig>
      break;
 8005dc6:	e01c      	b.n	8005e02 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68b9      	ldr	r1, [r7, #8]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f000 fac6 	bl	8006360 <TIM_OC3_SetConfig>
      break;
 8005dd4:	e015      	b.n	8005e02 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68b9      	ldr	r1, [r7, #8]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f000 fb35 	bl	800644c <TIM_OC4_SetConfig>
      break;
 8005de2:	e00e      	b.n	8005e02 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68b9      	ldr	r1, [r7, #8]
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 fb86 	bl	80064fc <TIM_OC5_SetConfig>
      break;
 8005df0:	e007      	b.n	8005e02 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68b9      	ldr	r1, [r7, #8]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f000 fbd1 	bl	80065a0 <TIM_OC6_SetConfig>
      break;
 8005dfe:	e000      	b.n	8005e02 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 8005e00:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d101      	bne.n	8005e36 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005e32:	2302      	movs	r3, #2
 8005e34:	e105      	b.n	8006042 <HAL_TIM_PWM_ConfigChannel+0x226>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2202      	movs	r2, #2
 8005e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2b14      	cmp	r3, #20
 8005e4a:	f200 80f0 	bhi.w	800602e <HAL_TIM_PWM_ConfigChannel+0x212>
 8005e4e:	a201      	add	r2, pc, #4	; (adr r2, 8005e54 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e54:	08005ea9 	.word	0x08005ea9
 8005e58:	0800602f 	.word	0x0800602f
 8005e5c:	0800602f 	.word	0x0800602f
 8005e60:	0800602f 	.word	0x0800602f
 8005e64:	08005ee9 	.word	0x08005ee9
 8005e68:	0800602f 	.word	0x0800602f
 8005e6c:	0800602f 	.word	0x0800602f
 8005e70:	0800602f 	.word	0x0800602f
 8005e74:	08005f2b 	.word	0x08005f2b
 8005e78:	0800602f 	.word	0x0800602f
 8005e7c:	0800602f 	.word	0x0800602f
 8005e80:	0800602f 	.word	0x0800602f
 8005e84:	08005f6b 	.word	0x08005f6b
 8005e88:	0800602f 	.word	0x0800602f
 8005e8c:	0800602f 	.word	0x0800602f
 8005e90:	0800602f 	.word	0x0800602f
 8005e94:	08005fad 	.word	0x08005fad
 8005e98:	0800602f 	.word	0x0800602f
 8005e9c:	0800602f 	.word	0x0800602f
 8005ea0:	0800602f 	.word	0x0800602f
 8005ea4:	08005fed 	.word	0x08005fed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68b9      	ldr	r1, [r7, #8]
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f000 f96c 	bl	800618c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	699a      	ldr	r2, [r3, #24]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f042 0208 	orr.w	r2, r2, #8
 8005ec2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	699a      	ldr	r2, [r3, #24]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0204 	bic.w	r2, r2, #4
 8005ed2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6999      	ldr	r1, [r3, #24]
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	691a      	ldr	r2, [r3, #16]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	619a      	str	r2, [r3, #24]
      break;
 8005ee6:	e0a3      	b.n	8006030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68b9      	ldr	r1, [r7, #8]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 f9be 	bl	8006270 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	699a      	ldr	r2, [r3, #24]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	699a      	ldr	r2, [r3, #24]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6999      	ldr	r1, [r3, #24]
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	021a      	lsls	r2, r3, #8
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	430a      	orrs	r2, r1
 8005f26:	619a      	str	r2, [r3, #24]
      break;
 8005f28:	e082      	b.n	8006030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68b9      	ldr	r1, [r7, #8]
 8005f30:	4618      	mov	r0, r3
 8005f32:	f000 fa15 	bl	8006360 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	69da      	ldr	r2, [r3, #28]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f042 0208 	orr.w	r2, r2, #8
 8005f44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	69da      	ldr	r2, [r3, #28]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 0204 	bic.w	r2, r2, #4
 8005f54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	69d9      	ldr	r1, [r3, #28]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	691a      	ldr	r2, [r3, #16]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	430a      	orrs	r2, r1
 8005f66:	61da      	str	r2, [r3, #28]
      break;
 8005f68:	e062      	b.n	8006030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68b9      	ldr	r1, [r7, #8]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f000 fa6b 	bl	800644c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	69da      	ldr	r2, [r3, #28]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	69da      	ldr	r2, [r3, #28]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	69d9      	ldr	r1, [r3, #28]
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	021a      	lsls	r2, r3, #8
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	61da      	str	r2, [r3, #28]
      break;
 8005faa:	e041      	b.n	8006030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68b9      	ldr	r1, [r7, #8]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 faa2 	bl	80064fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f042 0208 	orr.w	r2, r2, #8
 8005fc6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 0204 	bic.w	r2, r2, #4
 8005fd6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	691a      	ldr	r2, [r3, #16]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005fea:	e021      	b.n	8006030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68b9      	ldr	r1, [r7, #8]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 fad4 	bl	80065a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006006:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006016:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	021a      	lsls	r2, r3, #8
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	430a      	orrs	r2, r1
 800602a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800602c:	e000      	b.n	8006030 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800602e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop

0800604c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a40      	ldr	r2, [pc, #256]	; (8006160 <TIM_Base_SetConfig+0x114>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d013      	beq.n	800608c <TIM_Base_SetConfig+0x40>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800606a:	d00f      	beq.n	800608c <TIM_Base_SetConfig+0x40>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a3d      	ldr	r2, [pc, #244]	; (8006164 <TIM_Base_SetConfig+0x118>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00b      	beq.n	800608c <TIM_Base_SetConfig+0x40>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a3c      	ldr	r2, [pc, #240]	; (8006168 <TIM_Base_SetConfig+0x11c>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d007      	beq.n	800608c <TIM_Base_SetConfig+0x40>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a3b      	ldr	r2, [pc, #236]	; (800616c <TIM_Base_SetConfig+0x120>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d003      	beq.n	800608c <TIM_Base_SetConfig+0x40>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a3a      	ldr	r2, [pc, #232]	; (8006170 <TIM_Base_SetConfig+0x124>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d108      	bne.n	800609e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	4313      	orrs	r3, r2
 800609c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a2f      	ldr	r2, [pc, #188]	; (8006160 <TIM_Base_SetConfig+0x114>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d02b      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ac:	d027      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a2c      	ldr	r2, [pc, #176]	; (8006164 <TIM_Base_SetConfig+0x118>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d023      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a2b      	ldr	r2, [pc, #172]	; (8006168 <TIM_Base_SetConfig+0x11c>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d01f      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a2a      	ldr	r2, [pc, #168]	; (800616c <TIM_Base_SetConfig+0x120>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d01b      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a29      	ldr	r2, [pc, #164]	; (8006170 <TIM_Base_SetConfig+0x124>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d017      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a28      	ldr	r2, [pc, #160]	; (8006174 <TIM_Base_SetConfig+0x128>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d013      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a27      	ldr	r2, [pc, #156]	; (8006178 <TIM_Base_SetConfig+0x12c>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d00f      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a26      	ldr	r2, [pc, #152]	; (800617c <TIM_Base_SetConfig+0x130>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d00b      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a25      	ldr	r2, [pc, #148]	; (8006180 <TIM_Base_SetConfig+0x134>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d007      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a24      	ldr	r2, [pc, #144]	; (8006184 <TIM_Base_SetConfig+0x138>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d003      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a23      	ldr	r2, [pc, #140]	; (8006188 <TIM_Base_SetConfig+0x13c>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d108      	bne.n	8006110 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	4313      	orrs	r3, r2
 800610e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	4313      	orrs	r3, r2
 800611c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a0a      	ldr	r2, [pc, #40]	; (8006160 <TIM_Base_SetConfig+0x114>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d003      	beq.n	8006144 <TIM_Base_SetConfig+0xf8>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a0c      	ldr	r2, [pc, #48]	; (8006170 <TIM_Base_SetConfig+0x124>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d103      	bne.n	800614c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	691a      	ldr	r2, [r3, #16]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	615a      	str	r2, [r3, #20]
}
 8006152:	bf00      	nop
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	40010000 	.word	0x40010000
 8006164:	40000400 	.word	0x40000400
 8006168:	40000800 	.word	0x40000800
 800616c:	40000c00 	.word	0x40000c00
 8006170:	40010400 	.word	0x40010400
 8006174:	40014000 	.word	0x40014000
 8006178:	40014400 	.word	0x40014400
 800617c:	40014800 	.word	0x40014800
 8006180:	40001800 	.word	0x40001800
 8006184:	40001c00 	.word	0x40001c00
 8006188:	40002000 	.word	0x40002000

0800618c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800618c:	b480      	push	{r7}
 800618e:	b087      	sub	sp, #28
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	f023 0201 	bic.w	r2, r3, #1
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	4b2b      	ldr	r3, [pc, #172]	; (8006264 <TIM_OC1_SetConfig+0xd8>)
 80061b8:	4013      	ands	r3, r2
 80061ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f023 0303 	bic.w	r3, r3, #3
 80061c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f023 0302 	bic.w	r3, r3, #2
 80061d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	4313      	orrs	r3, r2
 80061de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a21      	ldr	r2, [pc, #132]	; (8006268 <TIM_OC1_SetConfig+0xdc>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d003      	beq.n	80061f0 <TIM_OC1_SetConfig+0x64>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a20      	ldr	r2, [pc, #128]	; (800626c <TIM_OC1_SetConfig+0xe0>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d10c      	bne.n	800620a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f023 0308 	bic.w	r3, r3, #8
 80061f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	4313      	orrs	r3, r2
 8006200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f023 0304 	bic.w	r3, r3, #4
 8006208:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a16      	ldr	r2, [pc, #88]	; (8006268 <TIM_OC1_SetConfig+0xdc>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d003      	beq.n	800621a <TIM_OC1_SetConfig+0x8e>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a15      	ldr	r2, [pc, #84]	; (800626c <TIM_OC1_SetConfig+0xe0>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d111      	bne.n	800623e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	4313      	orrs	r3, r2
 8006232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	4313      	orrs	r3, r2
 800623c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	621a      	str	r2, [r3, #32]
}
 8006258:	bf00      	nop
 800625a:	371c      	adds	r7, #28
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr
 8006264:	fffeff8f 	.word	0xfffeff8f
 8006268:	40010000 	.word	0x40010000
 800626c:	40010400 	.word	0x40010400

08006270 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006270:	b480      	push	{r7}
 8006272:	b087      	sub	sp, #28
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	f023 0210 	bic.w	r2, r3, #16
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	4b2e      	ldr	r3, [pc, #184]	; (8006354 <TIM_OC2_SetConfig+0xe4>)
 800629c:	4013      	ands	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	021b      	lsls	r3, r3, #8
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f023 0320 	bic.w	r3, r3, #32
 80062ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	011b      	lsls	r3, r3, #4
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a23      	ldr	r2, [pc, #140]	; (8006358 <TIM_OC2_SetConfig+0xe8>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d003      	beq.n	80062d8 <TIM_OC2_SetConfig+0x68>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a22      	ldr	r2, [pc, #136]	; (800635c <TIM_OC2_SetConfig+0xec>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d10d      	bne.n	80062f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	011b      	lsls	r3, r3, #4
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a18      	ldr	r2, [pc, #96]	; (8006358 <TIM_OC2_SetConfig+0xe8>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d003      	beq.n	8006304 <TIM_OC2_SetConfig+0x94>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a17      	ldr	r2, [pc, #92]	; (800635c <TIM_OC2_SetConfig+0xec>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d113      	bne.n	800632c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800630a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006312:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	4313      	orrs	r3, r2
 800631e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	4313      	orrs	r3, r2
 800632a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	621a      	str	r2, [r3, #32]
}
 8006346:	bf00      	nop
 8006348:	371c      	adds	r7, #28
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	feff8fff 	.word	0xfeff8fff
 8006358:	40010000 	.word	0x40010000
 800635c:	40010400 	.word	0x40010400

08006360 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	4b2d      	ldr	r3, [pc, #180]	; (8006440 <TIM_OC3_SetConfig+0xe0>)
 800638c:	4013      	ands	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f023 0303 	bic.w	r3, r3, #3
 8006396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	4313      	orrs	r3, r2
 80063a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	021b      	lsls	r3, r3, #8
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a22      	ldr	r2, [pc, #136]	; (8006444 <TIM_OC3_SetConfig+0xe4>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d003      	beq.n	80063c6 <TIM_OC3_SetConfig+0x66>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a21      	ldr	r2, [pc, #132]	; (8006448 <TIM_OC3_SetConfig+0xe8>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d10d      	bne.n	80063e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	021b      	lsls	r3, r3, #8
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a17      	ldr	r2, [pc, #92]	; (8006444 <TIM_OC3_SetConfig+0xe4>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d003      	beq.n	80063f2 <TIM_OC3_SetConfig+0x92>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a16      	ldr	r2, [pc, #88]	; (8006448 <TIM_OC3_SetConfig+0xe8>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d113      	bne.n	800641a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006400:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	011b      	lsls	r3, r3, #4
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	4313      	orrs	r3, r2
 800640c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	011b      	lsls	r3, r3, #4
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	4313      	orrs	r3, r2
 8006418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	685a      	ldr	r2, [r3, #4]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	621a      	str	r2, [r3, #32]
}
 8006434:	bf00      	nop
 8006436:	371c      	adds	r7, #28
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	fffeff8f 	.word	0xfffeff8f
 8006444:	40010000 	.word	0x40010000
 8006448:	40010400 	.word	0x40010400

0800644c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	4b1e      	ldr	r3, [pc, #120]	; (80064f0 <TIM_OC4_SetConfig+0xa4>)
 8006478:	4013      	ands	r3, r2
 800647a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	021b      	lsls	r3, r3, #8
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	4313      	orrs	r3, r2
 800648e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	031b      	lsls	r3, r3, #12
 800649e:	693a      	ldr	r2, [r7, #16]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a13      	ldr	r2, [pc, #76]	; (80064f4 <TIM_OC4_SetConfig+0xa8>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d003      	beq.n	80064b4 <TIM_OC4_SetConfig+0x68>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a12      	ldr	r2, [pc, #72]	; (80064f8 <TIM_OC4_SetConfig+0xac>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d109      	bne.n	80064c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	019b      	lsls	r3, r3, #6
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	621a      	str	r2, [r3, #32]
}
 80064e2:	bf00      	nop
 80064e4:	371c      	adds	r7, #28
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	feff8fff 	.word	0xfeff8fff
 80064f4:	40010000 	.word	0x40010000
 80064f8:	40010400 	.word	0x40010400

080064fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b087      	sub	sp, #28
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	4b1b      	ldr	r3, [pc, #108]	; (8006594 <TIM_OC5_SetConfig+0x98>)
 8006528:	4013      	ands	r3, r2
 800652a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	4313      	orrs	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800653c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	041b      	lsls	r3, r3, #16
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	4313      	orrs	r3, r2
 8006548:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a12      	ldr	r2, [pc, #72]	; (8006598 <TIM_OC5_SetConfig+0x9c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d003      	beq.n	800655a <TIM_OC5_SetConfig+0x5e>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a11      	ldr	r2, [pc, #68]	; (800659c <TIM_OC5_SetConfig+0xa0>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d109      	bne.n	800656e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006560:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	021b      	lsls	r3, r3, #8
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	4313      	orrs	r3, r2
 800656c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	621a      	str	r2, [r3, #32]
}
 8006588:	bf00      	nop
 800658a:	371c      	adds	r7, #28
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	fffeff8f 	.word	0xfffeff8f
 8006598:	40010000 	.word	0x40010000
 800659c:	40010400 	.word	0x40010400

080065a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b087      	sub	sp, #28
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	4b1c      	ldr	r3, [pc, #112]	; (800663c <TIM_OC6_SetConfig+0x9c>)
 80065cc:	4013      	ands	r3, r2
 80065ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	021b      	lsls	r3, r3, #8
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	4313      	orrs	r3, r2
 80065da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	051b      	lsls	r3, r3, #20
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a13      	ldr	r2, [pc, #76]	; (8006640 <TIM_OC6_SetConfig+0xa0>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d003      	beq.n	8006600 <TIM_OC6_SetConfig+0x60>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a12      	ldr	r2, [pc, #72]	; (8006644 <TIM_OC6_SetConfig+0xa4>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d109      	bne.n	8006614 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006606:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	029b      	lsls	r3, r3, #10
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	4313      	orrs	r3, r2
 8006612:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	621a      	str	r2, [r3, #32]
}
 800662e:	bf00      	nop
 8006630:	371c      	adds	r7, #28
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	feff8fff 	.word	0xfeff8fff
 8006640:	40010000 	.word	0x40010000
 8006644:	40010400 	.word	0x40010400

08006648 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006648:	b480      	push	{r7}
 800664a:	b087      	sub	sp, #28
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	f003 031f 	and.w	r3, r3, #31
 800665a:	2201      	movs	r2, #1
 800665c:	fa02 f303 	lsl.w	r3, r2, r3
 8006660:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6a1a      	ldr	r2, [r3, #32]
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	43db      	mvns	r3, r3
 800666a:	401a      	ands	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6a1a      	ldr	r2, [r3, #32]
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	f003 031f 	and.w	r3, r3, #31
 800667a:	6879      	ldr	r1, [r7, #4]
 800667c:	fa01 f303 	lsl.w	r3, r1, r3
 8006680:	431a      	orrs	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	621a      	str	r2, [r3, #32]
}
 8006686:	bf00      	nop
 8006688:	371c      	adds	r7, #28
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
	...

08006694 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d101      	bne.n	80066ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066a8:	2302      	movs	r3, #2
 80066aa:	e06d      	b.n	8006788 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2202      	movs	r2, #2
 80066b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a30      	ldr	r2, [pc, #192]	; (8006794 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d004      	beq.n	80066e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a2f      	ldr	r2, [pc, #188]	; (8006798 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d108      	bne.n	80066f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80066e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	4313      	orrs	r3, r2
 8006702:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a20      	ldr	r2, [pc, #128]	; (8006794 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d022      	beq.n	800675c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800671e:	d01d      	beq.n	800675c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a1d      	ldr	r2, [pc, #116]	; (800679c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d018      	beq.n	800675c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a1c      	ldr	r2, [pc, #112]	; (80067a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d013      	beq.n	800675c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a1a      	ldr	r2, [pc, #104]	; (80067a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d00e      	beq.n	800675c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a15      	ldr	r2, [pc, #84]	; (8006798 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d009      	beq.n	800675c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a16      	ldr	r2, [pc, #88]	; (80067a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d004      	beq.n	800675c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a15      	ldr	r2, [pc, #84]	; (80067ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d10c      	bne.n	8006776 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006762:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	4313      	orrs	r3, r2
 800676c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3714      	adds	r7, #20
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr
 8006794:	40010000 	.word	0x40010000
 8006798:	40010400 	.word	0x40010400
 800679c:	40000400 	.word	0x40000400
 80067a0:	40000800 	.word	0x40000800
 80067a4:	40000c00 	.word	0x40000c00
 80067a8:	40014000 	.word	0x40014000
 80067ac:	40001800 	.word	0x40001800

080067b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e040      	b.n	8006844 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d106      	bne.n	80067d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7fa fe48 	bl	8001468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2224      	movs	r2, #36	; 0x24
 80067dc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f022 0201 	bic.w	r2, r2, #1
 80067ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f8be 	bl	8006970 <UART_SetConfig>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d101      	bne.n	80067fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e022      	b.n	8006844 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006802:	2b00      	cmp	r3, #0
 8006804:	d002      	beq.n	800680c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fb5c 	bl	8006ec4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	685a      	ldr	r2, [r3, #4]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800681a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689a      	ldr	r2, [r3, #8]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800682a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f042 0201 	orr.w	r2, r2, #1
 800683a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fbe3 	bl	8007008 <UART_CheckIdleState>
 8006842:	4603      	mov	r3, r0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b08a      	sub	sp, #40	; 0x28
 8006850:	af02      	add	r7, sp, #8
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	603b      	str	r3, [r7, #0]
 8006858:	4613      	mov	r3, r2
 800685a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006860:	2b20      	cmp	r3, #32
 8006862:	d17f      	bne.n	8006964 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <HAL_UART_Transmit+0x24>
 800686a:	88fb      	ldrh	r3, [r7, #6]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e078      	b.n	8006966 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800687a:	2b01      	cmp	r3, #1
 800687c:	d101      	bne.n	8006882 <HAL_UART_Transmit+0x36>
 800687e:	2302      	movs	r3, #2
 8006880:	e071      	b.n	8006966 <HAL_UART_Transmit+0x11a>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2221      	movs	r2, #33	; 0x21
 8006894:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006896:	f7fa ff47 	bl	8001728 <HAL_GetTick>
 800689a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	88fa      	ldrh	r2, [r7, #6]
 80068a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	88fa      	ldrh	r2, [r7, #6]
 80068a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b4:	d108      	bne.n	80068c8 <HAL_UART_Transmit+0x7c>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d104      	bne.n	80068c8 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80068be:	2300      	movs	r3, #0
 80068c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	61bb      	str	r3, [r7, #24]
 80068c6:	e003      	b.n	80068d0 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068cc:	2300      	movs	r3, #0
 80068ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80068d8:	e02c      	b.n	8006934 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	2200      	movs	r2, #0
 80068e2:	2180      	movs	r1, #128	; 0x80
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f000 fbbe 	bl	8007066 <UART_WaitOnFlagUntilTimeout>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d001      	beq.n	80068f4 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e038      	b.n	8006966 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10b      	bne.n	8006912 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	881b      	ldrh	r3, [r3, #0]
 80068fe:	461a      	mov	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006908:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	3302      	adds	r3, #2
 800690e:	61bb      	str	r3, [r7, #24]
 8006910:	e007      	b.n	8006922 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	781a      	ldrb	r2, [r3, #0]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	3301      	adds	r3, #1
 8006920:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006928:	b29b      	uxth	r3, r3
 800692a:	3b01      	subs	r3, #1
 800692c:	b29a      	uxth	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800693a:	b29b      	uxth	r3, r3
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1cc      	bne.n	80068da <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	2200      	movs	r2, #0
 8006948:	2140      	movs	r1, #64	; 0x40
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f000 fb8b 	bl	8007066 <UART_WaitOnFlagUntilTimeout>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d001      	beq.n	800695a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e005      	b.n	8006966 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2220      	movs	r2, #32
 800695e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006960:	2300      	movs	r3, #0
 8006962:	e000      	b.n	8006966 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8006964:	2302      	movs	r3, #2
  }
}
 8006966:	4618      	mov	r0, r3
 8006968:	3720      	adds	r7, #32
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
	...

08006970 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b088      	sub	sp, #32
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006978:	2300      	movs	r3, #0
 800697a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800697c:	2300      	movs	r3, #0
 800697e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	689a      	ldr	r2, [r3, #8]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	431a      	orrs	r2, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	431a      	orrs	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	69db      	ldr	r3, [r3, #28]
 8006994:	4313      	orrs	r3, r2
 8006996:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	4bb1      	ldr	r3, [pc, #708]	; (8006c64 <UART_SetConfig+0x2f4>)
 80069a0:	4013      	ands	r3, r2
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	6812      	ldr	r2, [r2, #0]
 80069a6:	6939      	ldr	r1, [r7, #16]
 80069a8:	430b      	orrs	r3, r1
 80069aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68da      	ldr	r2, [r3, #12]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	430a      	orrs	r2, r1
 80069c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a1b      	ldr	r3, [r3, #32]
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a9f      	ldr	r2, [pc, #636]	; (8006c68 <UART_SetConfig+0x2f8>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d121      	bne.n	8006a34 <UART_SetConfig+0xc4>
 80069f0:	4b9e      	ldr	r3, [pc, #632]	; (8006c6c <UART_SetConfig+0x2fc>)
 80069f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069f6:	f003 0303 	and.w	r3, r3, #3
 80069fa:	2b03      	cmp	r3, #3
 80069fc:	d816      	bhi.n	8006a2c <UART_SetConfig+0xbc>
 80069fe:	a201      	add	r2, pc, #4	; (adr r2, 8006a04 <UART_SetConfig+0x94>)
 8006a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a04:	08006a15 	.word	0x08006a15
 8006a08:	08006a21 	.word	0x08006a21
 8006a0c:	08006a1b 	.word	0x08006a1b
 8006a10:	08006a27 	.word	0x08006a27
 8006a14:	2301      	movs	r3, #1
 8006a16:	77fb      	strb	r3, [r7, #31]
 8006a18:	e151      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006a1a:	2302      	movs	r3, #2
 8006a1c:	77fb      	strb	r3, [r7, #31]
 8006a1e:	e14e      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006a20:	2304      	movs	r3, #4
 8006a22:	77fb      	strb	r3, [r7, #31]
 8006a24:	e14b      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006a26:	2308      	movs	r3, #8
 8006a28:	77fb      	strb	r3, [r7, #31]
 8006a2a:	e148      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006a2c:	2310      	movs	r3, #16
 8006a2e:	77fb      	strb	r3, [r7, #31]
 8006a30:	bf00      	nop
 8006a32:	e144      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a8d      	ldr	r2, [pc, #564]	; (8006c70 <UART_SetConfig+0x300>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d134      	bne.n	8006aa8 <UART_SetConfig+0x138>
 8006a3e:	4b8b      	ldr	r3, [pc, #556]	; (8006c6c <UART_SetConfig+0x2fc>)
 8006a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a44:	f003 030c 	and.w	r3, r3, #12
 8006a48:	2b0c      	cmp	r3, #12
 8006a4a:	d829      	bhi.n	8006aa0 <UART_SetConfig+0x130>
 8006a4c:	a201      	add	r2, pc, #4	; (adr r2, 8006a54 <UART_SetConfig+0xe4>)
 8006a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a52:	bf00      	nop
 8006a54:	08006a89 	.word	0x08006a89
 8006a58:	08006aa1 	.word	0x08006aa1
 8006a5c:	08006aa1 	.word	0x08006aa1
 8006a60:	08006aa1 	.word	0x08006aa1
 8006a64:	08006a95 	.word	0x08006a95
 8006a68:	08006aa1 	.word	0x08006aa1
 8006a6c:	08006aa1 	.word	0x08006aa1
 8006a70:	08006aa1 	.word	0x08006aa1
 8006a74:	08006a8f 	.word	0x08006a8f
 8006a78:	08006aa1 	.word	0x08006aa1
 8006a7c:	08006aa1 	.word	0x08006aa1
 8006a80:	08006aa1 	.word	0x08006aa1
 8006a84:	08006a9b 	.word	0x08006a9b
 8006a88:	2300      	movs	r3, #0
 8006a8a:	77fb      	strb	r3, [r7, #31]
 8006a8c:	e117      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006a8e:	2302      	movs	r3, #2
 8006a90:	77fb      	strb	r3, [r7, #31]
 8006a92:	e114      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006a94:	2304      	movs	r3, #4
 8006a96:	77fb      	strb	r3, [r7, #31]
 8006a98:	e111      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006a9a:	2308      	movs	r3, #8
 8006a9c:	77fb      	strb	r3, [r7, #31]
 8006a9e:	e10e      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006aa0:	2310      	movs	r3, #16
 8006aa2:	77fb      	strb	r3, [r7, #31]
 8006aa4:	bf00      	nop
 8006aa6:	e10a      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a71      	ldr	r2, [pc, #452]	; (8006c74 <UART_SetConfig+0x304>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d120      	bne.n	8006af4 <UART_SetConfig+0x184>
 8006ab2:	4b6e      	ldr	r3, [pc, #440]	; (8006c6c <UART_SetConfig+0x2fc>)
 8006ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ab8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006abc:	2b10      	cmp	r3, #16
 8006abe:	d00f      	beq.n	8006ae0 <UART_SetConfig+0x170>
 8006ac0:	2b10      	cmp	r3, #16
 8006ac2:	d802      	bhi.n	8006aca <UART_SetConfig+0x15a>
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d005      	beq.n	8006ad4 <UART_SetConfig+0x164>
 8006ac8:	e010      	b.n	8006aec <UART_SetConfig+0x17c>
 8006aca:	2b20      	cmp	r3, #32
 8006acc:	d005      	beq.n	8006ada <UART_SetConfig+0x16a>
 8006ace:	2b30      	cmp	r3, #48	; 0x30
 8006ad0:	d009      	beq.n	8006ae6 <UART_SetConfig+0x176>
 8006ad2:	e00b      	b.n	8006aec <UART_SetConfig+0x17c>
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	77fb      	strb	r3, [r7, #31]
 8006ad8:	e0f1      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006ada:	2302      	movs	r3, #2
 8006adc:	77fb      	strb	r3, [r7, #31]
 8006ade:	e0ee      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006ae0:	2304      	movs	r3, #4
 8006ae2:	77fb      	strb	r3, [r7, #31]
 8006ae4:	e0eb      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006ae6:	2308      	movs	r3, #8
 8006ae8:	77fb      	strb	r3, [r7, #31]
 8006aea:	e0e8      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006aec:	2310      	movs	r3, #16
 8006aee:	77fb      	strb	r3, [r7, #31]
 8006af0:	bf00      	nop
 8006af2:	e0e4      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a5f      	ldr	r2, [pc, #380]	; (8006c78 <UART_SetConfig+0x308>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d120      	bne.n	8006b40 <UART_SetConfig+0x1d0>
 8006afe:	4b5b      	ldr	r3, [pc, #364]	; (8006c6c <UART_SetConfig+0x2fc>)
 8006b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b04:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b08:	2b40      	cmp	r3, #64	; 0x40
 8006b0a:	d00f      	beq.n	8006b2c <UART_SetConfig+0x1bc>
 8006b0c:	2b40      	cmp	r3, #64	; 0x40
 8006b0e:	d802      	bhi.n	8006b16 <UART_SetConfig+0x1a6>
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d005      	beq.n	8006b20 <UART_SetConfig+0x1b0>
 8006b14:	e010      	b.n	8006b38 <UART_SetConfig+0x1c8>
 8006b16:	2b80      	cmp	r3, #128	; 0x80
 8006b18:	d005      	beq.n	8006b26 <UART_SetConfig+0x1b6>
 8006b1a:	2bc0      	cmp	r3, #192	; 0xc0
 8006b1c:	d009      	beq.n	8006b32 <UART_SetConfig+0x1c2>
 8006b1e:	e00b      	b.n	8006b38 <UART_SetConfig+0x1c8>
 8006b20:	2300      	movs	r3, #0
 8006b22:	77fb      	strb	r3, [r7, #31]
 8006b24:	e0cb      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006b26:	2302      	movs	r3, #2
 8006b28:	77fb      	strb	r3, [r7, #31]
 8006b2a:	e0c8      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006b2c:	2304      	movs	r3, #4
 8006b2e:	77fb      	strb	r3, [r7, #31]
 8006b30:	e0c5      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006b32:	2308      	movs	r3, #8
 8006b34:	77fb      	strb	r3, [r7, #31]
 8006b36:	e0c2      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006b38:	2310      	movs	r3, #16
 8006b3a:	77fb      	strb	r3, [r7, #31]
 8006b3c:	bf00      	nop
 8006b3e:	e0be      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a4d      	ldr	r2, [pc, #308]	; (8006c7c <UART_SetConfig+0x30c>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d124      	bne.n	8006b94 <UART_SetConfig+0x224>
 8006b4a:	4b48      	ldr	r3, [pc, #288]	; (8006c6c <UART_SetConfig+0x2fc>)
 8006b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b58:	d012      	beq.n	8006b80 <UART_SetConfig+0x210>
 8006b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b5e:	d802      	bhi.n	8006b66 <UART_SetConfig+0x1f6>
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d007      	beq.n	8006b74 <UART_SetConfig+0x204>
 8006b64:	e012      	b.n	8006b8c <UART_SetConfig+0x21c>
 8006b66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b6a:	d006      	beq.n	8006b7a <UART_SetConfig+0x20a>
 8006b6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b70:	d009      	beq.n	8006b86 <UART_SetConfig+0x216>
 8006b72:	e00b      	b.n	8006b8c <UART_SetConfig+0x21c>
 8006b74:	2300      	movs	r3, #0
 8006b76:	77fb      	strb	r3, [r7, #31]
 8006b78:	e0a1      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	77fb      	strb	r3, [r7, #31]
 8006b7e:	e09e      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006b80:	2304      	movs	r3, #4
 8006b82:	77fb      	strb	r3, [r7, #31]
 8006b84:	e09b      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006b86:	2308      	movs	r3, #8
 8006b88:	77fb      	strb	r3, [r7, #31]
 8006b8a:	e098      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006b8c:	2310      	movs	r3, #16
 8006b8e:	77fb      	strb	r3, [r7, #31]
 8006b90:	bf00      	nop
 8006b92:	e094      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a39      	ldr	r2, [pc, #228]	; (8006c80 <UART_SetConfig+0x310>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d124      	bne.n	8006be8 <UART_SetConfig+0x278>
 8006b9e:	4b33      	ldr	r3, [pc, #204]	; (8006c6c <UART_SetConfig+0x2fc>)
 8006ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ba4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bac:	d012      	beq.n	8006bd4 <UART_SetConfig+0x264>
 8006bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bb2:	d802      	bhi.n	8006bba <UART_SetConfig+0x24a>
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d007      	beq.n	8006bc8 <UART_SetConfig+0x258>
 8006bb8:	e012      	b.n	8006be0 <UART_SetConfig+0x270>
 8006bba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bbe:	d006      	beq.n	8006bce <UART_SetConfig+0x25e>
 8006bc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bc4:	d009      	beq.n	8006bda <UART_SetConfig+0x26a>
 8006bc6:	e00b      	b.n	8006be0 <UART_SetConfig+0x270>
 8006bc8:	2301      	movs	r3, #1
 8006bca:	77fb      	strb	r3, [r7, #31]
 8006bcc:	e077      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006bce:	2302      	movs	r3, #2
 8006bd0:	77fb      	strb	r3, [r7, #31]
 8006bd2:	e074      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006bd4:	2304      	movs	r3, #4
 8006bd6:	77fb      	strb	r3, [r7, #31]
 8006bd8:	e071      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006bda:	2308      	movs	r3, #8
 8006bdc:	77fb      	strb	r3, [r7, #31]
 8006bde:	e06e      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006be0:	2310      	movs	r3, #16
 8006be2:	77fb      	strb	r3, [r7, #31]
 8006be4:	bf00      	nop
 8006be6:	e06a      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a25      	ldr	r2, [pc, #148]	; (8006c84 <UART_SetConfig+0x314>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d124      	bne.n	8006c3c <UART_SetConfig+0x2cc>
 8006bf2:	4b1e      	ldr	r3, [pc, #120]	; (8006c6c <UART_SetConfig+0x2fc>)
 8006bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c00:	d012      	beq.n	8006c28 <UART_SetConfig+0x2b8>
 8006c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c06:	d802      	bhi.n	8006c0e <UART_SetConfig+0x29e>
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d007      	beq.n	8006c1c <UART_SetConfig+0x2ac>
 8006c0c:	e012      	b.n	8006c34 <UART_SetConfig+0x2c4>
 8006c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c12:	d006      	beq.n	8006c22 <UART_SetConfig+0x2b2>
 8006c14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c18:	d009      	beq.n	8006c2e <UART_SetConfig+0x2be>
 8006c1a:	e00b      	b.n	8006c34 <UART_SetConfig+0x2c4>
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	77fb      	strb	r3, [r7, #31]
 8006c20:	e04d      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006c22:	2302      	movs	r3, #2
 8006c24:	77fb      	strb	r3, [r7, #31]
 8006c26:	e04a      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006c28:	2304      	movs	r3, #4
 8006c2a:	77fb      	strb	r3, [r7, #31]
 8006c2c:	e047      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006c2e:	2308      	movs	r3, #8
 8006c30:	77fb      	strb	r3, [r7, #31]
 8006c32:	e044      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006c34:	2310      	movs	r3, #16
 8006c36:	77fb      	strb	r3, [r7, #31]
 8006c38:	bf00      	nop
 8006c3a:	e040      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a11      	ldr	r2, [pc, #68]	; (8006c88 <UART_SetConfig+0x318>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d139      	bne.n	8006cba <UART_SetConfig+0x34a>
 8006c46:	4b09      	ldr	r3, [pc, #36]	; (8006c6c <UART_SetConfig+0x2fc>)
 8006c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006c50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c54:	d027      	beq.n	8006ca6 <UART_SetConfig+0x336>
 8006c56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c5a:	d817      	bhi.n	8006c8c <UART_SetConfig+0x31c>
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d01c      	beq.n	8006c9a <UART_SetConfig+0x32a>
 8006c60:	e027      	b.n	8006cb2 <UART_SetConfig+0x342>
 8006c62:	bf00      	nop
 8006c64:	efff69f3 	.word	0xefff69f3
 8006c68:	40011000 	.word	0x40011000
 8006c6c:	40023800 	.word	0x40023800
 8006c70:	40004400 	.word	0x40004400
 8006c74:	40004800 	.word	0x40004800
 8006c78:	40004c00 	.word	0x40004c00
 8006c7c:	40005000 	.word	0x40005000
 8006c80:	40011400 	.word	0x40011400
 8006c84:	40007800 	.word	0x40007800
 8006c88:	40007c00 	.word	0x40007c00
 8006c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c90:	d006      	beq.n	8006ca0 <UART_SetConfig+0x330>
 8006c92:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c96:	d009      	beq.n	8006cac <UART_SetConfig+0x33c>
 8006c98:	e00b      	b.n	8006cb2 <UART_SetConfig+0x342>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	77fb      	strb	r3, [r7, #31]
 8006c9e:	e00e      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	77fb      	strb	r3, [r7, #31]
 8006ca4:	e00b      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006ca6:	2304      	movs	r3, #4
 8006ca8:	77fb      	strb	r3, [r7, #31]
 8006caa:	e008      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006cac:	2308      	movs	r3, #8
 8006cae:	77fb      	strb	r3, [r7, #31]
 8006cb0:	e005      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006cb2:	2310      	movs	r3, #16
 8006cb4:	77fb      	strb	r3, [r7, #31]
 8006cb6:	bf00      	nop
 8006cb8:	e001      	b.n	8006cbe <UART_SetConfig+0x34e>
 8006cba:	2310      	movs	r3, #16
 8006cbc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	69db      	ldr	r3, [r3, #28]
 8006cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cc6:	d17f      	bne.n	8006dc8 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8006cc8:	7ffb      	ldrb	r3, [r7, #31]
 8006cca:	2b08      	cmp	r3, #8
 8006ccc:	d85c      	bhi.n	8006d88 <UART_SetConfig+0x418>
 8006cce:	a201      	add	r2, pc, #4	; (adr r2, 8006cd4 <UART_SetConfig+0x364>)
 8006cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd4:	08006cf9 	.word	0x08006cf9
 8006cd8:	08006d19 	.word	0x08006d19
 8006cdc:	08006d39 	.word	0x08006d39
 8006ce0:	08006d89 	.word	0x08006d89
 8006ce4:	08006d51 	.word	0x08006d51
 8006ce8:	08006d89 	.word	0x08006d89
 8006cec:	08006d89 	.word	0x08006d89
 8006cf0:	08006d89 	.word	0x08006d89
 8006cf4:	08006d71 	.word	0x08006d71
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cf8:	f7fe fbfe 	bl	80054f8 <HAL_RCC_GetPCLK1Freq>
 8006cfc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	005a      	lsls	r2, r3, #1
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	085b      	lsrs	r3, r3, #1
 8006d08:	441a      	add	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	61bb      	str	r3, [r7, #24]
        break;
 8006d16:	e03a      	b.n	8006d8e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d18:	f7fe fc02 	bl	8005520 <HAL_RCC_GetPCLK2Freq>
 8006d1c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	005a      	lsls	r2, r3, #1
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	085b      	lsrs	r3, r3, #1
 8006d28:	441a      	add	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	61bb      	str	r3, [r7, #24]
        break;
 8006d36:	e02a      	b.n	8006d8e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	085a      	lsrs	r2, r3, #1
 8006d3e:	4b5f      	ldr	r3, [pc, #380]	; (8006ebc <UART_SetConfig+0x54c>)
 8006d40:	4413      	add	r3, r2
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	6852      	ldr	r2, [r2, #4]
 8006d46:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	61bb      	str	r3, [r7, #24]
        break;
 8006d4e:	e01e      	b.n	8006d8e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d50:	f7fe faee 	bl	8005330 <HAL_RCC_GetSysClockFreq>
 8006d54:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	005a      	lsls	r2, r3, #1
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	085b      	lsrs	r3, r3, #1
 8006d60:	441a      	add	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	61bb      	str	r3, [r7, #24]
        break;
 8006d6e:	e00e      	b.n	8006d8e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	085b      	lsrs	r3, r3, #1
 8006d76:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	61bb      	str	r3, [r7, #24]
        break;
 8006d86:	e002      	b.n	8006d8e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	75fb      	strb	r3, [r7, #23]
        break;
 8006d8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	2b0f      	cmp	r3, #15
 8006d92:	d916      	bls.n	8006dc2 <UART_SetConfig+0x452>
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d9a:	d212      	bcs.n	8006dc2 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	f023 030f 	bic.w	r3, r3, #15
 8006da4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	085b      	lsrs	r3, r3, #1
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	f003 0307 	and.w	r3, r3, #7
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	897b      	ldrh	r3, [r7, #10]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	897a      	ldrh	r2, [r7, #10]
 8006dbe:	60da      	str	r2, [r3, #12]
 8006dc0:	e070      	b.n	8006ea4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	75fb      	strb	r3, [r7, #23]
 8006dc6:	e06d      	b.n	8006ea4 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8006dc8:	7ffb      	ldrb	r3, [r7, #31]
 8006dca:	2b08      	cmp	r3, #8
 8006dcc:	d859      	bhi.n	8006e82 <UART_SetConfig+0x512>
 8006dce:	a201      	add	r2, pc, #4	; (adr r2, 8006dd4 <UART_SetConfig+0x464>)
 8006dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd4:	08006df9 	.word	0x08006df9
 8006dd8:	08006e17 	.word	0x08006e17
 8006ddc:	08006e35 	.word	0x08006e35
 8006de0:	08006e83 	.word	0x08006e83
 8006de4:	08006e4d 	.word	0x08006e4d
 8006de8:	08006e83 	.word	0x08006e83
 8006dec:	08006e83 	.word	0x08006e83
 8006df0:	08006e83 	.word	0x08006e83
 8006df4:	08006e6b 	.word	0x08006e6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006df8:	f7fe fb7e 	bl	80054f8 <HAL_RCC_GetPCLK1Freq>
 8006dfc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	085a      	lsrs	r2, r3, #1
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	441a      	add	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	61bb      	str	r3, [r7, #24]
        break;
 8006e14:	e038      	b.n	8006e88 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e16:	f7fe fb83 	bl	8005520 <HAL_RCC_GetPCLK2Freq>
 8006e1a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	085a      	lsrs	r2, r3, #1
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	441a      	add	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	61bb      	str	r3, [r7, #24]
        break;
 8006e32:	e029      	b.n	8006e88 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	085a      	lsrs	r2, r3, #1
 8006e3a:	4b21      	ldr	r3, [pc, #132]	; (8006ec0 <UART_SetConfig+0x550>)
 8006e3c:	4413      	add	r3, r2
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	6852      	ldr	r2, [r2, #4]
 8006e42:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	61bb      	str	r3, [r7, #24]
        break;
 8006e4a:	e01d      	b.n	8006e88 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e4c:	f7fe fa70 	bl	8005330 <HAL_RCC_GetSysClockFreq>
 8006e50:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	085a      	lsrs	r2, r3, #1
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	441a      	add	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	61bb      	str	r3, [r7, #24]
        break;
 8006e68:	e00e      	b.n	8006e88 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	085b      	lsrs	r3, r3, #1
 8006e70:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	61bb      	str	r3, [r7, #24]
        break;
 8006e80:	e002      	b.n	8006e88 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	75fb      	strb	r3, [r7, #23]
        break;
 8006e86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	2b0f      	cmp	r3, #15
 8006e8c:	d908      	bls.n	8006ea0 <UART_SetConfig+0x530>
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e94:	d204      	bcs.n	8006ea0 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	69ba      	ldr	r2, [r7, #24]
 8006e9c:	60da      	str	r2, [r3, #12]
 8006e9e:	e001      	b.n	8006ea4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3720      	adds	r7, #32
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	01e84800 	.word	0x01e84800
 8006ec0:	00f42400 	.word	0x00f42400

08006ec4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed0:	f003 0301 	and.w	r3, r3, #1
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00a      	beq.n	8006eee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	430a      	orrs	r2, r1
 8006eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00a      	beq.n	8006f10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	430a      	orrs	r2, r1
 8006f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f14:	f003 0304 	and.w	r3, r3, #4
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00a      	beq.n	8006f32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	f003 0308 	and.w	r3, r3, #8
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00a      	beq.n	8006f54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	430a      	orrs	r2, r1
 8006f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f58:	f003 0310 	and.w	r3, r3, #16
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00a      	beq.n	8006f76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	430a      	orrs	r2, r1
 8006f74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7a:	f003 0320 	and.w	r3, r3, #32
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00a      	beq.n	8006f98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	430a      	orrs	r2, r1
 8006f96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d01a      	beq.n	8006fda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fc2:	d10a      	bne.n	8006fda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00a      	beq.n	8006ffc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	605a      	str	r2, [r3, #4]
  }
}
 8006ffc:	bf00      	nop
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af02      	add	r7, sp, #8
 800700e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007016:	f7fa fb87 	bl	8001728 <HAL_GetTick>
 800701a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0308 	and.w	r3, r3, #8
 8007026:	2b08      	cmp	r3, #8
 8007028:	d10e      	bne.n	8007048 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800702a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f814 	bl	8007066 <UART_WaitOnFlagUntilTimeout>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d001      	beq.n	8007048 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007044:	2303      	movs	r3, #3
 8007046:	e00a      	b.n	800705e <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2220      	movs	r2, #32
 800704c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2220      	movs	r2, #32
 8007052:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b084      	sub	sp, #16
 800706a:	af00      	add	r7, sp, #0
 800706c:	60f8      	str	r0, [r7, #12]
 800706e:	60b9      	str	r1, [r7, #8]
 8007070:	603b      	str	r3, [r7, #0]
 8007072:	4613      	mov	r3, r2
 8007074:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007076:	e05d      	b.n	8007134 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800707e:	d059      	beq.n	8007134 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007080:	f7fa fb52 	bl	8001728 <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	69ba      	ldr	r2, [r7, #24]
 800708c:	429a      	cmp	r2, r3
 800708e:	d302      	bcc.n	8007096 <UART_WaitOnFlagUntilTimeout+0x30>
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d11b      	bne.n	80070ce <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80070a4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	689a      	ldr	r2, [r3, #8]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f022 0201 	bic.w	r2, r2, #1
 80070b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2220      	movs	r2, #32
 80070ba:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2220      	movs	r2, #32
 80070c0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e042      	b.n	8007154 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0304 	and.w	r3, r3, #4
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d02b      	beq.n	8007134 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	69db      	ldr	r3, [r3, #28]
 80070e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070ea:	d123      	bne.n	8007134 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070f4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007104:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	689a      	ldr	r2, [r3, #8]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f022 0201 	bic.w	r2, r2, #1
 8007114:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2220      	movs	r2, #32
 800711a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2220      	movs	r2, #32
 8007120:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2220      	movs	r2, #32
 8007126:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e00f      	b.n	8007154 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	69da      	ldr	r2, [r3, #28]
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	4013      	ands	r3, r2
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	429a      	cmp	r2, r3
 8007142:	bf0c      	ite	eq
 8007144:	2301      	moveq	r3, #1
 8007146:	2300      	movne	r3, #0
 8007148:	b2db      	uxtb	r3, r3
 800714a:	461a      	mov	r2, r3
 800714c:	79fb      	ldrb	r3, [r7, #7]
 800714e:	429a      	cmp	r2, r3
 8007150:	d092      	beq.n	8007078 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3710      	adds	r7, #16
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <__errno>:
 800715c:	4b01      	ldr	r3, [pc, #4]	; (8007164 <__errno+0x8>)
 800715e:	6818      	ldr	r0, [r3, #0]
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	2000000c 	.word	0x2000000c

08007168 <__libc_init_array>:
 8007168:	b570      	push	{r4, r5, r6, lr}
 800716a:	4e0d      	ldr	r6, [pc, #52]	; (80071a0 <__libc_init_array+0x38>)
 800716c:	4c0d      	ldr	r4, [pc, #52]	; (80071a4 <__libc_init_array+0x3c>)
 800716e:	1ba4      	subs	r4, r4, r6
 8007170:	10a4      	asrs	r4, r4, #2
 8007172:	2500      	movs	r5, #0
 8007174:	42a5      	cmp	r5, r4
 8007176:	d109      	bne.n	800718c <__libc_init_array+0x24>
 8007178:	4e0b      	ldr	r6, [pc, #44]	; (80071a8 <__libc_init_array+0x40>)
 800717a:	4c0c      	ldr	r4, [pc, #48]	; (80071ac <__libc_init_array+0x44>)
 800717c:	f000 fc2e 	bl	80079dc <_init>
 8007180:	1ba4      	subs	r4, r4, r6
 8007182:	10a4      	asrs	r4, r4, #2
 8007184:	2500      	movs	r5, #0
 8007186:	42a5      	cmp	r5, r4
 8007188:	d105      	bne.n	8007196 <__libc_init_array+0x2e>
 800718a:	bd70      	pop	{r4, r5, r6, pc}
 800718c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007190:	4798      	blx	r3
 8007192:	3501      	adds	r5, #1
 8007194:	e7ee      	b.n	8007174 <__libc_init_array+0xc>
 8007196:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800719a:	4798      	blx	r3
 800719c:	3501      	adds	r5, #1
 800719e:	e7f2      	b.n	8007186 <__libc_init_array+0x1e>
 80071a0:	08007a68 	.word	0x08007a68
 80071a4:	08007a68 	.word	0x08007a68
 80071a8:	08007a68 	.word	0x08007a68
 80071ac:	08007a6c 	.word	0x08007a6c

080071b0 <malloc>:
 80071b0:	4b02      	ldr	r3, [pc, #8]	; (80071bc <malloc+0xc>)
 80071b2:	4601      	mov	r1, r0
 80071b4:	6818      	ldr	r0, [r3, #0]
 80071b6:	f000 b859 	b.w	800726c <_malloc_r>
 80071ba:	bf00      	nop
 80071bc:	2000000c 	.word	0x2000000c

080071c0 <memset>:
 80071c0:	4402      	add	r2, r0
 80071c2:	4603      	mov	r3, r0
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d100      	bne.n	80071ca <memset+0xa>
 80071c8:	4770      	bx	lr
 80071ca:	f803 1b01 	strb.w	r1, [r3], #1
 80071ce:	e7f9      	b.n	80071c4 <memset+0x4>

080071d0 <_free_r>:
 80071d0:	b538      	push	{r3, r4, r5, lr}
 80071d2:	4605      	mov	r5, r0
 80071d4:	2900      	cmp	r1, #0
 80071d6:	d045      	beq.n	8007264 <_free_r+0x94>
 80071d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071dc:	1f0c      	subs	r4, r1, #4
 80071de:	2b00      	cmp	r3, #0
 80071e0:	bfb8      	it	lt
 80071e2:	18e4      	addlt	r4, r4, r3
 80071e4:	f000 f8cc 	bl	8007380 <__malloc_lock>
 80071e8:	4a1f      	ldr	r2, [pc, #124]	; (8007268 <_free_r+0x98>)
 80071ea:	6813      	ldr	r3, [r2, #0]
 80071ec:	4610      	mov	r0, r2
 80071ee:	b933      	cbnz	r3, 80071fe <_free_r+0x2e>
 80071f0:	6063      	str	r3, [r4, #4]
 80071f2:	6014      	str	r4, [r2, #0]
 80071f4:	4628      	mov	r0, r5
 80071f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071fa:	f000 b8c2 	b.w	8007382 <__malloc_unlock>
 80071fe:	42a3      	cmp	r3, r4
 8007200:	d90c      	bls.n	800721c <_free_r+0x4c>
 8007202:	6821      	ldr	r1, [r4, #0]
 8007204:	1862      	adds	r2, r4, r1
 8007206:	4293      	cmp	r3, r2
 8007208:	bf04      	itt	eq
 800720a:	681a      	ldreq	r2, [r3, #0]
 800720c:	685b      	ldreq	r3, [r3, #4]
 800720e:	6063      	str	r3, [r4, #4]
 8007210:	bf04      	itt	eq
 8007212:	1852      	addeq	r2, r2, r1
 8007214:	6022      	streq	r2, [r4, #0]
 8007216:	6004      	str	r4, [r0, #0]
 8007218:	e7ec      	b.n	80071f4 <_free_r+0x24>
 800721a:	4613      	mov	r3, r2
 800721c:	685a      	ldr	r2, [r3, #4]
 800721e:	b10a      	cbz	r2, 8007224 <_free_r+0x54>
 8007220:	42a2      	cmp	r2, r4
 8007222:	d9fa      	bls.n	800721a <_free_r+0x4a>
 8007224:	6819      	ldr	r1, [r3, #0]
 8007226:	1858      	adds	r0, r3, r1
 8007228:	42a0      	cmp	r0, r4
 800722a:	d10b      	bne.n	8007244 <_free_r+0x74>
 800722c:	6820      	ldr	r0, [r4, #0]
 800722e:	4401      	add	r1, r0
 8007230:	1858      	adds	r0, r3, r1
 8007232:	4282      	cmp	r2, r0
 8007234:	6019      	str	r1, [r3, #0]
 8007236:	d1dd      	bne.n	80071f4 <_free_r+0x24>
 8007238:	6810      	ldr	r0, [r2, #0]
 800723a:	6852      	ldr	r2, [r2, #4]
 800723c:	605a      	str	r2, [r3, #4]
 800723e:	4401      	add	r1, r0
 8007240:	6019      	str	r1, [r3, #0]
 8007242:	e7d7      	b.n	80071f4 <_free_r+0x24>
 8007244:	d902      	bls.n	800724c <_free_r+0x7c>
 8007246:	230c      	movs	r3, #12
 8007248:	602b      	str	r3, [r5, #0]
 800724a:	e7d3      	b.n	80071f4 <_free_r+0x24>
 800724c:	6820      	ldr	r0, [r4, #0]
 800724e:	1821      	adds	r1, r4, r0
 8007250:	428a      	cmp	r2, r1
 8007252:	bf04      	itt	eq
 8007254:	6811      	ldreq	r1, [r2, #0]
 8007256:	6852      	ldreq	r2, [r2, #4]
 8007258:	6062      	str	r2, [r4, #4]
 800725a:	bf04      	itt	eq
 800725c:	1809      	addeq	r1, r1, r0
 800725e:	6021      	streq	r1, [r4, #0]
 8007260:	605c      	str	r4, [r3, #4]
 8007262:	e7c7      	b.n	80071f4 <_free_r+0x24>
 8007264:	bd38      	pop	{r3, r4, r5, pc}
 8007266:	bf00      	nop
 8007268:	20000090 	.word	0x20000090

0800726c <_malloc_r>:
 800726c:	b570      	push	{r4, r5, r6, lr}
 800726e:	1ccd      	adds	r5, r1, #3
 8007270:	f025 0503 	bic.w	r5, r5, #3
 8007274:	3508      	adds	r5, #8
 8007276:	2d0c      	cmp	r5, #12
 8007278:	bf38      	it	cc
 800727a:	250c      	movcc	r5, #12
 800727c:	2d00      	cmp	r5, #0
 800727e:	4606      	mov	r6, r0
 8007280:	db01      	blt.n	8007286 <_malloc_r+0x1a>
 8007282:	42a9      	cmp	r1, r5
 8007284:	d903      	bls.n	800728e <_malloc_r+0x22>
 8007286:	230c      	movs	r3, #12
 8007288:	6033      	str	r3, [r6, #0]
 800728a:	2000      	movs	r0, #0
 800728c:	bd70      	pop	{r4, r5, r6, pc}
 800728e:	f000 f877 	bl	8007380 <__malloc_lock>
 8007292:	4a21      	ldr	r2, [pc, #132]	; (8007318 <_malloc_r+0xac>)
 8007294:	6814      	ldr	r4, [r2, #0]
 8007296:	4621      	mov	r1, r4
 8007298:	b991      	cbnz	r1, 80072c0 <_malloc_r+0x54>
 800729a:	4c20      	ldr	r4, [pc, #128]	; (800731c <_malloc_r+0xb0>)
 800729c:	6823      	ldr	r3, [r4, #0]
 800729e:	b91b      	cbnz	r3, 80072a8 <_malloc_r+0x3c>
 80072a0:	4630      	mov	r0, r6
 80072a2:	f000 f83d 	bl	8007320 <_sbrk_r>
 80072a6:	6020      	str	r0, [r4, #0]
 80072a8:	4629      	mov	r1, r5
 80072aa:	4630      	mov	r0, r6
 80072ac:	f000 f838 	bl	8007320 <_sbrk_r>
 80072b0:	1c43      	adds	r3, r0, #1
 80072b2:	d124      	bne.n	80072fe <_malloc_r+0x92>
 80072b4:	230c      	movs	r3, #12
 80072b6:	6033      	str	r3, [r6, #0]
 80072b8:	4630      	mov	r0, r6
 80072ba:	f000 f862 	bl	8007382 <__malloc_unlock>
 80072be:	e7e4      	b.n	800728a <_malloc_r+0x1e>
 80072c0:	680b      	ldr	r3, [r1, #0]
 80072c2:	1b5b      	subs	r3, r3, r5
 80072c4:	d418      	bmi.n	80072f8 <_malloc_r+0x8c>
 80072c6:	2b0b      	cmp	r3, #11
 80072c8:	d90f      	bls.n	80072ea <_malloc_r+0x7e>
 80072ca:	600b      	str	r3, [r1, #0]
 80072cc:	50cd      	str	r5, [r1, r3]
 80072ce:	18cc      	adds	r4, r1, r3
 80072d0:	4630      	mov	r0, r6
 80072d2:	f000 f856 	bl	8007382 <__malloc_unlock>
 80072d6:	f104 000b 	add.w	r0, r4, #11
 80072da:	1d23      	adds	r3, r4, #4
 80072dc:	f020 0007 	bic.w	r0, r0, #7
 80072e0:	1ac3      	subs	r3, r0, r3
 80072e2:	d0d3      	beq.n	800728c <_malloc_r+0x20>
 80072e4:	425a      	negs	r2, r3
 80072e6:	50e2      	str	r2, [r4, r3]
 80072e8:	e7d0      	b.n	800728c <_malloc_r+0x20>
 80072ea:	428c      	cmp	r4, r1
 80072ec:	684b      	ldr	r3, [r1, #4]
 80072ee:	bf16      	itet	ne
 80072f0:	6063      	strne	r3, [r4, #4]
 80072f2:	6013      	streq	r3, [r2, #0]
 80072f4:	460c      	movne	r4, r1
 80072f6:	e7eb      	b.n	80072d0 <_malloc_r+0x64>
 80072f8:	460c      	mov	r4, r1
 80072fa:	6849      	ldr	r1, [r1, #4]
 80072fc:	e7cc      	b.n	8007298 <_malloc_r+0x2c>
 80072fe:	1cc4      	adds	r4, r0, #3
 8007300:	f024 0403 	bic.w	r4, r4, #3
 8007304:	42a0      	cmp	r0, r4
 8007306:	d005      	beq.n	8007314 <_malloc_r+0xa8>
 8007308:	1a21      	subs	r1, r4, r0
 800730a:	4630      	mov	r0, r6
 800730c:	f000 f808 	bl	8007320 <_sbrk_r>
 8007310:	3001      	adds	r0, #1
 8007312:	d0cf      	beq.n	80072b4 <_malloc_r+0x48>
 8007314:	6025      	str	r5, [r4, #0]
 8007316:	e7db      	b.n	80072d0 <_malloc_r+0x64>
 8007318:	20000090 	.word	0x20000090
 800731c:	20000094 	.word	0x20000094

08007320 <_sbrk_r>:
 8007320:	b538      	push	{r3, r4, r5, lr}
 8007322:	4c06      	ldr	r4, [pc, #24]	; (800733c <_sbrk_r+0x1c>)
 8007324:	2300      	movs	r3, #0
 8007326:	4605      	mov	r5, r0
 8007328:	4608      	mov	r0, r1
 800732a:	6023      	str	r3, [r4, #0]
 800732c:	f7fa f936 	bl	800159c <_sbrk>
 8007330:	1c43      	adds	r3, r0, #1
 8007332:	d102      	bne.n	800733a <_sbrk_r+0x1a>
 8007334:	6823      	ldr	r3, [r4, #0]
 8007336:	b103      	cbz	r3, 800733a <_sbrk_r+0x1a>
 8007338:	602b      	str	r3, [r5, #0]
 800733a:	bd38      	pop	{r3, r4, r5, pc}
 800733c:	2000039c 	.word	0x2000039c

08007340 <siprintf>:
 8007340:	b40e      	push	{r1, r2, r3}
 8007342:	b500      	push	{lr}
 8007344:	b09c      	sub	sp, #112	; 0x70
 8007346:	ab1d      	add	r3, sp, #116	; 0x74
 8007348:	9002      	str	r0, [sp, #8]
 800734a:	9006      	str	r0, [sp, #24]
 800734c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007350:	4809      	ldr	r0, [pc, #36]	; (8007378 <siprintf+0x38>)
 8007352:	9107      	str	r1, [sp, #28]
 8007354:	9104      	str	r1, [sp, #16]
 8007356:	4909      	ldr	r1, [pc, #36]	; (800737c <siprintf+0x3c>)
 8007358:	f853 2b04 	ldr.w	r2, [r3], #4
 800735c:	9105      	str	r1, [sp, #20]
 800735e:	6800      	ldr	r0, [r0, #0]
 8007360:	9301      	str	r3, [sp, #4]
 8007362:	a902      	add	r1, sp, #8
 8007364:	f000 f868 	bl	8007438 <_svfiprintf_r>
 8007368:	9b02      	ldr	r3, [sp, #8]
 800736a:	2200      	movs	r2, #0
 800736c:	701a      	strb	r2, [r3, #0]
 800736e:	b01c      	add	sp, #112	; 0x70
 8007370:	f85d eb04 	ldr.w	lr, [sp], #4
 8007374:	b003      	add	sp, #12
 8007376:	4770      	bx	lr
 8007378:	2000000c 	.word	0x2000000c
 800737c:	ffff0208 	.word	0xffff0208

08007380 <__malloc_lock>:
 8007380:	4770      	bx	lr

08007382 <__malloc_unlock>:
 8007382:	4770      	bx	lr

08007384 <__ssputs_r>:
 8007384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007388:	688e      	ldr	r6, [r1, #8]
 800738a:	429e      	cmp	r6, r3
 800738c:	4682      	mov	sl, r0
 800738e:	460c      	mov	r4, r1
 8007390:	4690      	mov	r8, r2
 8007392:	4699      	mov	r9, r3
 8007394:	d837      	bhi.n	8007406 <__ssputs_r+0x82>
 8007396:	898a      	ldrh	r2, [r1, #12]
 8007398:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800739c:	d031      	beq.n	8007402 <__ssputs_r+0x7e>
 800739e:	6825      	ldr	r5, [r4, #0]
 80073a0:	6909      	ldr	r1, [r1, #16]
 80073a2:	1a6f      	subs	r7, r5, r1
 80073a4:	6965      	ldr	r5, [r4, #20]
 80073a6:	2302      	movs	r3, #2
 80073a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073ac:	fb95 f5f3 	sdiv	r5, r5, r3
 80073b0:	f109 0301 	add.w	r3, r9, #1
 80073b4:	443b      	add	r3, r7
 80073b6:	429d      	cmp	r5, r3
 80073b8:	bf38      	it	cc
 80073ba:	461d      	movcc	r5, r3
 80073bc:	0553      	lsls	r3, r2, #21
 80073be:	d530      	bpl.n	8007422 <__ssputs_r+0x9e>
 80073c0:	4629      	mov	r1, r5
 80073c2:	f7ff ff53 	bl	800726c <_malloc_r>
 80073c6:	4606      	mov	r6, r0
 80073c8:	b950      	cbnz	r0, 80073e0 <__ssputs_r+0x5c>
 80073ca:	230c      	movs	r3, #12
 80073cc:	f8ca 3000 	str.w	r3, [sl]
 80073d0:	89a3      	ldrh	r3, [r4, #12]
 80073d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073d6:	81a3      	strh	r3, [r4, #12]
 80073d8:	f04f 30ff 	mov.w	r0, #4294967295
 80073dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073e0:	463a      	mov	r2, r7
 80073e2:	6921      	ldr	r1, [r4, #16]
 80073e4:	f000 faa8 	bl	8007938 <memcpy>
 80073e8:	89a3      	ldrh	r3, [r4, #12]
 80073ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80073ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073f2:	81a3      	strh	r3, [r4, #12]
 80073f4:	6126      	str	r6, [r4, #16]
 80073f6:	6165      	str	r5, [r4, #20]
 80073f8:	443e      	add	r6, r7
 80073fa:	1bed      	subs	r5, r5, r7
 80073fc:	6026      	str	r6, [r4, #0]
 80073fe:	60a5      	str	r5, [r4, #8]
 8007400:	464e      	mov	r6, r9
 8007402:	454e      	cmp	r6, r9
 8007404:	d900      	bls.n	8007408 <__ssputs_r+0x84>
 8007406:	464e      	mov	r6, r9
 8007408:	4632      	mov	r2, r6
 800740a:	4641      	mov	r1, r8
 800740c:	6820      	ldr	r0, [r4, #0]
 800740e:	f000 fa9e 	bl	800794e <memmove>
 8007412:	68a3      	ldr	r3, [r4, #8]
 8007414:	1b9b      	subs	r3, r3, r6
 8007416:	60a3      	str	r3, [r4, #8]
 8007418:	6823      	ldr	r3, [r4, #0]
 800741a:	441e      	add	r6, r3
 800741c:	6026      	str	r6, [r4, #0]
 800741e:	2000      	movs	r0, #0
 8007420:	e7dc      	b.n	80073dc <__ssputs_r+0x58>
 8007422:	462a      	mov	r2, r5
 8007424:	f000 faac 	bl	8007980 <_realloc_r>
 8007428:	4606      	mov	r6, r0
 800742a:	2800      	cmp	r0, #0
 800742c:	d1e2      	bne.n	80073f4 <__ssputs_r+0x70>
 800742e:	6921      	ldr	r1, [r4, #16]
 8007430:	4650      	mov	r0, sl
 8007432:	f7ff fecd 	bl	80071d0 <_free_r>
 8007436:	e7c8      	b.n	80073ca <__ssputs_r+0x46>

08007438 <_svfiprintf_r>:
 8007438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800743c:	461d      	mov	r5, r3
 800743e:	898b      	ldrh	r3, [r1, #12]
 8007440:	061f      	lsls	r7, r3, #24
 8007442:	b09d      	sub	sp, #116	; 0x74
 8007444:	4680      	mov	r8, r0
 8007446:	460c      	mov	r4, r1
 8007448:	4616      	mov	r6, r2
 800744a:	d50f      	bpl.n	800746c <_svfiprintf_r+0x34>
 800744c:	690b      	ldr	r3, [r1, #16]
 800744e:	b96b      	cbnz	r3, 800746c <_svfiprintf_r+0x34>
 8007450:	2140      	movs	r1, #64	; 0x40
 8007452:	f7ff ff0b 	bl	800726c <_malloc_r>
 8007456:	6020      	str	r0, [r4, #0]
 8007458:	6120      	str	r0, [r4, #16]
 800745a:	b928      	cbnz	r0, 8007468 <_svfiprintf_r+0x30>
 800745c:	230c      	movs	r3, #12
 800745e:	f8c8 3000 	str.w	r3, [r8]
 8007462:	f04f 30ff 	mov.w	r0, #4294967295
 8007466:	e0c8      	b.n	80075fa <_svfiprintf_r+0x1c2>
 8007468:	2340      	movs	r3, #64	; 0x40
 800746a:	6163      	str	r3, [r4, #20]
 800746c:	2300      	movs	r3, #0
 800746e:	9309      	str	r3, [sp, #36]	; 0x24
 8007470:	2320      	movs	r3, #32
 8007472:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007476:	2330      	movs	r3, #48	; 0x30
 8007478:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800747c:	9503      	str	r5, [sp, #12]
 800747e:	f04f 0b01 	mov.w	fp, #1
 8007482:	4637      	mov	r7, r6
 8007484:	463d      	mov	r5, r7
 8007486:	f815 3b01 	ldrb.w	r3, [r5], #1
 800748a:	b10b      	cbz	r3, 8007490 <_svfiprintf_r+0x58>
 800748c:	2b25      	cmp	r3, #37	; 0x25
 800748e:	d13e      	bne.n	800750e <_svfiprintf_r+0xd6>
 8007490:	ebb7 0a06 	subs.w	sl, r7, r6
 8007494:	d00b      	beq.n	80074ae <_svfiprintf_r+0x76>
 8007496:	4653      	mov	r3, sl
 8007498:	4632      	mov	r2, r6
 800749a:	4621      	mov	r1, r4
 800749c:	4640      	mov	r0, r8
 800749e:	f7ff ff71 	bl	8007384 <__ssputs_r>
 80074a2:	3001      	adds	r0, #1
 80074a4:	f000 80a4 	beq.w	80075f0 <_svfiprintf_r+0x1b8>
 80074a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074aa:	4453      	add	r3, sl
 80074ac:	9309      	str	r3, [sp, #36]	; 0x24
 80074ae:	783b      	ldrb	r3, [r7, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f000 809d 	beq.w	80075f0 <_svfiprintf_r+0x1b8>
 80074b6:	2300      	movs	r3, #0
 80074b8:	f04f 32ff 	mov.w	r2, #4294967295
 80074bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074c0:	9304      	str	r3, [sp, #16]
 80074c2:	9307      	str	r3, [sp, #28]
 80074c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074c8:	931a      	str	r3, [sp, #104]	; 0x68
 80074ca:	462f      	mov	r7, r5
 80074cc:	2205      	movs	r2, #5
 80074ce:	f817 1b01 	ldrb.w	r1, [r7], #1
 80074d2:	4850      	ldr	r0, [pc, #320]	; (8007614 <_svfiprintf_r+0x1dc>)
 80074d4:	f7f8 feac 	bl	8000230 <memchr>
 80074d8:	9b04      	ldr	r3, [sp, #16]
 80074da:	b9d0      	cbnz	r0, 8007512 <_svfiprintf_r+0xda>
 80074dc:	06d9      	lsls	r1, r3, #27
 80074de:	bf44      	itt	mi
 80074e0:	2220      	movmi	r2, #32
 80074e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80074e6:	071a      	lsls	r2, r3, #28
 80074e8:	bf44      	itt	mi
 80074ea:	222b      	movmi	r2, #43	; 0x2b
 80074ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80074f0:	782a      	ldrb	r2, [r5, #0]
 80074f2:	2a2a      	cmp	r2, #42	; 0x2a
 80074f4:	d015      	beq.n	8007522 <_svfiprintf_r+0xea>
 80074f6:	9a07      	ldr	r2, [sp, #28]
 80074f8:	462f      	mov	r7, r5
 80074fa:	2000      	movs	r0, #0
 80074fc:	250a      	movs	r5, #10
 80074fe:	4639      	mov	r1, r7
 8007500:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007504:	3b30      	subs	r3, #48	; 0x30
 8007506:	2b09      	cmp	r3, #9
 8007508:	d94d      	bls.n	80075a6 <_svfiprintf_r+0x16e>
 800750a:	b1b8      	cbz	r0, 800753c <_svfiprintf_r+0x104>
 800750c:	e00f      	b.n	800752e <_svfiprintf_r+0xf6>
 800750e:	462f      	mov	r7, r5
 8007510:	e7b8      	b.n	8007484 <_svfiprintf_r+0x4c>
 8007512:	4a40      	ldr	r2, [pc, #256]	; (8007614 <_svfiprintf_r+0x1dc>)
 8007514:	1a80      	subs	r0, r0, r2
 8007516:	fa0b f000 	lsl.w	r0, fp, r0
 800751a:	4318      	orrs	r0, r3
 800751c:	9004      	str	r0, [sp, #16]
 800751e:	463d      	mov	r5, r7
 8007520:	e7d3      	b.n	80074ca <_svfiprintf_r+0x92>
 8007522:	9a03      	ldr	r2, [sp, #12]
 8007524:	1d11      	adds	r1, r2, #4
 8007526:	6812      	ldr	r2, [r2, #0]
 8007528:	9103      	str	r1, [sp, #12]
 800752a:	2a00      	cmp	r2, #0
 800752c:	db01      	blt.n	8007532 <_svfiprintf_r+0xfa>
 800752e:	9207      	str	r2, [sp, #28]
 8007530:	e004      	b.n	800753c <_svfiprintf_r+0x104>
 8007532:	4252      	negs	r2, r2
 8007534:	f043 0302 	orr.w	r3, r3, #2
 8007538:	9207      	str	r2, [sp, #28]
 800753a:	9304      	str	r3, [sp, #16]
 800753c:	783b      	ldrb	r3, [r7, #0]
 800753e:	2b2e      	cmp	r3, #46	; 0x2e
 8007540:	d10c      	bne.n	800755c <_svfiprintf_r+0x124>
 8007542:	787b      	ldrb	r3, [r7, #1]
 8007544:	2b2a      	cmp	r3, #42	; 0x2a
 8007546:	d133      	bne.n	80075b0 <_svfiprintf_r+0x178>
 8007548:	9b03      	ldr	r3, [sp, #12]
 800754a:	1d1a      	adds	r2, r3, #4
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	9203      	str	r2, [sp, #12]
 8007550:	2b00      	cmp	r3, #0
 8007552:	bfb8      	it	lt
 8007554:	f04f 33ff 	movlt.w	r3, #4294967295
 8007558:	3702      	adds	r7, #2
 800755a:	9305      	str	r3, [sp, #20]
 800755c:	4d2e      	ldr	r5, [pc, #184]	; (8007618 <_svfiprintf_r+0x1e0>)
 800755e:	7839      	ldrb	r1, [r7, #0]
 8007560:	2203      	movs	r2, #3
 8007562:	4628      	mov	r0, r5
 8007564:	f7f8 fe64 	bl	8000230 <memchr>
 8007568:	b138      	cbz	r0, 800757a <_svfiprintf_r+0x142>
 800756a:	2340      	movs	r3, #64	; 0x40
 800756c:	1b40      	subs	r0, r0, r5
 800756e:	fa03 f000 	lsl.w	r0, r3, r0
 8007572:	9b04      	ldr	r3, [sp, #16]
 8007574:	4303      	orrs	r3, r0
 8007576:	3701      	adds	r7, #1
 8007578:	9304      	str	r3, [sp, #16]
 800757a:	7839      	ldrb	r1, [r7, #0]
 800757c:	4827      	ldr	r0, [pc, #156]	; (800761c <_svfiprintf_r+0x1e4>)
 800757e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007582:	2206      	movs	r2, #6
 8007584:	1c7e      	adds	r6, r7, #1
 8007586:	f7f8 fe53 	bl	8000230 <memchr>
 800758a:	2800      	cmp	r0, #0
 800758c:	d038      	beq.n	8007600 <_svfiprintf_r+0x1c8>
 800758e:	4b24      	ldr	r3, [pc, #144]	; (8007620 <_svfiprintf_r+0x1e8>)
 8007590:	bb13      	cbnz	r3, 80075d8 <_svfiprintf_r+0x1a0>
 8007592:	9b03      	ldr	r3, [sp, #12]
 8007594:	3307      	adds	r3, #7
 8007596:	f023 0307 	bic.w	r3, r3, #7
 800759a:	3308      	adds	r3, #8
 800759c:	9303      	str	r3, [sp, #12]
 800759e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075a0:	444b      	add	r3, r9
 80075a2:	9309      	str	r3, [sp, #36]	; 0x24
 80075a4:	e76d      	b.n	8007482 <_svfiprintf_r+0x4a>
 80075a6:	fb05 3202 	mla	r2, r5, r2, r3
 80075aa:	2001      	movs	r0, #1
 80075ac:	460f      	mov	r7, r1
 80075ae:	e7a6      	b.n	80074fe <_svfiprintf_r+0xc6>
 80075b0:	2300      	movs	r3, #0
 80075b2:	3701      	adds	r7, #1
 80075b4:	9305      	str	r3, [sp, #20]
 80075b6:	4619      	mov	r1, r3
 80075b8:	250a      	movs	r5, #10
 80075ba:	4638      	mov	r0, r7
 80075bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075c0:	3a30      	subs	r2, #48	; 0x30
 80075c2:	2a09      	cmp	r2, #9
 80075c4:	d903      	bls.n	80075ce <_svfiprintf_r+0x196>
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d0c8      	beq.n	800755c <_svfiprintf_r+0x124>
 80075ca:	9105      	str	r1, [sp, #20]
 80075cc:	e7c6      	b.n	800755c <_svfiprintf_r+0x124>
 80075ce:	fb05 2101 	mla	r1, r5, r1, r2
 80075d2:	2301      	movs	r3, #1
 80075d4:	4607      	mov	r7, r0
 80075d6:	e7f0      	b.n	80075ba <_svfiprintf_r+0x182>
 80075d8:	ab03      	add	r3, sp, #12
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	4622      	mov	r2, r4
 80075de:	4b11      	ldr	r3, [pc, #68]	; (8007624 <_svfiprintf_r+0x1ec>)
 80075e0:	a904      	add	r1, sp, #16
 80075e2:	4640      	mov	r0, r8
 80075e4:	f3af 8000 	nop.w
 80075e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80075ec:	4681      	mov	r9, r0
 80075ee:	d1d6      	bne.n	800759e <_svfiprintf_r+0x166>
 80075f0:	89a3      	ldrh	r3, [r4, #12]
 80075f2:	065b      	lsls	r3, r3, #25
 80075f4:	f53f af35 	bmi.w	8007462 <_svfiprintf_r+0x2a>
 80075f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075fa:	b01d      	add	sp, #116	; 0x74
 80075fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007600:	ab03      	add	r3, sp, #12
 8007602:	9300      	str	r3, [sp, #0]
 8007604:	4622      	mov	r2, r4
 8007606:	4b07      	ldr	r3, [pc, #28]	; (8007624 <_svfiprintf_r+0x1ec>)
 8007608:	a904      	add	r1, sp, #16
 800760a:	4640      	mov	r0, r8
 800760c:	f000 f882 	bl	8007714 <_printf_i>
 8007610:	e7ea      	b.n	80075e8 <_svfiprintf_r+0x1b0>
 8007612:	bf00      	nop
 8007614:	08007a2c 	.word	0x08007a2c
 8007618:	08007a32 	.word	0x08007a32
 800761c:	08007a36 	.word	0x08007a36
 8007620:	00000000 	.word	0x00000000
 8007624:	08007385 	.word	0x08007385

08007628 <_printf_common>:
 8007628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800762c:	4691      	mov	r9, r2
 800762e:	461f      	mov	r7, r3
 8007630:	688a      	ldr	r2, [r1, #8]
 8007632:	690b      	ldr	r3, [r1, #16]
 8007634:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007638:	4293      	cmp	r3, r2
 800763a:	bfb8      	it	lt
 800763c:	4613      	movlt	r3, r2
 800763e:	f8c9 3000 	str.w	r3, [r9]
 8007642:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007646:	4606      	mov	r6, r0
 8007648:	460c      	mov	r4, r1
 800764a:	b112      	cbz	r2, 8007652 <_printf_common+0x2a>
 800764c:	3301      	adds	r3, #1
 800764e:	f8c9 3000 	str.w	r3, [r9]
 8007652:	6823      	ldr	r3, [r4, #0]
 8007654:	0699      	lsls	r1, r3, #26
 8007656:	bf42      	ittt	mi
 8007658:	f8d9 3000 	ldrmi.w	r3, [r9]
 800765c:	3302      	addmi	r3, #2
 800765e:	f8c9 3000 	strmi.w	r3, [r9]
 8007662:	6825      	ldr	r5, [r4, #0]
 8007664:	f015 0506 	ands.w	r5, r5, #6
 8007668:	d107      	bne.n	800767a <_printf_common+0x52>
 800766a:	f104 0a19 	add.w	sl, r4, #25
 800766e:	68e3      	ldr	r3, [r4, #12]
 8007670:	f8d9 2000 	ldr.w	r2, [r9]
 8007674:	1a9b      	subs	r3, r3, r2
 8007676:	42ab      	cmp	r3, r5
 8007678:	dc28      	bgt.n	80076cc <_printf_common+0xa4>
 800767a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800767e:	6822      	ldr	r2, [r4, #0]
 8007680:	3300      	adds	r3, #0
 8007682:	bf18      	it	ne
 8007684:	2301      	movne	r3, #1
 8007686:	0692      	lsls	r2, r2, #26
 8007688:	d42d      	bmi.n	80076e6 <_printf_common+0xbe>
 800768a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800768e:	4639      	mov	r1, r7
 8007690:	4630      	mov	r0, r6
 8007692:	47c0      	blx	r8
 8007694:	3001      	adds	r0, #1
 8007696:	d020      	beq.n	80076da <_printf_common+0xb2>
 8007698:	6823      	ldr	r3, [r4, #0]
 800769a:	68e5      	ldr	r5, [r4, #12]
 800769c:	f8d9 2000 	ldr.w	r2, [r9]
 80076a0:	f003 0306 	and.w	r3, r3, #6
 80076a4:	2b04      	cmp	r3, #4
 80076a6:	bf08      	it	eq
 80076a8:	1aad      	subeq	r5, r5, r2
 80076aa:	68a3      	ldr	r3, [r4, #8]
 80076ac:	6922      	ldr	r2, [r4, #16]
 80076ae:	bf0c      	ite	eq
 80076b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076b4:	2500      	movne	r5, #0
 80076b6:	4293      	cmp	r3, r2
 80076b8:	bfc4      	itt	gt
 80076ba:	1a9b      	subgt	r3, r3, r2
 80076bc:	18ed      	addgt	r5, r5, r3
 80076be:	f04f 0900 	mov.w	r9, #0
 80076c2:	341a      	adds	r4, #26
 80076c4:	454d      	cmp	r5, r9
 80076c6:	d11a      	bne.n	80076fe <_printf_common+0xd6>
 80076c8:	2000      	movs	r0, #0
 80076ca:	e008      	b.n	80076de <_printf_common+0xb6>
 80076cc:	2301      	movs	r3, #1
 80076ce:	4652      	mov	r2, sl
 80076d0:	4639      	mov	r1, r7
 80076d2:	4630      	mov	r0, r6
 80076d4:	47c0      	blx	r8
 80076d6:	3001      	adds	r0, #1
 80076d8:	d103      	bne.n	80076e2 <_printf_common+0xba>
 80076da:	f04f 30ff 	mov.w	r0, #4294967295
 80076de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076e2:	3501      	adds	r5, #1
 80076e4:	e7c3      	b.n	800766e <_printf_common+0x46>
 80076e6:	18e1      	adds	r1, r4, r3
 80076e8:	1c5a      	adds	r2, r3, #1
 80076ea:	2030      	movs	r0, #48	; 0x30
 80076ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076f0:	4422      	add	r2, r4
 80076f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076fa:	3302      	adds	r3, #2
 80076fc:	e7c5      	b.n	800768a <_printf_common+0x62>
 80076fe:	2301      	movs	r3, #1
 8007700:	4622      	mov	r2, r4
 8007702:	4639      	mov	r1, r7
 8007704:	4630      	mov	r0, r6
 8007706:	47c0      	blx	r8
 8007708:	3001      	adds	r0, #1
 800770a:	d0e6      	beq.n	80076da <_printf_common+0xb2>
 800770c:	f109 0901 	add.w	r9, r9, #1
 8007710:	e7d8      	b.n	80076c4 <_printf_common+0x9c>
	...

08007714 <_printf_i>:
 8007714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007718:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800771c:	460c      	mov	r4, r1
 800771e:	7e09      	ldrb	r1, [r1, #24]
 8007720:	b085      	sub	sp, #20
 8007722:	296e      	cmp	r1, #110	; 0x6e
 8007724:	4617      	mov	r7, r2
 8007726:	4606      	mov	r6, r0
 8007728:	4698      	mov	r8, r3
 800772a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800772c:	f000 80b3 	beq.w	8007896 <_printf_i+0x182>
 8007730:	d822      	bhi.n	8007778 <_printf_i+0x64>
 8007732:	2963      	cmp	r1, #99	; 0x63
 8007734:	d036      	beq.n	80077a4 <_printf_i+0x90>
 8007736:	d80a      	bhi.n	800774e <_printf_i+0x3a>
 8007738:	2900      	cmp	r1, #0
 800773a:	f000 80b9 	beq.w	80078b0 <_printf_i+0x19c>
 800773e:	2958      	cmp	r1, #88	; 0x58
 8007740:	f000 8083 	beq.w	800784a <_printf_i+0x136>
 8007744:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007748:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800774c:	e032      	b.n	80077b4 <_printf_i+0xa0>
 800774e:	2964      	cmp	r1, #100	; 0x64
 8007750:	d001      	beq.n	8007756 <_printf_i+0x42>
 8007752:	2969      	cmp	r1, #105	; 0x69
 8007754:	d1f6      	bne.n	8007744 <_printf_i+0x30>
 8007756:	6820      	ldr	r0, [r4, #0]
 8007758:	6813      	ldr	r3, [r2, #0]
 800775a:	0605      	lsls	r5, r0, #24
 800775c:	f103 0104 	add.w	r1, r3, #4
 8007760:	d52a      	bpl.n	80077b8 <_printf_i+0xa4>
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6011      	str	r1, [r2, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	da03      	bge.n	8007772 <_printf_i+0x5e>
 800776a:	222d      	movs	r2, #45	; 0x2d
 800776c:	425b      	negs	r3, r3
 800776e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007772:	486f      	ldr	r0, [pc, #444]	; (8007930 <_printf_i+0x21c>)
 8007774:	220a      	movs	r2, #10
 8007776:	e039      	b.n	80077ec <_printf_i+0xd8>
 8007778:	2973      	cmp	r1, #115	; 0x73
 800777a:	f000 809d 	beq.w	80078b8 <_printf_i+0x1a4>
 800777e:	d808      	bhi.n	8007792 <_printf_i+0x7e>
 8007780:	296f      	cmp	r1, #111	; 0x6f
 8007782:	d020      	beq.n	80077c6 <_printf_i+0xb2>
 8007784:	2970      	cmp	r1, #112	; 0x70
 8007786:	d1dd      	bne.n	8007744 <_printf_i+0x30>
 8007788:	6823      	ldr	r3, [r4, #0]
 800778a:	f043 0320 	orr.w	r3, r3, #32
 800778e:	6023      	str	r3, [r4, #0]
 8007790:	e003      	b.n	800779a <_printf_i+0x86>
 8007792:	2975      	cmp	r1, #117	; 0x75
 8007794:	d017      	beq.n	80077c6 <_printf_i+0xb2>
 8007796:	2978      	cmp	r1, #120	; 0x78
 8007798:	d1d4      	bne.n	8007744 <_printf_i+0x30>
 800779a:	2378      	movs	r3, #120	; 0x78
 800779c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80077a0:	4864      	ldr	r0, [pc, #400]	; (8007934 <_printf_i+0x220>)
 80077a2:	e055      	b.n	8007850 <_printf_i+0x13c>
 80077a4:	6813      	ldr	r3, [r2, #0]
 80077a6:	1d19      	adds	r1, r3, #4
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	6011      	str	r1, [r2, #0]
 80077ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077b4:	2301      	movs	r3, #1
 80077b6:	e08c      	b.n	80078d2 <_printf_i+0x1be>
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	6011      	str	r1, [r2, #0]
 80077bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80077c0:	bf18      	it	ne
 80077c2:	b21b      	sxthne	r3, r3
 80077c4:	e7cf      	b.n	8007766 <_printf_i+0x52>
 80077c6:	6813      	ldr	r3, [r2, #0]
 80077c8:	6825      	ldr	r5, [r4, #0]
 80077ca:	1d18      	adds	r0, r3, #4
 80077cc:	6010      	str	r0, [r2, #0]
 80077ce:	0628      	lsls	r0, r5, #24
 80077d0:	d501      	bpl.n	80077d6 <_printf_i+0xc2>
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	e002      	b.n	80077dc <_printf_i+0xc8>
 80077d6:	0668      	lsls	r0, r5, #25
 80077d8:	d5fb      	bpl.n	80077d2 <_printf_i+0xbe>
 80077da:	881b      	ldrh	r3, [r3, #0]
 80077dc:	4854      	ldr	r0, [pc, #336]	; (8007930 <_printf_i+0x21c>)
 80077de:	296f      	cmp	r1, #111	; 0x6f
 80077e0:	bf14      	ite	ne
 80077e2:	220a      	movne	r2, #10
 80077e4:	2208      	moveq	r2, #8
 80077e6:	2100      	movs	r1, #0
 80077e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077ec:	6865      	ldr	r5, [r4, #4]
 80077ee:	60a5      	str	r5, [r4, #8]
 80077f0:	2d00      	cmp	r5, #0
 80077f2:	f2c0 8095 	blt.w	8007920 <_printf_i+0x20c>
 80077f6:	6821      	ldr	r1, [r4, #0]
 80077f8:	f021 0104 	bic.w	r1, r1, #4
 80077fc:	6021      	str	r1, [r4, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d13d      	bne.n	800787e <_printf_i+0x16a>
 8007802:	2d00      	cmp	r5, #0
 8007804:	f040 808e 	bne.w	8007924 <_printf_i+0x210>
 8007808:	4665      	mov	r5, ip
 800780a:	2a08      	cmp	r2, #8
 800780c:	d10b      	bne.n	8007826 <_printf_i+0x112>
 800780e:	6823      	ldr	r3, [r4, #0]
 8007810:	07db      	lsls	r3, r3, #31
 8007812:	d508      	bpl.n	8007826 <_printf_i+0x112>
 8007814:	6923      	ldr	r3, [r4, #16]
 8007816:	6862      	ldr	r2, [r4, #4]
 8007818:	429a      	cmp	r2, r3
 800781a:	bfde      	ittt	le
 800781c:	2330      	movle	r3, #48	; 0x30
 800781e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007822:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007826:	ebac 0305 	sub.w	r3, ip, r5
 800782a:	6123      	str	r3, [r4, #16]
 800782c:	f8cd 8000 	str.w	r8, [sp]
 8007830:	463b      	mov	r3, r7
 8007832:	aa03      	add	r2, sp, #12
 8007834:	4621      	mov	r1, r4
 8007836:	4630      	mov	r0, r6
 8007838:	f7ff fef6 	bl	8007628 <_printf_common>
 800783c:	3001      	adds	r0, #1
 800783e:	d14d      	bne.n	80078dc <_printf_i+0x1c8>
 8007840:	f04f 30ff 	mov.w	r0, #4294967295
 8007844:	b005      	add	sp, #20
 8007846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800784a:	4839      	ldr	r0, [pc, #228]	; (8007930 <_printf_i+0x21c>)
 800784c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007850:	6813      	ldr	r3, [r2, #0]
 8007852:	6821      	ldr	r1, [r4, #0]
 8007854:	1d1d      	adds	r5, r3, #4
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	6015      	str	r5, [r2, #0]
 800785a:	060a      	lsls	r2, r1, #24
 800785c:	d50b      	bpl.n	8007876 <_printf_i+0x162>
 800785e:	07ca      	lsls	r2, r1, #31
 8007860:	bf44      	itt	mi
 8007862:	f041 0120 	orrmi.w	r1, r1, #32
 8007866:	6021      	strmi	r1, [r4, #0]
 8007868:	b91b      	cbnz	r3, 8007872 <_printf_i+0x15e>
 800786a:	6822      	ldr	r2, [r4, #0]
 800786c:	f022 0220 	bic.w	r2, r2, #32
 8007870:	6022      	str	r2, [r4, #0]
 8007872:	2210      	movs	r2, #16
 8007874:	e7b7      	b.n	80077e6 <_printf_i+0xd2>
 8007876:	064d      	lsls	r5, r1, #25
 8007878:	bf48      	it	mi
 800787a:	b29b      	uxthmi	r3, r3
 800787c:	e7ef      	b.n	800785e <_printf_i+0x14a>
 800787e:	4665      	mov	r5, ip
 8007880:	fbb3 f1f2 	udiv	r1, r3, r2
 8007884:	fb02 3311 	mls	r3, r2, r1, r3
 8007888:	5cc3      	ldrb	r3, [r0, r3]
 800788a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800788e:	460b      	mov	r3, r1
 8007890:	2900      	cmp	r1, #0
 8007892:	d1f5      	bne.n	8007880 <_printf_i+0x16c>
 8007894:	e7b9      	b.n	800780a <_printf_i+0xf6>
 8007896:	6813      	ldr	r3, [r2, #0]
 8007898:	6825      	ldr	r5, [r4, #0]
 800789a:	6961      	ldr	r1, [r4, #20]
 800789c:	1d18      	adds	r0, r3, #4
 800789e:	6010      	str	r0, [r2, #0]
 80078a0:	0628      	lsls	r0, r5, #24
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	d501      	bpl.n	80078aa <_printf_i+0x196>
 80078a6:	6019      	str	r1, [r3, #0]
 80078a8:	e002      	b.n	80078b0 <_printf_i+0x19c>
 80078aa:	066a      	lsls	r2, r5, #25
 80078ac:	d5fb      	bpl.n	80078a6 <_printf_i+0x192>
 80078ae:	8019      	strh	r1, [r3, #0]
 80078b0:	2300      	movs	r3, #0
 80078b2:	6123      	str	r3, [r4, #16]
 80078b4:	4665      	mov	r5, ip
 80078b6:	e7b9      	b.n	800782c <_printf_i+0x118>
 80078b8:	6813      	ldr	r3, [r2, #0]
 80078ba:	1d19      	adds	r1, r3, #4
 80078bc:	6011      	str	r1, [r2, #0]
 80078be:	681d      	ldr	r5, [r3, #0]
 80078c0:	6862      	ldr	r2, [r4, #4]
 80078c2:	2100      	movs	r1, #0
 80078c4:	4628      	mov	r0, r5
 80078c6:	f7f8 fcb3 	bl	8000230 <memchr>
 80078ca:	b108      	cbz	r0, 80078d0 <_printf_i+0x1bc>
 80078cc:	1b40      	subs	r0, r0, r5
 80078ce:	6060      	str	r0, [r4, #4]
 80078d0:	6863      	ldr	r3, [r4, #4]
 80078d2:	6123      	str	r3, [r4, #16]
 80078d4:	2300      	movs	r3, #0
 80078d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078da:	e7a7      	b.n	800782c <_printf_i+0x118>
 80078dc:	6923      	ldr	r3, [r4, #16]
 80078de:	462a      	mov	r2, r5
 80078e0:	4639      	mov	r1, r7
 80078e2:	4630      	mov	r0, r6
 80078e4:	47c0      	blx	r8
 80078e6:	3001      	adds	r0, #1
 80078e8:	d0aa      	beq.n	8007840 <_printf_i+0x12c>
 80078ea:	6823      	ldr	r3, [r4, #0]
 80078ec:	079b      	lsls	r3, r3, #30
 80078ee:	d413      	bmi.n	8007918 <_printf_i+0x204>
 80078f0:	68e0      	ldr	r0, [r4, #12]
 80078f2:	9b03      	ldr	r3, [sp, #12]
 80078f4:	4298      	cmp	r0, r3
 80078f6:	bfb8      	it	lt
 80078f8:	4618      	movlt	r0, r3
 80078fa:	e7a3      	b.n	8007844 <_printf_i+0x130>
 80078fc:	2301      	movs	r3, #1
 80078fe:	464a      	mov	r2, r9
 8007900:	4639      	mov	r1, r7
 8007902:	4630      	mov	r0, r6
 8007904:	47c0      	blx	r8
 8007906:	3001      	adds	r0, #1
 8007908:	d09a      	beq.n	8007840 <_printf_i+0x12c>
 800790a:	3501      	adds	r5, #1
 800790c:	68e3      	ldr	r3, [r4, #12]
 800790e:	9a03      	ldr	r2, [sp, #12]
 8007910:	1a9b      	subs	r3, r3, r2
 8007912:	42ab      	cmp	r3, r5
 8007914:	dcf2      	bgt.n	80078fc <_printf_i+0x1e8>
 8007916:	e7eb      	b.n	80078f0 <_printf_i+0x1dc>
 8007918:	2500      	movs	r5, #0
 800791a:	f104 0919 	add.w	r9, r4, #25
 800791e:	e7f5      	b.n	800790c <_printf_i+0x1f8>
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1ac      	bne.n	800787e <_printf_i+0x16a>
 8007924:	7803      	ldrb	r3, [r0, #0]
 8007926:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800792a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800792e:	e76c      	b.n	800780a <_printf_i+0xf6>
 8007930:	08007a3d 	.word	0x08007a3d
 8007934:	08007a4e 	.word	0x08007a4e

08007938 <memcpy>:
 8007938:	b510      	push	{r4, lr}
 800793a:	1e43      	subs	r3, r0, #1
 800793c:	440a      	add	r2, r1
 800793e:	4291      	cmp	r1, r2
 8007940:	d100      	bne.n	8007944 <memcpy+0xc>
 8007942:	bd10      	pop	{r4, pc}
 8007944:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007948:	f803 4f01 	strb.w	r4, [r3, #1]!
 800794c:	e7f7      	b.n	800793e <memcpy+0x6>

0800794e <memmove>:
 800794e:	4288      	cmp	r0, r1
 8007950:	b510      	push	{r4, lr}
 8007952:	eb01 0302 	add.w	r3, r1, r2
 8007956:	d807      	bhi.n	8007968 <memmove+0x1a>
 8007958:	1e42      	subs	r2, r0, #1
 800795a:	4299      	cmp	r1, r3
 800795c:	d00a      	beq.n	8007974 <memmove+0x26>
 800795e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007962:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007966:	e7f8      	b.n	800795a <memmove+0xc>
 8007968:	4283      	cmp	r3, r0
 800796a:	d9f5      	bls.n	8007958 <memmove+0xa>
 800796c:	1881      	adds	r1, r0, r2
 800796e:	1ad2      	subs	r2, r2, r3
 8007970:	42d3      	cmn	r3, r2
 8007972:	d100      	bne.n	8007976 <memmove+0x28>
 8007974:	bd10      	pop	{r4, pc}
 8007976:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800797a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800797e:	e7f7      	b.n	8007970 <memmove+0x22>

08007980 <_realloc_r>:
 8007980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007982:	4607      	mov	r7, r0
 8007984:	4614      	mov	r4, r2
 8007986:	460e      	mov	r6, r1
 8007988:	b921      	cbnz	r1, 8007994 <_realloc_r+0x14>
 800798a:	4611      	mov	r1, r2
 800798c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007990:	f7ff bc6c 	b.w	800726c <_malloc_r>
 8007994:	b922      	cbnz	r2, 80079a0 <_realloc_r+0x20>
 8007996:	f7ff fc1b 	bl	80071d0 <_free_r>
 800799a:	4625      	mov	r5, r4
 800799c:	4628      	mov	r0, r5
 800799e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079a0:	f000 f814 	bl	80079cc <_malloc_usable_size_r>
 80079a4:	42a0      	cmp	r0, r4
 80079a6:	d20f      	bcs.n	80079c8 <_realloc_r+0x48>
 80079a8:	4621      	mov	r1, r4
 80079aa:	4638      	mov	r0, r7
 80079ac:	f7ff fc5e 	bl	800726c <_malloc_r>
 80079b0:	4605      	mov	r5, r0
 80079b2:	2800      	cmp	r0, #0
 80079b4:	d0f2      	beq.n	800799c <_realloc_r+0x1c>
 80079b6:	4631      	mov	r1, r6
 80079b8:	4622      	mov	r2, r4
 80079ba:	f7ff ffbd 	bl	8007938 <memcpy>
 80079be:	4631      	mov	r1, r6
 80079c0:	4638      	mov	r0, r7
 80079c2:	f7ff fc05 	bl	80071d0 <_free_r>
 80079c6:	e7e9      	b.n	800799c <_realloc_r+0x1c>
 80079c8:	4635      	mov	r5, r6
 80079ca:	e7e7      	b.n	800799c <_realloc_r+0x1c>

080079cc <_malloc_usable_size_r>:
 80079cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079d0:	1f18      	subs	r0, r3, #4
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	bfbc      	itt	lt
 80079d6:	580b      	ldrlt	r3, [r1, r0]
 80079d8:	18c0      	addlt	r0, r0, r3
 80079da:	4770      	bx	lr

080079dc <_init>:
 80079dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079de:	bf00      	nop
 80079e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079e2:	bc08      	pop	{r3}
 80079e4:	469e      	mov	lr, r3
 80079e6:	4770      	bx	lr

080079e8 <_fini>:
 80079e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ea:	bf00      	nop
 80079ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ee:	bc08      	pop	{r3}
 80079f0:	469e      	mov	lr, r3
 80079f2:	4770      	bx	lr
