
stm32f7-drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f30  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08009110  08009110  00019110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800917c  0800917c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800917c  0800917c  0001917c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009184  08009184  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009184  08009184  00019184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009188  08009188  00019188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800918c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000052c  20000070  080091fc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  080091fc  0002059c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001589a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b3b  00000000  00000000  0003593a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012c8  00000000  00000000  00038478  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001160  00000000  00000000  00039740  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000462f  00000000  00000000  0003a8a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f6fc  00000000  00000000  0003eecf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e211b  00000000  00000000  0004e5cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001306e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052f8  00000000  00000000  00130764  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	080090f8 	.word	0x080090f8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	080090f8 	.word	0x080090f8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b972 	b.w	8000da8 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	4688      	mov	r8, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d14b      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aea:	428a      	cmp	r2, r1
 8000aec:	4615      	mov	r5, r2
 8000aee:	d967      	bls.n	8000bc0 <__udivmoddi4+0xe4>
 8000af0:	fab2 f282 	clz	r2, r2
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0720 	rsb	r7, r2, #32
 8000afa:	fa01 f302 	lsl.w	r3, r1, r2
 8000afe:	fa20 f707 	lsr.w	r7, r0, r7
 8000b02:	4095      	lsls	r5, r2
 8000b04:	ea47 0803 	orr.w	r8, r7, r3
 8000b08:	4094      	lsls	r4, r2
 8000b0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b0e:	0c23      	lsrs	r3, r4, #16
 8000b10:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b14:	fa1f fc85 	uxth.w	ip, r5
 8000b18:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b1c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b20:	fb07 f10c 	mul.w	r1, r7, ip
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x60>
 8000b28:	18eb      	adds	r3, r5, r3
 8000b2a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b2e:	f080 811b 	bcs.w	8000d68 <__udivmoddi4+0x28c>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 8118 	bls.w	8000d68 <__udivmoddi4+0x28c>
 8000b38:	3f02      	subs	r7, #2
 8000b3a:	442b      	add	r3, r5
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b44:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b4c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b50:	45a4      	cmp	ip, r4
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x8c>
 8000b54:	192c      	adds	r4, r5, r4
 8000b56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b5a:	f080 8107 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b5e:	45a4      	cmp	ip, r4
 8000b60:	f240 8104 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b64:	3802      	subs	r0, #2
 8000b66:	442c      	add	r4, r5
 8000b68:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b6c:	eba4 040c 	sub.w	r4, r4, ip
 8000b70:	2700      	movs	r7, #0
 8000b72:	b11e      	cbz	r6, 8000b7c <__udivmoddi4+0xa0>
 8000b74:	40d4      	lsrs	r4, r2
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7c:	4639      	mov	r1, r7
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d909      	bls.n	8000b9a <__udivmoddi4+0xbe>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80eb 	beq.w	8000d62 <__udivmoddi4+0x286>
 8000b8c:	2700      	movs	r7, #0
 8000b8e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b92:	4638      	mov	r0, r7
 8000b94:	4639      	mov	r1, r7
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	fab3 f783 	clz	r7, r3
 8000b9e:	2f00      	cmp	r7, #0
 8000ba0:	d147      	bne.n	8000c32 <__udivmoddi4+0x156>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d302      	bcc.n	8000bac <__udivmoddi4+0xd0>
 8000ba6:	4282      	cmp	r2, r0
 8000ba8:	f200 80fa 	bhi.w	8000da0 <__udivmoddi4+0x2c4>
 8000bac:	1a84      	subs	r4, r0, r2
 8000bae:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	4698      	mov	r8, r3
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	d0e0      	beq.n	8000b7c <__udivmoddi4+0xa0>
 8000bba:	e9c6 4800 	strd	r4, r8, [r6]
 8000bbe:	e7dd      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000bc0:	b902      	cbnz	r2, 8000bc4 <__udivmoddi4+0xe8>
 8000bc2:	deff      	udf	#255	; 0xff
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	2a00      	cmp	r2, #0
 8000bca:	f040 808f 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bce:	1b49      	subs	r1, r1, r5
 8000bd0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bd4:	fa1f f885 	uxth.w	r8, r5
 8000bd8:	2701      	movs	r7, #1
 8000bda:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000be4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bec:	4299      	cmp	r1, r3
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bf0:	18eb      	adds	r3, r5, r3
 8000bf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4299      	cmp	r1, r3
 8000bfa:	f200 80cd 	bhi.w	8000d98 <__udivmoddi4+0x2bc>
 8000bfe:	4684      	mov	ip, r0
 8000c00:	1a59      	subs	r1, r3, r1
 8000c02:	b2a3      	uxth	r3, r4
 8000c04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c08:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c10:	fb08 f800 	mul.w	r8, r8, r0
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0x14c>
 8000c18:	192c      	adds	r4, r5, r4
 8000c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x14a>
 8000c20:	45a0      	cmp	r8, r4
 8000c22:	f200 80b6 	bhi.w	8000d92 <__udivmoddi4+0x2b6>
 8000c26:	4618      	mov	r0, r3
 8000c28:	eba4 0408 	sub.w	r4, r4, r8
 8000c2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c30:	e79f      	b.n	8000b72 <__udivmoddi4+0x96>
 8000c32:	f1c7 0c20 	rsb	ip, r7, #32
 8000c36:	40bb      	lsls	r3, r7
 8000c38:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c3c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c40:	fa01 f407 	lsl.w	r4, r1, r7
 8000c44:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c48:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c4c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c50:	4325      	orrs	r5, r4
 8000c52:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c56:	0c2c      	lsrs	r4, r5, #16
 8000c58:	fb08 3319 	mls	r3, r8, r9, r3
 8000c5c:	fa1f fa8e 	uxth.w	sl, lr
 8000c60:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c64:	fb09 f40a 	mul.w	r4, r9, sl
 8000c68:	429c      	cmp	r4, r3
 8000c6a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c6e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1e 0303 	adds.w	r3, lr, r3
 8000c78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c7c:	f080 8087 	bcs.w	8000d8e <__udivmoddi4+0x2b2>
 8000c80:	429c      	cmp	r4, r3
 8000c82:	f240 8084 	bls.w	8000d8e <__udivmoddi4+0x2b2>
 8000c86:	f1a9 0902 	sub.w	r9, r9, #2
 8000c8a:	4473      	add	r3, lr
 8000c8c:	1b1b      	subs	r3, r3, r4
 8000c8e:	b2ad      	uxth	r5, r5
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c9c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ca0:	45a2      	cmp	sl, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	d26b      	bcs.n	8000d86 <__udivmoddi4+0x2aa>
 8000cae:	45a2      	cmp	sl, r4
 8000cb0:	d969      	bls.n	8000d86 <__udivmoddi4+0x2aa>
 8000cb2:	3802      	subs	r0, #2
 8000cb4:	4474      	add	r4, lr
 8000cb6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cba:	fba0 8902 	umull	r8, r9, r0, r2
 8000cbe:	eba4 040a 	sub.w	r4, r4, sl
 8000cc2:	454c      	cmp	r4, r9
 8000cc4:	46c2      	mov	sl, r8
 8000cc6:	464b      	mov	r3, r9
 8000cc8:	d354      	bcc.n	8000d74 <__udivmoddi4+0x298>
 8000cca:	d051      	beq.n	8000d70 <__udivmoddi4+0x294>
 8000ccc:	2e00      	cmp	r6, #0
 8000cce:	d069      	beq.n	8000da4 <__udivmoddi4+0x2c8>
 8000cd0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cd4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cd8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cdc:	40fd      	lsrs	r5, r7
 8000cde:	40fc      	lsrs	r4, r7
 8000ce0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ce4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ce8:	2700      	movs	r7, #0
 8000cea:	e747      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000cec:	f1c2 0320 	rsb	r3, r2, #32
 8000cf0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cf4:	4095      	lsls	r5, r2
 8000cf6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d02:	4338      	orrs	r0, r7
 8000d04:	0c01      	lsrs	r1, r0, #16
 8000d06:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d0a:	fa1f f885 	uxth.w	r8, r5
 8000d0e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d16:	fb07 f308 	mul.w	r3, r7, r8
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d20:	d907      	bls.n	8000d32 <__udivmoddi4+0x256>
 8000d22:	1869      	adds	r1, r5, r1
 8000d24:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d28:	d22f      	bcs.n	8000d8a <__udivmoddi4+0x2ae>
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d92d      	bls.n	8000d8a <__udivmoddi4+0x2ae>
 8000d2e:	3f02      	subs	r7, #2
 8000d30:	4429      	add	r1, r5
 8000d32:	1acb      	subs	r3, r1, r3
 8000d34:	b281      	uxth	r1, r0
 8000d36:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d3a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d42:	fb00 f308 	mul.w	r3, r0, r8
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x27e>
 8000d4a:	1869      	adds	r1, r5, r1
 8000d4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d50:	d217      	bcs.n	8000d82 <__udivmoddi4+0x2a6>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d915      	bls.n	8000d82 <__udivmoddi4+0x2a6>
 8000d56:	3802      	subs	r0, #2
 8000d58:	4429      	add	r1, r5
 8000d5a:	1ac9      	subs	r1, r1, r3
 8000d5c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d60:	e73b      	b.n	8000bda <__udivmoddi4+0xfe>
 8000d62:	4637      	mov	r7, r6
 8000d64:	4630      	mov	r0, r6
 8000d66:	e709      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000d68:	4607      	mov	r7, r0
 8000d6a:	e6e7      	b.n	8000b3c <__udivmoddi4+0x60>
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	e6fb      	b.n	8000b68 <__udivmoddi4+0x8c>
 8000d70:	4541      	cmp	r1, r8
 8000d72:	d2ab      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d74:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d78:	eb69 020e 	sbc.w	r2, r9, lr
 8000d7c:	3801      	subs	r0, #1
 8000d7e:	4613      	mov	r3, r2
 8000d80:	e7a4      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d82:	4660      	mov	r0, ip
 8000d84:	e7e9      	b.n	8000d5a <__udivmoddi4+0x27e>
 8000d86:	4618      	mov	r0, r3
 8000d88:	e795      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8a:	4667      	mov	r7, ip
 8000d8c:	e7d1      	b.n	8000d32 <__udivmoddi4+0x256>
 8000d8e:	4681      	mov	r9, r0
 8000d90:	e77c      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d92:	3802      	subs	r0, #2
 8000d94:	442c      	add	r4, r5
 8000d96:	e747      	b.n	8000c28 <__udivmoddi4+0x14c>
 8000d98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d9c:	442b      	add	r3, r5
 8000d9e:	e72f      	b.n	8000c00 <__udivmoddi4+0x124>
 8000da0:	4638      	mov	r0, r7
 8000da2:	e708      	b.n	8000bb6 <__udivmoddi4+0xda>
 8000da4:	4637      	mov	r7, r6
 8000da6:	e6e9      	b.n	8000b7c <__udivmoddi4+0xa0>

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <ESC_CPLT_CALLBACK>:
#if defined(DSHOT150) || defined(DSHOT300) || defined(DSHOT600) || defined(DSHOT1200)

#define __DSHOT_CONSUME_BIT(__DSHOT_BYTE__, __BIT__) (__DSHOT_BYTE__ = (((__BIT__ & 0b1) == 0b1) ? DSHOT_HIGH_BIT : DSHOT_LOW_BIT))

void ESC_CPLT_CALLBACK(ESC_CONTROLLER* thisEsc)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]

}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <ESC_HALF_CALLBACK>:

void ESC_HALF_CALLBACK(ESC_CONTROLLER* thisEsc)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]

}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <ESC_INIT>:

ESC_CONTROLLER* ESC_INIT(TIM_HandleTypeDef** dmaTickTimers, TIM_HandleTypeDef* pwmTimer, DMA_HandleTypeDef** dmaHandlers)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08c      	sub	sp, #48	; 0x30
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
	dmaTickTimers[0]->Instance->ARR = TIMER_ARR - 1; 	// htim4 ARR, synchronize timer that control DMA requests
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000dea:	62da      	str	r2, [r3, #44]	; 0x2c
	dmaTickTimers[1]->Instance->ARR = TIMER_ARR - 1; 	// htim5 ARR, synchronize timer that control DMA requests
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	3304      	adds	r3, #4
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000df8:	62da      	str	r2, [r3, #44]	; 0x2c
	pwmTimer->Instance->ARR = TIMER_ARR - 1;		 		// htim3 ARR, synchronize timer that control DMA requests
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000e02:	62da      	str	r2, [r3, #44]	; 0x2c
	// Enable DMA requests on CH1 and CH2
	dmaTickTimers[0]->Instance->DIER = TIM_DIER_CC1DE | TIM_DIER_CC2DE | TIM_DIER_CC3DE;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 8000e0e:	60da      	str	r2, [r3, #12]
	dmaTickTimers[1]->Instance->DIER = TIM_DIER_CC1DE | TIM_DIER_CC2DE;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	3304      	adds	r3, #4
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000e1c:	60da      	str	r2, [r3, #12]
	HAL_TIM_PWM_Start(dmaTickTimers[0], TIM_CHANNEL_1);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f005 fbaf 	bl	8006588 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(dmaTickTimers[0], TIM_CHANNEL_2);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2104      	movs	r1, #4
 8000e30:	4618      	mov	r0, r3
 8000e32:	f005 fba9 	bl	8006588 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(dmaTickTimers[0], TIM_CHANNEL_3);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2108      	movs	r1, #8
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f005 fba3 	bl	8006588 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(dmaTickTimers[1], TIM_CHANNEL_2);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	3304      	adds	r3, #4
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2104      	movs	r1, #4
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f005 fb9c 	bl	8006588 <HAL_TIM_PWM_Start>
	int bytes = sizeof(ESC_CONTROLLER)*ESC_COUNT;
 8000e50:	f44f 7318 	mov.w	r3, #608	; 0x260
 8000e54:	623b      	str	r3, [r7, #32]
	ESC_CONTROLLER* escSet = malloc(bytes);
 8000e56:	6a3b      	ldr	r3, [r7, #32]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f007 fd35 	bl	80088c8 <malloc>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < ESC_COUNT; i++)
 8000e62:	2300      	movs	r3, #0
 8000e64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e66:	e07f      	b.n	8000f68 <ESC_INIT+0x194>
	{
		escSet[i].Throttle = 0;
 8000e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e6a:	2298      	movs	r2, #152	; 0x98
 8000e6c:	fb02 f303 	mul.w	r3, r2, r3
 8000e70:	69fa      	ldr	r2, [r7, #28]
 8000e72:	4413      	add	r3, r2
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < DSHOT_PACKET_SIZE; j++) escSet[i].ThrottleDshot[j] = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e7c:	e00d      	b.n	8000e9a <ESC_INIT+0xc6>
 8000e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e80:	2298      	movs	r2, #152	; 0x98
 8000e82:	fb02 f303 	mul.w	r3, r2, r3
 8000e86:	69fa      	ldr	r2, [r7, #28]
 8000e88:	441a      	add	r2, r3
 8000e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	4413      	add	r3, r2
 8000e90:	2200      	movs	r2, #0
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e96:	3301      	adds	r3, #1
 8000e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e9c:	2b1f      	cmp	r3, #31
 8000e9e:	ddee      	ble.n	8000e7e <ESC_INIT+0xaa>
		escSet[i].Channel = 4*i;
 8000ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea2:	0099      	lsls	r1, r3, #2
 8000ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea6:	2298      	movs	r2, #152	; 0x98
 8000ea8:	fb02 f303 	mul.w	r3, r2, r3
 8000eac:	69fa      	ldr	r2, [r7, #28]
 8000eae:	4413      	add	r3, r2
 8000eb0:	460a      	mov	r2, r1
 8000eb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		escSet[i].Number = i;
 8000eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb8:	2298      	movs	r2, #152	; 0x98
 8000eba:	fb02 f303 	mul.w	r3, r2, r3
 8000ebe:	69fa      	ldr	r2, [r7, #28]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ec4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		escSet[i].Timer = pwmTimer;
 8000ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eca:	2298      	movs	r2, #152	; 0x98
 8000ecc:	fb02 f303 	mul.w	r3, r2, r3
 8000ed0:	69fa      	ldr	r2, [r7, #28]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	68ba      	ldr	r2, [r7, #8]
 8000ed6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		escSet[i].DMA = dmaHandlers[i];
 8000eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	441a      	add	r2, r3
 8000ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee4:	2198      	movs	r1, #152	; 0x98
 8000ee6:	fb01 f303 	mul.w	r3, r1, r3
 8000eea:	69f9      	ldr	r1, [r7, #28]
 8000eec:	440b      	add	r3, r1
 8000eee:	6812      	ldr	r2, [r2, #0]
 8000ef0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 		escSet[i].CCR = &(pwmTimer->Instance->CCR1) + i;
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000efe:	009a      	lsls	r2, r3, #2
 8000f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f02:	2098      	movs	r0, #152	; 0x98
 8000f04:	fb00 f303 	mul.w	r3, r0, r3
 8000f08:	69f8      	ldr	r0, [r7, #28]
 8000f0a:	4403      	add	r3, r0
 8000f0c:	440a      	add	r2, r1
 8000f0e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		*escSet[i].CCR = 0;
 8000f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f14:	2298      	movs	r2, #152	; 0x98
 8000f16:	fb02 f303 	mul.w	r3, r2, r3
 8000f1a:	69fa      	ldr	r2, [r7, #28]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
		void (*cpltCallback) = &ESC_CPLT_CALLBACK;
 8000f26:	4b2d      	ldr	r3, [pc, #180]	; (8000fdc <ESC_INIT+0x208>)
 8000f28:	61bb      	str	r3, [r7, #24]
		void (*halfCallback) = &ESC_HALF_CALLBACK;
 8000f2a:	4b2d      	ldr	r3, [pc, #180]	; (8000fe0 <ESC_INIT+0x20c>)
 8000f2c:	617b      	str	r3, [r7, #20]
		HAL_DMA_RegisterCallback(escSet[i].DMA, HAL_DMA_XFER_CPLT_CB_ID, cpltCallback);
 8000f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f30:	2298      	movs	r2, #152	; 0x98
 8000f32:	fb02 f303 	mul.w	r3, r2, r3
 8000f36:	69fa      	ldr	r2, [r7, #28]
 8000f38:	4413      	add	r3, r2
 8000f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f002 fb9a 	bl	800367c <HAL_DMA_RegisterCallback>
		HAL_DMA_RegisterCallback(escSet[i].DMA, HAL_DMA_XFER_HALFCPLT_CB_ID, halfCallback);
 8000f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f4a:	2298      	movs	r2, #152	; 0x98
 8000f4c:	fb02 f303 	mul.w	r3, r2, r3
 8000f50:	69fa      	ldr	r2, [r7, #28]
 8000f52:	4413      	add	r3, r2
 8000f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f002 fb8d 	bl	800367c <HAL_DMA_RegisterCallback>
	for (int i = 0; i < ESC_COUNT; i++)
 8000f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f64:	3301      	adds	r3, #1
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	f77f af7c 	ble.w	8000e68 <ESC_INIT+0x94>
	}
	for (int i = 0; i < ESC_COUNT; i++)
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
 8000f74:	e02a      	b.n	8000fcc <ESC_INIT+0x1f8>
	{
		HAL_TIM_PWM_Start(pwmTimer, escSet[i].Channel);
 8000f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f78:	2298      	movs	r2, #152	; 0x98
 8000f7a:	fb02 f303 	mul.w	r3, r2, r3
 8000f7e:	69fa      	ldr	r2, [r7, #28]
 8000f80:	4413      	add	r3, r2
 8000f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000f86:	4619      	mov	r1, r3
 8000f88:	68b8      	ldr	r0, [r7, #8]
 8000f8a:	f005 fafd 	bl	8006588 <HAL_TIM_PWM_Start>
		HAL_DMA_Start_IT(escSet[i].DMA, (uint32_t) &escSet[i].ThrottleDshot,
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f90:	2298      	movs	r2, #152	; 0x98
 8000f92:	fb02 f303 	mul.w	r3, r2, r3
 8000f96:	69fa      	ldr	r2, [r7, #28]
 8000f98:	4413      	add	r3, r2
 8000f9a:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	2298      	movs	r2, #152	; 0x98
 8000fa2:	fb02 f303 	mul.w	r3, r2, r3
 8000fa6:	69fa      	ldr	r2, [r7, #28]
 8000fa8:	4413      	add	r3, r2
 8000faa:	3304      	adds	r3, #4
 8000fac:	4619      	mov	r1, r3
								(uint32_t) escSet[i].CCR, DSHOT_PACKET_SIZE);
 8000fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb0:	2298      	movs	r2, #152	; 0x98
 8000fb2:	fb02 f303 	mul.w	r3, r2, r3
 8000fb6:	69fa      	ldr	r2, [r7, #28]
 8000fb8:	4413      	add	r3, r2
 8000fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
		HAL_DMA_Start_IT(escSet[i].DMA, (uint32_t) &escSet[i].ThrottleDshot,
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	2320      	movs	r3, #32
 8000fc2:	f002 f94f 	bl	8003264 <HAL_DMA_Start_IT>
	for (int i = 0; i < ESC_COUNT; i++)
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc8:	3301      	adds	r3, #1
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fce:	2b03      	cmp	r3, #3
 8000fd0:	ddd1      	ble.n	8000f76 <ESC_INIT+0x1a2>
	}
	return escSet;
 8000fd2:	69fb      	ldr	r3, [r7, #28]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3730      	adds	r7, #48	; 0x30
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	08000dad 	.word	0x08000dad
 8000fe0:	08000dc1 	.word	0x08000dc1

08000fe4 <makeDshotPacketBytes>:

uint16_t makeDshotPacketBytes(uint32_t value, uint8_t telemBit)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	70fb      	strb	r3, [r7, #3]
	uint16_t packet = (value << 1) | telemBit;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	78fb      	ldrb	r3, [r7, #3]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	817b      	strh	r3, [r7, #10]
	int csum = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
	int csumData = packet;
 8001004:	897b      	ldrh	r3, [r7, #10]
 8001006:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 3; i++)
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	e009      	b.n	8001022 <makeDshotPacketBytes+0x3e>
	{
		csum ^= csumData; // xor data by nibbles
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	4053      	eors	r3, r2
 8001014:	617b      	str	r3, [r7, #20]
		csumData >>= 4;
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	111b      	asrs	r3, r3, #4
 800101a:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 3; i++)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	3301      	adds	r3, #1
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2b02      	cmp	r3, #2
 8001026:	ddf2      	ble.n	800100e <makeDshotPacketBytes+0x2a>
	}
	csum &= 0xf;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 8001030:	897b      	ldrh	r3, [r7, #10]
 8001032:	011b      	lsls	r3, r3, #4
 8001034:	b21a      	sxth	r2, r3
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	b21b      	sxth	r3, r3
 800103a:	4313      	orrs	r3, r2
 800103c:	b21b      	sxth	r3, r3
 800103e:	817b      	strh	r3, [r7, #10]
	return packet;
 8001040:	897b      	ldrh	r3, [r7, #10]
}
 8001042:	4618      	mov	r0, r3
 8001044:	371c      	adds	r7, #28
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <DSHOT_SEND_PACKET>:

void DSHOT_SEND_PACKET(ESC_CONTROLLER* ESC, uint32_t data, uint32_t telemBit)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b0a8      	sub	sp, #160	; 0xa0
 8001052:	af00      	add	r7, sp, #0
 8001054:	60f8      	str	r0, [r7, #12]
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
	uint16_t dshotBytes = makeDshotPacketBytes(data, telemBit);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	4619      	mov	r1, r3
 8001060:	68b8      	ldr	r0, [r7, #8]
 8001062:	f7ff ffbf 	bl	8000fe4 <makeDshotPacketBytes>
 8001066:	4603      	mov	r3, r0
 8001068:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	// 17th bit is to set CCR to 0 to keep it low between packets
	uint32_t dshotPacket[DSHOT_PACKET_SIZE] = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2280      	movs	r2, #128	; 0x80
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f007 fc3a 	bl	80088ee <memset>
	// Populate checksum bits
	for (int i = 15; i >= 0; i--)
 800107a:	230f      	movs	r3, #15
 800107c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001080:	e01c      	b.n	80010bc <DSHOT_SEND_PACKET+0x6e>
	{
		__DSHOT_CONSUME_BIT(dshotPacket[i], dshotBytes);
 8001082:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	2b00      	cmp	r3, #0
 800108c:	d002      	beq.n	8001094 <DSHOT_SEND_PACKET+0x46>
 800108e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8001092:	e001      	b.n	8001098 <DSHOT_SEND_PACKET+0x4a>
 8001094:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001098:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80010a2:	440b      	add	r3, r1
 80010a4:	f843 2c8c 	str.w	r2, [r3, #-140]
		dshotBytes >>= 1;
 80010a8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80010ac:	085b      	lsrs	r3, r3, #1
 80010ae:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	for (int i = 15; i >= 0; i--)
 80010b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80010b6:	3b01      	subs	r3, #1
 80010b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80010bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	dade      	bge.n	8001082 <DSHOT_SEND_PACKET+0x34>
	}
	for (int i = 0; i < 4; i++)
 80010c4:	2300      	movs	r3, #0
 80010c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80010ca:	e012      	b.n	80010f2 <DSHOT_SEND_PACKET+0xa4>
	{
		memcpy(ESC[i].ThrottleDshot, dshotPacket, sizeof(dshotPacket));
 80010cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80010d0:	2298      	movs	r2, #152	; 0x98
 80010d2:	fb02 f303 	mul.w	r3, r2, r3
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	4413      	add	r3, r2
 80010da:	3304      	adds	r3, #4
 80010dc:	f107 0114 	add.w	r1, r7, #20
 80010e0:	2280      	movs	r2, #128	; 0x80
 80010e2:	4618      	mov	r0, r3
 80010e4:	f007 fbf8 	bl	80088d8 <memcpy>
	for (int i = 0; i < 4; i++)
 80010e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80010ec:	3301      	adds	r3, #1
 80010ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80010f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80010f6:	2b03      	cmp	r3, #3
 80010f8:	dde8      	ble.n	80010cc <DSHOT_SEND_PACKET+0x7e>
	}
}
 80010fa:	bf00      	nop
 80010fc:	37a0      	adds	r7, #160	; 0xa0
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <ESC_UPDATE_THROTTLE>:

void ESC_UPDATE_THROTTLE(ESC_CONTROLLER* ESC, uint32_t throttle)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	6039      	str	r1, [r7, #0]
	// Throttle cannot exceed 11 bits, so max value is 2047
	if (throttle > DSHOT_MAX_THROTTLE) throttle = DSHOT_MAX_THROTTLE;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001112:	d303      	bcc.n	800111c <ESC_UPDATE_THROTTLE+0x1a>
 8001114:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	e004      	b.n	8001126 <ESC_UPDATE_THROTTLE+0x24>
	else if (throttle < DSHOT_MIN_THROTTLE) throttle = DSHOT_MIN_THROTTLE;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	2b1f      	cmp	r3, #31
 8001120:	d801      	bhi.n	8001126 <ESC_UPDATE_THROTTLE+0x24>
 8001122:	2320      	movs	r3, #32
 8001124:	603b      	str	r3, [r7, #0]
	DSHOT_SEND_PACKET(ESC, throttle, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	6839      	ldr	r1, [r7, #0]
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ff8f 	bl	800104e <DSHOT_SEND_PACKET>
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <ESC_SEND_CMD>:

void ESC_SEND_CMD(ESC_CONTROLLER* ESC, uint32_t cmd)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
	// Need to set telemetry bit to 1 if either of these commands are sent
	if (cmd == 	DSHOT_CMD_SPIN_DIRECTION_NORMAL || DSHOT_CMD_SPIN_DIRECTION_REVERSED ||
				DSHOT_CMD_3D_MODE_ON || DSHOT_CMD_3D_MODE_OFF ||
				DSHOT_CMD_SPIN_DIRECTION_1 || DSHOT_CMD_SPIN_DIRECTION_2)
	{
		for (int i = 0; i < 10; i++) DSHOT_SEND_PACKET(ESC, cmd, 1);
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	e007      	b.n	8001158 <ESC_SEND_CMD+0x20>
 8001148:	2201      	movs	r2, #1
 800114a:	6839      	ldr	r1, [r7, #0]
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ff7e 	bl	800104e <DSHOT_SEND_PACKET>
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	3301      	adds	r3, #1
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2b09      	cmp	r3, #9
 800115c:	ddf4      	ble.n	8001148 <ESC_SEND_CMD+0x10>
	}
	else
	{
		DSHOT_SEND_PACKET(ESC, cmd, 0);
	}
	for (int i = 0; i < 10; i++) DSHOT_SEND_PACKET(ESC, DSHOT_CMD_SAVE_SETTINGS, 1);
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	e007      	b.n	8001174 <ESC_SEND_CMD+0x3c>
 8001164:	2201      	movs	r2, #1
 8001166:	210c      	movs	r1, #12
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff70 	bl	800104e <DSHOT_SEND_PACKET>
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	3301      	adds	r3, #1
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	2b09      	cmp	r3, #9
 8001178:	ddf4      	ble.n	8001164 <ESC_SEND_CMD+0x2c>
}
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <RX_INIT>:
 */

#include "RX.h"

RX_CONTROLLER* RX_INIT(TIM_HandleTypeDef* timerSticks, TIM_HandleTypeDef* timerSwitches)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b084      	sub	sp, #16
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	6039      	str	r1, [r7, #0]
	RX_CONTROLLER* RX_CONTROLLER = malloc(sizeof(RX_CONTROLLER));
 800118c:	2004      	movs	r0, #4
 800118e:	f007 fb9b 	bl	80088c8 <malloc>
 8001192:	4603      	mov	r3, r0
 8001194:	60fb      	str	r3, [r7, #12]
	RX_CONTROLLER->throttle = 0;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
	RX_CONTROLLER->pitch = 0;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2200      	movs	r2, #0
 80011a0:	605a      	str	r2, [r3, #4]
	RX_CONTROLLER->roll = 0;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
	RX_CONTROLLER->yaw = 0;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
	RX_CONTROLLER->switchA = 0;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
	RX_CONTROLLER->switchB = 0;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2200      	movs	r2, #0
 80011b8:	615a      	str	r2, [r3, #20]
	RX_CONTROLLER->timerSticks = timerSticks;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	619a      	str	r2, [r3, #24]
	RX_CONTROLLER->timerSwitches = timerSwitches;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	61da      	str	r2, [r3, #28]
	HAL_TIM_IC_Start_IT(RX_CONTROLLER->timerSticks, TIM_CHANNEL_1);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f005 fa55 	bl	800667c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(RX_CONTROLLER->timerSticks, TIM_CHANNEL_2);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	2104      	movs	r1, #4
 80011d8:	4618      	mov	r0, r3
 80011da:	f005 fa4f 	bl	800667c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(RX_CONTROLLER->timerSticks, TIM_CHANNEL_3);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	2108      	movs	r1, #8
 80011e4:	4618      	mov	r0, r3
 80011e6:	f005 fa49 	bl	800667c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(RX_CONTROLLER->timerSticks, TIM_CHANNEL_4);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	210c      	movs	r1, #12
 80011f0:	4618      	mov	r0, r3
 80011f2:	f005 fa43 	bl	800667c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(RX_CONTROLLER->timerSwitches, TIM_CHANNEL_1);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f005 fa3d 	bl	800667c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(RX_CONTROLLER->timerSwitches, TIM_CHANNEL_4);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	210c      	movs	r1, #12
 8001208:	4618      	mov	r0, r3
 800120a:	f005 fa37 	bl	800667c <HAL_TIM_IC_Start_IT>
	return RX_CONTROLLER;
 800120e:	68fb      	ldr	r3, [r7, #12]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <RX_UPDATE>:

// TO DO: Debug this
// TO DO: Convert the values before putting them RX_CONTROLLER. Probably best to load into local array then copy into RX_CONTROLLER
void RX_UPDATE(RX_CONTROLLER* RX_CONTROLLER)
{
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	uint32_t curThrottle = HAL_TIM_ReadCapturedValue(RX_CONTROLLER->timerSticks, TIM_CHANNEL_1);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f005 fd0a 	bl	8006c40 <HAL_TIM_ReadCapturedValue>
 800122c:	60f8      	str	r0, [r7, #12]
	curThrottle = (curThrottle - 998) * 2.045;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f2a3 33e6 	subw	r3, r3, #998	; 0x3e6
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f98d 	bl	8000554 <__aeabi_ui2d>
 800123a:	a321      	add	r3, pc, #132	; (adr r3, 80012c0 <RX_UPDATE+0xa8>)
 800123c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001240:	f7ff fa02 	bl	8000648 <__aeabi_dmul>
 8001244:	4603      	mov	r3, r0
 8001246:	460c      	mov	r4, r1
 8001248:	4618      	mov	r0, r3
 800124a:	4621      	mov	r1, r4
 800124c:	f7ff fc0e 	bl	8000a6c <__aeabi_d2uiz>
 8001250:	4603      	mov	r3, r0
 8001252:	60fb      	str	r3, [r7, #12]
	RX_CONTROLLER->throttle = curThrottle;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	601a      	str	r2, [r3, #0]
	RX_CONTROLLER->pitch = HAL_TIM_ReadCapturedValue(RX_CONTROLLER->timerSticks, TIM_CHANNEL_2);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	2104      	movs	r1, #4
 8001260:	4618      	mov	r0, r3
 8001262:	f005 fced 	bl	8006c40 <HAL_TIM_ReadCapturedValue>
 8001266:	4602      	mov	r2, r0
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	605a      	str	r2, [r3, #4]
	RX_CONTROLLER->roll = HAL_TIM_ReadCapturedValue(RX_CONTROLLER->timerSticks, TIM_CHANNEL_3);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	2108      	movs	r1, #8
 8001272:	4618      	mov	r0, r3
 8001274:	f005 fce4 	bl	8006c40 <HAL_TIM_ReadCapturedValue>
 8001278:	4602      	mov	r2, r0
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	609a      	str	r2, [r3, #8]
	RX_CONTROLLER->yaw = HAL_TIM_ReadCapturedValue(RX_CONTROLLER->timerSticks, TIM_CHANNEL_4);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	210c      	movs	r1, #12
 8001284:	4618      	mov	r0, r3
 8001286:	f005 fcdb 	bl	8006c40 <HAL_TIM_ReadCapturedValue>
 800128a:	4602      	mov	r2, r0
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	60da      	str	r2, [r3, #12]
	RX_CONTROLLER->switchA = HAL_TIM_ReadCapturedValue(RX_CONTROLLER->timerSwitches, TIM_CHANNEL_1);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f005 fcd2 	bl	8006c40 <HAL_TIM_ReadCapturedValue>
 800129c:	4602      	mov	r2, r0
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	611a      	str	r2, [r3, #16]
	RX_CONTROLLER->switchB = HAL_TIM_ReadCapturedValue(RX_CONTROLLER->timerSwitches, TIM_CHANNEL_4);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	210c      	movs	r1, #12
 80012a8:	4618      	mov	r0, r3
 80012aa:	f005 fcc9 	bl	8006c40 <HAL_TIM_ReadCapturedValue>
 80012ae:	4602      	mov	r2, r0
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	615a      	str	r2, [r3, #20]
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd90      	pop	{r4, r7, pc}
 80012bc:	f3af 8000 	nop.w
 80012c0:	f5c28f5c 	.word	0xf5c28f5c
 80012c4:	40005c28 	.word	0x40005c28

080012c8 <XLG_INIT>:
  * @param writeSize	write here
  * @retval void
  */

void XLG_INIT(I2C_HandleTypeDef* i2c)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	uint8_t writeThis = 0b10000000;
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	73fb      	strb	r3, [r7, #15]
	XLG_WRITE(i2c, CTRL1_XL, &writeThis, 1);
 80012d4:	f107 020f 	add.w	r2, r7, #15
 80012d8:	2301      	movs	r3, #1
 80012da:	2110      	movs	r1, #16
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 f80d 	bl	80012fc <XLG_WRITE>
	writeThis = 0b10001100;
 80012e2:	238c      	movs	r3, #140	; 0x8c
 80012e4:	73fb      	strb	r3, [r7, #15]
	XLG_WRITE(i2c, CTRL2_G, &writeThis, 1);
 80012e6:	f107 020f 	add.w	r2, r7, #15
 80012ea:	2301      	movs	r3, #1
 80012ec:	2111      	movs	r1, #17
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 f804 	bl	80012fc <XLG_WRITE>
}
 80012f4:	bf00      	nop
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <XLG_WRITE>:

void XLG_WRITE(I2C_HandleTypeDef* i2c, uint8_t addr, uint8_t* writeByte, uint32_t writeSize)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af02      	add	r7, sp, #8
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	460b      	mov	r3, r1
 800130a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write_DMA(i2c, XLG_I2C_ADDR, addr, XLG_REG_SIZE, writeByte, writeSize);
 800130c:	7afb      	ldrb	r3, [r7, #11]
 800130e:	b29a      	uxth	r2, r3
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	b29b      	uxth	r3, r3
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2301      	movs	r3, #1
 800131c:	21d4      	movs	r1, #212	; 0xd4
 800131e:	68f8      	ldr	r0, [r7, #12]
 8001320:	f002 fd2e 	bl	8003d80 <HAL_I2C_Mem_Write_DMA>
	while(i2c->hdmatx->State != HAL_DMA_STATE_READY);
 8001324:	bf00      	nop
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800132a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b01      	cmp	r3, #1
 8001332:	d1f8      	bne.n	8001326 <XLG_WRITE+0x2a>
	i2c->State = HAL_I2C_STATE_READY;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2220      	movs	r2, #32
 8001338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800133c:	bf00      	nop
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	cmd = escCMD - '0';
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <HAL_UART_RxCpltCallback+0x48>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	3b30      	subs	r3, #48	; 0x30
 8001352:	4a0f      	ldr	r2, [pc, #60]	; (8001390 <HAL_UART_RxCpltCallback+0x4c>)
 8001354:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(&huart3, &escCMD, 1);
 8001356:	2201      	movs	r2, #1
 8001358:	490c      	ldr	r1, [pc, #48]	; (800138c <HAL_UART_RxCpltCallback+0x48>)
 800135a:	480e      	ldr	r0, [pc, #56]	; (8001394 <HAL_UART_RxCpltCallback+0x50>)
 800135c:	f006 fb40 	bl	80079e0 <HAL_UART_Receive_IT>
	sprintf((char*)sendMsg, "\r\nSending command %c\r\n", escCMD);
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <HAL_UART_RxCpltCallback+0x48>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	490c      	ldr	r1, [pc, #48]	; (8001398 <HAL_UART_RxCpltCallback+0x54>)
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <HAL_UART_RxCpltCallback+0x58>)
 800136a:	f007 fb81 	bl	8008a70 <siprintf>
	HAL_UART_Transmit_IT(&huart3, sendMsg, strlen((char*)sendMsg));
 800136e:	480b      	ldr	r0, [pc, #44]	; (800139c <HAL_UART_RxCpltCallback+0x58>)
 8001370:	f7fe ff56 	bl	8000220 <strlen>
 8001374:	4603      	mov	r3, r0
 8001376:	b29b      	uxth	r3, r3
 8001378:	461a      	mov	r2, r3
 800137a:	4908      	ldr	r1, [pc, #32]	; (800139c <HAL_UART_RxCpltCallback+0x58>)
 800137c:	4805      	ldr	r0, [pc, #20]	; (8001394 <HAL_UART_RxCpltCallback+0x50>)
 800137e:	f006 fad3 	bl	8007928 <HAL_UART_Transmit_IT>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000284 	.word	0x20000284
 8001390:	2000008c 	.word	0x2000008c
 8001394:	2000013c 	.word	0x2000013c
 8001398:	08009110 	.word	0x08009110
 800139c:	20000354 	.word	0x20000354

080013a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a0:	b590      	push	{r4, r7, lr}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a6:	f001 fab8 	bl	800291a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013aa:	f000 f8c9 	bl	8001540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ae:	f000 fcd3 	bl	8001d58 <MX_GPIO_Init>
  MX_DMA_Init();
 80013b2:	f000 fc8b 	bl	8001ccc <MX_DMA_Init>
  MX_USART3_UART_Init();
 80013b6:	f000 fc51 	bl	8001c5c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 80013ba:	f000 fc7f 	bl	8001cbc <MX_USB_OTG_FS_USB_Init>
  MX_TIM4_Init();
 80013be:	f000 fb83 	bl	8001ac8 <MX_TIM4_Init>
  MX_ADC1_Init();
 80013c2:	f000 f955 	bl	8001670 <MX_ADC1_Init>
  MX_I2C1_Init();
 80013c6:	f000 f9a5 	bl	8001714 <MX_I2C1_Init>
  MX_TIM3_Init();
 80013ca:	f000 fb01 	bl	80019d0 <MX_TIM3_Init>
  MX_TIM2_Init();
 80013ce:	f000 fa81 	bl	80018d4 <MX_TIM2_Init>
  MX_TIM1_Init();
 80013d2:	f000 f9df 	bl	8001794 <MX_TIM1_Init>
  MX_TIM5_Init();
 80013d6:	f000 fbe7 	bl	8001ba8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
	escDMASet[0] = &hdma_tim4_ch1; 		// DMA1: Stream 0 (S0)
 80013da:	4b48      	ldr	r3, [pc, #288]	; (80014fc <main+0x15c>)
 80013dc:	4a48      	ldr	r2, [pc, #288]	; (8001500 <main+0x160>)
 80013de:	601a      	str	r2, [r3, #0]
	escDMASet[1] = &hdma_tim4_ch2; 		// DMA1: Stream 3 (S3)
 80013e0:	4b46      	ldr	r3, [pc, #280]	; (80014fc <main+0x15c>)
 80013e2:	4a48      	ldr	r2, [pc, #288]	; (8001504 <main+0x164>)
 80013e4:	605a      	str	r2, [r3, #4]
	escDMASet[2] = &hdma_tim4_ch3; 		// DMA1: Stream 7 (S7)
 80013e6:	4b45      	ldr	r3, [pc, #276]	; (80014fc <main+0x15c>)
 80013e8:	4a47      	ldr	r2, [pc, #284]	; (8001508 <main+0x168>)
 80013ea:	609a      	str	r2, [r3, #8]
	escDMASet[3] = &hdma_tim5_ch2; 		// DMA1: Stream 4 (S4)
 80013ec:	4b43      	ldr	r3, [pc, #268]	; (80014fc <main+0x15c>)
 80013ee:	4a47      	ldr	r2, [pc, #284]	; (800150c <main+0x16c>)
 80013f0:	60da      	str	r2, [r3, #12]
	dmaPwmTimers[0] = &htim4;
 80013f2:	4b47      	ldr	r3, [pc, #284]	; (8001510 <main+0x170>)
 80013f4:	4a47      	ldr	r2, [pc, #284]	; (8001514 <main+0x174>)
 80013f6:	601a      	str	r2, [r3, #0]
	dmaPwmTimers[1] = &htim5;
 80013f8:	4b45      	ldr	r3, [pc, #276]	; (8001510 <main+0x170>)
 80013fa:	4a47      	ldr	r2, [pc, #284]	; (8001518 <main+0x178>)
 80013fc:	605a      	str	r2, [r3, #4]
	myESCSet = ESC_INIT(dmaPwmTimers, &htim3, escDMASet);
 80013fe:	4a3f      	ldr	r2, [pc, #252]	; (80014fc <main+0x15c>)
 8001400:	4946      	ldr	r1, [pc, #280]	; (800151c <main+0x17c>)
 8001402:	4843      	ldr	r0, [pc, #268]	; (8001510 <main+0x170>)
 8001404:	f7ff fce6 	bl	8000dd4 <ESC_INIT>
 8001408:	4602      	mov	r2, r0
 800140a:	4b45      	ldr	r3, [pc, #276]	; (8001520 <main+0x180>)
 800140c:	601a      	str	r2, [r3, #0]
	myRX = RX_INIT(&htim1, &htim2);
 800140e:	4945      	ldr	r1, [pc, #276]	; (8001524 <main+0x184>)
 8001410:	4845      	ldr	r0, [pc, #276]	; (8001528 <main+0x188>)
 8001412:	f7ff feb6 	bl	8001182 <RX_INIT>
 8001416:	4602      	mov	r2, r0
 8001418:	4b44      	ldr	r3, [pc, #272]	; (800152c <main+0x18c>)
 800141a:	601a      	str	r2, [r3, #0]
	XLG_INIT(&hi2c1);
 800141c:	4844      	ldr	r0, [pc, #272]	; (8001530 <main+0x190>)
 800141e:	f7ff ff53 	bl	80012c8 <XLG_INIT>

	const int patternSize = 26;
 8001422:	231a      	movs	r3, #26
 8001424:	60fb      	str	r3, [r7, #12]
	//int startTime = HAL_GetTick();
	//const int period = 2000;
	uint32_t pattern[patternSize];
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	3b01      	subs	r3, #1
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4619      	mov	r1, r3
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	f04f 0400 	mov.w	r4, #0
 800143c:	0154      	lsls	r4, r2, #5
 800143e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001442:	014b      	lsls	r3, r1, #5
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4619      	mov	r1, r3
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	f04f 0300 	mov.w	r3, #0
 8001450:	f04f 0400 	mov.w	r4, #0
 8001454:	0154      	lsls	r4, r2, #5
 8001456:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800145a:	014b      	lsls	r3, r1, #5
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	3303      	adds	r3, #3
 8001462:	3307      	adds	r3, #7
 8001464:	08db      	lsrs	r3, r3, #3
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	ebad 0d03 	sub.w	sp, sp, r3
 800146c:	466b      	mov	r3, sp
 800146e:	3303      	adds	r3, #3
 8001470:	089b      	lsrs	r3, r3, #2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	607b      	str	r3, [r7, #4]
	pattern[0] = DSHOT_CMD_MOTOR_STOP;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
	pattern[1] = DSHOT_CMD_LED0_ON;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2216      	movs	r2, #22
 8001480:	605a      	str	r2, [r3, #4]
	pattern[2] = DSHOT_CMD_LED0_OFF;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	221a      	movs	r2, #26
 8001486:	609a      	str	r2, [r3, #8]
	pattern[3] = DSHOT_CMD_LED1_ON;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2217      	movs	r2, #23
 800148c:	60da      	str	r2, [r3, #12]
	pattern[4] = DSHOT_CMD_LED1_OFF;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	221b      	movs	r2, #27
 8001492:	611a      	str	r2, [r3, #16]
	pattern[5] = DSHOT_CMD_LED2_ON;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2218      	movs	r2, #24
 8001498:	615a      	str	r2, [r3, #20]
	pattern[6] = DSHOT_CMD_LED2_OFF;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	221c      	movs	r2, #28
 800149e:	619a      	str	r2, [r3, #24]
	pattern[7] = DSHOT_CMD_SPIN_DIRECTION_NORMAL;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2214      	movs	r2, #20
 80014a4:	61da      	str	r2, [r3, #28]
	pattern[8] = DSHOT_CMD_SPIN_DIRECTION_REVERSED;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2215      	movs	r2, #21
 80014aa:	621a      	str	r2, [r3, #32]
	pattern[9] = DSHOT_CMD_BEACON1;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_UART_Receive_IT(&huart3, &escCMD, 1);
 80014b2:	2201      	movs	r2, #1
 80014b4:	491f      	ldr	r1, [pc, #124]	; (8001534 <main+0x194>)
 80014b6:	4820      	ldr	r0, [pc, #128]	; (8001538 <main+0x198>)
 80014b8:	f006 fa92 	bl	80079e0 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  RX_UPDATE(myRX);
 80014bc:	4b1b      	ldr	r3, [pc, #108]	; (800152c <main+0x18c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fea9 	bl	8001218 <RX_UPDATE>
	  if (myRX->switchA < 600)
 80014c6:	4b19      	ldr	r3, [pc, #100]	; (800152c <main+0x18c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80014d0:	d20a      	bcs.n	80014e8 <main+0x148>

//		  int patternIndex = ((currentTime - startTime) / period) % patternSize;
//		  testThrottle = pattern[patternIndex];
		  //sprintf((char*)sendMsg, "\r\nSending command %c", cmd);
		  //HAL_UART_Transmit_IT(&huart3, sendMsg, strlen((char*)sendMsg));
		  ESC_SEND_CMD(myESCSet, pattern[cmd]);
 80014d2:	4b13      	ldr	r3, [pc, #76]	; (8001520 <main+0x180>)
 80014d4:	6818      	ldr	r0, [r3, #0]
 80014d6:	4b19      	ldr	r3, [pc, #100]	; (800153c <main+0x19c>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e0:	4619      	mov	r1, r3
 80014e2:	f7ff fe29 	bl	8001138 <ESC_SEND_CMD>
 80014e6:	e7e9      	b.n	80014bc <main+0x11c>
	  }
	  else
	  {
		  ESC_UPDATE_THROTTLE(myESCSet, myRX->throttle);
 80014e8:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <main+0x180>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <main+0x18c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4619      	mov	r1, r3
 80014f4:	4610      	mov	r0, r2
 80014f6:	f7ff fe04 	bl	8001102 <ESC_UPDATE_THROTTLE>
	  RX_UPDATE(myRX);
 80014fa:	e7df      	b.n	80014bc <main+0x11c>
 80014fc:	200001bc 	.word	0x200001bc
 8001500:	2000052c 	.word	0x2000052c
 8001504:	2000009c 	.word	0x2000009c
 8001508:	200003ec 	.word	0x200003ec
 800150c:	2000038c 	.word	0x2000038c
 8001510:	20000278 	.word	0x20000278
 8001514:	200000fc 	.word	0x200000fc
 8001518:	20000288 	.word	0x20000288
 800151c:	200002c8 	.word	0x200002c8
 8001520:	20000280 	.word	0x20000280
 8001524:	200004ec 	.word	0x200004ec
 8001528:	2000044c 	.word	0x2000044c
 800152c:	20000308 	.word	0x20000308
 8001530:	2000022c 	.word	0x2000022c
 8001534:	20000284 	.word	0x20000284
 8001538:	2000013c 	.word	0x2000013c
 800153c:	2000008c 	.word	0x2000008c

08001540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b0b4      	sub	sp, #208	; 0xd0
 8001544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001546:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800154a:	2230      	movs	r2, #48	; 0x30
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f007 f9cd 	bl	80088ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001554:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	2280      	movs	r2, #128	; 0x80
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f007 f9be 	bl	80088ee <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001572:	f003 ff43 	bl	80053fc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	4b3b      	ldr	r3, [pc, #236]	; (8001664 <SystemClock_Config+0x124>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	4a3a      	ldr	r2, [pc, #232]	; (8001664 <SystemClock_Config+0x124>)
 800157c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001580:	6413      	str	r3, [r2, #64]	; 0x40
 8001582:	4b38      	ldr	r3, [pc, #224]	; (8001664 <SystemClock_Config+0x124>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800158e:	4b36      	ldr	r3, [pc, #216]	; (8001668 <SystemClock_Config+0x128>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a35      	ldr	r2, [pc, #212]	; (8001668 <SystemClock_Config+0x128>)
 8001594:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	4b33      	ldr	r3, [pc, #204]	; (8001668 <SystemClock_Config+0x128>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015a6:	2301      	movs	r3, #1
 80015a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80015b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b4:	2302      	movs	r3, #2
 80015b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015c2:	2308      	movs	r3, #8
 80015c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 80015c8:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80015cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015d0:	2302      	movs	r3, #2
 80015d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80015d6:	2309      	movs	r3, #9
 80015d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015dc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80015e0:	4618      	mov	r0, r3
 80015e2:	f003 ff6b 	bl	80054bc <HAL_RCC_OscConfig>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80015ec:	f000 fcae 	bl	8001f4c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80015f0:	f003 ff14 	bl	800541c <HAL_PWREx_EnableOverDrive>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80015fa:	f000 fca7 	bl	8001f4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015fe:	230f      	movs	r3, #15
 8001600:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001604:	2302      	movs	r3, #2
 8001606:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800160a:	2300      	movs	r3, #0
 800160c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001610:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001614:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001620:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001624:	2107      	movs	r1, #7
 8001626:	4618      	mov	r0, r3
 8001628:	f004 f9ec 	bl	8005a04 <HAL_RCC_ClockConfig>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001632:	f000 fc8b 	bl	8001f4c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8001636:	4b0d      	ldr	r3, [pc, #52]	; (800166c <SystemClock_Config+0x12c>)
 8001638:	60fb      	str	r3, [r7, #12]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800163a:	2300      	movs	r3, #0
 800163c:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800163e:	2300      	movs	r3, #0
 8001640:	66bb      	str	r3, [r7, #104]	; 0x68
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001642:	2300      	movs	r3, #0
 8001644:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	4618      	mov	r0, r3
 800164e:	f004 fbd1 	bl	8005df4 <HAL_RCCEx_PeriphCLKConfig>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8001658:	f000 fc78 	bl	8001f4c <Error_Handler>
  }
}
 800165c:	bf00      	nop
 800165e:	37d0      	adds	r7, #208	; 0xd0
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40023800 	.word	0x40023800
 8001668:	40007000 	.word	0x40007000
 800166c:	00204100 	.word	0x00204100

08001670 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001676:	463b      	mov	r3, r7
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001682:	4b21      	ldr	r3, [pc, #132]	; (8001708 <MX_ADC1_Init+0x98>)
 8001684:	4a21      	ldr	r2, [pc, #132]	; (800170c <MX_ADC1_Init+0x9c>)
 8001686:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001688:	4b1f      	ldr	r3, [pc, #124]	; (8001708 <MX_ADC1_Init+0x98>)
 800168a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800168e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001690:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <MX_ADC1_Init+0x98>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <MX_ADC1_Init+0x98>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800169c:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <MX_ADC1_Init+0x98>)
 800169e:	2200      	movs	r2, #0
 80016a0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016a2:	4b19      	ldr	r3, [pc, #100]	; (8001708 <MX_ADC1_Init+0x98>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016aa:	4b17      	ldr	r3, [pc, #92]	; (8001708 <MX_ADC1_Init+0x98>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016b0:	4b15      	ldr	r3, [pc, #84]	; (8001708 <MX_ADC1_Init+0x98>)
 80016b2:	4a17      	ldr	r2, [pc, #92]	; (8001710 <MX_ADC1_Init+0xa0>)
 80016b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016b6:	4b14      	ldr	r3, [pc, #80]	; (8001708 <MX_ADC1_Init+0x98>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <MX_ADC1_Init+0x98>)
 80016be:	2201      	movs	r2, #1
 80016c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016c2:	4b11      	ldr	r3, [pc, #68]	; (8001708 <MX_ADC1_Init+0x98>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016ca:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <MX_ADC1_Init+0x98>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016d0:	480d      	ldr	r0, [pc, #52]	; (8001708 <MX_ADC1_Init+0x98>)
 80016d2:	f001 f97f 	bl	80029d4 <HAL_ADC_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80016dc:	f000 fc36 	bl	8001f4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80016e0:	2309      	movs	r3, #9
 80016e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016e4:	2301      	movs	r3, #1
 80016e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016ec:	463b      	mov	r3, r7
 80016ee:	4619      	mov	r1, r3
 80016f0:	4805      	ldr	r0, [pc, #20]	; (8001708 <MX_ADC1_Init+0x98>)
 80016f2:	f001 f9b3 	bl	8002a5c <HAL_ADC_ConfigChannel>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80016fc:	f000 fc26 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001700:	bf00      	nop
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	2000030c 	.word	0x2000030c
 800170c:	40012000 	.word	0x40012000
 8001710:	0f000001 	.word	0x0f000001

08001714 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001718:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <MX_I2C1_Init+0x74>)
 800171a:	4a1c      	ldr	r2, [pc, #112]	; (800178c <MX_I2C1_Init+0x78>)
 800171c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800171e:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <MX_I2C1_Init+0x74>)
 8001720:	4a1b      	ldr	r2, [pc, #108]	; (8001790 <MX_I2C1_Init+0x7c>)
 8001722:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 212;
 8001724:	4b18      	ldr	r3, [pc, #96]	; (8001788 <MX_I2C1_Init+0x74>)
 8001726:	22d4      	movs	r2, #212	; 0xd4
 8001728:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800172a:	4b17      	ldr	r3, [pc, #92]	; (8001788 <MX_I2C1_Init+0x74>)
 800172c:	2201      	movs	r2, #1
 800172e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001730:	4b15      	ldr	r3, [pc, #84]	; (8001788 <MX_I2C1_Init+0x74>)
 8001732:	2200      	movs	r2, #0
 8001734:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001736:	4b14      	ldr	r3, [pc, #80]	; (8001788 <MX_I2C1_Init+0x74>)
 8001738:	2200      	movs	r2, #0
 800173a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <MX_I2C1_Init+0x74>)
 800173e:	2200      	movs	r2, #0
 8001740:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <MX_I2C1_Init+0x74>)
 8001744:	2200      	movs	r2, #0
 8001746:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <MX_I2C1_Init+0x74>)
 800174a:	2200      	movs	r2, #0
 800174c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800174e:	480e      	ldr	r0, [pc, #56]	; (8001788 <MX_I2C1_Init+0x74>)
 8001750:	f002 fa86 	bl	8003c60 <HAL_I2C_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800175a:	f000 fbf7 	bl	8001f4c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800175e:	2100      	movs	r1, #0
 8001760:	4809      	ldr	r0, [pc, #36]	; (8001788 <MX_I2C1_Init+0x74>)
 8001762:	f003 fdb4 	bl	80052ce <HAL_I2CEx_ConfigAnalogFilter>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800176c:	f000 fbee 	bl	8001f4c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001770:	2100      	movs	r1, #0
 8001772:	4805      	ldr	r0, [pc, #20]	; (8001788 <MX_I2C1_Init+0x74>)
 8001774:	f003 fdf6 	bl	8005364 <HAL_I2CEx_ConfigDigitalFilter>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800177e:	f000 fbe5 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	2000022c 	.word	0x2000022c
 800178c:	40005400 	.word	0x40005400
 8001790:	20404768 	.word	0x20404768

08001794 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08c      	sub	sp, #48	; 0x30
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800179a:	f107 031c 	add.w	r3, r7, #28
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017aa:	f107 0310 	add.w	r3, r7, #16
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80017b6:	463b      	mov	r3, r7
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017c2:	4b42      	ldr	r3, [pc, #264]	; (80018cc <MX_TIM1_Init+0x138>)
 80017c4:	4a42      	ldr	r2, [pc, #264]	; (80018d0 <MX_TIM1_Init+0x13c>)
 80017c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 215;
 80017c8:	4b40      	ldr	r3, [pc, #256]	; (80018cc <MX_TIM1_Init+0x138>)
 80017ca:	22d7      	movs	r2, #215	; 0xd7
 80017cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ce:	4b3f      	ldr	r3, [pc, #252]	; (80018cc <MX_TIM1_Init+0x138>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80017d4:	4b3d      	ldr	r3, [pc, #244]	; (80018cc <MX_TIM1_Init+0x138>)
 80017d6:	f242 720f 	movw	r2, #9999	; 0x270f
 80017da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017dc:	4b3b      	ldr	r3, [pc, #236]	; (80018cc <MX_TIM1_Init+0x138>)
 80017de:	2200      	movs	r2, #0
 80017e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017e2:	4b3a      	ldr	r3, [pc, #232]	; (80018cc <MX_TIM1_Init+0x138>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017e8:	4b38      	ldr	r3, [pc, #224]	; (80018cc <MX_TIM1_Init+0x138>)
 80017ea:	2280      	movs	r2, #128	; 0x80
 80017ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017ee:	4837      	ldr	r0, [pc, #220]	; (80018cc <MX_TIM1_Init+0x138>)
 80017f0:	f004 fe48 	bl	8006484 <HAL_TIM_Base_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80017fa:	f000 fba7 	bl	8001f4c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80017fe:	4833      	ldr	r0, [pc, #204]	; (80018cc <MX_TIM1_Init+0x138>)
 8001800:	f004 ff06 	bl	8006610 <HAL_TIM_IC_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800180a:	f000 fb9f 	bl	8001f4c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800180e:	2304      	movs	r3, #4
 8001810:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8001812:	2370      	movs	r3, #112	; 0x70
 8001814:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8001816:	2300      	movs	r3, #0
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 800181a:	2300      	movs	r3, #0
 800181c:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001822:	f107 031c 	add.w	r3, r7, #28
 8001826:	4619      	mov	r1, r3
 8001828:	4828      	ldr	r0, [pc, #160]	; (80018cc <MX_TIM1_Init+0x138>)
 800182a:	f005 f9c7 	bl	8006bbc <HAL_TIM_SlaveConfigSynchro>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001834:	f000 fb8a 	bl	8001f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001838:	2300      	movs	r3, #0
 800183a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001844:	f107 0310 	add.w	r3, r7, #16
 8001848:	4619      	mov	r1, r3
 800184a:	4820      	ldr	r0, [pc, #128]	; (80018cc <MX_TIM1_Init+0x138>)
 800184c:	f005 ff90 	bl	8007770 <HAL_TIMEx_MasterConfigSynchronization>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001856:	f000 fb79 	bl	8001f4c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800185a:	2302      	movs	r3, #2
 800185c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800185e:	2301      	movs	r3, #1
 8001860:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800186a:	463b      	mov	r3, r7
 800186c:	2200      	movs	r2, #0
 800186e:	4619      	mov	r1, r3
 8001870:	4816      	ldr	r0, [pc, #88]	; (80018cc <MX_TIM1_Init+0x138>)
 8001872:	f004 ffef 	bl	8006854 <HAL_TIM_IC_ConfigChannel>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 800187c:	f000 fb66 	bl	8001f4c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001880:	463b      	mov	r3, r7
 8001882:	2204      	movs	r2, #4
 8001884:	4619      	mov	r1, r3
 8001886:	4811      	ldr	r0, [pc, #68]	; (80018cc <MX_TIM1_Init+0x138>)
 8001888:	f004 ffe4 	bl	8006854 <HAL_TIM_IC_ConfigChannel>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8001892:	f000 fb5b 	bl	8001f4c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001896:	463b      	mov	r3, r7
 8001898:	2208      	movs	r2, #8
 800189a:	4619      	mov	r1, r3
 800189c:	480b      	ldr	r0, [pc, #44]	; (80018cc <MX_TIM1_Init+0x138>)
 800189e:	f004 ffd9 	bl	8006854 <HAL_TIM_IC_ConfigChannel>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80018a8:	f000 fb50 	bl	8001f4c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80018ac:	463b      	mov	r3, r7
 80018ae:	220c      	movs	r2, #12
 80018b0:	4619      	mov	r1, r3
 80018b2:	4806      	ldr	r0, [pc, #24]	; (80018cc <MX_TIM1_Init+0x138>)
 80018b4:	f004 ffce 	bl	8006854 <HAL_TIM_IC_ConfigChannel>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80018be:	f000 fb45 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018c2:	bf00      	nop
 80018c4:	3730      	adds	r7, #48	; 0x30
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	2000044c 	.word	0x2000044c
 80018d0:	40010000 	.word	0x40010000

080018d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08c      	sub	sp, #48	; 0x30
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80018da:	f107 031c 	add.w	r3, r7, #28
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ea:	f107 0310 	add.w	r3, r7, #16
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018f6:	463b      	mov	r3, r7
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001902:	4b32      	ldr	r3, [pc, #200]	; (80019cc <MX_TIM2_Init+0xf8>)
 8001904:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001908:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 215;
 800190a:	4b30      	ldr	r3, [pc, #192]	; (80019cc <MX_TIM2_Init+0xf8>)
 800190c:	22d7      	movs	r2, #215	; 0xd7
 800190e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001910:	4b2e      	ldr	r3, [pc, #184]	; (80019cc <MX_TIM2_Init+0xf8>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001916:	4b2d      	ldr	r3, [pc, #180]	; (80019cc <MX_TIM2_Init+0xf8>)
 8001918:	f242 720f 	movw	r2, #9999	; 0x270f
 800191c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191e:	4b2b      	ldr	r3, [pc, #172]	; (80019cc <MX_TIM2_Init+0xf8>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001924:	4b29      	ldr	r3, [pc, #164]	; (80019cc <MX_TIM2_Init+0xf8>)
 8001926:	2280      	movs	r2, #128	; 0x80
 8001928:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800192a:	4828      	ldr	r0, [pc, #160]	; (80019cc <MX_TIM2_Init+0xf8>)
 800192c:	f004 fdaa 	bl	8006484 <HAL_TIM_Base_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001936:	f000 fb09 	bl	8001f4c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800193a:	4824      	ldr	r0, [pc, #144]	; (80019cc <MX_TIM2_Init+0xf8>)
 800193c:	f004 fe68 	bl	8006610 <HAL_TIM_IC_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001946:	f000 fb01 	bl	8001f4c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800194a:	2304      	movs	r3, #4
 800194c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800194e:	2300      	movs	r3, #0
 8001950:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001952:	f107 031c 	add.w	r3, r7, #28
 8001956:	4619      	mov	r1, r3
 8001958:	481c      	ldr	r0, [pc, #112]	; (80019cc <MX_TIM2_Init+0xf8>)
 800195a:	f005 f92f 	bl	8006bbc <HAL_TIM_SlaveConfigSynchro>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001964:	f000 faf2 	bl	8001f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001968:	2300      	movs	r3, #0
 800196a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800196c:	2300      	movs	r3, #0
 800196e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	4619      	mov	r1, r3
 8001976:	4815      	ldr	r0, [pc, #84]	; (80019cc <MX_TIM2_Init+0xf8>)
 8001978:	f005 fefa 	bl	8007770 <HAL_TIMEx_MasterConfigSynchronization>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001982:	f000 fae3 	bl	8001f4c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001986:	2302      	movs	r3, #2
 8001988:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800198a:	2301      	movs	r3, #1
 800198c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800198e:	2300      	movs	r3, #0
 8001990:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001996:	463b      	mov	r3, r7
 8001998:	2200      	movs	r2, #0
 800199a:	4619      	mov	r1, r3
 800199c:	480b      	ldr	r0, [pc, #44]	; (80019cc <MX_TIM2_Init+0xf8>)
 800199e:	f004 ff59 	bl	8006854 <HAL_TIM_IC_ConfigChannel>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80019a8:	f000 fad0 	bl	8001f4c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80019ac:	463b      	mov	r3, r7
 80019ae:	220c      	movs	r2, #12
 80019b0:	4619      	mov	r1, r3
 80019b2:	4806      	ldr	r0, [pc, #24]	; (80019cc <MX_TIM2_Init+0xf8>)
 80019b4:	f004 ff4e 	bl	8006854 <HAL_TIM_IC_ConfigChannel>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80019be:	f000 fac5 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019c2:	bf00      	nop
 80019c4:	3730      	adds	r7, #48	; 0x30
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200004ec 	.word	0x200004ec

080019d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	; 0x28
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d6:	f107 031c 	add.w	r3, r7, #28
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019e2:	463b      	mov	r3, r7
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
 80019f0:	615a      	str	r2, [r3, #20]
 80019f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019f4:	4b32      	ldr	r3, [pc, #200]	; (8001ac0 <MX_TIM3_Init+0xf0>)
 80019f6:	4a33      	ldr	r2, [pc, #204]	; (8001ac4 <MX_TIM3_Init+0xf4>)
 80019f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019fa:	4b31      	ldr	r3, [pc, #196]	; (8001ac0 <MX_TIM3_Init+0xf0>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a00:	4b2f      	ldr	r3, [pc, #188]	; (8001ac0 <MX_TIM3_Init+0xf0>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 359;
 8001a06:	4b2e      	ldr	r3, [pc, #184]	; (8001ac0 <MX_TIM3_Init+0xf0>)
 8001a08:	f240 1267 	movw	r2, #359	; 0x167
 8001a0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a0e:	4b2c      	ldr	r3, [pc, #176]	; (8001ac0 <MX_TIM3_Init+0xf0>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a14:	4b2a      	ldr	r3, [pc, #168]	; (8001ac0 <MX_TIM3_Init+0xf0>)
 8001a16:	2280      	movs	r2, #128	; 0x80
 8001a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a1a:	4829      	ldr	r0, [pc, #164]	; (8001ac0 <MX_TIM3_Init+0xf0>)
 8001a1c:	f004 fd88 	bl	8006530 <HAL_TIM_PWM_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001a26:	f000 fa91 	bl	8001f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a32:	f107 031c 	add.w	r3, r7, #28
 8001a36:	4619      	mov	r1, r3
 8001a38:	4821      	ldr	r0, [pc, #132]	; (8001ac0 <MX_TIM3_Init+0xf0>)
 8001a3a:	f005 fe99 	bl	8007770 <HAL_TIMEx_MasterConfigSynchronization>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001a44:	f000 fa82 	bl	8001f4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a48:	2360      	movs	r3, #96	; 0x60
 8001a4a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a58:	463b      	mov	r3, r7
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4818      	ldr	r0, [pc, #96]	; (8001ac0 <MX_TIM3_Init+0xf0>)
 8001a60:	f004 ff94 	bl	800698c <HAL_TIM_PWM_ConfigChannel>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001a6a:	f000 fa6f 	bl	8001f4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a6e:	463b      	mov	r3, r7
 8001a70:	2204      	movs	r2, #4
 8001a72:	4619      	mov	r1, r3
 8001a74:	4812      	ldr	r0, [pc, #72]	; (8001ac0 <MX_TIM3_Init+0xf0>)
 8001a76:	f004 ff89 	bl	800698c <HAL_TIM_PWM_ConfigChannel>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001a80:	f000 fa64 	bl	8001f4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a84:	463b      	mov	r3, r7
 8001a86:	2208      	movs	r2, #8
 8001a88:	4619      	mov	r1, r3
 8001a8a:	480d      	ldr	r0, [pc, #52]	; (8001ac0 <MX_TIM3_Init+0xf0>)
 8001a8c:	f004 ff7e 	bl	800698c <HAL_TIM_PWM_ConfigChannel>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8001a96:	f000 fa59 	bl	8001f4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a9a:	463b      	mov	r3, r7
 8001a9c:	220c      	movs	r2, #12
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4807      	ldr	r0, [pc, #28]	; (8001ac0 <MX_TIM3_Init+0xf0>)
 8001aa2:	f004 ff73 	bl	800698c <HAL_TIM_PWM_ConfigChannel>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8001aac:	f000 fa4e 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ab0:	4803      	ldr	r0, [pc, #12]	; (8001ac0 <MX_TIM3_Init+0xf0>)
 8001ab2:	f000 fd3d 	bl	8002530 <HAL_TIM_MspPostInit>

}
 8001ab6:	bf00      	nop
 8001ab8:	3728      	adds	r7, #40	; 0x28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	200002c8 	.word	0x200002c8
 8001ac4:	40000400 	.word	0x40000400

08001ac8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	; 0x28
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ace:	f107 031c 	add.w	r3, r7, #28
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ada:	463b      	mov	r3, r7
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
 8001ae8:	615a      	str	r2, [r3, #20]
 8001aea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001aec:	4b2c      	ldr	r3, [pc, #176]	; (8001ba0 <MX_TIM4_Init+0xd8>)
 8001aee:	4a2d      	ldr	r2, [pc, #180]	; (8001ba4 <MX_TIM4_Init+0xdc>)
 8001af0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001af2:	4b2b      	ldr	r3, [pc, #172]	; (8001ba0 <MX_TIM4_Init+0xd8>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af8:	4b29      	ldr	r3, [pc, #164]	; (8001ba0 <MX_TIM4_Init+0xd8>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 359;
 8001afe:	4b28      	ldr	r3, [pc, #160]	; (8001ba0 <MX_TIM4_Init+0xd8>)
 8001b00:	f240 1267 	movw	r2, #359	; 0x167
 8001b04:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b06:	4b26      	ldr	r3, [pc, #152]	; (8001ba0 <MX_TIM4_Init+0xd8>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b0c:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <MX_TIM4_Init+0xd8>)
 8001b0e:	2280      	movs	r2, #128	; 0x80
 8001b10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001b12:	4823      	ldr	r0, [pc, #140]	; (8001ba0 <MX_TIM4_Init+0xd8>)
 8001b14:	f004 fce1 	bl	80064da <HAL_TIM_OC_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001b1e:	f000 fa15 	bl	8001f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b2a:	f107 031c 	add.w	r3, r7, #28
 8001b2e:	4619      	mov	r1, r3
 8001b30:	481b      	ldr	r0, [pc, #108]	; (8001ba0 <MX_TIM4_Init+0xd8>)
 8001b32:	f005 fe1d 	bl	8007770 <HAL_TIMEx_MasterConfigSynchronization>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001b3c:	f000 fa06 	bl	8001f4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001b40:	2310      	movs	r3, #16
 8001b42:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 8001b44:	2301      	movs	r3, #1
 8001b46:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b50:	463b      	mov	r3, r7
 8001b52:	2200      	movs	r2, #0
 8001b54:	4619      	mov	r1, r3
 8001b56:	4812      	ldr	r0, [pc, #72]	; (8001ba0 <MX_TIM4_Init+0xd8>)
 8001b58:	f004 fdfe 	bl	8006758 <HAL_TIM_OC_ConfigChannel>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001b62:	f000 f9f3 	bl	8001f4c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b66:	463b      	mov	r3, r7
 8001b68:	2204      	movs	r2, #4
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	480c      	ldr	r0, [pc, #48]	; (8001ba0 <MX_TIM4_Init+0xd8>)
 8001b6e:	f004 fdf3 	bl	8006758 <HAL_TIM_OC_ConfigChannel>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001b78:	f000 f9e8 	bl	8001f4c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b7c:	463b      	mov	r3, r7
 8001b7e:	2208      	movs	r2, #8
 8001b80:	4619      	mov	r1, r3
 8001b82:	4807      	ldr	r0, [pc, #28]	; (8001ba0 <MX_TIM4_Init+0xd8>)
 8001b84:	f004 fde8 	bl	8006758 <HAL_TIM_OC_ConfigChannel>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8001b8e:	f000 f9dd 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b92:	4803      	ldr	r0, [pc, #12]	; (8001ba0 <MX_TIM4_Init+0xd8>)
 8001b94:	f000 fccc 	bl	8002530 <HAL_TIM_MspPostInit>

}
 8001b98:	bf00      	nop
 8001b9a:	3728      	adds	r7, #40	; 0x28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	200000fc 	.word	0x200000fc
 8001ba4:	40000800 	.word	0x40000800

08001ba8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bae:	f107 031c 	add.w	r3, r7, #28
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bba:	463b      	mov	r3, r7
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
 8001bc8:	615a      	str	r2, [r3, #20]
 8001bca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001bcc:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <MX_TIM5_Init+0xac>)
 8001bce:	4a22      	ldr	r2, [pc, #136]	; (8001c58 <MX_TIM5_Init+0xb0>)
 8001bd0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001bd2:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <MX_TIM5_Init+0xac>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd8:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <MX_TIM5_Init+0xac>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 359;
 8001bde:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <MX_TIM5_Init+0xac>)
 8001be0:	f240 1267 	movw	r2, #359	; 0x167
 8001be4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be6:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <MX_TIM5_Init+0xac>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bec:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <MX_TIM5_Init+0xac>)
 8001bee:	2280      	movs	r2, #128	; 0x80
 8001bf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8001bf2:	4818      	ldr	r0, [pc, #96]	; (8001c54 <MX_TIM5_Init+0xac>)
 8001bf4:	f004 fc71 	bl	80064da <HAL_TIM_OC_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001bfe:	f000 f9a5 	bl	8001f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c0a:	f107 031c 	add.w	r3, r7, #28
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4810      	ldr	r0, [pc, #64]	; (8001c54 <MX_TIM5_Init+0xac>)
 8001c12:	f005 fdad 	bl	8007770 <HAL_TIMEx_MasterConfigSynchronization>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001c1c:	f000 f996 	bl	8001f4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001c20:	2310      	movs	r3, #16
 8001c22:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 8001c24:	2301      	movs	r3, #1
 8001c26:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c30:	463b      	mov	r3, r7
 8001c32:	2204      	movs	r2, #4
 8001c34:	4619      	mov	r1, r3
 8001c36:	4807      	ldr	r0, [pc, #28]	; (8001c54 <MX_TIM5_Init+0xac>)
 8001c38:	f004 fd8e 	bl	8006758 <HAL_TIM_OC_ConfigChannel>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001c42:	f000 f983 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001c46:	4803      	ldr	r0, [pc, #12]	; (8001c54 <MX_TIM5_Init+0xac>)
 8001c48:	f000 fc72 	bl	8002530 <HAL_TIM_MspPostInit>

}
 8001c4c:	bf00      	nop
 8001c4e:	3728      	adds	r7, #40	; 0x28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000288 	.word	0x20000288
 8001c58:	40000c00 	.word	0x40000c00

08001c5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c60:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <MX_USART3_UART_Init+0x58>)
 8001c62:	4a15      	ldr	r2, [pc, #84]	; (8001cb8 <MX_USART3_UART_Init+0x5c>)
 8001c64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c66:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <MX_USART3_UART_Init+0x58>)
 8001c68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <MX_USART3_UART_Init+0x58>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c74:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <MX_USART3_UART_Init+0x58>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <MX_USART3_UART_Init+0x58>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <MX_USART3_UART_Init+0x58>)
 8001c82:	220c      	movs	r2, #12
 8001c84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <MX_USART3_UART_Init+0x58>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c8c:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <MX_USART3_UART_Init+0x58>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c92:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <MX_USART3_UART_Init+0x58>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <MX_USART3_UART_Init+0x58>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c9e:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <MX_USART3_UART_Init+0x58>)
 8001ca0:	f005 fdf4 	bl	800788c <HAL_UART_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001caa:	f000 f94f 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	2000013c 	.word	0x2000013c
 8001cb8:	40004800 	.word	0x40004800

08001cbc <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <MX_DMA_Init+0x88>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a1f      	ldr	r2, [pc, #124]	; (8001d54 <MX_DMA_Init+0x88>)
 8001cd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <MX_DMA_Init+0x88>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce6:	607b      	str	r3, [r7, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001cea:	2200      	movs	r2, #0
 8001cec:	2100      	movs	r1, #0
 8001cee:	200b      	movs	r0, #11
 8001cf0:	f001 f9d3 	bl	800309a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001cf4:	200b      	movs	r0, #11
 8001cf6:	f001 f9ec 	bl	80030d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	200e      	movs	r0, #14
 8001d00:	f001 f9cb 	bl	800309a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001d04:	200e      	movs	r0, #14
 8001d06:	f001 f9e4 	bl	80030d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	200f      	movs	r0, #15
 8001d10:	f001 f9c3 	bl	800309a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001d14:	200f      	movs	r0, #15
 8001d16:	f001 f9dc 	bl	80030d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	2010      	movs	r0, #16
 8001d20:	f001 f9bb 	bl	800309a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d24:	2010      	movs	r0, #16
 8001d26:	f001 f9d4 	bl	80030d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	2011      	movs	r0, #17
 8001d30:	f001 f9b3 	bl	800309a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001d34:	2011      	movs	r0, #17
 8001d36:	f001 f9cc 	bl	80030d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	202f      	movs	r0, #47	; 0x2f
 8001d40:	f001 f9ab 	bl	800309a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001d44:	202f      	movs	r0, #47	; 0x2f
 8001d46:	f001 f9c4 	bl	80030d2 <HAL_NVIC_EnableIRQ>

}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40023800 	.word	0x40023800

08001d58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08e      	sub	sp, #56	; 0x38
 8001d5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
 8001d6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6e:	4b70      	ldr	r3, [pc, #448]	; (8001f30 <MX_GPIO_Init+0x1d8>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a6f      	ldr	r2, [pc, #444]	; (8001f30 <MX_GPIO_Init+0x1d8>)
 8001d74:	f043 0304 	orr.w	r3, r3, #4
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b6d      	ldr	r3, [pc, #436]	; (8001f30 <MX_GPIO_Init+0x1d8>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	623b      	str	r3, [r7, #32]
 8001d84:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d86:	4b6a      	ldr	r3, [pc, #424]	; (8001f30 <MX_GPIO_Init+0x1d8>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a69      	ldr	r2, [pc, #420]	; (8001f30 <MX_GPIO_Init+0x1d8>)
 8001d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b67      	ldr	r3, [pc, #412]	; (8001f30 <MX_GPIO_Init+0x1d8>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d9a:	61fb      	str	r3, [r7, #28]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9e:	4b64      	ldr	r3, [pc, #400]	; (8001f30 <MX_GPIO_Init+0x1d8>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a63      	ldr	r2, [pc, #396]	; (8001f30 <MX_GPIO_Init+0x1d8>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b61      	ldr	r3, [pc, #388]	; (8001f30 <MX_GPIO_Init+0x1d8>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	61bb      	str	r3, [r7, #24]
 8001db4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db6:	4b5e      	ldr	r3, [pc, #376]	; (8001f30 <MX_GPIO_Init+0x1d8>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a5d      	ldr	r2, [pc, #372]	; (8001f30 <MX_GPIO_Init+0x1d8>)
 8001dbc:	f043 0302 	orr.w	r3, r3, #2
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b5b      	ldr	r3, [pc, #364]	; (8001f30 <MX_GPIO_Init+0x1d8>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dce:	4b58      	ldr	r3, [pc, #352]	; (8001f30 <MX_GPIO_Init+0x1d8>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a57      	ldr	r2, [pc, #348]	; (8001f30 <MX_GPIO_Init+0x1d8>)
 8001dd4:	f043 0320 	orr.w	r3, r3, #32
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b55      	ldr	r3, [pc, #340]	; (8001f30 <MX_GPIO_Init+0x1d8>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0320 	and.w	r3, r3, #32
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001de6:	4b52      	ldr	r3, [pc, #328]	; (8001f30 <MX_GPIO_Init+0x1d8>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a51      	ldr	r2, [pc, #324]	; (8001f30 <MX_GPIO_Init+0x1d8>)
 8001dec:	f043 0310 	orr.w	r3, r3, #16
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b4f      	ldr	r3, [pc, #316]	; (8001f30 <MX_GPIO_Init+0x1d8>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0310 	and.w	r3, r3, #16
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfe:	4b4c      	ldr	r3, [pc, #304]	; (8001f30 <MX_GPIO_Init+0x1d8>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a4b      	ldr	r2, [pc, #300]	; (8001f30 <MX_GPIO_Init+0x1d8>)
 8001e04:	f043 0308 	orr.w	r3, r3, #8
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b49      	ldr	r3, [pc, #292]	; (8001f30 <MX_GPIO_Init+0x1d8>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e16:	4b46      	ldr	r3, [pc, #280]	; (8001f30 <MX_GPIO_Init+0x1d8>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	4a45      	ldr	r2, [pc, #276]	; (8001f30 <MX_GPIO_Init+0x1d8>)
 8001e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e20:	6313      	str	r3, [r2, #48]	; 0x30
 8001e22:	4b43      	ldr	r3, [pc, #268]	; (8001f30 <MX_GPIO_Init+0x1d8>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e2a:	607b      	str	r3, [r7, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001e34:	483f      	ldr	r0, [pc, #252]	; (8001f34 <MX_GPIO_Init+0x1dc>)
 8001e36:	f001 fef9 	bl	8003c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2140      	movs	r1, #64	; 0x40
 8001e3e:	483e      	ldr	r0, [pc, #248]	; (8001f38 <MX_GPIO_Init+0x1e0>)
 8001e40:	f001 fef4 	bl	8003c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001e44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e4a:	4b3c      	ldr	r3, [pc, #240]	; (8001f3c <MX_GPIO_Init+0x1e4>)
 8001e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e56:	4619      	mov	r1, r3
 8001e58:	4839      	ldr	r0, [pc, #228]	; (8001f40 <MX_GPIO_Init+0x1e8>)
 8001e5a:	f001 fd4d 	bl	80038f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001e5e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e64:	2300      	movs	r3, #0
 8001e66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e70:	4619      	mov	r1, r3
 8001e72:	4834      	ldr	r0, [pc, #208]	; (8001f44 <MX_GPIO_Init+0x1ec>)
 8001e74:	f001 fd40 	bl	80038f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001e78:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	2300      	movs	r3, #0
 8001e88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4828      	ldr	r0, [pc, #160]	; (8001f34 <MX_GPIO_Init+0x1dc>)
 8001e92:	f001 fd31 	bl	80038f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e96:	2304      	movs	r3, #4
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ea6:	230c      	movs	r3, #12
 8001ea8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4821      	ldr	r0, [pc, #132]	; (8001f38 <MX_GPIO_Init+0x1e0>)
 8001eb2:	f001 fd21 	bl	80038f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001eb6:	2340      	movs	r3, #64	; 0x40
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eca:	4619      	mov	r1, r3
 8001ecc:	481a      	ldr	r0, [pc, #104]	; (8001f38 <MX_GPIO_Init+0x1e0>)
 8001ece:	f001 fd13 	bl	80038f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001ed2:	2380      	movs	r3, #128	; 0x80
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4814      	ldr	r0, [pc, #80]	; (8001f38 <MX_GPIO_Init+0x1e0>)
 8001ee6:	f001 fd07 	bl	80038f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin PA10 USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|GPIO_PIN_10|USB_DM_Pin|USB_DP_Pin;
 8001eea:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001efc:	230a      	movs	r3, #10
 8001efe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f04:	4619      	mov	r1, r3
 8001f06:	4810      	ldr	r0, [pc, #64]	; (8001f48 <MX_GPIO_Init+0x1f0>)
 8001f08:	f001 fcf6 	bl	80038f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001f0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f12:	2300      	movs	r3, #0
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4809      	ldr	r0, [pc, #36]	; (8001f48 <MX_GPIO_Init+0x1f0>)
 8001f22:	f001 fce9 	bl	80038f8 <HAL_GPIO_Init>

}
 8001f26:	bf00      	nop
 8001f28:	3738      	adds	r7, #56	; 0x38
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40020400 	.word	0x40020400
 8001f38:	40021800 	.word	0x40021800
 8001f3c:	10110000 	.word	0x10110000
 8001f40:	40020800 	.word	0x40020800
 8001f44:	40021400 	.word	0x40021400
 8001f48:	40020000 	.word	0x40020000

08001f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
	...

08001f5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f62:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <HAL_MspInit+0x44>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	4a0e      	ldr	r2, [pc, #56]	; (8001fa0 <HAL_MspInit+0x44>)
 8001f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6e:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <HAL_MspInit+0x44>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f76:	607b      	str	r3, [r7, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7a:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <HAL_MspInit+0x44>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	4a08      	ldr	r2, [pc, #32]	; (8001fa0 <HAL_MspInit+0x44>)
 8001f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f84:	6453      	str	r3, [r2, #68]	; 0x44
 8001f86:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_MspInit+0x44>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f8e:	603b      	str	r3, [r7, #0]
 8001f90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40023800 	.word	0x40023800

08001fa4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08a      	sub	sp, #40	; 0x28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a15      	ldr	r2, [pc, #84]	; (8002018 <HAL_ADC_MspInit+0x74>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d123      	bne.n	800200e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fc6:	4b15      	ldr	r3, [pc, #84]	; (800201c <HAL_ADC_MspInit+0x78>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	4a14      	ldr	r2, [pc, #80]	; (800201c <HAL_ADC_MspInit+0x78>)
 8001fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd2:	4b12      	ldr	r3, [pc, #72]	; (800201c <HAL_ADC_MspInit+0x78>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fde:	4b0f      	ldr	r3, [pc, #60]	; (800201c <HAL_ADC_MspInit+0x78>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	4a0e      	ldr	r2, [pc, #56]	; (800201c <HAL_ADC_MspInit+0x78>)
 8001fe4:	f043 0302 	orr.w	r3, r3, #2
 8001fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fea:	4b0c      	ldr	r3, [pc, #48]	; (800201c <HAL_ADC_MspInit+0x78>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_THROTTLE_CONTROL_Pin;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_THROTTLE_CONTROL_GPIO_Port, &GPIO_InitStruct);
 8002002:	f107 0314 	add.w	r3, r7, #20
 8002006:	4619      	mov	r1, r3
 8002008:	4805      	ldr	r0, [pc, #20]	; (8002020 <HAL_ADC_MspInit+0x7c>)
 800200a:	f001 fc75 	bl	80038f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800200e:	bf00      	nop
 8002010:	3728      	adds	r7, #40	; 0x28
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40012000 	.word	0x40012000
 800201c:	40023800 	.word	0x40023800
 8002020:	40020400 	.word	0x40020400

08002024 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08a      	sub	sp, #40	; 0x28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a53      	ldr	r2, [pc, #332]	; (8002190 <HAL_I2C_MspInit+0x16c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	f040 809f 	bne.w	8002186 <HAL_I2C_MspInit+0x162>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002048:	4b52      	ldr	r3, [pc, #328]	; (8002194 <HAL_I2C_MspInit+0x170>)
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204c:	4a51      	ldr	r2, [pc, #324]	; (8002194 <HAL_I2C_MspInit+0x170>)
 800204e:	f043 0302 	orr.w	r3, r3, #2
 8002052:	6313      	str	r3, [r2, #48]	; 0x30
 8002054:	4b4f      	ldr	r3, [pc, #316]	; (8002194 <HAL_I2C_MspInit+0x170>)
 8002056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	613b      	str	r3, [r7, #16]
 800205e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002060:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002066:	2312      	movs	r3, #18
 8002068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800206a:	2301      	movs	r3, #1
 800206c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206e:	2303      	movs	r3, #3
 8002070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002072:	2304      	movs	r3, #4
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002076:	f107 0314 	add.w	r3, r7, #20
 800207a:	4619      	mov	r1, r3
 800207c:	4846      	ldr	r0, [pc, #280]	; (8002198 <HAL_I2C_MspInit+0x174>)
 800207e:	f001 fc3b 	bl	80038f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002082:	4b44      	ldr	r3, [pc, #272]	; (8002194 <HAL_I2C_MspInit+0x170>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	4a43      	ldr	r2, [pc, #268]	; (8002194 <HAL_I2C_MspInit+0x170>)
 8002088:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800208c:	6413      	str	r3, [r2, #64]	; 0x40
 800208e:	4b41      	ldr	r3, [pc, #260]	; (8002194 <HAL_I2C_MspInit+0x170>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 800209a:	4b40      	ldr	r3, [pc, #256]	; (800219c <HAL_I2C_MspInit+0x178>)
 800209c:	4a40      	ldr	r2, [pc, #256]	; (80021a0 <HAL_I2C_MspInit+0x17c>)
 800209e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80020a0:	4b3e      	ldr	r3, [pc, #248]	; (800219c <HAL_I2C_MspInit+0x178>)
 80020a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020a6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020a8:	4b3c      	ldr	r3, [pc, #240]	; (800219c <HAL_I2C_MspInit+0x178>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020ae:	4b3b      	ldr	r3, [pc, #236]	; (800219c <HAL_I2C_MspInit+0x178>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020b4:	4b39      	ldr	r3, [pc, #228]	; (800219c <HAL_I2C_MspInit+0x178>)
 80020b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020ba:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020bc:	4b37      	ldr	r3, [pc, #220]	; (800219c <HAL_I2C_MspInit+0x178>)
 80020be:	2200      	movs	r2, #0
 80020c0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020c2:	4b36      	ldr	r3, [pc, #216]	; (800219c <HAL_I2C_MspInit+0x178>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80020c8:	4b34      	ldr	r3, [pc, #208]	; (800219c <HAL_I2C_MspInit+0x178>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80020ce:	4b33      	ldr	r3, [pc, #204]	; (800219c <HAL_I2C_MspInit+0x178>)
 80020d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020d4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80020d6:	4b31      	ldr	r3, [pc, #196]	; (800219c <HAL_I2C_MspInit+0x178>)
 80020d8:	2204      	movs	r2, #4
 80020da:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80020dc:	4b2f      	ldr	r3, [pc, #188]	; (800219c <HAL_I2C_MspInit+0x178>)
 80020de:	2203      	movs	r2, #3
 80020e0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80020e2:	4b2e      	ldr	r3, [pc, #184]	; (800219c <HAL_I2C_MspInit+0x178>)
 80020e4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80020e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80020ea:	4b2c      	ldr	r3, [pc, #176]	; (800219c <HAL_I2C_MspInit+0x178>)
 80020ec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80020f0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80020f2:	482a      	ldr	r0, [pc, #168]	; (800219c <HAL_I2C_MspInit+0x178>)
 80020f4:	f001 f808 	bl	8003108 <HAL_DMA_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_I2C_MspInit+0xde>
    {
      Error_Handler();
 80020fe:	f7ff ff25 	bl	8001f4c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a25      	ldr	r2, [pc, #148]	; (800219c <HAL_I2C_MspInit+0x178>)
 8002106:	63da      	str	r2, [r3, #60]	; 0x3c
 8002108:	4a24      	ldr	r2, [pc, #144]	; (800219c <HAL_I2C_MspInit+0x178>)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800210e:	4b25      	ldr	r3, [pc, #148]	; (80021a4 <HAL_I2C_MspInit+0x180>)
 8002110:	4a25      	ldr	r2, [pc, #148]	; (80021a8 <HAL_I2C_MspInit+0x184>)
 8002112:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8002114:	4b23      	ldr	r3, [pc, #140]	; (80021a4 <HAL_I2C_MspInit+0x180>)
 8002116:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800211a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800211c:	4b21      	ldr	r3, [pc, #132]	; (80021a4 <HAL_I2C_MspInit+0x180>)
 800211e:	2240      	movs	r2, #64	; 0x40
 8002120:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002122:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <HAL_I2C_MspInit+0x180>)
 8002124:	2200      	movs	r2, #0
 8002126:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002128:	4b1e      	ldr	r3, [pc, #120]	; (80021a4 <HAL_I2C_MspInit+0x180>)
 800212a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800212e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002130:	4b1c      	ldr	r3, [pc, #112]	; (80021a4 <HAL_I2C_MspInit+0x180>)
 8002132:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002136:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002138:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <HAL_I2C_MspInit+0x180>)
 800213a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800213e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002140:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <HAL_I2C_MspInit+0x180>)
 8002142:	2200      	movs	r2, #0
 8002144:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002146:	4b17      	ldr	r3, [pc, #92]	; (80021a4 <HAL_I2C_MspInit+0x180>)
 8002148:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800214c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800214e:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <HAL_I2C_MspInit+0x180>)
 8002150:	2204      	movs	r2, #4
 8002152:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002154:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <HAL_I2C_MspInit+0x180>)
 8002156:	2203      	movs	r2, #3
 8002158:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800215a:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <HAL_I2C_MspInit+0x180>)
 800215c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002160:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002162:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <HAL_I2C_MspInit+0x180>)
 8002164:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002168:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800216a:	480e      	ldr	r0, [pc, #56]	; (80021a4 <HAL_I2C_MspInit+0x180>)
 800216c:	f000 ffcc 	bl	8003108 <HAL_DMA_Init>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_I2C_MspInit+0x156>
    {
      Error_Handler();
 8002176:	f7ff fee9 	bl	8001f4c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a09      	ldr	r2, [pc, #36]	; (80021a4 <HAL_I2C_MspInit+0x180>)
 800217e:	639a      	str	r2, [r3, #56]	; 0x38
 8002180:	4a08      	ldr	r2, [pc, #32]	; (80021a4 <HAL_I2C_MspInit+0x180>)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002186:	bf00      	nop
 8002188:	3728      	adds	r7, #40	; 0x28
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40005400 	.word	0x40005400
 8002194:	40023800 	.word	0x40023800
 8002198:	40020400 	.word	0x40020400
 800219c:	2000048c 	.word	0x2000048c
 80021a0:	40026088 	.word	0x40026088
 80021a4:	200001cc 	.word	0x200001cc
 80021a8:	400260a0 	.word	0x400260a0

080021ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08c      	sub	sp, #48	; 0x30
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b4:	f107 031c 	add.w	r3, r7, #28
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a2e      	ldr	r2, [pc, #184]	; (8002284 <HAL_TIM_Base_MspInit+0xd8>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d129      	bne.n	8002222 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021ce:	4b2e      	ldr	r3, [pc, #184]	; (8002288 <HAL_TIM_Base_MspInit+0xdc>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	4a2d      	ldr	r2, [pc, #180]	; (8002288 <HAL_TIM_Base_MspInit+0xdc>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	6453      	str	r3, [r2, #68]	; 0x44
 80021da:	4b2b      	ldr	r3, [pc, #172]	; (8002288 <HAL_TIM_Base_MspInit+0xdc>)
 80021dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	61bb      	str	r3, [r7, #24]
 80021e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021e6:	4b28      	ldr	r3, [pc, #160]	; (8002288 <HAL_TIM_Base_MspInit+0xdc>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	4a27      	ldr	r2, [pc, #156]	; (8002288 <HAL_TIM_Base_MspInit+0xdc>)
 80021ec:	f043 0310 	orr.w	r3, r3, #16
 80021f0:	6313      	str	r3, [r2, #48]	; 0x30
 80021f2:	4b25      	ldr	r3, [pc, #148]	; (8002288 <HAL_TIM_Base_MspInit+0xdc>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	697b      	ldr	r3, [r7, #20]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13
 80021fe:	f44f 43d5 	mov.w	r3, #27264	; 0x6a80
 8002202:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002204:	2302      	movs	r3, #2
 8002206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220c:	2300      	movs	r3, #0
 800220e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002210:	2301      	movs	r3, #1
 8002212:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002214:	f107 031c 	add.w	r3, r7, #28
 8002218:	4619      	mov	r1, r3
 800221a:	481c      	ldr	r0, [pc, #112]	; (800228c <HAL_TIM_Base_MspInit+0xe0>)
 800221c:	f001 fb6c 	bl	80038f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002220:	e02c      	b.n	800227c <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM2)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800222a:	d127      	bne.n	800227c <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800222c:	4b16      	ldr	r3, [pc, #88]	; (8002288 <HAL_TIM_Base_MspInit+0xdc>)
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	4a15      	ldr	r2, [pc, #84]	; (8002288 <HAL_TIM_Base_MspInit+0xdc>)
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	6413      	str	r3, [r2, #64]	; 0x40
 8002238:	4b13      	ldr	r3, [pc, #76]	; (8002288 <HAL_TIM_Base_MspInit+0xdc>)
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002244:	4b10      	ldr	r3, [pc, #64]	; (8002288 <HAL_TIM_Base_MspInit+0xdc>)
 8002246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002248:	4a0f      	ldr	r2, [pc, #60]	; (8002288 <HAL_TIM_Base_MspInit+0xdc>)
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	6313      	str	r3, [r2, #48]	; 0x30
 8002250:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <HAL_TIM_Base_MspInit+0xdc>)
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800225c:	2309      	movs	r3, #9
 800225e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002260:	2302      	movs	r3, #2
 8002262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002268:	2300      	movs	r3, #0
 800226a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800226c:	2301      	movs	r3, #1
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002270:	f107 031c 	add.w	r3, r7, #28
 8002274:	4619      	mov	r1, r3
 8002276:	4806      	ldr	r0, [pc, #24]	; (8002290 <HAL_TIM_Base_MspInit+0xe4>)
 8002278:	f001 fb3e 	bl	80038f8 <HAL_GPIO_Init>
}
 800227c:	bf00      	nop
 800227e:	3730      	adds	r7, #48	; 0x30
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40010000 	.word	0x40010000
 8002288:	40023800 	.word	0x40023800
 800228c:	40021000 	.word	0x40021000
 8002290:	40020000 	.word	0x40020000

08002294 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <HAL_TIM_PWM_MspInit+0x38>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d10b      	bne.n	80022be <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022a6:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	4a09      	ldr	r2, [pc, #36]	; (80022d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80022ac:	f043 0302 	orr.w	r3, r3, #2
 80022b0:	6413      	str	r3, [r2, #64]	; 0x40
 80022b2:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40000400 	.word	0x40000400
 80022d0:	40023800 	.word	0x40023800

080022d4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a88      	ldr	r2, [pc, #544]	; (8002504 <HAL_TIM_OC_MspInit+0x230>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	f040 80be 	bne.w	8002464 <HAL_TIM_OC_MspInit+0x190>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022e8:	4b87      	ldr	r3, [pc, #540]	; (8002508 <HAL_TIM_OC_MspInit+0x234>)
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	4a86      	ldr	r2, [pc, #536]	; (8002508 <HAL_TIM_OC_MspInit+0x234>)
 80022ee:	f043 0304 	orr.w	r3, r3, #4
 80022f2:	6413      	str	r3, [r2, #64]	; 0x40
 80022f4:	4b84      	ldr	r3, [pc, #528]	; (8002508 <HAL_TIM_OC_MspInit+0x234>)
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8002300:	4b82      	ldr	r3, [pc, #520]	; (800250c <HAL_TIM_OC_MspInit+0x238>)
 8002302:	4a83      	ldr	r2, [pc, #524]	; (8002510 <HAL_TIM_OC_MspInit+0x23c>)
 8002304:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8002306:	4b81      	ldr	r3, [pc, #516]	; (800250c <HAL_TIM_OC_MspInit+0x238>)
 8002308:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800230c:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800230e:	4b7f      	ldr	r3, [pc, #508]	; (800250c <HAL_TIM_OC_MspInit+0x238>)
 8002310:	2240      	movs	r2, #64	; 0x40
 8002312:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002314:	4b7d      	ldr	r3, [pc, #500]	; (800250c <HAL_TIM_OC_MspInit+0x238>)
 8002316:	2200      	movs	r2, #0
 8002318:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800231a:	4b7c      	ldr	r3, [pc, #496]	; (800250c <HAL_TIM_OC_MspInit+0x238>)
 800231c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002320:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002322:	4b7a      	ldr	r3, [pc, #488]	; (800250c <HAL_TIM_OC_MspInit+0x238>)
 8002324:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002328:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800232a:	4b78      	ldr	r3, [pc, #480]	; (800250c <HAL_TIM_OC_MspInit+0x238>)
 800232c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002330:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 8002332:	4b76      	ldr	r3, [pc, #472]	; (800250c <HAL_TIM_OC_MspInit+0x238>)
 8002334:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002338:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800233a:	4b74      	ldr	r3, [pc, #464]	; (800250c <HAL_TIM_OC_MspInit+0x238>)
 800233c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002340:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002342:	4b72      	ldr	r3, [pc, #456]	; (800250c <HAL_TIM_OC_MspInit+0x238>)
 8002344:	2204      	movs	r2, #4
 8002346:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim4_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002348:	4b70      	ldr	r3, [pc, #448]	; (800250c <HAL_TIM_OC_MspInit+0x238>)
 800234a:	2203      	movs	r2, #3
 800234c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim4_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 800234e:	4b6f      	ldr	r3, [pc, #444]	; (800250c <HAL_TIM_OC_MspInit+0x238>)
 8002350:	2200      	movs	r2, #0
 8002352:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim4_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002354:	4b6d      	ldr	r3, [pc, #436]	; (800250c <HAL_TIM_OC_MspInit+0x238>)
 8002356:	2200      	movs	r2, #0
 8002358:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 800235a:	486c      	ldr	r0, [pc, #432]	; (800250c <HAL_TIM_OC_MspInit+0x238>)
 800235c:	f000 fed4 	bl	8003108 <HAL_DMA_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_TIM_OC_MspInit+0x96>
    {
      Error_Handler();
 8002366:	f7ff fdf1 	bl	8001f4c <Error_Handler>
    }

    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a67      	ldr	r2, [pc, #412]	; (800250c <HAL_TIM_OC_MspInit+0x238>)
 800236e:	625a      	str	r2, [r3, #36]	; 0x24
 8002370:	4a66      	ldr	r2, [pc, #408]	; (800250c <HAL_TIM_OC_MspInit+0x238>)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM4_CH2 Init */
    hdma_tim4_ch2.Instance = DMA1_Stream3;
 8002376:	4b67      	ldr	r3, [pc, #412]	; (8002514 <HAL_TIM_OC_MspInit+0x240>)
 8002378:	4a67      	ldr	r2, [pc, #412]	; (8002518 <HAL_TIM_OC_MspInit+0x244>)
 800237a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Channel = DMA_CHANNEL_2;
 800237c:	4b65      	ldr	r3, [pc, #404]	; (8002514 <HAL_TIM_OC_MspInit+0x240>)
 800237e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002382:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002384:	4b63      	ldr	r3, [pc, #396]	; (8002514 <HAL_TIM_OC_MspInit+0x240>)
 8002386:	2240      	movs	r2, #64	; 0x40
 8002388:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800238a:	4b62      	ldr	r3, [pc, #392]	; (8002514 <HAL_TIM_OC_MspInit+0x240>)
 800238c:	2200      	movs	r2, #0
 800238e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002390:	4b60      	ldr	r3, [pc, #384]	; (8002514 <HAL_TIM_OC_MspInit+0x240>)
 8002392:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002396:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002398:	4b5e      	ldr	r3, [pc, #376]	; (8002514 <HAL_TIM_OC_MspInit+0x240>)
 800239a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800239e:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80023a0:	4b5c      	ldr	r3, [pc, #368]	; (8002514 <HAL_TIM_OC_MspInit+0x240>)
 80023a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023a6:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_CIRCULAR;
 80023a8:	4b5a      	ldr	r3, [pc, #360]	; (8002514 <HAL_TIM_OC_MspInit+0x240>)
 80023aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023ae:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80023b0:	4b58      	ldr	r3, [pc, #352]	; (8002514 <HAL_TIM_OC_MspInit+0x240>)
 80023b2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80023b6:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80023b8:	4b56      	ldr	r3, [pc, #344]	; (8002514 <HAL_TIM_OC_MspInit+0x240>)
 80023ba:	2204      	movs	r2, #4
 80023bc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim4_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80023be:	4b55      	ldr	r3, [pc, #340]	; (8002514 <HAL_TIM_OC_MspInit+0x240>)
 80023c0:	2203      	movs	r2, #3
 80023c2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim4_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 80023c4:	4b53      	ldr	r3, [pc, #332]	; (8002514 <HAL_TIM_OC_MspInit+0x240>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim4_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80023ca:	4b52      	ldr	r3, [pc, #328]	; (8002514 <HAL_TIM_OC_MspInit+0x240>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 80023d0:	4850      	ldr	r0, [pc, #320]	; (8002514 <HAL_TIM_OC_MspInit+0x240>)
 80023d2:	f000 fe99 	bl	8003108 <HAL_DMA_Init>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_TIM_OC_MspInit+0x10c>
    {
      Error_Handler();
 80023dc:	f7ff fdb6 	bl	8001f4c <Error_Handler>
    }

    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a4c      	ldr	r2, [pc, #304]	; (8002514 <HAL_TIM_OC_MspInit+0x240>)
 80023e4:	629a      	str	r2, [r3, #40]	; 0x28
 80023e6:	4a4b      	ldr	r2, [pc, #300]	; (8002514 <HAL_TIM_OC_MspInit+0x240>)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 80023ec:	4b4b      	ldr	r3, [pc, #300]	; (800251c <HAL_TIM_OC_MspInit+0x248>)
 80023ee:	4a4c      	ldr	r2, [pc, #304]	; (8002520 <HAL_TIM_OC_MspInit+0x24c>)
 80023f0:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 80023f2:	4b4a      	ldr	r3, [pc, #296]	; (800251c <HAL_TIM_OC_MspInit+0x248>)
 80023f4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023f8:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023fa:	4b48      	ldr	r3, [pc, #288]	; (800251c <HAL_TIM_OC_MspInit+0x248>)
 80023fc:	2240      	movs	r2, #64	; 0x40
 80023fe:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002400:	4b46      	ldr	r3, [pc, #280]	; (800251c <HAL_TIM_OC_MspInit+0x248>)
 8002402:	2200      	movs	r2, #0
 8002404:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002406:	4b45      	ldr	r3, [pc, #276]	; (800251c <HAL_TIM_OC_MspInit+0x248>)
 8002408:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800240c:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800240e:	4b43      	ldr	r3, [pc, #268]	; (800251c <HAL_TIM_OC_MspInit+0x248>)
 8002410:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002414:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002416:	4b41      	ldr	r3, [pc, #260]	; (800251c <HAL_TIM_OC_MspInit+0x248>)
 8002418:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800241c:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_CIRCULAR;
 800241e:	4b3f      	ldr	r3, [pc, #252]	; (800251c <HAL_TIM_OC_MspInit+0x248>)
 8002420:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002424:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002426:	4b3d      	ldr	r3, [pc, #244]	; (800251c <HAL_TIM_OC_MspInit+0x248>)
 8002428:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800242c:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800242e:	4b3b      	ldr	r3, [pc, #236]	; (800251c <HAL_TIM_OC_MspInit+0x248>)
 8002430:	2204      	movs	r2, #4
 8002432:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim4_ch3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002434:	4b39      	ldr	r3, [pc, #228]	; (800251c <HAL_TIM_OC_MspInit+0x248>)
 8002436:	2203      	movs	r2, #3
 8002438:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim4_ch3.Init.MemBurst = DMA_MBURST_SINGLE;
 800243a:	4b38      	ldr	r3, [pc, #224]	; (800251c <HAL_TIM_OC_MspInit+0x248>)
 800243c:	2200      	movs	r2, #0
 800243e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim4_ch3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002440:	4b36      	ldr	r3, [pc, #216]	; (800251c <HAL_TIM_OC_MspInit+0x248>)
 8002442:	2200      	movs	r2, #0
 8002444:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8002446:	4835      	ldr	r0, [pc, #212]	; (800251c <HAL_TIM_OC_MspInit+0x248>)
 8002448:	f000 fe5e 	bl	8003108 <HAL_DMA_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_TIM_OC_MspInit+0x182>
    {
      Error_Handler();
 8002452:	f7ff fd7b 	bl	8001f4c <Error_Handler>
    }

    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a30      	ldr	r2, [pc, #192]	; (800251c <HAL_TIM_OC_MspInit+0x248>)
 800245a:	62da      	str	r2, [r3, #44]	; 0x2c
 800245c:	4a2f      	ldr	r2, [pc, #188]	; (800251c <HAL_TIM_OC_MspInit+0x248>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002462:	e04b      	b.n	80024fc <HAL_TIM_OC_MspInit+0x228>
  else if(htim_oc->Instance==TIM5)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a2e      	ldr	r2, [pc, #184]	; (8002524 <HAL_TIM_OC_MspInit+0x250>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d146      	bne.n	80024fc <HAL_TIM_OC_MspInit+0x228>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800246e:	4b26      	ldr	r3, [pc, #152]	; (8002508 <HAL_TIM_OC_MspInit+0x234>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	4a25      	ldr	r2, [pc, #148]	; (8002508 <HAL_TIM_OC_MspInit+0x234>)
 8002474:	f043 0308 	orr.w	r3, r3, #8
 8002478:	6413      	str	r3, [r2, #64]	; 0x40
 800247a:	4b23      	ldr	r3, [pc, #140]	; (8002508 <HAL_TIM_OC_MspInit+0x234>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	60bb      	str	r3, [r7, #8]
 8002484:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8002486:	4b28      	ldr	r3, [pc, #160]	; (8002528 <HAL_TIM_OC_MspInit+0x254>)
 8002488:	4a28      	ldr	r2, [pc, #160]	; (800252c <HAL_TIM_OC_MspInit+0x258>)
 800248a:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 800248c:	4b26      	ldr	r3, [pc, #152]	; (8002528 <HAL_TIM_OC_MspInit+0x254>)
 800248e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002492:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002494:	4b24      	ldr	r3, [pc, #144]	; (8002528 <HAL_TIM_OC_MspInit+0x254>)
 8002496:	2240      	movs	r2, #64	; 0x40
 8002498:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800249a:	4b23      	ldr	r3, [pc, #140]	; (8002528 <HAL_TIM_OC_MspInit+0x254>)
 800249c:	2200      	movs	r2, #0
 800249e:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80024a0:	4b21      	ldr	r3, [pc, #132]	; (8002528 <HAL_TIM_OC_MspInit+0x254>)
 80024a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024a6:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024a8:	4b1f      	ldr	r3, [pc, #124]	; (8002528 <HAL_TIM_OC_MspInit+0x254>)
 80024aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024ae:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024b0:	4b1d      	ldr	r3, [pc, #116]	; (8002528 <HAL_TIM_OC_MspInit+0x254>)
 80024b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024b6:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_CIRCULAR;
 80024b8:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <HAL_TIM_OC_MspInit+0x254>)
 80024ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024be:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80024c0:	4b19      	ldr	r3, [pc, #100]	; (8002528 <HAL_TIM_OC_MspInit+0x254>)
 80024c2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80024c6:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80024c8:	4b17      	ldr	r3, [pc, #92]	; (8002528 <HAL_TIM_OC_MspInit+0x254>)
 80024ca:	2204      	movs	r2, #4
 80024cc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80024ce:	4b16      	ldr	r3, [pc, #88]	; (8002528 <HAL_TIM_OC_MspInit+0x254>)
 80024d0:	2203      	movs	r2, #3
 80024d2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 80024d4:	4b14      	ldr	r3, [pc, #80]	; (8002528 <HAL_TIM_OC_MspInit+0x254>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80024da:	4b13      	ldr	r3, [pc, #76]	; (8002528 <HAL_TIM_OC_MspInit+0x254>)
 80024dc:	2200      	movs	r2, #0
 80024de:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 80024e0:	4811      	ldr	r0, [pc, #68]	; (8002528 <HAL_TIM_OC_MspInit+0x254>)
 80024e2:	f000 fe11 	bl	8003108 <HAL_DMA_Init>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <HAL_TIM_OC_MspInit+0x21c>
      Error_Handler();
 80024ec:	f7ff fd2e 	bl	8001f4c <Error_Handler>
    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a0d      	ldr	r2, [pc, #52]	; (8002528 <HAL_TIM_OC_MspInit+0x254>)
 80024f4:	629a      	str	r2, [r3, #40]	; 0x28
 80024f6:	4a0c      	ldr	r2, [pc, #48]	; (8002528 <HAL_TIM_OC_MspInit+0x254>)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6393      	str	r3, [r2, #56]	; 0x38
}
 80024fc:	bf00      	nop
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40000800 	.word	0x40000800
 8002508:	40023800 	.word	0x40023800
 800250c:	2000052c 	.word	0x2000052c
 8002510:	40026010 	.word	0x40026010
 8002514:	2000009c 	.word	0x2000009c
 8002518:	40026058 	.word	0x40026058
 800251c:	200003ec 	.word	0x200003ec
 8002520:	400260b8 	.word	0x400260b8
 8002524:	40000c00 	.word	0x40000c00
 8002528:	2000038c 	.word	0x2000038c
 800252c:	40026070 	.word	0x40026070

08002530 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08c      	sub	sp, #48	; 0x30
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002538:	f107 031c 	add.w	r3, r7, #28
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a50      	ldr	r2, [pc, #320]	; (8002690 <HAL_TIM_MspPostInit+0x160>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d155      	bne.n	80025fe <HAL_TIM_MspPostInit+0xce>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002552:	4b50      	ldr	r3, [pc, #320]	; (8002694 <HAL_TIM_MspPostInit+0x164>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	4a4f      	ldr	r2, [pc, #316]	; (8002694 <HAL_TIM_MspPostInit+0x164>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6313      	str	r3, [r2, #48]	; 0x30
 800255e:	4b4d      	ldr	r3, [pc, #308]	; (8002694 <HAL_TIM_MspPostInit+0x164>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	61bb      	str	r3, [r7, #24]
 8002568:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800256a:	4b4a      	ldr	r3, [pc, #296]	; (8002694 <HAL_TIM_MspPostInit+0x164>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	4a49      	ldr	r2, [pc, #292]	; (8002694 <HAL_TIM_MspPostInit+0x164>)
 8002570:	f043 0302 	orr.w	r3, r3, #2
 8002574:	6313      	str	r3, [r2, #48]	; 0x30
 8002576:	4b47      	ldr	r3, [pc, #284]	; (8002694 <HAL_TIM_MspPostInit+0x164>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002582:	4b44      	ldr	r3, [pc, #272]	; (8002694 <HAL_TIM_MspPostInit+0x164>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	4a43      	ldr	r2, [pc, #268]	; (8002694 <HAL_TIM_MspPostInit+0x164>)
 8002588:	f043 0304 	orr.w	r3, r3, #4
 800258c:	6313      	str	r3, [r2, #48]	; 0x30
 800258e:	4b41      	ldr	r3, [pc, #260]	; (8002694 <HAL_TIM_MspPostInit+0x164>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	693b      	ldr	r3, [r7, #16]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM_3_CH1_MOTOR_1_Pin|TIM_3_CH1_MOTOR_2_Pin;
 800259a:	23c0      	movs	r3, #192	; 0xc0
 800259c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259e:	2302      	movs	r3, #2
 80025a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a6:	2300      	movs	r3, #0
 80025a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025aa:	2302      	movs	r3, #2
 80025ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ae:	f107 031c 	add.w	r3, r7, #28
 80025b2:	4619      	mov	r1, r3
 80025b4:	4838      	ldr	r0, [pc, #224]	; (8002698 <HAL_TIM_MspPostInit+0x168>)
 80025b6:	f001 f99f 	bl	80038f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM_3_CH1_MOTOR_3_Pin;
 80025ba:	2301      	movs	r3, #1
 80025bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025be:	2302      	movs	r3, #2
 80025c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c2:	2300      	movs	r3, #0
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c6:	2300      	movs	r3, #0
 80025c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025ca:	2302      	movs	r3, #2
 80025cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM_3_CH1_MOTOR_3_GPIO_Port, &GPIO_InitStruct);
 80025ce:	f107 031c 	add.w	r3, r7, #28
 80025d2:	4619      	mov	r1, r3
 80025d4:	4831      	ldr	r0, [pc, #196]	; (800269c <HAL_TIM_MspPostInit+0x16c>)
 80025d6:	f001 f98f 	bl	80038f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM_3_CH1_MOTOR_4_Pin;
 80025da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e0:	2302      	movs	r3, #2
 80025e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e8:	2300      	movs	r3, #0
 80025ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025ec:	2302      	movs	r3, #2
 80025ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM_3_CH1_MOTOR_4_GPIO_Port, &GPIO_InitStruct);
 80025f0:	f107 031c 	add.w	r3, r7, #28
 80025f4:	4619      	mov	r1, r3
 80025f6:	482a      	ldr	r0, [pc, #168]	; (80026a0 <HAL_TIM_MspPostInit+0x170>)
 80025f8:	f001 f97e 	bl	80038f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80025fc:	e043      	b.n	8002686 <HAL_TIM_MspPostInit+0x156>
  else if(htim->Instance==TIM4)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a28      	ldr	r2, [pc, #160]	; (80026a4 <HAL_TIM_MspPostInit+0x174>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d11d      	bne.n	8002644 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002608:	4b22      	ldr	r3, [pc, #136]	; (8002694 <HAL_TIM_MspPostInit+0x164>)
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	4a21      	ldr	r2, [pc, #132]	; (8002694 <HAL_TIM_MspPostInit+0x164>)
 800260e:	f043 0308 	orr.w	r3, r3, #8
 8002612:	6313      	str	r3, [r2, #48]	; 0x30
 8002614:	4b1f      	ldr	r3, [pc, #124]	; (8002694 <HAL_TIM_MspPostInit+0x164>)
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_DMA_LATCH_Pin|TIM4_CH2_MOTOR_1_Pin|GPIO_PIN_14;
 8002620:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002626:	2302      	movs	r3, #2
 8002628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262e:	2300      	movs	r3, #0
 8002630:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002632:	2302      	movs	r3, #2
 8002634:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002636:	f107 031c 	add.w	r3, r7, #28
 800263a:	4619      	mov	r1, r3
 800263c:	481a      	ldr	r0, [pc, #104]	; (80026a8 <HAL_TIM_MspPostInit+0x178>)
 800263e:	f001 f95b 	bl	80038f8 <HAL_GPIO_Init>
}
 8002642:	e020      	b.n	8002686 <HAL_TIM_MspPostInit+0x156>
  else if(htim->Instance==TIM5)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a18      	ldr	r2, [pc, #96]	; (80026ac <HAL_TIM_MspPostInit+0x17c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d11b      	bne.n	8002686 <HAL_TIM_MspPostInit+0x156>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264e:	4b11      	ldr	r3, [pc, #68]	; (8002694 <HAL_TIM_MspPostInit+0x164>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	4a10      	ldr	r2, [pc, #64]	; (8002694 <HAL_TIM_MspPostInit+0x164>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	6313      	str	r3, [r2, #48]	; 0x30
 800265a:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <HAL_TIM_MspPostInit+0x164>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002666:	2302      	movs	r3, #2
 8002668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266a:	2302      	movs	r3, #2
 800266c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002672:	2300      	movs	r3, #0
 8002674:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002676:	2302      	movs	r3, #2
 8002678:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267a:	f107 031c 	add.w	r3, r7, #28
 800267e:	4619      	mov	r1, r3
 8002680:	4805      	ldr	r0, [pc, #20]	; (8002698 <HAL_TIM_MspPostInit+0x168>)
 8002682:	f001 f939 	bl	80038f8 <HAL_GPIO_Init>
}
 8002686:	bf00      	nop
 8002688:	3730      	adds	r7, #48	; 0x30
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40000400 	.word	0x40000400
 8002694:	40023800 	.word	0x40023800
 8002698:	40020000 	.word	0x40020000
 800269c:	40020400 	.word	0x40020400
 80026a0:	40020800 	.word	0x40020800
 80026a4:	40000800 	.word	0x40000800
 80026a8:	40020c00 	.word	0x40020c00
 80026ac:	40000c00 	.word	0x40000c00

080026b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08a      	sub	sp, #40	; 0x28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b8:	f107 0314 	add.w	r3, r7, #20
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	60da      	str	r2, [r3, #12]
 80026c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a1b      	ldr	r2, [pc, #108]	; (800273c <HAL_UART_MspInit+0x8c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d130      	bne.n	8002734 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80026d2:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <HAL_UART_MspInit+0x90>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	4a1a      	ldr	r2, [pc, #104]	; (8002740 <HAL_UART_MspInit+0x90>)
 80026d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026dc:	6413      	str	r3, [r2, #64]	; 0x40
 80026de:	4b18      	ldr	r3, [pc, #96]	; (8002740 <HAL_UART_MspInit+0x90>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026ea:	4b15      	ldr	r3, [pc, #84]	; (8002740 <HAL_UART_MspInit+0x90>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	4a14      	ldr	r2, [pc, #80]	; (8002740 <HAL_UART_MspInit+0x90>)
 80026f0:	f043 0308 	orr.w	r3, r3, #8
 80026f4:	6313      	str	r3, [r2, #48]	; 0x30
 80026f6:	4b12      	ldr	r3, [pc, #72]	; (8002740 <HAL_UART_MspInit+0x90>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002702:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002708:	2302      	movs	r3, #2
 800270a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002710:	2303      	movs	r3, #3
 8002712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002714:	2307      	movs	r3, #7
 8002716:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002718:	f107 0314 	add.w	r3, r7, #20
 800271c:	4619      	mov	r1, r3
 800271e:	4809      	ldr	r0, [pc, #36]	; (8002744 <HAL_UART_MspInit+0x94>)
 8002720:	f001 f8ea 	bl	80038f8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002724:	2200      	movs	r2, #0
 8002726:	2100      	movs	r1, #0
 8002728:	2027      	movs	r0, #39	; 0x27
 800272a:	f000 fcb6 	bl	800309a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800272e:	2027      	movs	r0, #39	; 0x27
 8002730:	f000 fccf 	bl	80030d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002734:	bf00      	nop
 8002736:	3728      	adds	r7, #40	; 0x28
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40004800 	.word	0x40004800
 8002740:	40023800 	.word	0x40023800
 8002744:	40020c00 	.word	0x40020c00

08002748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002756:	b480      	push	{r7}
 8002758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800275a:	e7fe      	b.n	800275a <HardFault_Handler+0x4>

0800275c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002760:	e7fe      	b.n	8002760 <MemManage_Handler+0x4>

08002762 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002762:	b480      	push	{r7}
 8002764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002766:	e7fe      	b.n	8002766 <BusFault_Handler+0x4>

08002768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800276c:	e7fe      	b.n	800276c <UsageFault_Handler+0x4>

0800276e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800276e:	b480      	push	{r7}
 8002770:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800278a:	b480      	push	{r7}
 800278c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800278e:	bf00      	nop
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800279c:	f000 f8fa 	bl	8002994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027a0:	bf00      	nop
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 80027a8:	4802      	ldr	r0, [pc, #8]	; (80027b4 <DMA1_Stream0_IRQHandler+0x10>)
 80027aa:	f000 fddd 	bl	8003368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	2000052c 	.word	0x2000052c

080027b8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 80027bc:	4802      	ldr	r0, [pc, #8]	; (80027c8 <DMA1_Stream3_IRQHandler+0x10>)
 80027be:	f000 fdd3 	bl	8003368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	2000009c 	.word	0x2000009c

080027cc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 80027d0:	4802      	ldr	r0, [pc, #8]	; (80027dc <DMA1_Stream4_IRQHandler+0x10>)
 80027d2:	f000 fdc9 	bl	8003368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	2000038c 	.word	0x2000038c

080027e0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80027e4:	4802      	ldr	r0, [pc, #8]	; (80027f0 <DMA1_Stream5_IRQHandler+0x10>)
 80027e6:	f000 fdbf 	bl	8003368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	2000048c 	.word	0x2000048c

080027f4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80027f8:	4802      	ldr	r0, [pc, #8]	; (8002804 <DMA1_Stream6_IRQHandler+0x10>)
 80027fa:	f000 fdb5 	bl	8003368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	200001cc 	.word	0x200001cc

08002808 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800280c:	4802      	ldr	r0, [pc, #8]	; (8002818 <USART3_IRQHandler+0x10>)
 800280e:	f005 f989 	bl	8007b24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	2000013c 	.word	0x2000013c

0800281c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8002820:	4802      	ldr	r0, [pc, #8]	; (800282c <DMA1_Stream7_IRQHandler+0x10>)
 8002822:	f000 fda1 	bl	8003368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	200003ec 	.word	0x200003ec

08002830 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002838:	4a14      	ldr	r2, [pc, #80]	; (800288c <_sbrk+0x5c>)
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <_sbrk+0x60>)
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002844:	4b13      	ldr	r3, [pc, #76]	; (8002894 <_sbrk+0x64>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d102      	bne.n	8002852 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800284c:	4b11      	ldr	r3, [pc, #68]	; (8002894 <_sbrk+0x64>)
 800284e:	4a12      	ldr	r2, [pc, #72]	; (8002898 <_sbrk+0x68>)
 8002850:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002852:	4b10      	ldr	r3, [pc, #64]	; (8002894 <_sbrk+0x64>)
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4413      	add	r3, r2
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	429a      	cmp	r2, r3
 800285e:	d207      	bcs.n	8002870 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002860:	f006 f808 	bl	8008874 <__errno>
 8002864:	4602      	mov	r2, r0
 8002866:	230c      	movs	r3, #12
 8002868:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800286a:	f04f 33ff 	mov.w	r3, #4294967295
 800286e:	e009      	b.n	8002884 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002870:	4b08      	ldr	r3, [pc, #32]	; (8002894 <_sbrk+0x64>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002876:	4b07      	ldr	r3, [pc, #28]	; (8002894 <_sbrk+0x64>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4413      	add	r3, r2
 800287e:	4a05      	ldr	r2, [pc, #20]	; (8002894 <_sbrk+0x64>)
 8002880:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002882:	68fb      	ldr	r3, [r7, #12]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	20040000 	.word	0x20040000
 8002890:	00000400 	.word	0x00000400
 8002894:	20000090 	.word	0x20000090
 8002898:	200005a0 	.word	0x200005a0

0800289c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028a0:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <SystemInit+0x28>)
 80028a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a6:	4a07      	ldr	r2, [pc, #28]	; (80028c4 <SystemInit+0x28>)
 80028a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80028b0:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <SystemInit+0x28>)
 80028b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028b6:	609a      	str	r2, [r3, #8]
#endif

}
 80028b8:	bf00      	nop
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	e000ed00 	.word	0xe000ed00

080028c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80028c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002900 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80028cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80028ce:	e003      	b.n	80028d8 <LoopCopyDataInit>

080028d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80028d0:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80028d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80028d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80028d6:	3104      	adds	r1, #4

080028d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80028d8:	480b      	ldr	r0, [pc, #44]	; (8002908 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80028da:	4b0c      	ldr	r3, [pc, #48]	; (800290c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80028dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80028de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80028e0:	d3f6      	bcc.n	80028d0 <CopyDataInit>
  ldr  r2, =_sbss
 80028e2:	4a0b      	ldr	r2, [pc, #44]	; (8002910 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80028e4:	e002      	b.n	80028ec <LoopFillZerobss>

080028e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80028e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80028e8:	f842 3b04 	str.w	r3, [r2], #4

080028ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80028ec:	4b09      	ldr	r3, [pc, #36]	; (8002914 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80028ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80028f0:	d3f9      	bcc.n	80028e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80028f2:	f7ff ffd3 	bl	800289c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028f6:	f005 ffc3 	bl	8008880 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028fa:	f7fe fd51 	bl	80013a0 <main>
  bx  lr    
 80028fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002900:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8002904:	0800918c 	.word	0x0800918c
  ldr  r0, =_sdata
 8002908:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800290c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8002910:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8002914:	2000059c 	.word	0x2000059c

08002918 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002918:	e7fe      	b.n	8002918 <ADC_IRQHandler>

0800291a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800291e:	2003      	movs	r0, #3
 8002920:	f000 fbb0 	bl	8003084 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002924:	2000      	movs	r0, #0
 8002926:	f000 f805 	bl	8002934 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800292a:	f7ff fb17 	bl	8001f5c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800293c:	4b12      	ldr	r3, [pc, #72]	; (8002988 <HAL_InitTick+0x54>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4b12      	ldr	r3, [pc, #72]	; (800298c <HAL_InitTick+0x58>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	4619      	mov	r1, r3
 8002946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800294a:	fbb3 f3f1 	udiv	r3, r3, r1
 800294e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002952:	4618      	mov	r0, r3
 8002954:	f000 fbcb 	bl	80030ee <HAL_SYSTICK_Config>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e00e      	b.n	8002980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b0f      	cmp	r3, #15
 8002966:	d80a      	bhi.n	800297e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002968:	2200      	movs	r2, #0
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	f04f 30ff 	mov.w	r0, #4294967295
 8002970:	f000 fb93 	bl	800309a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002974:	4a06      	ldr	r2, [pc, #24]	; (8002990 <HAL_InitTick+0x5c>)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	e000      	b.n	8002980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
}
 8002980:	4618      	mov	r0, r3
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20000000 	.word	0x20000000
 800298c:	20000008 	.word	0x20000008
 8002990:	20000004 	.word	0x20000004

08002994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002998:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <HAL_IncTick+0x20>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	461a      	mov	r2, r3
 800299e:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <HAL_IncTick+0x24>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4413      	add	r3, r2
 80029a4:	4a04      	ldr	r2, [pc, #16]	; (80029b8 <HAL_IncTick+0x24>)
 80029a6:	6013      	str	r3, [r2, #0]
}
 80029a8:	bf00      	nop
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	20000008 	.word	0x20000008
 80029b8:	20000594 	.word	0x20000594

080029bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return uwTick;
 80029c0:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <HAL_GetTick+0x14>)
 80029c2:	681b      	ldr	r3, [r3, #0]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	20000594 	.word	0x20000594

080029d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029dc:	2300      	movs	r3, #0
 80029de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e031      	b.n	8002a4e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d109      	bne.n	8002a06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7ff fad6 	bl	8001fa4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d116      	bne.n	8002a40 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a16:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <HAL_ADC_Init+0x84>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	f043 0202 	orr.w	r2, r3, #2
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f964 	bl	8002cf0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	f023 0303 	bic.w	r3, r3, #3
 8002a36:	f043 0201 	orr.w	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	641a      	str	r2, [r3, #64]	; 0x40
 8002a3e:	e001      	b.n	8002a44 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	ffffeefd 	.word	0xffffeefd

08002a5c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x1c>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e12a      	b.n	8002cce <HAL_ADC_ConfigChannel+0x272>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b09      	cmp	r3, #9
 8002a86:	d93a      	bls.n	8002afe <HAL_ADC_ConfigChannel+0xa2>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a90:	d035      	beq.n	8002afe <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68d9      	ldr	r1, [r3, #12]
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3b1e      	subs	r3, #30
 8002aa8:	2207      	movs	r2, #7
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43da      	mvns	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	400a      	ands	r2, r1
 8002ab6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a87      	ldr	r2, [pc, #540]	; (8002cdc <HAL_ADC_ConfigChannel+0x280>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d10a      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68d9      	ldr	r1, [r3, #12]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	061a      	lsls	r2, r3, #24
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ad6:	e035      	b.n	8002b44 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68d9      	ldr	r1, [r3, #12]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	4618      	mov	r0, r3
 8002aea:	4603      	mov	r3, r0
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	4403      	add	r3, r0
 8002af0:	3b1e      	subs	r3, #30
 8002af2:	409a      	lsls	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002afc:	e022      	b.n	8002b44 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6919      	ldr	r1, [r3, #16]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	4413      	add	r3, r2
 8002b12:	2207      	movs	r2, #7
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43da      	mvns	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	400a      	ands	r2, r1
 8002b20:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6919      	ldr	r1, [r3, #16]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	4618      	mov	r0, r3
 8002b34:	4603      	mov	r3, r0
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	4403      	add	r3, r0
 8002b3a:	409a      	lsls	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b06      	cmp	r3, #6
 8002b4a:	d824      	bhi.n	8002b96 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3b05      	subs	r3, #5
 8002b5e:	221f      	movs	r2, #31
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43da      	mvns	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	400a      	ands	r2, r1
 8002b6c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	4613      	mov	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	3b05      	subs	r3, #5
 8002b88:	fa00 f203 	lsl.w	r2, r0, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	635a      	str	r2, [r3, #52]	; 0x34
 8002b94:	e04c      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b0c      	cmp	r3, #12
 8002b9c:	d824      	bhi.n	8002be8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	3b23      	subs	r3, #35	; 0x23
 8002bb0:	221f      	movs	r2, #31
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43da      	mvns	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	400a      	ands	r2, r1
 8002bbe:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	4618      	mov	r0, r3
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3b23      	subs	r3, #35	; 0x23
 8002bda:	fa00 f203 	lsl.w	r2, r0, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	631a      	str	r2, [r3, #48]	; 0x30
 8002be6:	e023      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3b41      	subs	r3, #65	; 0x41
 8002bfa:	221f      	movs	r2, #31
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43da      	mvns	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	400a      	ands	r2, r1
 8002c08:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	4618      	mov	r0, r3
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	3b41      	subs	r3, #65	; 0x41
 8002c24:	fa00 f203 	lsl.w	r2, r0, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a2a      	ldr	r2, [pc, #168]	; (8002ce0 <HAL_ADC_ConfigChannel+0x284>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d10a      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x1f4>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c42:	d105      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002c44:	4b27      	ldr	r3, [pc, #156]	; (8002ce4 <HAL_ADC_ConfigChannel+0x288>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	4a26      	ldr	r2, [pc, #152]	; (8002ce4 <HAL_ADC_ConfigChannel+0x288>)
 8002c4a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002c4e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a22      	ldr	r2, [pc, #136]	; (8002ce0 <HAL_ADC_ConfigChannel+0x284>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d109      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x212>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b12      	cmp	r3, #18
 8002c60:	d105      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002c62:	4b20      	ldr	r3, [pc, #128]	; (8002ce4 <HAL_ADC_ConfigChannel+0x288>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	4a1f      	ldr	r2, [pc, #124]	; (8002ce4 <HAL_ADC_ConfigChannel+0x288>)
 8002c68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c6c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a1b      	ldr	r2, [pc, #108]	; (8002ce0 <HAL_ADC_ConfigChannel+0x284>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d125      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x268>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a17      	ldr	r2, [pc, #92]	; (8002cdc <HAL_ADC_ConfigChannel+0x280>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d003      	beq.n	8002c8a <HAL_ADC_ConfigChannel+0x22e>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b11      	cmp	r3, #17
 8002c88:	d11c      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002c8a:	4b16      	ldr	r3, [pc, #88]	; (8002ce4 <HAL_ADC_ConfigChannel+0x288>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	4a15      	ldr	r2, [pc, #84]	; (8002ce4 <HAL_ADC_ConfigChannel+0x288>)
 8002c90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c94:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a10      	ldr	r2, [pc, #64]	; (8002cdc <HAL_ADC_ConfigChannel+0x280>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d111      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002ca0:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <HAL_ADC_ConfigChannel+0x28c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a11      	ldr	r2, [pc, #68]	; (8002cec <HAL_ADC_ConfigChannel+0x290>)
 8002ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8002caa:	0c9a      	lsrs	r2, r3, #18
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002cb6:	e002      	b.n	8002cbe <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1f9      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	10000012 	.word	0x10000012
 8002ce0:	40012000 	.word	0x40012000
 8002ce4:	40012300 	.word	0x40012300
 8002ce8:	20000000 	.word	0x20000000
 8002cec:	431bde83 	.word	0x431bde83

08002cf0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002cf8:	4b78      	ldr	r3, [pc, #480]	; (8002edc <ADC_Init+0x1ec>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	4a77      	ldr	r2, [pc, #476]	; (8002edc <ADC_Init+0x1ec>)
 8002cfe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002d02:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002d04:	4b75      	ldr	r3, [pc, #468]	; (8002edc <ADC_Init+0x1ec>)
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	4973      	ldr	r1, [pc, #460]	; (8002edc <ADC_Init+0x1ec>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6859      	ldr	r1, [r3, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	021a      	lsls	r2, r3, #8
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6859      	ldr	r1, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6899      	ldr	r1, [r3, #8]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	4a58      	ldr	r2, [pc, #352]	; (8002ee0 <ADC_Init+0x1f0>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d022      	beq.n	8002dca <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6899      	ldr	r1, [r3, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002db4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6899      	ldr	r1, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	e00f      	b.n	8002dea <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002de8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0202 	bic.w	r2, r2, #2
 8002df8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6899      	ldr	r1, [r3, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	005a      	lsls	r2, r3, #1
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d01b      	beq.n	8002e50 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e26:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6859      	ldr	r1, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	3b01      	subs	r3, #1
 8002e44:	035a      	lsls	r2, r3, #13
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	605a      	str	r2, [r3, #4]
 8002e4e:	e007      	b.n	8002e60 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	051a      	lsls	r2, r3, #20
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6899      	ldr	r1, [r3, #8]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ea2:	025a      	lsls	r2, r3, #9
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6899      	ldr	r1, [r3, #8]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	029a      	lsls	r2, r3, #10
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	609a      	str	r2, [r3, #8]
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	40012300 	.word	0x40012300
 8002ee0:	0f000001 	.word	0x0f000001

08002ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <__NVIC_SetPriorityGrouping+0x40>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f00:	4013      	ands	r3, r2
 8002f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f0c:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <__NVIC_SetPriorityGrouping+0x44>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f12:	4a04      	ldr	r2, [pc, #16]	; (8002f24 <__NVIC_SetPriorityGrouping+0x40>)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	60d3      	str	r3, [r2, #12]
}
 8002f18:	bf00      	nop
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	e000ed00 	.word	0xe000ed00
 8002f28:	05fa0000 	.word	0x05fa0000

08002f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f30:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <__NVIC_GetPriorityGrouping+0x18>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	0a1b      	lsrs	r3, r3, #8
 8002f36:	f003 0307 	and.w	r3, r3, #7
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	e000ed00 	.word	0xe000ed00

08002f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	db0b      	blt.n	8002f72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	f003 021f 	and.w	r2, r3, #31
 8002f60:	4907      	ldr	r1, [pc, #28]	; (8002f80 <__NVIC_EnableIRQ+0x38>)
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	2001      	movs	r0, #1
 8002f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	e000e100 	.word	0xe000e100

08002f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	6039      	str	r1, [r7, #0]
 8002f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	db0a      	blt.n	8002fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	490c      	ldr	r1, [pc, #48]	; (8002fd0 <__NVIC_SetPriority+0x4c>)
 8002f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa2:	0112      	lsls	r2, r2, #4
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fac:	e00a      	b.n	8002fc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	4908      	ldr	r1, [pc, #32]	; (8002fd4 <__NVIC_SetPriority+0x50>)
 8002fb4:	79fb      	ldrb	r3, [r7, #7]
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	3b04      	subs	r3, #4
 8002fbc:	0112      	lsls	r2, r2, #4
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	761a      	strb	r2, [r3, #24]
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	e000e100 	.word	0xe000e100
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b089      	sub	sp, #36	; 0x24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f1c3 0307 	rsb	r3, r3, #7
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	bf28      	it	cs
 8002ff6:	2304      	movcs	r3, #4
 8002ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	2b06      	cmp	r3, #6
 8003000:	d902      	bls.n	8003008 <NVIC_EncodePriority+0x30>
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3b03      	subs	r3, #3
 8003006:	e000      	b.n	800300a <NVIC_EncodePriority+0x32>
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800300c:	f04f 32ff 	mov.w	r2, #4294967295
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43da      	mvns	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	401a      	ands	r2, r3
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003020:	f04f 31ff 	mov.w	r1, #4294967295
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	fa01 f303 	lsl.w	r3, r1, r3
 800302a:	43d9      	mvns	r1, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003030:	4313      	orrs	r3, r2
         );
}
 8003032:	4618      	mov	r0, r3
 8003034:	3724      	adds	r7, #36	; 0x24
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
	...

08003040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3b01      	subs	r3, #1
 800304c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003050:	d301      	bcc.n	8003056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003052:	2301      	movs	r3, #1
 8003054:	e00f      	b.n	8003076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003056:	4a0a      	ldr	r2, [pc, #40]	; (8003080 <SysTick_Config+0x40>)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3b01      	subs	r3, #1
 800305c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800305e:	210f      	movs	r1, #15
 8003060:	f04f 30ff 	mov.w	r0, #4294967295
 8003064:	f7ff ff8e 	bl	8002f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003068:	4b05      	ldr	r3, [pc, #20]	; (8003080 <SysTick_Config+0x40>)
 800306a:	2200      	movs	r2, #0
 800306c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800306e:	4b04      	ldr	r3, [pc, #16]	; (8003080 <SysTick_Config+0x40>)
 8003070:	2207      	movs	r2, #7
 8003072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	e000e010 	.word	0xe000e010

08003084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff ff29 	bl	8002ee4 <__NVIC_SetPriorityGrouping>
}
 8003092:	bf00      	nop
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800309a:	b580      	push	{r7, lr}
 800309c:	b086      	sub	sp, #24
 800309e:	af00      	add	r7, sp, #0
 80030a0:	4603      	mov	r3, r0
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	607a      	str	r2, [r7, #4]
 80030a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030ac:	f7ff ff3e 	bl	8002f2c <__NVIC_GetPriorityGrouping>
 80030b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	68b9      	ldr	r1, [r7, #8]
 80030b6:	6978      	ldr	r0, [r7, #20]
 80030b8:	f7ff ff8e 	bl	8002fd8 <NVIC_EncodePriority>
 80030bc:	4602      	mov	r2, r0
 80030be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030c2:	4611      	mov	r1, r2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff ff5d 	bl	8002f84 <__NVIC_SetPriority>
}
 80030ca:	bf00      	nop
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	4603      	mov	r3, r0
 80030da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff ff31 	bl	8002f48 <__NVIC_EnableIRQ>
}
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7ff ffa2 	bl	8003040 <SysTick_Config>
 80030fc:	4603      	mov	r3, r0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
	...

08003108 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003114:	f7ff fc52 	bl	80029bc <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e099      	b.n	8003258 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0201 	bic.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003144:	e00f      	b.n	8003166 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003146:	f7ff fc39 	bl	80029bc <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b05      	cmp	r3, #5
 8003152:	d908      	bls.n	8003166 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2220      	movs	r2, #32
 8003158:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2203      	movs	r2, #3
 800315e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e078      	b.n	8003258 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1e8      	bne.n	8003146 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	4b38      	ldr	r3, [pc, #224]	; (8003260 <HAL_DMA_Init+0x158>)
 8003180:	4013      	ands	r3, r2
 8003182:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003192:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800319e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d107      	bne.n	80031d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c8:	4313      	orrs	r3, r2
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f023 0307 	bic.w	r3, r3, #7
 80031e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d117      	bne.n	800322a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	4313      	orrs	r3, r2
 8003202:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00e      	beq.n	800322a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 faf9 	bl	8003804 <DMA_CheckFifoParam>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d008      	beq.n	800322a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2240      	movs	r2, #64	; 0x40
 800321c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003226:	2301      	movs	r3, #1
 8003228:	e016      	b.n	8003258 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 fab0 	bl	8003798 <DMA_CalcBaseAndBitshift>
 8003238:	4603      	mov	r3, r0
 800323a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003240:	223f      	movs	r2, #63	; 0x3f
 8003242:	409a      	lsls	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3718      	adds	r7, #24
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	e010803f 	.word	0xe010803f

08003264 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
 8003270:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_DMA_Start_IT+0x26>
 8003286:	2302      	movs	r3, #2
 8003288:	e048      	b.n	800331c <HAL_DMA_Start_IT+0xb8>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b01      	cmp	r3, #1
 800329c:	d137      	bne.n	800330e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2202      	movs	r2, #2
 80032a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 fa42 	bl	800373c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032bc:	223f      	movs	r2, #63	; 0x3f
 80032be:	409a      	lsls	r2, r3
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0216 	orr.w	r2, r2, #22
 80032d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032e2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d007      	beq.n	80032fc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0208 	orr.w	r2, r2, #8
 80032fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0201 	orr.w	r2, r2, #1
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	e005      	b.n	800331a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003316:	2302      	movs	r3, #2
 8003318:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800331a:	7dfb      	ldrb	r3, [r7, #23]
}
 800331c:	4618      	mov	r0, r3
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d004      	beq.n	8003342 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2280      	movs	r2, #128	; 0x80
 800333c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e00c      	b.n	800335c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2205      	movs	r2, #5
 8003346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0201 	bic.w	r2, r2, #1
 8003358:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003374:	4b92      	ldr	r3, [pc, #584]	; (80035c0 <HAL_DMA_IRQHandler+0x258>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a92      	ldr	r2, [pc, #584]	; (80035c4 <HAL_DMA_IRQHandler+0x25c>)
 800337a:	fba2 2303 	umull	r2, r3, r2, r3
 800337e:	0a9b      	lsrs	r3, r3, #10
 8003380:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003386:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003392:	2208      	movs	r2, #8
 8003394:	409a      	lsls	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4013      	ands	r3, r2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d01a      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d013      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0204 	bic.w	r2, r2, #4
 80033ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c0:	2208      	movs	r2, #8
 80033c2:	409a      	lsls	r2, r3
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033cc:	f043 0201 	orr.w	r2, r3, #1
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d8:	2201      	movs	r2, #1
 80033da:	409a      	lsls	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4013      	ands	r3, r2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d012      	beq.n	800340a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00b      	beq.n	800340a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f6:	2201      	movs	r2, #1
 80033f8:	409a      	lsls	r2, r3
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003402:	f043 0202 	orr.w	r2, r3, #2
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340e:	2204      	movs	r2, #4
 8003410:	409a      	lsls	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4013      	ands	r3, r2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d012      	beq.n	8003440 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00b      	beq.n	8003440 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342c:	2204      	movs	r2, #4
 800342e:	409a      	lsls	r2, r3
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003438:	f043 0204 	orr.w	r2, r3, #4
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003444:	2210      	movs	r2, #16
 8003446:	409a      	lsls	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4013      	ands	r3, r2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d043      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b00      	cmp	r3, #0
 800345c:	d03c      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003462:	2210      	movs	r2, #16
 8003464:	409a      	lsls	r2, r3
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d018      	beq.n	80034aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d108      	bne.n	8003498 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	2b00      	cmp	r3, #0
 800348c:	d024      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	4798      	blx	r3
 8003496:	e01f      	b.n	80034d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800349c:	2b00      	cmp	r3, #0
 800349e:	d01b      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	4798      	blx	r3
 80034a8:	e016      	b.n	80034d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d107      	bne.n	80034c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0208 	bic.w	r2, r2, #8
 80034c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034dc:	2220      	movs	r2, #32
 80034de:	409a      	lsls	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 808e 	beq.w	8003606 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0310 	and.w	r3, r3, #16
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 8086 	beq.w	8003606 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fe:	2220      	movs	r2, #32
 8003500:	409a      	lsls	r2, r3
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b05      	cmp	r3, #5
 8003510:	d136      	bne.n	8003580 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0216 	bic.w	r2, r2, #22
 8003520:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695a      	ldr	r2, [r3, #20]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003530:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	2b00      	cmp	r3, #0
 8003538:	d103      	bne.n	8003542 <HAL_DMA_IRQHandler+0x1da>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800353e:	2b00      	cmp	r3, #0
 8003540:	d007      	beq.n	8003552 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0208 	bic.w	r2, r2, #8
 8003550:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003556:	223f      	movs	r2, #63	; 0x3f
 8003558:	409a      	lsls	r2, r3
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003572:	2b00      	cmp	r3, #0
 8003574:	d07d      	beq.n	8003672 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	4798      	blx	r3
        }
        return;
 800357e:	e078      	b.n	8003672 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d01c      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d108      	bne.n	80035ae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d030      	beq.n	8003606 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	4798      	blx	r3
 80035ac:	e02b      	b.n	8003606 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d027      	beq.n	8003606 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	4798      	blx	r3
 80035be:	e022      	b.n	8003606 <HAL_DMA_IRQHandler+0x29e>
 80035c0:	20000000 	.word	0x20000000
 80035c4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10f      	bne.n	80035f6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0210 	bic.w	r2, r2, #16
 80035e4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360a:	2b00      	cmp	r3, #0
 800360c:	d032      	beq.n	8003674 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d022      	beq.n	8003660 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2205      	movs	r2, #5
 800361e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0201 	bic.w	r2, r2, #1
 8003630:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	3301      	adds	r3, #1
 8003636:	60bb      	str	r3, [r7, #8]
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	429a      	cmp	r2, r3
 800363c:	d307      	bcc.n	800364e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1f2      	bne.n	8003632 <HAL_DMA_IRQHandler+0x2ca>
 800364c:	e000      	b.n	8003650 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800364e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003664:	2b00      	cmp	r3, #0
 8003666:	d005      	beq.n	8003674 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	4798      	blx	r3
 8003670:	e000      	b.n	8003674 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003672:	bf00      	nop
    }
  }
}
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop

0800367c <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 800367c:	b480      	push	{r7}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	460b      	mov	r3, r1
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_DMA_RegisterCallback+0x20>
 8003698:	2302      	movs	r3, #2
 800369a:	e03c      	b.n	8003716 <HAL_DMA_RegisterCallback+0x9a>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d129      	bne.n	8003704 <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 80036b0:	7afb      	ldrb	r3, [r7, #11]
 80036b2:	2b05      	cmp	r3, #5
 80036b4:	d829      	bhi.n	800370a <HAL_DMA_RegisterCallback+0x8e>
 80036b6:	a201      	add	r2, pc, #4	; (adr r2, 80036bc <HAL_DMA_RegisterCallback+0x40>)
 80036b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036bc:	080036d5 	.word	0x080036d5
 80036c0:	080036dd 	.word	0x080036dd
 80036c4:	080036e5 	.word	0x080036e5
 80036c8:	080036ed 	.word	0x080036ed
 80036cc:	080036f5 	.word	0x080036f5
 80036d0:	080036fd 	.word	0x080036fd
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 80036da:	e017      	b.n	800370c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80036e2:	e013      	b.n	800370c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80036ea:	e00f      	b.n	800370c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80036f2:	e00b      	b.n	800370c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80036fa:	e007      	b.n	800370c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003702:	e003      	b.n	800370c <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	75fb      	strb	r3, [r7, #23]
 8003708:	e000      	b.n	800370c <HAL_DMA_RegisterCallback+0x90>
      break;
 800370a:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8003714:	7dfb      	ldrb	r3, [r7, #23]
}
 8003716:	4618      	mov	r0, r3
 8003718:	371c      	adds	r7, #28
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop

08003724 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003730:	4618      	mov	r0, r3
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
 8003748:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003758:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	2b40      	cmp	r3, #64	; 0x40
 8003768:	d108      	bne.n	800377c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800377a:	e007      	b.n	800378c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	60da      	str	r2, [r3, #12]
}
 800378c:	bf00      	nop
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	3b10      	subs	r3, #16
 80037a8:	4a13      	ldr	r2, [pc, #76]	; (80037f8 <DMA_CalcBaseAndBitshift+0x60>)
 80037aa:	fba2 2303 	umull	r2, r3, r2, r3
 80037ae:	091b      	lsrs	r3, r3, #4
 80037b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037b2:	4a12      	ldr	r2, [pc, #72]	; (80037fc <DMA_CalcBaseAndBitshift+0x64>)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4413      	add	r3, r2
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	461a      	mov	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b03      	cmp	r3, #3
 80037c4:	d908      	bls.n	80037d8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	461a      	mov	r2, r3
 80037cc:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <DMA_CalcBaseAndBitshift+0x68>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	1d1a      	adds	r2, r3, #4
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	659a      	str	r2, [r3, #88]	; 0x58
 80037d6:	e006      	b.n	80037e6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	461a      	mov	r2, r3
 80037de:	4b08      	ldr	r3, [pc, #32]	; (8003800 <DMA_CalcBaseAndBitshift+0x68>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	aaaaaaab 	.word	0xaaaaaaab
 80037fc:	08009140 	.word	0x08009140
 8003800:	fffffc00 	.word	0xfffffc00

08003804 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800380c:	2300      	movs	r3, #0
 800380e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003814:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d11f      	bne.n	800385e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b03      	cmp	r3, #3
 8003822:	d855      	bhi.n	80038d0 <DMA_CheckFifoParam+0xcc>
 8003824:	a201      	add	r2, pc, #4	; (adr r2, 800382c <DMA_CheckFifoParam+0x28>)
 8003826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382a:	bf00      	nop
 800382c:	0800383d 	.word	0x0800383d
 8003830:	0800384f 	.word	0x0800384f
 8003834:	0800383d 	.word	0x0800383d
 8003838:	080038d1 	.word	0x080038d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003840:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d045      	beq.n	80038d4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800384c:	e042      	b.n	80038d4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003852:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003856:	d13f      	bne.n	80038d8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800385c:	e03c      	b.n	80038d8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003866:	d121      	bne.n	80038ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2b03      	cmp	r3, #3
 800386c:	d836      	bhi.n	80038dc <DMA_CheckFifoParam+0xd8>
 800386e:	a201      	add	r2, pc, #4	; (adr r2, 8003874 <DMA_CheckFifoParam+0x70>)
 8003870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003874:	08003885 	.word	0x08003885
 8003878:	0800388b 	.word	0x0800388b
 800387c:	08003885 	.word	0x08003885
 8003880:	0800389d 	.word	0x0800389d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	73fb      	strb	r3, [r7, #15]
      break;
 8003888:	e02f      	b.n	80038ea <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d024      	beq.n	80038e0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800389a:	e021      	b.n	80038e0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038a4:	d11e      	bne.n	80038e4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038aa:	e01b      	b.n	80038e4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d902      	bls.n	80038b8 <DMA_CheckFifoParam+0xb4>
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d003      	beq.n	80038be <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038b6:	e018      	b.n	80038ea <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	73fb      	strb	r3, [r7, #15]
      break;
 80038bc:	e015      	b.n	80038ea <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00e      	beq.n	80038e8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	73fb      	strb	r3, [r7, #15]
      break;
 80038ce:	e00b      	b.n	80038e8 <DMA_CheckFifoParam+0xe4>
      break;
 80038d0:	bf00      	nop
 80038d2:	e00a      	b.n	80038ea <DMA_CheckFifoParam+0xe6>
      break;
 80038d4:	bf00      	nop
 80038d6:	e008      	b.n	80038ea <DMA_CheckFifoParam+0xe6>
      break;
 80038d8:	bf00      	nop
 80038da:	e006      	b.n	80038ea <DMA_CheckFifoParam+0xe6>
      break;
 80038dc:	bf00      	nop
 80038de:	e004      	b.n	80038ea <DMA_CheckFifoParam+0xe6>
      break;
 80038e0:	bf00      	nop
 80038e2:	e002      	b.n	80038ea <DMA_CheckFifoParam+0xe6>
      break;   
 80038e4:	bf00      	nop
 80038e6:	e000      	b.n	80038ea <DMA_CheckFifoParam+0xe6>
      break;
 80038e8:	bf00      	nop
    }
  } 
  
  return status; 
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b089      	sub	sp, #36	; 0x24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003902:	2300      	movs	r3, #0
 8003904:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003906:	2300      	movs	r3, #0
 8003908:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800390a:	2300      	movs	r3, #0
 800390c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800390e:	2300      	movs	r3, #0
 8003910:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003912:	2300      	movs	r3, #0
 8003914:	61fb      	str	r3, [r7, #28]
 8003916:	e169      	b.n	8003bec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003918:	2201      	movs	r2, #1
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	4013      	ands	r3, r2
 800392a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	429a      	cmp	r2, r3
 8003932:	f040 8158 	bne.w	8003be6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d00b      	beq.n	8003956 <HAL_GPIO_Init+0x5e>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d007      	beq.n	8003956 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800394a:	2b11      	cmp	r3, #17
 800394c:	d003      	beq.n	8003956 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2b12      	cmp	r3, #18
 8003954:	d130      	bne.n	80039b8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	2203      	movs	r2, #3
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	43db      	mvns	r3, r3
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	4013      	ands	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4313      	orrs	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800398c:	2201      	movs	r2, #1
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	091b      	lsrs	r3, r3, #4
 80039a2:	f003 0201 	and.w	r2, r3, #1
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	2203      	movs	r2, #3
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	43db      	mvns	r3, r3
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	4013      	ands	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	4313      	orrs	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d003      	beq.n	80039f8 <HAL_GPIO_Init+0x100>
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2b12      	cmp	r3, #18
 80039f6:	d123      	bne.n	8003a40 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	08da      	lsrs	r2, r3, #3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3208      	adds	r2, #8
 8003a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	220f      	movs	r2, #15
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	43db      	mvns	r3, r3
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	691a      	ldr	r2, [r3, #16]
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	08da      	lsrs	r2, r3, #3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	3208      	adds	r2, #8
 8003a3a:	69b9      	ldr	r1, [r7, #24]
 8003a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	2203      	movs	r2, #3
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	43db      	mvns	r3, r3
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	4013      	ands	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f003 0203 	and.w	r2, r3, #3
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 80b2 	beq.w	8003be6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a82:	4b5f      	ldr	r3, [pc, #380]	; (8003c00 <HAL_GPIO_Init+0x308>)
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	4a5e      	ldr	r2, [pc, #376]	; (8003c00 <HAL_GPIO_Init+0x308>)
 8003a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a8e:	4b5c      	ldr	r3, [pc, #368]	; (8003c00 <HAL_GPIO_Init+0x308>)
 8003a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003a9a:	4a5a      	ldr	r2, [pc, #360]	; (8003c04 <HAL_GPIO_Init+0x30c>)
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	089b      	lsrs	r3, r3, #2
 8003aa0:	3302      	adds	r3, #2
 8003aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	220f      	movs	r2, #15
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	4013      	ands	r3, r2
 8003abc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a51      	ldr	r2, [pc, #324]	; (8003c08 <HAL_GPIO_Init+0x310>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d02b      	beq.n	8003b1e <HAL_GPIO_Init+0x226>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a50      	ldr	r2, [pc, #320]	; (8003c0c <HAL_GPIO_Init+0x314>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d025      	beq.n	8003b1a <HAL_GPIO_Init+0x222>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a4f      	ldr	r2, [pc, #316]	; (8003c10 <HAL_GPIO_Init+0x318>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d01f      	beq.n	8003b16 <HAL_GPIO_Init+0x21e>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a4e      	ldr	r2, [pc, #312]	; (8003c14 <HAL_GPIO_Init+0x31c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d019      	beq.n	8003b12 <HAL_GPIO_Init+0x21a>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a4d      	ldr	r2, [pc, #308]	; (8003c18 <HAL_GPIO_Init+0x320>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d013      	beq.n	8003b0e <HAL_GPIO_Init+0x216>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a4c      	ldr	r2, [pc, #304]	; (8003c1c <HAL_GPIO_Init+0x324>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00d      	beq.n	8003b0a <HAL_GPIO_Init+0x212>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a4b      	ldr	r2, [pc, #300]	; (8003c20 <HAL_GPIO_Init+0x328>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d007      	beq.n	8003b06 <HAL_GPIO_Init+0x20e>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a4a      	ldr	r2, [pc, #296]	; (8003c24 <HAL_GPIO_Init+0x32c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d101      	bne.n	8003b02 <HAL_GPIO_Init+0x20a>
 8003afe:	2307      	movs	r3, #7
 8003b00:	e00e      	b.n	8003b20 <HAL_GPIO_Init+0x228>
 8003b02:	2308      	movs	r3, #8
 8003b04:	e00c      	b.n	8003b20 <HAL_GPIO_Init+0x228>
 8003b06:	2306      	movs	r3, #6
 8003b08:	e00a      	b.n	8003b20 <HAL_GPIO_Init+0x228>
 8003b0a:	2305      	movs	r3, #5
 8003b0c:	e008      	b.n	8003b20 <HAL_GPIO_Init+0x228>
 8003b0e:	2304      	movs	r3, #4
 8003b10:	e006      	b.n	8003b20 <HAL_GPIO_Init+0x228>
 8003b12:	2303      	movs	r3, #3
 8003b14:	e004      	b.n	8003b20 <HAL_GPIO_Init+0x228>
 8003b16:	2302      	movs	r3, #2
 8003b18:	e002      	b.n	8003b20 <HAL_GPIO_Init+0x228>
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e000      	b.n	8003b20 <HAL_GPIO_Init+0x228>
 8003b1e:	2300      	movs	r3, #0
 8003b20:	69fa      	ldr	r2, [r7, #28]
 8003b22:	f002 0203 	and.w	r2, r2, #3
 8003b26:	0092      	lsls	r2, r2, #2
 8003b28:	4093      	lsls	r3, r2
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003b30:	4934      	ldr	r1, [pc, #208]	; (8003c04 <HAL_GPIO_Init+0x30c>)
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	089b      	lsrs	r3, r3, #2
 8003b36:	3302      	adds	r3, #2
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b3e:	4b3a      	ldr	r3, [pc, #232]	; (8003c28 <HAL_GPIO_Init+0x330>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	43db      	mvns	r3, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b62:	4a31      	ldr	r2, [pc, #196]	; (8003c28 <HAL_GPIO_Init+0x330>)
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b68:	4b2f      	ldr	r3, [pc, #188]	; (8003c28 <HAL_GPIO_Init+0x330>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	43db      	mvns	r3, r3
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4013      	ands	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b8c:	4a26      	ldr	r2, [pc, #152]	; (8003c28 <HAL_GPIO_Init+0x330>)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b92:	4b25      	ldr	r3, [pc, #148]	; (8003c28 <HAL_GPIO_Init+0x330>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bb6:	4a1c      	ldr	r2, [pc, #112]	; (8003c28 <HAL_GPIO_Init+0x330>)
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bbc:	4b1a      	ldr	r3, [pc, #104]	; (8003c28 <HAL_GPIO_Init+0x330>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003be0:	4a11      	ldr	r2, [pc, #68]	; (8003c28 <HAL_GPIO_Init+0x330>)
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	3301      	adds	r3, #1
 8003bea:	61fb      	str	r3, [r7, #28]
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	2b0f      	cmp	r3, #15
 8003bf0:	f67f ae92 	bls.w	8003918 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003bf4:	bf00      	nop
 8003bf6:	3724      	adds	r7, #36	; 0x24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	40023800 	.word	0x40023800
 8003c04:	40013800 	.word	0x40013800
 8003c08:	40020000 	.word	0x40020000
 8003c0c:	40020400 	.word	0x40020400
 8003c10:	40020800 	.word	0x40020800
 8003c14:	40020c00 	.word	0x40020c00
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	40021400 	.word	0x40021400
 8003c20:	40021800 	.word	0x40021800
 8003c24:	40021c00 	.word	0x40021c00
 8003c28:	40013c00 	.word	0x40013c00

08003c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	460b      	mov	r3, r1
 8003c36:	807b      	strh	r3, [r7, #2]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c3c:	787b      	ldrb	r3, [r7, #1]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c42:	887a      	ldrh	r2, [r7, #2]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003c48:	e003      	b.n	8003c52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003c4a:	887b      	ldrh	r3, [r7, #2]
 8003c4c:	041a      	lsls	r2, r3, #16
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	619a      	str	r2, [r3, #24]
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
	...

08003c60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e07f      	b.n	8003d72 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d106      	bne.n	8003c8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7fe f9cc 	bl	8002024 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2224      	movs	r2, #36	; 0x24
 8003c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0201 	bic.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cb0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cc0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d107      	bne.n	8003cda <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cd6:	609a      	str	r2, [r3, #8]
 8003cd8:	e006      	b.n	8003ce8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003ce6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d104      	bne.n	8003cfa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cf8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6859      	ldr	r1, [r3, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	4b1d      	ldr	r3, [pc, #116]	; (8003d7c <HAL_I2C_Init+0x11c>)
 8003d06:	430b      	orrs	r3, r1
 8003d08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691a      	ldr	r2, [r3, #16]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	ea42 0103 	orr.w	r1, r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	021a      	lsls	r2, r3, #8
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	69d9      	ldr	r1, [r3, #28]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a1a      	ldr	r2, [r3, #32]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0201 	orr.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	02008000 	.word	0x02008000

08003d80 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b08a      	sub	sp, #40	; 0x28
 8003d84:	af02      	add	r7, sp, #8
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	4608      	mov	r0, r1
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	4603      	mov	r3, r0
 8003d90:	817b      	strh	r3, [r7, #10]
 8003d92:	460b      	mov	r3, r1
 8003d94:	813b      	strh	r3, [r7, #8]
 8003d96:	4613      	mov	r3, r2
 8003d98:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b20      	cmp	r3, #32
 8003da4:	f040 80d5 	bne.w	8003f52 <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <HAL_I2C_Mem_Write_DMA+0x34>
 8003dae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d105      	bne.n	8003dc0 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0c9      	b.n	8003f54 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dce:	d101      	bne.n	8003dd4 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e0bf      	b.n	8003f54 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d101      	bne.n	8003de2 <HAL_I2C_Mem_Write_DMA+0x62>
 8003dde:	2302      	movs	r3, #2
 8003de0:	e0b8      	b.n	8003f54 <HAL_I2C_Mem_Write_DMA+0x1d4>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003dea:	f7fe fde7 	bl	80029bc <HAL_GetTick>
 8003dee:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2221      	movs	r2, #33	; 0x21
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2240      	movs	r2, #64	; 0x40
 8003dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003e10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4a51      	ldr	r2, [pc, #324]	; (8003f5c <HAL_I2C_Mem_Write_DMA+0x1dc>)
 8003e16:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4a51      	ldr	r2, [pc, #324]	; (8003f60 <HAL_I2C_Mem_Write_DMA+0x1e0>)
 8003e1c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	2bff      	cmp	r3, #255	; 0xff
 8003e26:	d906      	bls.n	8003e36 <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	22ff      	movs	r2, #255	; 0xff
 8003e2c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003e2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e32:	61fb      	str	r3, [r7, #28]
 8003e34:	e007      	b.n	8003e46 <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003e40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e44:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003e46:	88f8      	ldrh	r0, [r7, #6]
 8003e48:	893a      	ldrh	r2, [r7, #8]
 8003e4a:	8979      	ldrh	r1, [r7, #10]
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	9301      	str	r3, [sp, #4]
 8003e50:	2319      	movs	r3, #25
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	4603      	mov	r3, r0
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 fbae 	bl	80045b8 <I2C_RequestMemoryWrite>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d005      	beq.n	8003e6e <HAL_I2C_Mem_Write_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e072      	b.n	8003f54 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d020      	beq.n	8003eb8 <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7a:	4a3a      	ldr	r2, [pc, #232]	; (8003f64 <HAL_I2C_Mem_Write_DMA+0x1e4>)
 8003e7c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e82:	4a39      	ldr	r2, [pc, #228]	; (8003f68 <HAL_I2C_Mem_Write_DMA+0x1e8>)
 8003e84:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e92:	2200      	movs	r2, #0
 8003e94:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003e9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3328      	adds	r3, #40	; 0x28
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea8:	f7ff f9dc 	bl	8003264 <HAL_DMA_Start_IT>
 8003eac:	4603      	mov	r3, r0
 8003eae:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8003eb0:	7dfb      	ldrb	r3, [r7, #23]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d139      	bne.n	8003f2a <HAL_I2C_Mem_Write_DMA+0x1aa>
 8003eb6:	e013      	b.n	8003ee0 <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ecc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e039      	b.n	8003f54 <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	8979      	ldrh	r1, [r7, #10]
 8003ee8:	2300      	movs	r3, #0
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f001 f8ec 	bl	80050cc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003f0e:	2111      	movs	r1, #17
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f001 f909 	bl	8005128 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f24:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8003f26:	2300      	movs	r3, #0
 8003f28:	e014      	b.n	8003f54 <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3e:	f043 0210 	orr.w	r2, r3, #16
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e000      	b.n	8003f54 <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8003f52:	2302      	movs	r3, #2
  }
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3720      	adds	r7, #32
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	ffff0000 	.word	0xffff0000
 8003f60:	08004243 	.word	0x08004243
 8003f64:	08004dad 	.word	0x08004dad
 8003f68:	08004e43 	.word	0x08004e43

08003f6c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	70fb      	strb	r3, [r7, #3]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <I2C_Slave_ISR_IT+0x24>
 800405c:	2302      	movs	r3, #2
 800405e:	e0ec      	b.n	800423a <I2C_Slave_ISR_IT+0x1fe>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	095b      	lsrs	r3, r3, #5
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	d009      	beq.n	8004088 <I2C_Slave_ISR_IT+0x4c>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	095b      	lsrs	r3, r3, #5
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004080:	6939      	ldr	r1, [r7, #16]
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 fc84 	bl	8004990 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	091b      	lsrs	r3, r3, #4
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d04d      	beq.n	8004130 <I2C_Slave_ISR_IT+0xf4>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	091b      	lsrs	r3, r3, #4
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b00      	cmp	r3, #0
 800409e:	d047      	beq.n	8004130 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d128      	bne.n	80040fc <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b28      	cmp	r3, #40	; 0x28
 80040b4:	d108      	bne.n	80040c8 <I2C_Slave_ISR_IT+0x8c>
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040bc:	d104      	bne.n	80040c8 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80040be:	6939      	ldr	r1, [r7, #16]
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 fd3b 	bl	8004b3c <I2C_ITListenCplt>
 80040c6:	e032      	b.n	800412e <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b29      	cmp	r3, #41	; 0x29
 80040d2:	d10e      	bne.n	80040f2 <I2C_Slave_ISR_IT+0xb6>
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040da:	d00a      	beq.n	80040f2 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2210      	movs	r2, #16
 80040e2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 fe3d 	bl	8004d64 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 fb77 	bl	80047de <I2C_ITSlaveSeqCplt>
 80040f0:	e01d      	b.n	800412e <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2210      	movs	r2, #16
 80040f8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80040fa:	e096      	b.n	800422a <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2210      	movs	r2, #16
 8004102:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004108:	f043 0204 	orr.w	r2, r3, #4
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d004      	beq.n	8004120 <I2C_Slave_ISR_IT+0xe4>
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800411c:	f040 8085 	bne.w	800422a <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004124:	4619      	mov	r1, r3
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 fd5c 	bl	8004be4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800412c:	e07d      	b.n	800422a <I2C_Slave_ISR_IT+0x1ee>
 800412e:	e07c      	b.n	800422a <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	089b      	lsrs	r3, r3, #2
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d030      	beq.n	800419e <I2C_Slave_ISR_IT+0x162>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	089b      	lsrs	r3, r3, #2
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d02a      	beq.n	800419e <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414c:	b29b      	uxth	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d018      	beq.n	8004184 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416e:	3b01      	subs	r3, #1
 8004170:	b29a      	uxth	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d14f      	bne.n	800422e <I2C_Slave_ISR_IT+0x1f2>
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004194:	d04b      	beq.n	800422e <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 fb21 	bl	80047de <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800419c:	e047      	b.n	800422e <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	08db      	lsrs	r3, r3, #3
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <I2C_Slave_ISR_IT+0x184>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	08db      	lsrs	r3, r3, #3
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d004      	beq.n	80041c0 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80041b6:	6939      	ldr	r1, [r7, #16]
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 fa51 	bl	8004660 <I2C_ITAddrCplt>
 80041be:	e037      	b.n	8004230 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	085b      	lsrs	r3, r3, #1
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d031      	beq.n	8004230 <I2C_Slave_ISR_IT+0x1f4>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	085b      	lsrs	r3, r3, #1
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d02b      	beq.n	8004230 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d018      	beq.n	8004214 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	781a      	ldrb	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	1c5a      	adds	r2, r3, #1
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	3b01      	subs	r3, #1
 8004200:	b29a      	uxth	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800420a:	3b01      	subs	r3, #1
 800420c:	b29a      	uxth	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	851a      	strh	r2, [r3, #40]	; 0x28
 8004212:	e00d      	b.n	8004230 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800421a:	d002      	beq.n	8004222 <I2C_Slave_ISR_IT+0x1e6>
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d106      	bne.n	8004230 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 fadb 	bl	80047de <I2C_ITSlaveSeqCplt>
 8004228:	e002      	b.n	8004230 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800422a:	bf00      	nop
 800422c:	e000      	b.n	8004230 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800422e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3718      	adds	r7, #24
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b088      	sub	sp, #32
 8004246:	af02      	add	r7, sp, #8
 8004248:	60f8      	str	r0, [r7, #12]
 800424a:	60b9      	str	r1, [r7, #8]
 800424c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004254:	2b01      	cmp	r3, #1
 8004256:	d101      	bne.n	800425c <I2C_Master_ISR_DMA+0x1a>
 8004258:	2302      	movs	r3, #2
 800425a:	e0e1      	b.n	8004420 <I2C_Master_ISR_DMA+0x1de>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	091b      	lsrs	r3, r3, #4
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b00      	cmp	r3, #0
 800426e:	d017      	beq.n	80042a0 <I2C_Master_ISR_DMA+0x5e>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	091b      	lsrs	r3, r3, #4
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d011      	beq.n	80042a0 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2210      	movs	r2, #16
 8004282:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004288:	f043 0204 	orr.w	r2, r3, #4
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004290:	2112      	movs	r1, #18
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 ff48 	bl	8005128 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 fd63 	bl	8004d64 <I2C_Flush_TXDR>
 800429e:	e0ba      	b.n	8004416 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	09db      	lsrs	r3, r3, #7
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d072      	beq.n	8004392 <I2C_Master_ISR_DMA+0x150>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	099b      	lsrs	r3, r3, #6
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d06c      	beq.n	8004392 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042c6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d04e      	beq.n	8004370 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	b29b      	uxth	r3, r3
 80042da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042de:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	2bff      	cmp	r3, #255	; 0xff
 80042e8:	d906      	bls.n	80042f8 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	22ff      	movs	r2, #255	; 0xff
 80042ee:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80042f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	e010      	b.n	800431a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004306:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800430a:	d003      	beq.n	8004314 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004310:	617b      	str	r3, [r7, #20]
 8004312:	e002      	b.n	800431a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004314:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004318:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800431e:	b2da      	uxtb	r2, r3
 8004320:	8a79      	ldrh	r1, [r7, #18]
 8004322:	2300      	movs	r3, #0
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 fecf 	bl	80050cc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004332:	b29a      	uxth	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	b29a      	uxth	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b22      	cmp	r3, #34	; 0x22
 800434a:	d108      	bne.n	800435e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800435a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800435c:	e05b      	b.n	8004416 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800436c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800436e:	e052      	b.n	8004416 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800437e:	d003      	beq.n	8004388 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 f9ef 	bl	8004764 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004386:	e046      	b.n	8004416 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004388:	2140      	movs	r1, #64	; 0x40
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f000 fc2a 	bl	8004be4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004390:	e041      	b.n	8004416 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	099b      	lsrs	r3, r3, #6
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b00      	cmp	r3, #0
 800439c:	d029      	beq.n	80043f2 <I2C_Master_ISR_DMA+0x1b0>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	099b      	lsrs	r3, r3, #6
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d023      	beq.n	80043f2 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d119      	bne.n	80043e8 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043c2:	d027      	beq.n	8004414 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043cc:	d108      	bne.n	80043e0 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043dc:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80043de:	e019      	b.n	8004414 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 f9bf 	bl	8004764 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80043e6:	e015      	b.n	8004414 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80043e8:	2140      	movs	r1, #64	; 0x40
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f000 fbfa 	bl	8004be4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80043f0:	e010      	b.n	8004414 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	095b      	lsrs	r3, r3, #5
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00b      	beq.n	8004416 <I2C_Master_ISR_DMA+0x1d4>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	095b      	lsrs	r3, r3, #5
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d005      	beq.n	8004416 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800440a:	68b9      	ldr	r1, [r7, #8]
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 fa23 	bl	8004858 <I2C_ITMasterCplt>
 8004412:	e000      	b.n	8004416 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8004414:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3718      	adds	r7, #24
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	613b      	str	r3, [r7, #16]
  uint32_t treatdmanack = 0U;
 800443a:	2300      	movs	r3, #0
 800443c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004444:	2b01      	cmp	r3, #1
 8004446:	d101      	bne.n	800444c <I2C_Slave_ISR_DMA+0x24>
 8004448:	2302      	movs	r3, #2
 800444a:	e0b1      	b.n	80045b0 <I2C_Slave_ISR_DMA+0x188>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	095b      	lsrs	r3, r3, #5
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	d009      	beq.n	8004474 <I2C_Slave_ISR_DMA+0x4c>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	095b      	lsrs	r3, r3, #5
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800446c:	68b9      	ldr	r1, [r7, #8]
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 fa8e 	bl	8004990 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	091b      	lsrs	r3, r3, #4
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 8082 	beq.w	8004586 <I2C_Slave_ISR_DMA+0x15e>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	091b      	lsrs	r3, r3, #4
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d07b      	beq.n	8004586 <I2C_Slave_ISR_DMA+0x15e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	0b9b      	lsrs	r3, r3, #14
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d105      	bne.n	80044a6 <I2C_Slave_ISR_DMA+0x7e>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	0bdb      	lsrs	r3, r3, #15
 800449e:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d068      	beq.n	8004578 <I2C_Slave_ISR_DMA+0x150>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00d      	beq.n	80044ca <I2C_Slave_ISR_DMA+0xa2>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	0bdb      	lsrs	r3, r3, #15
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d007      	beq.n	80044ca <I2C_Slave_ISR_DMA+0xa2>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <I2C_Slave_ISR_DMA+0xa2>
          {
            treatdmanack = 1U;
 80044c6:	2301      	movs	r3, #1
 80044c8:	617b      	str	r3, [r7, #20]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00d      	beq.n	80044ee <I2C_Slave_ISR_DMA+0xc6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	0b9b      	lsrs	r3, r3, #14
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d007      	beq.n	80044ee <I2C_Slave_ISR_DMA+0xc6>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <I2C_Slave_ISR_DMA+0xc6>
          {
            treatdmanack = 1U;
 80044ea:	2301      	movs	r3, #1
 80044ec:	617b      	str	r3, [r7, #20]
          }
        }
      }

      if (treatdmanack == 1U)
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d128      	bne.n	8004546 <I2C_Slave_ISR_DMA+0x11e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b28      	cmp	r3, #40	; 0x28
 80044fe:	d108      	bne.n	8004512 <I2C_Slave_ISR_DMA+0xea>
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004506:	d104      	bne.n	8004512 <I2C_Slave_ISR_DMA+0xea>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004508:	68b9      	ldr	r1, [r7, #8]
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 fb16 	bl	8004b3c <I2C_ITListenCplt>
 8004510:	e031      	b.n	8004576 <I2C_Slave_ISR_DMA+0x14e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b29      	cmp	r3, #41	; 0x29
 800451c:	d10e      	bne.n	800453c <I2C_Slave_ISR_DMA+0x114>
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004524:	d00a      	beq.n	800453c <I2C_Slave_ISR_DMA+0x114>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2210      	movs	r2, #16
 800452c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 fc18 	bl	8004d64 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 f952 	bl	80047de <I2C_ITSlaveSeqCplt>
 800453a:	e01c      	b.n	8004576 <I2C_Slave_ISR_DMA+0x14e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2210      	movs	r2, #16
 8004542:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004544:	e01d      	b.n	8004582 <I2C_Slave_ISR_DMA+0x15a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2210      	movs	r2, #16
 800454c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004552:	f043 0204 	orr.w	r2, r3, #4
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	645a      	str	r2, [r3, #68]	; 0x44

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <I2C_Slave_ISR_DMA+0x140>
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004566:	d10c      	bne.n	8004582 <I2C_Slave_ISR_DMA+0x15a>
        {
          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456c:	4619      	mov	r1, r3
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 fb38 	bl	8004be4 <I2C_ITError>
      if (treatdmanack == 1U)
 8004574:	e005      	b.n	8004582 <I2C_Slave_ISR_DMA+0x15a>
 8004576:	e004      	b.n	8004582 <I2C_Slave_ISR_DMA+0x15a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2210      	movs	r2, #16
 800457e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004580:	e011      	b.n	80045a6 <I2C_Slave_ISR_DMA+0x17e>
      if (treatdmanack == 1U)
 8004582:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004584:	e00f      	b.n	80045a6 <I2C_Slave_ISR_DMA+0x17e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	08db      	lsrs	r3, r3, #3
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d009      	beq.n	80045a6 <I2C_Slave_ISR_DMA+0x17e>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	08db      	lsrs	r3, r3, #3
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <I2C_Slave_ISR_DMA+0x17e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800459e:	68b9      	ldr	r1, [r7, #8]
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 f85d 	bl	8004660 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3718      	adds	r7, #24
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af02      	add	r7, sp, #8
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	4608      	mov	r0, r1
 80045c2:	4611      	mov	r1, r2
 80045c4:	461a      	mov	r2, r3
 80045c6:	4603      	mov	r3, r0
 80045c8:	817b      	strh	r3, [r7, #10]
 80045ca:	460b      	mov	r3, r1
 80045cc:	813b      	strh	r3, [r7, #8]
 80045ce:	4613      	mov	r3, r2
 80045d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80045d2:	88fb      	ldrh	r3, [r7, #6]
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	8979      	ldrh	r1, [r7, #10]
 80045d8:	4b20      	ldr	r3, [pc, #128]	; (800465c <I2C_RequestMemoryWrite+0xa4>)
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 fd73 	bl	80050cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045e6:	69fa      	ldr	r2, [r7, #28]
 80045e8:	69b9      	ldr	r1, [r7, #24]
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 fcc7 	bl	8004f7e <I2C_WaitOnTXISFlagUntilTimeout>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e02c      	b.n	8004654 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045fa:	88fb      	ldrh	r3, [r7, #6]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d105      	bne.n	800460c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004600:	893b      	ldrh	r3, [r7, #8]
 8004602:	b2da      	uxtb	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	629a      	str	r2, [r3, #40]	; 0x28
 800460a:	e015      	b.n	8004638 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800460c:	893b      	ldrh	r3, [r7, #8]
 800460e:	0a1b      	lsrs	r3, r3, #8
 8004610:	b29b      	uxth	r3, r3
 8004612:	b2da      	uxtb	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800461a:	69fa      	ldr	r2, [r7, #28]
 800461c:	69b9      	ldr	r1, [r7, #24]
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 fcad 	bl	8004f7e <I2C_WaitOnTXISFlagUntilTimeout>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e012      	b.n	8004654 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800462e:	893b      	ldrh	r3, [r7, #8]
 8004630:	b2da      	uxtb	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	2200      	movs	r2, #0
 8004640:	2180      	movs	r1, #128	; 0x80
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f000 fc5b 	bl	8004efe <I2C_WaitOnFlagUntilTimeout>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e000      	b.n	8004654 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	80002000 	.word	0x80002000

08004660 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004670:	b2db      	uxtb	r3, r3
 8004672:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004676:	2b28      	cmp	r3, #40	; 0x28
 8004678:	d168      	bne.n	800474c <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	0c1b      	lsrs	r3, r3, #16
 8004682:	b2db      	uxtb	r3, r3
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	0c1b      	lsrs	r3, r3, #16
 8004692:	b29b      	uxth	r3, r3
 8004694:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004698:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046a6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80046b4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d137      	bne.n	800472e <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80046be:	897b      	ldrh	r3, [r7, #10]
 80046c0:	09db      	lsrs	r3, r3, #7
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	89bb      	ldrh	r3, [r7, #12]
 80046c6:	4053      	eors	r3, r2
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	f003 0306 	and.w	r3, r3, #6
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d11c      	bne.n	800470c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80046d2:	897b      	ldrh	r3, [r7, #10]
 80046d4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d139      	bne.n	800475c <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2208      	movs	r2, #8
 80046f4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80046fe:	89ba      	ldrh	r2, [r7, #12]
 8004700:	7bfb      	ldrb	r3, [r7, #15]
 8004702:	4619      	mov	r1, r3
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f7ff fc59 	bl	8003fbc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800470a:	e027      	b.n	800475c <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 800470c:	893b      	ldrh	r3, [r7, #8]
 800470e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004710:	2104      	movs	r1, #4
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 fd76 	bl	8005204 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004720:	89ba      	ldrh	r2, [r7, #12]
 8004722:	7bfb      	ldrb	r3, [r7, #15]
 8004724:	4619      	mov	r1, r3
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7ff fc48 	bl	8003fbc <HAL_I2C_AddrCallback>
}
 800472c:	e016      	b.n	800475c <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800472e:	2104      	movs	r1, #4
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 fd67 	bl	8005204 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800473e:	89ba      	ldrh	r2, [r7, #12]
 8004740:	7bfb      	ldrb	r3, [r7, #15]
 8004742:	4619      	mov	r1, r3
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f7ff fc39 	bl	8003fbc <HAL_I2C_AddrCallback>
}
 800474a:	e007      	b.n	800475c <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2208      	movs	r2, #8
 8004752:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800475c:	bf00      	nop
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b21      	cmp	r3, #33	; 0x21
 800477e:	d115      	bne.n	80047ac <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2220      	movs	r2, #32
 8004784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2211      	movs	r2, #17
 800478c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004794:	2101      	movs	r1, #1
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 fd34 	bl	8005204 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7ff fbe1 	bl	8003f6c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047aa:	e014      	b.n	80047d6 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2212      	movs	r2, #18
 80047b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80047c0:	2102      	movs	r1, #2
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 fd1e 	bl	8005204 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f7ff fbd5 	bl	8003f80 <HAL_I2C_MasterRxCpltCallback>
}
 80047d6:	bf00      	nop
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b082      	sub	sp, #8
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b29      	cmp	r3, #41	; 0x29
 80047f8:	d112      	bne.n	8004820 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2228      	movs	r2, #40	; 0x28
 80047fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2221      	movs	r2, #33	; 0x21
 8004806:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004808:	2101      	movs	r1, #1
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fcfa 	bl	8005204 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7ff fbbb 	bl	8003f94 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800481e:	e017      	b.n	8004850 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b2a      	cmp	r3, #42	; 0x2a
 800482a:	d111      	bne.n	8004850 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2228      	movs	r2, #40	; 0x28
 8004830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2222      	movs	r2, #34	; 0x22
 8004838:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800483a:	2102      	movs	r1, #2
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 fce1 	bl	8005204 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7ff fbac 	bl	8003fa8 <HAL_I2C_SlaveRxCpltCallback>
}
 8004850:	bf00      	nop
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2220      	movs	r2, #32
 8004868:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6859      	ldr	r1, [r3, #4]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	4b44      	ldr	r3, [pc, #272]	; (8004988 <I2C_ITMasterCplt+0x130>)
 8004876:	400b      	ands	r3, r1
 8004878:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a40      	ldr	r2, [pc, #256]	; (800498c <I2C_ITMasterCplt+0x134>)
 800488a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	091b      	lsrs	r3, r3, #4
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d009      	beq.n	80048ac <I2C_ITMasterCplt+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2210      	movs	r2, #16
 800489e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a4:	f043 0204 	orr.w	r2, r3, #4
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 fa59 	bl	8004d64 <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80048b2:	2103      	movs	r1, #3
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fca5 	bl	8005204 <I2C_Disable_IRQ>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048be:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b60      	cmp	r3, #96	; 0x60
 80048ca:	d002      	beq.n	80048d2 <I2C_ITMasterCplt+0x7a>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d006      	beq.n	80048e0 <I2C_ITMasterCplt+0x88>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d6:	4619      	mov	r1, r3
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f983 	bl	8004be4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80048de:	e04e      	b.n	800497e <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b21      	cmp	r3, #33	; 0x21
 80048ea:	d121      	bne.n	8004930 <I2C_ITMasterCplt+0xd8>
    hi2c->State = HAL_I2C_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2220      	movs	r2, #32
 80048f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b40      	cmp	r3, #64	; 0x40
 80048fe:	d10b      	bne.n	8004918 <I2C_ITMasterCplt+0xc0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7ff fb6b 	bl	8003fec <HAL_I2C_MemTxCpltCallback>
}
 8004916:	e032      	b.n	800497e <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7ff fb1f 	bl	8003f6c <HAL_I2C_MasterTxCpltCallback>
}
 800492e:	e026      	b.n	800497e <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b22      	cmp	r3, #34	; 0x22
 800493a:	d120      	bne.n	800497e <I2C_ITMasterCplt+0x126>
    hi2c->State = HAL_I2C_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2220      	movs	r2, #32
 8004940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b40      	cmp	r3, #64	; 0x40
 800494e:	d10b      	bne.n	8004968 <I2C_ITMasterCplt+0x110>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f7ff fb4d 	bl	8004000 <HAL_I2C_MemRxCpltCallback>
}
 8004966:	e00a      	b.n	800497e <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f7ff fb01 	bl	8003f80 <HAL_I2C_MasterRxCpltCallback>
}
 800497e:	bf00      	nop
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	fe00e800 	.word	0xfe00e800
 800498c:	ffff0000 	.word	0xffff0000

08004990 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2220      	movs	r2, #32
 80049ac:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80049ae:	2107      	movs	r1, #7
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 fc27 	bl	8005204 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049c4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	6859      	ldr	r1, [r3, #4]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	4b58      	ldr	r3, [pc, #352]	; (8004b34 <I2C_ITSlaveCplt+0x1a4>)
 80049d2:	400b      	ands	r3, r1
 80049d4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f9c4 	bl	8004d64 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	0b9b      	lsrs	r3, r3, #14
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00b      	beq.n	8004a00 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d018      	beq.n	8004a22 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049fe:	e010      	b.n	8004a22 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	0bdb      	lsrs	r3, r3, #15
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00a      	beq.n	8004a22 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d006      	beq.n	8004a22 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	089b      	lsrs	r3, r3, #2
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d020      	beq.n	8004a70 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f023 0304 	bic.w	r3, r3, #4
 8004a34:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a48:	1c5a      	adds	r2, r3, #1
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00c      	beq.n	8004a70 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d005      	beq.n	8004a86 <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7e:	f043 0204 	orr.w	r2, r3, #4
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d010      	beq.n	8004ac4 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f89b 	bl	8004be4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b28      	cmp	r3, #40	; 0x28
 8004ab8:	d138      	bne.n	8004b2c <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004aba:	68f9      	ldr	r1, [r7, #12]
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f83d 	bl	8004b3c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ac2:	e033      	b.n	8004b2c <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004acc:	d011      	beq.n	8004af2 <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7ff fe85 	bl	80047de <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a18      	ldr	r2, [pc, #96]	; (8004b38 <I2C_ITSlaveCplt+0x1a8>)
 8004ad8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff fa74 	bl	8003fd8 <HAL_I2C_ListenCpltCallback>
}
 8004af0:	e01c      	b.n	8004b2c <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b22      	cmp	r3, #34	; 0x22
 8004afc:	d10b      	bne.n	8004b16 <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7ff fa4a 	bl	8003fa8 <HAL_I2C_SlaveRxCpltCallback>
}
 8004b14:	e00a      	b.n	8004b2c <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7ff fa34 	bl	8003f94 <HAL_I2C_SlaveTxCpltCallback>
}
 8004b2c:	bf00      	nop
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	fe00e800 	.word	0xfe00e800
 8004b38:	ffff0000 	.word	0xffff0000

08004b3c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a25      	ldr	r2, [pc, #148]	; (8004be0 <I2C_ITListenCplt+0xa4>)
 8004b4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2220      	movs	r2, #32
 8004b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	089b      	lsrs	r3, r3, #2
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d022      	beq.n	8004bba <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	b2d2      	uxtb	r2, r2
 8004b80:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d012      	beq.n	8004bba <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb2:	f043 0204 	orr.w	r2, r3, #4
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004bba:	2107      	movs	r1, #7
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 fb21 	bl	8005204 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2210      	movs	r2, #16
 8004bc8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7ff fa00 	bl	8003fd8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004bd8:	bf00      	nop
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	ffff0000 	.word	0xffff0000

08004be4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bf4:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a55      	ldr	r2, [pc, #340]	; (8004d58 <I2C_ITError+0x174>)
 8004c02:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	431a      	orrs	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004c16:	7bfb      	ldrb	r3, [r7, #15]
 8004c18:	2b28      	cmp	r3, #40	; 0x28
 8004c1a:	d005      	beq.n	8004c28 <I2C_ITError+0x44>
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	2b29      	cmp	r3, #41	; 0x29
 8004c20:	d002      	beq.n	8004c28 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004c22:	7bfb      	ldrb	r3, [r7, #15]
 8004c24:	2b2a      	cmp	r3, #42	; 0x2a
 8004c26:	d10e      	bne.n	8004c46 <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004c28:	2103      	movs	r1, #3
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 faea 	bl	8005204 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2228      	movs	r2, #40	; 0x28
 8004c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a46      	ldr	r2, [pc, #280]	; (8004d5c <I2C_ITError+0x178>)
 8004c42:	635a      	str	r2, [r3, #52]	; 0x34
 8004c44:	e013      	b.n	8004c6e <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004c46:	2107      	movs	r1, #7
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 fadb 	bl	8005204 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b60      	cmp	r3, #96	; 0x60
 8004c58:	d003      	beq.n	8004c62 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c7c:	d123      	bne.n	8004cc6 <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c8c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d05c      	beq.n	8004d50 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9a:	4a31      	ldr	r2, [pc, #196]	; (8004d60 <I2C_ITError+0x17c>)
 8004c9c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fe fb3a 	bl	8003324 <HAL_DMA_Abort_IT>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d04c      	beq.n	8004d50 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004cc4:	e044      	b.n	8004d50 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cd4:	d123      	bne.n	8004d1e <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ce4:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d030      	beq.n	8004d50 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf2:	4a1b      	ldr	r2, [pc, #108]	; (8004d60 <I2C_ITError+0x17c>)
 8004cf4:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fe fb0e 	bl	8003324 <HAL_DMA_Abort_IT>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d020      	beq.n	8004d50 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d18:	4610      	mov	r0, r2
 8004d1a:	4798      	blx	r3
}
 8004d1c:	e018      	b.n	8004d50 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b60      	cmp	r3, #96	; 0x60
 8004d28:	d10b      	bne.n	8004d42 <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7ff f974 	bl	8004028 <HAL_I2C_AbortCpltCallback>
}
 8004d40:	e006      	b.n	8004d50 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7ff f962 	bl	8004014 <HAL_I2C_ErrorCallback>
}
 8004d50:	bf00      	nop
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	ffff0000 	.word	0xffff0000
 8004d5c:	0800403d 	.word	0x0800403d
 8004d60:	08004eb7 	.word	0x08004eb7

08004d64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d103      	bne.n	8004d82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d007      	beq.n	8004da0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699a      	ldr	r2, [r3, #24]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f042 0201 	orr.w	r2, r2, #1
 8004d9e:	619a      	str	r2, [r3, #24]
  }
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004dc8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d104      	bne.n	8004dde <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004dd4:	2112      	movs	r1, #18
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 f9a6 	bl	8005128 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004ddc:	e02d      	b.n	8004e3a <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8004de6:	441a      	add	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	2bff      	cmp	r3, #255	; 0xff
 8004df4:	d903      	bls.n	8004dfe <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	22ff      	movs	r2, #255	; 0xff
 8004dfa:	851a      	strh	r2, [r3, #40]	; 0x28
 8004dfc:	e004      	b.n	8004e08 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	4619      	mov	r1, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3328      	adds	r3, #40	; 0x28
 8004e18:	461a      	mov	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1e:	f7fe fa21 	bl	8003264 <HAL_DMA_Start_IT>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d004      	beq.n	8004e32 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004e28:	2110      	movs	r1, #16
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f7ff feda 	bl	8004be4 <I2C_ITError>
}
 8004e30:	e003      	b.n	8004e3a <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004e32:	2112      	movs	r1, #18
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f000 f977 	bl	8005128 <I2C_Enable_IRQ>
}
 8004e3a:	bf00      	nop
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b084      	sub	sp, #16
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e52:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d007      	beq.n	8004e6c <I2C_DMAError+0x2a>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d101      	bne.n	8004e6c <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d007      	beq.n	8004e84 <I2C_DMAError+0x42>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8004e80:	2301      	movs	r3, #1
 8004e82:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7fe fc4d 	bl	8003724 <HAL_DMA_GetError>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d00e      	beq.n	8004eae <I2C_DMAError+0x6c>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00b      	beq.n	8004eae <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ea4:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004ea6:	2110      	movs	r1, #16
 8004ea8:	68b8      	ldr	r0, [r7, #8]
 8004eaa:	f7ff fe9b 	bl	8004be4 <I2C_ITError>
  }
}
 8004eae:	bf00      	nop
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b084      	sub	sp, #16
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec8:	2200      	movs	r2, #0
 8004eca:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b60      	cmp	r3, #96	; 0x60
 8004ede:	d107      	bne.n	8004ef0 <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f7ff f89d 	bl	8004028 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004eee:	e002      	b.n	8004ef6 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f7ff f88f 	bl	8004014 <HAL_I2C_ErrorCallback>
}
 8004ef6:	bf00      	nop
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b084      	sub	sp, #16
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	60f8      	str	r0, [r7, #12]
 8004f06:	60b9      	str	r1, [r7, #8]
 8004f08:	603b      	str	r3, [r7, #0]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f0e:	e022      	b.n	8004f56 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f16:	d01e      	beq.n	8004f56 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f18:	f7fd fd50 	bl	80029bc <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d302      	bcc.n	8004f2e <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d113      	bne.n	8004f56 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f32:	f043 0220 	orr.w	r2, r3, #32
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e00f      	b.n	8004f76 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	699a      	ldr	r2, [r3, #24]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	bf0c      	ite	eq
 8004f66:	2301      	moveq	r3, #1
 8004f68:	2300      	movne	r3, #0
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	79fb      	ldrb	r3, [r7, #7]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d0cd      	beq.n	8004f10 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b084      	sub	sp, #16
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	60f8      	str	r0, [r7, #12]
 8004f86:	60b9      	str	r1, [r7, #8]
 8004f88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f8a:	e02c      	b.n	8004fe6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	68b9      	ldr	r1, [r7, #8]
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 f835 	bl	8005000 <I2C_IsAcknowledgeFailed>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d001      	beq.n	8004fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e02a      	b.n	8004ff6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa6:	d01e      	beq.n	8004fe6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fa8:	f7fd fd08 	bl	80029bc <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d302      	bcc.n	8004fbe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d113      	bne.n	8004fe6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc2:	f043 0220 	orr.w	r2, r3, #32
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2220      	movs	r2, #32
 8004fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e007      	b.n	8004ff6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d1cb      	bne.n	8004f8c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	f003 0310 	and.w	r3, r3, #16
 8005016:	2b10      	cmp	r3, #16
 8005018:	d151      	bne.n	80050be <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800501a:	e022      	b.n	8005062 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005022:	d01e      	beq.n	8005062 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005024:	f7fd fcca 	bl	80029bc <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	429a      	cmp	r2, r3
 8005032:	d302      	bcc.n	800503a <I2C_IsAcknowledgeFailed+0x3a>
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d113      	bne.n	8005062 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503e:	f043 0220 	orr.w	r2, r3, #32
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2220      	movs	r2, #32
 800504a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e02e      	b.n	80050c0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	f003 0320 	and.w	r3, r3, #32
 800506c:	2b20      	cmp	r3, #32
 800506e:	d1d5      	bne.n	800501c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2210      	movs	r2, #16
 8005076:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2220      	movs	r2, #32
 800507e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f7ff fe6f 	bl	8004d64 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6859      	ldr	r1, [r3, #4]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	4b0d      	ldr	r3, [pc, #52]	; (80050c8 <I2C_IsAcknowledgeFailed+0xc8>)
 8005092:	400b      	ands	r3, r1
 8005094:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509a:	f043 0204 	orr.w	r2, r3, #4
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2220      	movs	r2, #32
 80050a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e000      	b.n	80050c0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	fe00e800 	.word	0xfe00e800

080050cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	607b      	str	r3, [r7, #4]
 80050d6:	460b      	mov	r3, r1
 80050d8:	817b      	strh	r3, [r7, #10]
 80050da:	4613      	mov	r3, r2
 80050dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	0d5b      	lsrs	r3, r3, #21
 80050e8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80050ec:	4b0d      	ldr	r3, [pc, #52]	; (8005124 <I2C_TransferConfig+0x58>)
 80050ee:	430b      	orrs	r3, r1
 80050f0:	43db      	mvns	r3, r3
 80050f2:	ea02 0103 	and.w	r1, r2, r3
 80050f6:	897b      	ldrh	r3, [r7, #10]
 80050f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80050fc:	7a7b      	ldrb	r3, [r7, #9]
 80050fe:	041b      	lsls	r3, r3, #16
 8005100:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005104:	431a      	orrs	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	431a      	orrs	r2, r3
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	431a      	orrs	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005116:	bf00      	nop
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	03ff63ff 	.word	0x03ff63ff

08005128 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	460b      	mov	r3, r1
 8005132:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005134:	2300      	movs	r3, #0
 8005136:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800513c:	4a2f      	ldr	r2, [pc, #188]	; (80051fc <I2C_Enable_IRQ+0xd4>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d004      	beq.n	800514c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005146:	4a2e      	ldr	r2, [pc, #184]	; (8005200 <I2C_Enable_IRQ+0xd8>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d124      	bne.n	8005196 <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800514c:	887b      	ldrh	r3, [r7, #2]
 800514e:	f003 0304 	and.w	r3, r3, #4
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800515c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800515e:	887b      	ldrh	r3, [r7, #2]
 8005160:	f003 0311 	and.w	r3, r3, #17
 8005164:	2b11      	cmp	r3, #17
 8005166:	d103      	bne.n	8005170 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800516e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8005170:	887b      	ldrh	r3, [r7, #2]
 8005172:	f003 0312 	and.w	r3, r3, #18
 8005176:	2b12      	cmp	r3, #18
 8005178:	d103      	bne.n	8005182 <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f043 0320 	orr.w	r3, r3, #32
 8005180:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8005182:	887b      	ldrh	r3, [r7, #2]
 8005184:	f003 0312 	and.w	r3, r3, #18
 8005188:	2b12      	cmp	r3, #18
 800518a:	d128      	bne.n	80051de <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005192:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8005194:	e023      	b.n	80051de <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005196:	887b      	ldrh	r3, [r7, #2]
 8005198:	f003 0304 	and.w	r3, r3, #4
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80051a6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80051a8:	887b      	ldrh	r3, [r7, #2]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80051b8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80051ba:	887b      	ldrh	r3, [r7, #2]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80051ca:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80051cc:	887b      	ldrh	r3, [r7, #2]
 80051ce:	f003 0312 	and.w	r3, r3, #18
 80051d2:	2b12      	cmp	r3, #18
 80051d4:	d103      	bne.n	80051de <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f043 0320 	orr.w	r3, r3, #32
 80051dc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6819      	ldr	r1, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	601a      	str	r2, [r3, #0]
}
 80051ee:	bf00      	nop
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	08004243 	.word	0x08004243
 8005200:	08004429 	.word	0x08004429

08005204 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	460b      	mov	r3, r1
 800520e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005210:	2300      	movs	r3, #0
 8005212:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005214:	887b      	ldrh	r3, [r7, #2]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00f      	beq.n	800523e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005224:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800522c:	b2db      	uxtb	r3, r3
 800522e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005232:	2b28      	cmp	r3, #40	; 0x28
 8005234:	d003      	beq.n	800523e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800523c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800523e:	887b      	ldrh	r3, [r7, #2]
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00f      	beq.n	8005268 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800524e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005256:	b2db      	uxtb	r3, r3
 8005258:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800525c:	2b28      	cmp	r3, #40	; 0x28
 800525e:	d003      	beq.n	8005268 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005266:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005268:	887b      	ldrh	r3, [r7, #2]
 800526a:	f003 0304 	and.w	r3, r3, #4
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005278:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800527a:	887b      	ldrh	r3, [r7, #2]
 800527c:	f003 0311 	and.w	r3, r3, #17
 8005280:	2b11      	cmp	r3, #17
 8005282:	d103      	bne.n	800528c <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800528a:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800528c:	887b      	ldrh	r3, [r7, #2]
 800528e:	f003 0312 	and.w	r3, r3, #18
 8005292:	2b12      	cmp	r3, #18
 8005294:	d103      	bne.n	800529e <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f043 0320 	orr.w	r3, r3, #32
 800529c:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800529e:	887b      	ldrh	r3, [r7, #2]
 80052a0:	f003 0312 	and.w	r3, r3, #18
 80052a4:	2b12      	cmp	r3, #18
 80052a6:	d103      	bne.n	80052b0 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052ae:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6819      	ldr	r1, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	43da      	mvns	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	400a      	ands	r2, r1
 80052c0:	601a      	str	r2, [r3, #0]
}
 80052c2:	bf00      	nop
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b083      	sub	sp, #12
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b20      	cmp	r3, #32
 80052e2:	d138      	bne.n	8005356 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d101      	bne.n	80052f2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80052ee:	2302      	movs	r3, #2
 80052f0:	e032      	b.n	8005358 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2224      	movs	r2, #36	; 0x24
 80052fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0201 	bic.w	r2, r2, #1
 8005310:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005320:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6819      	ldr	r1, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f042 0201 	orr.w	r2, r2, #1
 8005340:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2220      	movs	r2, #32
 8005346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005352:	2300      	movs	r3, #0
 8005354:	e000      	b.n	8005358 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005356:	2302      	movs	r3, #2
  }
}
 8005358:	4618      	mov	r0, r3
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b20      	cmp	r3, #32
 8005378:	d139      	bne.n	80053ee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005380:	2b01      	cmp	r3, #1
 8005382:	d101      	bne.n	8005388 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005384:	2302      	movs	r3, #2
 8005386:	e033      	b.n	80053f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2224      	movs	r2, #36	; 0x24
 8005394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 0201 	bic.w	r2, r2, #1
 80053a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80053b6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	021b      	lsls	r3, r3, #8
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f042 0201 	orr.w	r2, r2, #1
 80053d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2220      	movs	r2, #32
 80053de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053ea:	2300      	movs	r3, #0
 80053ec:	e000      	b.n	80053f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80053ee:	2302      	movs	r3, #2
  }
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005400:	4b05      	ldr	r3, [pc, #20]	; (8005418 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a04      	ldr	r2, [pc, #16]	; (8005418 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800540a:	6013      	str	r3, [r2, #0]
}
 800540c:	bf00      	nop
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	40007000 	.word	0x40007000

0800541c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005422:	2300      	movs	r3, #0
 8005424:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005426:	4b23      	ldr	r3, [pc, #140]	; (80054b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542a:	4a22      	ldr	r2, [pc, #136]	; (80054b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800542c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005430:	6413      	str	r3, [r2, #64]	; 0x40
 8005432:	4b20      	ldr	r3, [pc, #128]	; (80054b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800543a:	603b      	str	r3, [r7, #0]
 800543c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800543e:	4b1e      	ldr	r3, [pc, #120]	; (80054b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a1d      	ldr	r2, [pc, #116]	; (80054b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005448:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800544a:	f7fd fab7 	bl	80029bc <HAL_GetTick>
 800544e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005450:	e009      	b.n	8005466 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005452:	f7fd fab3 	bl	80029bc <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005460:	d901      	bls.n	8005466 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e022      	b.n	80054ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005466:	4b14      	ldr	r3, [pc, #80]	; (80054b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800546e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005472:	d1ee      	bne.n	8005452 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005474:	4b10      	ldr	r3, [pc, #64]	; (80054b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a0f      	ldr	r2, [pc, #60]	; (80054b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800547a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800547e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005480:	f7fd fa9c 	bl	80029bc <HAL_GetTick>
 8005484:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005486:	e009      	b.n	800549c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005488:	f7fd fa98 	bl	80029bc <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005496:	d901      	bls.n	800549c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e007      	b.n	80054ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800549c:	4b06      	ldr	r3, [pc, #24]	; (80054b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054a8:	d1ee      	bne.n	8005488 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	40023800 	.word	0x40023800
 80054b8:	40007000 	.word	0x40007000

080054bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80054c4:	2300      	movs	r3, #0
 80054c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e291      	b.n	80059f6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f000 8087 	beq.w	80055ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054e0:	4b96      	ldr	r3, [pc, #600]	; (800573c <HAL_RCC_OscConfig+0x280>)
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f003 030c 	and.w	r3, r3, #12
 80054e8:	2b04      	cmp	r3, #4
 80054ea:	d00c      	beq.n	8005506 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054ec:	4b93      	ldr	r3, [pc, #588]	; (800573c <HAL_RCC_OscConfig+0x280>)
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f003 030c 	and.w	r3, r3, #12
 80054f4:	2b08      	cmp	r3, #8
 80054f6:	d112      	bne.n	800551e <HAL_RCC_OscConfig+0x62>
 80054f8:	4b90      	ldr	r3, [pc, #576]	; (800573c <HAL_RCC_OscConfig+0x280>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005504:	d10b      	bne.n	800551e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005506:	4b8d      	ldr	r3, [pc, #564]	; (800573c <HAL_RCC_OscConfig+0x280>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d06c      	beq.n	80055ec <HAL_RCC_OscConfig+0x130>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d168      	bne.n	80055ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e26b      	b.n	80059f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005526:	d106      	bne.n	8005536 <HAL_RCC_OscConfig+0x7a>
 8005528:	4b84      	ldr	r3, [pc, #528]	; (800573c <HAL_RCC_OscConfig+0x280>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a83      	ldr	r2, [pc, #524]	; (800573c <HAL_RCC_OscConfig+0x280>)
 800552e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005532:	6013      	str	r3, [r2, #0]
 8005534:	e02e      	b.n	8005594 <HAL_RCC_OscConfig+0xd8>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10c      	bne.n	8005558 <HAL_RCC_OscConfig+0x9c>
 800553e:	4b7f      	ldr	r3, [pc, #508]	; (800573c <HAL_RCC_OscConfig+0x280>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a7e      	ldr	r2, [pc, #504]	; (800573c <HAL_RCC_OscConfig+0x280>)
 8005544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	4b7c      	ldr	r3, [pc, #496]	; (800573c <HAL_RCC_OscConfig+0x280>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a7b      	ldr	r2, [pc, #492]	; (800573c <HAL_RCC_OscConfig+0x280>)
 8005550:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005554:	6013      	str	r3, [r2, #0]
 8005556:	e01d      	b.n	8005594 <HAL_RCC_OscConfig+0xd8>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005560:	d10c      	bne.n	800557c <HAL_RCC_OscConfig+0xc0>
 8005562:	4b76      	ldr	r3, [pc, #472]	; (800573c <HAL_RCC_OscConfig+0x280>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a75      	ldr	r2, [pc, #468]	; (800573c <HAL_RCC_OscConfig+0x280>)
 8005568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800556c:	6013      	str	r3, [r2, #0]
 800556e:	4b73      	ldr	r3, [pc, #460]	; (800573c <HAL_RCC_OscConfig+0x280>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a72      	ldr	r2, [pc, #456]	; (800573c <HAL_RCC_OscConfig+0x280>)
 8005574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005578:	6013      	str	r3, [r2, #0]
 800557a:	e00b      	b.n	8005594 <HAL_RCC_OscConfig+0xd8>
 800557c:	4b6f      	ldr	r3, [pc, #444]	; (800573c <HAL_RCC_OscConfig+0x280>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a6e      	ldr	r2, [pc, #440]	; (800573c <HAL_RCC_OscConfig+0x280>)
 8005582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005586:	6013      	str	r3, [r2, #0]
 8005588:	4b6c      	ldr	r3, [pc, #432]	; (800573c <HAL_RCC_OscConfig+0x280>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a6b      	ldr	r2, [pc, #428]	; (800573c <HAL_RCC_OscConfig+0x280>)
 800558e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d013      	beq.n	80055c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800559c:	f7fd fa0e 	bl	80029bc <HAL_GetTick>
 80055a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055a2:	e008      	b.n	80055b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055a4:	f7fd fa0a 	bl	80029bc <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b64      	cmp	r3, #100	; 0x64
 80055b0:	d901      	bls.n	80055b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e21f      	b.n	80059f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055b6:	4b61      	ldr	r3, [pc, #388]	; (800573c <HAL_RCC_OscConfig+0x280>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d0f0      	beq.n	80055a4 <HAL_RCC_OscConfig+0xe8>
 80055c2:	e014      	b.n	80055ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c4:	f7fd f9fa 	bl	80029bc <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ca:	e008      	b.n	80055de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055cc:	f7fd f9f6 	bl	80029bc <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b64      	cmp	r3, #100	; 0x64
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e20b      	b.n	80059f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055de:	4b57      	ldr	r3, [pc, #348]	; (800573c <HAL_RCC_OscConfig+0x280>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1f0      	bne.n	80055cc <HAL_RCC_OscConfig+0x110>
 80055ea:	e000      	b.n	80055ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d069      	beq.n	80056ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80055fa:	4b50      	ldr	r3, [pc, #320]	; (800573c <HAL_RCC_OscConfig+0x280>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 030c 	and.w	r3, r3, #12
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00b      	beq.n	800561e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005606:	4b4d      	ldr	r3, [pc, #308]	; (800573c <HAL_RCC_OscConfig+0x280>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f003 030c 	and.w	r3, r3, #12
 800560e:	2b08      	cmp	r3, #8
 8005610:	d11c      	bne.n	800564c <HAL_RCC_OscConfig+0x190>
 8005612:	4b4a      	ldr	r3, [pc, #296]	; (800573c <HAL_RCC_OscConfig+0x280>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d116      	bne.n	800564c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800561e:	4b47      	ldr	r3, [pc, #284]	; (800573c <HAL_RCC_OscConfig+0x280>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d005      	beq.n	8005636 <HAL_RCC_OscConfig+0x17a>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d001      	beq.n	8005636 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e1df      	b.n	80059f6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005636:	4b41      	ldr	r3, [pc, #260]	; (800573c <HAL_RCC_OscConfig+0x280>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	00db      	lsls	r3, r3, #3
 8005644:	493d      	ldr	r1, [pc, #244]	; (800573c <HAL_RCC_OscConfig+0x280>)
 8005646:	4313      	orrs	r3, r2
 8005648:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800564a:	e040      	b.n	80056ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d023      	beq.n	800569c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005654:	4b39      	ldr	r3, [pc, #228]	; (800573c <HAL_RCC_OscConfig+0x280>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a38      	ldr	r2, [pc, #224]	; (800573c <HAL_RCC_OscConfig+0x280>)
 800565a:	f043 0301 	orr.w	r3, r3, #1
 800565e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005660:	f7fd f9ac 	bl	80029bc <HAL_GetTick>
 8005664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005666:	e008      	b.n	800567a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005668:	f7fd f9a8 	bl	80029bc <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b02      	cmp	r3, #2
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e1bd      	b.n	80059f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800567a:	4b30      	ldr	r3, [pc, #192]	; (800573c <HAL_RCC_OscConfig+0x280>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d0f0      	beq.n	8005668 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005686:	4b2d      	ldr	r3, [pc, #180]	; (800573c <HAL_RCC_OscConfig+0x280>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	4929      	ldr	r1, [pc, #164]	; (800573c <HAL_RCC_OscConfig+0x280>)
 8005696:	4313      	orrs	r3, r2
 8005698:	600b      	str	r3, [r1, #0]
 800569a:	e018      	b.n	80056ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800569c:	4b27      	ldr	r3, [pc, #156]	; (800573c <HAL_RCC_OscConfig+0x280>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a26      	ldr	r2, [pc, #152]	; (800573c <HAL_RCC_OscConfig+0x280>)
 80056a2:	f023 0301 	bic.w	r3, r3, #1
 80056a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a8:	f7fd f988 	bl	80029bc <HAL_GetTick>
 80056ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ae:	e008      	b.n	80056c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056b0:	f7fd f984 	bl	80029bc <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e199      	b.n	80059f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056c2:	4b1e      	ldr	r3, [pc, #120]	; (800573c <HAL_RCC_OscConfig+0x280>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1f0      	bne.n	80056b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0308 	and.w	r3, r3, #8
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d038      	beq.n	800574c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d019      	beq.n	8005716 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056e2:	4b16      	ldr	r3, [pc, #88]	; (800573c <HAL_RCC_OscConfig+0x280>)
 80056e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056e6:	4a15      	ldr	r2, [pc, #84]	; (800573c <HAL_RCC_OscConfig+0x280>)
 80056e8:	f043 0301 	orr.w	r3, r3, #1
 80056ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ee:	f7fd f965 	bl	80029bc <HAL_GetTick>
 80056f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056f4:	e008      	b.n	8005708 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056f6:	f7fd f961 	bl	80029bc <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b02      	cmp	r3, #2
 8005702:	d901      	bls.n	8005708 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e176      	b.n	80059f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005708:	4b0c      	ldr	r3, [pc, #48]	; (800573c <HAL_RCC_OscConfig+0x280>)
 800570a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d0f0      	beq.n	80056f6 <HAL_RCC_OscConfig+0x23a>
 8005714:	e01a      	b.n	800574c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005716:	4b09      	ldr	r3, [pc, #36]	; (800573c <HAL_RCC_OscConfig+0x280>)
 8005718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800571a:	4a08      	ldr	r2, [pc, #32]	; (800573c <HAL_RCC_OscConfig+0x280>)
 800571c:	f023 0301 	bic.w	r3, r3, #1
 8005720:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005722:	f7fd f94b 	bl	80029bc <HAL_GetTick>
 8005726:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005728:	e00a      	b.n	8005740 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800572a:	f7fd f947 	bl	80029bc <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d903      	bls.n	8005740 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e15c      	b.n	80059f6 <HAL_RCC_OscConfig+0x53a>
 800573c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005740:	4b91      	ldr	r3, [pc, #580]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 8005742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1ee      	bne.n	800572a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0304 	and.w	r3, r3, #4
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 80a4 	beq.w	80058a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800575a:	4b8b      	ldr	r3, [pc, #556]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10d      	bne.n	8005782 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005766:	4b88      	ldr	r3, [pc, #544]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 8005768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576a:	4a87      	ldr	r2, [pc, #540]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 800576c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005770:	6413      	str	r3, [r2, #64]	; 0x40
 8005772:	4b85      	ldr	r3, [pc, #532]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 8005774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800577a:	60bb      	str	r3, [r7, #8]
 800577c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800577e:	2301      	movs	r3, #1
 8005780:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005782:	4b82      	ldr	r3, [pc, #520]	; (800598c <HAL_RCC_OscConfig+0x4d0>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800578a:	2b00      	cmp	r3, #0
 800578c:	d118      	bne.n	80057c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800578e:	4b7f      	ldr	r3, [pc, #508]	; (800598c <HAL_RCC_OscConfig+0x4d0>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a7e      	ldr	r2, [pc, #504]	; (800598c <HAL_RCC_OscConfig+0x4d0>)
 8005794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800579a:	f7fd f90f 	bl	80029bc <HAL_GetTick>
 800579e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057a0:	e008      	b.n	80057b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057a2:	f7fd f90b 	bl	80029bc <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b64      	cmp	r3, #100	; 0x64
 80057ae:	d901      	bls.n	80057b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e120      	b.n	80059f6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057b4:	4b75      	ldr	r3, [pc, #468]	; (800598c <HAL_RCC_OscConfig+0x4d0>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d0f0      	beq.n	80057a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d106      	bne.n	80057d6 <HAL_RCC_OscConfig+0x31a>
 80057c8:	4b6f      	ldr	r3, [pc, #444]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 80057ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057cc:	4a6e      	ldr	r2, [pc, #440]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 80057ce:	f043 0301 	orr.w	r3, r3, #1
 80057d2:	6713      	str	r3, [r2, #112]	; 0x70
 80057d4:	e02d      	b.n	8005832 <HAL_RCC_OscConfig+0x376>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10c      	bne.n	80057f8 <HAL_RCC_OscConfig+0x33c>
 80057de:	4b6a      	ldr	r3, [pc, #424]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 80057e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e2:	4a69      	ldr	r2, [pc, #420]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 80057e4:	f023 0301 	bic.w	r3, r3, #1
 80057e8:	6713      	str	r3, [r2, #112]	; 0x70
 80057ea:	4b67      	ldr	r3, [pc, #412]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 80057ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ee:	4a66      	ldr	r2, [pc, #408]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 80057f0:	f023 0304 	bic.w	r3, r3, #4
 80057f4:	6713      	str	r3, [r2, #112]	; 0x70
 80057f6:	e01c      	b.n	8005832 <HAL_RCC_OscConfig+0x376>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	2b05      	cmp	r3, #5
 80057fe:	d10c      	bne.n	800581a <HAL_RCC_OscConfig+0x35e>
 8005800:	4b61      	ldr	r3, [pc, #388]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 8005802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005804:	4a60      	ldr	r2, [pc, #384]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 8005806:	f043 0304 	orr.w	r3, r3, #4
 800580a:	6713      	str	r3, [r2, #112]	; 0x70
 800580c:	4b5e      	ldr	r3, [pc, #376]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 800580e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005810:	4a5d      	ldr	r2, [pc, #372]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 8005812:	f043 0301 	orr.w	r3, r3, #1
 8005816:	6713      	str	r3, [r2, #112]	; 0x70
 8005818:	e00b      	b.n	8005832 <HAL_RCC_OscConfig+0x376>
 800581a:	4b5b      	ldr	r3, [pc, #364]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 800581c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581e:	4a5a      	ldr	r2, [pc, #360]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 8005820:	f023 0301 	bic.w	r3, r3, #1
 8005824:	6713      	str	r3, [r2, #112]	; 0x70
 8005826:	4b58      	ldr	r3, [pc, #352]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 8005828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582a:	4a57      	ldr	r2, [pc, #348]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 800582c:	f023 0304 	bic.w	r3, r3, #4
 8005830:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d015      	beq.n	8005866 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800583a:	f7fd f8bf 	bl	80029bc <HAL_GetTick>
 800583e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005840:	e00a      	b.n	8005858 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005842:	f7fd f8bb 	bl	80029bc <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005850:	4293      	cmp	r3, r2
 8005852:	d901      	bls.n	8005858 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e0ce      	b.n	80059f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005858:	4b4b      	ldr	r3, [pc, #300]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 800585a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d0ee      	beq.n	8005842 <HAL_RCC_OscConfig+0x386>
 8005864:	e014      	b.n	8005890 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005866:	f7fd f8a9 	bl	80029bc <HAL_GetTick>
 800586a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800586c:	e00a      	b.n	8005884 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800586e:	f7fd f8a5 	bl	80029bc <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	f241 3288 	movw	r2, #5000	; 0x1388
 800587c:	4293      	cmp	r3, r2
 800587e:	d901      	bls.n	8005884 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e0b8      	b.n	80059f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005884:	4b40      	ldr	r3, [pc, #256]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 8005886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1ee      	bne.n	800586e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005890:	7dfb      	ldrb	r3, [r7, #23]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d105      	bne.n	80058a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005896:	4b3c      	ldr	r3, [pc, #240]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	4a3b      	ldr	r2, [pc, #236]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 800589c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f000 80a4 	beq.w	80059f4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058ac:	4b36      	ldr	r3, [pc, #216]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f003 030c 	and.w	r3, r3, #12
 80058b4:	2b08      	cmp	r3, #8
 80058b6:	d06b      	beq.n	8005990 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d149      	bne.n	8005954 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058c0:	4b31      	ldr	r3, [pc, #196]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a30      	ldr	r2, [pc, #192]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 80058c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058cc:	f7fd f876 	bl	80029bc <HAL_GetTick>
 80058d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058d2:	e008      	b.n	80058e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058d4:	f7fd f872 	bl	80029bc <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e087      	b.n	80059f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058e6:	4b28      	ldr	r3, [pc, #160]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1f0      	bne.n	80058d4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	69da      	ldr	r2, [r3, #28]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	431a      	orrs	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	019b      	lsls	r3, r3, #6
 8005902:	431a      	orrs	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005908:	085b      	lsrs	r3, r3, #1
 800590a:	3b01      	subs	r3, #1
 800590c:	041b      	lsls	r3, r3, #16
 800590e:	431a      	orrs	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005914:	061b      	lsls	r3, r3, #24
 8005916:	4313      	orrs	r3, r2
 8005918:	4a1b      	ldr	r2, [pc, #108]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 800591a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800591e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005920:	4b19      	ldr	r3, [pc, #100]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a18      	ldr	r2, [pc, #96]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 8005926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800592a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800592c:	f7fd f846 	bl	80029bc <HAL_GetTick>
 8005930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005932:	e008      	b.n	8005946 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005934:	f7fd f842 	bl	80029bc <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b02      	cmp	r3, #2
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e057      	b.n	80059f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005946:	4b10      	ldr	r3, [pc, #64]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d0f0      	beq.n	8005934 <HAL_RCC_OscConfig+0x478>
 8005952:	e04f      	b.n	80059f4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005954:	4b0c      	ldr	r3, [pc, #48]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a0b      	ldr	r2, [pc, #44]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 800595a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800595e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005960:	f7fd f82c 	bl	80029bc <HAL_GetTick>
 8005964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005966:	e008      	b.n	800597a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005968:	f7fd f828 	bl	80029bc <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b02      	cmp	r3, #2
 8005974:	d901      	bls.n	800597a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e03d      	b.n	80059f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800597a:	4b03      	ldr	r3, [pc, #12]	; (8005988 <HAL_RCC_OscConfig+0x4cc>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1f0      	bne.n	8005968 <HAL_RCC_OscConfig+0x4ac>
 8005986:	e035      	b.n	80059f4 <HAL_RCC_OscConfig+0x538>
 8005988:	40023800 	.word	0x40023800
 800598c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005990:	4b1b      	ldr	r3, [pc, #108]	; (8005a00 <HAL_RCC_OscConfig+0x544>)
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d028      	beq.n	80059f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d121      	bne.n	80059f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d11a      	bne.n	80059f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059c0:	4013      	ands	r3, r2
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d111      	bne.n	80059f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d6:	085b      	lsrs	r3, r3, #1
 80059d8:	3b01      	subs	r3, #1
 80059da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059dc:	429a      	cmp	r2, r3
 80059de:	d107      	bne.n	80059f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d001      	beq.n	80059f4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e000      	b.n	80059f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	40023800 	.word	0x40023800

08005a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e0d0      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a1c:	4b6a      	ldr	r3, [pc, #424]	; (8005bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 030f 	and.w	r3, r3, #15
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d910      	bls.n	8005a4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a2a:	4b67      	ldr	r3, [pc, #412]	; (8005bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f023 020f 	bic.w	r2, r3, #15
 8005a32:	4965      	ldr	r1, [pc, #404]	; (8005bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a3a:	4b63      	ldr	r3, [pc, #396]	; (8005bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 030f 	and.w	r3, r3, #15
 8005a42:	683a      	ldr	r2, [r7, #0]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d001      	beq.n	8005a4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e0b8      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d020      	beq.n	8005a9a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d005      	beq.n	8005a70 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a64:	4b59      	ldr	r3, [pc, #356]	; (8005bcc <HAL_RCC_ClockConfig+0x1c8>)
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	4a58      	ldr	r2, [pc, #352]	; (8005bcc <HAL_RCC_ClockConfig+0x1c8>)
 8005a6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0308 	and.w	r3, r3, #8
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d005      	beq.n	8005a88 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a7c:	4b53      	ldr	r3, [pc, #332]	; (8005bcc <HAL_RCC_ClockConfig+0x1c8>)
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	4a52      	ldr	r2, [pc, #328]	; (8005bcc <HAL_RCC_ClockConfig+0x1c8>)
 8005a82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a88:	4b50      	ldr	r3, [pc, #320]	; (8005bcc <HAL_RCC_ClockConfig+0x1c8>)
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	494d      	ldr	r1, [pc, #308]	; (8005bcc <HAL_RCC_ClockConfig+0x1c8>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d040      	beq.n	8005b28 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d107      	bne.n	8005abe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aae:	4b47      	ldr	r3, [pc, #284]	; (8005bcc <HAL_RCC_ClockConfig+0x1c8>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d115      	bne.n	8005ae6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e07f      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d107      	bne.n	8005ad6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ac6:	4b41      	ldr	r3, [pc, #260]	; (8005bcc <HAL_RCC_ClockConfig+0x1c8>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d109      	bne.n	8005ae6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e073      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ad6:	4b3d      	ldr	r3, [pc, #244]	; (8005bcc <HAL_RCC_ClockConfig+0x1c8>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e06b      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ae6:	4b39      	ldr	r3, [pc, #228]	; (8005bcc <HAL_RCC_ClockConfig+0x1c8>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f023 0203 	bic.w	r2, r3, #3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	4936      	ldr	r1, [pc, #216]	; (8005bcc <HAL_RCC_ClockConfig+0x1c8>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005af8:	f7fc ff60 	bl	80029bc <HAL_GetTick>
 8005afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005afe:	e00a      	b.n	8005b16 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b00:	f7fc ff5c 	bl	80029bc <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e053      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b16:	4b2d      	ldr	r3, [pc, #180]	; (8005bcc <HAL_RCC_ClockConfig+0x1c8>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 020c 	and.w	r2, r3, #12
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d1eb      	bne.n	8005b00 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b28:	4b27      	ldr	r3, [pc, #156]	; (8005bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 030f 	and.w	r3, r3, #15
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d210      	bcs.n	8005b58 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b36:	4b24      	ldr	r3, [pc, #144]	; (8005bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f023 020f 	bic.w	r2, r3, #15
 8005b3e:	4922      	ldr	r1, [pc, #136]	; (8005bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b46:	4b20      	ldr	r3, [pc, #128]	; (8005bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d001      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e032      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0304 	and.w	r3, r3, #4
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d008      	beq.n	8005b76 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b64:	4b19      	ldr	r3, [pc, #100]	; (8005bcc <HAL_RCC_ClockConfig+0x1c8>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	4916      	ldr	r1, [pc, #88]	; (8005bcc <HAL_RCC_ClockConfig+0x1c8>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0308 	and.w	r3, r3, #8
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d009      	beq.n	8005b96 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b82:	4b12      	ldr	r3, [pc, #72]	; (8005bcc <HAL_RCC_ClockConfig+0x1c8>)
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	00db      	lsls	r3, r3, #3
 8005b90:	490e      	ldr	r1, [pc, #56]	; (8005bcc <HAL_RCC_ClockConfig+0x1c8>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b96:	f000 f821 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
 8005b9a:	4601      	mov	r1, r0
 8005b9c:	4b0b      	ldr	r3, [pc, #44]	; (8005bcc <HAL_RCC_ClockConfig+0x1c8>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	091b      	lsrs	r3, r3, #4
 8005ba2:	f003 030f 	and.w	r3, r3, #15
 8005ba6:	4a0a      	ldr	r2, [pc, #40]	; (8005bd0 <HAL_RCC_ClockConfig+0x1cc>)
 8005ba8:	5cd3      	ldrb	r3, [r2, r3]
 8005baa:	fa21 f303 	lsr.w	r3, r1, r3
 8005bae:	4a09      	ldr	r2, [pc, #36]	; (8005bd4 <HAL_RCC_ClockConfig+0x1d0>)
 8005bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005bb2:	4b09      	ldr	r3, [pc, #36]	; (8005bd8 <HAL_RCC_ClockConfig+0x1d4>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7fc febc 	bl	8002934 <HAL_InitTick>

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	40023c00 	.word	0x40023c00
 8005bcc:	40023800 	.word	0x40023800
 8005bd0:	08009128 	.word	0x08009128
 8005bd4:	20000000 	.word	0x20000000
 8005bd8:	20000004 	.word	0x20000004

08005bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005be2:	2300      	movs	r3, #0
 8005be4:	607b      	str	r3, [r7, #4]
 8005be6:	2300      	movs	r3, #0
 8005be8:	60fb      	str	r3, [r7, #12]
 8005bea:	2300      	movs	r3, #0
 8005bec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bf2:	4b63      	ldr	r3, [pc, #396]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f003 030c 	and.w	r3, r3, #12
 8005bfa:	2b04      	cmp	r3, #4
 8005bfc:	d007      	beq.n	8005c0e <HAL_RCC_GetSysClockFreq+0x32>
 8005bfe:	2b08      	cmp	r3, #8
 8005c00:	d008      	beq.n	8005c14 <HAL_RCC_GetSysClockFreq+0x38>
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f040 80b4 	bne.w	8005d70 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c08:	4b5e      	ldr	r3, [pc, #376]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005c0a:	60bb      	str	r3, [r7, #8]
      break;
 8005c0c:	e0b3      	b.n	8005d76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c0e:	4b5e      	ldr	r3, [pc, #376]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005c10:	60bb      	str	r3, [r7, #8]
      break;
 8005c12:	e0b0      	b.n	8005d76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c14:	4b5a      	ldr	r3, [pc, #360]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c1c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005c1e:	4b58      	ldr	r3, [pc, #352]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d04a      	beq.n	8005cc0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c2a:	4b55      	ldr	r3, [pc, #340]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	099b      	lsrs	r3, r3, #6
 8005c30:	f04f 0400 	mov.w	r4, #0
 8005c34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005c38:	f04f 0200 	mov.w	r2, #0
 8005c3c:	ea03 0501 	and.w	r5, r3, r1
 8005c40:	ea04 0602 	and.w	r6, r4, r2
 8005c44:	4629      	mov	r1, r5
 8005c46:	4632      	mov	r2, r6
 8005c48:	f04f 0300 	mov.w	r3, #0
 8005c4c:	f04f 0400 	mov.w	r4, #0
 8005c50:	0154      	lsls	r4, r2, #5
 8005c52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005c56:	014b      	lsls	r3, r1, #5
 8005c58:	4619      	mov	r1, r3
 8005c5a:	4622      	mov	r2, r4
 8005c5c:	1b49      	subs	r1, r1, r5
 8005c5e:	eb62 0206 	sbc.w	r2, r2, r6
 8005c62:	f04f 0300 	mov.w	r3, #0
 8005c66:	f04f 0400 	mov.w	r4, #0
 8005c6a:	0194      	lsls	r4, r2, #6
 8005c6c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005c70:	018b      	lsls	r3, r1, #6
 8005c72:	1a5b      	subs	r3, r3, r1
 8005c74:	eb64 0402 	sbc.w	r4, r4, r2
 8005c78:	f04f 0100 	mov.w	r1, #0
 8005c7c:	f04f 0200 	mov.w	r2, #0
 8005c80:	00e2      	lsls	r2, r4, #3
 8005c82:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005c86:	00d9      	lsls	r1, r3, #3
 8005c88:	460b      	mov	r3, r1
 8005c8a:	4614      	mov	r4, r2
 8005c8c:	195b      	adds	r3, r3, r5
 8005c8e:	eb44 0406 	adc.w	r4, r4, r6
 8005c92:	f04f 0100 	mov.w	r1, #0
 8005c96:	f04f 0200 	mov.w	r2, #0
 8005c9a:	0262      	lsls	r2, r4, #9
 8005c9c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005ca0:	0259      	lsls	r1, r3, #9
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	4614      	mov	r4, r2
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	4621      	mov	r1, r4
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f04f 0400 	mov.w	r4, #0
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	4623      	mov	r3, r4
 8005cb4:	f7fa fefa 	bl	8000aac <__aeabi_uldivmod>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	460c      	mov	r4, r1
 8005cbc:	60fb      	str	r3, [r7, #12]
 8005cbe:	e049      	b.n	8005d54 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cc0:	4b2f      	ldr	r3, [pc, #188]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	099b      	lsrs	r3, r3, #6
 8005cc6:	f04f 0400 	mov.w	r4, #0
 8005cca:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005cce:	f04f 0200 	mov.w	r2, #0
 8005cd2:	ea03 0501 	and.w	r5, r3, r1
 8005cd6:	ea04 0602 	and.w	r6, r4, r2
 8005cda:	4629      	mov	r1, r5
 8005cdc:	4632      	mov	r2, r6
 8005cde:	f04f 0300 	mov.w	r3, #0
 8005ce2:	f04f 0400 	mov.w	r4, #0
 8005ce6:	0154      	lsls	r4, r2, #5
 8005ce8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005cec:	014b      	lsls	r3, r1, #5
 8005cee:	4619      	mov	r1, r3
 8005cf0:	4622      	mov	r2, r4
 8005cf2:	1b49      	subs	r1, r1, r5
 8005cf4:	eb62 0206 	sbc.w	r2, r2, r6
 8005cf8:	f04f 0300 	mov.w	r3, #0
 8005cfc:	f04f 0400 	mov.w	r4, #0
 8005d00:	0194      	lsls	r4, r2, #6
 8005d02:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005d06:	018b      	lsls	r3, r1, #6
 8005d08:	1a5b      	subs	r3, r3, r1
 8005d0a:	eb64 0402 	sbc.w	r4, r4, r2
 8005d0e:	f04f 0100 	mov.w	r1, #0
 8005d12:	f04f 0200 	mov.w	r2, #0
 8005d16:	00e2      	lsls	r2, r4, #3
 8005d18:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005d1c:	00d9      	lsls	r1, r3, #3
 8005d1e:	460b      	mov	r3, r1
 8005d20:	4614      	mov	r4, r2
 8005d22:	195b      	adds	r3, r3, r5
 8005d24:	eb44 0406 	adc.w	r4, r4, r6
 8005d28:	f04f 0100 	mov.w	r1, #0
 8005d2c:	f04f 0200 	mov.w	r2, #0
 8005d30:	02a2      	lsls	r2, r4, #10
 8005d32:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005d36:	0299      	lsls	r1, r3, #10
 8005d38:	460b      	mov	r3, r1
 8005d3a:	4614      	mov	r4, r2
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	4621      	mov	r1, r4
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f04f 0400 	mov.w	r4, #0
 8005d46:	461a      	mov	r2, r3
 8005d48:	4623      	mov	r3, r4
 8005d4a:	f7fa feaf 	bl	8000aac <__aeabi_uldivmod>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	460c      	mov	r4, r1
 8005d52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005d54:	4b0a      	ldr	r3, [pc, #40]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	0c1b      	lsrs	r3, r3, #16
 8005d5a:	f003 0303 	and.w	r3, r3, #3
 8005d5e:	3301      	adds	r3, #1
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6c:	60bb      	str	r3, [r7, #8]
      break;
 8005d6e:	e002      	b.n	8005d76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d70:	4b04      	ldr	r3, [pc, #16]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005d72:	60bb      	str	r3, [r7, #8]
      break;
 8005d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d76:	68bb      	ldr	r3, [r7, #8]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d80:	40023800 	.word	0x40023800
 8005d84:	00f42400 	.word	0x00f42400
 8005d88:	007a1200 	.word	0x007a1200

08005d8c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d90:	4b03      	ldr	r3, [pc, #12]	; (8005da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d92:	681b      	ldr	r3, [r3, #0]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	20000000 	.word	0x20000000

08005da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005da8:	f7ff fff0 	bl	8005d8c <HAL_RCC_GetHCLKFreq>
 8005dac:	4601      	mov	r1, r0
 8005dae:	4b05      	ldr	r3, [pc, #20]	; (8005dc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	0a9b      	lsrs	r3, r3, #10
 8005db4:	f003 0307 	and.w	r3, r3, #7
 8005db8:	4a03      	ldr	r2, [pc, #12]	; (8005dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dba:	5cd3      	ldrb	r3, [r2, r3]
 8005dbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	40023800 	.word	0x40023800
 8005dc8:	08009138 	.word	0x08009138

08005dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005dd0:	f7ff ffdc 	bl	8005d8c <HAL_RCC_GetHCLKFreq>
 8005dd4:	4601      	mov	r1, r0
 8005dd6:	4b05      	ldr	r3, [pc, #20]	; (8005dec <HAL_RCC_GetPCLK2Freq+0x20>)
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	0b5b      	lsrs	r3, r3, #13
 8005ddc:	f003 0307 	and.w	r3, r3, #7
 8005de0:	4a03      	ldr	r2, [pc, #12]	; (8005df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005de2:	5cd3      	ldrb	r3, [r2, r3]
 8005de4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	40023800 	.word	0x40023800
 8005df0:	08009138 	.word	0x08009138

08005df4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b088      	sub	sp, #32
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005e00:	2300      	movs	r3, #0
 8005e02:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8005e04:	2300      	movs	r3, #0
 8005e06:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d012      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e18:	4b65      	ldr	r3, [pc, #404]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	4a64      	ldr	r2, [pc, #400]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e1e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005e22:	6093      	str	r3, [r2, #8]
 8005e24:	4b62      	ldr	r3, [pc, #392]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e26:	689a      	ldr	r2, [r3, #8]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2c:	4960      	ldr	r1, [pc, #384]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d017      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e4a:	4b59      	ldr	r3, [pc, #356]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e58:	4955      	ldr	r1, [pc, #340]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e68:	d101      	bne.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8005e76:	2301      	movs	r3, #1
 8005e78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d017      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005e86:	4b4a      	ldr	r3, [pc, #296]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e94:	4946      	ldr	r1, [pc, #280]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ea4:	d101      	bne.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0320 	and.w	r3, r3, #32
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 808b 	beq.w	8005fda <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ec4:	4b3a      	ldr	r3, [pc, #232]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec8:	4a39      	ldr	r2, [pc, #228]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ece:	6413      	str	r3, [r2, #64]	; 0x40
 8005ed0:	4b37      	ldr	r3, [pc, #220]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ed8:	60fb      	str	r3, [r7, #12]
 8005eda:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005edc:	4b35      	ldr	r3, [pc, #212]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a34      	ldr	r2, [pc, #208]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ee6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ee8:	f7fc fd68 	bl	80029bc <HAL_GetTick>
 8005eec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005eee:	e008      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ef0:	f7fc fd64 	bl	80029bc <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b64      	cmp	r3, #100	; 0x64
 8005efc:	d901      	bls.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e2ba      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005f02:	4b2c      	ldr	r3, [pc, #176]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0f0      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f0e:	4b28      	ldr	r3, [pc, #160]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f16:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d035      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d02e      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f2c:	4b20      	ldr	r3, [pc, #128]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f34:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f36:	4b1e      	ldr	r3, [pc, #120]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3a:	4a1d      	ldr	r2, [pc, #116]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f40:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f42:	4b1b      	ldr	r3, [pc, #108]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f46:	4a1a      	ldr	r2, [pc, #104]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f4c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005f4e:	4a18      	ldr	r2, [pc, #96]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f54:	4b16      	ldr	r3, [pc, #88]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d114      	bne.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f60:	f7fc fd2c 	bl	80029bc <HAL_GetTick>
 8005f64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f66:	e00a      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f68:	f7fc fd28 	bl	80029bc <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d901      	bls.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e27c      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f7e:	4b0c      	ldr	r3, [pc, #48]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d0ee      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f96:	d111      	bne.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8005f98:	4b05      	ldr	r3, [pc, #20]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005fa4:	4b04      	ldr	r3, [pc, #16]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005fa6:	400b      	ands	r3, r1
 8005fa8:	4901      	ldr	r1, [pc, #4]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	608b      	str	r3, [r1, #8]
 8005fae:	e00b      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005fb0:	40023800 	.word	0x40023800
 8005fb4:	40007000 	.word	0x40007000
 8005fb8:	0ffffcff 	.word	0x0ffffcff
 8005fbc:	4ba3      	ldr	r3, [pc, #652]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	4aa2      	ldr	r2, [pc, #648]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005fc2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005fc6:	6093      	str	r3, [r2, #8]
 8005fc8:	4ba0      	ldr	r3, [pc, #640]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005fca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fd4:	499d      	ldr	r1, [pc, #628]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0310 	and.w	r3, r3, #16
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d010      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005fe6:	4b99      	ldr	r3, [pc, #612]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005fe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fec:	4a97      	ldr	r2, [pc, #604]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005fee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ff2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005ff6:	4b95      	ldr	r3, [pc, #596]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005ff8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006000:	4992      	ldr	r1, [pc, #584]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006002:	4313      	orrs	r3, r2
 8006004:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00a      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006014:	4b8d      	ldr	r3, [pc, #564]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800601a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006022:	498a      	ldr	r1, [pc, #552]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006024:	4313      	orrs	r3, r2
 8006026:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00a      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006036:	4b85      	ldr	r3, [pc, #532]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800603c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006044:	4981      	ldr	r1, [pc, #516]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006046:	4313      	orrs	r3, r2
 8006048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00a      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006058:	4b7c      	ldr	r3, [pc, #496]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800605a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800605e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006066:	4979      	ldr	r1, [pc, #484]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006068:	4313      	orrs	r3, r2
 800606a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00a      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800607a:	4b74      	ldr	r3, [pc, #464]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800607c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006080:	f023 0203 	bic.w	r2, r3, #3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006088:	4970      	ldr	r1, [pc, #448]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800608a:	4313      	orrs	r3, r2
 800608c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00a      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800609c:	4b6b      	ldr	r3, [pc, #428]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800609e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a2:	f023 020c 	bic.w	r2, r3, #12
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060aa:	4968      	ldr	r1, [pc, #416]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00a      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80060be:	4b63      	ldr	r3, [pc, #396]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80060c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060cc:	495f      	ldr	r1, [pc, #380]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00a      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80060e0:	4b5a      	ldr	r3, [pc, #360]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80060e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060ee:	4957      	ldr	r1, [pc, #348]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00a      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006102:	4b52      	ldr	r3, [pc, #328]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006108:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006110:	494e      	ldr	r1, [pc, #312]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006112:	4313      	orrs	r3, r2
 8006114:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00a      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006124:	4b49      	ldr	r3, [pc, #292]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800612a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006132:	4946      	ldr	r1, [pc, #280]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006134:	4313      	orrs	r3, r2
 8006136:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00a      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006146:	4b41      	ldr	r3, [pc, #260]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800614c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006154:	493d      	ldr	r1, [pc, #244]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006156:	4313      	orrs	r3, r2
 8006158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00a      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006168:	4b38      	ldr	r3, [pc, #224]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800616a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800616e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006176:	4935      	ldr	r1, [pc, #212]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006178:	4313      	orrs	r3, r2
 800617a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d011      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800618a:	4b30      	ldr	r3, [pc, #192]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800618c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006190:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006198:	492c      	ldr	r1, [pc, #176]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800619a:	4313      	orrs	r3, r2
 800619c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061a8:	d101      	bne.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80061aa:	2301      	movs	r3, #1
 80061ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00a      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80061ba:	4b24      	ldr	r3, [pc, #144]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80061bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061c8:	4920      	ldr	r1, [pc, #128]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00a      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80061dc:	4b1b      	ldr	r3, [pc, #108]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80061de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061ea:	4918      	ldr	r1, [pc, #96]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00a      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80061fe:	4b13      	ldr	r3, [pc, #76]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006204:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800620c:	490f      	ldr	r1, [pc, #60]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800620e:	4313      	orrs	r3, r2
 8006210:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d005      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006222:	f040 809c 	bne.w	800635e <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006226:	4b09      	ldr	r3, [pc, #36]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a08      	ldr	r2, [pc, #32]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800622c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006230:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006232:	f7fc fbc3 	bl	80029bc <HAL_GetTick>
 8006236:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006238:	e00a      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800623a:	f7fc fbbf 	bl	80029bc <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	2b64      	cmp	r3, #100	; 0x64
 8006246:	d903      	bls.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e115      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x684>
 800624c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006250:	4b8b      	ldr	r3, [pc, #556]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1ee      	bne.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0301 	and.w	r3, r3, #1
 8006264:	2b00      	cmp	r3, #0
 8006266:	d017      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626c:	2b00      	cmp	r3, #0
 800626e:	d113      	bne.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006270:	4b83      	ldr	r3, [pc, #524]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006276:	0e1b      	lsrs	r3, r3, #24
 8006278:	f003 030f 	and.w	r3, r3, #15
 800627c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	019a      	lsls	r2, r3, #6
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	061b      	lsls	r3, r3, #24
 8006288:	431a      	orrs	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	071b      	lsls	r3, r3, #28
 8006290:	497b      	ldr	r1, [pc, #492]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006292:	4313      	orrs	r3, r2
 8006294:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d004      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062ac:	d00a      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d024      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062c2:	d11f      	bne.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80062c4:	4b6e      	ldr	r3, [pc, #440]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80062c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062ca:	0f1b      	lsrs	r3, r3, #28
 80062cc:	f003 0307 	and.w	r3, r3, #7
 80062d0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	019a      	lsls	r2, r3, #6
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	061b      	lsls	r3, r3, #24
 80062de:	431a      	orrs	r2, r3
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	071b      	lsls	r3, r3, #28
 80062e4:	4966      	ldr	r1, [pc, #408]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80062ec:	4b64      	ldr	r3, [pc, #400]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80062ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062f2:	f023 021f 	bic.w	r2, r3, #31
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	3b01      	subs	r3, #1
 80062fc:	4960      	ldr	r1, [pc, #384]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00d      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	019a      	lsls	r2, r3, #6
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	061b      	lsls	r3, r3, #24
 800631c:	431a      	orrs	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	071b      	lsls	r3, r3, #28
 8006324:	4956      	ldr	r1, [pc, #344]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006326:	4313      	orrs	r3, r2
 8006328:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800632c:	4b54      	ldr	r3, [pc, #336]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a53      	ldr	r2, [pc, #332]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006332:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006336:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006338:	f7fc fb40 	bl	80029bc <HAL_GetTick>
 800633c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800633e:	e008      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006340:	f7fc fb3c 	bl	80029bc <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	2b64      	cmp	r3, #100	; 0x64
 800634c:	d901      	bls.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e092      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006352:	4b4b      	ldr	r3, [pc, #300]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d0f0      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	2b01      	cmp	r3, #1
 8006362:	f040 8088 	bne.w	8006476 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006366:	4b46      	ldr	r3, [pc, #280]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a45      	ldr	r2, [pc, #276]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800636c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006370:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006372:	f7fc fb23 	bl	80029bc <HAL_GetTick>
 8006376:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006378:	e008      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800637a:	f7fc fb1f 	bl	80029bc <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	2b64      	cmp	r3, #100	; 0x64
 8006386:	d901      	bls.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e075      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800638c:	4b3c      	ldr	r3, [pc, #240]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006394:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006398:	d0ef      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d009      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d024      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d120      	bne.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80063c2:	4b2f      	ldr	r3, [pc, #188]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80063c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063c8:	0c1b      	lsrs	r3, r3, #16
 80063ca:	f003 0303 	and.w	r3, r3, #3
 80063ce:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	019a      	lsls	r2, r3, #6
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	041b      	lsls	r3, r3, #16
 80063da:	431a      	orrs	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	061b      	lsls	r3, r3, #24
 80063e2:	4927      	ldr	r1, [pc, #156]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80063ea:	4b25      	ldr	r3, [pc, #148]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80063ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a1b      	ldr	r3, [r3, #32]
 80063f8:	3b01      	subs	r3, #1
 80063fa:	021b      	lsls	r3, r3, #8
 80063fc:	4920      	ldr	r1, [pc, #128]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d018      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006414:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006418:	d113      	bne.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800641a:	4b19      	ldr	r3, [pc, #100]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800641c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006420:	0e1b      	lsrs	r3, r3, #24
 8006422:	f003 030f 	and.w	r3, r3, #15
 8006426:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	019a      	lsls	r2, r3, #6
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	041b      	lsls	r3, r3, #16
 8006434:	431a      	orrs	r2, r3
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	061b      	lsls	r3, r3, #24
 800643a:	4911      	ldr	r1, [pc, #68]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800643c:	4313      	orrs	r3, r2
 800643e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006442:	4b0f      	ldr	r3, [pc, #60]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a0e      	ldr	r2, [pc, #56]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800644c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800644e:	f7fc fab5 	bl	80029bc <HAL_GetTick>
 8006452:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006454:	e008      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006456:	f7fc fab1 	bl	80029bc <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	2b64      	cmp	r3, #100	; 0x64
 8006462:	d901      	bls.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e007      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006468:	4b05      	ldr	r3, [pc, #20]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006474:	d1ef      	bne.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3720      	adds	r7, #32
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	40023800 	.word	0x40023800

08006484 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e01d      	b.n	80064d2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d106      	bne.n	80064b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7fb fe7e 	bl	80021ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2202      	movs	r2, #2
 80064b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	3304      	adds	r3, #4
 80064c0:	4619      	mov	r1, r3
 80064c2:	4610      	mov	r0, r2
 80064c4:	f000 fc00 	bl	8006cc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b082      	sub	sp, #8
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d101      	bne.n	80064ec <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e01d      	b.n	8006528 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d106      	bne.n	8006506 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7fb fee7 	bl	80022d4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2202      	movs	r2, #2
 800650a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	3304      	adds	r3, #4
 8006516:	4619      	mov	r1, r3
 8006518:	4610      	mov	r0, r2
 800651a:	f000 fbd5 	bl	8006cc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3708      	adds	r7, #8
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d101      	bne.n	8006542 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e01d      	b.n	800657e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d106      	bne.n	800655c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f7fb fe9c 	bl	8002294 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2202      	movs	r2, #2
 8006560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	3304      	adds	r3, #4
 800656c:	4619      	mov	r1, r3
 800656e:	4610      	mov	r0, r2
 8006570:	f000 fbaa 	bl	8006cc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
	...

08006588 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2201      	movs	r2, #1
 8006598:	6839      	ldr	r1, [r7, #0]
 800659a:	4618      	mov	r0, r3
 800659c:	f001 f8c3 	bl	8007726 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a17      	ldr	r2, [pc, #92]	; (8006604 <HAL_TIM_PWM_Start+0x7c>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d004      	beq.n	80065b4 <HAL_TIM_PWM_Start+0x2c>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a16      	ldr	r2, [pc, #88]	; (8006608 <HAL_TIM_PWM_Start+0x80>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d101      	bne.n	80065b8 <HAL_TIM_PWM_Start+0x30>
 80065b4:	2301      	movs	r3, #1
 80065b6:	e000      	b.n	80065ba <HAL_TIM_PWM_Start+0x32>
 80065b8:	2300      	movs	r3, #0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d007      	beq.n	80065ce <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	4b0d      	ldr	r3, [pc, #52]	; (800660c <HAL_TIM_PWM_Start+0x84>)
 80065d6:	4013      	ands	r3, r2
 80065d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2b06      	cmp	r3, #6
 80065de:	d00b      	beq.n	80065f8 <HAL_TIM_PWM_Start+0x70>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065e6:	d007      	beq.n	80065f8 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f042 0201 	orr.w	r2, r2, #1
 80065f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	40010000 	.word	0x40010000
 8006608:	40010400 	.word	0x40010400
 800660c:	00010007 	.word	0x00010007

08006610 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d101      	bne.n	8006622 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e01d      	b.n	800665e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d106      	bne.n	800663c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f815 	bl	8006666 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2202      	movs	r2, #2
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	3304      	adds	r3, #4
 800664c:	4619      	mov	r1, r3
 800664e:	4610      	mov	r0, r2
 8006650:	f000 fb3a 	bl	8006cc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3708      	adds	r7, #8
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006666:	b480      	push	{r7}
 8006668:	b083      	sub	sp, #12
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800666e:	bf00      	nop
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
	...

0800667c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	2b0c      	cmp	r3, #12
 800668a:	d841      	bhi.n	8006710 <HAL_TIM_IC_Start_IT+0x94>
 800668c:	a201      	add	r2, pc, #4	; (adr r2, 8006694 <HAL_TIM_IC_Start_IT+0x18>)
 800668e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006692:	bf00      	nop
 8006694:	080066c9 	.word	0x080066c9
 8006698:	08006711 	.word	0x08006711
 800669c:	08006711 	.word	0x08006711
 80066a0:	08006711 	.word	0x08006711
 80066a4:	080066db 	.word	0x080066db
 80066a8:	08006711 	.word	0x08006711
 80066ac:	08006711 	.word	0x08006711
 80066b0:	08006711 	.word	0x08006711
 80066b4:	080066ed 	.word	0x080066ed
 80066b8:	08006711 	.word	0x08006711
 80066bc:	08006711 	.word	0x08006711
 80066c0:	08006711 	.word	0x08006711
 80066c4:	080066ff 	.word	0x080066ff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68da      	ldr	r2, [r3, #12]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f042 0202 	orr.w	r2, r2, #2
 80066d6:	60da      	str	r2, [r3, #12]
      break;
 80066d8:	e01b      	b.n	8006712 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68da      	ldr	r2, [r3, #12]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f042 0204 	orr.w	r2, r2, #4
 80066e8:	60da      	str	r2, [r3, #12]
      break;
 80066ea:	e012      	b.n	8006712 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68da      	ldr	r2, [r3, #12]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f042 0208 	orr.w	r2, r2, #8
 80066fa:	60da      	str	r2, [r3, #12]
      break;
 80066fc:	e009      	b.n	8006712 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68da      	ldr	r2, [r3, #12]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f042 0210 	orr.w	r2, r2, #16
 800670c:	60da      	str	r2, [r3, #12]
      break;
 800670e:	e000      	b.n	8006712 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8006710:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2201      	movs	r2, #1
 8006718:	6839      	ldr	r1, [r7, #0]
 800671a:	4618      	mov	r0, r3
 800671c:	f001 f803 	bl	8007726 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689a      	ldr	r2, [r3, #8]
 8006726:	4b0b      	ldr	r3, [pc, #44]	; (8006754 <HAL_TIM_IC_Start_IT+0xd8>)
 8006728:	4013      	ands	r3, r2
 800672a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2b06      	cmp	r3, #6
 8006730:	d00b      	beq.n	800674a <HAL_TIM_IC_Start_IT+0xce>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006738:	d007      	beq.n	800674a <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f042 0201 	orr.w	r2, r2, #1
 8006748:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	00010007 	.word	0x00010007

08006758 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800676a:	2b01      	cmp	r3, #1
 800676c:	d101      	bne.n	8006772 <HAL_TIM_OC_ConfigChannel+0x1a>
 800676e:	2302      	movs	r3, #2
 8006770:	e06c      	b.n	800684c <HAL_TIM_OC_ConfigChannel+0xf4>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2202      	movs	r2, #2
 800677e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b14      	cmp	r3, #20
 8006786:	d857      	bhi.n	8006838 <HAL_TIM_OC_ConfigChannel+0xe0>
 8006788:	a201      	add	r2, pc, #4	; (adr r2, 8006790 <HAL_TIM_OC_ConfigChannel+0x38>)
 800678a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678e:	bf00      	nop
 8006790:	080067e5 	.word	0x080067e5
 8006794:	08006839 	.word	0x08006839
 8006798:	08006839 	.word	0x08006839
 800679c:	08006839 	.word	0x08006839
 80067a0:	080067f3 	.word	0x080067f3
 80067a4:	08006839 	.word	0x08006839
 80067a8:	08006839 	.word	0x08006839
 80067ac:	08006839 	.word	0x08006839
 80067b0:	08006801 	.word	0x08006801
 80067b4:	08006839 	.word	0x08006839
 80067b8:	08006839 	.word	0x08006839
 80067bc:	08006839 	.word	0x08006839
 80067c0:	0800680f 	.word	0x0800680f
 80067c4:	08006839 	.word	0x08006839
 80067c8:	08006839 	.word	0x08006839
 80067cc:	08006839 	.word	0x08006839
 80067d0:	0800681d 	.word	0x0800681d
 80067d4:	08006839 	.word	0x08006839
 80067d8:	08006839 	.word	0x08006839
 80067dc:	08006839 	.word	0x08006839
 80067e0:	0800682b 	.word	0x0800682b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68b9      	ldr	r1, [r7, #8]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 fb0c 	bl	8006e08 <TIM_OC1_SetConfig>
      break;
 80067f0:	e023      	b.n	800683a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68b9      	ldr	r1, [r7, #8]
 80067f8:	4618      	mov	r0, r3
 80067fa:	f000 fb77 	bl	8006eec <TIM_OC2_SetConfig>
      break;
 80067fe:	e01c      	b.n	800683a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68b9      	ldr	r1, [r7, #8]
 8006806:	4618      	mov	r0, r3
 8006808:	f000 fbe8 	bl	8006fdc <TIM_OC3_SetConfig>
      break;
 800680c:	e015      	b.n	800683a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68b9      	ldr	r1, [r7, #8]
 8006814:	4618      	mov	r0, r3
 8006816:	f000 fc57 	bl	80070c8 <TIM_OC4_SetConfig>
      break;
 800681a:	e00e      	b.n	800683a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68b9      	ldr	r1, [r7, #8]
 8006822:	4618      	mov	r0, r3
 8006824:	f000 fca8 	bl	8007178 <TIM_OC5_SetConfig>
      break;
 8006828:	e007      	b.n	800683a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68b9      	ldr	r1, [r7, #8]
 8006830:	4618      	mov	r0, r3
 8006832:	f000 fcf3 	bl	800721c <TIM_OC6_SetConfig>
      break;
 8006836:	e000      	b.n	800683a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 8006838:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006866:	2b01      	cmp	r3, #1
 8006868:	d101      	bne.n	800686e <HAL_TIM_IC_ConfigChannel+0x1a>
 800686a:	2302      	movs	r3, #2
 800686c:	e08a      	b.n	8006984 <HAL_TIM_IC_ConfigChannel+0x130>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2202      	movs	r2, #2
 800687a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d11b      	bne.n	80068bc <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6818      	ldr	r0, [r3, #0]
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	6819      	ldr	r1, [r3, #0]
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f000 fd9e 	bl	80073d4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	699a      	ldr	r2, [r3, #24]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f022 020c 	bic.w	r2, r2, #12
 80068a6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6999      	ldr	r1, [r3, #24]
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	689a      	ldr	r2, [r3, #8]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	430a      	orrs	r2, r1
 80068b8:	619a      	str	r2, [r3, #24]
 80068ba:	e05a      	b.n	8006972 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2b04      	cmp	r3, #4
 80068c0:	d11c      	bne.n	80068fc <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6818      	ldr	r0, [r3, #0]
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	6819      	ldr	r1, [r3, #0]
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	685a      	ldr	r2, [r3, #4]
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	f000 fe22 	bl	800751a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	699a      	ldr	r2, [r3, #24]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80068e4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	6999      	ldr	r1, [r3, #24]
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	021a      	lsls	r2, r3, #8
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	619a      	str	r2, [r3, #24]
 80068fa:	e03a      	b.n	8006972 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b08      	cmp	r3, #8
 8006900:	d11b      	bne.n	800693a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6818      	ldr	r0, [r3, #0]
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	6819      	ldr	r1, [r3, #0]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	f000 fe6f 	bl	80075f4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	69da      	ldr	r2, [r3, #28]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f022 020c 	bic.w	r2, r2, #12
 8006924:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	69d9      	ldr	r1, [r3, #28]
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	689a      	ldr	r2, [r3, #8]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	430a      	orrs	r2, r1
 8006936:	61da      	str	r2, [r3, #28]
 8006938:	e01b      	b.n	8006972 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6818      	ldr	r0, [r3, #0]
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	6819      	ldr	r1, [r3, #0]
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	f000 fe8f 	bl	800766c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	69da      	ldr	r2, [r3, #28]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800695c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	69d9      	ldr	r1, [r3, #28]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	021a      	lsls	r2, r3, #8
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d101      	bne.n	80069a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80069a2:	2302      	movs	r3, #2
 80069a4:	e105      	b.n	8006bb2 <HAL_TIM_PWM_ConfigChannel+0x226>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2202      	movs	r2, #2
 80069b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2b14      	cmp	r3, #20
 80069ba:	f200 80f0 	bhi.w	8006b9e <HAL_TIM_PWM_ConfigChannel+0x212>
 80069be:	a201      	add	r2, pc, #4	; (adr r2, 80069c4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80069c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c4:	08006a19 	.word	0x08006a19
 80069c8:	08006b9f 	.word	0x08006b9f
 80069cc:	08006b9f 	.word	0x08006b9f
 80069d0:	08006b9f 	.word	0x08006b9f
 80069d4:	08006a59 	.word	0x08006a59
 80069d8:	08006b9f 	.word	0x08006b9f
 80069dc:	08006b9f 	.word	0x08006b9f
 80069e0:	08006b9f 	.word	0x08006b9f
 80069e4:	08006a9b 	.word	0x08006a9b
 80069e8:	08006b9f 	.word	0x08006b9f
 80069ec:	08006b9f 	.word	0x08006b9f
 80069f0:	08006b9f 	.word	0x08006b9f
 80069f4:	08006adb 	.word	0x08006adb
 80069f8:	08006b9f 	.word	0x08006b9f
 80069fc:	08006b9f 	.word	0x08006b9f
 8006a00:	08006b9f 	.word	0x08006b9f
 8006a04:	08006b1d 	.word	0x08006b1d
 8006a08:	08006b9f 	.word	0x08006b9f
 8006a0c:	08006b9f 	.word	0x08006b9f
 8006a10:	08006b9f 	.word	0x08006b9f
 8006a14:	08006b5d 	.word	0x08006b5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68b9      	ldr	r1, [r7, #8]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 f9f2 	bl	8006e08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	699a      	ldr	r2, [r3, #24]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f042 0208 	orr.w	r2, r2, #8
 8006a32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	699a      	ldr	r2, [r3, #24]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f022 0204 	bic.w	r2, r2, #4
 8006a42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6999      	ldr	r1, [r3, #24]
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	691a      	ldr	r2, [r3, #16]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	430a      	orrs	r2, r1
 8006a54:	619a      	str	r2, [r3, #24]
      break;
 8006a56:	e0a3      	b.n	8006ba0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68b9      	ldr	r1, [r7, #8]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 fa44 	bl	8006eec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	699a      	ldr	r2, [r3, #24]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	699a      	ldr	r2, [r3, #24]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6999      	ldr	r1, [r3, #24]
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	021a      	lsls	r2, r3, #8
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	430a      	orrs	r2, r1
 8006a96:	619a      	str	r2, [r3, #24]
      break;
 8006a98:	e082      	b.n	8006ba0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68b9      	ldr	r1, [r7, #8]
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f000 fa9b 	bl	8006fdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	69da      	ldr	r2, [r3, #28]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f042 0208 	orr.w	r2, r2, #8
 8006ab4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	69da      	ldr	r2, [r3, #28]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f022 0204 	bic.w	r2, r2, #4
 8006ac4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	69d9      	ldr	r1, [r3, #28]
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	691a      	ldr	r2, [r3, #16]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	430a      	orrs	r2, r1
 8006ad6:	61da      	str	r2, [r3, #28]
      break;
 8006ad8:	e062      	b.n	8006ba0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68b9      	ldr	r1, [r7, #8]
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f000 faf1 	bl	80070c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	69da      	ldr	r2, [r3, #28]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006af4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	69da      	ldr	r2, [r3, #28]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	69d9      	ldr	r1, [r3, #28]
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	021a      	lsls	r2, r3, #8
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	430a      	orrs	r2, r1
 8006b18:	61da      	str	r2, [r3, #28]
      break;
 8006b1a:	e041      	b.n	8006ba0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68b9      	ldr	r1, [r7, #8]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f000 fb28 	bl	8007178 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f042 0208 	orr.w	r2, r2, #8
 8006b36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f022 0204 	bic.w	r2, r2, #4
 8006b46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	691a      	ldr	r2, [r3, #16]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	430a      	orrs	r2, r1
 8006b58:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b5a:	e021      	b.n	8006ba0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68b9      	ldr	r1, [r7, #8]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 fb5a 	bl	800721c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	021a      	lsls	r2, r3, #8
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b9c:	e000      	b.n	8006ba0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8006b9e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop

08006bbc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d101      	bne.n	8006bd4 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	e031      	b.n	8006c38 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006be4:	6839      	ldr	r1, [r7, #0]
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fb6c 	bl	80072c4 <TIM_SlaveTimer_SetConfig>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d009      	beq.n	8006c06 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e018      	b.n	8006c38 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68da      	ldr	r2, [r3, #12]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c14:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68da      	ldr	r2, [r3, #12]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c24:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3708      	adds	r7, #8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2b0c      	cmp	r3, #12
 8006c52:	d831      	bhi.n	8006cb8 <HAL_TIM_ReadCapturedValue+0x78>
 8006c54:	a201      	add	r2, pc, #4	; (adr r2, 8006c5c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c5a:	bf00      	nop
 8006c5c:	08006c91 	.word	0x08006c91
 8006c60:	08006cb9 	.word	0x08006cb9
 8006c64:	08006cb9 	.word	0x08006cb9
 8006c68:	08006cb9 	.word	0x08006cb9
 8006c6c:	08006c9b 	.word	0x08006c9b
 8006c70:	08006cb9 	.word	0x08006cb9
 8006c74:	08006cb9 	.word	0x08006cb9
 8006c78:	08006cb9 	.word	0x08006cb9
 8006c7c:	08006ca5 	.word	0x08006ca5
 8006c80:	08006cb9 	.word	0x08006cb9
 8006c84:	08006cb9 	.word	0x08006cb9
 8006c88:	08006cb9 	.word	0x08006cb9
 8006c8c:	08006caf 	.word	0x08006caf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c96:	60fb      	str	r3, [r7, #12]

      break;
 8006c98:	e00f      	b.n	8006cba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca0:	60fb      	str	r3, [r7, #12]

      break;
 8006ca2:	e00a      	b.n	8006cba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006caa:	60fb      	str	r3, [r7, #12]

      break;
 8006cac:	e005      	b.n	8006cba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb4:	60fb      	str	r3, [r7, #12]

      break;
 8006cb6:	e000      	b.n	8006cba <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006cb8:	bf00      	nop
  }

  return tmpreg;
 8006cba:	68fb      	ldr	r3, [r7, #12]
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3714      	adds	r7, #20
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a40      	ldr	r2, [pc, #256]	; (8006ddc <TIM_Base_SetConfig+0x114>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d013      	beq.n	8006d08 <TIM_Base_SetConfig+0x40>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ce6:	d00f      	beq.n	8006d08 <TIM_Base_SetConfig+0x40>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a3d      	ldr	r2, [pc, #244]	; (8006de0 <TIM_Base_SetConfig+0x118>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d00b      	beq.n	8006d08 <TIM_Base_SetConfig+0x40>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a3c      	ldr	r2, [pc, #240]	; (8006de4 <TIM_Base_SetConfig+0x11c>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d007      	beq.n	8006d08 <TIM_Base_SetConfig+0x40>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a3b      	ldr	r2, [pc, #236]	; (8006de8 <TIM_Base_SetConfig+0x120>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d003      	beq.n	8006d08 <TIM_Base_SetConfig+0x40>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a3a      	ldr	r2, [pc, #232]	; (8006dec <TIM_Base_SetConfig+0x124>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d108      	bne.n	8006d1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a2f      	ldr	r2, [pc, #188]	; (8006ddc <TIM_Base_SetConfig+0x114>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d02b      	beq.n	8006d7a <TIM_Base_SetConfig+0xb2>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d28:	d027      	beq.n	8006d7a <TIM_Base_SetConfig+0xb2>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a2c      	ldr	r2, [pc, #176]	; (8006de0 <TIM_Base_SetConfig+0x118>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d023      	beq.n	8006d7a <TIM_Base_SetConfig+0xb2>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a2b      	ldr	r2, [pc, #172]	; (8006de4 <TIM_Base_SetConfig+0x11c>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d01f      	beq.n	8006d7a <TIM_Base_SetConfig+0xb2>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a2a      	ldr	r2, [pc, #168]	; (8006de8 <TIM_Base_SetConfig+0x120>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d01b      	beq.n	8006d7a <TIM_Base_SetConfig+0xb2>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a29      	ldr	r2, [pc, #164]	; (8006dec <TIM_Base_SetConfig+0x124>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d017      	beq.n	8006d7a <TIM_Base_SetConfig+0xb2>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a28      	ldr	r2, [pc, #160]	; (8006df0 <TIM_Base_SetConfig+0x128>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d013      	beq.n	8006d7a <TIM_Base_SetConfig+0xb2>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a27      	ldr	r2, [pc, #156]	; (8006df4 <TIM_Base_SetConfig+0x12c>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d00f      	beq.n	8006d7a <TIM_Base_SetConfig+0xb2>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a26      	ldr	r2, [pc, #152]	; (8006df8 <TIM_Base_SetConfig+0x130>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d00b      	beq.n	8006d7a <TIM_Base_SetConfig+0xb2>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a25      	ldr	r2, [pc, #148]	; (8006dfc <TIM_Base_SetConfig+0x134>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d007      	beq.n	8006d7a <TIM_Base_SetConfig+0xb2>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a24      	ldr	r2, [pc, #144]	; (8006e00 <TIM_Base_SetConfig+0x138>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d003      	beq.n	8006d7a <TIM_Base_SetConfig+0xb2>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a23      	ldr	r2, [pc, #140]	; (8006e04 <TIM_Base_SetConfig+0x13c>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d108      	bne.n	8006d8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	689a      	ldr	r2, [r3, #8]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a0a      	ldr	r2, [pc, #40]	; (8006ddc <TIM_Base_SetConfig+0x114>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d003      	beq.n	8006dc0 <TIM_Base_SetConfig+0xf8>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a0c      	ldr	r2, [pc, #48]	; (8006dec <TIM_Base_SetConfig+0x124>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d103      	bne.n	8006dc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	691a      	ldr	r2, [r3, #16]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	615a      	str	r2, [r3, #20]
}
 8006dce:	bf00      	nop
 8006dd0:	3714      	adds	r7, #20
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop
 8006ddc:	40010000 	.word	0x40010000
 8006de0:	40000400 	.word	0x40000400
 8006de4:	40000800 	.word	0x40000800
 8006de8:	40000c00 	.word	0x40000c00
 8006dec:	40010400 	.word	0x40010400
 8006df0:	40014000 	.word	0x40014000
 8006df4:	40014400 	.word	0x40014400
 8006df8:	40014800 	.word	0x40014800
 8006dfc:	40001800 	.word	0x40001800
 8006e00:	40001c00 	.word	0x40001c00
 8006e04:	40002000 	.word	0x40002000

08006e08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b087      	sub	sp, #28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	f023 0201 	bic.w	r2, r3, #1
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a1b      	ldr	r3, [r3, #32]
 8006e22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	4b2b      	ldr	r3, [pc, #172]	; (8006ee0 <TIM_OC1_SetConfig+0xd8>)
 8006e34:	4013      	ands	r3, r2
 8006e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f023 0303 	bic.w	r3, r3, #3
 8006e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f023 0302 	bic.w	r3, r3, #2
 8006e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a21      	ldr	r2, [pc, #132]	; (8006ee4 <TIM_OC1_SetConfig+0xdc>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d003      	beq.n	8006e6c <TIM_OC1_SetConfig+0x64>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a20      	ldr	r2, [pc, #128]	; (8006ee8 <TIM_OC1_SetConfig+0xe0>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d10c      	bne.n	8006e86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	f023 0308 	bic.w	r3, r3, #8
 8006e72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f023 0304 	bic.w	r3, r3, #4
 8006e84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a16      	ldr	r2, [pc, #88]	; (8006ee4 <TIM_OC1_SetConfig+0xdc>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d003      	beq.n	8006e96 <TIM_OC1_SetConfig+0x8e>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a15      	ldr	r2, [pc, #84]	; (8006ee8 <TIM_OC1_SetConfig+0xe0>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d111      	bne.n	8006eba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	685a      	ldr	r2, [r3, #4]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	621a      	str	r2, [r3, #32]
}
 8006ed4:	bf00      	nop
 8006ed6:	371c      	adds	r7, #28
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	fffeff8f 	.word	0xfffeff8f
 8006ee4:	40010000 	.word	0x40010000
 8006ee8:	40010400 	.word	0x40010400

08006eec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	f023 0210 	bic.w	r2, r3, #16
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	4b2e      	ldr	r3, [pc, #184]	; (8006fd0 <TIM_OC2_SetConfig+0xe4>)
 8006f18:	4013      	ands	r3, r2
 8006f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	021b      	lsls	r3, r3, #8
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	f023 0320 	bic.w	r3, r3, #32
 8006f36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	011b      	lsls	r3, r3, #4
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a23      	ldr	r2, [pc, #140]	; (8006fd4 <TIM_OC2_SetConfig+0xe8>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d003      	beq.n	8006f54 <TIM_OC2_SetConfig+0x68>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a22      	ldr	r2, [pc, #136]	; (8006fd8 <TIM_OC2_SetConfig+0xec>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d10d      	bne.n	8006f70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	011b      	lsls	r3, r3, #4
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a18      	ldr	r2, [pc, #96]	; (8006fd4 <TIM_OC2_SetConfig+0xe8>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d003      	beq.n	8006f80 <TIM_OC2_SetConfig+0x94>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a17      	ldr	r2, [pc, #92]	; (8006fd8 <TIM_OC2_SetConfig+0xec>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d113      	bne.n	8006fa8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	695b      	ldr	r3, [r3, #20]
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	693a      	ldr	r2, [r7, #16]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	693a      	ldr	r2, [r7, #16]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	685a      	ldr	r2, [r3, #4]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	621a      	str	r2, [r3, #32]
}
 8006fc2:	bf00      	nop
 8006fc4:	371c      	adds	r7, #28
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	feff8fff 	.word	0xfeff8fff
 8006fd4:	40010000 	.word	0x40010000
 8006fd8:	40010400 	.word	0x40010400

08006fdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b087      	sub	sp, #28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	4b2d      	ldr	r3, [pc, #180]	; (80070bc <TIM_OC3_SetConfig+0xe0>)
 8007008:	4013      	ands	r3, r2
 800700a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f023 0303 	bic.w	r3, r3, #3
 8007012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	4313      	orrs	r3, r2
 800701c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	021b      	lsls	r3, r3, #8
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	4313      	orrs	r3, r2
 8007030:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a22      	ldr	r2, [pc, #136]	; (80070c0 <TIM_OC3_SetConfig+0xe4>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d003      	beq.n	8007042 <TIM_OC3_SetConfig+0x66>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a21      	ldr	r2, [pc, #132]	; (80070c4 <TIM_OC3_SetConfig+0xe8>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d10d      	bne.n	800705e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007048:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	021b      	lsls	r3, r3, #8
 8007050:	697a      	ldr	r2, [r7, #20]
 8007052:	4313      	orrs	r3, r2
 8007054:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800705c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a17      	ldr	r2, [pc, #92]	; (80070c0 <TIM_OC3_SetConfig+0xe4>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d003      	beq.n	800706e <TIM_OC3_SetConfig+0x92>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a16      	ldr	r2, [pc, #88]	; (80070c4 <TIM_OC3_SetConfig+0xe8>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d113      	bne.n	8007096 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007074:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800707c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	011b      	lsls	r3, r3, #4
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	4313      	orrs	r3, r2
 8007088:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	011b      	lsls	r3, r3, #4
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	4313      	orrs	r3, r2
 8007094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	685a      	ldr	r2, [r3, #4]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	621a      	str	r2, [r3, #32]
}
 80070b0:	bf00      	nop
 80070b2:	371c      	adds	r7, #28
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	fffeff8f 	.word	0xfffeff8f
 80070c0:	40010000 	.word	0x40010000
 80070c4:	40010400 	.word	0x40010400

080070c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b087      	sub	sp, #28
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	4b1e      	ldr	r3, [pc, #120]	; (800716c <TIM_OC4_SetConfig+0xa4>)
 80070f4:	4013      	ands	r3, r2
 80070f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	021b      	lsls	r3, r3, #8
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	4313      	orrs	r3, r2
 800710a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007112:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	031b      	lsls	r3, r3, #12
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	4313      	orrs	r3, r2
 800711e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a13      	ldr	r2, [pc, #76]	; (8007170 <TIM_OC4_SetConfig+0xa8>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d003      	beq.n	8007130 <TIM_OC4_SetConfig+0x68>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a12      	ldr	r2, [pc, #72]	; (8007174 <TIM_OC4_SetConfig+0xac>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d109      	bne.n	8007144 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007136:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	695b      	ldr	r3, [r3, #20]
 800713c:	019b      	lsls	r3, r3, #6
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	4313      	orrs	r3, r2
 8007142:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	621a      	str	r2, [r3, #32]
}
 800715e:	bf00      	nop
 8007160:	371c      	adds	r7, #28
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	feff8fff 	.word	0xfeff8fff
 8007170:	40010000 	.word	0x40010000
 8007174:	40010400 	.word	0x40010400

08007178 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007178:	b480      	push	{r7}
 800717a:	b087      	sub	sp, #28
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800719e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	4b1b      	ldr	r3, [pc, #108]	; (8007210 <TIM_OC5_SetConfig+0x98>)
 80071a4:	4013      	ands	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80071b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	041b      	lsls	r3, r3, #16
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a12      	ldr	r2, [pc, #72]	; (8007214 <TIM_OC5_SetConfig+0x9c>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d003      	beq.n	80071d6 <TIM_OC5_SetConfig+0x5e>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a11      	ldr	r2, [pc, #68]	; (8007218 <TIM_OC5_SetConfig+0xa0>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d109      	bne.n	80071ea <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	021b      	lsls	r3, r3, #8
 80071e4:	697a      	ldr	r2, [r7, #20]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	685a      	ldr	r2, [r3, #4]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	693a      	ldr	r2, [r7, #16]
 8007202:	621a      	str	r2, [r3, #32]
}
 8007204:	bf00      	nop
 8007206:	371c      	adds	r7, #28
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	fffeff8f 	.word	0xfffeff8f
 8007214:	40010000 	.word	0x40010000
 8007218:	40010400 	.word	0x40010400

0800721c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800721c:	b480      	push	{r7}
 800721e:	b087      	sub	sp, #28
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a1b      	ldr	r3, [r3, #32]
 800722a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	4b1c      	ldr	r3, [pc, #112]	; (80072b8 <TIM_OC6_SetConfig+0x9c>)
 8007248:	4013      	ands	r3, r2
 800724a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	021b      	lsls	r3, r3, #8
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	4313      	orrs	r3, r2
 8007256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800725e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	051b      	lsls	r3, r3, #20
 8007266:	693a      	ldr	r2, [r7, #16]
 8007268:	4313      	orrs	r3, r2
 800726a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a13      	ldr	r2, [pc, #76]	; (80072bc <TIM_OC6_SetConfig+0xa0>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d003      	beq.n	800727c <TIM_OC6_SetConfig+0x60>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a12      	ldr	r2, [pc, #72]	; (80072c0 <TIM_OC6_SetConfig+0xa4>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d109      	bne.n	8007290 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007282:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	695b      	ldr	r3, [r3, #20]
 8007288:	029b      	lsls	r3, r3, #10
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	4313      	orrs	r3, r2
 800728e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	685a      	ldr	r2, [r3, #4]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	621a      	str	r2, [r3, #32]
}
 80072aa:	bf00      	nop
 80072ac:	371c      	adds	r7, #28
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	feff8fff 	.word	0xfeff8fff
 80072bc:	40010000 	.word	0x40010000
 80072c0:	40010400 	.word	0x40010400

080072c4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b086      	sub	sp, #24
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072dc:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	4b39      	ldr	r3, [pc, #228]	; (80073d0 <TIM_SlaveTimer_SetConfig+0x10c>)
 80072ec:	4013      	ands	r3, r2
 80072ee:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	697a      	ldr	r2, [r7, #20]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	2b30      	cmp	r3, #48	; 0x30
 8007308:	d05c      	beq.n	80073c4 <TIM_SlaveTimer_SetConfig+0x100>
 800730a:	2b30      	cmp	r3, #48	; 0x30
 800730c:	d806      	bhi.n	800731c <TIM_SlaveTimer_SetConfig+0x58>
 800730e:	2b10      	cmp	r3, #16
 8007310:	d058      	beq.n	80073c4 <TIM_SlaveTimer_SetConfig+0x100>
 8007312:	2b20      	cmp	r3, #32
 8007314:	d056      	beq.n	80073c4 <TIM_SlaveTimer_SetConfig+0x100>
 8007316:	2b00      	cmp	r3, #0
 8007318:	d054      	beq.n	80073c4 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800731a:	e054      	b.n	80073c6 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800731c:	2b50      	cmp	r3, #80	; 0x50
 800731e:	d03d      	beq.n	800739c <TIM_SlaveTimer_SetConfig+0xd8>
 8007320:	2b50      	cmp	r3, #80	; 0x50
 8007322:	d802      	bhi.n	800732a <TIM_SlaveTimer_SetConfig+0x66>
 8007324:	2b40      	cmp	r3, #64	; 0x40
 8007326:	d010      	beq.n	800734a <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8007328:	e04d      	b.n	80073c6 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800732a:	2b60      	cmp	r3, #96	; 0x60
 800732c:	d040      	beq.n	80073b0 <TIM_SlaveTimer_SetConfig+0xec>
 800732e:	2b70      	cmp	r3, #112	; 0x70
 8007330:	d000      	beq.n	8007334 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8007332:	e048      	b.n	80073c6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6818      	ldr	r0, [r3, #0]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	68d9      	ldr	r1, [r3, #12]
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	689a      	ldr	r2, [r3, #8]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	f000 f9cf 	bl	80076e6 <TIM_ETR_SetConfig>
      break;
 8007348:	e03d      	b.n	80073c6 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2b05      	cmp	r3, #5
 8007350:	d101      	bne.n	8007356 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e038      	b.n	80073c8 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6a1a      	ldr	r2, [r3, #32]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f022 0201 	bic.w	r2, r2, #1
 800736c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800737c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	011b      	lsls	r3, r3, #4
 8007384:	68fa      	ldr	r2, [r7, #12]
 8007386:	4313      	orrs	r3, r2
 8007388:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	693a      	ldr	r2, [r7, #16]
 8007398:	621a      	str	r2, [r3, #32]
      break;
 800739a:	e014      	b.n	80073c6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6818      	ldr	r0, [r3, #0]
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	6899      	ldr	r1, [r3, #8]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	461a      	mov	r2, r3
 80073aa:	f000 f887 	bl	80074bc <TIM_TI1_ConfigInputStage>
      break;
 80073ae:	e00a      	b.n	80073c6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6818      	ldr	r0, [r3, #0]
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	6899      	ldr	r1, [r3, #8]
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	461a      	mov	r2, r3
 80073be:	f000 f8e9 	bl	8007594 <TIM_TI2_ConfigInputStage>
      break;
 80073c2:	e000      	b.n	80073c6 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 80073c4:	bf00      	nop
  }
  return HAL_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3718      	adds	r7, #24
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	fffefff8 	.word	0xfffefff8

080073d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b087      	sub	sp, #28
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
 80073e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	f023 0201 	bic.w	r2, r3, #1
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	699b      	ldr	r3, [r3, #24]
 80073f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6a1b      	ldr	r3, [r3, #32]
 80073f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	4a28      	ldr	r2, [pc, #160]	; (80074a0 <TIM_TI1_SetConfig+0xcc>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d01b      	beq.n	800743a <TIM_TI1_SetConfig+0x66>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007408:	d017      	beq.n	800743a <TIM_TI1_SetConfig+0x66>
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	4a25      	ldr	r2, [pc, #148]	; (80074a4 <TIM_TI1_SetConfig+0xd0>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d013      	beq.n	800743a <TIM_TI1_SetConfig+0x66>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	4a24      	ldr	r2, [pc, #144]	; (80074a8 <TIM_TI1_SetConfig+0xd4>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d00f      	beq.n	800743a <TIM_TI1_SetConfig+0x66>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	4a23      	ldr	r2, [pc, #140]	; (80074ac <TIM_TI1_SetConfig+0xd8>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d00b      	beq.n	800743a <TIM_TI1_SetConfig+0x66>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	4a22      	ldr	r2, [pc, #136]	; (80074b0 <TIM_TI1_SetConfig+0xdc>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d007      	beq.n	800743a <TIM_TI1_SetConfig+0x66>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	4a21      	ldr	r2, [pc, #132]	; (80074b4 <TIM_TI1_SetConfig+0xe0>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d003      	beq.n	800743a <TIM_TI1_SetConfig+0x66>
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	4a20      	ldr	r2, [pc, #128]	; (80074b8 <TIM_TI1_SetConfig+0xe4>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d101      	bne.n	800743e <TIM_TI1_SetConfig+0x6a>
 800743a:	2301      	movs	r3, #1
 800743c:	e000      	b.n	8007440 <TIM_TI1_SetConfig+0x6c>
 800743e:	2300      	movs	r3, #0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d008      	beq.n	8007456 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	f023 0303 	bic.w	r3, r3, #3
 800744a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800744c:	697a      	ldr	r2, [r7, #20]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4313      	orrs	r3, r2
 8007452:	617b      	str	r3, [r7, #20]
 8007454:	e003      	b.n	800745e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	f043 0301 	orr.w	r3, r3, #1
 800745c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007464:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	011b      	lsls	r3, r3, #4
 800746a:	b2db      	uxtb	r3, r3
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	4313      	orrs	r3, r2
 8007470:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	f023 030a 	bic.w	r3, r3, #10
 8007478:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	f003 030a 	and.w	r3, r3, #10
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	4313      	orrs	r3, r2
 8007484:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	693a      	ldr	r2, [r7, #16]
 8007490:	621a      	str	r2, [r3, #32]
}
 8007492:	bf00      	nop
 8007494:	371c      	adds	r7, #28
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	40010000 	.word	0x40010000
 80074a4:	40000400 	.word	0x40000400
 80074a8:	40000800 	.word	0x40000800
 80074ac:	40000c00 	.word	0x40000c00
 80074b0:	40010400 	.word	0x40010400
 80074b4:	40014000 	.word	0x40014000
 80074b8:	40001800 	.word	0x40001800

080074bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074bc:	b480      	push	{r7}
 80074be:	b087      	sub	sp, #28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6a1b      	ldr	r3, [r3, #32]
 80074cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	f023 0201 	bic.w	r2, r3, #1
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	011b      	lsls	r3, r3, #4
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	f023 030a 	bic.w	r3, r3, #10
 80074f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074fa:	697a      	ldr	r2, [r7, #20]
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	4313      	orrs	r3, r2
 8007500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	621a      	str	r2, [r3, #32]
}
 800750e:	bf00      	nop
 8007510:	371c      	adds	r7, #28
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr

0800751a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800751a:	b480      	push	{r7}
 800751c:	b087      	sub	sp, #28
 800751e:	af00      	add	r7, sp, #0
 8007520:	60f8      	str	r0, [r7, #12]
 8007522:	60b9      	str	r1, [r7, #8]
 8007524:	607a      	str	r2, [r7, #4]
 8007526:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6a1b      	ldr	r3, [r3, #32]
 800752c:	f023 0210 	bic.w	r2, r3, #16
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6a1b      	ldr	r3, [r3, #32]
 800753e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007546:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	021b      	lsls	r3, r3, #8
 800754c:	697a      	ldr	r2, [r7, #20]
 800754e:	4313      	orrs	r3, r2
 8007550:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007558:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	031b      	lsls	r3, r3, #12
 800755e:	b29b      	uxth	r3, r3
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	4313      	orrs	r3, r2
 8007564:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800756c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	011b      	lsls	r3, r3, #4
 8007572:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007576:	693a      	ldr	r2, [r7, #16]
 8007578:	4313      	orrs	r3, r2
 800757a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	697a      	ldr	r2, [r7, #20]
 8007580:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	693a      	ldr	r2, [r7, #16]
 8007586:	621a      	str	r2, [r3, #32]
}
 8007588:	bf00      	nop
 800758a:	371c      	adds	r7, #28
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007594:	b480      	push	{r7}
 8007596:	b087      	sub	sp, #28
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6a1b      	ldr	r3, [r3, #32]
 80075a4:	f023 0210 	bic.w	r2, r3, #16
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6a1b      	ldr	r3, [r3, #32]
 80075b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	031b      	lsls	r3, r3, #12
 80075c4:	697a      	ldr	r2, [r7, #20]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	011b      	lsls	r3, r3, #4
 80075d6:	693a      	ldr	r2, [r7, #16]
 80075d8:	4313      	orrs	r3, r2
 80075da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	697a      	ldr	r2, [r7, #20]
 80075e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	693a      	ldr	r2, [r7, #16]
 80075e6:	621a      	str	r2, [r3, #32]
}
 80075e8:	bf00      	nop
 80075ea:	371c      	adds	r7, #28
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b087      	sub	sp, #28
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
 8007600:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6a1b      	ldr	r3, [r3, #32]
 8007606:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6a1b      	ldr	r3, [r3, #32]
 8007618:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	f023 0303 	bic.w	r3, r3, #3
 8007620:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4313      	orrs	r3, r2
 8007628:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007630:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	011b      	lsls	r3, r3, #4
 8007636:	b2db      	uxtb	r3, r3
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	4313      	orrs	r3, r2
 800763c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007644:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	021b      	lsls	r3, r3, #8
 800764a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800764e:	693a      	ldr	r2, [r7, #16]
 8007650:	4313      	orrs	r3, r2
 8007652:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	621a      	str	r2, [r3, #32]
}
 8007660:	bf00      	nop
 8007662:	371c      	adds	r7, #28
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800766c:	b480      	push	{r7}
 800766e:	b087      	sub	sp, #28
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
 8007678:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6a1b      	ldr	r3, [r3, #32]
 800767e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	69db      	ldr	r3, [r3, #28]
 800768a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6a1b      	ldr	r3, [r3, #32]
 8007690:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007698:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	021b      	lsls	r3, r3, #8
 800769e:	697a      	ldr	r2, [r7, #20]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076aa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	031b      	lsls	r3, r3, #12
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80076be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	031b      	lsls	r3, r3, #12
 80076c4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80076c8:	693a      	ldr	r2, [r7, #16]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	697a      	ldr	r2, [r7, #20]
 80076d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	693a      	ldr	r2, [r7, #16]
 80076d8:	621a      	str	r2, [r3, #32]
}
 80076da:	bf00      	nop
 80076dc:	371c      	adds	r7, #28
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr

080076e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076e6:	b480      	push	{r7}
 80076e8:	b087      	sub	sp, #28
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	60f8      	str	r0, [r7, #12]
 80076ee:	60b9      	str	r1, [r7, #8]
 80076f0:	607a      	str	r2, [r7, #4]
 80076f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007700:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	021a      	lsls	r2, r3, #8
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	431a      	orrs	r2, r3
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	4313      	orrs	r3, r2
 800770e:	697a      	ldr	r2, [r7, #20]
 8007710:	4313      	orrs	r3, r2
 8007712:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	609a      	str	r2, [r3, #8]
}
 800771a:	bf00      	nop
 800771c:	371c      	adds	r7, #28
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007726:	b480      	push	{r7}
 8007728:	b087      	sub	sp, #28
 800772a:	af00      	add	r7, sp, #0
 800772c:	60f8      	str	r0, [r7, #12]
 800772e:	60b9      	str	r1, [r7, #8]
 8007730:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	f003 031f 	and.w	r3, r3, #31
 8007738:	2201      	movs	r2, #1
 800773a:	fa02 f303 	lsl.w	r3, r2, r3
 800773e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6a1a      	ldr	r2, [r3, #32]
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	43db      	mvns	r3, r3
 8007748:	401a      	ands	r2, r3
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6a1a      	ldr	r2, [r3, #32]
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	f003 031f 	and.w	r3, r3, #31
 8007758:	6879      	ldr	r1, [r7, #4]
 800775a:	fa01 f303 	lsl.w	r3, r1, r3
 800775e:	431a      	orrs	r2, r3
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	621a      	str	r2, [r3, #32]
}
 8007764:	bf00      	nop
 8007766:	371c      	adds	r7, #28
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007780:	2b01      	cmp	r3, #1
 8007782:	d101      	bne.n	8007788 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007784:	2302      	movs	r3, #2
 8007786:	e06d      	b.n	8007864 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2202      	movs	r2, #2
 8007794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a30      	ldr	r2, [pc, #192]	; (8007870 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d004      	beq.n	80077bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a2f      	ldr	r2, [pc, #188]	; (8007874 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d108      	bne.n	80077ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80077c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	4313      	orrs	r3, r2
 80077de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a20      	ldr	r2, [pc, #128]	; (8007870 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d022      	beq.n	8007838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077fa:	d01d      	beq.n	8007838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a1d      	ldr	r2, [pc, #116]	; (8007878 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d018      	beq.n	8007838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a1c      	ldr	r2, [pc, #112]	; (800787c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d013      	beq.n	8007838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a1a      	ldr	r2, [pc, #104]	; (8007880 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d00e      	beq.n	8007838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a15      	ldr	r2, [pc, #84]	; (8007874 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d009      	beq.n	8007838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a16      	ldr	r2, [pc, #88]	; (8007884 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d004      	beq.n	8007838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a15      	ldr	r2, [pc, #84]	; (8007888 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d10c      	bne.n	8007852 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800783e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	4313      	orrs	r3, r2
 8007848:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2201      	movs	r2, #1
 8007856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3714      	adds	r7, #20
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr
 8007870:	40010000 	.word	0x40010000
 8007874:	40010400 	.word	0x40010400
 8007878:	40000400 	.word	0x40000400
 800787c:	40000800 	.word	0x40000800
 8007880:	40000c00 	.word	0x40000c00
 8007884:	40014000 	.word	0x40014000
 8007888:	40001800 	.word	0x40001800

0800788c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d101      	bne.n	800789e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e040      	b.n	8007920 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d106      	bne.n	80078b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f7fa fefe 	bl	80026b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2224      	movs	r2, #36	; 0x24
 80078b8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f022 0201 	bic.w	r2, r2, #1
 80078c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 fa70 	bl	8007db0 <UART_SetConfig>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d101      	bne.n	80078da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e022      	b.n	8007920 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d002      	beq.n	80078e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fd0e 	bl	8008304 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	685a      	ldr	r2, [r3, #4]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	689a      	ldr	r2, [r3, #8]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007906:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f042 0201 	orr.w	r2, r2, #1
 8007916:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 fd95 	bl	8008448 <UART_CheckIdleState>
 800791e:	4603      	mov	r3, r0
}
 8007920:	4618      	mov	r0, r3
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	4613      	mov	r3, r2
 8007934:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800793a:	2b20      	cmp	r3, #32
 800793c:	d144      	bne.n	80079c8 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d002      	beq.n	800794a <HAL_UART_Transmit_IT+0x22>
 8007944:	88fb      	ldrh	r3, [r7, #6]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d101      	bne.n	800794e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e03d      	b.n	80079ca <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007954:	2b01      	cmp	r3, #1
 8007956:	d101      	bne.n	800795c <HAL_UART_Transmit_IT+0x34>
 8007958:	2302      	movs	r3, #2
 800795a:	e036      	b.n	80079ca <HAL_UART_Transmit_IT+0xa2>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	68ba      	ldr	r2, [r7, #8]
 8007968:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	88fa      	ldrh	r2, [r7, #6]
 800796e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	88fa      	ldrh	r2, [r7, #6]
 8007976:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2221      	movs	r2, #33	; 0x21
 800798a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007994:	d107      	bne.n	80079a6 <HAL_UART_Transmit_IT+0x7e>
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d103      	bne.n	80079a6 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	4a0d      	ldr	r2, [pc, #52]	; (80079d8 <HAL_UART_Transmit_IT+0xb0>)
 80079a2:	665a      	str	r2, [r3, #100]	; 0x64
 80079a4:	e002      	b.n	80079ac <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	4a0c      	ldr	r2, [pc, #48]	; (80079dc <HAL_UART_Transmit_IT+0xb4>)
 80079aa:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80079c2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80079c4:	2300      	movs	r3, #0
 80079c6:	e000      	b.n	80079ca <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 80079c8:	2302      	movs	r3, #2
  }
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3714      	adds	r7, #20
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	0800867b 	.word	0x0800867b
 80079dc:	08008609 	.word	0x08008609

080079e0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	4613      	mov	r3, r2
 80079ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079f2:	2b20      	cmp	r3, #32
 80079f4:	f040 808a 	bne.w	8007b0c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d002      	beq.n	8007a04 <HAL_UART_Receive_IT+0x24>
 80079fe:	88fb      	ldrh	r3, [r7, #6]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d101      	bne.n	8007a08 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e082      	b.n	8007b0e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d101      	bne.n	8007a16 <HAL_UART_Receive_IT+0x36>
 8007a12:	2302      	movs	r3, #2
 8007a14:	e07b      	b.n	8007b0e <HAL_UART_Receive_IT+0x12e>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	88fa      	ldrh	r2, [r7, #6]
 8007a28:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	88fa      	ldrh	r2, [r7, #6]
 8007a30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2200      	movs	r2, #0
 8007a38:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a42:	d10e      	bne.n	8007a62 <HAL_UART_Receive_IT+0x82>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d105      	bne.n	8007a58 <HAL_UART_Receive_IT+0x78>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007a52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a56:	e02d      	b.n	8007ab4 <HAL_UART_Receive_IT+0xd4>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	22ff      	movs	r2, #255	; 0xff
 8007a5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a60:	e028      	b.n	8007ab4 <HAL_UART_Receive_IT+0xd4>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d10d      	bne.n	8007a86 <HAL_UART_Receive_IT+0xa6>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d104      	bne.n	8007a7c <HAL_UART_Receive_IT+0x9c>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	22ff      	movs	r2, #255	; 0xff
 8007a76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a7a:	e01b      	b.n	8007ab4 <HAL_UART_Receive_IT+0xd4>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	227f      	movs	r2, #127	; 0x7f
 8007a80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a84:	e016      	b.n	8007ab4 <HAL_UART_Receive_IT+0xd4>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a8e:	d10d      	bne.n	8007aac <HAL_UART_Receive_IT+0xcc>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d104      	bne.n	8007aa2 <HAL_UART_Receive_IT+0xc2>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	227f      	movs	r2, #127	; 0x7f
 8007a9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007aa0:	e008      	b.n	8007ab4 <HAL_UART_Receive_IT+0xd4>
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	223f      	movs	r2, #63	; 0x3f
 8007aa6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007aaa:	e003      	b.n	8007ab4 <HAL_UART_Receive_IT+0xd4>
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2222      	movs	r2, #34	; 0x22
 8007abe:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	689a      	ldr	r2, [r3, #8]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f042 0201 	orr.w	r2, r2, #1
 8007ace:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ad8:	d107      	bne.n	8007aea <HAL_UART_Receive_IT+0x10a>
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d103      	bne.n	8007aea <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	4a0d      	ldr	r2, [pc, #52]	; (8007b1c <HAL_UART_Receive_IT+0x13c>)
 8007ae6:	661a      	str	r2, [r3, #96]	; 0x60
 8007ae8:	e002      	b.n	8007af0 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	4a0c      	ldr	r2, [pc, #48]	; (8007b20 <HAL_UART_Receive_IT+0x140>)
 8007aee:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007b06:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	e000      	b.n	8007b0e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8007b0c:	2302      	movs	r3, #2
  }
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3714      	adds	r7, #20
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	080087cf 	.word	0x080087cf
 8007b20:	08008729 	.word	0x08008729

08007b24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b088      	sub	sp, #32
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	69db      	ldr	r3, [r3, #28]
 8007b32:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007b44:	69fa      	ldr	r2, [r7, #28]
 8007b46:	f640 030f 	movw	r3, #2063	; 0x80f
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d113      	bne.n	8007b7c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	f003 0320 	and.w	r3, r3, #32
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00e      	beq.n	8007b7c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	f003 0320 	and.w	r3, r3, #32
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d009      	beq.n	8007b7c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 8100 	beq.w	8007d72 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	4798      	blx	r3
      }
      return;
 8007b7a:	e0fa      	b.n	8007d72 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f000 80d5 	beq.w	8007d2e <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d105      	bne.n	8007b9a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 80ca 	beq.w	8007d2e <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	f003 0301 	and.w	r3, r3, #1
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00e      	beq.n	8007bc2 <HAL_UART_IRQHandler+0x9e>
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d009      	beq.n	8007bc2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bba:	f043 0201 	orr.w	r2, r3, #1
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	f003 0302 	and.w	r3, r3, #2
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00e      	beq.n	8007bea <HAL_UART_IRQHandler+0xc6>
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d009      	beq.n	8007bea <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2202      	movs	r2, #2
 8007bdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007be2:	f043 0204 	orr.w	r2, r3, #4
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	f003 0304 	and.w	r3, r3, #4
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00e      	beq.n	8007c12 <HAL_UART_IRQHandler+0xee>
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	f003 0301 	and.w	r3, r3, #1
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d009      	beq.n	8007c12 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2204      	movs	r2, #4
 8007c04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c0a:	f043 0202 	orr.w	r2, r3, #2
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	f003 0308 	and.w	r3, r3, #8
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d013      	beq.n	8007c44 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	f003 0320 	and.w	r3, r3, #32
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d104      	bne.n	8007c30 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d009      	beq.n	8007c44 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2208      	movs	r2, #8
 8007c36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c3c:	f043 0208 	orr.w	r2, r3, #8
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00f      	beq.n	8007c6e <HAL_UART_IRQHandler+0x14a>
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00a      	beq.n	8007c6e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c66:	f043 0220 	orr.w	r2, r3, #32
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d07f      	beq.n	8007d76 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	f003 0320 	and.w	r3, r3, #32
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00c      	beq.n	8007c9a <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	f003 0320 	and.w	r3, r3, #32
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d007      	beq.n	8007c9a <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d003      	beq.n	8007c9a <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c9e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007caa:	2b40      	cmp	r3, #64	; 0x40
 8007cac:	d004      	beq.n	8007cb8 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d031      	beq.n	8007d1c <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 fc6f 	bl	800859c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc8:	2b40      	cmp	r3, #64	; 0x40
 8007cca:	d123      	bne.n	8007d14 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	689a      	ldr	r2, [r3, #8]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cda:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d013      	beq.n	8007d0c <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ce8:	4a26      	ldr	r2, [pc, #152]	; (8007d84 <HAL_UART_IRQHandler+0x260>)
 8007cea:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fb fb17 	bl	8003324 <HAL_DMA_Abort_IT>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d016      	beq.n	8007d2a <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007d06:	4610      	mov	r0, r2
 8007d08:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d0a:	e00e      	b.n	8007d2a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f845 	bl	8007d9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d12:	e00a      	b.n	8007d2a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 f841 	bl	8007d9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d1a:	e006      	b.n	8007d2a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 f83d 	bl	8007d9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8007d28:	e025      	b.n	8007d76 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d2a:	bf00      	nop
    return;
 8007d2c:	e023      	b.n	8007d76 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00d      	beq.n	8007d54 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d008      	beq.n	8007d54 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d017      	beq.n	8007d7a <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	4798      	blx	r3
    }
    return;
 8007d52:	e012      	b.n	8007d7a <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00e      	beq.n	8007d7c <HAL_UART_IRQHandler+0x258>
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d009      	beq.n	8007d7c <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 fcc4 	bl	80086f6 <UART_EndTransmit_IT>
    return;
 8007d6e:	bf00      	nop
 8007d70:	e004      	b.n	8007d7c <HAL_UART_IRQHandler+0x258>
      return;
 8007d72:	bf00      	nop
 8007d74:	e002      	b.n	8007d7c <HAL_UART_IRQHandler+0x258>
    return;
 8007d76:	bf00      	nop
 8007d78:	e000      	b.n	8007d7c <HAL_UART_IRQHandler+0x258>
    return;
 8007d7a:	bf00      	nop
  }

}
 8007d7c:	3720      	adds	r7, #32
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	080085dd 	.word	0x080085dd

08007d88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007da4:	bf00      	nop
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b088      	sub	sp, #32
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007db8:	2300      	movs	r3, #0
 8007dba:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	689a      	ldr	r2, [r3, #8]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	431a      	orrs	r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	431a      	orrs	r2, r3
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	69db      	ldr	r3, [r3, #28]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	4bb1      	ldr	r3, [pc, #708]	; (80080a4 <UART_SetConfig+0x2f4>)
 8007de0:	4013      	ands	r3, r2
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	6812      	ldr	r2, [r2, #0]
 8007de6:	6939      	ldr	r1, [r7, #16]
 8007de8:	430b      	orrs	r3, r1
 8007dea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	68da      	ldr	r2, [r3, #12]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a1b      	ldr	r3, [r3, #32]
 8007e0c:	693a      	ldr	r2, [r7, #16]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	693a      	ldr	r2, [r7, #16]
 8007e22:	430a      	orrs	r2, r1
 8007e24:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a9f      	ldr	r2, [pc, #636]	; (80080a8 <UART_SetConfig+0x2f8>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d121      	bne.n	8007e74 <UART_SetConfig+0xc4>
 8007e30:	4b9e      	ldr	r3, [pc, #632]	; (80080ac <UART_SetConfig+0x2fc>)
 8007e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e36:	f003 0303 	and.w	r3, r3, #3
 8007e3a:	2b03      	cmp	r3, #3
 8007e3c:	d816      	bhi.n	8007e6c <UART_SetConfig+0xbc>
 8007e3e:	a201      	add	r2, pc, #4	; (adr r2, 8007e44 <UART_SetConfig+0x94>)
 8007e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e44:	08007e55 	.word	0x08007e55
 8007e48:	08007e61 	.word	0x08007e61
 8007e4c:	08007e5b 	.word	0x08007e5b
 8007e50:	08007e67 	.word	0x08007e67
 8007e54:	2301      	movs	r3, #1
 8007e56:	77fb      	strb	r3, [r7, #31]
 8007e58:	e151      	b.n	80080fe <UART_SetConfig+0x34e>
 8007e5a:	2302      	movs	r3, #2
 8007e5c:	77fb      	strb	r3, [r7, #31]
 8007e5e:	e14e      	b.n	80080fe <UART_SetConfig+0x34e>
 8007e60:	2304      	movs	r3, #4
 8007e62:	77fb      	strb	r3, [r7, #31]
 8007e64:	e14b      	b.n	80080fe <UART_SetConfig+0x34e>
 8007e66:	2308      	movs	r3, #8
 8007e68:	77fb      	strb	r3, [r7, #31]
 8007e6a:	e148      	b.n	80080fe <UART_SetConfig+0x34e>
 8007e6c:	2310      	movs	r3, #16
 8007e6e:	77fb      	strb	r3, [r7, #31]
 8007e70:	bf00      	nop
 8007e72:	e144      	b.n	80080fe <UART_SetConfig+0x34e>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a8d      	ldr	r2, [pc, #564]	; (80080b0 <UART_SetConfig+0x300>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d134      	bne.n	8007ee8 <UART_SetConfig+0x138>
 8007e7e:	4b8b      	ldr	r3, [pc, #556]	; (80080ac <UART_SetConfig+0x2fc>)
 8007e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e84:	f003 030c 	and.w	r3, r3, #12
 8007e88:	2b0c      	cmp	r3, #12
 8007e8a:	d829      	bhi.n	8007ee0 <UART_SetConfig+0x130>
 8007e8c:	a201      	add	r2, pc, #4	; (adr r2, 8007e94 <UART_SetConfig+0xe4>)
 8007e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e92:	bf00      	nop
 8007e94:	08007ec9 	.word	0x08007ec9
 8007e98:	08007ee1 	.word	0x08007ee1
 8007e9c:	08007ee1 	.word	0x08007ee1
 8007ea0:	08007ee1 	.word	0x08007ee1
 8007ea4:	08007ed5 	.word	0x08007ed5
 8007ea8:	08007ee1 	.word	0x08007ee1
 8007eac:	08007ee1 	.word	0x08007ee1
 8007eb0:	08007ee1 	.word	0x08007ee1
 8007eb4:	08007ecf 	.word	0x08007ecf
 8007eb8:	08007ee1 	.word	0x08007ee1
 8007ebc:	08007ee1 	.word	0x08007ee1
 8007ec0:	08007ee1 	.word	0x08007ee1
 8007ec4:	08007edb 	.word	0x08007edb
 8007ec8:	2300      	movs	r3, #0
 8007eca:	77fb      	strb	r3, [r7, #31]
 8007ecc:	e117      	b.n	80080fe <UART_SetConfig+0x34e>
 8007ece:	2302      	movs	r3, #2
 8007ed0:	77fb      	strb	r3, [r7, #31]
 8007ed2:	e114      	b.n	80080fe <UART_SetConfig+0x34e>
 8007ed4:	2304      	movs	r3, #4
 8007ed6:	77fb      	strb	r3, [r7, #31]
 8007ed8:	e111      	b.n	80080fe <UART_SetConfig+0x34e>
 8007eda:	2308      	movs	r3, #8
 8007edc:	77fb      	strb	r3, [r7, #31]
 8007ede:	e10e      	b.n	80080fe <UART_SetConfig+0x34e>
 8007ee0:	2310      	movs	r3, #16
 8007ee2:	77fb      	strb	r3, [r7, #31]
 8007ee4:	bf00      	nop
 8007ee6:	e10a      	b.n	80080fe <UART_SetConfig+0x34e>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a71      	ldr	r2, [pc, #452]	; (80080b4 <UART_SetConfig+0x304>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d120      	bne.n	8007f34 <UART_SetConfig+0x184>
 8007ef2:	4b6e      	ldr	r3, [pc, #440]	; (80080ac <UART_SetConfig+0x2fc>)
 8007ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ef8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007efc:	2b10      	cmp	r3, #16
 8007efe:	d00f      	beq.n	8007f20 <UART_SetConfig+0x170>
 8007f00:	2b10      	cmp	r3, #16
 8007f02:	d802      	bhi.n	8007f0a <UART_SetConfig+0x15a>
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d005      	beq.n	8007f14 <UART_SetConfig+0x164>
 8007f08:	e010      	b.n	8007f2c <UART_SetConfig+0x17c>
 8007f0a:	2b20      	cmp	r3, #32
 8007f0c:	d005      	beq.n	8007f1a <UART_SetConfig+0x16a>
 8007f0e:	2b30      	cmp	r3, #48	; 0x30
 8007f10:	d009      	beq.n	8007f26 <UART_SetConfig+0x176>
 8007f12:	e00b      	b.n	8007f2c <UART_SetConfig+0x17c>
 8007f14:	2300      	movs	r3, #0
 8007f16:	77fb      	strb	r3, [r7, #31]
 8007f18:	e0f1      	b.n	80080fe <UART_SetConfig+0x34e>
 8007f1a:	2302      	movs	r3, #2
 8007f1c:	77fb      	strb	r3, [r7, #31]
 8007f1e:	e0ee      	b.n	80080fe <UART_SetConfig+0x34e>
 8007f20:	2304      	movs	r3, #4
 8007f22:	77fb      	strb	r3, [r7, #31]
 8007f24:	e0eb      	b.n	80080fe <UART_SetConfig+0x34e>
 8007f26:	2308      	movs	r3, #8
 8007f28:	77fb      	strb	r3, [r7, #31]
 8007f2a:	e0e8      	b.n	80080fe <UART_SetConfig+0x34e>
 8007f2c:	2310      	movs	r3, #16
 8007f2e:	77fb      	strb	r3, [r7, #31]
 8007f30:	bf00      	nop
 8007f32:	e0e4      	b.n	80080fe <UART_SetConfig+0x34e>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a5f      	ldr	r2, [pc, #380]	; (80080b8 <UART_SetConfig+0x308>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d120      	bne.n	8007f80 <UART_SetConfig+0x1d0>
 8007f3e:	4b5b      	ldr	r3, [pc, #364]	; (80080ac <UART_SetConfig+0x2fc>)
 8007f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f44:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007f48:	2b40      	cmp	r3, #64	; 0x40
 8007f4a:	d00f      	beq.n	8007f6c <UART_SetConfig+0x1bc>
 8007f4c:	2b40      	cmp	r3, #64	; 0x40
 8007f4e:	d802      	bhi.n	8007f56 <UART_SetConfig+0x1a6>
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d005      	beq.n	8007f60 <UART_SetConfig+0x1b0>
 8007f54:	e010      	b.n	8007f78 <UART_SetConfig+0x1c8>
 8007f56:	2b80      	cmp	r3, #128	; 0x80
 8007f58:	d005      	beq.n	8007f66 <UART_SetConfig+0x1b6>
 8007f5a:	2bc0      	cmp	r3, #192	; 0xc0
 8007f5c:	d009      	beq.n	8007f72 <UART_SetConfig+0x1c2>
 8007f5e:	e00b      	b.n	8007f78 <UART_SetConfig+0x1c8>
 8007f60:	2300      	movs	r3, #0
 8007f62:	77fb      	strb	r3, [r7, #31]
 8007f64:	e0cb      	b.n	80080fe <UART_SetConfig+0x34e>
 8007f66:	2302      	movs	r3, #2
 8007f68:	77fb      	strb	r3, [r7, #31]
 8007f6a:	e0c8      	b.n	80080fe <UART_SetConfig+0x34e>
 8007f6c:	2304      	movs	r3, #4
 8007f6e:	77fb      	strb	r3, [r7, #31]
 8007f70:	e0c5      	b.n	80080fe <UART_SetConfig+0x34e>
 8007f72:	2308      	movs	r3, #8
 8007f74:	77fb      	strb	r3, [r7, #31]
 8007f76:	e0c2      	b.n	80080fe <UART_SetConfig+0x34e>
 8007f78:	2310      	movs	r3, #16
 8007f7a:	77fb      	strb	r3, [r7, #31]
 8007f7c:	bf00      	nop
 8007f7e:	e0be      	b.n	80080fe <UART_SetConfig+0x34e>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a4d      	ldr	r2, [pc, #308]	; (80080bc <UART_SetConfig+0x30c>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d124      	bne.n	8007fd4 <UART_SetConfig+0x224>
 8007f8a:	4b48      	ldr	r3, [pc, #288]	; (80080ac <UART_SetConfig+0x2fc>)
 8007f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f98:	d012      	beq.n	8007fc0 <UART_SetConfig+0x210>
 8007f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f9e:	d802      	bhi.n	8007fa6 <UART_SetConfig+0x1f6>
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d007      	beq.n	8007fb4 <UART_SetConfig+0x204>
 8007fa4:	e012      	b.n	8007fcc <UART_SetConfig+0x21c>
 8007fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007faa:	d006      	beq.n	8007fba <UART_SetConfig+0x20a>
 8007fac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fb0:	d009      	beq.n	8007fc6 <UART_SetConfig+0x216>
 8007fb2:	e00b      	b.n	8007fcc <UART_SetConfig+0x21c>
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	77fb      	strb	r3, [r7, #31]
 8007fb8:	e0a1      	b.n	80080fe <UART_SetConfig+0x34e>
 8007fba:	2302      	movs	r3, #2
 8007fbc:	77fb      	strb	r3, [r7, #31]
 8007fbe:	e09e      	b.n	80080fe <UART_SetConfig+0x34e>
 8007fc0:	2304      	movs	r3, #4
 8007fc2:	77fb      	strb	r3, [r7, #31]
 8007fc4:	e09b      	b.n	80080fe <UART_SetConfig+0x34e>
 8007fc6:	2308      	movs	r3, #8
 8007fc8:	77fb      	strb	r3, [r7, #31]
 8007fca:	e098      	b.n	80080fe <UART_SetConfig+0x34e>
 8007fcc:	2310      	movs	r3, #16
 8007fce:	77fb      	strb	r3, [r7, #31]
 8007fd0:	bf00      	nop
 8007fd2:	e094      	b.n	80080fe <UART_SetConfig+0x34e>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a39      	ldr	r2, [pc, #228]	; (80080c0 <UART_SetConfig+0x310>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d124      	bne.n	8008028 <UART_SetConfig+0x278>
 8007fde:	4b33      	ldr	r3, [pc, #204]	; (80080ac <UART_SetConfig+0x2fc>)
 8007fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fe4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fec:	d012      	beq.n	8008014 <UART_SetConfig+0x264>
 8007fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ff2:	d802      	bhi.n	8007ffa <UART_SetConfig+0x24a>
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d007      	beq.n	8008008 <UART_SetConfig+0x258>
 8007ff8:	e012      	b.n	8008020 <UART_SetConfig+0x270>
 8007ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ffe:	d006      	beq.n	800800e <UART_SetConfig+0x25e>
 8008000:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008004:	d009      	beq.n	800801a <UART_SetConfig+0x26a>
 8008006:	e00b      	b.n	8008020 <UART_SetConfig+0x270>
 8008008:	2301      	movs	r3, #1
 800800a:	77fb      	strb	r3, [r7, #31]
 800800c:	e077      	b.n	80080fe <UART_SetConfig+0x34e>
 800800e:	2302      	movs	r3, #2
 8008010:	77fb      	strb	r3, [r7, #31]
 8008012:	e074      	b.n	80080fe <UART_SetConfig+0x34e>
 8008014:	2304      	movs	r3, #4
 8008016:	77fb      	strb	r3, [r7, #31]
 8008018:	e071      	b.n	80080fe <UART_SetConfig+0x34e>
 800801a:	2308      	movs	r3, #8
 800801c:	77fb      	strb	r3, [r7, #31]
 800801e:	e06e      	b.n	80080fe <UART_SetConfig+0x34e>
 8008020:	2310      	movs	r3, #16
 8008022:	77fb      	strb	r3, [r7, #31]
 8008024:	bf00      	nop
 8008026:	e06a      	b.n	80080fe <UART_SetConfig+0x34e>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a25      	ldr	r2, [pc, #148]	; (80080c4 <UART_SetConfig+0x314>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d124      	bne.n	800807c <UART_SetConfig+0x2cc>
 8008032:	4b1e      	ldr	r3, [pc, #120]	; (80080ac <UART_SetConfig+0x2fc>)
 8008034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008038:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800803c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008040:	d012      	beq.n	8008068 <UART_SetConfig+0x2b8>
 8008042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008046:	d802      	bhi.n	800804e <UART_SetConfig+0x29e>
 8008048:	2b00      	cmp	r3, #0
 800804a:	d007      	beq.n	800805c <UART_SetConfig+0x2ac>
 800804c:	e012      	b.n	8008074 <UART_SetConfig+0x2c4>
 800804e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008052:	d006      	beq.n	8008062 <UART_SetConfig+0x2b2>
 8008054:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008058:	d009      	beq.n	800806e <UART_SetConfig+0x2be>
 800805a:	e00b      	b.n	8008074 <UART_SetConfig+0x2c4>
 800805c:	2300      	movs	r3, #0
 800805e:	77fb      	strb	r3, [r7, #31]
 8008060:	e04d      	b.n	80080fe <UART_SetConfig+0x34e>
 8008062:	2302      	movs	r3, #2
 8008064:	77fb      	strb	r3, [r7, #31]
 8008066:	e04a      	b.n	80080fe <UART_SetConfig+0x34e>
 8008068:	2304      	movs	r3, #4
 800806a:	77fb      	strb	r3, [r7, #31]
 800806c:	e047      	b.n	80080fe <UART_SetConfig+0x34e>
 800806e:	2308      	movs	r3, #8
 8008070:	77fb      	strb	r3, [r7, #31]
 8008072:	e044      	b.n	80080fe <UART_SetConfig+0x34e>
 8008074:	2310      	movs	r3, #16
 8008076:	77fb      	strb	r3, [r7, #31]
 8008078:	bf00      	nop
 800807a:	e040      	b.n	80080fe <UART_SetConfig+0x34e>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a11      	ldr	r2, [pc, #68]	; (80080c8 <UART_SetConfig+0x318>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d139      	bne.n	80080fa <UART_SetConfig+0x34a>
 8008086:	4b09      	ldr	r3, [pc, #36]	; (80080ac <UART_SetConfig+0x2fc>)
 8008088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800808c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008090:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008094:	d027      	beq.n	80080e6 <UART_SetConfig+0x336>
 8008096:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800809a:	d817      	bhi.n	80080cc <UART_SetConfig+0x31c>
 800809c:	2b00      	cmp	r3, #0
 800809e:	d01c      	beq.n	80080da <UART_SetConfig+0x32a>
 80080a0:	e027      	b.n	80080f2 <UART_SetConfig+0x342>
 80080a2:	bf00      	nop
 80080a4:	efff69f3 	.word	0xefff69f3
 80080a8:	40011000 	.word	0x40011000
 80080ac:	40023800 	.word	0x40023800
 80080b0:	40004400 	.word	0x40004400
 80080b4:	40004800 	.word	0x40004800
 80080b8:	40004c00 	.word	0x40004c00
 80080bc:	40005000 	.word	0x40005000
 80080c0:	40011400 	.word	0x40011400
 80080c4:	40007800 	.word	0x40007800
 80080c8:	40007c00 	.word	0x40007c00
 80080cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080d0:	d006      	beq.n	80080e0 <UART_SetConfig+0x330>
 80080d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80080d6:	d009      	beq.n	80080ec <UART_SetConfig+0x33c>
 80080d8:	e00b      	b.n	80080f2 <UART_SetConfig+0x342>
 80080da:	2300      	movs	r3, #0
 80080dc:	77fb      	strb	r3, [r7, #31]
 80080de:	e00e      	b.n	80080fe <UART_SetConfig+0x34e>
 80080e0:	2302      	movs	r3, #2
 80080e2:	77fb      	strb	r3, [r7, #31]
 80080e4:	e00b      	b.n	80080fe <UART_SetConfig+0x34e>
 80080e6:	2304      	movs	r3, #4
 80080e8:	77fb      	strb	r3, [r7, #31]
 80080ea:	e008      	b.n	80080fe <UART_SetConfig+0x34e>
 80080ec:	2308      	movs	r3, #8
 80080ee:	77fb      	strb	r3, [r7, #31]
 80080f0:	e005      	b.n	80080fe <UART_SetConfig+0x34e>
 80080f2:	2310      	movs	r3, #16
 80080f4:	77fb      	strb	r3, [r7, #31]
 80080f6:	bf00      	nop
 80080f8:	e001      	b.n	80080fe <UART_SetConfig+0x34e>
 80080fa:	2310      	movs	r3, #16
 80080fc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	69db      	ldr	r3, [r3, #28]
 8008102:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008106:	d17f      	bne.n	8008208 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8008108:	7ffb      	ldrb	r3, [r7, #31]
 800810a:	2b08      	cmp	r3, #8
 800810c:	d85c      	bhi.n	80081c8 <UART_SetConfig+0x418>
 800810e:	a201      	add	r2, pc, #4	; (adr r2, 8008114 <UART_SetConfig+0x364>)
 8008110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008114:	08008139 	.word	0x08008139
 8008118:	08008159 	.word	0x08008159
 800811c:	08008179 	.word	0x08008179
 8008120:	080081c9 	.word	0x080081c9
 8008124:	08008191 	.word	0x08008191
 8008128:	080081c9 	.word	0x080081c9
 800812c:	080081c9 	.word	0x080081c9
 8008130:	080081c9 	.word	0x080081c9
 8008134:	080081b1 	.word	0x080081b1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008138:	f7fd fe34 	bl	8005da4 <HAL_RCC_GetPCLK1Freq>
 800813c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	005a      	lsls	r2, r3, #1
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	085b      	lsrs	r3, r3, #1
 8008148:	441a      	add	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008152:	b29b      	uxth	r3, r3
 8008154:	61bb      	str	r3, [r7, #24]
        break;
 8008156:	e03a      	b.n	80081ce <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008158:	f7fd fe38 	bl	8005dcc <HAL_RCC_GetPCLK2Freq>
 800815c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	005a      	lsls	r2, r3, #1
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	085b      	lsrs	r3, r3, #1
 8008168:	441a      	add	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008172:	b29b      	uxth	r3, r3
 8008174:	61bb      	str	r3, [r7, #24]
        break;
 8008176:	e02a      	b.n	80081ce <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	085a      	lsrs	r2, r3, #1
 800817e:	4b5f      	ldr	r3, [pc, #380]	; (80082fc <UART_SetConfig+0x54c>)
 8008180:	4413      	add	r3, r2
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	6852      	ldr	r2, [r2, #4]
 8008186:	fbb3 f3f2 	udiv	r3, r3, r2
 800818a:	b29b      	uxth	r3, r3
 800818c:	61bb      	str	r3, [r7, #24]
        break;
 800818e:	e01e      	b.n	80081ce <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008190:	f7fd fd24 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
 8008194:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	005a      	lsls	r2, r3, #1
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	085b      	lsrs	r3, r3, #1
 80081a0:	441a      	add	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	61bb      	str	r3, [r7, #24]
        break;
 80081ae:	e00e      	b.n	80081ce <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	085b      	lsrs	r3, r3, #1
 80081b6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	fbb2 f3f3 	udiv	r3, r2, r3
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	61bb      	str	r3, [r7, #24]
        break;
 80081c6:	e002      	b.n	80081ce <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	75fb      	strb	r3, [r7, #23]
        break;
 80081cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	2b0f      	cmp	r3, #15
 80081d2:	d916      	bls.n	8008202 <UART_SetConfig+0x452>
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081da:	d212      	bcs.n	8008202 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	b29b      	uxth	r3, r3
 80081e0:	f023 030f 	bic.w	r3, r3, #15
 80081e4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	085b      	lsrs	r3, r3, #1
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	f003 0307 	and.w	r3, r3, #7
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	897b      	ldrh	r3, [r7, #10]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	897a      	ldrh	r2, [r7, #10]
 80081fe:	60da      	str	r2, [r3, #12]
 8008200:	e070      	b.n	80082e4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	75fb      	strb	r3, [r7, #23]
 8008206:	e06d      	b.n	80082e4 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8008208:	7ffb      	ldrb	r3, [r7, #31]
 800820a:	2b08      	cmp	r3, #8
 800820c:	d859      	bhi.n	80082c2 <UART_SetConfig+0x512>
 800820e:	a201      	add	r2, pc, #4	; (adr r2, 8008214 <UART_SetConfig+0x464>)
 8008210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008214:	08008239 	.word	0x08008239
 8008218:	08008257 	.word	0x08008257
 800821c:	08008275 	.word	0x08008275
 8008220:	080082c3 	.word	0x080082c3
 8008224:	0800828d 	.word	0x0800828d
 8008228:	080082c3 	.word	0x080082c3
 800822c:	080082c3 	.word	0x080082c3
 8008230:	080082c3 	.word	0x080082c3
 8008234:	080082ab 	.word	0x080082ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008238:	f7fd fdb4 	bl	8005da4 <HAL_RCC_GetPCLK1Freq>
 800823c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	085a      	lsrs	r2, r3, #1
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	441a      	add	r2, r3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008250:	b29b      	uxth	r3, r3
 8008252:	61bb      	str	r3, [r7, #24]
        break;
 8008254:	e038      	b.n	80082c8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008256:	f7fd fdb9 	bl	8005dcc <HAL_RCC_GetPCLK2Freq>
 800825a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	085a      	lsrs	r2, r3, #1
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	441a      	add	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	fbb2 f3f3 	udiv	r3, r2, r3
 800826e:	b29b      	uxth	r3, r3
 8008270:	61bb      	str	r3, [r7, #24]
        break;
 8008272:	e029      	b.n	80082c8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	085a      	lsrs	r2, r3, #1
 800827a:	4b21      	ldr	r3, [pc, #132]	; (8008300 <UART_SetConfig+0x550>)
 800827c:	4413      	add	r3, r2
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	6852      	ldr	r2, [r2, #4]
 8008282:	fbb3 f3f2 	udiv	r3, r3, r2
 8008286:	b29b      	uxth	r3, r3
 8008288:	61bb      	str	r3, [r7, #24]
        break;
 800828a:	e01d      	b.n	80082c8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800828c:	f7fd fca6 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
 8008290:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	085a      	lsrs	r2, r3, #1
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	441a      	add	r2, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	61bb      	str	r3, [r7, #24]
        break;
 80082a8:	e00e      	b.n	80082c8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	085b      	lsrs	r3, r3, #1
 80082b0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082bc:	b29b      	uxth	r3, r3
 80082be:	61bb      	str	r3, [r7, #24]
        break;
 80082c0:	e002      	b.n	80082c8 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	75fb      	strb	r3, [r7, #23]
        break;
 80082c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082c8:	69bb      	ldr	r3, [r7, #24]
 80082ca:	2b0f      	cmp	r3, #15
 80082cc:	d908      	bls.n	80082e0 <UART_SetConfig+0x530>
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082d4:	d204      	bcs.n	80082e0 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	69ba      	ldr	r2, [r7, #24]
 80082dc:	60da      	str	r2, [r3, #12]
 80082de:	e001      	b.n	80082e4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80082f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3720      	adds	r7, #32
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	01e84800 	.word	0x01e84800
 8008300:	00f42400 	.word	0x00f42400

08008304 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008310:	f003 0301 	and.w	r3, r3, #1
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00a      	beq.n	800832e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	430a      	orrs	r2, r1
 800832c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008332:	f003 0302 	and.w	r3, r3, #2
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00a      	beq.n	8008350 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	430a      	orrs	r2, r1
 800834e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008354:	f003 0304 	and.w	r3, r3, #4
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00a      	beq.n	8008372 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	430a      	orrs	r2, r1
 8008370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008376:	f003 0308 	and.w	r3, r3, #8
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00a      	beq.n	8008394 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	430a      	orrs	r2, r1
 8008392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008398:	f003 0310 	and.w	r3, r3, #16
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00a      	beq.n	80083b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	430a      	orrs	r2, r1
 80083b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ba:	f003 0320 	and.w	r3, r3, #32
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00a      	beq.n	80083d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	430a      	orrs	r2, r1
 80083d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d01a      	beq.n	800841a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	430a      	orrs	r2, r1
 80083f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008402:	d10a      	bne.n	800841a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	430a      	orrs	r2, r1
 8008418:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00a      	beq.n	800843c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	430a      	orrs	r2, r1
 800843a:	605a      	str	r2, [r3, #4]
  }
}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b086      	sub	sp, #24
 800844c:	af02      	add	r7, sp, #8
 800844e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008456:	f7fa fab1 	bl	80029bc <HAL_GetTick>
 800845a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 0308 	and.w	r3, r3, #8
 8008466:	2b08      	cmp	r3, #8
 8008468:	d10e      	bne.n	8008488 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800846a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800846e:	9300      	str	r3, [sp, #0]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 f814 	bl	80084a6 <UART_WaitOnFlagUntilTimeout>
 800847e:	4603      	mov	r3, r0
 8008480:	2b00      	cmp	r3, #0
 8008482:	d001      	beq.n	8008488 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008484:	2303      	movs	r3, #3
 8008486:	e00a      	b.n	800849e <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2220      	movs	r2, #32
 800848c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2220      	movs	r2, #32
 8008492:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b084      	sub	sp, #16
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	60f8      	str	r0, [r7, #12]
 80084ae:	60b9      	str	r1, [r7, #8]
 80084b0:	603b      	str	r3, [r7, #0]
 80084b2:	4613      	mov	r3, r2
 80084b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084b6:	e05d      	b.n	8008574 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084be:	d059      	beq.n	8008574 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084c0:	f7fa fa7c 	bl	80029bc <HAL_GetTick>
 80084c4:	4602      	mov	r2, r0
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	1ad3      	subs	r3, r2, r3
 80084ca:	69ba      	ldr	r2, [r7, #24]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d302      	bcc.n	80084d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d11b      	bne.n	800850e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80084e4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	689a      	ldr	r2, [r3, #8]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f022 0201 	bic.w	r2, r2, #1
 80084f4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2220      	movs	r2, #32
 80084fa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2220      	movs	r2, #32
 8008500:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2200      	movs	r2, #0
 8008506:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800850a:	2303      	movs	r3, #3
 800850c:	e042      	b.n	8008594 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 0304 	and.w	r3, r3, #4
 8008518:	2b00      	cmp	r3, #0
 800851a:	d02b      	beq.n	8008574 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	69db      	ldr	r3, [r3, #28]
 8008522:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008526:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800852a:	d123      	bne.n	8008574 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008534:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008544:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	689a      	ldr	r2, [r3, #8]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f022 0201 	bic.w	r2, r2, #1
 8008554:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2220      	movs	r2, #32
 800855a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2220      	movs	r2, #32
 8008560:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2220      	movs	r2, #32
 8008566:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2200      	movs	r2, #0
 800856c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8008570:	2303      	movs	r3, #3
 8008572:	e00f      	b.n	8008594 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	69da      	ldr	r2, [r3, #28]
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	4013      	ands	r3, r2
 800857e:	68ba      	ldr	r2, [r7, #8]
 8008580:	429a      	cmp	r2, r3
 8008582:	bf0c      	ite	eq
 8008584:	2301      	moveq	r3, #1
 8008586:	2300      	movne	r3, #0
 8008588:	b2db      	uxtb	r3, r3
 800858a:	461a      	mov	r2, r3
 800858c:	79fb      	ldrb	r3, [r7, #7]
 800858e:	429a      	cmp	r2, r3
 8008590:	d092      	beq.n	80084b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3710      	adds	r7, #16
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80085b2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	689a      	ldr	r2, [r3, #8]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f022 0201 	bic.w	r2, r2, #1
 80085c2:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2220      	movs	r2, #32
 80085c8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	661a      	str	r2, [r3, #96]	; 0x60
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2200      	movs	r2, #0
 80085f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085fa:	68f8      	ldr	r0, [r7, #12]
 80085fc:	f7ff fbce 	bl	8007d9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008600:	bf00      	nop
 8008602:	3710      	adds	r7, #16
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008614:	2b21      	cmp	r3, #33	; 0x21
 8008616:	d12a      	bne.n	800866e <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800861e:	b29b      	uxth	r3, r3
 8008620:	2b00      	cmp	r3, #0
 8008622:	d110      	bne.n	8008646 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008632:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008642:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008644:	e013      	b.n	800866e <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800864a:	781a      	ldrb	r2, [r3, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008656:	1c5a      	adds	r2, r3, #1
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008662:	b29b      	uxth	r3, r3
 8008664:	3b01      	subs	r3, #1
 8008666:	b29a      	uxth	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800866e:	bf00      	nop
 8008670:	370c      	adds	r7, #12
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr

0800867a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800867a:	b480      	push	{r7}
 800867c:	b085      	sub	sp, #20
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008686:	2b21      	cmp	r3, #33	; 0x21
 8008688:	d12f      	bne.n	80086ea <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008690:	b29b      	uxth	r3, r3
 8008692:	2b00      	cmp	r3, #0
 8008694:	d110      	bne.n	80086b8 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086a4:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086b4:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80086b6:	e018      	b.n	80086ea <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	881b      	ldrh	r3, [r3, #0]
 80086c2:	461a      	mov	r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086cc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086d2:	1c9a      	adds	r2, r3, #2
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80086de:	b29b      	uxth	r3, r3
 80086e0:	3b01      	subs	r3, #1
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80086ea:	bf00      	nop
 80086ec:	3714      	adds	r7, #20
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr

080086f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80086f6:	b580      	push	{r7, lr}
 80086f8:	b082      	sub	sp, #8
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800870c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2220      	movs	r2, #32
 8008712:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f7ff fb34 	bl	8007d88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008720:	bf00      	nop
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008736:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800873c:	2b22      	cmp	r3, #34	; 0x22
 800873e:	d13a      	bne.n	80087b6 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008746:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008748:	89bb      	ldrh	r3, [r7, #12]
 800874a:	b2d9      	uxtb	r1, r3
 800874c:	89fb      	ldrh	r3, [r7, #14]
 800874e:	b2da      	uxtb	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008754:	400a      	ands	r2, r1
 8008756:	b2d2      	uxtb	r2, r2
 8008758:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800875e:	1c5a      	adds	r2, r3, #1
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800876a:	b29b      	uxth	r3, r3
 800876c:	3b01      	subs	r3, #1
 800876e:	b29a      	uxth	r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800877c:	b29b      	uxth	r3, r3
 800877e:	2b00      	cmp	r3, #0
 8008780:	d121      	bne.n	80087c6 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008790:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	689a      	ldr	r2, [r3, #8]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f022 0201 	bic.w	r2, r2, #1
 80087a0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2220      	movs	r2, #32
 80087a6:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f7f8 fdc8 	bl	8001344 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80087b4:	e007      	b.n	80087c6 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	699a      	ldr	r2, [r3, #24]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f042 0208 	orr.w	r2, r2, #8
 80087c4:	619a      	str	r2, [r3, #24]
}
 80087c6:	bf00      	nop
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b084      	sub	sp, #16
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80087dc:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087e2:	2b22      	cmp	r3, #34	; 0x22
 80087e4:	d13a      	bne.n	800885c <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ec:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087f2:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80087f4:	89ba      	ldrh	r2, [r7, #12]
 80087f6:	89fb      	ldrh	r3, [r7, #14]
 80087f8:	4013      	ands	r3, r2
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008804:	1c9a      	adds	r2, r3, #2
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008810:	b29b      	uxth	r3, r3
 8008812:	3b01      	subs	r3, #1
 8008814:	b29a      	uxth	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008822:	b29b      	uxth	r3, r3
 8008824:	2b00      	cmp	r3, #0
 8008826:	d121      	bne.n	800886c <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008836:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	689a      	ldr	r2, [r3, #8]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f022 0201 	bic.w	r2, r2, #1
 8008846:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2220      	movs	r2, #32
 800884c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f7f8 fd75 	bl	8001344 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800885a:	e007      	b.n	800886c <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	699a      	ldr	r2, [r3, #24]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f042 0208 	orr.w	r2, r2, #8
 800886a:	619a      	str	r2, [r3, #24]
}
 800886c:	bf00      	nop
 800886e:	3710      	adds	r7, #16
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <__errno>:
 8008874:	4b01      	ldr	r3, [pc, #4]	; (800887c <__errno+0x8>)
 8008876:	6818      	ldr	r0, [r3, #0]
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	2000000c 	.word	0x2000000c

08008880 <__libc_init_array>:
 8008880:	b570      	push	{r4, r5, r6, lr}
 8008882:	4e0d      	ldr	r6, [pc, #52]	; (80088b8 <__libc_init_array+0x38>)
 8008884:	4c0d      	ldr	r4, [pc, #52]	; (80088bc <__libc_init_array+0x3c>)
 8008886:	1ba4      	subs	r4, r4, r6
 8008888:	10a4      	asrs	r4, r4, #2
 800888a:	2500      	movs	r5, #0
 800888c:	42a5      	cmp	r5, r4
 800888e:	d109      	bne.n	80088a4 <__libc_init_array+0x24>
 8008890:	4e0b      	ldr	r6, [pc, #44]	; (80088c0 <__libc_init_array+0x40>)
 8008892:	4c0c      	ldr	r4, [pc, #48]	; (80088c4 <__libc_init_array+0x44>)
 8008894:	f000 fc30 	bl	80090f8 <_init>
 8008898:	1ba4      	subs	r4, r4, r6
 800889a:	10a4      	asrs	r4, r4, #2
 800889c:	2500      	movs	r5, #0
 800889e:	42a5      	cmp	r5, r4
 80088a0:	d105      	bne.n	80088ae <__libc_init_array+0x2e>
 80088a2:	bd70      	pop	{r4, r5, r6, pc}
 80088a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80088a8:	4798      	blx	r3
 80088aa:	3501      	adds	r5, #1
 80088ac:	e7ee      	b.n	800888c <__libc_init_array+0xc>
 80088ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80088b2:	4798      	blx	r3
 80088b4:	3501      	adds	r5, #1
 80088b6:	e7f2      	b.n	800889e <__libc_init_array+0x1e>
 80088b8:	08009184 	.word	0x08009184
 80088bc:	08009184 	.word	0x08009184
 80088c0:	08009184 	.word	0x08009184
 80088c4:	08009188 	.word	0x08009188

080088c8 <malloc>:
 80088c8:	4b02      	ldr	r3, [pc, #8]	; (80088d4 <malloc+0xc>)
 80088ca:	4601      	mov	r1, r0
 80088cc:	6818      	ldr	r0, [r3, #0]
 80088ce:	f000 b865 	b.w	800899c <_malloc_r>
 80088d2:	bf00      	nop
 80088d4:	2000000c 	.word	0x2000000c

080088d8 <memcpy>:
 80088d8:	b510      	push	{r4, lr}
 80088da:	1e43      	subs	r3, r0, #1
 80088dc:	440a      	add	r2, r1
 80088de:	4291      	cmp	r1, r2
 80088e0:	d100      	bne.n	80088e4 <memcpy+0xc>
 80088e2:	bd10      	pop	{r4, pc}
 80088e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088ec:	e7f7      	b.n	80088de <memcpy+0x6>

080088ee <memset>:
 80088ee:	4402      	add	r2, r0
 80088f0:	4603      	mov	r3, r0
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d100      	bne.n	80088f8 <memset+0xa>
 80088f6:	4770      	bx	lr
 80088f8:	f803 1b01 	strb.w	r1, [r3], #1
 80088fc:	e7f9      	b.n	80088f2 <memset+0x4>
	...

08008900 <_free_r>:
 8008900:	b538      	push	{r3, r4, r5, lr}
 8008902:	4605      	mov	r5, r0
 8008904:	2900      	cmp	r1, #0
 8008906:	d045      	beq.n	8008994 <_free_r+0x94>
 8008908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800890c:	1f0c      	subs	r4, r1, #4
 800890e:	2b00      	cmp	r3, #0
 8008910:	bfb8      	it	lt
 8008912:	18e4      	addlt	r4, r4, r3
 8008914:	f000 f8cc 	bl	8008ab0 <__malloc_lock>
 8008918:	4a1f      	ldr	r2, [pc, #124]	; (8008998 <_free_r+0x98>)
 800891a:	6813      	ldr	r3, [r2, #0]
 800891c:	4610      	mov	r0, r2
 800891e:	b933      	cbnz	r3, 800892e <_free_r+0x2e>
 8008920:	6063      	str	r3, [r4, #4]
 8008922:	6014      	str	r4, [r2, #0]
 8008924:	4628      	mov	r0, r5
 8008926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800892a:	f000 b8c2 	b.w	8008ab2 <__malloc_unlock>
 800892e:	42a3      	cmp	r3, r4
 8008930:	d90c      	bls.n	800894c <_free_r+0x4c>
 8008932:	6821      	ldr	r1, [r4, #0]
 8008934:	1862      	adds	r2, r4, r1
 8008936:	4293      	cmp	r3, r2
 8008938:	bf04      	itt	eq
 800893a:	681a      	ldreq	r2, [r3, #0]
 800893c:	685b      	ldreq	r3, [r3, #4]
 800893e:	6063      	str	r3, [r4, #4]
 8008940:	bf04      	itt	eq
 8008942:	1852      	addeq	r2, r2, r1
 8008944:	6022      	streq	r2, [r4, #0]
 8008946:	6004      	str	r4, [r0, #0]
 8008948:	e7ec      	b.n	8008924 <_free_r+0x24>
 800894a:	4613      	mov	r3, r2
 800894c:	685a      	ldr	r2, [r3, #4]
 800894e:	b10a      	cbz	r2, 8008954 <_free_r+0x54>
 8008950:	42a2      	cmp	r2, r4
 8008952:	d9fa      	bls.n	800894a <_free_r+0x4a>
 8008954:	6819      	ldr	r1, [r3, #0]
 8008956:	1858      	adds	r0, r3, r1
 8008958:	42a0      	cmp	r0, r4
 800895a:	d10b      	bne.n	8008974 <_free_r+0x74>
 800895c:	6820      	ldr	r0, [r4, #0]
 800895e:	4401      	add	r1, r0
 8008960:	1858      	adds	r0, r3, r1
 8008962:	4282      	cmp	r2, r0
 8008964:	6019      	str	r1, [r3, #0]
 8008966:	d1dd      	bne.n	8008924 <_free_r+0x24>
 8008968:	6810      	ldr	r0, [r2, #0]
 800896a:	6852      	ldr	r2, [r2, #4]
 800896c:	605a      	str	r2, [r3, #4]
 800896e:	4401      	add	r1, r0
 8008970:	6019      	str	r1, [r3, #0]
 8008972:	e7d7      	b.n	8008924 <_free_r+0x24>
 8008974:	d902      	bls.n	800897c <_free_r+0x7c>
 8008976:	230c      	movs	r3, #12
 8008978:	602b      	str	r3, [r5, #0]
 800897a:	e7d3      	b.n	8008924 <_free_r+0x24>
 800897c:	6820      	ldr	r0, [r4, #0]
 800897e:	1821      	adds	r1, r4, r0
 8008980:	428a      	cmp	r2, r1
 8008982:	bf04      	itt	eq
 8008984:	6811      	ldreq	r1, [r2, #0]
 8008986:	6852      	ldreq	r2, [r2, #4]
 8008988:	6062      	str	r2, [r4, #4]
 800898a:	bf04      	itt	eq
 800898c:	1809      	addeq	r1, r1, r0
 800898e:	6021      	streq	r1, [r4, #0]
 8008990:	605c      	str	r4, [r3, #4]
 8008992:	e7c7      	b.n	8008924 <_free_r+0x24>
 8008994:	bd38      	pop	{r3, r4, r5, pc}
 8008996:	bf00      	nop
 8008998:	20000094 	.word	0x20000094

0800899c <_malloc_r>:
 800899c:	b570      	push	{r4, r5, r6, lr}
 800899e:	1ccd      	adds	r5, r1, #3
 80089a0:	f025 0503 	bic.w	r5, r5, #3
 80089a4:	3508      	adds	r5, #8
 80089a6:	2d0c      	cmp	r5, #12
 80089a8:	bf38      	it	cc
 80089aa:	250c      	movcc	r5, #12
 80089ac:	2d00      	cmp	r5, #0
 80089ae:	4606      	mov	r6, r0
 80089b0:	db01      	blt.n	80089b6 <_malloc_r+0x1a>
 80089b2:	42a9      	cmp	r1, r5
 80089b4:	d903      	bls.n	80089be <_malloc_r+0x22>
 80089b6:	230c      	movs	r3, #12
 80089b8:	6033      	str	r3, [r6, #0]
 80089ba:	2000      	movs	r0, #0
 80089bc:	bd70      	pop	{r4, r5, r6, pc}
 80089be:	f000 f877 	bl	8008ab0 <__malloc_lock>
 80089c2:	4a21      	ldr	r2, [pc, #132]	; (8008a48 <_malloc_r+0xac>)
 80089c4:	6814      	ldr	r4, [r2, #0]
 80089c6:	4621      	mov	r1, r4
 80089c8:	b991      	cbnz	r1, 80089f0 <_malloc_r+0x54>
 80089ca:	4c20      	ldr	r4, [pc, #128]	; (8008a4c <_malloc_r+0xb0>)
 80089cc:	6823      	ldr	r3, [r4, #0]
 80089ce:	b91b      	cbnz	r3, 80089d8 <_malloc_r+0x3c>
 80089d0:	4630      	mov	r0, r6
 80089d2:	f000 f83d 	bl	8008a50 <_sbrk_r>
 80089d6:	6020      	str	r0, [r4, #0]
 80089d8:	4629      	mov	r1, r5
 80089da:	4630      	mov	r0, r6
 80089dc:	f000 f838 	bl	8008a50 <_sbrk_r>
 80089e0:	1c43      	adds	r3, r0, #1
 80089e2:	d124      	bne.n	8008a2e <_malloc_r+0x92>
 80089e4:	230c      	movs	r3, #12
 80089e6:	6033      	str	r3, [r6, #0]
 80089e8:	4630      	mov	r0, r6
 80089ea:	f000 f862 	bl	8008ab2 <__malloc_unlock>
 80089ee:	e7e4      	b.n	80089ba <_malloc_r+0x1e>
 80089f0:	680b      	ldr	r3, [r1, #0]
 80089f2:	1b5b      	subs	r3, r3, r5
 80089f4:	d418      	bmi.n	8008a28 <_malloc_r+0x8c>
 80089f6:	2b0b      	cmp	r3, #11
 80089f8:	d90f      	bls.n	8008a1a <_malloc_r+0x7e>
 80089fa:	600b      	str	r3, [r1, #0]
 80089fc:	50cd      	str	r5, [r1, r3]
 80089fe:	18cc      	adds	r4, r1, r3
 8008a00:	4630      	mov	r0, r6
 8008a02:	f000 f856 	bl	8008ab2 <__malloc_unlock>
 8008a06:	f104 000b 	add.w	r0, r4, #11
 8008a0a:	1d23      	adds	r3, r4, #4
 8008a0c:	f020 0007 	bic.w	r0, r0, #7
 8008a10:	1ac3      	subs	r3, r0, r3
 8008a12:	d0d3      	beq.n	80089bc <_malloc_r+0x20>
 8008a14:	425a      	negs	r2, r3
 8008a16:	50e2      	str	r2, [r4, r3]
 8008a18:	e7d0      	b.n	80089bc <_malloc_r+0x20>
 8008a1a:	428c      	cmp	r4, r1
 8008a1c:	684b      	ldr	r3, [r1, #4]
 8008a1e:	bf16      	itet	ne
 8008a20:	6063      	strne	r3, [r4, #4]
 8008a22:	6013      	streq	r3, [r2, #0]
 8008a24:	460c      	movne	r4, r1
 8008a26:	e7eb      	b.n	8008a00 <_malloc_r+0x64>
 8008a28:	460c      	mov	r4, r1
 8008a2a:	6849      	ldr	r1, [r1, #4]
 8008a2c:	e7cc      	b.n	80089c8 <_malloc_r+0x2c>
 8008a2e:	1cc4      	adds	r4, r0, #3
 8008a30:	f024 0403 	bic.w	r4, r4, #3
 8008a34:	42a0      	cmp	r0, r4
 8008a36:	d005      	beq.n	8008a44 <_malloc_r+0xa8>
 8008a38:	1a21      	subs	r1, r4, r0
 8008a3a:	4630      	mov	r0, r6
 8008a3c:	f000 f808 	bl	8008a50 <_sbrk_r>
 8008a40:	3001      	adds	r0, #1
 8008a42:	d0cf      	beq.n	80089e4 <_malloc_r+0x48>
 8008a44:	6025      	str	r5, [r4, #0]
 8008a46:	e7db      	b.n	8008a00 <_malloc_r+0x64>
 8008a48:	20000094 	.word	0x20000094
 8008a4c:	20000098 	.word	0x20000098

08008a50 <_sbrk_r>:
 8008a50:	b538      	push	{r3, r4, r5, lr}
 8008a52:	4c06      	ldr	r4, [pc, #24]	; (8008a6c <_sbrk_r+0x1c>)
 8008a54:	2300      	movs	r3, #0
 8008a56:	4605      	mov	r5, r0
 8008a58:	4608      	mov	r0, r1
 8008a5a:	6023      	str	r3, [r4, #0]
 8008a5c:	f7f9 fee8 	bl	8002830 <_sbrk>
 8008a60:	1c43      	adds	r3, r0, #1
 8008a62:	d102      	bne.n	8008a6a <_sbrk_r+0x1a>
 8008a64:	6823      	ldr	r3, [r4, #0]
 8008a66:	b103      	cbz	r3, 8008a6a <_sbrk_r+0x1a>
 8008a68:	602b      	str	r3, [r5, #0]
 8008a6a:	bd38      	pop	{r3, r4, r5, pc}
 8008a6c:	20000598 	.word	0x20000598

08008a70 <siprintf>:
 8008a70:	b40e      	push	{r1, r2, r3}
 8008a72:	b500      	push	{lr}
 8008a74:	b09c      	sub	sp, #112	; 0x70
 8008a76:	ab1d      	add	r3, sp, #116	; 0x74
 8008a78:	9002      	str	r0, [sp, #8]
 8008a7a:	9006      	str	r0, [sp, #24]
 8008a7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a80:	4809      	ldr	r0, [pc, #36]	; (8008aa8 <siprintf+0x38>)
 8008a82:	9107      	str	r1, [sp, #28]
 8008a84:	9104      	str	r1, [sp, #16]
 8008a86:	4909      	ldr	r1, [pc, #36]	; (8008aac <siprintf+0x3c>)
 8008a88:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a8c:	9105      	str	r1, [sp, #20]
 8008a8e:	6800      	ldr	r0, [r0, #0]
 8008a90:	9301      	str	r3, [sp, #4]
 8008a92:	a902      	add	r1, sp, #8
 8008a94:	f000 f868 	bl	8008b68 <_svfiprintf_r>
 8008a98:	9b02      	ldr	r3, [sp, #8]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	701a      	strb	r2, [r3, #0]
 8008a9e:	b01c      	add	sp, #112	; 0x70
 8008aa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008aa4:	b003      	add	sp, #12
 8008aa6:	4770      	bx	lr
 8008aa8:	2000000c 	.word	0x2000000c
 8008aac:	ffff0208 	.word	0xffff0208

08008ab0 <__malloc_lock>:
 8008ab0:	4770      	bx	lr

08008ab2 <__malloc_unlock>:
 8008ab2:	4770      	bx	lr

08008ab4 <__ssputs_r>:
 8008ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ab8:	688e      	ldr	r6, [r1, #8]
 8008aba:	429e      	cmp	r6, r3
 8008abc:	4682      	mov	sl, r0
 8008abe:	460c      	mov	r4, r1
 8008ac0:	4690      	mov	r8, r2
 8008ac2:	4699      	mov	r9, r3
 8008ac4:	d837      	bhi.n	8008b36 <__ssputs_r+0x82>
 8008ac6:	898a      	ldrh	r2, [r1, #12]
 8008ac8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008acc:	d031      	beq.n	8008b32 <__ssputs_r+0x7e>
 8008ace:	6825      	ldr	r5, [r4, #0]
 8008ad0:	6909      	ldr	r1, [r1, #16]
 8008ad2:	1a6f      	subs	r7, r5, r1
 8008ad4:	6965      	ldr	r5, [r4, #20]
 8008ad6:	2302      	movs	r3, #2
 8008ad8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008adc:	fb95 f5f3 	sdiv	r5, r5, r3
 8008ae0:	f109 0301 	add.w	r3, r9, #1
 8008ae4:	443b      	add	r3, r7
 8008ae6:	429d      	cmp	r5, r3
 8008ae8:	bf38      	it	cc
 8008aea:	461d      	movcc	r5, r3
 8008aec:	0553      	lsls	r3, r2, #21
 8008aee:	d530      	bpl.n	8008b52 <__ssputs_r+0x9e>
 8008af0:	4629      	mov	r1, r5
 8008af2:	f7ff ff53 	bl	800899c <_malloc_r>
 8008af6:	4606      	mov	r6, r0
 8008af8:	b950      	cbnz	r0, 8008b10 <__ssputs_r+0x5c>
 8008afa:	230c      	movs	r3, #12
 8008afc:	f8ca 3000 	str.w	r3, [sl]
 8008b00:	89a3      	ldrh	r3, [r4, #12]
 8008b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b06:	81a3      	strh	r3, [r4, #12]
 8008b08:	f04f 30ff 	mov.w	r0, #4294967295
 8008b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b10:	463a      	mov	r2, r7
 8008b12:	6921      	ldr	r1, [r4, #16]
 8008b14:	f7ff fee0 	bl	80088d8 <memcpy>
 8008b18:	89a3      	ldrh	r3, [r4, #12]
 8008b1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b22:	81a3      	strh	r3, [r4, #12]
 8008b24:	6126      	str	r6, [r4, #16]
 8008b26:	6165      	str	r5, [r4, #20]
 8008b28:	443e      	add	r6, r7
 8008b2a:	1bed      	subs	r5, r5, r7
 8008b2c:	6026      	str	r6, [r4, #0]
 8008b2e:	60a5      	str	r5, [r4, #8]
 8008b30:	464e      	mov	r6, r9
 8008b32:	454e      	cmp	r6, r9
 8008b34:	d900      	bls.n	8008b38 <__ssputs_r+0x84>
 8008b36:	464e      	mov	r6, r9
 8008b38:	4632      	mov	r2, r6
 8008b3a:	4641      	mov	r1, r8
 8008b3c:	6820      	ldr	r0, [r4, #0]
 8008b3e:	f000 fa93 	bl	8009068 <memmove>
 8008b42:	68a3      	ldr	r3, [r4, #8]
 8008b44:	1b9b      	subs	r3, r3, r6
 8008b46:	60a3      	str	r3, [r4, #8]
 8008b48:	6823      	ldr	r3, [r4, #0]
 8008b4a:	441e      	add	r6, r3
 8008b4c:	6026      	str	r6, [r4, #0]
 8008b4e:	2000      	movs	r0, #0
 8008b50:	e7dc      	b.n	8008b0c <__ssputs_r+0x58>
 8008b52:	462a      	mov	r2, r5
 8008b54:	f000 faa1 	bl	800909a <_realloc_r>
 8008b58:	4606      	mov	r6, r0
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	d1e2      	bne.n	8008b24 <__ssputs_r+0x70>
 8008b5e:	6921      	ldr	r1, [r4, #16]
 8008b60:	4650      	mov	r0, sl
 8008b62:	f7ff fecd 	bl	8008900 <_free_r>
 8008b66:	e7c8      	b.n	8008afa <__ssputs_r+0x46>

08008b68 <_svfiprintf_r>:
 8008b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b6c:	461d      	mov	r5, r3
 8008b6e:	898b      	ldrh	r3, [r1, #12]
 8008b70:	061f      	lsls	r7, r3, #24
 8008b72:	b09d      	sub	sp, #116	; 0x74
 8008b74:	4680      	mov	r8, r0
 8008b76:	460c      	mov	r4, r1
 8008b78:	4616      	mov	r6, r2
 8008b7a:	d50f      	bpl.n	8008b9c <_svfiprintf_r+0x34>
 8008b7c:	690b      	ldr	r3, [r1, #16]
 8008b7e:	b96b      	cbnz	r3, 8008b9c <_svfiprintf_r+0x34>
 8008b80:	2140      	movs	r1, #64	; 0x40
 8008b82:	f7ff ff0b 	bl	800899c <_malloc_r>
 8008b86:	6020      	str	r0, [r4, #0]
 8008b88:	6120      	str	r0, [r4, #16]
 8008b8a:	b928      	cbnz	r0, 8008b98 <_svfiprintf_r+0x30>
 8008b8c:	230c      	movs	r3, #12
 8008b8e:	f8c8 3000 	str.w	r3, [r8]
 8008b92:	f04f 30ff 	mov.w	r0, #4294967295
 8008b96:	e0c8      	b.n	8008d2a <_svfiprintf_r+0x1c2>
 8008b98:	2340      	movs	r3, #64	; 0x40
 8008b9a:	6163      	str	r3, [r4, #20]
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8008ba0:	2320      	movs	r3, #32
 8008ba2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ba6:	2330      	movs	r3, #48	; 0x30
 8008ba8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bac:	9503      	str	r5, [sp, #12]
 8008bae:	f04f 0b01 	mov.w	fp, #1
 8008bb2:	4637      	mov	r7, r6
 8008bb4:	463d      	mov	r5, r7
 8008bb6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008bba:	b10b      	cbz	r3, 8008bc0 <_svfiprintf_r+0x58>
 8008bbc:	2b25      	cmp	r3, #37	; 0x25
 8008bbe:	d13e      	bne.n	8008c3e <_svfiprintf_r+0xd6>
 8008bc0:	ebb7 0a06 	subs.w	sl, r7, r6
 8008bc4:	d00b      	beq.n	8008bde <_svfiprintf_r+0x76>
 8008bc6:	4653      	mov	r3, sl
 8008bc8:	4632      	mov	r2, r6
 8008bca:	4621      	mov	r1, r4
 8008bcc:	4640      	mov	r0, r8
 8008bce:	f7ff ff71 	bl	8008ab4 <__ssputs_r>
 8008bd2:	3001      	adds	r0, #1
 8008bd4:	f000 80a4 	beq.w	8008d20 <_svfiprintf_r+0x1b8>
 8008bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bda:	4453      	add	r3, sl
 8008bdc:	9309      	str	r3, [sp, #36]	; 0x24
 8008bde:	783b      	ldrb	r3, [r7, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f000 809d 	beq.w	8008d20 <_svfiprintf_r+0x1b8>
 8008be6:	2300      	movs	r3, #0
 8008be8:	f04f 32ff 	mov.w	r2, #4294967295
 8008bec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bf0:	9304      	str	r3, [sp, #16]
 8008bf2:	9307      	str	r3, [sp, #28]
 8008bf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bf8:	931a      	str	r3, [sp, #104]	; 0x68
 8008bfa:	462f      	mov	r7, r5
 8008bfc:	2205      	movs	r2, #5
 8008bfe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008c02:	4850      	ldr	r0, [pc, #320]	; (8008d44 <_svfiprintf_r+0x1dc>)
 8008c04:	f7f7 fb14 	bl	8000230 <memchr>
 8008c08:	9b04      	ldr	r3, [sp, #16]
 8008c0a:	b9d0      	cbnz	r0, 8008c42 <_svfiprintf_r+0xda>
 8008c0c:	06d9      	lsls	r1, r3, #27
 8008c0e:	bf44      	itt	mi
 8008c10:	2220      	movmi	r2, #32
 8008c12:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008c16:	071a      	lsls	r2, r3, #28
 8008c18:	bf44      	itt	mi
 8008c1a:	222b      	movmi	r2, #43	; 0x2b
 8008c1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008c20:	782a      	ldrb	r2, [r5, #0]
 8008c22:	2a2a      	cmp	r2, #42	; 0x2a
 8008c24:	d015      	beq.n	8008c52 <_svfiprintf_r+0xea>
 8008c26:	9a07      	ldr	r2, [sp, #28]
 8008c28:	462f      	mov	r7, r5
 8008c2a:	2000      	movs	r0, #0
 8008c2c:	250a      	movs	r5, #10
 8008c2e:	4639      	mov	r1, r7
 8008c30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c34:	3b30      	subs	r3, #48	; 0x30
 8008c36:	2b09      	cmp	r3, #9
 8008c38:	d94d      	bls.n	8008cd6 <_svfiprintf_r+0x16e>
 8008c3a:	b1b8      	cbz	r0, 8008c6c <_svfiprintf_r+0x104>
 8008c3c:	e00f      	b.n	8008c5e <_svfiprintf_r+0xf6>
 8008c3e:	462f      	mov	r7, r5
 8008c40:	e7b8      	b.n	8008bb4 <_svfiprintf_r+0x4c>
 8008c42:	4a40      	ldr	r2, [pc, #256]	; (8008d44 <_svfiprintf_r+0x1dc>)
 8008c44:	1a80      	subs	r0, r0, r2
 8008c46:	fa0b f000 	lsl.w	r0, fp, r0
 8008c4a:	4318      	orrs	r0, r3
 8008c4c:	9004      	str	r0, [sp, #16]
 8008c4e:	463d      	mov	r5, r7
 8008c50:	e7d3      	b.n	8008bfa <_svfiprintf_r+0x92>
 8008c52:	9a03      	ldr	r2, [sp, #12]
 8008c54:	1d11      	adds	r1, r2, #4
 8008c56:	6812      	ldr	r2, [r2, #0]
 8008c58:	9103      	str	r1, [sp, #12]
 8008c5a:	2a00      	cmp	r2, #0
 8008c5c:	db01      	blt.n	8008c62 <_svfiprintf_r+0xfa>
 8008c5e:	9207      	str	r2, [sp, #28]
 8008c60:	e004      	b.n	8008c6c <_svfiprintf_r+0x104>
 8008c62:	4252      	negs	r2, r2
 8008c64:	f043 0302 	orr.w	r3, r3, #2
 8008c68:	9207      	str	r2, [sp, #28]
 8008c6a:	9304      	str	r3, [sp, #16]
 8008c6c:	783b      	ldrb	r3, [r7, #0]
 8008c6e:	2b2e      	cmp	r3, #46	; 0x2e
 8008c70:	d10c      	bne.n	8008c8c <_svfiprintf_r+0x124>
 8008c72:	787b      	ldrb	r3, [r7, #1]
 8008c74:	2b2a      	cmp	r3, #42	; 0x2a
 8008c76:	d133      	bne.n	8008ce0 <_svfiprintf_r+0x178>
 8008c78:	9b03      	ldr	r3, [sp, #12]
 8008c7a:	1d1a      	adds	r2, r3, #4
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	9203      	str	r2, [sp, #12]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	bfb8      	it	lt
 8008c84:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c88:	3702      	adds	r7, #2
 8008c8a:	9305      	str	r3, [sp, #20]
 8008c8c:	4d2e      	ldr	r5, [pc, #184]	; (8008d48 <_svfiprintf_r+0x1e0>)
 8008c8e:	7839      	ldrb	r1, [r7, #0]
 8008c90:	2203      	movs	r2, #3
 8008c92:	4628      	mov	r0, r5
 8008c94:	f7f7 facc 	bl	8000230 <memchr>
 8008c98:	b138      	cbz	r0, 8008caa <_svfiprintf_r+0x142>
 8008c9a:	2340      	movs	r3, #64	; 0x40
 8008c9c:	1b40      	subs	r0, r0, r5
 8008c9e:	fa03 f000 	lsl.w	r0, r3, r0
 8008ca2:	9b04      	ldr	r3, [sp, #16]
 8008ca4:	4303      	orrs	r3, r0
 8008ca6:	3701      	adds	r7, #1
 8008ca8:	9304      	str	r3, [sp, #16]
 8008caa:	7839      	ldrb	r1, [r7, #0]
 8008cac:	4827      	ldr	r0, [pc, #156]	; (8008d4c <_svfiprintf_r+0x1e4>)
 8008cae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cb2:	2206      	movs	r2, #6
 8008cb4:	1c7e      	adds	r6, r7, #1
 8008cb6:	f7f7 fabb 	bl	8000230 <memchr>
 8008cba:	2800      	cmp	r0, #0
 8008cbc:	d038      	beq.n	8008d30 <_svfiprintf_r+0x1c8>
 8008cbe:	4b24      	ldr	r3, [pc, #144]	; (8008d50 <_svfiprintf_r+0x1e8>)
 8008cc0:	bb13      	cbnz	r3, 8008d08 <_svfiprintf_r+0x1a0>
 8008cc2:	9b03      	ldr	r3, [sp, #12]
 8008cc4:	3307      	adds	r3, #7
 8008cc6:	f023 0307 	bic.w	r3, r3, #7
 8008cca:	3308      	adds	r3, #8
 8008ccc:	9303      	str	r3, [sp, #12]
 8008cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cd0:	444b      	add	r3, r9
 8008cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8008cd4:	e76d      	b.n	8008bb2 <_svfiprintf_r+0x4a>
 8008cd6:	fb05 3202 	mla	r2, r5, r2, r3
 8008cda:	2001      	movs	r0, #1
 8008cdc:	460f      	mov	r7, r1
 8008cde:	e7a6      	b.n	8008c2e <_svfiprintf_r+0xc6>
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	3701      	adds	r7, #1
 8008ce4:	9305      	str	r3, [sp, #20]
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	250a      	movs	r5, #10
 8008cea:	4638      	mov	r0, r7
 8008cec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cf0:	3a30      	subs	r2, #48	; 0x30
 8008cf2:	2a09      	cmp	r2, #9
 8008cf4:	d903      	bls.n	8008cfe <_svfiprintf_r+0x196>
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d0c8      	beq.n	8008c8c <_svfiprintf_r+0x124>
 8008cfa:	9105      	str	r1, [sp, #20]
 8008cfc:	e7c6      	b.n	8008c8c <_svfiprintf_r+0x124>
 8008cfe:	fb05 2101 	mla	r1, r5, r1, r2
 8008d02:	2301      	movs	r3, #1
 8008d04:	4607      	mov	r7, r0
 8008d06:	e7f0      	b.n	8008cea <_svfiprintf_r+0x182>
 8008d08:	ab03      	add	r3, sp, #12
 8008d0a:	9300      	str	r3, [sp, #0]
 8008d0c:	4622      	mov	r2, r4
 8008d0e:	4b11      	ldr	r3, [pc, #68]	; (8008d54 <_svfiprintf_r+0x1ec>)
 8008d10:	a904      	add	r1, sp, #16
 8008d12:	4640      	mov	r0, r8
 8008d14:	f3af 8000 	nop.w
 8008d18:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008d1c:	4681      	mov	r9, r0
 8008d1e:	d1d6      	bne.n	8008cce <_svfiprintf_r+0x166>
 8008d20:	89a3      	ldrh	r3, [r4, #12]
 8008d22:	065b      	lsls	r3, r3, #25
 8008d24:	f53f af35 	bmi.w	8008b92 <_svfiprintf_r+0x2a>
 8008d28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d2a:	b01d      	add	sp, #116	; 0x74
 8008d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d30:	ab03      	add	r3, sp, #12
 8008d32:	9300      	str	r3, [sp, #0]
 8008d34:	4622      	mov	r2, r4
 8008d36:	4b07      	ldr	r3, [pc, #28]	; (8008d54 <_svfiprintf_r+0x1ec>)
 8008d38:	a904      	add	r1, sp, #16
 8008d3a:	4640      	mov	r0, r8
 8008d3c:	f000 f882 	bl	8008e44 <_printf_i>
 8008d40:	e7ea      	b.n	8008d18 <_svfiprintf_r+0x1b0>
 8008d42:	bf00      	nop
 8008d44:	08009148 	.word	0x08009148
 8008d48:	0800914e 	.word	0x0800914e
 8008d4c:	08009152 	.word	0x08009152
 8008d50:	00000000 	.word	0x00000000
 8008d54:	08008ab5 	.word	0x08008ab5

08008d58 <_printf_common>:
 8008d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d5c:	4691      	mov	r9, r2
 8008d5e:	461f      	mov	r7, r3
 8008d60:	688a      	ldr	r2, [r1, #8]
 8008d62:	690b      	ldr	r3, [r1, #16]
 8008d64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	bfb8      	it	lt
 8008d6c:	4613      	movlt	r3, r2
 8008d6e:	f8c9 3000 	str.w	r3, [r9]
 8008d72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d76:	4606      	mov	r6, r0
 8008d78:	460c      	mov	r4, r1
 8008d7a:	b112      	cbz	r2, 8008d82 <_printf_common+0x2a>
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	f8c9 3000 	str.w	r3, [r9]
 8008d82:	6823      	ldr	r3, [r4, #0]
 8008d84:	0699      	lsls	r1, r3, #26
 8008d86:	bf42      	ittt	mi
 8008d88:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008d8c:	3302      	addmi	r3, #2
 8008d8e:	f8c9 3000 	strmi.w	r3, [r9]
 8008d92:	6825      	ldr	r5, [r4, #0]
 8008d94:	f015 0506 	ands.w	r5, r5, #6
 8008d98:	d107      	bne.n	8008daa <_printf_common+0x52>
 8008d9a:	f104 0a19 	add.w	sl, r4, #25
 8008d9e:	68e3      	ldr	r3, [r4, #12]
 8008da0:	f8d9 2000 	ldr.w	r2, [r9]
 8008da4:	1a9b      	subs	r3, r3, r2
 8008da6:	42ab      	cmp	r3, r5
 8008da8:	dc28      	bgt.n	8008dfc <_printf_common+0xa4>
 8008daa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008dae:	6822      	ldr	r2, [r4, #0]
 8008db0:	3300      	adds	r3, #0
 8008db2:	bf18      	it	ne
 8008db4:	2301      	movne	r3, #1
 8008db6:	0692      	lsls	r2, r2, #26
 8008db8:	d42d      	bmi.n	8008e16 <_printf_common+0xbe>
 8008dba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008dbe:	4639      	mov	r1, r7
 8008dc0:	4630      	mov	r0, r6
 8008dc2:	47c0      	blx	r8
 8008dc4:	3001      	adds	r0, #1
 8008dc6:	d020      	beq.n	8008e0a <_printf_common+0xb2>
 8008dc8:	6823      	ldr	r3, [r4, #0]
 8008dca:	68e5      	ldr	r5, [r4, #12]
 8008dcc:	f8d9 2000 	ldr.w	r2, [r9]
 8008dd0:	f003 0306 	and.w	r3, r3, #6
 8008dd4:	2b04      	cmp	r3, #4
 8008dd6:	bf08      	it	eq
 8008dd8:	1aad      	subeq	r5, r5, r2
 8008dda:	68a3      	ldr	r3, [r4, #8]
 8008ddc:	6922      	ldr	r2, [r4, #16]
 8008dde:	bf0c      	ite	eq
 8008de0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008de4:	2500      	movne	r5, #0
 8008de6:	4293      	cmp	r3, r2
 8008de8:	bfc4      	itt	gt
 8008dea:	1a9b      	subgt	r3, r3, r2
 8008dec:	18ed      	addgt	r5, r5, r3
 8008dee:	f04f 0900 	mov.w	r9, #0
 8008df2:	341a      	adds	r4, #26
 8008df4:	454d      	cmp	r5, r9
 8008df6:	d11a      	bne.n	8008e2e <_printf_common+0xd6>
 8008df8:	2000      	movs	r0, #0
 8008dfa:	e008      	b.n	8008e0e <_printf_common+0xb6>
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	4652      	mov	r2, sl
 8008e00:	4639      	mov	r1, r7
 8008e02:	4630      	mov	r0, r6
 8008e04:	47c0      	blx	r8
 8008e06:	3001      	adds	r0, #1
 8008e08:	d103      	bne.n	8008e12 <_printf_common+0xba>
 8008e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e12:	3501      	adds	r5, #1
 8008e14:	e7c3      	b.n	8008d9e <_printf_common+0x46>
 8008e16:	18e1      	adds	r1, r4, r3
 8008e18:	1c5a      	adds	r2, r3, #1
 8008e1a:	2030      	movs	r0, #48	; 0x30
 8008e1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e20:	4422      	add	r2, r4
 8008e22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e2a:	3302      	adds	r3, #2
 8008e2c:	e7c5      	b.n	8008dba <_printf_common+0x62>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	4622      	mov	r2, r4
 8008e32:	4639      	mov	r1, r7
 8008e34:	4630      	mov	r0, r6
 8008e36:	47c0      	blx	r8
 8008e38:	3001      	adds	r0, #1
 8008e3a:	d0e6      	beq.n	8008e0a <_printf_common+0xb2>
 8008e3c:	f109 0901 	add.w	r9, r9, #1
 8008e40:	e7d8      	b.n	8008df4 <_printf_common+0x9c>
	...

08008e44 <_printf_i>:
 8008e44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e48:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008e4c:	460c      	mov	r4, r1
 8008e4e:	7e09      	ldrb	r1, [r1, #24]
 8008e50:	b085      	sub	sp, #20
 8008e52:	296e      	cmp	r1, #110	; 0x6e
 8008e54:	4617      	mov	r7, r2
 8008e56:	4606      	mov	r6, r0
 8008e58:	4698      	mov	r8, r3
 8008e5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e5c:	f000 80b3 	beq.w	8008fc6 <_printf_i+0x182>
 8008e60:	d822      	bhi.n	8008ea8 <_printf_i+0x64>
 8008e62:	2963      	cmp	r1, #99	; 0x63
 8008e64:	d036      	beq.n	8008ed4 <_printf_i+0x90>
 8008e66:	d80a      	bhi.n	8008e7e <_printf_i+0x3a>
 8008e68:	2900      	cmp	r1, #0
 8008e6a:	f000 80b9 	beq.w	8008fe0 <_printf_i+0x19c>
 8008e6e:	2958      	cmp	r1, #88	; 0x58
 8008e70:	f000 8083 	beq.w	8008f7a <_printf_i+0x136>
 8008e74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e78:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008e7c:	e032      	b.n	8008ee4 <_printf_i+0xa0>
 8008e7e:	2964      	cmp	r1, #100	; 0x64
 8008e80:	d001      	beq.n	8008e86 <_printf_i+0x42>
 8008e82:	2969      	cmp	r1, #105	; 0x69
 8008e84:	d1f6      	bne.n	8008e74 <_printf_i+0x30>
 8008e86:	6820      	ldr	r0, [r4, #0]
 8008e88:	6813      	ldr	r3, [r2, #0]
 8008e8a:	0605      	lsls	r5, r0, #24
 8008e8c:	f103 0104 	add.w	r1, r3, #4
 8008e90:	d52a      	bpl.n	8008ee8 <_printf_i+0xa4>
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	6011      	str	r1, [r2, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	da03      	bge.n	8008ea2 <_printf_i+0x5e>
 8008e9a:	222d      	movs	r2, #45	; 0x2d
 8008e9c:	425b      	negs	r3, r3
 8008e9e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008ea2:	486f      	ldr	r0, [pc, #444]	; (8009060 <_printf_i+0x21c>)
 8008ea4:	220a      	movs	r2, #10
 8008ea6:	e039      	b.n	8008f1c <_printf_i+0xd8>
 8008ea8:	2973      	cmp	r1, #115	; 0x73
 8008eaa:	f000 809d 	beq.w	8008fe8 <_printf_i+0x1a4>
 8008eae:	d808      	bhi.n	8008ec2 <_printf_i+0x7e>
 8008eb0:	296f      	cmp	r1, #111	; 0x6f
 8008eb2:	d020      	beq.n	8008ef6 <_printf_i+0xb2>
 8008eb4:	2970      	cmp	r1, #112	; 0x70
 8008eb6:	d1dd      	bne.n	8008e74 <_printf_i+0x30>
 8008eb8:	6823      	ldr	r3, [r4, #0]
 8008eba:	f043 0320 	orr.w	r3, r3, #32
 8008ebe:	6023      	str	r3, [r4, #0]
 8008ec0:	e003      	b.n	8008eca <_printf_i+0x86>
 8008ec2:	2975      	cmp	r1, #117	; 0x75
 8008ec4:	d017      	beq.n	8008ef6 <_printf_i+0xb2>
 8008ec6:	2978      	cmp	r1, #120	; 0x78
 8008ec8:	d1d4      	bne.n	8008e74 <_printf_i+0x30>
 8008eca:	2378      	movs	r3, #120	; 0x78
 8008ecc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ed0:	4864      	ldr	r0, [pc, #400]	; (8009064 <_printf_i+0x220>)
 8008ed2:	e055      	b.n	8008f80 <_printf_i+0x13c>
 8008ed4:	6813      	ldr	r3, [r2, #0]
 8008ed6:	1d19      	adds	r1, r3, #4
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	6011      	str	r1, [r2, #0]
 8008edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ee0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e08c      	b.n	8009002 <_printf_i+0x1be>
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	6011      	str	r1, [r2, #0]
 8008eec:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ef0:	bf18      	it	ne
 8008ef2:	b21b      	sxthne	r3, r3
 8008ef4:	e7cf      	b.n	8008e96 <_printf_i+0x52>
 8008ef6:	6813      	ldr	r3, [r2, #0]
 8008ef8:	6825      	ldr	r5, [r4, #0]
 8008efa:	1d18      	adds	r0, r3, #4
 8008efc:	6010      	str	r0, [r2, #0]
 8008efe:	0628      	lsls	r0, r5, #24
 8008f00:	d501      	bpl.n	8008f06 <_printf_i+0xc2>
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	e002      	b.n	8008f0c <_printf_i+0xc8>
 8008f06:	0668      	lsls	r0, r5, #25
 8008f08:	d5fb      	bpl.n	8008f02 <_printf_i+0xbe>
 8008f0a:	881b      	ldrh	r3, [r3, #0]
 8008f0c:	4854      	ldr	r0, [pc, #336]	; (8009060 <_printf_i+0x21c>)
 8008f0e:	296f      	cmp	r1, #111	; 0x6f
 8008f10:	bf14      	ite	ne
 8008f12:	220a      	movne	r2, #10
 8008f14:	2208      	moveq	r2, #8
 8008f16:	2100      	movs	r1, #0
 8008f18:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f1c:	6865      	ldr	r5, [r4, #4]
 8008f1e:	60a5      	str	r5, [r4, #8]
 8008f20:	2d00      	cmp	r5, #0
 8008f22:	f2c0 8095 	blt.w	8009050 <_printf_i+0x20c>
 8008f26:	6821      	ldr	r1, [r4, #0]
 8008f28:	f021 0104 	bic.w	r1, r1, #4
 8008f2c:	6021      	str	r1, [r4, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d13d      	bne.n	8008fae <_printf_i+0x16a>
 8008f32:	2d00      	cmp	r5, #0
 8008f34:	f040 808e 	bne.w	8009054 <_printf_i+0x210>
 8008f38:	4665      	mov	r5, ip
 8008f3a:	2a08      	cmp	r2, #8
 8008f3c:	d10b      	bne.n	8008f56 <_printf_i+0x112>
 8008f3e:	6823      	ldr	r3, [r4, #0]
 8008f40:	07db      	lsls	r3, r3, #31
 8008f42:	d508      	bpl.n	8008f56 <_printf_i+0x112>
 8008f44:	6923      	ldr	r3, [r4, #16]
 8008f46:	6862      	ldr	r2, [r4, #4]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	bfde      	ittt	le
 8008f4c:	2330      	movle	r3, #48	; 0x30
 8008f4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f52:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f56:	ebac 0305 	sub.w	r3, ip, r5
 8008f5a:	6123      	str	r3, [r4, #16]
 8008f5c:	f8cd 8000 	str.w	r8, [sp]
 8008f60:	463b      	mov	r3, r7
 8008f62:	aa03      	add	r2, sp, #12
 8008f64:	4621      	mov	r1, r4
 8008f66:	4630      	mov	r0, r6
 8008f68:	f7ff fef6 	bl	8008d58 <_printf_common>
 8008f6c:	3001      	adds	r0, #1
 8008f6e:	d14d      	bne.n	800900c <_printf_i+0x1c8>
 8008f70:	f04f 30ff 	mov.w	r0, #4294967295
 8008f74:	b005      	add	sp, #20
 8008f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f7a:	4839      	ldr	r0, [pc, #228]	; (8009060 <_printf_i+0x21c>)
 8008f7c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008f80:	6813      	ldr	r3, [r2, #0]
 8008f82:	6821      	ldr	r1, [r4, #0]
 8008f84:	1d1d      	adds	r5, r3, #4
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	6015      	str	r5, [r2, #0]
 8008f8a:	060a      	lsls	r2, r1, #24
 8008f8c:	d50b      	bpl.n	8008fa6 <_printf_i+0x162>
 8008f8e:	07ca      	lsls	r2, r1, #31
 8008f90:	bf44      	itt	mi
 8008f92:	f041 0120 	orrmi.w	r1, r1, #32
 8008f96:	6021      	strmi	r1, [r4, #0]
 8008f98:	b91b      	cbnz	r3, 8008fa2 <_printf_i+0x15e>
 8008f9a:	6822      	ldr	r2, [r4, #0]
 8008f9c:	f022 0220 	bic.w	r2, r2, #32
 8008fa0:	6022      	str	r2, [r4, #0]
 8008fa2:	2210      	movs	r2, #16
 8008fa4:	e7b7      	b.n	8008f16 <_printf_i+0xd2>
 8008fa6:	064d      	lsls	r5, r1, #25
 8008fa8:	bf48      	it	mi
 8008faa:	b29b      	uxthmi	r3, r3
 8008fac:	e7ef      	b.n	8008f8e <_printf_i+0x14a>
 8008fae:	4665      	mov	r5, ip
 8008fb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fb4:	fb02 3311 	mls	r3, r2, r1, r3
 8008fb8:	5cc3      	ldrb	r3, [r0, r3]
 8008fba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	2900      	cmp	r1, #0
 8008fc2:	d1f5      	bne.n	8008fb0 <_printf_i+0x16c>
 8008fc4:	e7b9      	b.n	8008f3a <_printf_i+0xf6>
 8008fc6:	6813      	ldr	r3, [r2, #0]
 8008fc8:	6825      	ldr	r5, [r4, #0]
 8008fca:	6961      	ldr	r1, [r4, #20]
 8008fcc:	1d18      	adds	r0, r3, #4
 8008fce:	6010      	str	r0, [r2, #0]
 8008fd0:	0628      	lsls	r0, r5, #24
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	d501      	bpl.n	8008fda <_printf_i+0x196>
 8008fd6:	6019      	str	r1, [r3, #0]
 8008fd8:	e002      	b.n	8008fe0 <_printf_i+0x19c>
 8008fda:	066a      	lsls	r2, r5, #25
 8008fdc:	d5fb      	bpl.n	8008fd6 <_printf_i+0x192>
 8008fde:	8019      	strh	r1, [r3, #0]
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	6123      	str	r3, [r4, #16]
 8008fe4:	4665      	mov	r5, ip
 8008fe6:	e7b9      	b.n	8008f5c <_printf_i+0x118>
 8008fe8:	6813      	ldr	r3, [r2, #0]
 8008fea:	1d19      	adds	r1, r3, #4
 8008fec:	6011      	str	r1, [r2, #0]
 8008fee:	681d      	ldr	r5, [r3, #0]
 8008ff0:	6862      	ldr	r2, [r4, #4]
 8008ff2:	2100      	movs	r1, #0
 8008ff4:	4628      	mov	r0, r5
 8008ff6:	f7f7 f91b 	bl	8000230 <memchr>
 8008ffa:	b108      	cbz	r0, 8009000 <_printf_i+0x1bc>
 8008ffc:	1b40      	subs	r0, r0, r5
 8008ffe:	6060      	str	r0, [r4, #4]
 8009000:	6863      	ldr	r3, [r4, #4]
 8009002:	6123      	str	r3, [r4, #16]
 8009004:	2300      	movs	r3, #0
 8009006:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800900a:	e7a7      	b.n	8008f5c <_printf_i+0x118>
 800900c:	6923      	ldr	r3, [r4, #16]
 800900e:	462a      	mov	r2, r5
 8009010:	4639      	mov	r1, r7
 8009012:	4630      	mov	r0, r6
 8009014:	47c0      	blx	r8
 8009016:	3001      	adds	r0, #1
 8009018:	d0aa      	beq.n	8008f70 <_printf_i+0x12c>
 800901a:	6823      	ldr	r3, [r4, #0]
 800901c:	079b      	lsls	r3, r3, #30
 800901e:	d413      	bmi.n	8009048 <_printf_i+0x204>
 8009020:	68e0      	ldr	r0, [r4, #12]
 8009022:	9b03      	ldr	r3, [sp, #12]
 8009024:	4298      	cmp	r0, r3
 8009026:	bfb8      	it	lt
 8009028:	4618      	movlt	r0, r3
 800902a:	e7a3      	b.n	8008f74 <_printf_i+0x130>
 800902c:	2301      	movs	r3, #1
 800902e:	464a      	mov	r2, r9
 8009030:	4639      	mov	r1, r7
 8009032:	4630      	mov	r0, r6
 8009034:	47c0      	blx	r8
 8009036:	3001      	adds	r0, #1
 8009038:	d09a      	beq.n	8008f70 <_printf_i+0x12c>
 800903a:	3501      	adds	r5, #1
 800903c:	68e3      	ldr	r3, [r4, #12]
 800903e:	9a03      	ldr	r2, [sp, #12]
 8009040:	1a9b      	subs	r3, r3, r2
 8009042:	42ab      	cmp	r3, r5
 8009044:	dcf2      	bgt.n	800902c <_printf_i+0x1e8>
 8009046:	e7eb      	b.n	8009020 <_printf_i+0x1dc>
 8009048:	2500      	movs	r5, #0
 800904a:	f104 0919 	add.w	r9, r4, #25
 800904e:	e7f5      	b.n	800903c <_printf_i+0x1f8>
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1ac      	bne.n	8008fae <_printf_i+0x16a>
 8009054:	7803      	ldrb	r3, [r0, #0]
 8009056:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800905a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800905e:	e76c      	b.n	8008f3a <_printf_i+0xf6>
 8009060:	08009159 	.word	0x08009159
 8009064:	0800916a 	.word	0x0800916a

08009068 <memmove>:
 8009068:	4288      	cmp	r0, r1
 800906a:	b510      	push	{r4, lr}
 800906c:	eb01 0302 	add.w	r3, r1, r2
 8009070:	d807      	bhi.n	8009082 <memmove+0x1a>
 8009072:	1e42      	subs	r2, r0, #1
 8009074:	4299      	cmp	r1, r3
 8009076:	d00a      	beq.n	800908e <memmove+0x26>
 8009078:	f811 4b01 	ldrb.w	r4, [r1], #1
 800907c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009080:	e7f8      	b.n	8009074 <memmove+0xc>
 8009082:	4283      	cmp	r3, r0
 8009084:	d9f5      	bls.n	8009072 <memmove+0xa>
 8009086:	1881      	adds	r1, r0, r2
 8009088:	1ad2      	subs	r2, r2, r3
 800908a:	42d3      	cmn	r3, r2
 800908c:	d100      	bne.n	8009090 <memmove+0x28>
 800908e:	bd10      	pop	{r4, pc}
 8009090:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009094:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009098:	e7f7      	b.n	800908a <memmove+0x22>

0800909a <_realloc_r>:
 800909a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909c:	4607      	mov	r7, r0
 800909e:	4614      	mov	r4, r2
 80090a0:	460e      	mov	r6, r1
 80090a2:	b921      	cbnz	r1, 80090ae <_realloc_r+0x14>
 80090a4:	4611      	mov	r1, r2
 80090a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80090aa:	f7ff bc77 	b.w	800899c <_malloc_r>
 80090ae:	b922      	cbnz	r2, 80090ba <_realloc_r+0x20>
 80090b0:	f7ff fc26 	bl	8008900 <_free_r>
 80090b4:	4625      	mov	r5, r4
 80090b6:	4628      	mov	r0, r5
 80090b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090ba:	f000 f814 	bl	80090e6 <_malloc_usable_size_r>
 80090be:	42a0      	cmp	r0, r4
 80090c0:	d20f      	bcs.n	80090e2 <_realloc_r+0x48>
 80090c2:	4621      	mov	r1, r4
 80090c4:	4638      	mov	r0, r7
 80090c6:	f7ff fc69 	bl	800899c <_malloc_r>
 80090ca:	4605      	mov	r5, r0
 80090cc:	2800      	cmp	r0, #0
 80090ce:	d0f2      	beq.n	80090b6 <_realloc_r+0x1c>
 80090d0:	4631      	mov	r1, r6
 80090d2:	4622      	mov	r2, r4
 80090d4:	f7ff fc00 	bl	80088d8 <memcpy>
 80090d8:	4631      	mov	r1, r6
 80090da:	4638      	mov	r0, r7
 80090dc:	f7ff fc10 	bl	8008900 <_free_r>
 80090e0:	e7e9      	b.n	80090b6 <_realloc_r+0x1c>
 80090e2:	4635      	mov	r5, r6
 80090e4:	e7e7      	b.n	80090b6 <_realloc_r+0x1c>

080090e6 <_malloc_usable_size_r>:
 80090e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090ea:	1f18      	subs	r0, r3, #4
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	bfbc      	itt	lt
 80090f0:	580b      	ldrlt	r3, [r1, r0]
 80090f2:	18c0      	addlt	r0, r0, r3
 80090f4:	4770      	bx	lr
	...

080090f8 <_init>:
 80090f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090fa:	bf00      	nop
 80090fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090fe:	bc08      	pop	{r3}
 8009100:	469e      	mov	lr, r3
 8009102:	4770      	bx	lr

08009104 <_fini>:
 8009104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009106:	bf00      	nop
 8009108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800910a:	bc08      	pop	{r3}
 800910c:	469e      	mov	lr, r3
 800910e:	4770      	bx	lr
